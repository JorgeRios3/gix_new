#!/bin/env python
# -*- coding: iso-8859-15 -*-
#----------------------------------------------------------------------------
# Name:         gix.py
# Author:       Smartics, S.A. de C.V 
# Created:      02/Feb/2006
# Copyright:    Smartics, S.A. de C.V. & ( derechos compartidos con  Grupo Iclar )
#----------------------------------------------------------------------------

#from __future__ import with_statement
#with open("hello.txt") as f:
	#for line in f:
		#print line

#try:
	##import sqlalchemy
	#from sqlalchemy.engine.url import URL as URLSQL
	#from sqlalchemy import create_engine
	#from sqlalchemy import MetaData
#except:
	#pass
	
#############
import os
try:
	import wx.lib.agw.toasterbox as TB

	class ToasterBoxSimple(object):
	
		@classmethod
		def play(cls, win, mensaje):
			tb = TB.ToasterBox(win, TB.TB_SIMPLE, TB.TB_DEFAULT_STYLE, TB.TB_ONTIME, scrollType = TB.TB_SCR_TYPE_DU)
			tb.SetPopupSize((230,150))
			tb.SetPopupPosition((220,340))
			tb.SetPopupPauseTime(4000)
			tb.SetPopupScrollSpeed(8)
			#tb.SetPopupBackgroundColour(wx.Colour(153, 255, 153))
			tb.SetPopupTextColour(wx.NamedColour("BLUE"))
			tb.SetPopupText(mensaje)
			tb.SetPopupTextFont(win.GetFont())
			#tb.SetPopupBitmap("images/build2.bmp")
			tb.Play()
except:
	pass
		
#ToasterBox.play(self, "lo que quieres que se despliegue")
################

#############
try:
	import wx.lib.agw.toasterbox as TB
	import wx.lib.hyperlink as hyperlink
	from wx.lib.ticker import Ticker

	class ToasterBoxComplex(object):
	
		@classmethod
		def play(cls, win, mensaje, usuario):
			tb = TB.ToasterBox(win, TB.TB_COMPLEX, TB.TB_DEFAULT_STYLE, TB.TB_ONTIME, scrollType = TB.TB_SCR_TYPE_UD)
			tb.SetPopupSize((200,110))
			y = 620
			if wx.Platform == '__WXMSW__':
				y = 530

			tb.SetPopupPosition((300, y))
			tb.SetPopupPauseTime(5000)
			#tb.SetPopupScrollSpeed(8)
			#tb.SetPopupBackgroundColour(wx.Colour(153, 255, 153))
			tb.SetPopupBackgroundColour(wx.NamedColour("Goldenrod"))
			#tb.SetPopupTextColour(wx.NamedColour("Navy"))
			#tb.SetPopupText(mensaje)
			tb.SetPopupTextFont(win.GetFont())
			#tb.SetPopupBitmap("images/build2.bmp")
			
			tbpanel = tb.GetToasterBoxWindow()
			panel = wx.Panel(tbpanel, -1)
		
			sizer = wx.BoxSizer(wx.VERTICAL)
			horsizer1 = wx.BoxSizer(wx.HORIZONTAL)
		
			myimage = wx.Bitmap("useravatar.png", wx.BITMAP_TYPE_PNG)
			stbmp = wx.StaticBitmap(panel, -1, myimage)
			horsizer1.Add(stbmp, 0)
		
			strs = u"\n%s" % usuario
			sttext = wx.StaticText(panel, -1, strs)
			horsizer1.Add(sttext, 1, wx.EXPAND | wx.LEFT | wx.RIGHT, 5)
		
			hl = hyperlink.HyperLinkCtrl(panel, -1, "Sitio Web", URL="http://www.grupoiclar.com")
		
			sizer.Add((0,5))        
			sizer.Add(horsizer1, 0, wx.EXPAND)
		
			horsizer2 = wx.BoxSizer(wx.HORIZONTAL)
			horsizer2.Add((120, 0))
			horsizer2.Add(hl, 0, wx.EXPAND | wx.TOP, 10)
			sizer.Add(horsizer2, 0, wx.EXPAND)
		
			tk = Ticker(panel)
			tk.SetText(mensaje)
			
			horsizer3 = wx.BoxSizer(wx.HORIZONTAL)
			horsizer3.Add((5, 0))
			horsizer3.Add(tk, 1, wx.EXPAND | wx.TOP, 10)
			horsizer3.Add((5,0))
			sizer.Add(horsizer3, 0, wx.EXPAND)
			
			sizer.Layout()
			panel.SetSizer(sizer)
			
			tb.AddPanel(panel)

			tb.Play()
except:
	pass
		
#ToasterBox.play(self, "lo que quieres que se despliegue")
################


#Para obtener los m�dulos instalados (about).
#from pip.util import get_installed_distributions
#whatIwant = False # set this to True if in a virtualenv
#for x in get_installed_distributions(local_only = whatIwant):
   #print x

try:
	from agw import genericmessagedialog as GMD
except ImportError: # if it's not there locally, try the wxPython lib.
	try:
		import wx.lib.agw.genericmessagedialog as GMD
	except:
		pass
   
import wx
import wx.lib.colourdb as colourdb
from wx.lib.dialogs import ScrolledMessageDialog 
from wx.lib.calendar import CalenDlg
from wx.lib.expando import ExpandoTextCtrl, EVT_ETC_LAYOUT_NEEDED
import wx.lib.scrolledpanel as scrolled

try:
	from agw import advancedsplash as AS
except ImportError:
	try:
		import wx.lib.agw.advancedsplash as AS
	except:
		pass
    
import decimal
from decimal import Decimal
import sys
import getopt
import pyXLWriter as xl
try:
	import pyExcelerator as xle
except:
	pass
try:
	import reportlab
except:
	pass
import os
import subprocess
import wx.grid as gridlib
import string
#import md5
try:
	from hashlib import md5
except:
	from md5 import md5
import glob
import sqlite3
import warnings
import logging
import socket
#try:
	#import sqlalchemy
	#from sqlalchemy import Table, Column, MetaData, create_engine, String, Integer, Date, select
	#from sqlalchemy.engine.url import URL
	
	#engine = create_engine("postgres://postgres:iclar@172.16.25.106/test")
	#conn = engine.connect()
	#cu = conn.connection.cursor()
	#cu.execute(str("select count(*) from prueba"))
	#row = cu.fetchone()
	#cu.close()
	
	##url = URL(drivername = "mssql", username = "iclarusergi", password = "iclaruserxyz", host = "www.grupoiclar.com", port = 17422, database = "pruebas")
	#url = URL(drivername = "mssql", username = "iclarusergi", password = "iclaruserxyz", host = "172.16.25.42\\ICLARINSTANCE", port = 1063, database = "pruebas")
	#engine2 = create_engine(url)
	#conn2 = engine2.connect()
	#cu2 = conn2.connection.cursor()
	#cu2.execute("select count(*) from usuarios")
	#row2 = cu2.fetchone()
	#cu2.close()
	
	##url = URL(drivername = "mssql", username = "iclarusergi", password = "iclaruserxyz", host = "www.grupoiclar.com", port = 17422, database = "pruebas")
	#url3 = URL(drivername = "mssql", username = "iclarusergi", password = "iclaruserxyz", host = "172.16.25.42\\ICLARINSTANCE", port = 1063, database = "pruebas")
	#engine3 = create_engine(url3)
	##extrayendo conexion desde el engine y haciendo las cosas como siempre
	#conn3 = engine3.connect()
	#cu3 = conn3.connection.cursor()
	#cu3.execute( "select count(*) from usuarios")
	#row3 = cu3.fetchone()
	#cu3.close()
	## una forma tipo sqlalchemy de hacer un query.. Ojo esto no es ORM sino con las capacidades de expresividad python para el sql.
	#metadata = MetaData()
	#metadata.bind = engine3
	#usuarios = Table("usuarios", metadata, autoload = True )
	#for x in select([usuarios], order_by = usuarios.c.Usuario ).execute():
		#print x[usuarios.c.Usuario]
	
#except:
	#warnings.warn("<<No hubo conexi�n con el coordinador central de postgresql>>\n\n%s" % conn)
	#Mensajes().Error(self, u"� Se hubo conexi�n con el coordinador central de postgresql !", u"Atenci�n")
try:
	import dbfpy.dbf
except:
	pass

import wx.lib.mixins.listctrl as listmix
import calendar
if wx.Platform == '__WXMSW__':
	import _winreg
#try:
	#from Rpyc import SocketConnection, obtain
	#from Rpyc import __version__ as rpycversion
	#from Rpyc import Serving as sv
#except:
	#pass

try:
	import json
except:
	try:
		import simplejson as json
	except:
		json = ""
if json:
	from urllib2 import urlopen
	from urllib import urlencode

try:
	import sitecustomize
except:
	pass

import cStringIO
try:
	from genshi.template import MarkupTemplate
except:
	pass

try:
	import sx.pisa3 as pisa
except:
	try:
		from ho import pisa as pisa
	except:
		pass
	
from gix_wdr import *
#from gixmenu import gixMenu
from wx.html import HtmlEasyPrinting
from gixutils import asignaSocket, asignaSocket2, asignaConexion, CantidadAPalabras, GixBase, GixCatalogoGridBase, GixFrameCatalogo
from gixutils import thousands_commas, amount_and_cents_with_commas, sendmail, logcontents, aletras, Parametro
from gixutils import GixGridHtmlPrinting, GixIntervaloFechasDialog, GixProductoIntervaloFechasDialog, GixContabilidad
from gixutils import Mensajes, WxWidget2Excel, NullGridRenderer, TextDocPrintout, cuentanula, NotifyTimer
from gixutils import CommaFormattedRenderer, GixBaseListCtrl, asignaJsonweb, asignaForce, asignaEngine, asignaMcache
from gixutils import asignaConexionGcmex, SetChoiceIndex, asignaMenosUno
#from gixutils import logger
c2p = CantidadAPalabras

#from gixutils import *
#x = lambda x: (x>0 and (2+x)) or 23     ej. del uso de lambda

from gixversion import version as GIXVERSION

locale = None
LOG_FILENAME = "gixlogging.txt"
ALPHA_ONLY = 1
DIGIT_ONLY = 2
LENGTH_FLAG = 3
POSITIVE_AMOUNT_FLAG = 4
SUSCRIPTOR = None
DICEMPRESAS = {}
PASSWORD = "132435"
FORCEHOST, FORCELOCAL, FORCEPORT, FORCEINSTANCE, FORCERPYC = "", "", "", "", ""
FORCEWEB, FORCETEST, FORCEQUERYONLY, FORCEGCMEX, FORCESCROLL = "", "", "", "", ""
SMARTICS, G_USER = "", ""
MACHINE_HASH_VALUE = None
URL = "iguana.grupoiclar.com"
#URL = "201.116.243.213"
URL = "192.168.1.124"
#URL = "172.16.25.106"
URLSMAIL = "http://%s:8028/smail" % URL
#URLSMAIL = "http://www.grupoiclar.com:8028/smail"
#URLSMAIL = "http://172.16.25.106:8028/smail"
#log_queue = []
#r_cn = None

from time import clock, strptime, sleep
from datetime import datetime
from datetime import date
from datetime import datetime as xdt
from datetime import time
import random

try:
	import dbi
	import odbc
	import wx.lib.inspection
except:
	pass

try:
	from mako.template import Template
	from mako.runtime import Context
	try:
		from mako.util import FastEncodingBuffer
	except:
		pass
except:
	pass

#try:
	#import memcache
#except:
	#pass

import gixmodel

#from ObjectListView import ObjectListView, VirtualObjectListView, FastObjectListView, GroupListView, ColumnDefn
#from ObjectListView import EVT_CELL_EDIT_STARTING, EVT_CELL_EDIT_FINISHING, CellEditorRegistry
#from ObjectListView import ListCtrlPrinter, ReportFormat
#from ObjectListView import Filter

#import OwnerDrawnEditor

sys.path.append("..")

def aviso(mensaje):
	logging.debug("<<%s>>" % mensaje)

#def conectar_con_server2(force_rpyc = False, force_host = False, force_port = False, force_local = False,
			#force_test = False, force_instance = False, force_web = False, smartics = False):
	
	#""" Gix debe al menos conectarse de manera autentificada (* esta funcionalidad autentificada fue suprimida en rpyc 2.6)
	#a un threaded server de Rpyc ( Remote Python Call http://rpyc.sf.net ).
	
	#Si la conexion al Rpyc es exitosa , entonces de manera remota debe obtener los datos de conexion
	#al SQL Server.
	
	#Los datos obtenidos en el list cn_data serian usados para conectarse a SQLServer de manera directa con
	#pymssql, ello si queremos conectarnos directamente.
	
	#Si asi lo necesitamos debemos entonces recurrir al
	#zebedee ( version 2.5.2 beta ) para "entunelar" , pues quien recibe en Iclar 
	#es Linux y no tiene abierto el puerto de sql server
	#por direccionamiento de puerto hacia la instance de VMware que ejecuta el sql server.  La unica manera de 
	#llegarle al SQL Server es por medio de zebedee puerto 11096.  Bueno actualmente es posible
	#pero no conviene poner el puerto en codigo pues sa esta abierto ( sin password ).
	
	#Ej. de datos de acceso directo de zebedee hacia Iclar para hacer esto...
	#"C:\Archivos de programa\Zebedee\zebedee.exe" -f "C:\archivos de programa\zebedee\iclar.zbd" -d 200.67.119.240  11096:172.16.25.102:1433
	
	#Pero la otra alternativa es usar el Rpyc y dejar que sea el Linux Server el encargado de hacer todo
	#lo de la base de datos ( conectarse, hacer queries , etc ).  Este mecanismo ha probado ser lento de manera remota.
	
	#En este mecanismo el contacto no es directo al engine sino a trav�s de SQLRelay que es un Proxy 
	#de base de datos, que a su vez requiere su propia autentificacion
	#y usa el puerto 9000.  Este mecanismo como corre directamente desde el Linux Server esconde los secretos alli
	#y no esta expuesto en este codigo.
	
	#Para forzar uso de rpyc como mecanismo de utilizaci�n de SQL Server basta tener un archivo llamado forcerpyc en el 
	#mismo directorio donde se encuentra este archivo de codigo fuente. 
	
	#Nota:  todos los usuarios de GI o GIX usan al mismo nombre usuario de sql server para loggearse al engine
	#Es en base una tabla de usuarios que el propio sistema restringe o permite privilegios sobre la aplicaci�n
	#"""

	#global mcache
	#mcache = False
	#try:
		#if memcache:
			#if force_port:
				#if wx.Platform != '__WXMSW__':
					#mcache = memcache.Client(["127.0.0.1:11211"], debug = 0)
				#else:
					#pass
			#else:
				#mcache = memcache.Client(["172.16.25.106:11211"], debug = 0)
	#except:
		#pass
	#asignaMcache(mcache)
	
	#global jsonweb
	#global r_socket
	#global r_socket2
	#global r_cn
	#global auto_ansi2oem
	#global FORCEHOST; global FORCELOCAL; global FORCEPORT; global FORCEINSTANCE
	#global FORCERPYC; global FORCEWEB; global FORCETEST; global SMARTICS
	
	#FORCEHOST = force_host; FORCELOCAL = force_local; FORCEPORT = force_port; FORCEINSTANCE = force_instance
	#FORCERPYC = force_rpyc; FORCEWEB = force_web; FORCETEST = force_test; SMARTICS = smartics
	#asignaForce(FORCEHOST, FORCELOCAL, FORCEPORT, FORCEINSTANCE, FORCERPYC, FORCEWEB, FORCETEST, SMARTICS)
	
	#if sys.version_info[0] != 2 or sys.version_info[1] not in ( 4,5,6):
		#wx.MessageBox(u"Solo se puede correr Gix desde la versi�n 2.4 o 2.5 de python")
		#return False
	
	#if force_web:
		#if json:
			#forcetup = ("rpyc", "host", "port", "local", "test", "instance")
			#forcelst = ["&force%s=1" % switch for switch in forcetup if eval("force_%s" % switch)]
			#if forcelst:
				#forceon = ""
				#for force in forcelst:
					#forceon += force
				#try:
					#json_string = urlopen("http://%s:8028/cred?auth=gix%s" % (URL, forceon)).read()
					##json_string = urlopen("http://www.grupoiclar.com:8028/cred?auth=gix%s" % forceon).read()
					##json_string = urlopen("http://172.16.25.106:8028/cred?auth=gix%s" % forceon).read()
					#foo = json.loads(json_string)
					#cn_data = tuple(map(str, foo["con"]))
					#r_socket, r_socket2 = "", ""
					#asignaSocket(r_socket)
					#asignaSocket2(r_socket2)
					#jsonweb = "http://172.16.25.106:8028/smail"
				#except:
					#return False
			#else:
				#return False
		#else:
			#return False
	#else:
		#jsonweb = False
		#servidorrpyc = "www.grupoiclar.com"
		##servidorrpyc = "172.16.25.106"
		#port_offset = 0
		#if sys.version_info[1] == 5:
			#port_offset = 2
			
		#if force_local:
			#servidorrpyc = "172.16.25.106"
	
		#try:
			#r_socket = SocketConnection(servidorrpyc, port = sv.DEFAULT_PORT + port_offset)
		#except:
			#return False
			
		#cn_data = r_socket.modules.gix.db.data("gix", forcehost = force_host, forceport = force_port,
						       #forcelocal = force_local, forcetest = force_test,
						       #forceinstance = force_instance)
	#asignaJsonweb(jsonweb)
	
	#auto_ansi2oem = "Ansi2Oem Not Started"
	#engine2 = None
	#if not force_rpyc:
		#try:
			#from pymssql import *
			#if wx.Platform == '__WXMSW__':
				#try:
					#aviso("<<intento en try. WIN>>")
					#x = _winreg.ConnectRegistry( None, _winreg.HKEY_LOCAL_MACHINE)
					#y = _winreg.OpenKey(x, r"SOFTWARE\Microsoft\MSSQLServer\Client\DB-Lib",0, _winreg.KEY_ALL_ACCESS)
					#_winreg.SetValueEx(y, "AutoAnsiToOem",0, _winreg.REG_EXPAND_SZ, "OFF")
					#try:
						#url = URLSQL(drivername = "mssql", username = cn_data[1], password = cn_data[2],
							     #host = cn_data[4], port = cn_data[5], database = cn_data[3])
						#engine2 = create_engine(url)
						#conn = engine2.connect()
						#r_cn = conn.connection.connection
					#except:
						#r_cn = connect(host = cn_data[0], user = cn_data[1], password = cn_data[2], database = cn_data[3])
					#_winreg.SetValueEx(y, "AutoAnsiToOem",0, _winreg.REG_EXPAND_SZ, "ON")
					#_winreg.CloseKey(y)
					#_winreg.CloseKey(x)
					#auto_ansi2oem = "Ansi2Oem Started Good"
				#except:
					#aviso("<<epale, cai en el except. WIN>>")
					#try:
						#url = URLSQL(drivername = "mssql", username = cn_data[1], password = cn_data[2],
							     #host = cn_data[4], port = cn_data[5], database = cn_data[3])
						#engine2 = create_engine(url)
						#conn = engine2.connect()
						#r_cn = conn.connection.connection
					#except:
						#r_cn = connect(host = cn_data[0], user = cn_data[1], password = cn_data[2], database = cn_data[3])
					#auto_ansi2oem = "Ansi2Oem Not Found"
			#else:
				#ciclar = "iclar"
				#if force_instance:
					#if force_port:
						#ciclar = "iclarx2"
					#else:
						#ciclar = "iclarx"
				#elif force_port:
					#ciclar = "iclar2"
				#try:
					#aviso("<<intento en try. MAC>>")
					#url = URLSQL(drivername = "mssql", username = cn_data[1], password = cn_data[2],
						     #host = cn_data[4], port = cn_data[5], database = cn_data[3])
					#engine2 = create_engine(url)
					#conn = engine2.connect()
					#r_cn = conn.connection.connection
					#raise
				#except:
					#aviso("<<epale, cai en el except. MAC>>")
					##r_cn = connect(host = cn_data[0], user = cn_data[1], password = cn_data[2], database = cn_data[3])
					#r_cn = connect(host = ciclar, user = cn_data[1], password = cn_data[2], database = cn_data[3])
				#auto_ansi2oem = "Ansi2Oem Not Started in Mac"
				
			
			#asignaConexion(r_cn)
			#asignaEngine(engine2)
			#if not jsonweb:
				#r_socket = None
				#asignaSocket(r_socket)
				#r_socket2 = SocketConnection(servidorrpyc, port = sv.DEFAULT_PORT + port_offset)
				#asignaSocket2(r_socket2)
				##sendmail(["director@smartics.biz"], message = kjkjdf)
				##sendmail(["director@smartics.biz"])
				
			#return True
				
		#except:
			#auto_ansi2oem = "Ansi2Oem Failure to Launch"
			
	#try:
		#if not jsonweb:
			#r_cn = r_socket.modules.gix.db.connect("gix")
			#if not r_cn:
				#return False
			#asignaSocket( r_socket )
			#asignaConexion(r_cn)
			#r_socket2 = SocketConnection(servidorrpyc, port = sv.DEFAULT_PORT + port_offset)
			#asignaSocket2(r_socket2)
		
		#return True
	#except:
		#return False

		
## WDR: classes

def fetchall(cu):
	""" Wrapper function de fetchall()
	para usar de manera indistinta rpyc o dbapi
	"""
	r_socket = False
	if r_socket:
		try:
			rows = obtain(cu.fetchall())
		except:
			rows = None
	else:
		try:
			rows = cu.fetchall()
		except:
			rows = None
	return rows

def fetchone(cu):
	
	""" Wrapper function de fetchone()
	para usar de manera indistinta rpyc o dbapi ( digamos pymssql )
	"""
	r_socket = False
	if r_socket:
		try:
			row = obtain(cu.fetchone())
		except:
			row = None
	else:
		try:
			row = cu.fetchone()
		except:
			row = None
	return row

class BBRequest(object):
        def __init__(self, request = "foo", user = "X", source = "X", args = ""):
                self.request = request
                self.user = user
                self.source = source
                self.args = args #args debe ser un diccionario con los parametros en si.

def setParametersInMemcache(req, test = False ):
        rtest = ""
        if test:
                rtest= "?test=1"
        dicX = json.loads(urlopen("http://%s:8028/queue_put%s" % (URL, rtest)).read())
        #dicX = json.loads(urlopen("http://www.grupoiclar.com:8028/queue_put%s" % rtest ).read())
        #dicX = json.loads(urlopen("http://172.16.25.106:8028/queue_put%s" % rtest ).read())
        key = str(dicX.get("value",""))
        if not key:
                return ""
        valor = mcache.set(key, req, 300)
        if test:
                xtest = "1"
        else:
                xtest = ""
        values = dict( test = xtest, value = key)
        data = urlencode(values)
        dicX = json.loads(urlopen("http://%s:8028/queue_confirm?%s" % (URL, data)).read())
        #dicX = json.loads(urlopen("http://www.grupoiclar.com:8028/queue_confirm?%s" % data).read())
        #dicX = json.loads(urlopen("http://172.16.25.106:8028/queue_confirm?%s" % data).read())
        ckey = str(dicX.get("value",""))
        if ckey != key:
                return ""
        if test:
		reschar = "r"
        else:
		reschar = "R"
        rkey = reschar + key[1:]
        return rkey

def asignaUser(usr):
	global G_USER
	G_USER = usr
	
def preparaRequest(name, msg):
	global MACHINE_HASH_VALUE
	if not MACHINE_HASH_VALUE:
		getMachineHash()
		if not MACHINE_HASH_VALUE:
			return False
	
	return dict(usuario = str(G_USER), modulo = name, mensaje = msg, hash_value = MACHINE_HASH_VALUE)

def getMachineHash():
	global MACHINE_HASH_VALUE, G_USER
	try:
		valor = open("loghash").read()
	except:
		dicX = json.loads(urlopen("http://%s:8028/queue_put" % URL).read())
		dato = str(dicX.get("value",""))
		if not dato:
			valor = None
		else:
			#m = md5.new()
			#m.update(dato)
			valor = md5(dato).hexdigest()
			f = open("loghash", "w")
			f.write(valor)
			f.close()
			ip = socket.gethostbyname(socket.gethostname())
			sql = """
			insert into gixdispositivos (ip, descripcion, hash)
			values ('%s', 'Por identificar - Usr: %s', '%s')
			""" % (ip, G_USER, valor)
			cursor = r_cn.cursor()
			cursor.execute( str(sql) )
			r_cn.commit()
			cursor.close()
		
	MACHINE_HASH_VALUE = valor
	
def logger(f, name = None):
	try:
		if name is None:
			name = f.func_name
		def wrapped(*args, **kwargs):
			msg = f.__doc__; msg = msg.replace('\t', ' '); msg = msg.replace('\n', ' '); msg = msg.strip()
			d = preparaRequest(name, msg)
			if not d:
				warnings.warn("<<Problemas en obtencion de MACHINE_HASH_VALUE logger>>")
				return
			req = dict(request = "logappend", user = "smartics", source = "gix", args = d )
			rkey = setParametersInMemcache(req, FORCETEST)
			result = f(*args, **kwargs)
			return result
		wrapped.__doc__ = f.__doc__
		return wrapped
	except:
		warnings.warn("<<Problemas en decorator logger>>")

class Usage(Exception):
	def __init__(self, msg):
		self.msg = msg

class MyValidator(wx.PyValidator):
	def __init__(self, flag=None, pyVar=None, longitud = 0):
		wx.PyValidator.__init__(self)
		self.flag = flag
		self.longitud = longitud
		self.Bind(wx.EVT_CHAR, self.OnChar)

	def Clone(self):
		return MyValidator(self.flag, longitud = self.longitud)
	
	def TransferToWindow(self):
		return True
	
	def TransferFromWindow(self):
		return True

	def Validate(self, win):
		tc = self.GetWindow()
		val = tc.GetValue()
	
		if self.flag == ALPHA_ONLY:
			for x in val:
				if x not in string.letters:
					return False

		elif self.flag == DIGIT_ONLY:
			for x in val:
				if x not in string.digits:
					return False
			
		elif self.flag == LENGTH_FLAG:
			if len(val) > self.longitud:
				return False
		
		elif self.flag == POSITIVE_AMOUNT_FLAG:
			try:
				if len(val) > 0:
					foo = float(val)
			except:
				return False
			

		return True
	

	def OnChar(self, event):
		
		tc = self.GetWindow()
		val = tc.GetValue() 
		widgetsize = len(val) + 1
		try:
			key = event.KeyCode()
		except:
			try:
				key = event.GetKeyCode()
			except:
				event.Skip()
				return
		
		if key < wx.WXK_SPACE or key == wx.WXK_DELETE or key > 255:
			event.Skip()
			return
	
		if self.flag == ALPHA_ONLY and chr(key) in string.letters:
			event.Skip()
			return
	
		if self.flag == DIGIT_ONLY and chr(key) in string.digits:
			event.Skip()
			return
		
		if self.flag == LENGTH_FLAG and widgetsize <= self.longitud:
			event.Skip()
			return
		
		if self.flag == POSITIVE_AMOUNT_FLAG:
			try:
				if len(val) > 0:
					foo = float(val)
				
				event.Skip()
				return
			except:
				pass
	
		if not wx.Validator_IsSilent():
			wx.Bell()
	
		# Returning without calling even.Skip eats the event before it
		# gets to the text control
		return

class GixArbol( wx.Dialog , GixBase):

	InmueblesDict = {} # para no repetir la carga
	dicNodeInfo = {} # donde se guarda lo seleccionado
	def __init__(self, parent, id, title,
		pos = wx.DefaultPosition, size = wx.DefaultSize,
		style = wx.DEFAULT_DIALOG_STYLE ):
		
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		
		
		item0 = wx.BoxSizer( wx.VERTICAL )
	
		item1 = wx.TreeCtrl( self, 66 , wx.DefaultPosition, [500,400], wx.TR_HAS_BUTTONS|wx.TR_LINES_AT_ROOT|wx.SUNKEN_BORDER )
		item0.Add( item1, 0, wx.ALIGN_CENTER|wx.ALL, 5 )
		
		self.SetSizer( item0 )
		item0.SetSizeHints( self )
		
				
		self.tree = item1 
		
		self.tree.Bind(wx.EVT_TREE_ITEM_EXPANDING, self.OnExpanding)
		self.tree.Bind(wx.EVT_TREE_SEL_CHANGED, self.OnSelChanged)
		
	
	
	def FillTree(self):
		""""Aqui se llenan los nodos de toda la estructura salvo inmuebles.
		Parece ser que los iconos asociados a un TreeItem conforme se van asignando via SetItemImage,
		los descendientes los siguen teniendo iguales a menos que se reasignen otros iconos a su nivel.
		"""
		wx.BeginBusyCursor()
		tree = self.tree
		tree.DeleteAllItems()
		
		isz = (16,16)
		il = wx.ImageList(16,16)
		self.fldridx     = il.Add(wx.ArtProvider.GetBitmap(wx.ART_FOLDER,      wx.ART_OTHER, isz))
		self.fldropenidx = il.Add(wx.ArtProvider.GetBitmap(wx.ART_FILE_OPEN,   wx.ART_OTHER, isz))
		self.fileidx     = il.Add(wx.ArtProvider.GetBitmap(wx.ART_NORMAL_FILE, wx.ART_OTHER, isz))
		tree.AssignImageList(il)
		root = tree.AddRoot("Empresas")

		tree.SetItemImage(root, self.fldridx, wx.TreeItemIcon_Normal)
		tree.SetItemImage(root, self.fldropenidx, wx.TreeItemIcon_Expanded)
		
		tree.SetPyData( root, None )
		
		sql = """
		select e.codigo, e.razonsocial, d.codigo, d.descripcion, t.codigo, t.descripcion from 
		etapa t join desarrollo d on t.fk_desarrollo = d.codigo join empresa e 
		on d.fk_empresa = e.codigo order by 2,4,5
		"""
		
		cursor = r_cn.cursor()
		cursor.execute( str(sql) )
		rows = fetchall(cursor)
		cursor.close()
		
		prevEmpresa = ""
		prevDesarrollo = ""
		
		if rows:
			
			for row in rows:
				
				laempresa = self.GetStringFromField(row[1])
				eldesarrollo = self.GetStringFromField(row[3])
				laetapa = self.GetStringFromField(row[5])
				if laempresa != prevEmpresa:
					
					empresas = tree.AppendItem( root, "%s" % laempresa)
					tree.SetPyData(empresas, "E%s" % row[0])
					prevEmpresa = laempresa
					
				if eldesarrollo != prevDesarrollo:
					desarrollos = tree.AppendItem( empresas, "%s" % eldesarrollo)
					tree.SetPyData(desarrollos, "D%s" % row[2])
					prevDesarrollo = eldesarrollo
					
				etapas = tree.AppendItem( desarrollos, "%s" % laetapa)
				tree.SetPyData( etapas, "T%s" % str(row[4]))
				tree.SetItemHasChildren(etapas)
								
		wx.EndBusyCursor()
		
	
	def OnSelChanged(self,event):
		tree = self.tree
		item = event.GetItem()
		orden = "ITDE"  # i de inmueble t de etapa d de desarrollo e de empresa
		data = tree.GetPyData(item)
		dInfo = dict(E=None, D=None, T=None, I=None)
		if data:
			dInfo[data[0]] = data[1:]
			try:
				letras = orden[orden.index(data[0])+1:]
				for letra in letras:
					nuevo = tree.GetItemParent(item)
					ndata = tree.GetPyData(nuevo)
					dInfo[ndata[0]] = ndata[1:]
					item = nuevo
			except:
				pass
				
		self.dicNodeInfo = dInfo
		
	
	def OnExpanding(self,event):
		tree = self.tree
		
		item = event.GetItem()
		
		valor = tree.GetPyData(item)
		if valor is None:
			valor = ""
		else:
			valor = str(valor)
		if valor.startswith("T"):
			
			
			if not self.InmueblesDict.has_key(valor):
				
			
				wx.BeginBusyCursor()
				self.InmueblesDict[valor] = True
				sql = "SELECT iden2, iden1, domiciliooficial, codigo from inmueble where fk_etapa = %s order by iden2,iden1" % valor[1:]
				cursor = r_cn.cursor()
				cursor.execute(str(sql))
				rows = fetchall(cursor)
				cursor.close()
				if rows:
					self.InmueblesDict[valor] = True
					for row in rows:
						inmuebles = tree.AppendItem(item, "%s %s %s" % (str(row[0]), str(row[1]), self.GetStringFromField(row[2])))
						tree.SetPyData( inmuebles, "I%s" % row[3])
						tree.SetItemImage(inmuebles, self.fileidx, wx.TreeItemIcon_Normal)
				
				wx.EndBusyCursor()

				
class GixCatalogoCuentasContabilidad(wx.Frame, GixBase):
	
	NewFlag = False
	ValidarControles = False
	ControlesEspeciales = False
	CuentaNueva = False
	EsTipoDeCuenta = False
	VengoDelSelect = False
	VengoDeUpdate = False
	VengoDeDelete = False
	VengoDeAdd = False
	ultimo = 0

	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE ):
		
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		
		global SUSCRIPTOR
		SUSCRIPTOR = self
		self.suscriptions = []
		
		self.SubcuentasDict = {}    # para no repetir la carga
		
		self.SetMenuBar( ABCMenuBarFuncTree() )
		
		self.tb = self.CreateToolBar ( wx.TB_HORIZONTAL | wx.NO_BORDER | wx.TB_FLAT )  # wx.TB_TEXT incluye texto
		ABCToolBarFuncTree(self.tb)
		
		panel = wx.Panel(self, -1)
		CatalogoCuentasContabilidad(panel, True, True )
		
		anchos = [-1,360]
		self.CreateStatusBar(2)
		self.SetStatusWidths(anchos)
		self.SetStatusText(u"Contabilidad", 0)
		self.SetStatusText(u"Estructura", 1)

		self.tree = self.GetControl(ID_TREECTRL_CATALOGO_CUENTAS_CONTABILIDAD)
		self.tree.Bind(wx.EVT_TREE_ITEM_EXPANDING, self.OnExpanding)
		self.tree.Bind(wx.EVT_TREE_SEL_CHANGED, self.OnSelChanged)
		self.tree.Bind(wx.EVT_TREE_ITEM_ACTIVATED, self.OnDoubleClick)
		
		wx.EVT_MENU(self, ID_MENUSALIRTREE, self.OnSalir)
		wx.EVT_MENU(self, ID_MENUFIRSTTREE, self.OnMoveFirst)
		wx.EVT_TOOL(self, ID_TOOLFIRSTCATCTACON, self.OnMoveFirst)
		wx.EVT_MENU(self, ID_MENUPREVTREE, self.OnMovePrevious)
		wx.EVT_TOOL(self, ID_TOOLPREVCATCTACON, self.OnMovePrevious)
		wx.EVT_MENU(self, ID_MENUNEXTTREE, self.OnMoveNext)
		wx.EVT_TOOL(self, ID_TOOLNEXTCATCTACON, self.OnMoveNext)
		wx.EVT_MENU(self, ID_MENULASTTREE, self.OnMoveLast)
		wx.EVT_TOOL(self, ID_TOOLLASTCATCTACON, self.OnMoveLast)
		wx.EVT_MENU(self, ID_MENUEXPTREE, self.OnExpand)
		wx.EVT_TOOL(self, ID_TOOLEXPCATCTACON, self.OnExpand)
		wx.EVT_MENU(self, ID_MENUCOLTREE, self.OnCollapse)
		wx.EVT_TOOL(self, ID_TOOLCOLCATCTACON, self.OnCollapse)
		wx.EVT_MENU(self, ID_MENUREFTREE, self.OnRefrescar)
		wx.EVT_TOOL(self, ID_TOOLREFCATCTACON, self.OnRefrescar)
		wx.EVT_MENU(self, ID_MENUMINTREE, self.OnMin)
		wx.EVT_TOOL(self, ID_TOOLMINCATCTACON, self.OnMin)
		wx.EVT_MENU(self, ID_MENUMAXTREE, self.OnMax)
		wx.EVT_TOOL(self, ID_TOOLMAXCATCTACON, self.OnMax)
		
		self.Bind(wx.EVT_TOOL, self.OnSaveRecord, id = ID_TOOLSAVCATCTACON)
		self.Bind(wx.EVT_MENU, self.OnSaveRecord, id = ID_MENUGRABARTREE)
		self.Bind(wx.EVT_TOOL, self.OnNuevoRecord, id = ID_TOOLNEWCATCTACON)
		self.Bind(wx.EVT_MENU, self.OnNuevoRecord, id = ID_MENUNUEVOTREE)
		self.Bind(wx.EVT_TOOL, self.OnDeleteRecord, id = ID_TOOLDELCATCTACON)
		self.Bind(wx.EVT_MENU, self.OnDeleteRecord, id = ID_MENUELIMINARTREE)
		
		ctt = ["ID_TEXTCTRLCATCTACONCUENTA", "ID_TEXTCTRLCATCTACONDESCRIPCION", "ID_TEXTCTRLCATCTACONTIPOCUENTA"]
		self.controles_tipo_txt = dict(zip(ctt,map(eval,ctt)))
		self.originales = {}
		for v in self.controles_tipo_txt.itervalues():
			self.Bind(wx.EVT_TEXT, self.OnText, self.GetControl(v))
			self.originales[v] = ""
			
		self.originales[ID_CHECKBOXCATCTACONAFECTABLE] = ""
		self.originales[ID_RADIOBOXCATCTACONNATURALEZA] = ""

		wx.EVT_BUTTON(self, ID_BITMAPBUTTONCATCTACONTIPOCUENTA, self.OnElegirTipoCuenta)
		
		wx.EVT_CHECKBOX(self, ID_CHECKBOXCATCTACONAFECTABLE, self.OnAfectable)
		wx.EVT_RADIOBOX(self, ID_RADIOBOXCATCTACONNATURALEZA, self.OnNaturaleza)
		
		self.MenuSetter(ID_MENUNUEVOTREE, False)
		self.MenuSetter(ID_MENUELIMINARTREE, False)
		self.MenuSetter(ID_MENUGRABARTREE, False)
		self.MenuSetter(ID_MENUMAXTREE, False)
		
		self.dragctl = self.GetControl(ID_FOREIGNDRAG)
		self.dragctl.source = self.tree
		self.dragctl.Enable(False)
		
	def OnSalir(self, event):
		
		SUSCRIPTOR = None
		self.Destroy()
		
	def OnMoveFirst(self, event):

		tree = self.tree
		item = tree.GetFirstVisibleItem()
		if item:
			tree.SelectItem(item)
			
		return
		
	def OnMovePrevious(self, event):

		tree = self.tree
		item = tree.GetPrevVisible(tree.GetSelection())
		if item:
			tree.SelectItem(item)
			
		return
		
	def OnMoveNext(self, event):

		tree = self.tree
		item = tree.GetNextVisible(tree.GetSelection())
		if item:
			tree.SelectItem(item)
			
		return
		
	def OnMoveLast(self, event):

		tree = self.tree
		item = tree.GetLastChild(tree.GetSelection())
		if item:
			tree.SelectItem(item)
			
		return
		
	def OnExpand(self, event):

		tree = self.tree
		item = tree.GetSelection()
		if item:
			tree.Expand(item)
			
		return
		
	def OnCollapse(self, event):

		tree = self.tree
		item = tree.GetSelection()
		if item:
			tree.Collapse(item)
			
		return
	
	def OnRefrescar(self, event):
		
		self.empresa = 0
		self.Refrescar()
		if self.empresa:
			self.tree.ScrollTo(self.empresa)
		
		return
		
	def Refrescar(self):
		
		self.ValidarControles = False
		
		self.SubcuentasDict.clear()
		self.FillTree()
		self.GetControl(ID_NOTEBOOKCATCTACONTAB1).Enable(False)
		
		self.ValidarControles = True

	def OnMin(self, event):
		
		self.Min()
		
		return
		
	def Min(self):
		
		self.GetControl(ID_NOTEBOOKCATCTACONTAB1).Show(False)
		self.GetControl(ID_TREECTRL_CATALOGO_CUENTAS_CONTABILIDAD).Show(False)
		self.SetSize(wx.Size(442,620))
		self.Move(wx.Point(0, -1))
		anchos = [-1,100]
		self.SetStatusWidths(anchos)
		del anchos
		self.tb.EnableTool(ID_TOOLMINCATCTACON, False)
		self.tb.EnableTool(ID_TOOLMAXCATCTACON, True)
		self.MenuSetter(ID_MENUMINTREE, False)
		self.MenuSetter(ID_MENUMAXTREE, True)
		self.GetControl(ID_TREECTRL_CATALOGO_CUENTAS_CONTABILIDAD).Show()
		self.GetControl(ID_FOREIGNDRAG).Refresh()
		
		return
		
	def OnMax(self, event):
		
		self.GetControl(ID_NOTEBOOKCATCTACONTAB1).Show()
		self.SetSize(wx.Size(800,620))
		self.CentreOnScreen()
		anchos = [-1,360]
		self.SetStatusWidths(anchos)
		del anchos
		self.tb.EnableTool(ID_TOOLMAXCATCTACON, False)
		self.tb.EnableTool(ID_TOOLMINCATCTACON, True)
		self.MenuSetter(ID_MENUMAXTREE, False)
		self.MenuSetter(ID_MENUMINTREE, True)
		
		return
	
	def OnElegirTipoCuenta(self, event):
		
		self.inxtipocuenta = []
		self.chotipocuenta = []
		query = """
		select CuentaTipoID, Descripcion + ' - ' + convert(varchar(7), CuentaTipoID) + '                    '
		from cont_CuentaTipo order by Descripcion               
		"""
		cu = r_cn.cursor()
		cu.execute(query)
		rows = fetchall(cu)
		cu.close()
		
		for row in rows:
			self.inxtipocuenta.append(row[0])
			self.chotipocuenta.append(self.GetStringFromField(row[1]))

		self.index = wx.GetSingleChoiceIndex(u"Opciones",  u"Elegir Tipo de Cuenta", self.chotipocuenta, parent = None)
		
		if int(self.index) > -1:
			tipocuenta, trash = self.chotipocuenta[self.index].split(' - ')
			self.GetControl(ID_TEXTCTRLCATCTACONTIPOCUENTA).SetValue(str(self.inxtipocuenta[self.index]))
			self.GetControl(ID_CATCTACONTIPOCUENTA).SetLabel(self.GetStringFromField(tipocuenta))
			
		return

	def OnAfectable(self, event):
		
		self.controlactual = ID_TEXTCTRLCATCTACONTIPOCUENTA  # para mantener valor en la variable
		self.EndOfOnTextTree(self.controlactual)      # para forzar checar cambios en valores originales de controles
		
		return
	
	def OnNaturaleza(self, event):
		
		self.controlactual = ID_TEXTCTRLCATCTACONTIPOCUENTA  # para mantener valor en la variable
		self.EndOfOnTextTree(self.controlactual)      # para forzar checar cambios en valores originales de controles
		
		return
	
	def OnText(self, event):
		
		if self.ValidarControles:
			self.controlactual = event.GetId()
			self.Text()
			
		return
	
	def Text(self, VengodelArbol = False):

		for id in (ID_TEXTCTRLCATCTACONCUENTA, ID_TEXTCTRLCATCTACONDESCRIPCION, ID_TEXTCTRLCATCTACONTIPOCUENTA):
			
			valor = self.GetControl(id).GetValue().strip()
			
			if valor == "" and self.ValidarControles and not self.NewFlag:
				self.NewFlag = True
				
				if not VengodelArbol:
					Mensajes().Info(self, u"� No debe quedar ning�n dato en blanco !", u"Atenci�n")
					return
					
		if self.ValidarControles:
			
			self.EndOfOnTextTree(self.controlactual)        
		
	def EndOfOnTextTree(self, id):
		
		self.GetControl(ID_TEXTCTRLCATCTACONTIPOCUENTA).SetEditable(True)  # revision de controles de texto
		if self.OriginalDistinto(id):
			self.GetControl(id).SetBackgroundColour(wx.CYAN)
			self.GetControl(id).Refresh()
		else:
			self.GetControl(id).SetBackgroundColour(wx.WHITE)
			self.GetControl(id).Refresh()
			
		if self.OriginalesDistintos():
			self.tb.EnableTool( ID_TOOLSAVCATCTACON, True)
			self.MenuSetter(ID_MENUGRABARTREE, True)
		else:
			self.tb.EnableTool( ID_TOOLSAVCATCTACON, False)
			self.MenuSetter(ID_MENUGRABARTREE, False)
		self.GetControl(ID_TEXTCTRLCATCTACONTIPOCUENTA).SetEditable(False)


		id = self.GetControl(ID_CHECKBOXCATCTACONAFECTABLE)                  # revisi�n de checkbox
		if id.GetValue() <> self.originales[ID_CHECKBOXCATCTACONAFECTABLE]:
			id.SetBackgroundColour(wx.CYAN)
			id.Refresh()
			self.tb.EnableTool( ID_TOOLSAVCATCTACON, True)
			self.MenuSetter(ID_MENUGRABARTREE, True)
		else:
			id.SetBackgroundColour(wx.NullColour)
			id.Refresh()

		id = self.GetControl(ID_RADIOBOXCATCTACONNATURALEZA)                 # revisi�n de radiobox
		if id.GetStringSelection() <> self.originales[ID_RADIOBOXCATCTACONNATURALEZA]:
			id.SetOwnBackgroundColour(wx.CYAN)
			id.Refresh()
			self.tb.EnableTool( ID_TOOLSAVCATCTACON, True)
			self.MenuSetter(ID_MENUGRABARTREE, True)
		else:
			id.SetOwnBackgroundColour(wx.NullColour)
			id.Refresh()
			
	def OnNuevoRecord(self, event):

		if self.EsEmpresa:
			
			self.NewFlag = True
			self.LimpiaDetalle(True)
			self.GetControl(ID_RADIOBOXCATCTACONNATURALEZA).SetStringSelection('Acreedora')
			self.GetControl(ID_CHECKBOXCATCTACONAFECTABLE).SetValue(False)
			self.ValoresOriginales()
			self.LimpiaColores()
			self.GetControl(ID_NOTEBOOKCATCTACONTAB1).Enable(True)
			self.GetControl(ID_TEXTCTRLCATCTACONCUENTA).SetFocus()
		
		elif self.EsTipoDeCuenta:
			
			self.NewFlag = True
			self.LimpiaDetalle(True)
			self.GetControl(ID_TEXTCTRLCATCTACONTIPOCUENTA).SetValue(str(self.CuentaTipoID))
			self.GetControl(ID_CATCTACONTIPOCUENTA).SetLabel(self.GetStringFromField(self.ObtenTipoCuenta(self.CuentaTipoID)))
			self.GetControl(ID_CHECKBOXCATCTACONAFECTABLE).SetValue(False)
			self.GetControl(ID_RADIOBOXCATCTACONNATURALEZA).SetStringSelection('Acreedora')
			self.ValoresOriginales()
			self.LimpiaColores()
			self.GetControl(ID_NOTEBOOKCATCTACONTAB1).Enable(True)
			self.GetControl(ID_TEXTCTRLCATCTACONCUENTA).SetFocus()
		
		else:

			if self.dicNodeInfo['C'][3]:
				
				Mensajes().Info(self, u"No puede agregar una subcuenta a la cuenta '%s %s'\n" \
								u"ya que esta se afecta directamente."
								% (self.dicNodeInfo['C'][6], self.dicNodeInfo['C'][5]), u"Atenci�n")
				return
			
			else:
				
				self.NewFlag = True
				self.LimpiaDetalle(True)
				
				self.GetControl(ID_TEXTCTRLCATCTACONTIPOCUENTA).SetValue(str(self.dicNodeInfo['C'][4]))
				
				if self.dicNodeInfo['C'][2] == 'A':
					self.GetControl(ID_RADIOBOXCATCTACONNATURALEZA).SetStringSelection('Acreedora')
				else:
					self.GetControl(ID_RADIOBOXCATCTACONNATURALEZA).SetStringSelection('Deudora')
				
				self.ValoresOriginales()
				self.LimpiaColores()
				
				cuenta = self.GetStringFromField(self.dicNodeInfo['C'][6])
				self.GetControl(ID_TEXTCTRLCATCTACONCUENTA).SetValue(cuenta)
				
				self.GetControl(ID_TEXTCTRLCATCTACONCUENTA).SetBackgroundColour(wx.CYAN)
				self.GetControl(ID_TEXTCTRLCATCTACONCUENTA).Refresh()
				
				self.GetControl(ID_TEXTCTRLCATCTACONCUENTA).SetFocus()
				self.GetControl(ID_TEXTCTRLCATCTACONCUENTA).SetSelection(-1, -1)
				
		return

	def OnDeleteRecord(self, event):

		if self.originales[ID_CHECKBOXCATCTACONAFECTABLE] == True:
			afectable = 1
		else:
			afectable = 0
			
		if not afectable:
			
			Mensajes().Info(self, u"No puede eliminar la cuenta '%s %s'\n" \
							u"ya que esta no se afecta directamente."
							% (self.dicNodeInfo['C'][6], self.dicNodeInfo['C'][5]), u"Atenci�n")
			return
		
		else:
			
			cuentaid = int(self.dataprev[1:])
			
			sqlhija = """
			select count(*) from cont_Cuentas where HijaDeCuentaID = %s
			""" % cuentaid
			cursor = r_cn.cursor()
			cursor.execute( str(sqlhija) )
			rowscount = fetchone(cursor)[0]
			cursor.close()

			if rowscount:
				
				Mensajes().Info(self, u"No puede eliminar la cuenta '%s %s'\n" \
								u"ya que esta tiene subcuentas."
								% (self.dicNodeInfo['C'][6], self.dicNodeInfo['C'][5]), u"Atenci�n")
				return
			
			elif Mensajes().YesNo(self,u"� Desea realmente eliminar este registro ?", u"Confirmaci�n"):
			
				sql = "delete from cont_Cuentas where CuentaID = %s" % cuentaid
		
				try:
					cursor = r_cn.cursor()
					cursor.execute( str(sql) )
					cursor.close()
				
					r_cn.commit()
					queTal = True
				
				except:
					r_cn.rollback()
					Mensajes().Info(self,u"Sucedi� algo que impidi� eliminar este registro.\n" \
									u"Quiz� se deba a que hay otra informaci�n\nque depende de este registro.\n%s" \
									% sql, u"Atenci�n")
					queTal = False
			else:
				
				return
		
		if queTal:
			
			self.VengoDeDelete = True
			
			tree = self.tree
			item = self.dicNodeInfo['C'][7]
			
			cuentamadre = tree.GetItemParent(item)
			valor = tree.GetPyData(cuentamadre)
			
			if valor[0] == "T":
				
				sqltipo = """
				select count(*) from cont_Cuentas where CuentaTipoID = %s
				""" % valor[1:]
				cursor = r_cn.cursor()
				cursor.execute( str(sqltipo) )
				rowscount = fetchone(cursor)[0]
				cursor.close()
				
				tree.Delete(item)
				tree.SelectItem(cuentamadre)
				
				if rowscount:
					pass
				else:
					empresa = tree.GetItemParent(cuentamadre)
					tree.Delete(cuentamadre)
					tree.SelectItem(empresa)
				
			else:
				
				hijadecuenta = int(self.dicNodeInfo['C'][8])
				sqlhija = """
				select count(*) from cont_Cuentas where HijaDeCuentaID = %s
				""" % hijadecuenta
				cursor = r_cn.cursor()
				cursor.execute( str(sqlhija) )
				rowscount = fetchone(cursor)[0]
				cursor.close()
				
				if rowscount:
					tree.Delete(item)
				else:
					tree.Collapse(cuentamadre)
					tree.Delete(item)
					tree.SetItemHasChildren(cuentamadre, 0)
					tree.SelectItem(cuentamadre)
					somekeys = [valor]
					remkeys = self.DictRemove(self.SubcuentasDict, somekeys) # Regresa dict de llaves eliminadas
					
			self.VengoDeDelete = False
			
			#Mensajes().Info(self,u"� Registro Eliminado !",u"Atenci�n")
			
		return

	def SaveRecord(self):
		
		if not self.tb.GetToolEnabled(ID_TOOLNEWCATCTACON):

			bienGrabado = self.AddRecord()
		
		else:

			if self.dataprev:
				
				bienGrabado = self.UpdateRecord()
			
		if bienGrabado:
			
			self.tb.EnableTool( ID_TOOLSAVCATCTACON, False)
			self.tb.EnableTool( ID_TOOLDELCATCTACON, True)
			self.tb.EnableTool( ID_TOOLNEWCATCTACON, True)
			self.MenuSetter(ID_MENUGRABARTREE, False)
			self.MenuSetter(ID_MENUELIMINARTREE, True)
			self.MenuSetter(ID_MENUNUEVOTREE, True)
			
			self.ValoresOriginales()
			self.LimpiaColores()
			
		else:

			Mensajes().Info(self,u"� El Registro no fue grabado !", u"Atenci�n")
			
		return bienGrabado
	
	def UpdateRecord( self ):
		
		cuentaid = int(self.dataprev[1:])
		
		if self.GetControl(ID_CHECKBOXCATCTACONAFECTABLE).GetValue() == True:
			
			sqlhija = """
			select count(*) from cont_Cuentas where HijaDeCuentaID = %s
			""" % cuentaid
			cursor = r_cn.cursor()
			cursor.execute( str(sqlhija) )
			rowscount = fetchone(cursor)[0]
			cursor.close()
			if rowscount:
				Mensajes().Info(self, u"No puede afectar directamente la cuenta '%s %s'\n" \
								u"ya que esta tiene subcuentas."
								% (self.dicNodeInfo['C'][6], self.dicNodeInfo['C'][5]), u"Atenci�n")
				self.GetControl(ID_CHECKBOXCATCTACONAFECTABLE).SetValue(False)
				self.GetControl(ID_CHECKBOXCATCTACONAFECTABLE).SetBackgroundColour(wx.NullColour)
				self.GetControl(ID_CHECKBOXCATCTACONAFECTABLE).Refresh()
				afectable = 0
			else:
				afectable = 1
				
		else:
			
			afectable = 0
			
		self.VengoDeUpdate = True
		
		clavecuenta = self.GetControl(ID_TEXTCTRLCATCTACONCUENTA).GetValue()
		descripcion = self.GetControl(ID_TEXTCTRLCATCTACONDESCRIPCION).GetValue()
		
		if self.GetControl(ID_RADIOBOXCATCTACONNATURALEZA).GetStringSelection() == "Acreedora":
			naturaleza = "A"
		else:
			naturaleza = "D"
			
		cuentatipoid = self.GetControl(ID_TEXTCTRLCATCTACONTIPOCUENTA).GetValue()
		
		setListForQuery = """
		ClaveCuenta = '%s' , Descripcion = '%s' , Naturaleza = '%s' , Afectable = %s , CuentaTipoID = %s
		""" % (clavecuenta, descripcion, naturaleza, afectable, cuentatipoid)
		
		sql = "update cont_Cuentas set  %s " \
				"where CuentaID = %s " \
			% (setListForQuery, cuentaid)

		queTal = self.QueryUpdateRecord(sql)
		
		if queTal:
			
			refresca = False
			tree = self.tree
			item = self.dicNodeInfo['C'][7]
			
			lacuenta = self.GetStringFromField(clavecuenta) + " " + self.GetStringFromField(descripcion)
			
			tree.SetItemText(item, "%s" % lacuenta)
				
			if afectable:
				tree.SetItemImage(item, self.fileidx, wx.TreeItemIcon_Normal)
				#tree.SetItemImage(item, self.filesel, wx.TreeItemIcon_Selected)
			else:
				tree.SetItemImage(item, self.fldridx, wx.TreeItemIcon_Normal)
				tree.SetItemImage(item, self.fldridx, wx.TreeItemIcon_Selected)
				tree.SetItemImage(item, self.fldropenidx, wx.TreeItemIcon_Expanded)
				tree.SetItemImage(item, self.fldropenidx, wx.TreeItemIcon_SelectedExpanded)
				sqlhija = """
				select count(*) from cont_Cuentas where HijaDeCuentaID = %s
				""" % cuentaid
				cursor = r_cn.cursor()
				cursor.execute( str(sqlhija) )
				rowscount = fetchone(cursor)[0]
				cursor.close()
				id = self.GetControl(ID_TEXTCTRLCATCTACONTIPOCUENTA)
				id.SetEditable(True)
				if rowscount:
					tree.SetItemHasChildren(item)
					if self.OriginalDistinto(ID_TEXTCTRLCATCTACONTIPOCUENTA):
						Mensajes().Info(self,u"Ha modificado el tipo de cuenta, por lo tanto,\n" \
										u"se afectar�n todas las subcuentas.", u"Aviso")
						sqlhijas = """
						select CuentaID, ClaveCuenta, Descripcion from cont_Cuentas where HijaDeCuentaID = %s
						""" % cuentaid
						cursor = r_cn.cursor()
						cursor.execute( str(sqlhijas) )
						rows = fetchall(cursor)
						cursor.close()
						if rows:
							setListForQuery = "CuentaTipoID = %s" % (cuentatipoid)
							for row in rows:
								sql = "update cont_Cuentas set %s where CuentaID = %s"  % (setListForQuery, row[0])
								if not self.QueryUpdateRecord(sql):
									Mensajes().Info(self,u"La subcuenta '%s - %s'\n" \
													u"no pudo ser modificada en el tipo de cuenta." \
													% (str(row[1]), str(row[2])), u"Atenci�n")
						refresca = True
				else:
					tree.SetItemHasChildren(item, 0)
					if self.OriginalDistinto(ID_TEXTCTRLCATCTACONTIPOCUENTA):
						refresca = True
					
				id.SetEditable(False)
				
			if refresca:
				self.Refrescar()
				item = tree.GetFirstVisibleItem()
				if item:
					tree.Expand(item)
			else:
				cuentamadre = tree.GetItemParent(item)
				tree.SortChildren(cuentamadre)
				tree.SelectItem(item)
			
		self.VengoDeUpdate = False

		return queTal
	
	def AddRecord(self):
		
		EsTipoDeCuenta = self.EsTipoDeCuenta
		EsEmpresa = self.EsEmpresa
		
		clavecuenta = self.GetControl(ID_TEXTCTRLCATCTACONCUENTA).GetValue()
		descripcion = self.GetControl(ID_TEXTCTRLCATCTACONDESCRIPCION).GetValue()
		if self.GetControl(ID_RADIOBOXCATCTACONNATURALEZA).GetStringSelection() == "Acreedora":
			naturaleza = "A"
		else:
			naturaleza = "D"
		if self.GetControl(ID_CHECKBOXCATCTACONAFECTABLE).GetValue() == True:
			afectable = 1
		else:
			afectable = 0
		cuentatipoid = self.GetControl(ID_TEXTCTRLCATCTACONTIPOCUENTA).GetValue()
		
		if EsEmpresa:
			
			empresaid = self.CuentaEmpresaID
			hijadecuentaid = "Null"
			cuentamadre = self.ItemEmpresa
		
		elif EsTipoDeCuenta:
			
			empresaid = self.CuentaEmpresaID
			hijadecuentaid = "Null"
			cuentamadre = self.ItemTipoCuenta
		
		else:
		
			empresaid = self.dicNodeInfo['C'][1]
			hijadecuentaid = self.dicNodeInfo['C'][0]
			cuentamadre = self.dicNodeInfo['C'][7]
		
		sqlFields = """ 
		EmpresaID, ClaveCuenta, HijaDeCuentaID, Descripcion, Naturaleza, Afectable, CuentaTipoID
		"""
		sqlValues = " %s, '%s', %s, '%s', '%s', %s, %s " \
			% (empresaid, clavecuenta, hijadecuentaid, descripcion, naturaleza, afectable, cuentatipoid)
		sql = "insert into cont_Cuentas (%s) values (%s) " % (sqlFields, sqlValues)
		
		queTal = self.QueryUpdateRecord(sql)
		
		if queTal:
			
			wx.BeginBusyCursor()
			
			sqlx = "select max(CuentaID) from cont_Cuentas"
			cursor = r_cn.cursor()
			cursor.execute(str(sqlx))
			row = fetchone(cursor)
			cursor.close()
			
			if row is not None:
				self.ultimo = int(row[0])
			else:
				wx.EndBusyCursor()
				return queTal
				
			tree = self.tree
			
			if cuentamadre:
					
				clavecuenta = self.GetControl(ID_TEXTCTRLCATCTACONCUENTA).GetValue()
				descripcion = self.GetControl(ID_TEXTCTRLCATCTACONDESCRIPCION).GetValue()
				lacuenta = self.GetStringFromField(clavecuenta) + " " + self.GetStringFromField(descripcion)

				if tree.GetChildrenCount(cuentamadre) > 0:
					
					tree.Expand(cuentamadre)
					
					subcuentas = tree.AppendItem(cuentamadre, "%s" % lacuenta)
					tree.SetPyData( subcuentas, "S%s" % self.ultimo)
					
					if afectable:
						tree.SetItemImage(subcuentas, self.fileidx, wx.TreeItemIcon_Normal)
						#tree.SetItemImage(subcuentas, self.filesel, wx.TreeItemIcon_Selected)
					else:
						tree.SetItemImage(subcuentas, self.fldridx, wx.TreeItemIcon_Normal)
						tree.SetItemImage(subcuentas, self.fldridx, wx.TreeItemIcon_Selected)
						tree.SetItemImage(subcuentas, self.fldropenidx, wx.TreeItemIcon_Expanded)
						tree.SetItemImage(subcuentas, self.fldropenidx, wx.TreeItemIcon_SelectedExpanded)
						sqlhija = """
						select count(*) from cont_Cuentas where HijaDeCuentaID = %s
						""" % self.ultimo
						cursor = r_cn.cursor()
						cursor.execute( str(sqlhija) )
						rowscount = fetchone(cursor)[0]
						cursor.close()
						if rowscount:
							tree.SetItemHasChildren(subcuentas)
						else:
							tree.SetItemHasChildren(subcuentas, 0)
					
					self.Configura(cuentamadre)
					if not self.dicNodeInfo or cuentamadre == self.dicNodeInfo['C'][7]:
						tree.SelectItem(subcuentas)
						
				self.Configura(cuentamadre)
				self.UpdateNodo(cuentamadre, EsTipoDeCuenta, EsEmpresa)
				
				if EsEmpresa:
					self.Refrescar()
					tree.ScrollTo(self.cuentademayor)
					tree.SelectItem(self.cuentademayor)
				elif EsTipoDeCuenta:
					tree.ScrollTo(subcuentas)
					
			wx.EndBusyCursor()
			
		return queTal
	
	def Configura(self, cuentamadre):
		
		tree = self.tree
		
		self.tb.EnableTool( ID_TOOLSAVCATCTACON, False)
		self.tb.EnableTool( ID_TOOLDELCATCTACON, True)
		self.tb.EnableTool( ID_TOOLNEWCATCTACON, True)
		self.MenuSetter(ID_MENUGRABARTREE, False)
		self.MenuSetter(ID_MENUELIMINARTREE, True)
		self.MenuSetter(ID_MENUNUEVOTREE, True)
		
		tree.SortChildren(cuentamadre)
	
	def UpdateNodo(self, item, EsTipoDeCuenta, EsEmpresa):
		
		tree = self.tree
		data = tree.GetPyData(item)
		
		if EsEmpresa:
			
			tree.SetItemImage(item, self.fldridx, wx.TreeItemIcon_Normal)
			tree.SetItemImage(item, self.fldropenidx, wx.TreeItemIcon_Expanded)
			sqlhija = """
			select count(*) from cont_Cuentas where EmpresaID = %s
			""" % int(data[1:])
			cursor = r_cn.cursor()
			cursor.execute( str(sqlhija) )
			rowscount = fetchone(cursor)[0]
			cursor.close()
			if rowscount:
				tree.SetItemHasChildren(item)
				tree.Expand(item)
			else:
				tree.SetItemHasChildren(item, 0)
			
		elif EsTipoDeCuenta:
			
			tree.SetItemImage(item, self.fldridx, wx.TreeItemIcon_Normal)
			tree.SetItemImage(item, self.fldropenidx, wx.TreeItemIcon_Expanded)
			sqlhija = """
			select count(*) from cont_Cuentas where CuentaTipoID = %s
			""" % int(data[1:])
			cursor = r_cn.cursor()
			cursor.execute( str(sqlhija) )
			rowscount = fetchone(cursor)[0]
			cursor.close()
			if rowscount:
				tree.SetItemHasChildren(item)
				tree.Expand(item)
			else:
				tree.SetItemHasChildren(item, 0)
			
		else:
			
			sql = """
			select Afectable from cont_Cuentas where CuentaID = %s
			""" % int(data[1:])
			
			cursor = r_cn.cursor()
			cursor.execute( str(sql) )
			row = fetchone(cursor)
			cursor.close()
	
			if row[0]:
				tree.SetItemImage(item, self.fileidx, wx.TreeItemIcon_Normal)
				#tree.SetItemImage(item, self.filesel, wx.TreeItemIcon_Selected)
			else:
				tree.SetItemImage(item, self.fldridx, wx.TreeItemIcon_Normal)
				tree.SetItemImage(item, self.fldridx, wx.TreeItemIcon_Selected)
				tree.SetItemImage(item, self.fldropenidx, wx.TreeItemIcon_Expanded)
				tree.SetItemImage(item, self.fldropenidx, wx.TreeItemIcon_SelectedExpanded)
				sqlhija = """
				select count(*) from cont_Cuentas where HijaDeCuentaID = %s
				""" % int(data[1:])
				cursor = r_cn.cursor()
				cursor.execute( str(sqlhija) )
				rowscount = fetchone(cursor)[0]
				cursor.close()
				if rowscount:
					tree.SetItemHasChildren(item)
					tree.Expand(item)
				else:
					tree.SetItemHasChildren(item, 0)
	
	def ObtenTipoCuenta(self, CuentaTipoID):
		""" 
		Obtener de la base de datos la descripci�n del tipo de cuenta
		"""
		sql = "select Descripcion from cont_CuentaTipo where CuentaTipoID = '%s'" % CuentaTipoID
		
		tipocuenta = ""
		
		try:
			cursor = r_cn.cursor()
			cursor.execute(str(sql))
			row = fetchone( cursor )
			
			if row:
				tipocuenta = "%s" % ( self.GetStringFromField(row[0]), ) 
				
		finally:
			
			cursor.close()
			
		return tipocuenta
	
	def FillTree(self):
		""""Aqui se llenan los nodos de toda la estructura salvo subcuentas.
		Parece ser que los iconos asociados a un TreeItem conforme se van asignando via SetItemImage,
		los descendientes los siguen teniendo iguales a menos que se reasignen otros iconos a su nivel.
		"""
		
		wx.BeginBusyCursor()
		tree = self.tree
		tree.DeleteAllItems()
		
		isz = (16,16)
		il = wx.ImageList(16,16)
		self.fldridx     = il.Add(wx.ArtProvider.GetBitmap(wx.ART_FOLDER,      wx.ART_OTHER, isz))
		self.fldropenidx = il.Add(wx.ArtProvider.GetBitmap(wx.ART_FILE_OPEN,   wx.ART_OTHER, isz))
		self.fileidx     = il.Add(wx.ArtProvider.GetBitmap(wx.ART_NORMAL_FILE, wx.ART_OTHER, isz))
		self.filesel     = il.Add(wx.ArtProvider.GetBitmap(wx.ART_FIND,        wx.ART_OTHER, isz))
		tree.AssignImageList(il)
		root = tree.AddRoot("EMPRESAS")

		tree.SetItemImage(root, self.fldridx, wx.TreeItemIcon_Normal)
		tree.SetItemImage(root, self.fldropenidx, wx.TreeItemIcon_Expanded)
		
		tree.SetPyData( root, None )
		
		sql = """
		select e.EmpresaID, e.RazonSocial, t.CuentaTipoID, t.Descripcion,
		c.CuentaID, c.ClaveCuenta, c.Descripcion, c.HijaDeCuentaID, c.Afectable from 
		cont_Cuentas c join cont_CuentaTipo t on c.CuentaTipoID = t.CuentaTipoID join cont_Empresas e 
		on c.EmpresaID = e.EmpresaID where c.HijaDeCuentaID is null order by 2,4,6
		"""
		
		cursor = r_cn.cursor()
		cursor.execute( str(sql) )
		rows = fetchall(cursor)
		cursor.close()
		
		prevEmpresa = ""
		prevTipoCuenta = ""
		
		if rows:
			
			for row in rows:
				
				laempresa = self.GetStringFromField(row[1])
				eltipocuenta = self.GetStringFromField(row[3])
				lacuenta = self.GetStringFromField(row[5]) + " " + self.GetStringFromField(row[6])
				
				if laempresa != prevEmpresa:
					
					empresas = tree.AppendItem( root, "%s" % laempresa)
					#tree.SetItemBold(empresas)
					tree.SetItemTextColour(empresas, wx.BLUE)
					tree.SetPyData(empresas, "E%s" % row[0])
					tree.SetItemImage(empresas, self.fldridx, wx.TreeItemIcon_Normal)
					tree.SetItemImage(empresas, self.fldropenidx, wx.TreeItemIcon_Expanded)
					prevEmpresa = laempresa
					self.empresa = empresas
					
				if eltipocuenta != prevTipoCuenta:
					
					tiposcuenta = tree.AppendItem( empresas, "%s" % eltipocuenta)
					tree.SetPyData(tiposcuenta, "T%s" % row[2])
					tree.SetItemImage(tiposcuenta, self.fldridx, wx.TreeItemIcon_Normal)
					tree.SetItemImage(tiposcuenta, self.fldropenidx, wx.TreeItemIcon_Expanded)
					prevTipoCuenta = eltipocuenta
					
				cuentas = tree.AppendItem( tiposcuenta, "%s" % lacuenta)
				tree.SetPyData( cuentas, "C%s" % str(row[4]))
				if row[4] == self.ultimo:
					self.cuentademayor = cuentas
				
				if row[8]:
					
					tree.SetItemImage(cuentas, self.fileidx, wx.TreeItemIcon_Normal)
					#tree.SetItemImage(cuentas, self.filesel, wx.TreeItemIcon_Selected)
					
				else:
					
					tree.SetItemImage(cuentas, self.fldridx, wx.TreeItemIcon_Normal)
					tree.SetItemImage(cuentas, self.fldridx, wx.TreeItemIcon_Selected)
					tree.SetItemImage(cuentas, self.fldropenidx, wx.TreeItemIcon_Expanded)
					tree.SetItemImage(cuentas, self.fldropenidx, wx.TreeItemIcon_SelectedExpanded)
					sqlhija = """
					select count(*) from cont_Cuentas where HijaDeCuentaID = %s
					""" % str(int(row[4]))
					cursor = r_cn.cursor()
					cursor.execute( str(sqlhija) )
					rowscount = fetchone(cursor)[0]
					cursor.close()
					
					if rowscount:
						
						tree.SetItemHasChildren(cuentas)
						
					else:
						
						tree.SetItemHasChildren(cuentas, 0)
								
		wx.EndBusyCursor()
		
		item = tree.GetFirstVisibleItem()

		if item:
			tree.SelectItem(item)

	def LimpiaColores(self):

		for id in self.controles_tipo_txt.itervalues():
			
			self.GetControl(id).SetBackgroundColour(wx.WHITE)
			self.GetControl(id).Refresh()
			
		self.GetControl(ID_CHECKBOXCATCTACONAFECTABLE).SetBackgroundColour(wx.NullColour)
		self.GetControl(ID_CHECKBOXCATCTACONAFECTABLE).Refresh()
		self.GetControl(ID_RADIOBOXCATCTACONNATURALEZA).SetOwnBackgroundColour(wx.NullColour)
		self.GetControl(ID_RADIOBOXCATCTACONNATURALEZA).Refresh()
		
	def OnDoubleClick(self, event):
		
		item = event.GetItem()
		self.SelectItem(item, dobleclic = 1)
	
	def OnSelChanged(self, event):
		
		item = event.GetItem()
		self.SelectItem(item)
	
	def SelectItem(self, item, dobleclic = 0):
		
		cuentaid, clavecuenta, descripcion = 0,"",""
		self.ValidarControles = False
		
		tree = self.tree
		data = tree.GetPyData(item)

		if self.tb.GetToolEnabled(ID_TOOLSAVCATCTACON):
			if not self.VengoDeDelete and not self.VengoDeUpdate and not self.VengoDeAdd:
				self.NewFlag = False
				self.ValidarControles = True
				self.Text()
				self.ValidarControles = False
				if not self.NewFlag:
					if Mensajes().YesNo(self,u"Algunos datos han cambiado\n\n� Desea ud. grabarlos ?",u"Confirmaci�n"):
						self.VengoDelSelect = True
						if self.SaveRecord():
							data = self.dataprev
							item = self.dicNodeInfo['C'][7]
							tree.SelectItem(item)
							
						self.VengoDelSelect = False
					
				self.tb.EnableTool( ID_TOOLSAVCATCTACON, False)
				self.MenuSetter(ID_MENUGRABARTREE, False)
				self.LimpiaColores()
		
		self.dicNodeInfo = {}      # donde se guarda lo seleccionado
		
		if data:
			#Esto lo hizo Dac
			drag_ctrl = self.GetControl(ID_FOREIGNDRAG)
			drag_ctrl.Enable(False)
			drag_ctrl.Refresh()

			self.EsTipoDeCuenta = False
			self.EsEmpresa = False
			
			if data[0] in ("C", "S"):

				self.dataprev = data
				
				cuentaid = int(data[1:])
			
				sql = """
				select c.ClaveCuenta, c.Descripcion, c.CuentaTipoID, c.Afectable,
				c.Naturaleza, t.Descripcion, c.EmpresaID, c.HijaDeCuentaID
				from cont_Cuentas c join cont_CuentaTipo t on c.CuentaTipoID = t.CuentaTipoID
				where c.CuentaID = %s
				""" % cuentaid
				
				cursor = r_cn.cursor()
				cursor.execute( str(sql) )
				row = fetchone(cursor)
				cursor.close()
				#esto lo hizo dac
				if row[3]:
					drag_ctrl = self.GetControl(ID_FOREIGNDRAG)
					drag_ctrl.Enable(True)
					drag_ctrl.Refresh()
					
				if row[3] and dobleclic:
					clavecuenta = self.GetStringFromField(row[0])
					descripcion = self.GetStringFromField(row[1])
					for metodo in self.suscriptions:
						metodo(cuentaid, clavecuenta, descripcion)
			
				self.GetControl(ID_NOTEBOOKCATCTACONTAB1).Enable(True)
				
				self.GetControl(ID_TEXTCTRLCATCTACONCUENTA).SetValue(self.GetStringFromField(row[0]))
				self.GetControl(ID_TEXTCTRLCATCTACONDESCRIPCION).SetValue(self.GetStringFromField(row[1]))
				self.GetControl(ID_TEXTCTRLCATCTACONTIPOCUENTA).SetValue(str(row[2]))
				self.GetControl(ID_CATCTACONTIPOCUENTA).SetLabel(self.GetStringFromField(row[5]))
				self.GetControl(ID_CHECKBOXCATCTACONAFECTABLE).SetValue(row[3])
				
				if str(row[4]) == "A":
					self.GetControl(ID_RADIOBOXCATCTACONNATURALEZA).SetStringSelection("Acreedora")
				else:
					self.GetControl(ID_RADIOBOXCATCTACONNATURALEZA).SetStringSelection("Deudora")
					
				self.ValoresOriginales()
				
				self.dicNodeInfo['C'] = [int(data[1:]), row[6], row[4], row[3], row[2], row[1], row[0], item, row[7]]
					
				if str(row[4]) == "D":
					sql = """
					select top 1 SaldoInicial + TotalCargos - TotalAbonos
					from cont_SaldosxPeriodo where CuentaID = %s order by CuentaID, Periodo desc
					""" % int(data[1:])
				else:
					sql = """
					select top 1 SaldoInicial + TotalAbonos - TotalCargos
					from cont_SaldosxPeriodo where CuentaID = %s order by CuentaID, Periodo desc
					""" % int(data[1:])
				
				try:
					
					cursor = r_cn.cursor()
					cursor.execute( str(sql) )
					row = fetchone(cursor)
					cursor.close()
					
					saldo = float(row[0])
					self.GetControl(ID_TEXTCTRLCATCTACONSALDO).SetValue(str(amount_and_cents_with_commas(saldo)))
					if saldo < 0:
						saldo *= -1
						self.GetControl(ID_CATCTACONSALDO).SetLabel('MENOS '+str(c2p(saldo).texto()))
						self.GetControl(ID_CATCTACONSALDO).SetForegroundColour(wx.RED)
					elif saldo > 0:
						self.GetControl(ID_CATCTACONSALDO).SetLabel(str(c2p(saldo).texto()))
						self.GetControl(ID_CATCTACONSALDO).SetForegroundColour(wx.BLACK)
					else:
						self.GetControl(ID_TEXTCTRLCATCTACONSALDO).SetValue("")
						self.GetControl(ID_CATCTACONSALDO).SetLabel("")
						
					
					
				except:
					
					self.GetControl(ID_TEXTCTRLCATCTACONSALDO).SetValue("")
					self.GetControl(ID_CATCTACONSALDO).SetLabel("")
				
				self.tb.EnableTool(ID_TOOLSAVCATCTACON, False)
				self.tb.EnableTool(ID_TOOLDELCATCTACON, True)
				self.tb.EnableTool(ID_TOOLNEWCATCTACON, True)
				self.MenuSetter(ID_MENUGRABARTREE, False)
				self.MenuSetter(ID_MENUELIMINARTREE, True)
				self.MenuSetter(ID_MENUNUEVOTREE, True)         

			elif data[0] in ("T"):
		
				self.EsTipoDeCuenta = True
				self.CuentaTipoID = int(data[1:])
				self.ItemTipoCuenta = item
				self.tb.EnableTool(ID_TOOLNEWCATCTACON, True)
				self.MenuSetter(ID_MENUNUEVOTREE, True)         
				self.LimpiaDetalle()
				
			else:
				
				self.EsEmpresa = True
				self.CuentaEmpresaID = int(data[1:])
				self.ItemEmpresa = item
				self.tb.EnableTool(ID_TOOLNEWCATCTACON, True)
				self.MenuSetter(ID_MENUNUEVOTREE, True)         
				self.LimpiaDetalle()
				
		else:
			
			self.tb.EnableTool(ID_TOOLNEWCATCTACON, False)
			self.MenuSetter(ID_MENUNUEVOTREE, False)                
			self.LimpiaDetalle()
			
		self.ValidarControles = True
		
		return

	
	def ValoresOriginales(self):

		self.originales[ID_TEXTCTRLCATCTACONCUENTA] = self.GetControl(ID_TEXTCTRLCATCTACONCUENTA).GetValue()
		self.originales[ID_TEXTCTRLCATCTACONDESCRIPCION] = self.GetControl(ID_TEXTCTRLCATCTACONDESCRIPCION).GetValue()
		self.originales[ID_TEXTCTRLCATCTACONTIPOCUENTA] = self.GetControl(ID_TEXTCTRLCATCTACONTIPOCUENTA).GetValue()
		self.originales[ID_CHECKBOXCATCTACONAFECTABLE] = self.GetControl(ID_CHECKBOXCATCTACONAFECTABLE).GetValue()
		self.originales[ID_RADIOBOXCATCTACONNATURALEZA] = self.GetControl(ID_RADIOBOXCATCTACONNATURALEZA).GetStringSelection()
		
	def LimpiaDetalle(self, NuevoRegistro = False):
		
		self.GetControl(ID_TEXTCTRLCATCTACONCUENTA).SetValue("")
		self.GetControl(ID_TEXTCTRLCATCTACONDESCRIPCION).SetValue("")
		self.GetControl(ID_TEXTCTRLCATCTACONSALDO).SetValue("")
		self.GetControl(ID_CATCTACONSALDO).SetLabel("")
		self.GetControl(ID_TEXTCTRLCATCTACONTIPOCUENTA).SetValue("")
		self.GetControl(ID_CHECKBOXCATCTACONAFECTABLE).SetValue(True)
		self.GetControl(ID_RADIOBOXCATCTACONNATURALEZA).SetStringSelection("Acreedora")
		
		self.tb.EnableTool(ID_TOOLDELCATCTACON, False)
		self.MenuSetter(ID_MENUELIMINARTREE, False)
			
		if NuevoRegistro:
			
			self.tb.EnableTool(ID_TOOLSAVCATCTACON, True)
			self.tb.EnableTool(ID_TOOLNEWCATCTACON, False)
			self.MenuSetter(ID_MENUGRABARTREE, True)
			self.MenuSetter(ID_MENUNUEVOTREE, False)                
			
		else:
			
			self.GetControl(ID_CATCTACONTIPOCUENTA).SetLabel("")
			self.tb.EnableTool(ID_TOOLSAVCATCTACON, False)
			self.MenuSetter(ID_MENUGRABARTREE, False)
			self.GetControl(ID_NOTEBOOKCATCTACONTAB1).Enable(False)
	
	def OnExpanding(self,event):
		
		tree = self.tree
		item = event.GetItem()
		valor = tree.GetPyData(item)
		
		if valor:
			
			if valor[0] in ("C", "S"):
				
				if not self.SubcuentasDict.has_key(str(valor)):
					
					self.CargaDict(item, valor)
					
			elif valor[0] in ("T"):
				
				self.CuentaTipoID = int(valor[1:])
				
			else:
				
				self.CuentaEmpresaID = int(valor[1:])

		return
	
	def CargaDict(self, item, valor):
		
		wx.BeginBusyCursor()
		
		tree = self.tree
		self.SubcuentasDict[str(valor)] = True
		
		sql = """
		select CuentaID, ClaveCuenta, Descripcion, HijaDeCuentaID, Afectable
		from cont_Cuentas where HijaDeCuentaID = %s order by 2
		""" % int(valor[1:])
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		rows = fetchall(cursor)
		cursor.close()
		
		if rows:
			
			for row in rows:
				
				lacuenta = self.GetStringFromField(row[1]) + " " + self.GetStringFromField(row[2])
				
				subcuentas = tree.AppendItem(item, "%s" % lacuenta)
				tree.SetPyData( subcuentas, "S%s" % row[0])
				if not self.VengoDelSelect:
					tree.SelectItem(subcuentas)
				
				if row[4]:
					tree.SetItemImage(subcuentas, self.fileidx, wx.TreeItemIcon_Normal)
					#tree.SetItemImage(subcuentas, self.filesel, wx.TreeItemIcon_Selected)
				else:
					tree.SetItemImage(subcuentas, self.fldridx, wx.TreeItemIcon_Normal)
					tree.SetItemImage(subcuentas, self.fldridx, wx.TreeItemIcon_Selected)
					tree.SetItemImage(subcuentas, self.fldropenidx, wx.TreeItemIcon_Expanded)
					tree.SetItemImage(subcuentas, self.fldropenidx, wx.TreeItemIcon_SelectedExpanded)
					sqlhija = """
					select count(*) from cont_Cuentas where HijaDeCuentaID = %s
					""" % str(int(row[0]))
					cursor = r_cn.cursor()
					cursor.execute( str(sqlhija) )
					rowscount = fetchone(cursor)[0]
					cursor.close()
					if rowscount:
						tree.SetItemHasChildren(subcuentas)
					else:
						tree.SetItemHasChildren(subcuentas, 0)
						
		wx.EndBusyCursor()
		
		return

	def Suscribe(self, metodo, unsuscribe = False):

		try:

			if unsuscribe:
				
				self.suscriptions.remove(metodo)
				
			else:
				
				self.suscriptions.append(metodo)
				
		except:
			
			pass
		
		return
	
class GixSuscriptor:
	def Suscribir(self, metodo, unsuscribe = False):
		global SUSCRIPTOR
		if SUSCRIPTOR:
			SUSCRIPTOR.Suscribe(metodo, unsuscribe)
		return
		
	def Recibido(self, cuenta):
		wx.MessageBox(u"La cuenta vale %s" % str(cuenta), u"Aviso")

	def __init__(self):
		self.Suscribir(self.Recibido)

class GixDropTarget(wx.DropTarget):
	def __init__(self, window):
		wx.DropTarget.__init__(self)
		self.window = window
		self.data = wx.TextDataObject()
		self.SetDataObject(self.data)
		
	def OnData(self, x, y, default):
		self.GetData()
		actual_data = self.data.GetText()
		#self.window.AppendText(actual_data)
		self.ProcessData(actual_data)
		return default
	
	
class GixPolizasDropTarget(GixDropTarget):
	def __init__(self, window, empresaid):
		GixDropTarget.__init__(self, window)
		self.empresaid = empresaid
		
	def ProcessData(self, data):
		self.grid = self.window
		fila = col = None
		try:
			fila = self.grid.GetGridCursorRow()
			col = self.grid.GetGridCursorCol()
		except:
			pass
		try:
			int(fila)
			int(col)
			if col != 1:
				return
		except:
			pass
		
		#msg = " He recibido %s que ira a parar a la celda ( %d,%d) " % (data,fila,col)
		#wx.MessageBox(message= msg, caption=u"Atenci�n")              
		self.grid.SetCellValue(fila,col,data)
		
		cuenta = self.grid.GetCellValue(fila, col)
		cuentaid, descripcion = self.ObtenDescripcionCuenta(cuenta, self.empresaid)
		if descripcion == "" and cuentaid == 0:
			Mensajes().Info(self, u"� Cuenta equivocada !\n\nVerifique que exista, que tenga descripci�n\n" \
							u"y que se pueda afectar directamente.", u"Atenci�n")
			return
		self.grid.SetCellValue(fila, 6, str(cuentaid))
		self.grid.SetCellValue(fila, 2, str(descripcion))
		self.grid.Refresh()
		self.grid.AutoSizeColumns()
		
		return
		
	def ObtenDescripcionCuenta(self, cuenta, empresaid):
		cuentaid = 0
		descripcion = ""
		sql = """
		select CuentaID, Descripcion from cont_Cuentas
		where ClaveCuenta = '%s' and EmpresaID = %s and Afectable = 1
		""" % (cuenta, empresaid)
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		cursor.close()
		if row:
			cuentaid = row[0]
			try:
				descripcion = row[1].decode("iso8859-1")
			except:
				descripcion= ""
		
		return (cuentaid, descripcion)
	
class GixPolizasContables(wx.Frame, GixBase):
	TABCONGRID = 1
	empresa = ""
	polizatipo = ""
	
	coloreable = "ID_TEXTCTRLPOLIZAPOLIZASCONTABLES"
	coloreableeditable = False
	
	ctt = [coloreable, "ID_TEXTCTRLTIPOPOLIZASCONTABLES", "ID_TEXTCTRLFECHAPOLIZASCONTABLES",
			"ID_TEXTCTRLDESCRIPCIONPOLIZASCONTABLES"]
	activecontrolafternewrecord = ID_TEXTCTRLTIPOPOLIZASCONTABLES
	listbox = ID_LISTBOXPOLIZASCONTABLES
	dbtable  = "cont_Polizas" #esto permite probar con tablas alternas iguales ( mismos campos distinto nombre )
	
	controles_tipo_txt = dict(zip(ctt,map(eval,ctt)))
	editor = gridlib.GridCellFloatEditor
	DicDatesAndTxt = { ID_BITMAPBUTTONFECHAPOLIZASCONTABLES : ID_TEXTCTRLFECHAPOLIZASCONTABLES}
	
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize,
					style = wx.DEFAULT_FRAME_STYLE, usuario = None ):
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		self.fillbox = False
		self.tipopolizafiltro = 0
		
		self.usuario = usuario
		obj = Parametro(usuario = self.usuario)
		self.ObtenerEmpresa(obj.empresadetrabajo)
		self.empresaid = obj.empresadetrabajo
		
		self.InitialFlags(polizascontables = True)
		self.InitialStuff(self, PolizasContablesFuncion)        
		self.InitialBindings()

		self.sb.Destroy()
		anchos = [-1,130]
		self.CreateStatusBar(2)
		self.SetStatusWidths(anchos)
		self.SetStatusText(u"Contabilidad", 0)
		self.SetStatusText(u"P�lizas Contables", 1)
		
		self.poliza = self.GetControl(ID_TEXTCTRLPOLIZAPOLIZASCONTABLES)
		
		self.grid = self.GetControl(ID_GRIDPOLIZASCONTABLES)
		self.grid.Bind(gridlib.EVT_GRID_CELL_RIGHT_CLICK, self.OnRightClick)
		self.grid.Bind(wx.EVT_KEY_DOWN, self.OnKeyDown)
		
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONTIPOPOLIZASCONTABLES, self.OnBuscarTipoDePoliza)
		
		wx.EVT_NOTEBOOK_PAGE_CHANGED(self, ID_NOTEBOOKPOLIZASCONTABLES, self.OnCambiaTab)
		
		self.Bind(wx.EVT_CHOICE, self.OnFiltro, id = ID_POLIZAS_CHOICEFILTRO)
		self.GetControl(ID_POLIZAS_CHOICEFILTRO).SetSelection(self.tipopolizafiltro)
		
		try:
			self.tb.RemoveTool(ID_TOOLMAIL)
			self.tb.RemoveTool(ID_TOOLPRINT)
			self.tb.RemoveTool(ID_TEXTCTRLTXTBUSCAR)
			self.tb.RemoveTool(ID_TOOLSEARCH)
		except:
			pass

		wx.EVT_TOOL(self, ID_TOOLLEFT, self.OnDesligarCatalogoCuentas)
		wx.EVT_TOOL(self, ID_TOOLRIGHT, self.OnLigarCatalogoCuentas)
		
		self.tb.EnableTool(ID_TOOLRIGHT, True)
		self.renderer = CommaFormattedRenderer
		target = GixPolizasDropTarget(self.grid, self.empresaid)
		self.grid.SetDropTarget(target)
		
	def ObtenerEmpresa(self, empresaid):
		
		query = """
		select RazonSocial + ' - ' + convert(varchar(7), EmpresaID)
		from cont_Empresas where EmpresaId = %s
		""" % empresaid
		
		cu = r_cn.cursor()
		cu.execute(query)
		row = fetchone(cu)
		cu.close()
		
		if row:
			self.SetTitle(self.GetStringFromField(row[0]))
		else:
			Mensajes().Info(self, u"No se ha encontrado la empresa de trabajo.\n" \
							u"Por favor abandone este m�dulo y verifique.", u"Atenci�n")
			
		return
			
	def OnBuscarTipoDePoliza(self, event):
		
		self.chopolizatipo = []
		
		query = """
		select PolizaTipoID, Descripcion from cont_PolizaTipo order by Descripcion
		"""
		cu = r_cn.cursor()
		cu.execute(query)
		rows = fetchall(cu)
		cu.close()
		
		for row in rows:
			choiceformat = str(row[0]) + " - " + self.GetStringFromField(row[1])
			self.chopolizatipo.append(choiceformat + '                                                           ')

		self.index = wx.GetSingleChoiceIndex(u"Opciones",  u"Elegir Tipo de P�liza", self.chopolizatipo, parent = None)
		
		if int(self.index) > -1:
			polizatipoid, descripcion = self.chopolizatipo[self.index].split(' - ')
			self.GetControl(ID_TEXTCTRLTIPOPOLIZASCONTABLES).SetValue(str(polizatipoid.strip()))
			self.GetControl(ID_TEXTTIPOPOLIZASCONTABLES).SetLabel(str(descripcion.strip()))
		
		return
	
	def OnCambiaTab(self, event):
		
		self.CambiaTab()
		
		return
			
	def CambiaTab(self):
		
		lbox = self.GetControl(ID_LISTBOXPOLIZASCONTABLES)
		
		tab = self.GetControl(ID_NOTEBOOKPOLIZASCONTABLES).GetSelection()
		
		if tab == self.TABCONGRID:
			if self.tb.GetToolEnabled(ID_TOOLNEW):
				if lbox.IsEmpty():
					self.GetControl(ID_NOTEBOOKPOLIZASCONTABLES).SetSelection(0)
					Mensajes().Info(self, u"� No hay detalle que consultar !\n\n", u"Atenci�n")
				else:
					self.PrepararQuery()
					self.grid.SetGridCursor(0, 1)
					self.grid.MakeCellVisible(0, 1)
					self.grid.Refresh()
					self.grid.SetFocus()
			else:
				self.GetControl(ID_NOTEBOOKPOLIZASCONTABLES).SetSelection(0)
				Mensajes().Info(self, u"Por favor introduzca la informaci�n general y grabela", u"Atenci�n")
				
		return
	
	def OnDesligarCatalogoCuentas(self, event):
		
		self.Suscribir(self.Recibido, True)
		
		SUSCRIPTOR.Destroy()
		
		self.CenterOnScreen()
		self.tb.EnableTool(ID_TOOLLEFT, False)
		self.tb.EnableTool(ID_TOOLRIGHT, True)
		
		self.SetFocus()
		
		return
	
	def OnLigarCatalogoCuentas(self, event):
		
		self.LigarCatalogoCuentas()
		
		return
		
	def LigarCatalogoCuentas(self):
		
		self.Move(wx.Point(442, -1))
		self.tb.EnableTool(ID_TOOLLEFT, True)
		self.tb.EnableTool(ID_TOOLRIGHT, False)
		
		if SUSCRIPTOR:
			
			SUSCRIPTOR.Min()
			SUSCRIPTOR.SetFocus()
			self.SetFocus()
			
		else:
			
			titulo = u"Cat�logo de Cuentas"
			dialog = GixCatalogoCuentasContabilidad(self, -1, titulo, size = (800,620), style = wx.DEFAULT_DIALOG_STYLE)
			
			wx.BeginBusyCursor()
			dialog.FillTree()
			wx.EndBusyCursor()
	
			dialog.CentreOnScreen()
			self.GetControl(ID_NOTEBOOKCATCTACONTAB1).Enable(False)
			dialog.Show()
			dialog.ValidarControles = True
			dialog.Min()
			
			self.SetFocus()
		
		self.Suscribir(self.Recibido)
		
		return
	
	def Suscribir(self, metodo, unsuscribe = False):
		
		if SUSCRIPTOR:
			
			SUSCRIPTOR.Suscribe(metodo, unsuscribe)
		
		return
			
	def Recibido(self, cuentaid, clavecuenta, descripcion):
		
		tab = self.GetControl(ID_NOTEBOOKPOLIZASCONTABLES).GetSelection()
		
		if tab == self.TABCONGRID:
			
			col = self.grid.GetGridCursorCol()
			
			if col == 1:
				
				fila = self.grid.GetGridCursorRow()
			
				self.grid.SetCellValue(fila, 1, str(clavecuenta).strip())
				self.grid.SetCellValue(fila, 2, str(descripcion).strip())
				self.grid.SetCellValue(fila, 6, str(cuentaid).strip())
				
				self.grid.Refresh()
				
				graba = True
				self.Asigna(fila, col, graba)
				
		return
		
	def InsertaFilas(self):
		
		control = self.GetControl(ID_TEXTCTRLPOLIZAPOLIZASCONTABLES)
		poliza = control.GetValue().strip()
	
		sql = """
		select count(*) from cont_PolizaDetalle where PolizaID = %s
		""" % poliza
			
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		filas = fetchone(cursor)[0]
		cursor.close()
			
		filas += 1
		
		return filas
	
	def PrepararQuery(self):
		
		poliza = self.poliza.GetValue().strip()
		
		if poliza == "":
			self.query = "select "","","","""
		else:
			self.query = """
			select Item, CuentaID, Descripcion, Cargo, Abono, Referencia1
			from cont_PolizaDetalle where PolizaID = %s and Item > 0 order by Item
			""" % poliza
		
		self.meta = ((5,u""),
			(100, u"Cuenta (F1)"),
			(250, u"Descripci�n"),
			(95, u"Cargo", wx.ALIGN_RIGHT),
			(95, u"Abono", wx.ALIGN_RIGHT),
			(300, u"Referencia"),
			(5,u""))
		
		self.buildFromQuery()
		
		return
	
	def OnKeyDown(self, evt):
		
		fila = self.grid.GetGridCursorRow()
		col = self.grid.GetGridCursorCol()
		graba = False
		
		try:
			evtkey = evt.KeyCode()
		except:
			evtkey = evt.GetKeyCode()
		
		if evtkey == wx.WXK_F6:
			archivo = "detalle_poliza_contable.xls"
			if Mensajes().YesNo(self, u"� Desea volcar el detalle al archivo de excel\n %s ?" % (archivo), u"Atenci�n"):
				siono = "SI"
				try:
					exc = SimNoraExcel(excel = archivo)
					exc.SetGrid(self)
					exc.HazExcelDesdeGrid()
				except:
					siono = "NO"
					
				Mensajes().Info(self,u"El archivo de excel\n%s\n%s pudo ser generado!" % (archivo,siono), u"Atenci�n")
				
			evt.Skip()
			return
		
		if evtkey == wx.WXK_F1 and col == 1:
			self.inxcuenta = []
			self.chocuenta = []
			
			empresaid = self.empresaid
			
			query = """
			select CuentaID, ClaveCuenta, Descripcion
			from cont_Cuentas where EmpresaID = %s and Afectable = 1 order by ClaveCuenta
			""" % empresaid
			
			cu = r_cn.cursor()
			cu.execute(query)
			rows = fetchall(cu)
			cu.close()
			
			for row in rows:
				choiceformat = self.GetStringFromField(row[1]) + "  -  " + self.GetStringFromField(row[2])
				self.inxcuenta.append(row[0])
				self.chocuenta.append(choiceformat + '                                                               ')
	
			self.index = wx.GetSingleChoiceIndex(u"Opciones",  u"Elegir Cuenta", self.chocuenta, parent = None)
			
			if int(self.index) > -1:
				clavecuenta, descripcion = self.chocuenta[self.index].split('  -  ')
				
				if descripcion == "":
					Mensajes().Info(self, u"� Cuenta equivocada !\n\nNo tiene descripci�n.", u"Atenci�n")
					evt.Skip()
					return
				else:
					self.grid.SetCellValue(fila, 1, str(clavecuenta).strip())
					self.grid.SetCellValue(fila, 2, str(descripcion).strip())
					self.grid.SetCellValue(fila, 6, str(self.inxcuenta[self.index]))
					self.grid.Refresh()
					graba = True
			else:
				evt.Skip()
				return
		
		if evtkey != wx.WXK_RETURN and evtkey != wx.WXK_NUMPAD_ENTER and not graba:
			evt.Skip()
			return

		if evt.ControlDown():   # the edit control needs this key
			evt.Skip()
			return
		
		self.grid.DisableCellEditControl()
		
		# *************** Validaciones ******************
		
		if col == 1 and not graba:
			cuenta = self.grid.GetCellValue(fila, col)
			cuentaid, descripcion = self.ObtenDescripcionCuenta(cuenta)
			
			if descripcion == "" and cuentaid == 0:
				Mensajes().Info(self, u"� Cuenta equivocada !\n\nVerifique que exista, que tenga descripci�n\n" \
								u"y que se pueda afectar directamente.", u"Atenci�n")
				evt.Skip()
				return
			
			self.grid.SetCellValue(fila, 6, str(cuentaid))
			self.grid.SetCellValue(fila, 2, str(descripcion))
			self.grid.Refresh()
			graba = True
			
		self.Asigna(fila, col, graba, evt)
		
		return
			
	def Asigna(self, fila, col, graba, evt = ""):
		"""
			************ Asignaciones a variables y afectaci�n ****************
		"""

		try:
			item = self.grid.GetCellValue(fila, 0)
		except:
			item = 0
		cuentaid = self.grid.GetCellValue(fila, 6)
		descripcion = self.grid.GetCellValue( fila, 2)
		try:
			cargo = float(self.grid.GetCellValue(fila, 3))
		except:
			cargo = 0
			self.grid.SetCellValue(fila, 3, str(cargo))
		try:
			abono = float(self.grid.GetCellValue(fila, 4))
		except:
			abono = 0
			self.grid.SetCellValue(fila, 4, str(abono))
		referencia1 = self.grid.GetCellValue(fila,5)
		
		if cuentaid != "" and descripcion != "" and (cargo != 0 or abono != 0):
			
			if not self.Afectar(item, cuentaid, descripcion, cargo, abono, referencia1):
				
				return
			
		if evt:
			
			success = self.grid.MoveCursorRight(evt.ShiftDown())
			
			if graba or col == 5:   # original col in (0,5):
				
				success = self.grid.MoveCursorRight(evt.ShiftDown())
				
		else:
			
			#self.grid.SetGridCursor(fila, 3)
			success = True

		if not success:
			
			newRow = self.grid.GetGridCursorRow() + 1

			if newRow < self.grid.GetTable().GetNumberRows():
				self.grid.SetGridCursor(newRow, 0)
				self.grid.MakeCellVisible(newRow, 0)
				self.grid.Refresh()
			else:
				self.grid.AppendRows(1)
				fila = newRow
				
				for col in range(len(self.meta) + 1):
					if fila % 2 == 0:
						self.grid.SetCellBackgroundColour(fila, col, wx.NamedColour("Medium Goldenrod"))
				
					if col in (0,6):
						renderer = NullGridRenderer()
						self.grid.SetCellRenderer(fila, col, renderer)
				
					if col in (0,2,6):
						self.grid.SetReadOnly(fila, col,True)
					
					if col in (3,4):
						self.grid.SetCellEditor(fila, col, self.editor())
						self.grid.SetColFormatFloat(col, 12, 2)
						if self.renderer:
							self.grid.SetCellRenderer(fila,col, self.renderer())

				self.grid.SetGridCursor(newRow, 1)
				self.grid.MakeCellVisible(newRow, 1)
				self.grid.Refresh()
				
		self.grid.AutoSizeColumns()
				
		return

	def buildFromQuery(self, rebuild = False):
	
		numregs = 0
		query = self.query
		
		metapiece = self.meta
		elements = len(metapiece)
		metapiece_selected = metapiece
		
		if numregs == 0:
			filas = self.grid.GetNumberRows()
			cols = self.grid.GetNumberCols()
			
			if filas:
				self.grid.DeleteRows(0, filas)
			if cols:
				self.grid.DeleteCols(0, cols)
			
			self.grid.InsertRows(0,1)
			self.grid.InsertCols(0,elements)
			
			#self.grid.ClearGrid()
			#self.CreateGrid(1, elements)
			
			fila = 0
			
			for col in range(0, elements):
				if fila % 2 == 0:
					self.grid.SetCellBackgroundColour(fila, col, wx.NamedColour("Medium Goldenrod"))
				
				if col in (0,6):
					renderer = NullGridRenderer()
					self.grid.SetCellRenderer(fila, col, renderer)
					
				if col in (0,2,6):
					self.grid.SetReadOnly(fila, col, True)
					
				if col in (3,4):
					self.grid.SetCellEditor(fila, col, self.editor())
					self.grid.SetColFormatFloat(col, 12, 2)
		else:
			
			self.grid.CreateGrid(numregs, elements)
			
		self.grid.SetRowLabelSize(40)
						
		colindex = 0
					
		for metacols in metapiece:
				self.grid.SetColSize(colindex, metacols[0])
				lbl = metacols[1]
				self.grid.SetColLabelValue(colindex, metacols[1])
				colindex += 1
					
		self.grid.ForceRefresh()
		
		fila = 0
			
		cursor = r_cn.cursor()
		cursor.execute(str(self.query))
		
		#Mensajes().Info(self, "Registros %s" % cursor.rowcount, "Oops")
		
		if numregs == 0:
			delta = cursor.rowcount
			if delta > 1:
				delta -= 1
				self.grid.AppendRows(delta)
			
		while True:

			row = fetchone(cursor)

			if row is None:
					break
						
			for col in range(0, colindex):
				if fila % 2 == 0:
					self.grid.SetCellBackgroundColour(fila, col, wx.NamedColour("Medium Goldenrod"))
					
				if col in (0,6):
					renderer = NullGridRenderer()
					self.grid.SetCellRenderer(fila, col, renderer)
				
				if col in (0,2,6):
					self.grid.SetReadOnly(fila, col, True)
					
				if col in (3,4):
					self.grid.SetCellEditor(fila, col, self.editor())
					self.grid.SetColFormatFloat(col, 12, 2)
					if self.renderer:
						self.grid.SetCellRenderer(fila,col, self.renderer())
				
				if len(metapiece_selected[col]) in (3,4):
					col_selected = metapiece_selected[col]
					hAlignmnt = col_selected[2]
					self.grid.SetCellAlignment(fila, col, hAlignmnt, wx.ALIGN_CENTER)
					
				funcion = ""    
				if len(metapiece_selected[col]) == 4:
					funcion = col_selected[3]

				if col != 6:
					if row[col] == None:
						self.grid.SetCellValue(fila, col, '')
						
					else:
	
						try:
							if funcion == "":
								valor = str(row[col])
								
								if col == 1:
									sqlcta = """
									select ClaveCuenta from cont_Cuentas where CuentaID = %s
									""" % int(row[1])
									cu = r_cn.cursor()
									cu.execute(str(sqlcta))
									rowcta = fetchone(cu)
									self.grid.SetCellValue(fila, col, rowcta[0])
									self.grid.SetCellValue(fila, 6, valor)
									cu.close()
									
								else:
									self.grid.SetCellValue(fila, col, valor)
								
							else:
								
								try:
									lafuncion = funcion % row[col]
									#lafuncion = funcion + '(' + str(row[col]) + ')'
									self.grid.SetCellValue(fila, col, eval(lafuncion))
								except:
									self.grid.SetCellValue(fila,col, '**')
	
						except:
	
							self.grid.SetCellValue(fila,col,str(row[col]).decode("iso8859-1"))
							
			fila += 1
						
		cursor.close()
		
		if rebuild:
			self.grid.DeleteRows(delta + 1, delta)
			
		self.grid.AutoSizeColumns()
		fila -= 1
		self.grid.SetGridCursor(fila, 1)
		self.grid.MakeCellVisible(fila, 1)
		
		self.grid.SetColSize(0,0)
		self.grid.SetColSize(6,0)
		
		return
			
	def OnRightClick(self, event):
		
		fila = event.GetRow()
		self.grid.SetGridCursor(fila, 1)
		item = self.grid.GetCellValue(fila, 0)
		cuentaid = self.grid.GetCellValue(fila, 6)
		descripcion = self.grid.GetCellValue(fila, 2)
		cargo = self.grid.GetCellValue(fila, 3)
		abono = self.grid.GetCellValue(fila, 4)
		referencia1 = self.grid.GetCellValue(fila, 5)

		if Mensajes().YesNo(self,u"� Desea eliminar la partida %s ?" % (fila + 1), u"Confirmaci�n"):
			
			if "" in (item, cuentaid, descripcion, cargo, abono, referencia1):
				
				self.grid.DeleteRows(fila, 1)
			
			else:
				
				if self.Afectar(item, cuentaid, descripcion, cargo, abono, referencia1, soloEliminar = True):
					
					self.grid.DeleteRows(fila, 1)
					
		return
	
	def ObtenDescripcionCuenta(self, cuenta):
		
		empresaid = self.empresaid
		
		cuentaid = 0
		descripcion = ""
		
		sql = """
		select CuentaID, Descripcion from cont_Cuentas
		where ClaveCuenta = '%s' and EmpresaID = %s and Afectable = 1
		""" % (cuenta, empresaid)
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		cursor.close()
		
		if row:
			cuentaid = row[0]
			descripcion = self.GetStringFromField(row[1])
		
		return (cuentaid, descripcion)
	
	def ChecaCuadrePoliza(self, polizaid):
		
		sql = """
		select Cargo - Abono from cont_PolizaDetalle where PolizaID = %s and Item = 0
		""" % polizaid
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		saldo = int(fetchone(cursor)[0])
		cursor.close()
		
		if saldo == 0:
			self.GetControl(ID_STATICBITMAPCUADREPOLIZASCONTABLES).SetBitmap(MyBitmapsFunc(34))
		else:
			self.GetControl(ID_STATICBITMAPCUADREPOLIZASCONTABLES).SetBitmap(MyBitmapsFunc(35))
			
		return
		
	def Afectar(self, item, cuentaid, descripcion, cargo, abono, referencia1, soloEliminar = False):
		
		polizaid = self.poliza.GetValue().strip()

		cursor = r_cn.cursor()
		sql = """
		select count(*) from cont_PolizaDetalle where PolizaID = %s
		""" % polizaid
		cursor.execute(str(sql))
		cuantos = int(fetchone(cursor)[0])
		siguiente = 100

		if cuantos > 0:
			sql = """
			select max(Item) + 100 from cont_PolizaDetalle where PolizaID = %s
			""" % polizaid
			cursor.execute(str(sql))
			siguiente = int(fetchone(cursor)[0])
			
		# aqui va el query de eliminacion de partida o registro de detalle
		
		sql = """
		delete from Cont_PolizaDetalle where PolizaID = %s and Item = %s
		""" % (polizaid, item)
		
		try:
			if item:
				cursor.execute(str(sql))
				if soloEliminar:
					cursor.close()
					r_cn.commit()
					self.ChecaCuadrePoliza(polizaid)
					self.grid.AutoSizeColumns()
					return True
			else:
				item = siguiente
				fila = self.grid.GetGridCursorRow()
				self.grid.SetCellValue(fila, 0, str(item))
			
			# aqui va el query de insercion de partida o registro de detalle
			
			referencia2 = ""
			
			sql = """
			insert into cont_PolizaDetalle(PolizaID, Item, CuentaID, Descripcion, Cargo, Abono, Referencia1, Referencia2)
			values (%s, %s, %s, '%s', %s, %s, '%s', '%s')
			""" % (polizaid, item, cuentaid, descripcion, cargo, abono, referencia1, referencia2)
			
			cursor.execute(str(sql))
			cursor.close()
			r_cn.commit()
			
			fila = self.grid.GetGridCursorRow()
			self.grid.SetCellValue(fila, 6, cuentaid)
			
		except:
			
			cursor.close()
			r_cn.rollback()
			Mensajes().Info( self, u"No pudo afectarse la informaci�n", u"Atenci�n")
			return False

		self.grid.AutoSizeColumns()

		self.ChecaCuadrePoliza(polizaid)
		
		return True

	def OnFiltro(self, event):
		
		self.tipopolizafiltro = event.GetSelection()
		
		self.FillListBox()
		
		return
		
	def FillListBox(self, display = 'first'):
		
		wx.BeginBusyCursor()
		
		display = "last"
		ultima = True
		ultimapoliza = 0
		
		lbox = self.GetControl(ID_LISTBOXPOLIZASCONTABLES)
		lbox.Clear()
		
		if self.tipopolizafiltro == 0:
			sql = """
			SELECT a.PolizaID, convert(varchar(10), a.FechaPoliza, 103), b.Descripcion, a.Descripcion
			FROM cont_Polizas a join cont_PolizaTipo b on a.PolizaTipoID = b.PolizaTipoID
			where a.EmpresaID = %s order by 1 desc
			""" % self.empresaid
		else:
			sql = """
			SELECT a.PolizaID, convert(varchar(10), a.FechaPoliza, 103), b.Descripcion, a.Descripcion
			FROM cont_Polizas a join cont_PolizaTipo b on a.PolizaTipoID = b.PolizaTipoID
			where a.EmpresaID = %s and a.PolizaTipoID = %s order by 1 desc
			""" % (self.empresaid, self.tipopolizafiltro)
		
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		
		for row in rows:
			
			if ultima:
				ultimapoliza = int(row[0])
				ultima = False
				
			tipopoliza = str(row[2]).strip()
			descripcion = str(row[3]).strip()
			dato = str(row[0]).rjust(12) + "    " + str(row[1]) + "    " + str(row[3]) + "  -  (" + tipopoliza + ")"
			lbox.Append(dato, row[0])

		cu.close()
		
		if ultimapoliza:
			
			self.fillbox = True
			if display == 'first':
				self.GetLFRecord("min")
			elif display == 'last':
				self.GetLFRecord("max")
			self.fillbox = False
				
			self.ChecaCuadrePoliza(ultimapoliza)
		
		wx.EndBusyCursor()
		
		return
		
	def OnPrint(self, event):
		
		tabla = self.dbtable
		
		meta = ((100,u"Cuenta"), (200,u"Descripci�n"), (150, u"Cargo"), (150,u"Abono"), (300,u"Referencia"))
		
		#query = """
		#select e.identradainv, convert(varchar(10),e.fecha,103), p.razonsocial, e.referencia, e.notas
		#from gixentradasinv e join gixproveedores p on e.idproveedor = p.idproveedor order by e.fecha DESC
		#"""
		#titulo = u"Consulta del Detalle de la P�liza" 
		#self.DisplayGrid(tabla, meta, query, titulo)
		
		return
		
	def OnSearch(self, event):
		
		pass
		
	def GetLFRecord(self, what):

		if not self.fillbox:
			if what == "min":
				what = "max"
			else:
				what = "min"
		
		lbox = self.GetControl(self.listbox)
		
		numero = ""
		
		if self.tipopolizafiltro == 0:
			sql = "SELECT %s(PolizaID) from %s where EmpresaID = %s" \
				% (what, self.dbtable, self.empresaid)
		else:
			sql = "SELECT %s(PolizaID) from %s where EmpresaID = %s and PolizaTipoID = %s" \
				% (what, self.dbtable, self.empresaid, self.tipopolizafiltro)
		
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		cursor.close()
		
		try:
			if row is not None:
				numero = int(row[0])
		except:
			return
					
		self.GetRecord(numero)
		
		if self.fillbox:
			what = "min"
		else:
			if what == "min":
				what = "max"
			else:
				what = "min"
			
		self.ListBoxReposition(what)
		
		return
		
	def OnText(self, event):
		
		self.controlactual = event.GetId()
		
		self.Text()
		
		return
	
	def Text(self, VengodelaLista = False):

		for id in(ID_TEXTCTRLTIPOPOLIZASCONTABLES, ID_TEXTCTRLFECHAPOLIZASCONTABLES, ID_TEXTCTRLDESCRIPCIONPOLIZASCONTABLES):
			
			control = self.GetControl(id)
			
			if id in (ID_TEXTCTRLFECHAPOLIZASCONTABLES, ID_TEXTCTRLDESCRIPCIONPOLIZASCONTABLES):
			
				valor = control.GetValue().strip()
				
				if valor == "" and not self.FillingARecord and not self.NewFlag:
					self.NewFlag = True
					
					if not VengodelaLista:
						Mensajes().Info(self, u"� No debe quedar ning�n dato en blanco !", u"Atenci�n")
						return

			if id == ID_TEXTCTRLTIPOPOLIZASCONTABLES:
				tipopoliza = control.GetValue().strip()
				if tipopoliza != "":
					if not tipopoliza.isdigit():
						Mensajes().Info(self, u"� El tipo de p�liza debe ser num�rico !", u"Atenci�n")
						return
					descripcion = self.ObtenTipoPoliza(tipopoliza)
					if descripcion == "":
						Mensajes().Info(self, u"� El tipo de p�liza no existe !", u"Atenci�n")
						return
					self.GetControl(ID_TEXTTIPOPOLIZASCONTABLES).SetLabel(descripcion)
				elif not self.FillingARecord and not self.NewFlag:
					self.NewFlag = True
					if not VengodelaLista:
						Mensajes().Info(self, u"� El tipo de p�liza no debe quedar en blanco !", u"Atenci�n")
						return
		
		self.EndOfOnText(self.controlactual)    
		
	def ObtenTipoPoliza(self, tipopoliza):
		
		descripcion = ""
		
		sql = "select Descripcion from cont_PolizaTipo where PolizaTipoID = %s" % tipopoliza
		
		try:
			cursor = r_cn.cursor()
			cursor.execute(str(sql))
			row = fetchone(cursor)
			if row:
				descripcion = "%s" % (self.GetStringFromField(row[0]),) 
		finally:
			cursor.close()
			
		return descripcion
		
	def SaveRecord(self):
		
		lbx = self.GetControl(ID_LISTBOXPOLIZASCONTABLES)
		poliza = self.GetControl(ID_TEXTCTRLPOLIZAPOLIZASCONTABLES).GetValue()

		if poliza.strip() == "":
			bienGrabado = self.AddRecord()
			lbx.Clear()
			self.FillListBox("last")            # se va al final de la lista aunque la alta haya sido intermedia
		else:
			bienGrabado = self.UpdateRecord()
			
			if bienGrabado:
				inx = lbx.GetSelection()
				self.FillListBox()
				lbx.SetSelection(inx)
			
		if bienGrabado:
			self.tb.EnableTool(ID_TOOLSAV, False)
			self.tb.EnableTool(ID_TOOLDEL, True)
			self.tb.EnableTool(ID_TOOLNEW, True)
			
			self.MenuSetter(ID_MENUGRABAR, False)
			self.MenuSetter(ID_MENUELIMINAR, True)
			self.MenuSetter(ID_MENUNUEVO, True)
			
			self.GetRecord("%s" % (poliza))
		else:
			Mensajes().Info(self,u"� El Registro no fue grabado !", u"Atenci�n")
			
		return
			
	def UpdateRecord(self):

		polizaid = self.GetControl(ID_TEXTCTRLPOLIZAPOLIZASCONTABLES).GetValue()
		
		PolizaTipoId = self.GetControl(ID_TEXTCTRLTIPOPOLIZASCONTABLES).GetValue()
		Descripcion = self.GetControl(ID_TEXTCTRLDESCRIPCIONPOLIZASCONTABLES).GetValue()
		FechaPoliza = "NULL"
		
		try:
			fecha_dia, fecha_mes, fecha_ano = self.GetControl(ID_TEXTCTRLFECHAPOLIZASCONTABLES).GetValue().split('/')
			FechaPoliza = "'%s/%02d/%02d'" % (fecha_ano, int(fecha_mes), int(fecha_dia))
		except:
			pass
		
		setListForQuery = """
		PolizaTipoID = %s, FechaPoliza = %s, Descripcion = '%s' 
		""" % (PolizaTipoId, FechaPoliza, Descripcion)
		
		sql = "update %s set %s where PolizaID = %s " % (self.dbtable, setListForQuery, polizaid)
		
		return self.QueryUpdateRecord(sql)
		
	def AddRecord(self):

		EmpresaID = self.empresaid
		PolizaTipoID = self.GetControl(ID_TEXTCTRLTIPOPOLIZASCONTABLES).GetValue()
		Descripcion = self.GetControl(ID_TEXTCTRLDESCRIPCIONPOLIZASCONTABLES).GetValue()
		UsuarioCaptura = self.usuario
		FechaPoliza = "NULL"
		
		try:
			fecha_dia, fecha_mes, fecha_ano = self.GetControl(ID_TEXTCTRLFECHAPOLIZASCONTABLES).GetValue().split('/')
			FechaPoliza = "'%s/%02d/%02d'" % (fecha_ano, int(fecha_mes), int(fecha_dia))
		except:
			pass
		
		sqlFields = """ 
		EmpresaID, PolizaTipoID, FechaPoliza, Descripcion, UsuarioCaptura
		"""
		sqlValues = "%s, %s, %s, '%s', '%s'" \
					% (EmpresaID, PolizaTipoID, FechaPoliza, Descripcion, UsuarioCaptura)
		
		#sql = "insert into %s (%s) values (%s)" % (self.dbtable, sqlFields, sqlValues)    Insert directo
		
		sql = "exec dbo.spcont_PolizaAdd %s" % sqlValues    # Insert via stored procedure
		
		queTal =  self.QueryUpdateRecord(sql)
		
		if queTal:
			
			sqlx = "select max(PolizaID) from cont_Polizas"
			cursor = r_cn.cursor()
			cursor.execute(str(sqlx))
			row = fetchone(cursor)
			numero = ""
			
			if row is not None:
				numero = str(int(row[0]))
					
			cursor.close()
			
			self.GetControl(ID_TEXTCTRLPOLIZAPOLIZASCONTABLES).SetValue(numero)

		return queTal
	
	def OnDeleteRecord(self, event):

		self.delpos = True
		
		if Mensajes().YesNo(self,u"� Desea realmente eliminar este registro ?", u"Confirmaci�n") :

			if self.DeleteRecord():

				lbx = self.GetControl(ID_LISTBOXPOLIZASCONTABLES)
				pos = lbx.GetSelection()
				self.MoveOneStep("PREVIOUS")
				
				if self.delpos:
					lbx.Delete(pos)
					
				Mensajes().Info(self,u"� Registro Eliminado !",u"Atenci�n")
				
				#self.LimpiaControles()
				
				self.tb.EnableTool( ID_TOOLSAV, False)
				self.tb.EnableTool( ID_TOOLDEL, True)
				self.tb.EnableTool( ID_TOOLNEW, True)
				
				self.MenuSetter(ID_MENUGRABAR, False)
				self.MenuSetter(ID_MENUELIMINAR, True)
				self.MenuSetter(ID_MENUNUEVO, True)
				
		return
				
	def DeleteRecord(self):
		
		polizaid = self.GetControl(ID_TEXTCTRLPOLIZAPOLIZASCONTABLES).GetValue().strip()

		if polizaid == "":
			
			Mensajes().Info(self, u"No se ha especificado la p�liza", u"Atenci�n")
			
			return False
		
		sql = """
		select count(*) from cont_PolizaDetalle where PolizaID = %s
		""" % polizaid
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		rowscount = fetchone(cursor)[0]
		cursor.close()

		if rowscount > 1:
			
			Mensajes().Info(self,u"� No puede eliminar la p�liza !\n\n" \
							u"Su petici�n ha sido rechazada ya que la p�liza\n" \
							u"cuenta con movimientos de detalle.", u"Atenci�n")
			return False
		
		elif rowscount == 1:
		
			sql = "delete from cont_PolizaDetalle where PolizaID = %s and Item = 0" % polizaid
	
			try:
				cursor = r_cn.cursor()
				cursor.execute(str(sql))
				cursor.close()
				r_cn.commit()
			
			except:
				
				cursor.close()
				r_cn.rollback()
				Mensajes().Info(self,u"Sucedi� algo que impidi� eliminar este registro.\n" \
								u"Quiz� se deba a que hay otra informaci�n\nque depende de este registro.\n%s" \
								% sql, u"Atenci�n")
				return False
		
		sql = "delete from %s where PolizaID = %s" % (self.dbtable, polizaid) 

		try:
			cursor = r_cn.cursor()
			cursor.execute(str(sql))
			cursor.close()
			r_cn.commit()

			notebook = self.GetControl(ID_NOTEBOOKPOLIZASCONTABLES)
			tab = notebook.GetSelection()
			if tab == self.TABCONGRID:
				notebook.SetSelection(0)
				
			aux = self.NewFlag
			self.NewFlag = True
			self.LimpiaControles()
			self.NewFlag = aux
			self.GetControl(ID_TEXTTIPOPOLIZASCONTABLES).SetLabel("")
			
			return True
		
		except:

			cursor.close()
			r_cn.rollback()
			Mensajes().Info(self,u"Sucedi� algo que impidi� eliminar este registro.\n" \
							u"Quiz� se deba a que hay otra informaci�n\nque depende de este registro.\n%s" \
							% sql, u"Atenci�n")
			return False
	
	def GetAnotherRecord(self, comparison):

		if comparison == "<":
			comparison = ">"
			asc_or_desc = "ASC"
		else:
			comparison = "<"
			asc_or_desc = "DESC"

		lbox = self.GetControl(self.listbox)
		lboxIndex = lbox.GetSelection()
		poliza = lbox.GetClientData(lboxIndex)
		
		if self.tipopolizafiltro == 0:
			sql = "select top 1 PolizaID from %s where PolizaID %s %s and EmpresaID = %s order by PolizaID %s" \
				% (self.dbtable, comparison, poliza, self.empresaid, asc_or_desc)
		else:
			sql = "select top 1 PolizaID from %s where PolizaID %s %s and EmpresaID = %s and PolizaTipoID = %s" \
				u"order by PolizaID %s" \
				% (self.dbtable, comparison, poliza, self.empresaid, self.tipopolizafiltro, asc_or_desc)
			
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		
		numero = ""
		
		if row is not None:
			numero = str(int(row[0]))
					
		cursor.close()
		
		if numero <> "":
		
			if comparison == ">":
				newlboxIndex = lboxIndex - 1
			else:
				newlboxIndex = lboxIndex + 1

			if str(numero) <> str(lbox.GetClientData( newlboxIndex)):
				Mensajes().Warn(self,"A futuro refrescar el Listbox....","Epale")
			else:
				lbox.SetSelection( newlboxIndex, True)
				self.GetRecord(numero)
		
		else:
			
			self.FillListBox()
			self.delpos = False
			
		return numero
	
	def GetRecord(self, record):
		
		lbox = self.GetControl(self.listbox)
		
		try:
			a = int(record)
		except:
			return False
		
		self.FillingARecord = True
		self.LimpiaControles()
		self.SetColoreable(False)

		for v in self.controles_tipo_txt.itervalues():
			self.originales[ v ] = None
		
		poliza = str(int(record))
		
		self.GetControl(ID_TEXTCTRLPOLIZAPOLIZASCONTABLES).SetValue(poliza)
		
		sql = """
		select a.PolizaTipoID, convert(varchar(10), a.FechaPoliza, 103), a.Descripcion, b.Descripcion
		from %s a join cont_PolizaTipo b on a.PolizaTipoID = b.PolizaTipoID
		where PolizaID = %s
		""" % (self.dbtable, poliza)
		
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		cursor.close()
		
		#ref,prov,fecha,notas = map(self.GetStringFromField, row)  ej. de asignaciones

		self.GetControl(ID_TEXTCTRLTIPOPOLIZASCONTABLES).SetValue(str(row[0]))
		self.GetControl(ID_TEXTCTRLFECHAPOLIZASCONTABLES).SetValue(self.GetStringFromField(row[1]))
		self.GetControl(ID_TEXTCTRLDESCRIPCIONPOLIZASCONTABLES).SetValue(self.GetStringFromField(row[2]))
		self.GetControl(ID_TEXTTIPOPOLIZASCONTABLES).SetLabel(self.GetStringFromField(row[3]))
		
		self.ChecaCuadrePoliza(record)
		
		for x in "TIPO,FECHA,DESCRIPCION".split(","):
			key = eval("ID_TEXTCTRL%sPOLIZASCONTABLES" % x )
			self.originales[key] = self.GetControl(key).GetValue()
		
		self.FillingARecord = False
		
		self.CambiaTab()
		
		self.tb.EnableTool(ID_TOOLSAV,False)
		self.tb.EnableTool(ID_TOOLDEL, True)
		self.tb.EnableTool(ID_TOOLNEW,True)
		self.MenuSetter(ID_MENUGRABAR, False)
		self.MenuSetter(ID_MENUELIMINAR, True)
		self.MenuSetter(ID_MENUNUEVO, True)             
		
		return True
		
class GixImportaArchivoDbf(wx.Dialog, GixBase):
	
	archivodbf = ""
	destinosql = ""
	empresadestino = ""

	def __init__(self, parent, id = -1, title = u"Consultar / Importar Archivos DBF",
					pos = wx.DefaultPosition, size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE ):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		
		ImportaArchivoDbf(self, True )
		
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONARCHIVOIMPORTADBF, self.OnArchivoImportaDbf)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONTABLASQLDESTINODBF, self.OnTablaSqlDestino)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONEMPRESADESTINODBF, self.OnEmpresaDestino)
		wx.EVT_BUTTON(self, ID_BUTTONLIMPIARCONTENIDODBF, self.OnLimpiaContenidoDbf)
		wx.EVT_BUTTON(self, ID_BUTTONCONSULTADBF, self.OnConsultaDbf)
		wx.EVT_BUTTON(self, ID_BUTTONIMPORTADBF, self.OnImportaDbf)
		
		wx.EVT_CLOSE(self, self.OnClose)
		
	def OnArchivoImportaDbf(self, event):
		if wx.Platform == '__WXMSW__':
			key = _winreg.OpenKey( _winreg.HKEY_CURRENT_USER,
									"Software\\Microsoft\\Windows\\CurrentVersion\Explorer\\Shell Folders")
			ruta = _winreg.QueryValueEx( key, 'Personal')[0]
			_winreg.CloseKey( key )
		else:
			ruta = os.getenv("HOME")
			
		dlg = wx.FileDialog( None, message="Elegir Archivo DBF  a Consultar / Importar", defaultDir= ruta,
				     defaultFile= "", wildcard="*.dbf", style=wx.OPEN |
				     wx.FD_OVERWRITE_PROMPT) #| wx.CHANGE_DIR))
		
		if dlg.ShowModal() == wx.ID_OK:
			self.archivodbf = dlg.GetPath().encode("iso8859-1")
			self.GetControl(ID_TEXTCTRLARCHIVOIMPORTADBF).SetValue(self.archivodbf)
		
		self.SetFocus()
		
		return
	
	def OnTablaSqlDestino(self, event):
		
		self.inxtablasql = []
		self.chotablasql = []
		
		self.inxtablasql.append(u'cont_Cuentas')
		self.chotablasql.append('cont_Cuentas - Cat�logo de Cuentas de Contabilidad' + \
							'                                                                  ')

		self.index = wx.GetSingleChoiceIndex(u"Opciones",  u"Elegir Tabla SQL Destino", self.chotablasql, parent = None)
		
		if int(self.index) > -1:
			self.GetControl(ID_TEXTCTRLTABLASQLDESTINODBF).SetValue(str(self.chotablasql[self.index]))
			self.destinosql = self.inxtablasql[self.index]
		
		return
		
	def OnEmpresaDestino(self, event):
		
		self.inxempresa = []
		self.choempresa = []
		
		query = """
		select EmpresaID, convert(varchar(7), EmpresaID) + ' - ' + RazonSocial + '                    '
		from cont_Empresas order by RazonSocial
		"""
		cu = r_cn.cursor()
		cu.execute(query)
		rows = fetchall(cu)
		cu.close()
		
		for row in rows:
			self.inxempresa.append(row[0])
			self.choempresa.append(self.GetStringFromField(row[1]) + '                                         ')

		self.index = wx.GetSingleChoiceIndex(u"Opciones",  u"Elegir Empresa Destino", self.choempresa, parent = None)
		
		if int(self.index) > -1:
			self.GetControl(ID_TEXTCTRLEMPRESADESTINODBF).SetValue(str(self.choempresa[self.index]))
			self.empresadestino = self.inxempresa[self.index]
		
		return
		
	def OnLimpiaContenidoDbf(self, event):
		
		controlok = self.GetControl(ID_TEXTCTRLROWSOKDBF)
		controlbad = self.GetControl(ID_TEXTCTRLROWSBADDBF)
		
		controlok.Clear()
		controlok.Update()
		controlok.Refresh()
		controlbad.Clear()
		controlbad.Update()
		controlbad.Refresh()
		
		self.GetControl(ID_TEXTCTRLARCHIVOIMPORTADBF).SetValue("")
		self.GetControl(ID_TEXTCTRLTABLASQLDESTINODBF).SetValue("")
		self.GetControl(ID_TEXTCTRLEMPRESADESTINODBF).SetValue("")
		
		self.archivodbf = ""
		self.destinosql = ""
		
		return
	
	def OnConsultaDbf(self, event):

		if self.archivodbf:
			
			self.importa = False
			self.ConsultaImporta()
			
		else:
			
			Mensajes().Info(self, u"Seleccione el archivo DBF que desea consultar.", u"Atenci�n")

		return
	
	def OnImportaDbf(self, event):

		if self.archivodbf and self.destinosql and self.empresadestino:
			
			self.importa = True
			self.ConsultaImporta()
			
		else:
			
			if not self.archivodbf:
				Mensajes().Info(self, u"Seleccione el archivo DBF que desea importar.", u"Atenci�n")
			elif not self.destinosql:
				Mensajes().Info(self, u"Seleccione la tabla SQL destino.", u"Atenci�n")
			else:
				Mensajes().Info(self, u"Seleccione la empresa destino.", u"Atenci�n")

		return
	
	def ConsultaImporta(self):
		
		wx.BeginBusyCursor()    
		
		controlok = self.GetControl(ID_TEXTCTRLROWSOKDBF)
		controlbad = self.GetControl(ID_TEXTCTRLROWSBADDBF)
		
		if self.importa:
			self.contadorcuentas = 0
			self.cuentasDict = {}
			controlok.Clear()
			controlok.Update()
			controlok.Refresh()
			controlbad.Clear()
			controlbad.Update()
			controlbad.Refresh()
		
		dbf = dbfpy.dbf.Dbf()
		dbf.openFile(self.archivodbf, readOnly=1)
		
		controlok.AppendText(u'Estructura del Archivo:\n')
		controlok.AppendText(u'----------------------------\n')
		controlok.AppendText(u'    Type      Len        Dec          Field Name\n')
		controlok.AppendText(u'\n')
		
		definitions = dbf.fieldDefinitions()
		for fld in definitions:
			inf = fld.fieldInfo()
			cta = (u'     %s\t%s\t%s\t%s\n') % (inf[1].rjust(3), str(inf[2]).rjust(5), str(inf[3]).rjust(3), inf[0])
			controlok.AppendText(cta)

		recordscount = dbf.recordCount()
		recordstotal = (u'\nTotal de Registros: %s\n') % recordscount
		controlok.AppendText(recordstotal)
		controlok.AppendText(u'------------------------------\n\n')
		
		for fila in range(len(dbf)):
			recctrl = True
			datoscuenta = []
			
			try:
				rec = dbf[fila]
				for fldName in dbf.fieldNames():
					if recctrl:
						row = u'Registro: %s\n' % fila
						controlok.AppendText(row)
						controlok.AppendText(u'-------------------\n')
						recctrl = False
					
					if len(fldName) > 6:
						row = u'%s:\t %s\n' % (fldName, rec[fldName])
					else:
						row = u'%s:\t\t %s\n' % (fldName, rec[fldName])
						
					controlok.AppendText(row)
					datoscuenta.append(rec[fldName])

				controlok.AppendText(u"\n")
				
				if datoscuenta and self.importa:
					if len(datoscuenta[0]) == 12 and datoscuenta[0].isdigit():
						if datoscuenta[0][0:3] != "000":
							self.AddRecord(datoscuenta)
				
			except:
				controlbad.AppendText(str(fila).rjust(18))
				controlbad.AppendText(u"\n")
				controlok.AppendText(u"\n")
			
		dbf.close()     
		
		controlok.ShowPosition(0)
		controlbad.ShowPosition(0)
		
		wx.EndBusyCursor()      
		
		if self.importa:
			Mensajes().Info(self,u"� Ha finalizado la importaci�n !\n\n" \
							u"A continuaci�n se estructurar� el cat�logo de cuentas.\n", u"Atenci�n")
			self.dlgProgreso = wx.ProgressDialog(u"Estructurando Cat�logo de Cuentas", u"Progreso",
			                                maximum = self.contadorcuentas,
			                                style = wx.PD_AUTO_HIDE | wx.PD_APP_MODAL | wx.PD_SMOOTH | \
			                                wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_REMAINING_TIME)
			self.EstructuraCatalogo()
			self.dlgProgreso.Destroy()
			Mensajes().Info(self, u"� Ha finalizado la estructuraci�n !", u"Atenci�n")
		else:
			Mensajes().Info(self, u"� Ha finalizado la consulta !", u"Atenci�n")
		
		return
	
	def AddRecord(self, datoscuenta):
			
		if datoscuenta[5] in (0, 3, 4):
			
			Mensajes().Info(self,u"El registro no fue grabado ya que la cuenta de mayor\n" \
							u"no puede ser 0, 3 o 4.", u"Atenci�n")
			return
		
		elif not datoscuenta[1]:
			
			Mensajes().Info(self,u"El registro no fue grabado por no\n" \
							u"tener descripci�n.", u"Atenci�n")
			return
		
		else:
			
			self.contadorcuentas += 1
			empresaid = self.empresadestino
			clavecuenta = datoscuenta[0]
			hijadecuentaid = "Null"
			descripcion = datoscuenta[1]
			if datoscuenta[3] == "A":
				naturaleza = "D"
			elif datoscuenta[3] == "D":
				naturaleza = "A"
			else:
				naturaleza = "D"
			afectable = 1
			cuentatipoid = 1
				
			sqlFields = """ 
			EmpresaID, ClaveCuenta, HijaDeCuentaID, Descripcion, Naturaleza, Afectable, CuentaTipoID
			"""
			sqlValues = " %s, '%s', %s, '%s', '%s', %s, %s " \
				% (empresaid, clavecuenta, hijadecuentaid, descripcion, naturaleza, afectable, cuentatipoid)
			sql = "insert into %s (%s) values (%s) " % (self.destinosql, sqlFields, sqlValues)
			
			queTal = self.QueryUpdateRecord(sql)
			
			if queTal:
				
				sqlx = "select max(CuentaID) from %s" % self.destinosql
				cursor = r_cn.cursor()
				cursor.execute(str(sqlx))
				row = fetchone(cursor)
				cursor.close()
				
				if row is not None:
					self.ultimo = int(row[0])
					self.cuentasDict[clavecuenta] = self.ultimo
				else:
					return
				
			else:
	
				Mensajes().Info(self, u"� La cuenta '%s' no fue grabada !" % clavecuenta, u"Atenci�n")

		return
	
	def EstructuraCatalogo(self):

		wx.BeginBusyCursor()    
		
		cuentas = []
		progreso = 0
		signo = "%"
		
		for key in self.cuentasDict.iterkeys():
			cuentas.append(key)
			
		cuentas.sort()
		
		for cuenta in cuentas:
			progreso += 1
			avance = (progreso * 100) / self.contadorcuentas
			mensaje = "Progreso %s%s" % (avance, signo)
			self.dlgProgreso.Update(progreso, newmsg = mensaje)
			if cuenta[9:12] == "000":
				if cuenta[6:9] == "000":
					if cuenta[3:6] == "000":
						pass
					else:
						aux = cuenta[0:3] + "000000000"
						if self.cuentasDict.has_key(aux):
							self.ActualizaMadreHija(self.cuentasDict[cuenta], self.cuentasDict[aux])
						else:
							pass
				else:
					aux = cuenta[0:6] + "000000"
					if self.cuentasDict.has_key(aux):
						self.ActualizaMadreHija(self.cuentasDict[cuenta], self.cuentasDict[aux])
					else:
						aux = cuenta[0:3] + "000000000"
						if self.cuentasDict.has_key(aux):
							self.ActualizaMadreHija(self.cuentasDict[cuenta], self.cuentasDict[aux])
						else:
							pass
			else:
				aux = cuenta[0:9] + "000"
				if self.cuentasDict.has_key(aux):
					self.ActualizaMadreHija(self.cuentasDict[cuenta], self.cuentasDict[aux])
				else:
					aux = cuenta[0:6] + "000000"
					if self.cuentasDict.has_key(aux):
						self.ActualizaMadreHija(self.cuentasDict[cuenta], self.cuentasDict[aux])
					else:
						aux = cuenta[0:3] + "000000000"
						if self.cuentasDict.has_key(aux):
							self.ActualizaMadreHija(self.cuentasDict[cuenta], self.cuentasDict[aux])
						else:
							pass
		
		wx.EndBusyCursor()      
		
		return
		
	def ActualizaMadreHija(self, cuentaidhija, cuentaidmadre = 0, afectable = 0):
		
		setListForQuery = "HijaDeCuentaID = %s" % cuentaidmadre
		sql = "update %s set %s where CuentaID = %s " % (self.destinosql, setListForQuery, cuentaidhija)

		if self.QueryUpdateRecord(sql):
			setListForQuery = "Afectable = %s" % afectable
			sql = "update %s set %s where CuentaID = %s " % (self.destinosql, setListForQuery, cuentaidmadre)
			self.QueryUpdateRecord(sql)
			
		return
	
	def OnClose(self, event):
		
		self.Destroy()
		
		return

class GixEmpresasCentrosCostos(wx.Frame, GixBase, GixContabilidad):
	TABCONGRID = 1
	coloreable = "ID_TEXTCTRLCENTROCOSTOEMPRESAID"
	coloreableeditable = False
	ctt = [coloreable,"ID_TEXTCTRLCENTROCOSTORAZONSOCIAL", "ID_TEXTCTRLCENTROCOSTORFC",
			"ID_TEXTCTRLCENTROCOSTOMASCARACUENTA", "ID_TEXTCTRLCENTROCOSTOCUENTACUADRE"]
	activecontrolafternewrecord = ID_TEXTCTRLCENTROCOSTORAZONSOCIAL
	listbox = ID_LISTBOXCENTROCOSTO
	dbtable  = "cont_Empresas"   #esto permite probar con tablas alternas iguales ( mismos campos distinto nombre )
	controles_tipo_txt = dict(zip(ctt,map(eval,ctt)))
	
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize, style = wx.DEFAULT_FRAME_STYLE ):
		wx.Frame.__init__(self, parent, id, title, pos, size, style)

		global PASSWORD
		self.InitialFlags(centroscostos = True)
		self.InitialStuff(self, CentrosCostosFuncion)   
		self.InitialBindings()
		self.empresaid = self.GetControl(ID_TEXTCTRLCENTROCOSTOEMPRESAID)
		self.grid = self.GetControl(ID_GRIDCENTROCOSTO)
		self.grid.Bind(gridlib.EVT_GRID_CELL_RIGHT_CLICK, self.OnRightClick)
		self.grid.Bind(wx.EVT_KEY_DOWN, self.OnKeyDown)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONCENTROCOSTOCUENTACUADRE, self.OnElegirCuentaCuadre)
		wx.EVT_NOTEBOOK_PAGE_CHANGED(self, ID_NOTEBOOKCENTROCOSTO, self.OnCambiaTab)
		
	def OnElegirCuentaCuadre(self, event):
		self.inxcuentacuadre = []
		self.chocuentacuadre = []
		empresaid = self.GetControl(ID_TEXTCTRLCENTROCOSTOEMPRESAID).GetValue()
		if empresaid:
			query = """
			select CuentaID, ClaveCuenta, Descripcion
			from cont_Cuentas where EmpresaID = %s order by ClaveCuenta
			""" % empresaid
			cu = r_cn.cursor()
			cu.execute(query)
			rows = fetchall(cu)
			cu.close()
			for row in rows:
				self.inxcuentacuadre.append(row[0])
				cuenta = self.EnmascaraCuenta(self.GetStringFromField(row[1]))
				cuentadescripcion = cuenta + "   " + self.GetStringFromField(row[2])
				self.chocuentacuadre.append(cuentadescripcion)
			if len(self.inxcuentacuadre) > 0:
				razonsocial = self.GetControl(ID_TEXTCTRLCENTROCOSTORAZONSOCIAL).GetValue()
				self.index = wx.GetSingleChoiceIndex(u"Opciones", u"Elegir Cuenta de Cuadre - %s" % razonsocial,
													 self.chocuentacuadre, parent = None)
				if int(self.index) > -1:
					cuentacuadre, descripcion = self.chocuentacuadre[self.index].split('   ')
					self.GetControl(ID_TEXTCTRLCENTROCOSTOCUENTACUADRE).SetValue(str(self.inxcuentacuadre[self.index]))
					self.GetControl(ID_TEXTCENTROCOSTOCUENTACUADRECLAVE).SetLabel(cuentacuadre)
					self.GetControl(ID_TEXTCENTROCOSTOCUENTACUADREDESCRIPCION).SetLabel(descripcion)
			else:
				Mensajes().Info(self, u"� La empresa no tiene cuentas registradas !", u"Atenci�n")
		else:
			Mensajes().Info(self, u"� La empresa no tiene cuentas registradas !", u"Atenci�n")

	def OnCambiaTab(self, event):
		self.CambiaTab()
			
	def CambiaTab(self):
		tab= self.GetControl(ID_NOTEBOOKCENTROCOSTO).GetSelection()
		if tab == self.TABCONGRID:
			if self.tb.GetToolEnabled(ID_TOOLNEW):
				razonsocial = self.GetControl(ID_TEXTCTRLCENTROCOSTORAZONSOCIAL).GetValue()
				self.GetControl(ID_TEXTCENTROCOSTORAZONSOCIAL).SetLabel(razonsocial)
				self.PrepararQuery()
			else:
				self.GetControl(ID_NOTEBOOKCENTROCOSTO).SetSelection(0)
				Mensajes().Info(self, u"Por favor introduzca la informaci�n de la empresa y grabela", u"Atenci�n")
		
	def InsertaFilas(self):
		control = self.GetControl(ID_TEXTCTRLCENTROCOSTOEMPRESAID)
		empresaid = control.GetValue().strip()
		sql = """
		select count(*) from gixcentroscostos where EmpresaID = %s
		""" % empresaid
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		filas = fetchone(cursor)[0]
		cursor.close()
		filas += 1
	
	def PrepararQuery(self):
		empresaid = self.empresaid.GetValue().strip()
		if empresaid == "":
			self.query = "select "","","","""
		else:
			self.query = """
			select CentroCostoID, Descripcion from gixcentroscostos where EmpresaID = %s order by Descripcion
			""" % empresaid
		
		self.meta = ((5,u""), (300, u"Descripci�n"))
		self.buildFromQuery()
		
	def OnKeyDown(self, evt):
		fila = self.grid.GetGridCursorRow()
		col = self.grid.GetGridCursorCol()
		
		try:
			evtkey = evt.KeyCode()
		except:
			evtkey = evt.GetKeyCode()
		
		if evtkey == wx.WXK_F6:
			archivo = "centros_de_costos.xls"
			if Mensajes().YesNo(self, u"Desea volcar los centros de costos al archivo de excel\n %s ?" \
								% (archivo), u"Atenci�n"):
				siono = "SI"
				try:
					exc = SimNoraExcel(excel = archivo)
					exc.SetGrid(self)
					exc.HazExcelDesdeGrid()
				except:
					siono = "NO"
				Mensajes().Info(self,u"El archivo de excel\n%s\n%s pudo ser generado!" % (archivo, siono), u"Atenci�n")
			evt.Skip()
			return
		
		if evtkey != wx.WXK_RETURN and evtkey != wx.WXK_NUMPAD_ENTER:
			evt.Skip()
			return

		if evt.ControlDown():   # the edit control needs this key
			evt.Skip()
			return
		
		self.grid.DisableCellEditControl()
		
		# asignaciones a variables
		
		partida = self.grid.GetCellValue(fila, 0)
		descripcion = self.grid.GetCellValue(fila, 1)
		if descripcion != "":
			if not self.Afectar(partida, descripcion):
				return
		
		success = self.grid.MoveCursorRight(evt.ShiftDown())
		if not success:
			newRow = self.grid.GetGridCursorRow() + 1
			if newRow < self.grid.GetTable().GetNumberRows():
				self.grid.SetGridCursor(newRow, 0)
				self.grid.MakeCellVisible(newRow, 0)
				self.grid.Refresh()
			else:
				self.grid.AppendRows(1)
				fila = newRow
				for col in range(len(self.meta) + 1):
					if fila % 2 == 0:
						self.grid.SetCellBackgroundColour(fila, col, wx.NamedColour("Medium Goldenrod"))
					if col == 0:
						renderer = NullGridRenderer()
						self.grid.SetCellRenderer( fila, col, renderer )
						self.grid.SetReadOnly( fila,col,True)
				self.grid.SetGridCursor(newRow, 1)
				self.grid.MakeCellVisible(newRow, 1)
				self.grid.Refresh()
		
	def buildFromQuery(self, rebuild = False):
		numregs = 0
		query = self.query
		metapiece = self.meta
		elements = len(metapiece)
		metapiece_selected = metapiece
		if numregs == 0:
			filas = self.grid.GetNumberRows()
			cols = self.grid.GetNumberCols()
			if filas:
				self.grid.DeleteRows(0, filas)
			if cols:
				self.grid.DeleteCols(0, cols)
			self.grid.InsertRows(0,1)
			self.grid.InsertCols(0, elements)
			fila = 0
			for col in range(0, elements):
				if fila % 2 == 0:
					self.grid.SetCellBackgroundColour(fila, col, wx.NamedColour("Medium Goldenrod"))
				if col == 0:
					renderer = NullGridRenderer()
					self.grid.SetCellRenderer(fila, col, renderer )
					self.grid.SetReadOnly(fila, col,True)
		else:
			self.grid.CreateGrid(numregs, elements)
						
		self.grid.SetRowLabelSize(40)
		colindex = 0
		for metacols in metapiece:
			self.grid.SetColSize(colindex, metacols[0])
			lbl = metacols[1]
			self.grid.SetColLabelValue(colindex, metacols[1])
			colindex += 1
		self.grid.ForceRefresh()
		fila = 0
		cursor = r_cn.cursor()
		cursor.execute( str(self.query))
		if numregs == 0:
			delta = cursor.rowcount
			if delta > 1:
				#delta -= 1
				self.grid.AppendRows( delta)
			
		while True:
			row = fetchone(cursor)
			if row is None:
				break
			for col in range(0, colindex):
				if fila % 2 == 0:
					self.grid.SetCellBackgroundColour(fila, col, wx.NamedColour("Medium Goldenrod"))
				if col == 0:
					renderer = NullGridRenderer()
					self.grid.SetCellRenderer(fila, col, renderer )
					self.grid.SetReadOnly( fila,col,True)
				if len(metapiece_selected[col]) in (3,4):
					col_selected = metapiece_selected[col]
					hAlignmnt = col_selected[2]
					self.grid.SetCellAlignment(fila, col, hAlignmnt, wx.ALIGN_CENTER)
				funcion = ""    
				if len(metapiece_selected[col]) == 4:
					funcion = col_selected[3]
				if col != 2:
					if row[col] == None:
						self.grid.SetCellValue(fila, col, '')
					else:
						try:
							if funcion == "":
								valor = str(row[col])
								self.grid.SetCellValue(fila, col, valor)
							else:
								try:
									lafuncion = funcion % row[col]
									#lafuncion = funcion + '(' + str(row[col]) + ')'
									self.grid.SetCellValue(fila, col, eval(lafuncion))
								except:
									self.grid.SetCellValue(fila, col, '**')
						except:
							try:
								self.grid.SetCellValue(fila,col,row[col].decode("iso8859-1"))
							except:
								try:
									self.grid.SetCellValue(fila,col,str(row[col]))
								except:
									self.grid.SetCellValue(fila,col,str(row[col]).encode("iso8859-1"))
			fila += 1
			
		cursor.close()
		if rebuild:
			self.grid.DeleteRows(delta + 1, delta)
		self.grid.AutoSizeColumns()
		fila -= 1
		self.grid.SetGridCursor(fila, 1)
		self.grid.MakeCellVisible(fila, 1)
			
	def OnRightClick(self, event):
		fila = event.GetRow()
		self.grid.SetGridCursor(fila, 1)
		partida = self.grid.GetCellValue(fila, 0)
		descripcion = self.grid.GetCellValue(fila, 1)

		#if Mensajes().YesNo(self,u"� Desea eliminar el registro %s ?" % (fila + 1), u"Confirmaci�n"):
		if Mensajes().YesNo(self,u"� Desea eliminar el centro de costo %s ?" % descripcion, u"Confirmaci�n"):
			if descripcion == "":
				self.grid.DeleteRows(fila, 1)
			else:
				if self.Afectar(partida, descripcion, soloEliminar = True):
					self.grid.DeleteRows(fila, 1)
	
	def Afectar(self, partida, descripcion, soloEliminar = False):
		empresaid = self.empresaid.GetValue().strip()
		cursor = r_cn.cursor()
		sql = """
		select count(*) from gixcentroscostos where EmpresaID = %s
		"""  % empresaid
		cursor.execute(str(sql))
		cuantos = int(fetchone(cursor)[0])
		siguiente = 1
		if cuantos > 0:
			sql = """
			select max(CentroCostoID) + 1 from gixcentroscostos where EmpresaID = %s
			""" % empresaid
			cursor.execute(str(sql))
			siguiente = int(fetchone(cursor)[0])
			
		sql = """
		delete from gixcentroscostos where EmpresaID = %s and CentroCostoID = %s
		""" % (empresaid, partida)
		try:
			if partida:
				if soloEliminar:
					cursor.execute(str(sql))
					cursor.close()
					r_cn.commit()
				else:
					sql = """
					update gixcentroscostos set Descripcion = '%s'
					where CentroCostoID = %s
					""" % (descripcion, partida)
					cursor.execute(str(sql))
					cursor.close()
					r_cn.commit()
			else:
				partida = siguiente
				fila = self.grid.GetGridCursorRow()
				self.grid.SetCellValue(fila, 0, str(partida))
				sql = """
				insert into gixcentroscostos(EmpresaID, Descripcion)
				values (%s, '%s')
				""" % (empresaid, descripcion)
				cursor.execute(str(sql))
				cursor.close()
				r_cn.commit()
				fila = self.grid.GetGridCursorRow()
		except:
			cursor.close()
			r_cn.rollback()
			if soloEliminar:
				Mensajes().Info( self, u"No pudo eliminarse el centro de costo.\n\n" \
							u"Tal vez se deba a que otra informaci�n depende\n" \
							u"de este centro de costo.", u"Atenci�n")
			else:
				Mensajes().Info( self, u"No pudo afectarse la informaci�n", u"Atenci�n")
				
			return False

		self.grid.AutoSizeColumns()
		return True

	def FillListBox(self, display = 'first'):
		wx.BeginBusyCursor()
		lbox = self.GetControl(ID_LISTBOXCENTROCOSTO)
		lbox.Clear()
		sql = "SELECT EmpresaID FROM %s order by EmpresaID" % self.dbtable 
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		for row in rows:
			dato = str(row[0]).rjust(9)
			lbox.Append(dato,row[0])

		cu.close()
		if display == 'first':
			self.GetLFRecord("min")
		elif display == 'last':
			self.GetLFRecord("max")
		wx.EndBusyCursor()
		
	def OnPrint(self,event):
		tabla = self.dbtable
		meta = ((20, u"Id"), (300, u"Raz�n Social"), (200, u"R.F.C."), (200, u"Mascara Cta."),
			(200, u"Cta. de Cuadre"))
		query = """
		select EmpresaID, RazonSocial, RFC, MascaraCuenta, CuadreCuentaID
		from %s order by RazonSocial
		""" % tabla
		titulo = u"Consulta de Empresas" 
		self.DisplayGrid(tabla, meta, query, titulo)
		
	def OnSearch(self, event):
		pass
		
	def GetLFRecord(self, what):
		lbox = self.GetControl(self.listbox)
		sql = "SELECT %s(EmpresaID) from %s" % (what, self.dbtable) 
		numero = ""
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		if row is not None:
			numero = int(row[0])
					
		cursor.close()
		self.GetRecord(numero)
		self.ListBoxReposition(what)
		
	def OnText(self, event):
		self.controlactual = event.GetId()
		self.Text()
	
	def Text(self, VengodelaLista = False):
		for id in(ID_TEXTCTRLCENTROCOSTORAZONSOCIAL, ID_TEXTCTRLCENTROCOSTORFC, ID_TEXTCTRLCENTROCOSTOMASCARACUENTA,
				  ID_TEXTCTRLCENTROCOSTOCUENTACUADRE):
			control = self.GetControl(id)
			valor = control.GetValue().strip()
			if valor == "" and not self.FillingARecord and not self.NewFlag:
				self.NewFlag = True
				if not VengodelaLista:
					Mensajes().Info(self, u"� No debe quedar ning�n dato en blanco !", u"Atenci�n")
					return
				
		self.EndOfOnText(self.controlactual)    
		
	def SaveRecord(self):
		empresaid = self.GetControl(ID_TEXTCTRLCENTROCOSTOEMPRESAID).GetValue()
		if empresaid.strip() == "" :
			bienGrabado = self.AddRecord()
			lbx = self.GetControl(ID_LISTBOXCENTROCOSTO)
			lbx.Clear()
			self.FillListBox("last") # se va al final de la lista aunque la alta haya sido de un puesto intermedio
			puesto = self.GetControl(ID_TEXTCTRLCENTROCOSTOEMPRESAID).GetValue()
		else:
			bienGrabado = self.UpdateRecord()
			
		if bienGrabado:
			self.tb.EnableTool( ID_TOOLSAV, False)
			self.tb.EnableTool( ID_TOOLDEL, True)
			self.tb.EnableTool( ID_TOOLNEW, True)
			self.MenuSetter(ID_MENUGRABAR, False)
			self.MenuSetter(ID_MENUELIMINAR, True)
			self.MenuSetter(ID_MENUNUEVO, True)
			self.GetRecord("%s" % (empresaid))
		else:
			Mensajes().Info(self,u"� El Registro no fue grabado !", u"Atenci�n")
			
	def UpdateRecord( self ):
		EmpresaID = self.GetControl(ID_TEXTCTRLCENTROCOSTOEMPRESAID).GetValue()
		RazonSocial = self.GetControl(ID_TEXTCTRLCENTROCOSTORAZONSOCIAL).GetValue()
		RFC = self.GetControl(ID_TEXTCTRLCENTROCOSTORFC).GetValue()
		MascaraCuenta = self.GetControl(ID_TEXTCTRLCENTROCOSTOMASCARACUENTA).GetValue()
		CuadreCuentaID = self.GetControl(ID_TEXTCTRLCENTROCOSTOCUENTACUADRE).GetValue()
		setListForQuery = """
		RazonSocial = '%s', RFC = '%s', MascaraCuenta = '%s', CuadreCuentaID = %s
		""" % (RazonSocial, RFC, MascaraCuenta, CuadreCuentaID)
		sql = "update %s set %s " \
				"where EmpresaID = %s " \
			% (self.dbtable, setListForQuery, EmpresaID)
		return  self.QueryUpdateRecord(sql)
	
	def AddRecord(self):
		RazonSocial = self.GetControl(ID_TEXTCTRLCENTROCOSTORAZONSOCIAL).GetValue()
		RFC = self.GetControl(ID_TEXTCTRLCENTROCOSTORFC).GetValue()
		MascaraCuenta = self.GetControl(ID_TEXTCTRLCENTROCOSTOMASCARACUENTA).GetValue()
		CuadreCuentaID = self.GetControl(ID_TEXTCTRLCENTROCOSTOCUENTACUADRE).GetValue()
		sqlFields = """ 
		RazonSocial, RFC, MascaraCuenta, CuadreCuentaID, activarecfin
		"""
		sqlValues = "'%s', '%s', '%s', %s, '%s'" % \
			(RazonSocial, RFC, MascaraCuenta, CuadreCuentaID, "S")
		sql = "insert into %s (%s) values (%s)" % (self.dbtable, sqlFields, sqlValues ) 
		queTal, trash =  self.QueryUpdateRecord(sql)
		if queTal:
			sqlx = "select max(EmpresaID) from cont_Empresas"
			cursor = r_cn.cursor()
			cursor.execute(str(sqlx))
			row = fetchone(cursor)
			numero = ""
			if row is not None:
				numero = str(int(row[0]))
					
			cursor.close()
			self.GetControl(ID_TEXTCTRLCENTROCOSTOEMPRESAID).SetValue(numero)

		return queTal
	
	def OnDeleteRecord( self, event):
		password = wx.GetPasswordFromUser(u"Digite Contrase�a", caption = u"Autorizaci�n",
						  default_value = "", parent = None)
		if password:
			if password == PASSWORD:
				if Mensajes().YesNo(self,u"� Desea realmente eliminar esta empresa ?", u"Confirmaci�n") :
					if self.DeleteRecord():
						lbx = self.GetControl(ID_LISTBOXCENTROCOSTO)
						pos = lbx.GetSelection()
						self.MoveOneStep("PREVIOUS")
						lbx.Delete(pos)
						Mensajes().Info(self,u"� Empresa Eliminada !", u"Atenci�n")
						self.tb.EnableTool(ID_TOOLSAV, False)
						self.tb.EnableTool(ID_TOOLDEL, True)
						self.tb.EnableTool(ID_TOOLNEW, True)
						self.MenuSetter(ID_MENUGRABAR, False)
						self.MenuSetter(ID_MENUELIMINAR, True)
						self.MenuSetter(ID_MENUNUEVO, True)
			else:
				Mensajes().Error(self, u"� Contrase�a Inv�lida !", u"Petici�n Denegada")
				
	def DeleteRecord(self):
		empresaid = self.GetControl(ID_TEXTCTRLCENTROCOSTOEMPRESAID).GetValue().strip()
		if empresaid == "":
			Mensajes().Info(self, u"No se ha especificado la empresa", u"Atenci�n")
			return False
		
		sql = "delete from %s where EmpresaID = %s" % (self.dbtable, empresaid) 
		try:
			cursor = r_cn.cursor()
			cursor.execute(str(sql))
			cursor.close()
			r_cn.commit()
			return True
		except:
			r_cn.rollback()
			Mensajes().Info(self,u"Sucedi� algo que impidi� eliminar esta empresa.\n" \
							u"Quiz� se deba a que hay otra informaci�n\nque depende de esta empresa\n%s" \
							% sql, u"Atenci�n")
			return False
	
	def GetAnotherRecord(self, comparison):
		if comparison == "<":
			asc_or_desc = "DESC"
		else:
			asc_or_desc = "ASC"
		
		lbox = self.GetControl(self.listbox)
		lboxIndex = lbox.GetSelection()
		empresaid = lbox.GetClientData(lboxIndex)
		sql = "select top 1 EmpresaID from %s where EmpresaID %s '%s' order by EmpresaID %s" \
			% (self.dbtable, comparison, empresaid, asc_or_desc)
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		numero = ""
		if row is not None:
			numero = str(int(row[0]))
					
		cursor.close()
		if numero <> "":
			if comparison == ">":
				newlboxIndex = lboxIndex + 1
			else:
				newlboxIndex = lboxIndex - 1
			if str(numero) <> str(lbox.GetClientData(newlboxIndex)):
				Mensajes().Warn(self,"A futuro refrescar el Listbox....","Epale")
			else:
				lbox.SetSelection(newlboxIndex, True)
				self.GetRecord(numero)
		
		return numero
	
	def GetRecord(self, record):
		lbox = self.GetControl(self.listbox)
		try:
			a = int(record)
		except:
			return False
		
		self.FillingARecord = True
		self.LimpiaControles()
		self.SetColoreable(False)
		for v in self.controles_tipo_txt.itervalues():
			self.originales[ v ] = None
		
		empresaid = str(int(record))
		self.GetControl(ID_TEXTCTRLCENTROCOSTOEMPRESAID).SetValue(empresaid)
		sqlconcuentacuadre = """
		select e.RazonSocial, e.RFC, e.MascaraCuenta, e.CuadreCuentaID, c.ClaveCuenta, c.Descripcion
		from %s e join cont_Cuentas c on e.CuadreCuentaID = c.CuentaID
		where e.EmpresaID = %s and c.EmpresaID = %s
		"""	% (self.dbtable, empresaid, empresaid)
		sqlsincuentacuadre = """
		select RazonSocial, RFC, MascaraCuenta, CuadreCuentaID from %s where EmpresaID = %s
		"""	% (self.dbtable, empresaid)
		cursor = r_cn.cursor()
		try:
			cursor.execute(str(sqlconcuentacuadre))
			row = fetchone(cursor)
			razonsocial, rfc, mascaracuenta, cuadrecuentaid, clavecuenta, descripcion = map(self.GetStringFromField, row)
			self.GetControl(ID_TEXTCENTROCOSTOCUENTACUADRECLAVE).SetLabel(self.EnmascaraCuenta(clavecuenta))
			self.GetControl(ID_TEXTCENTROCOSTOCUENTACUADREDESCRIPCION).SetLabel(descripcion)
		except:
			cursor.execute(str(sqlsincuentacuadre))
			row = fetchone(cursor)
			razonsocial, rfc, mascaracuenta, cuadrecuentaid = map(self.GetStringFromField, row)
			self.GetControl(ID_TEXTCENTROCOSTOCUENTACUADRECLAVE).SetLabel("")
			self.GetControl(ID_TEXTCENTROCOSTOCUENTACUADREDESCRIPCION).SetLabel("")
			
		self.GetControl(ID_TEXTCTRLCENTROCOSTORAZONSOCIAL).SetValue(self.GetStringFromField(row[0]))
		self.GetControl(ID_TEXTCTRLCENTROCOSTORFC).SetValue(self.GetStringFromField(row[1]))
		self.GetControl(ID_TEXTCTRLCENTROCOSTOMASCARACUENTA).SetValue(self.GetStringFromField(row[2]))
		self.GetControl(ID_TEXTCTRLCENTROCOSTOCUENTACUADRE).SetValue(str(row[3]))
		for x in "RAZONSOCIAL,RFC,MASCARACUENTA,CUENTACUADRE".split(","):
			key = eval("ID_TEXTCTRLCENTROCOSTO%s" % x )
			self.originales[key] = self.GetControl(key).GetValue()
		
		self.FillingARecord = False
		cursor.close()
		self.CambiaTab()
		self.tb.EnableTool(ID_TOOLSAV,False)
		self.tb.EnableTool(ID_TOOLDEL, True)
		self.tb.EnableTool(ID_TOOLNEW,True)
		self.MenuSetter(ID_MENUGRABAR, False)
		self.MenuSetter(ID_MENUELIMINAR, True)
		self.MenuSetter(ID_MENUNUEVO, True)             
		return True
	
class GixVentasCandidatos(wx.Frame, GixBase):
	vendedor = 0
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize,
				 style = wx.DEFAULT_FRAME_STYLE, usuario = None ):
	
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		panel = wx.Panel(self, -1)
		CandidatosGuardiaFuncion(panel, True, True)
		anchos = [-1,135]
		self.CreateStatusBar(2)
		self.SetStatusWidths(anchos)
		self.SetStatusText(u"Ventas", 0)
		self.SetStatusText(u"Candidatos a Guardia", 1)
		wx.EVT_CLOSE(self, self.OnSalir)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchVendedor, id = ID_FOREIGNCANDIDATOSGUARDIA)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanVendedor, id = ID_FOREIGNCANDIDATOSGUARDIA)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchVendedor, id = ID_FOREIGNCANDIDATOSGUARDIA)
		self.GetControl(ID_FOREIGNCANDIDATOSGUARDIA).ShowCancelButton(True)
		self.grid = self.GetControl(ID_GRIDCANDIDATOSGUARDIA)
		self.FillGridCtrl()
		
	def OnSalir(self, evt):
		self.GuardarCambios()
		self.Destroy()
		
	def GuardarCambios(self):
		self.grid.SetGridCursor(-1, 0)
		rows = self.grid.GetNumberRows()
		cu = r_cn.cursor()
		for row in range(0, rows):
			codigo = self.grid.GetCellValue(row, 0)
			interno = self.grid.GetCellValue(row, 2)
			if not interno:
				interno = 0
			elegibleguardia = self.grid.GetCellValue(row, 3)
			if not elegibleguardia:
				elegibleguardia = 0
			sql = """
			update VENDEDOR set interno = %s, elegibleguardia = %s where codigo = %s
			""" % (int(interno), int(elegibleguardia), int(codigo))
			cu.execute(str(sql))
		cu.close()
		r_cn.commit()
		
	def OnDoSearchVendedor(self, evt):
		self.GuardarCambios()
		self.vendedor =  self.GetControl(ID_FOREIGNCANDIDATOSGUARDIA).GetValue()
		self.FillGridCtrl()

	def OnCleanVendedor(self, evt):
		self.GuardarCambios()
		self.GetControl(ID_FOREIGNCANDIDATOSGUARDIA).SetValue("")
		self.vendedor = ""
		self.FillGridCtrl()

	def FillGridCtrl(self):
		query = """
		select codigo, nombre, interno, elegibleguardia
		from VENDEDOR where nombre like '%s' and desactivado = 0 order by nombre
		"""
		vendedor = '%%'
		if self.vendedor:
			vendedor = '%s%s%s' % ("%%", self.vendedor.encode("iso8859-1"), "%%")
		sql = (query % (vendedor))
		metapiece = ((10, u"C�digo", wx.ALIGN_RIGHT), (250, u"Vendedor"), (80, u"Interno", wx.ALIGN_CENTER),
					(80, u"Candidato", wx.ALIGN_CENTER))
		elements = len(metapiece)
		filas = self.grid.GetNumberRows()
		cols = self.grid.GetNumberCols()
		if filas: self.grid.DeleteRows(0, filas)
		if cols: self.grid.DeleteCols(0, cols)
		self.grid.InsertRows(0, 1)
		self.grid.InsertCols(0, elements)
		colindex = 0
		for metacols in metapiece:
			self.grid.SetColSize(colindex, metacols[0])
			self.grid.SetColLabelValue(colindex, metacols[1])
			colindex += 1
					
		self.grid.ForceRefresh()
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		fila = 0
		if rows:
			if len(rows) > 1:
				self.grid.AppendRows(len(rows) - 1)
				
			for row in rows:
				for col in range(0, colindex):
					if fila % 2 == 0:
						self.grid.SetCellBackgroundColour(fila, col, wx.NamedColour("Medium Goldenrod"))
						
					if col in (0,1):
							self.grid.SetReadOnly(fila, col,True)
					elif col in (2,3):
						self.grid.SetCellRenderer(fila, col, gridlib.GridCellBoolRenderer())
						self.grid.SetCellEditor(fila, col, gridlib.GridCellBoolEditor())
					
					if len(metapiece[col]) in (3,4):
						col_selected = metapiece[col]
						hAlignmnt = col_selected[2]
						self.grid.SetCellAlignment(fila, col, hAlignmnt, wx.ALIGN_CENTER)
						
					funcion = ""    
					if len(metapiece[col]) == 4:
						funcion = col_selected[3]
	
					if row[col] == None:
						self.grid.SetCellValue(fila, col, '')
					else:
						try:
							if funcion == "":
								valor = str(row[col])
								if valor == "True":
									valor = "1"
								elif valor == "False":
									valor = "0"
								self.grid.SetCellValue(fila, col, valor)
							else:
								try:
									lafuncion = funcion % row[col]
									self.grid.SetCellValue(fila, col, eval(lafuncion))
								except:
									self.grid.SetCellValue(fila,col, '**')
						except:
							self.grid.SetCellValue(fila, col, row[col].decode("iso8859-1"))
							
				fila += 1
			
		self.grid.SetFocus()
		self.grid.AutoSizeColumns()
		self.grid.SetGridCursor(0, 2)
		self.grid.MakeCellVisible(0, 2)
			
class GixPrecioSustentableOferta(wx.Frame, GixBase):
	oferta, ciclo, cliente = 0,0,0; intervalo = 1500
	usuariosupdate = ("CESAR", "ELIZABETH", "MELIZABETH")
	autorizadores = ("CESAR")
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize,
				 style = wx.DEFAULT_FRAME_STYLE, usuario = None ):
	
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		self.usuario = usuario
		panel = wx.Panel(self, -1)
		PrecioSustentableOfertaFuncion(panel, True, True)
		anchos = [-1,240]
		self.CreateStatusBar(2)
		self.SetStatusWidths(anchos)
		self.SetStatusText(u"Ventas", 0)
		self.SetStatusText(u"Precio Sustentable en Ofertas de Compra", 1)
		wx.EVT_CLOSE(self, lambda _: self.Destroy())
		self.Bind(wx.EVT_CHOICE, self.OnChoiceEtapa, id = ID_CHOICEPRECIOSUSTENTABLEOFERTA)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONPRECIOSUSTENTABLEOFERTAREFRESCAR, self.OnRefrescarGrid)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONPRECIOSUSTENTABLEEXCEL, self.OnExcel)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchOferta, id = ID_FOREIGNPRECIOSUSTENTABLEOFERTA)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanOferta, id = ID_FOREIGNPRECIOSUSTENTABLEOFERTA)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchOferta, id = ID_FOREIGNPRECIOSUSTENTABLEOFERTA)
		self.GetControl(ID_FOREIGNPRECIOSUSTENTABLEOFERTA).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchCliente, id = ID_FOREIGNPRECIOSUSTENTABLECLIENTE)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanCliente, id = ID_FOREIGNPRECIOSUSTENTABLECLIENTE)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchCliente, id = ID_FOREIGNPRECIOSUSTENTABLECLIENTE)
		self.GetControl(ID_FOREIGNPRECIOSUSTENTABLECLIENTE).ShowCancelButton(True)
		self.grid = self.GetControl(ID_GRIDPRECIOSUSTENTABLEOFERTA)
		self.grid.Bind(gridlib.EVT_GRID_CELL_CHANGE, self.OnGridCellChange)
		self.grid.SetColLabelSize(20)
		self.grid.SetRowLabelSize(40)
		self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLEOFERTASISUSTENTABLE).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLEOFERTANOSUSTENTABLE).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLEOFERTATOTALOFERTA).SetBackgroundColour(wx.Colour(153,255,153))
		self.ObtenerEtapas()
		self.etapa = 0
		self.GetControl(ID_CHOICEPRECIOSUSTENTABLEOFERTA).SetSelection(self.oferta)
		self.Bind(wx.EVT_UPDATE_UI, self.OnIdle)
		self.GetControl(ID_CHOICEPRECIOSUSTENTABLEOFERTA).SetFocus()
		
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
		return dato
	
	def ObtenerEtapas(self):
		control = self.GetControl(ID_CHOICEPRECIOSUSTENTABLEOFERTA); control.Clear()
		sql = """
		select codigo, descripcion from ETAPA where codigo > 38 order by descripcion
		"""
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(self.GetString(row[1]), int(row[0]))
				
	def OnGridCellChange(self, event):
		fila = self.grid.GetGridCursorRow(); oferta = self.grid.GetCellValue(fila, 0)
		preciosustentable = self.grid.GetCellValue(fila, 5)
		if not preciosustentable or not preciosustentable.isdigit():
			preciosustentable = 0
		if oferta.isdigit():
			if int(oferta) > 0:
				actualiza = True
				sql = """
				select preciosustentable from Ofertas_Compra where Oferta = %s and fk_etapa = %s
				""" % (int(oferta), int(self.etapa))
				cu = r_cn.cursor()
				cu.execute(str(sql))
				row = fetchone(cu)
				cu.close()
				if int(row[0]):
					actualiza = False
					#pwd = wx.GetPasswordFromUser(u"Digite Contrase�a", caption = u"Autorizaci�n Oferta %s" % int(oferta),
												 #default_value = "", parent = self)
					#if pwd:
						#if self.Autorizacion(pwd):
							#actualiza = True
						#else:
							#Mensajes().Error(self, u"� Contrase�a Inv�lida !", u"Autorizaci�n Denegada")
							
					if self.usuario in self.autorizadores:  # este if sustituye a lo comentado anteriormente
						actualiza = True
							
					if not actualiza:
						self.grid.SetCellValue(fila, 5, "1")
						
				if actualiza:
					sql = """
					update Ofertas_Compra set preciosustentable = %s where Oferta = %s and fk_etapa = %s
					""" % (int(preciosustentable), int(oferta), int(self.etapa))
					cu = r_cn.cursor()
					cu.execute(str(sql))
					cu.close()
					r_cn.commit()
					self.CalculaTotales()
					
	def Autorizacion(self, pwd):
		autoriza = True
		sql = """
		select count(*) from Usuarios where Usuario in ('%s') and md5 = '%s'
		""" % (("','".join(map(str, self.autorizadores))), self.Hash(pwd))
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		resultado = str(row[0])
		cu.close()
		if resultado == "0":
			autoriza = False
			
		return autoriza
		
	def Hash(self, pwd):
		#m = md5.new()
		#m.update(pwd)
		return md5(pwd).hexdigest().upper()
	
	def OnChoiceEtapa(self, event):
		ctrl = self.GetControl(event.GetId())
		index = ctrl.GetSelection()
		if index > -1:
			self.etapa = ctrl.GetClientData(index)
			if not self.GetControl(ID_BITMAPBUTTONPRECIOSUSTENTABLEOFERTAREFRESCAR).IsEnabled():
				self.GetControl(ID_BITMAPBUTTONPRECIOSUSTENTABLEOFERTAREFRESCAR).Enable(True)
				self.GetControl(ID_BITMAPBUTTONPRECIOSUSTENTABLEEXCEL).Enable(True)
			self.GetControl(ID_GRIDPRECIOSUSTENTABLEOFERTA).SetFocus()
		
	def OnExcel(self, event):
		query, meta = self.FillGridCtrl(excel = True)
		tabla = "Ofertas_Compra"; titulo = u"Precio Sustentable en Ofertas de Compra"; bool = (5,)
		self.DisplayGrid(tabla, meta, query, titulo, bool)
		
	def OnDoSearchOferta(self, evt):
		self.oferta =  self.GetControl(ID_FOREIGNPRECIOSUSTENTABLEOFERTA).GetValue()
		self.FillGridCtrl()

	def OnCleanOferta(self, evt):
		self.GetControl(ID_FOREIGNPRECIOSUSTENTABLEOFERTA).SetValue("")
		self.oferta = ""
		self.FillGridCtrl()
		
	def OnDoSearchCliente(self, evt):
		self.cliente =  self.GetControl(ID_FOREIGNPRECIOSUSTENTABLECLIENTE).GetValue()
		self.FillGridCtrl()

	def OnCleanCliente(self, evt):
		self.GetControl(ID_FOREIGNPRECIOSUSTENTABLECLIENTE).SetValue("")
		self.cliente = ""
		self.FillGridCtrl()
		
	def OnRefrescarGrid(self, evt):
		self.FillGridCtrl()

	def OnIdle(self, event):
		if self.ciclo >= self.intervalo:
			self.ciclo = 0
			if self.CalculaTotales():
				self.FillGridCtrl()
		else:
			self.ciclo += 1
		
	def CalculaTotales(self):
		cambio = False
		if self.GetControl(ID_BITMAPBUTTONPRECIOSUSTENTABLEOFERTAREFRESCAR).IsEnabled():
			totalsisustentable, totalnosustentable = 0,0
			sql = """
			select count(*) from Ofertas_Compra where fk_etapa = %s and Cancelada = 0 and preciosustentable <> 0
			""" % int(self.etapa)
			cu = r_cn.cursor()
			cu.execute(str(sql))
			total = fetchone(cu)
			if total is not None:
				totalsisustentable = int(total[0])
			sql = """
			select count(*) from Ofertas_Compra where fk_etapa = %s and Cancelada = 0 and preciosustentable = 0
			""" % int(self.etapa)
			cu.execute(str(sql))
			total = fetchone(cu)
			if total is not None:
				totalnosustentable = int(total[0])
			cu.close()
			
			sisustentable = self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLEOFERTASISUSTENTABLE).GetValue()
			nosustentable = self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLEOFERTANOSUSTENTABLE).GetValue()
			if not sisustentable: sisustentable = 0
			if not nosustentable: nosustentable = 0
			if int(sisustentable) != totalsisustentable or int(nosustentable) != totalnosustentable:
				totaloferta = totalsisustentable + totalnosustentable
				self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLEOFERTASISUSTENTABLE).SetValue(str(int(totalsisustentable)))
				self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLEOFERTANOSUSTENTABLE).SetValue(str(int(totalnosustentable)))
				self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLEOFERTATOTALOFERTA).SetValue(str(int(totaloferta)))
				cambio = True
		
		return cambio

	def FillGridCtrl(self, excel = False):
		wx.BeginBusyCursor()
		query = """
		select o.Oferta, isnull(c.nombre, ''), o.Precio, isnull(i.iden1, ''), isnull(i.iden2, ''), o.preciosustentable
		from Ofertas_Compra o
		left join CLIENTE c on o.Cliente = c.codigo
		left join CUENTA u on o.Cuenta = u.codigo
		left join INMUEBLE i on u.fk_inmueble = i.codigo
		where %s %s o.fk_etapa = %s and o.Cancelada = 0 %s
		"""
		cliente, oferta, orden = "", "", "order by o.Oferta desc"; wild = "%"
		if self.cliente:
			cliente = "c.nombre like '%s%s%s' and" % (wild, self.GetString(self.cliente), wild)
			orden = "order by c.nombre"
		if self.oferta:
			oferta = "o.Oferta like '%s' and" % self.GetString(self.oferta); orden = ""
		sql = (query % (cliente, oferta, self.etapa, orden))
		metapiece = ((10, u"Oferta", wx.ALIGN_RIGHT), (250, u"Cliente"), (80, u"Precio", wx.ALIGN_RIGHT),
					(80, u"Lote", wx.ALIGN_CENTER), (80, u"Manzana", wx.ALIGN_CENTER),
					(80, u"Sustentable", wx.ALIGN_CENTER))
		if excel: return sql, metapiece
		elements = len(metapiece)
		filas = self.grid.GetNumberRows()
		cols = self.grid.GetNumberCols()
		if filas: self.grid.DeleteRows(0, filas)
		if cols: self.grid.DeleteCols(0, cols)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		fila = 0
		if rows:
			self.grid.InsertRows(0, 1)
			self.grid.InsertCols(0, elements)
			for colindex, metacols in enumerate(metapiece):
				self.grid.SetColSize(colindex, metacols[0])
				self.grid.SetColLabelValue(colindex, metacols[1])
			self.grid.ForceRefresh()
			if len(rows) > 1:
				self.grid.AppendRows(len(rows) - 1)
				
			for fila, row in enumerate(rows):
				for col in range(0, colindex + 1):
					if fila % 2 == 0:
						self.grid.SetCellBackgroundColour(fila, col, wx.NamedColour("Medium Goldenrod"))
						
					if col in (0,1,2,3,4):
						self.grid.SetReadOnly(fila, col, True)
					elif col == 5 and self.usuario in self.usuariosupdate:
						self.grid.SetCellRenderer(fila, col, gridlib.GridCellBoolRenderer())
						self.grid.SetCellEditor(fila, col, gridlib.GridCellBoolEditor())
					elif col == 5:
						self.grid.SetCellRenderer(fila, col, gridlib.GridCellBoolRenderer())
						self.grid.SetReadOnly(fila, col,True)
					
					if len(metapiece[col]) in (3,4):
						col_selected = metapiece[col]
						hAlignmnt = col_selected[2]
						self.grid.SetCellAlignment(fila, col, hAlignmnt, wx.ALIGN_CENTER)
						
					funcion = ""    
					if len(metapiece[col]) == 4:
						funcion = col_selected[3]
	
					if row[col] == None:
						self.grid.SetCellValue(fila, col, '')
					else:
						try:
							if str(row[4]).strip() == "A" and str(row[3]).strip() == "34":
								x = 1
							if funcion == "":
								valor = str(row[col])
								if valor == "True":
									valor = "1"
								elif valor == "False":
									valor = "0"
								if col == 2:
									self.grid.SetCellValue(fila, col, str(amount_and_cents_with_commas(row[2])))
								else:
									self.grid.SetCellValue(fila, col, valor)
							else:
								try:
									lafuncion = funcion % row[col]
									self.grid.SetCellValue(fila, col, eval(lafuncion))
								except:
									self.grid.SetCellValue(fila,col, '**')
						except:
							self.grid.SetCellValue(fila, col, row[col].decode("iso8859-1"))
			
			self.grid.SetFocus()
			self.grid.AutoSizeColumns()
			self.grid.SetGridCursor(0, 5)
			self.grid.MakeCellVisible(0, 5)
			
		wx.EndBusyCursor()
			
class GixPrecioSustentableInmueble(wx.Frame, GixBase):
	inmueble, cliente, ciclo = 0,0,0; intervalo = 1500
	#usuariosupdate = ("JORGE H", "MARCELA", "CESAR", "ELIZABETH", "GINA", "MELIZABETH")
	usuariosupdate = ("DRUBIO", "MARCELA", "CESAR", "ELIZABETH", "GINA", "MELIZABETH", "ALMA")
	autorizadores = ("CESAR")
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize,
				 style = wx.DEFAULT_FRAME_STYLE, usuario = None ):
	
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		self.usuario = usuario
		panel = wx.Panel(self, -1)
		PrecioSustentableInmuebleFuncion(panel, True, True)
		anchos = [-1,190]
		self.CreateStatusBar(2)
		self.SetStatusWidths(anchos)
		self.SetStatusText(u"Ventas", 0)
		self.SetStatusText(u"Precio Sustentable en Inmuebles", 1)
		wx.EVT_CLOSE(self, lambda _: self.Destroy())
		self.Bind(wx.EVT_CHOICE, self.OnChoiceEtapa, id = ID_CHOICEPRECIOSUSTENTABLEINMUEBLE)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONPRECIOSUSTENTABLEINMUEBLEREFRESCAR, self.OnRefrescarGrid)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONPRECIOSUSTENTABLEINMUEBLEEXCEL, self.OnExcel)
		self.Bind(wx.EVT_CHOICE, self.OnRefrescarGrid, id = ID_CHOICEPRECIOSUSTENTABLEESTATUS)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchCliente, id = ID_FOREIGNPRECIOSUSTENTABLECLIENTE)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanCliente, id = ID_FOREIGNPRECIOSUSTENTABLECLIENTE)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchCliente, id = ID_FOREIGNPRECIOSUSTENTABLECLIENTE)
		self.GetControl(ID_FOREIGNPRECIOSUSTENTABLECLIENTE).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchOferta, id = ID_FOREIGNPRECIOSUSTENTABLEINMUEBLE)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanOferta, id = ID_FOREIGNPRECIOSUSTENTABLEINMUEBLE)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchOferta, id = ID_FOREIGNPRECIOSUSTENTABLEINMUEBLE)
		self.GetControl(ID_FOREIGNPRECIOSUSTENTABLEINMUEBLE).ShowCancelButton(True)
		self.grid = self.GetControl(ID_GRIDPRECIOSUSTENTABLEINMUEBLE)
		self.grid.Bind(gridlib.EVT_GRID_CELL_CHANGE, self.OnGridCellChange)
		self.grid.SetColLabelSize(20)
		self.grid.SetRowLabelSize(40)
		self.GetControl(ID_CHOICEPRECIOSUSTENTABLEESTATUS).SetSelection(1)
		self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLEINMUEBLESISUSTENTABLE).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLEINMUEBLENOSUSTENTABLE).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLEINMUEBLETOTALINMUEBLE).SetBackgroundColour(wx.Colour(153,255,153))
		self.ObtenerEtapas()
		self.etapa = 0
		self.GetControl(ID_CHOICEPRECIOSUSTENTABLEINMUEBLE).SetSelection(self.etapa)
		self.Bind(wx.EVT_UPDATE_UI, self.OnIdle)
		self.GetControl(ID_CHOICEPRECIOSUSTENTABLEINMUEBLE).SetFocus()
		
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
		return dato
	
	def ObtenerEtapas(self):
		control = self.GetControl(ID_CHOICEPRECIOSUSTENTABLEINMUEBLE); control.Clear()
		sql = """
		select codigo, descripcion from ETAPA where codigo > 38 order by descripcion
		"""
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(self.GetString(row[1]), int(row[0]))

	def OnGridCellChange(self, event):
		fila = self.grid.GetGridCursorRow(); inmueble = self.grid.GetCellValue(fila, 0)
		preciosustentable = self.grid.GetCellValue(fila, 10)
		if not preciosustentable or not preciosustentable.isdigit():
			preciosustentable = 0
		if inmueble.isdigit():
			if int(inmueble) > 0:
				actualiza = True
				sql = """
				select preciosustentable from INMUEBLE where codigo = %s
				""" % (int(inmueble))
				cu = r_cn.cursor()
				cu.execute(str(sql))
				row = fetchone(cu)
				cu.close()
				if int(row[0]):
					actualiza = False
					#pwd = wx.GetPasswordFromUser(u"Digite Contrase�a", caption = u"Autorizaci�n Inmueble %s" % int(inmueble),
												 #default_value = "", parent = self)
					#if pwd:
						#if self.Autorizacion(pwd):
							#actualiza = True
						#else:
							#Mensajes().Error(self, u"� Contrase�a Inv�lida !", u"Autorizaci�n Denegada")
							
					if self.usuario in self.autorizadores:  # este if sustituye a lo comentado anteriormente
						actualiza = True
							
					if not actualiza:
						self.grid.SetCellValue(fila, 10, "1")
				
				if actualiza:
					sql = """
					update INMUEBLE set preciosustentable = %s where codigo = %s
					""" % (int(preciosustentable), int(inmueble))
					cu = r_cn.cursor()
					cu.execute(str(sql))
					cu.close()
					r_cn.commit()
					self.CalculaTotales()
				
	def Autorizacion(self, pwd):
		autoriza = True
		sql = """
		select count(*) from Usuarios where Usuario in ('%s') and md5 = '%s'
		""" % (("','".join(map(str, self.autorizadores))), self.Hash(pwd))
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		resultado = str(row[0])
		cu.close()
		if resultado == "0":
			autoriza = False
			
		return autoriza
		
	def Hash(self, pwd):
		#m = md5.new()
		#m.update(pwd)
		return md5(pwd).hexdigest().upper()
	
	def OnChoiceEtapa(self, event):
		ctrl = self.GetControl(event.GetId())
		index = ctrl.GetSelection()
		if index > -1:
			self.etapa = ctrl.GetClientData(index)
			if not self.GetControl(ID_BITMAPBUTTONPRECIOSUSTENTABLEINMUEBLEREFRESCAR).IsEnabled():
				self.GetControl(ID_BITMAPBUTTONPRECIOSUSTENTABLEINMUEBLEREFRESCAR).Enable(True)
				self.GetControl(ID_BITMAPBUTTONPRECIOSUSTENTABLEINMUEBLEEXCEL).Enable(True)
			self.GetControl(ID_GRIDPRECIOSUSTENTABLEINMUEBLE).SetFocus()
		
	def OnExcel(self, event):
		query, meta = self.FillGridCtrl(excel = True)
		tabla = "INMUEBLE"; titulo = u"Precio Sustentable en Inmuebles"; bool = (10,)
		self.DisplayGrid(tabla, meta, query, titulo, bool)
		
	def OnDoSearchCliente(self, evt):
		self.cliente =  self.GetControl(ID_FOREIGNPRECIOSUSTENTABLECLIENTE).GetValue()
		self.FillGridCtrl()

	def OnCleanCliente(self, evt):
		self.GetControl(ID_FOREIGNPRECIOSUSTENTABLECLIENTE).SetValue("")
		self.cliente = ""
		self.FillGridCtrl()

	def OnDoSearchOferta(self, evt):
		self.inmueble =  self.GetControl(ID_FOREIGNPRECIOSUSTENTABLEINMUEBLE).GetValue()
		self.FillGridCtrl()

	def OnCleanOferta(self, evt):
		self.GetControl(ID_FOREIGNPRECIOSUSTENTABLEINMUEBLE).SetValue("")
		self.inmueble = ""
		self.FillGridCtrl()
		
	def OnRefrescarGrid(self, evt):
		self.FillGridCtrl()

	def OnIdle(self, event):
		if self.ciclo >= self.intervalo:
			self.ciclo = 0
			if self.CalculaTotales():
				self.FillGridCtrl()
		else:
			self.ciclo += 1
		
	def CalculaTotales(self):
		cambio = False
		if self.GetControl(ID_BITMAPBUTTONPRECIOSUSTENTABLEINMUEBLEREFRESCAR).IsEnabled():
			totalsisustentable, totalnosustentable = 0,0
			sql = """
			select count(*) from INMUEBLE where fk_etapa = %s and preciosustentable = 1
			""" % int(self.etapa)
			cu = r_cn.cursor()
			cu.execute(str(sql))
			total = fetchone(cu)
			if total is not None:
				totalsisustentable = int(total[0])
			sql = """
			select count(*) from INMUEBLE where fk_etapa = %s and preciosustentable = 0
			""" % int(self.etapa)
			cu.execute(str(sql))
			total = fetchone(cu)
			if total is not None:
				totalnosustentable = int(total[0])
			cu.close()
			
			sisustentable = self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLEINMUEBLESISUSTENTABLE).GetValue()
			nosustentable = self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLEINMUEBLENOSUSTENTABLE).GetValue()
			if not sisustentable: sisustentable = 0
			if not nosustentable: nosustentable = 0
			if int(sisustentable) != totalsisustentable or int(nosustentable) != totalnosustentable:
				totalinmueble = totalsisustentable + totalnosustentable
				self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLEINMUEBLESISUSTENTABLE).SetValue(str(int(totalsisustentable)))
				self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLEINMUEBLENOSUSTENTABLE).SetValue(str(int(totalnosustentable)))
				self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLEINMUEBLETOTALINMUEBLE).SetValue(str(int(totalinmueble)))
				cambio = True
		
		return cambio

	def FillGridCtrl(self, excel = False):
		wx.BeginBusyCursor()
		query = """
		select i.codigo, isnull(o.Oferta,0) as oferta, isnull(convert(varchar(10), o.Fecha_Oferta, 103),''),
		isnull(o.Cuenta,0), isnull(c.nombre, ''), isnull(o.Subvendedor,0), isnull(v.nombre, ''),
		isnull(o.Precio,0), i.iden1, i.iden2, i.preciosustentable
		from INMUEBLE i
		left join CUENTA u on i.codigo = u.fk_inmueble
		left join Ofertas_Compra o on u.codigo = o.Cuenta
		left join CLIENTE c on o.Cliente = c.codigo
		left join VENDEDOR v on o.Subvendedor = v.codigo
		where %s %s %s i.fk_etapa = %s %s
		"""
		estatus, orden = "", "order by 9, 10 desc"
		est = self.GetControl(ID_CHOICEPRECIOSUSTENTABLEESTATUS).GetSelection()
		if est == 1:
			estatus = "i.preciosustentable = 1 and"; orden = "order by oferta desc"
		elif est == 2:
			estatus = "i.preciosustentable = 0 and"
			
		cliente, inmueble = "", ""; wild = "%"
		if self.cliente:
			cliente = "c.nombre like '%s%s%s' and" % (wild, self.GetString(self.cliente), wild); orden = ""
		if self.inmueble:
			inmueble = "oferta like '%s' and" % self.GetString(self.inmueble); orden = ""
			
		sql = (query % (estatus, cliente, inmueble, self.etapa, orden))
		metapiece = ((10, u"Id", wx.ALIGN_RIGHT), (10, u"Oferta", wx.ALIGN_RIGHT), (70, "Fecha", wx.ALIGN_CENTER),
					 (10, u"Cuenta", wx.ALIGN_RIGHT), (250, u"Cliente"), (10, u"Subvendedor", wx.ALIGN_CENTER),
					 (250, u"Nombre del Subvendedor"), (80, u"Precio", wx.ALIGN_RIGHT),
					 (80, u"Lote", wx.ALIGN_CENTER), (80, u"Manzana", wx.ALIGN_CENTER),
					 (80, u"Sustentable", wx.ALIGN_CENTER))
		if excel: return sql, metapiece
		elements = len(metapiece)
		filas = self.grid.GetNumberRows()
		cols = self.grid.GetNumberCols()
		if filas: self.grid.DeleteRows(0, filas)
		if cols: self.grid.DeleteCols(0, cols)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		fila = 0
		if rows:
			self.grid.InsertRows(0, 1)
			self.grid.InsertCols(0, elements)
			for colindex, metacols in enumerate(metapiece):
				self.grid.SetColSize(colindex, metacols[0])
				self.grid.SetColLabelValue(colindex, metacols[1])
			self.grid.ForceRefresh()
			if len(rows) > 1:
				self.grid.AppendRows(len(rows) - 1)
				
			for fila, row in enumerate(rows):
				for col in range(0, colindex + 1):
					if fila % 2 == 0:
						self.grid.SetCellBackgroundColour(fila, col, wx.NamedColour("Medium Goldenrod"))
						
					if col in (0,1,2,3,4,5,6,7,8,9):
						self.grid.SetReadOnly(fila, col,True)
					elif col == 10 and self.usuario in self.usuariosupdate:
						self.grid.SetCellRenderer(fila, col, gridlib.GridCellBoolRenderer())
						self.grid.SetCellEditor(fila, col, gridlib.GridCellBoolEditor())
					elif col == 10:
						self.grid.SetCellRenderer(fila, col, gridlib.GridCellBoolRenderer())
						self.grid.SetReadOnly(fila, col,True)
					
					if len(metapiece[col]) in (3,4):
						col_selected = metapiece[col]
						hAlignmnt = col_selected[2]
						self.grid.SetCellAlignment(fila, col, hAlignmnt, wx.ALIGN_CENTER)
						
					funcion = ""    
					if len(metapiece[col]) == 4:
						funcion = col_selected[3]
	
					if row[col] == None:
						self.grid.SetCellValue(fila, col, '')
					else:
						try:
							if funcion == "":
								valor = str(row[col])
								if valor == "True":
									valor = "1"
								elif valor == "False":
									valor = "0"
								if col == 7:
									self.grid.SetCellValue(fila, col, str(amount_and_cents_with_commas(row[7])))
								else:
									self.grid.SetCellValue(fila, col, valor)
							else:
								try:
									lafuncion = funcion % row[col]
									self.grid.SetCellValue(fila, col, eval(lafuncion))
								except:
									self.grid.SetCellValue(fila,col, '**')
						except:
							self.grid.SetCellValue(fila, col, row[col].decode("iso8859-1"))
							
			self.grid.SetFocus()
			self.grid.AutoSizeColumns()
			self.grid.SetGridCursor(0, 10)
			self.grid.MakeCellVisible(0, 10)
			
		wx.EndBusyCursor()
			
#class GixVentasProspectos(wx.Frame, GixBase, GixBaseListCtrl):
	#coloreable = "ID_TEXTCTRLPROSPECTOID"
	#coloreableeditable = False
	#ctt = [coloreable, "ID_TEXTCTRLPROSPECTONOMBRE", "ID_TEXTCTRLPROSPECTOTELEFONO", "ID_TEXTCTRLPROSPECTOIMSS",
		   #"ID_TEXTCTRLPROSPECTOFECHAASIGNACION", "ID_TEXTCTRLPROSPECTOFECHASEGUIMIENTO",
		   #"ID_TEXTCTRLPROSPECTOFECHACIERRE", "ID_TEXTCTRLPROSPECTOFECHANOSEGUIMIENTO",
		   #"ID_COMBOPROSPECTOMEDIOPUBLICITARIO"]
	#activecontrolafternewrecord = ID_TEXTCTRLPROSPECTONOMBRE
	#listctrl = ID_LISTCTRLPROSPECTO
	#dbtable  = "gixprospectos"
	#controles_tipo_txt = dict(zip(ctt,map(eval,ctt)))
	#DicDatesAndTxt = {ID_BITMAPBUTTONPROSPECTOELEGIRFECHAASIGNACION : ID_TEXTCTRLPROSPECTOFECHAASIGNACION,
					  #ID_BITMAPBUTTONPROSPECTOELEGIRFECHASEGUIMIENTO: ID_TEXTCTRLPROSPECTOFECHASEGUIMIENTO,
					  #ID_BITMAPBUTTONPROSPECTOELEGIRFECHACIERRE : ID_TEXTCTRLPROSPECTOFECHACIERRE,
					  #ID_BITMAPBUTTONPROSPECTOELEGIRFECHANOSEGUIMIENTO : ID_TEXTCTRLPROSPECTOFECHANOSEGUIMIENTO,
					  #ID_BITMAPBUTTONPROSPECTOELEGIRFECHAINICIALFILTRO : ID_TEXTCTRLPROSPECTOFECHAINICIALFILTRO,
					  #ID_BITMAPBUTTONPROSPECTOELEGIRFECHAFINALFILTRO : ID_TEXTCTRLPROSPECTOFECHAFINALFILTRO}
	
	#def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize,
		     #style = wx.DEFAULT_FRAME_STYLE, usuario = None):
		
		#wx.Frame.__init__(self, parent, id, title, pos, size, style)
		#self.InitialFlags(prospectos = True)
		#self.usuario = usuario
		#self.usuariorestringido = {"LUPITA": 2, "CECILIA": 8, "OCTAVIO": 1, "KARIME": 0}
		#self.recepcionista = ["KARIME"]
		
		#self.editable = 1
		#self.idbanco = -1
		#self.ctrlindex = 0
		#self.idrefmovto = 0
		#self.currentitem = ""
		#self.detail = False
		#self.exitdetail = False
		
		#self.panel = wx.Panel(self, -1)
		#ProspectosFuncion(self.panel, True, True)
		#self.SetTitle("Ventas - Prospectos")
		#self.ObtenerGerentes(); self.ObtenerVendedores(); self.ObtenerMediosPublicitarios()
		
		#self.SetColoreable(False)
		
		#self.originales = {}
		#for v in self.controles_tipo_txt.itervalues():
			#self.Bind(wx.EVT_TEXT, self.OnText, self.GetControl(v))
			#self.originales[v] = ""
		#for v in self.DicDatesAndTxt.keys():
			#self.Bind(wx.EVT_BUTTON, self.OnFechaButton, id = v )
		#for v in (ID_CHOICEPROSPECTOGERENTE, ID_CHOICEPROSPECTOVENDEDOR):
			#wx.EVT_CHOICE(self, v, self.OnChoiceControl)
			#self.originales[v] = ""
		#self.Bind(wx.EVT_COMBOBOX, self.OnComboBox, self.GetControl(ID_COMBOPROSPECTOMEDIOPUBLICITARIO))
		#self.Bind(wx.EVT_TEXT, self.OnText, self.GetControl(ID_COMBOPROSPECTOMEDIOPUBLICITARIO))
		#self.originales[ID_COMBOPROSPECTOMEDIOPUBLICITARIO] = ""
		#wx.EVT_BUTTON(self, ID_BITMAPBUTTONPROSPECTOLIMPIARFECHAASIGNACION, self.OnLimpiarFechaForm)
		#wx.EVT_BUTTON(self, ID_BITMAPBUTTONPROSPECTOLIMPIARFECHASEGUIMIENTO, self.OnLimpiarFechaForm)
		#wx.EVT_BUTTON(self, ID_BITMAPBUTTONPROSPECTOLIMPIARFECHACIERRE, self.OnLimpiarFechaForm)
		#wx.EVT_BUTTON(self, ID_BITMAPBUTTONPROSPECTOLIMPIARFECHANOSEGUIMIENTO, self.OnLimpiarFechaForm)
		
		#wx.EVT_BUTTON(self, ID_BUTTONPROSPECTOACEPTARFORM, self.OnAplicarDetalle)
		#wx.EVT_BUTTON(self, ID_BUTTONPROSPECTOCANCELARFORM, self.OnSalirDetalle)
		
		#self.GetControl(ID_CHOICEPROSPECTOTIPOFECHAFILTRO).SetSelection(0)
		#self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).SetSelection(SetChoiceIndex())
		#self.GetControl(ID_CHOICEPROSPECTOVENDEDORFILTRO).SetSelection(SetChoiceIndex())
		#self.GetControl(ID_CHOICEPROSPECTOMEDIOPUBLICITARIOFILTRO).SetSelection(SetChoiceIndex())
		#wx.EVT_BUTTON(self, ID_BUTTONPROSPECTOIMPORTAR, self.OnImportar)
		
		#self.addlistctrlbtn = ID_BUTTONPROSPECTOAGREGARLISTCTRL
		#self.editlistctrlbtn = ID_BUTTONPROSPECTOEDITARLISTCTRL
		#self.exitlistctrlbtn = ID_BUTTONPROSPECTOCERRARLISTCTRL
		#wx.EVT_BUTTON(self, ID_BUTTONPROSPECTOAGREGARLISTCTRL, self.OnNewRecord)
		#wx.EVT_BUTTON(self, ID_BUTTONPROSPECTOEDITARLISTCTRL, self.OnEditRecord)
		#wx.EVT_BUTTON(self, ID_BUTTONPROSPECTOCERRARLISTCTRL, self.OnExitRecordCtrl)
		#wx.EVT_BUTTON(self, ID_BUTTONPROSPECTOREFRESCARLISTCTRL, self.OnRefrescar)
		#wx.EVT_BUTTON(self, ID_BUTTONPROSPECTOEXCELLISTCTRL, self.OnPrintExcel)
		
		#self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnLCtrl, id = self.listctrl)
		#self.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.OnRightClick, id = self.listctrl)
		#self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnEditRecord, id = self.listctrl)
		
		#anchos = [-1,80]
		#self.CreateStatusBar(2)
		#self.SetStatusWidths(anchos)
		#self.SetStatusText(u"Ventas", 0)
		#self.SetStatusText(u"Prospectos", 1)
		
		#self.Bind(wx.EVT_TEXT, self.OnFechaFiltro, id = ID_TEXTCTRLPROSPECTOFECHAINICIALFILTRO)
		#self.Bind(wx.EVT_TEXT, self.OnFechaFiltro, id = ID_TEXTCTRLPROSPECTOFECHAFINALFILTRO)
		#wx.EVT_BUTTON(self, ID_BITMAPBUTTONPROSPECTOLIMPIARFECHAINICIALFILTRO, self.OnLimpiarFechaFiltro)
		#wx.EVT_BUTTON(self, ID_BITMAPBUTTONPROSPECTOLIMPIARFECHAFINALFILTRO, self.OnLimpiarFechaFinalFiltro)
		
		#wx.EVT_BUTTON(self, ID_BITMAPBUTTONPROSPECTOLIMPIARGERENTEFITRO, self.OnLimpiarGerenteFiltro)
		#wx.EVT_BUTTON(self, ID_BITMAPBUTTONPROSPECTOLIMPIARVENDEDORFILTRO, self.OnLimpiarVendedorFiltro)
		#wx.EVT_BUTTON(self, ID_BITMAPBUTTONPROSPECTOLIMPIARMEDIOPUBLICITARIOFILTRO, self.OnLimpiarMedioPublicitarioFiltro)
		#wx.EVT_BUTTON(self, ID_BITMAPBUTTONPROSPECTOLIMPIARNOMBREFILTRO, self.OnLimpiarNombreFiltro)
		#wx.EVT_BUTTON(self, ID_BITMAPBUTTONPROSPECTOLIMPIARAFILIACIONIMSSFILTRO, self.OnLimpiarAfiliacionImssFiltro)
		
		#if wx.Platform == '__WXMSW__':
			#self.ActiveNoteBook(ID_NOTEBOOKPROSPECTOLISTCTRL, ID_NOTEBOOKPROSPECTOFORM, 1011, 670)
		#else:
			#self.ActiveNoteBook(ID_NOTEBOOKPROSPECTOLISTCTRL, ID_NOTEBOOKPROSPECTOFORM, 1060, 685)
		#self.GetControl(ID_NOTEBOOKPROSPECTOLISTCTRL).Move(wx.Point(-1, 5))
		#self.GetControl(ID_LISTCTRLPROSPECTO).SetFocus()
		
		#wx.EVT_CLOSE(self, self.OnExit)
		
		#self.GetControl(ID_BUTTONPROSPECTOIMPORTAR).Show(False)
		
		#if self.usuario in self.usuariorestringido:
			#self.GetControl(ID_BUTTONPROSPECTOAGREGARLISTCTRL).Enable(False)
			#self.GetControl(ID_BUTTONPROSPECTOEDITARLISTCTRL).Enable(False)
			#if self.usuario not in self.recepcionista:
				#self.GetControl(ID_TEXTPROSPECTOGERENTEFILTRO).Enable(False)
				#self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).Enable(False)
				#self.GetControl(ID_BITMAPBUTTONPROSPECTOLIMPIARGERENTEFITRO).Enable(False)
				#self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).SetSelection(0)
		
	#def OnImportar(self, event):
		#if Mensajes().YesNo(self, u"� Desea realmente hacer la importaci�n de prospectos ?", u"Confirmaci�n"):
			#wx.BeginBusyCursor()
			#vendedor = {60:252,62:247,63:250,64:145,2:272,3:85,5:156,6:157,13:139,14:143,16:107,18:106,19:89,
						#22:172,23:178,27:194,28:159,30:200,37:207,42:226,43:233,44:207,46:146,47:134,49:238,52:238,
						#53:177,54:244,55:236,56:245,57:243,58:198,59:241,61:242,65:247,66:256,67:253,73:261,74:263,
						#75:264,76:269,77:276,78:274,80:270,81:271,82:272,83:273,84:277,85:282,86:279,87:280,88:283,
						#90:285,92:287,93:292,96:294,97:288,98:293,100:203,102:272,103:283,110:273,112:300,113:297,
						#114:299,115:301,116:302,117:298,118:305,119:308,121:307,68:266,70:258,69:259,71:257}
			#medio = {1:13,2:14,3:7,4:15,5:16,6:17,7:9,8:18,9:10,10:10,11:19,12:12,13:12,14:11,15:20,16:21,17:22,
					 #18:23,19:24,20:8,21:25,22:26,23:27,24:6,25:29,27:30,28:31}
			#sql = """
			#select ApellidoP, ApellidoM, Nombre, Telefono1, Telefono2, Telefono3, NSS, IDVendedor,
			#FechaAsignacion, Status_Cerrado, Status_Seguimiento, Status_NoSeguimiento, IDMedio
			#from Prospectos
			#"""
			#con = odbc.odbc("Recepcion.mdb")
			#control = self.GetControl(ID_TEXTPROSPECTOIMPORTAR)
			#control.SetLabel("Importando prospectos...")
			#control.Refresh()
			#cu = con.cursor()
			#cu.execute(str(sql))
			#rows = cu.fetchall()
			#cu.close()
			#cont = 0
			#for row in rows:
				#cont += 1
				#control.SetLabel(str(cont))
				#control.Refresh()
				#try:
					#idvendedor = vendedor[int(row[7])]
					#sql = "select gerente from VENDEDOR where codigo = %s" % idvendedor
					#cu = r_cn.cursor()
					#cu.execute(str(sql))
					#codigo = fetchone(cu)
					#cu.close()
					#if codigo is not None:
						#idgerente = int(codigo[0])
						#todook = True
					#else:
						#todook = False
				#except:
					#todook = False
					
				#if todook:
					#if row[0] and row[1]:
						#nombre = "%s %s, %s" % (row[0], row[1],	row[2])
						#try:
							#nombre = nombre.decode("iso8859-1")
						#except:
							#pass
						#afiliacionimss = row[6]
						#telefonos = "%s %s %s" % (row[3], row[4], row[5])
						#try:
							#fecha = xdt.fromtimestamp(int(row[8]))
							#fechaasignacion = "'%04d/%02d/%02d'" % (fecha.year, fecha.month, fecha.day)
						#except:
							#fechaasignacion = "Null"
						#try:
							#fecha = xdt.fromtimestamp(int(row[9]))
							#fechacierre = "'%04d/%02d/%02d'" % (fecha.year, fecha.month, fecha.day)
						#except:
							#fechacierre = "Null"
						#try:
							#fecha = xdt.fromtimestamp(int(row[10]))
							#fechaseguimiento = "'%04d/%02d/%02d'" % (fecha.year, fecha.month, fecha.day)
						#except:
							#fechaseguimiento = "Null"
						#try:
							#fecha = xdt.fromtimestamp(int(row[11]))
							#fechanoseguimiento = "'%04d/%02d/%02d'" % (fecha.year, fecha.month, fecha.day)
						#except:
							#fechanoseguimiento = "Null"
						#try:
							#idmediopublicitario = int(row[12])
						#except:
							#idmediopublicitario = 6
						
						#sqlFields = """
						#idgerente, idvendedor, nombre, afiliacionimss, telefonos, fechaasignacion, fechacierre,
						#fechaseguimiento, fechanoseguimiento, idmediopublicitario
						#"""
						#sqlValues = "%s, %s, '%s', '%s', '%s', %s, %s, %s, %s, %s" % \
								  #(idgerente, idvendedor, nombre, afiliacionimss, telefonos, fechaasignacion, fechacierre,
								   #fechaseguimiento, fechanoseguimiento, idmediopublicitario)
						#sql = "insert into %s (%s) values (%s)" % (self.dbtable, sqlFields, sqlValues) 
						#sqlmax = "select max(idprospecto) from %s" % (self.dbtable)
						#queTal, idprospecto = self.QueryUpdateRecord(sql, sqlmax, True)
						#if queTal:
							#sql = "select convert(varchar(100), BlogGUID) from %s where idprospecto = %s" % \
								#(self.dbtable, idprospecto)
							#cu = r_cn.cursor()
							#cu.execute(str(sql))
							#blog = fetchone(cu)
							#cu.close()
							#if blog is not None:
								#self.BlogGUID = blog[0]
								#sql = """
								#insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura,
								#ContenidoText, ContenidoBinario, Extension)
								#values ('%s', getdate(), '%s', '%s', '%s', '%s')
								#""" % (self.BlogGUID, self.usuario, "Alta del Prospecto (Traspaso)", "", "")
								#if not self.QueryUpdateRecord(sql):
									#Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
				
			#wx.EndBusyCursor()
			#Mensajes().Info(self, u"� Importaci�n Finalizada !", u"Aviso")
				
		#return
		
	#def OnExit(self, event):
		#if self.detail:
			#self.SalirDetalle()
		#else:
			#self.ExitRecordCtrl()
			
	#def OnExitRecordCtrl(self, event):
		#self.ExitRecordCtrl()
		
	#def ExitRecordCtrl(self):
		#self.Destroy()
		
	#def ObtenerGerentes(self, id = ID_CHOICEPROSPECTOGERENTEFILTRO):
		#condicion = ""
		#if self.usuario in self.usuariorestringido:
			#if self.usuario not in self.recepcionista:
				#condicion = "where codigo = %s" % self.usuariorestringido[self.usuario]
		#control = self.GetControl(id)
		#control.Enable(False)
		#control.Show(False)
		#control.Clear()
		#sql = """
		#select codigo, nombre from gerentesventas %s order by nombre
		#""" % condicion
		#cu = r_cn.cursor()
		#cu.execute(str(sql))
		#rows = fetchall(cu)
		#cu.close()
		#if rows:
			#for row in rows:
				#control.Append(str(row[1]).decode("iso8859-1"), int(row[0]))
				
		#control.Show(True)
		#control.Enable(True)
		
	#def ObtenerVendedores(self, filtro = "", id = ID_CHOICEPROSPECTOVENDEDORFILTRO):
		#if self.usuario in self.usuariorestringido:
			#if self.usuario not in self.recepcionista:
				#if not filtro:
					#filtro = "where gerente = %s" % self.usuariorestringido[self.usuario]
		#control = self.GetControl(id)
		#control.Enable(False)
		#control.Show(False)
		#control.Clear()
		#sql = """
		#select codigo, nombre from VENDEDOR %s order by nombre
		#""" % (filtro)
		#cu = r_cn.cursor()
		#cu.execute(str(sql))
		#rows = fetchall(cu)
		#cu.close()
		#if rows:
			#for row in rows:
				#control.Append(str(row[1]).decode("iso8859-1"), int(row[0]))
				
		#control.Show(True)
		#control.Enable(True)
		
	#def ObtenerMediosPublicitarios(self, id = ID_CHOICEPROSPECTOMEDIOPUBLICITARIOFILTRO):
		#control = self.GetControl(id)
		#control.Enable(False)
		#control.Show(False)
		#control.Clear()
		#sql = """
		#select idmediopublicitario, descripcion from gixmediospublicitarios
		#where estatus = 'A' order by descripcion
		#"""
		#cu = r_cn.cursor()
		#cu.execute(str(sql))
		#rows = fetchall(cu)
		#cu.close()
		#if rows:
			#for row in rows:
				#control.Append(str(row[1]).decode("iso8859-1"), int(row[0]))
				
		#control.Show(True)
		#control.Enable(True)
		
	#def OnChoiceControl(self, event):
		#id = event.GetId()
		#self.ChoiceControl(id)
		#if id == ID_CHOICEPROSPECTOGERENTE:
			#inx = self.GetControl(id).GetSelection()
			#gerente = self.GetControl(id).GetClientData(inx)
			#filtro = "where Desactivado = %s and gerente = %s" % (0, gerente)
			#self.ObtenerVendedores(filtro, ID_CHOICEPROSPECTOVENDEDOR)
			#self.ChoiceControl(ID_CHOICEPROSPECTOVENDEDOR)
		
	#def ChoiceControl(self, id):
		#if not self.FillingARecord:
			#if self.GetControl(id).GetLabel() <> self.originales[id]:
				#self.GetControl(id).SetBackgroundColour(wx.CYAN)
				#self.GetControl(id).Refresh()
				#choice = True
			#else:
				#self.GetControl(id).SetBackgroundColour(wx.WHITE)
				#self.GetControl(id).Refresh()
				#choice = False
			
			#if self.OriginalesDistintos() or choice:
				#self.GetControl(ID_BUTTONPROSPECTOACEPTARFORM).Enable(True)
			#else:
				#self.GetControl(ID_BUTTONPROSPECTOACEPTARFORM).Enable(False)
				
	#def OnComboBox(self, event):
		#pass
		
	#def OnRightClick(self, event):
		#idregistryblog = self.GetControl(ID_TEXTCTRLPROSPECTOID).GetValue()
		#idtitleblog = "Prospecto"
		#self.OpenBlogPopupMenu(idregistryblog, idtitleblog)

	#def OnConsultarBlog(self, event):
		#prospecto = self.GetControl(ID_TEXTCTRLPROSPECTOID).GetValue()
		#meta = ((90, "Fecha"), (90, "Hora"), (100, u"Usuario"), (300, u"Blog"))
		#query = """
		#select convert(varchar(50), FechaCaptura, 103), convert(varchar(50), FechaCaptura, 108),
		#UsuarioCaptura, ContenidoText from Blogs
		#where BlogGUID = '%s' order by FechaCaptura desc;
		#select count(*) from Blogs where BlogGUID = '%s'
		#""" % (self.BlogGUID, self.BlogGUID)
		#titulo = u"Consulta del Blog del Prospecto %s" % prospecto
		#tabla = "Blogs"
		#frame = GixFrameCatalogo(self, -1, titulo, wx.Point(20,20), wx.Size(800,600), 
								 #wx.DEFAULT_FRAME_STYLE, None, None, None, tabla, meta, query,
								 #gridsize = [680,350], color = "AQUAMARINE")
		#frame.Centre(wx.BOTH)
		#frame.Show(True)
		
	#def OnParticiparBlog(self, event):
		#prospecto = self.GetControl(ID_TEXTCTRLPROSPECTOID).GetValue()
		#blog = wx.TextEntryDialog(self, u"Digite", u"Participando en el Blog del Prospecto %s" % prospecto,
								  #defaultValue = "", style = wx.OK | wx.TE_MULTILINE)
		#blog.SetSize(wx.Size(400,300))
		#blog.Centre(wx.BOTH)
		#blog.ShowModal()
		#comentario = blog.GetValue()
		#blog.Destroy()
		#if comentario:
			#sql = """
			#insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension)
			#values ('%s', getdate(), '%s', '%s', '%s', '%s')
			#""" % (self.BlogGUID, self.usuario, comentario, "", "")
			#if not self.QueryUpdateRecord(sql):
				#Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
		
	#def ActiveNoteBook(self, nbtrue, nbfalse, width, height):
		#self.GetControl(nbtrue).Show(False)
		#self.GetControl(nbfalse).Show(False)
		#self.SetSize(wx.Size(width, height))
		#self.CentreOnScreen()
		#self.GetControl(nbtrue).Show(True)
	
	#def OnLimpiarFechaFiltro(self, event):
		#self.GetControl(ID_TEXTCTRLPROSPECTOFECHAINICIALFILTRO).SetValue("")
		#self.GetControl(ID_TEXTCTRLPROSPECTOFECHAFINALFILTRO).SetValue("")
	
	#def OnLimpiarFechaFinalFiltro(self, event):
		#self.GetControl(ID_TEXTCTRLPROSPECTOFECHAFINALFILTRO).SetValue("")
		
	#def OnLimpiarGerenteFiltro(self, event):
		#self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).SetSelection(SetChoiceIndex())
		
	#def OnLimpiarVendedorFiltro(self, event):
		#self.GetControl(ID_CHOICEPROSPECTOVENDEDORFILTRO).SetSelection(SetChoiceIndex())
		
	#def OnLimpiarMedioPublicitarioFiltro(self, event):
		#self.GetControl(ID_CHOICEPROSPECTOMEDIOPUBLICITARIOFILTRO).SetSelection(SetChoiceIndex())
		
	#def OnLimpiarNombreFiltro(self, event):
		#self.GetControl(ID_TEXTCTRLPROSPECTONOMBREFILTRO).Clear()
		
	#def OnLimpiarAfiliacionImssFiltro(self, event):
		#self.GetControl(ID_TEXTCTRLPROSPECTOAFILIACIONIMSSFILTRO).Clear()
		
	#def OnLimpiarFechaForm(self, event):
		#id = event.GetId()
		#self.GetControl(id - 2).SetValue(u"")
		#self.GetControl(id - 2).SetBackgroundColour(wx.WHITE)
		#self.GetControl(id - 2).Refresh()
		
	#def OnAplicarDetalle(self, event):
		#idprospecto = self.GetControl(ID_TEXTCTRLPROSPECTOID).GetValue()
		#if idprospecto.strip() == "":
			#agrega = True
		#else:
			#agrega = False
		#ctrl = self.GetControl(ID_TEXTCTRLPROSPECTONOMBRE)
		#nombre = ctrl.GetValue().strip()
		#if self.ExisteProspecto(nombre, agrega):
			#if Mensajes().YesNo(self, u"Ya existe el prospecto: %s\n\n" \
								#u"� Desea localizarlo ?" % nombre, u"Confirmaci�n"):
				#ctrl.SetValue("")
				#self.GetControl(ID_TEXTCTRLPROSPECTONOMBREFILTRO).SetValue(str(nombre.encode("iso8859-1")))
				#self.GetControl(ID_CHOICEPROSPECTOTIPOFECHAFILTRO).SetSelection(0)
				#self.GetControl(ID_TEXTCTRLPROSPECTOFECHAINICIALFILTRO).SetValue("")
				#self.GetControl(ID_TEXTCTRLPROSPECTOFECHAFINALFILTRO).SetValue("")
				#self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).SetSelection(SetChoiceIndex())
				#self.GetControl(ID_CHOICEPROSPECTOVENDEDORFILTRO).SetSelection(SetChoiceIndex())
				#self.GetControl(ID_CHOICEPROSPECTOMEDIOPUBLICITARIOFILTRO).SetSelection(SetChoiceIndex())
				#self.GetControl(ID_TEXTCTRLPROSPECTOAFILIACIONIMSSFILTRO).Clear()
				#self.SalirDetalle()
				#self.FillListCtrl()
			#else:
				#ctrl.SetValue(""); ctrl.SetFocus()
		#else:
			#self.NewFlag = False
			#self.Text()
			#if not self.NewFlag:
				##if Mensajes().YesNo(self,u"� Desea realmente grabar la informaci�n ?", u"Confirmaci�n"):
				#self.SaveRecord()
				#self.detail = False
					##self.GetControl(ID_BUTTONMOVTOBANCOAGREGAR).Enable(True)
					##self.GetControl(ID_BUTTONMOVTOBANCOAGREGAR).SetFocus()
	
	#def OnAgregarDetalle(self, event):
		#self.GetControl(ID_CHOICEMOVTOBANCOESTATUS).SetSelection(0)
		#self.NewFlag = True
		#for k,id in self.controles_tipo_txt.iteritems():
			#control = self.GetControl(id)
			#if id in (ID_TEXTCTRLMOVTOBANCOID, ID_TEXTCTRLMOVTOBANCOCANTIDAD, ID_TEXTCTRLMOVTOBANCOREFERENCIA):
				#control.SetValue("")
			#if k == self.coloreable:
				#control.SetBackgroundColour(wx.GREEN)
			#else:
				#control.SetBackgroundColour(wx.WHITE)
			#control.Refresh()
		
		#for v in self.controles_tipo_txt.itervalues():
			#self.originales[ v ] = None
			
		#control = self.GetControl(ID_TEXTCTRLMOVTOBANCOCLASIFICADO)
		#control.SetBackgroundColour(wx.NamedColour("RED"))
		#control.SetForegroundColour(wx.NamedColour("WHITE"))
		#control.SetValue("NO CLASIFICADO")
		#self.GetControl(ID_STATICBITMAPMOVTOBANCOCLASIFICADO).SetBitmap(MyBitmapsFunc(35))
		#self.SetColoreable(self.coloreableeditable)
		#self.GetControl(ID_BUTTONMOVTOBANCOAPLICAR).Enable(True)
		#self.GetControl(ID_BUTTONMOVTOBANCOAGREGAR).Enable(False)
		#self.GetControl(ID_TEXTCTRLMOVTOBANCOCANTIDAD).SetFocus()
		
	#def OnSalirDetalle(self, event):
		#self.SalirDetalle()
		
	#def SalirDetalle(self):
		##if self.currentitem:
			##self.LCtrl()
		#if wx.Platform == '__WXMSW__':
			#self.ActiveNoteBook(ID_NOTEBOOKPROSPECTOLISTCTRL, ID_NOTEBOOKPROSPECTOFORM, 1011, 670)
		#else:
			#self.ActiveNoteBook(ID_NOTEBOOKPROSPECTOLISTCTRL, ID_NOTEBOOKPROSPECTOFORM, 1060, 685)
		#if self.usuario in self.usuariorestringido:
			#self.GetControl(ID_BUTTONPROSPECTOAGREGARLISTCTRL).Enable(False)
		#else:
			#self.GetControl(ID_BUTTONPROSPECTOAGREGARLISTCTRL).Enable(True)
		##self.GetControl(ID_BUTTONPROSPECTOEDITARLISTCTRL).Enable(True)
		#self.GetControl(ID_BUTTONPROSPECTOCERRARLISTCTRL).Enable(True)
		#self.GetControl(ID_LISTCTRLPROSPECTO).SetFocus()
		#self.detail = False
		
	#def OnRefrescar(self, event):
		#self.FillListCtrl()

	#def OnEditRecord(self, event):
		#if self.usuario in self.usuariorestringido:
			#return
		#self.LCtrl()
		#if wx.Platform == '__WXMSW__':
			#self.ActiveNoteBook(ID_NOTEBOOKPROSPECTOFORM, ID_NOTEBOOKPROSPECTOLISTCTRL, 543, 600)
			#self.GetControl(ID_NOTEBOOKPROSPECTOFORM).SetSize(wx.Size(525, 535))
		#else:
			#self.ActiveNoteBook(ID_NOTEBOOKPROSPECTOFORM, ID_NOTEBOOKPROSPECTOLISTCTRL, 613, 650)
			#self.GetControl(ID_NOTEBOOKPROSPECTOFORM).SetSize(wx.Size(603, 585))
		#self.GetControl(ID_NOTEBOOKPROSPECTOFORM).Refresh()
		#self.GetControl(ID_BUTTONPROSPECTOACEPTARFORM).Enable(True)
		#self.GetControl(ID_BUTTONPROSPECTOCANCELARFORM).Enable(True)
		#self.detail = True
		
		##self.GetControl(ID_TEXTCTRLMOVTOBANCOCANTIDAD).SetFocus()
		##self.GetControl(ID_TEXTCTRLMOVTOBANCOCANTIDAD).SetSelection(-1, -1)
	
	#def OnFechaFiltro(self, event):
		#id = event.GetId()
		#if id == ID_TEXTCTRLPROSPECTOFECHAINICIALFILTRO:
			#habilitado = self.GetControl(ID_TEXTCTRLPROSPECTOFECHAFINALFILTRO).IsEnabled()
			#if self.GetControl(id).GetValue():
				#if not habilitado:
					#self.GetControl(ID_TEXTPROSPECTOFECHAFINALFILTRO).Enable(True)
					#self.GetControl(ID_TEXTCTRLPROSPECTOFECHAFINALFILTRO).Enable(True)
					#self.GetControl(ID_BITMAPBUTTONPROSPECTOELEGIRFECHAFINALFILTRO).Enable(True)
					#self.GetControl(ID_BITMAPBUTTONPROSPECTOLIMPIARFECHAFINALFILTRO).Enable(True)
			#else:
				#if habilitado:
					#self.GetControl(ID_TEXTPROSPECTOFECHAFINALFILTRO).Enable(False)
					#self.GetControl(ID_TEXTCTRLPROSPECTOFECHAFINALFILTRO).Enable(False)
					#self.GetControl(ID_BITMAPBUTTONPROSPECTOELEGIRFECHAFINALFILTRO).Enable(False)
					#self.GetControl(ID_BITMAPBUTTONPROSPECTOLIMPIARFECHAFINALFILTRO).Enable(False)
			#event.Skip()
			#return
				
	#def OnPrintExcel(self, event):
		#tabla = self.dbtable
		#meta = ((14,"Id") , (200,u"Prospecto"), (70,u"Asignaci�n"), (70,u"Cierre"), (70,u"Tel�fono(s)"), (70,u"No. IMSS"),
			#(70,u"Seguimiento"), (70,u"No Seguimiento"), (200,u"Vendedor"), (200,u"Gerente"), (200,u"Medio Publicitario"))
		#query = self.FillListCtrl(printexcel = True)
		#titulo = u"Prospectos"
		#self.DisplayGrid(tabla, meta, query, titulo)

	#def FillListCtrl(self, display= 'first', printexcel = False):
		#wx.BeginBusyCursor()
		#self.sqlfiltro = ""
		#tipofechafiltro = ""
		#tipofecha = self.GetControl(ID_CHOICEPROSPECTOTIPOFECHAFILTRO).GetSelection()
		#if tipofecha in (1,2,3,4):
			#tipofechadict = {1:'fechaasignacion', 2:'fechacierre', 3:'fechaseguimiento', 4:'fechanoseguimiento'}
			#tipofechafiltro = tipofechadict[tipofecha]
			
		#fechainicial = self.GetControl(ID_TEXTCTRLPROSPECTOFECHAINICIALFILTRO).GetValue()
		#if fechainicial:
			#try:
				#fecha_dia, fecha_mes, fecha_ano = fechainicial.split('/')
				#fechainicial = "'%s/%02d/%02d'" % (fecha_ano, int(fecha_mes), int(fecha_dia))
				#fechafinal = self.GetControl(ID_TEXTCTRLPROSPECTOFECHAFINALFILTRO).GetValue()
				#if fechafinal:
					#fecha_dia, fecha_mes, fecha_ano = fechafinal.split('/')
					#fechafinal = "'%s/%02d/%02d'" % (fecha_ano, int(fecha_mes), int(fecha_dia))
					#if fechainicial > fechafinal:
						#control = self.GetControl(ID_TEXTCTRLPROSPECTOTOTALREGISTROS)
						#control.SetBackgroundColour(wx.Colour(153,255,153))
						#control.SetForegroundColour(wx.NamedColour("BLACK"))
						#control.SetValue("0.00")
						#Mensajes().Info(self, u"� La Fecha Inicial no debe ser mayor a la Fecha Final !", u"Atenci�n")
						#return
					#elif tipofechafiltro:
						#self.sqlfiltro = """
						#(%s >= %s and %s <= %s)
						#""" % (tipofechafiltro, fechainicial, tipofechafiltro, fechafinal)
					#else:
						#self.sqlfiltro = """
						#((fechaasignacion >= %s and fechaasignacion <= %s) or
						#(fechacierre >= %s and fechacierre <= %s) or
						#(fechaseguimiento >= %s and fechaseguimiento <= %s) or
						#(fechanoseguimiento >= %s and fechanoseguimiento <= %s))
						#""" % (fechainicial, fechafinal, fechainicial, fechafinal,
							   #fechainicial, fechafinal, fechainicial, fechafinal)
				#elif tipofechafiltro:
					#self.sqlfiltro = "(%s = %s)" % (tipofechafiltro, fechainicial)
				#else:
					#self.sqlfiltro = """
					#((fechaasignacion = %s) or (fechacierre = %s) or
					#(fechaseguimiento = %s) or (fechanoseguimiento = %s))
					#""" % (fechainicial, fechainicial, fechainicial, fechainicial)
			#except:
				#if tipofechafiltro:
					#self.sqlfiltro = "(%s <> '')" % tipofechafiltro
		#elif tipofechafiltro:
			#self.sqlfiltro = "(%s <> '')" % tipofechafiltro

		#inx = self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).GetSelection()
		#if inx > -1:
			#idgerente = self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).GetClientData(inx)
			#if idgerente:
				#if self.sqlfiltro:
					#self.sqlfiltro += " and p.idgerente = %s" % idgerente
				#else:
					#self.sqlfiltro = "p.idgerente = %s" % idgerente
	
		#inx = self.GetControl(ID_CHOICEPROSPECTOMEDIOPUBLICITARIOFILTRO).GetSelection()
		#if inx > -1:
			#idmediopublicitario = self.GetControl(ID_CHOICEPROSPECTOMEDIOPUBLICITARIOFILTRO).GetClientData(inx)
			#if idmediopublicitario:
				#if self.sqlfiltro:
					#self.sqlfiltro += " and p.idmediopublicitario = %s" % idmediopublicitario
				#else:
					#self.sqlfiltro = "p.idmediopublicitario = %s" % idmediopublicitario
				
		#inx = self.GetControl(ID_CHOICEPROSPECTOVENDEDORFILTRO).GetSelection()
		#if inx > -1:
			#idvendedor = self.GetControl(ID_CHOICEPROSPECTOVENDEDORFILTRO).GetClientData(inx)
			#if idvendedor:
				#if self.sqlfiltro:
					#self.sqlfiltro += " and p.idvendedor = %s" % idvendedor
				#else:
					#self.sqlfiltro = "p.idvendedor = %s" % idvendedor
				
		#wild = "%%"
		#nombreprospecto = self.GetControl(ID_TEXTCTRLPROSPECTONOMBREFILTRO).GetValue()
		#if nombreprospecto:
			#aux1 = nombreprospecto.encode("iso8859-1")
			#name = aux1.replace(" ", "")
			#if self.sqlfiltro:
				#self.sqlfiltro += " and (replace(p.nombre,' ','')) like '%s%s%s'" % (wild, name, wild)
			#else:
				#self.sqlfiltro = "(replace(p.nombre,' ','')) like '%s%s%s'" % (wild, name, wild)
				
		#afiliacionimss = self.GetControl(ID_TEXTCTRLPROSPECTOAFILIACIONIMSSFILTRO).GetValue()
		#if afiliacionimss:
			#if self.sqlfiltro:
				#self.sqlfiltro += " and p.afiliacionimss like '%s%s%s'" % (wild, afiliacionimss, wild)
			#else:
				#self.sqlfiltro = "p.afiliacionimss like '%s%s%s'" % (wild, afiliacionimss, wild)
				
		#if self.sqlfiltro:
			#self.sqlfiltro = "where %s" % self.sqlfiltro
			
		#if printexcel:
			#sql = """
			#select p.idprospecto, p.nombre, convert(varchar(10), p.fechaasignacion, 103),
			#convert(varchar(10), p.fechacierre, 103), telefonos, afiliacionimss, convert(varchar(10), p.fechaseguimiento, 103),
			#convert(varchar(10), p.fechanoseguimiento, 103), v.nombre, g.nombre, m.descripcion
			#from %s p join VENDEDOR v on v.codigo = p.idvendedor
			#join gerentesventas g on g.codigo = v.gerente
			#join gixmediospublicitarios m on m.idmediopublicitario = p.idmediopublicitario
			#%s order by p.nombre
			#""" % (self.dbtable, self.sqlfiltro)
			#sqlx = sql.replace('\t', ' ')
			#sql = sqlx.replace('\n', ' ')
			#wx.EndBusyCursor()
			#return str(sql)
			
		#lctrl = self.GetControl(ID_LISTCTRLPROSPECTO)
		#lctrl.ClearAll()
		#sql = """
		#select p.idprospecto, p.nombre, convert(varchar(10), p.fechaasignacion, 103),
		#convert(varchar(10), p.fechacierre, 103), telefonos, afiliacionimss, convert(varchar(10), p.fechaseguimiento, 103),
		#convert(varchar(10), p.fechanoseguimiento, 103), v.nombre, g.nombre, m.descripcion, v.desactivado
		#from %s p join VENDEDOR v on v.codigo = p.idvendedor
		#join gerentesventas g on g.codigo = v.gerente
		#join gixmediospublicitarios m on m.idmediopublicitario = p.idmediopublicitario
		#%s order by p.nombre
		#""" % (self.dbtable, self.sqlfiltro)
		#sqlx = sql.replace('\t', ' ')
		#sql = sqlx.replace('\n', ' ')
		#cu = r_cn.cursor()
		#cu.execute(str(sql))
		#rows = fetchall(cu)
		#cu.close()
		#fila = 0
		
		#if rows:
			#title = ((u"Id", wx.LIST_FORMAT_CENTER), (u"Prospecto", wx.LIST_FORMAT_LEFT), (u"Asignaci�n", wx.LIST_FORMAT_CENTER),
				 #(u"Cierre", wx.LIST_FORMAT_CENTER), (u"Tel�fono(s)", wx.LIST_FORMAT_LEFT), (u"No. IMSS", wx.LIST_FORMAT_CENTER),
				 #(u"Seguimiento", wx.LIST_FORMAT_CENTER), (u"No Seguimiento", wx.LIST_FORMAT_CENTER),
				 #(u"Vendedor", wx.LIST_FORMAT_LEFT), (u"Gerente", wx.LIST_FORMAT_LEFT), (u"Medio Publicitario", wx.LIST_FORMAT_LEFT))
			#for i, coltitle in enumerate(title):
				#lctrl.InsertColumn(i, coltitle[0], coltitle[1])
			#for row in rows:
				#if str(row[2]) == "None": asignacion = ""
				#else: asignacion = str(row[2])
				#if str(row[3]) == "None": cierre = ""
				#else: cierre = str(row[3])
				#if str(row[6]) == "None": seguimiento = ""
				#else: seguimiento = str(row[6])
				#if str(row[7]) == "None": noseguimiento = ""
				#else: noseguimiento = str(row[7])
				#if int(row[11]) == 0:
					#if fila %2 != 0: bgcolor = [204,204,255]
					#else:            bgcolor = [230,230,255]
				#else:
					#if fila %2 != 0: bgcolor = [255,153,153]
					#else:            bgcolor = [255,215,215]
				#index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				#lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				#lctrl.SetStringItem(index, 0, str(row[0]))
				#lctrl.SetStringItem(index, 1, str(row[1]))
				#lctrl.SetStringItem(index, 2, asignacion)
				#lctrl.SetStringItem(index, 3, cierre)
				#lctrl.SetStringItem(index, 4, str(row[4]))
				#lctrl.SetStringItem(index, 5, str(row[5]))
				#lctrl.SetStringItem(index, 6, seguimiento)
				#lctrl.SetStringItem(index, 7, noseguimiento)
				#lctrl.SetStringItem(index, 8, str(row[8]))
				#lctrl.SetStringItem(index, 9, str(row[9]))
				#lctrl.SetStringItem(index, 10, str(row[10]))
				#lctrl.SetItemData(index, row[0])
				#if int(row[0]) == self.idrefmovto:
					#self.ctrlindex = index
				#fila += 1
				
			#fila = 0
			#for i, coltitle in enumerate(title):
				#if i == 0:
					#fila = lctrl.InsertStringItem(sys.maxint, "#%s#" % coltitle[0])
				#else:
					#lctrl.SetStringItem(fila, i, "#%s#" % coltitle[0])
					
			#lctrl.SetColumnWidth(0, 50)
			#for i in range(1, 10):
				#lctrl.SetColumnWidth(i, wx.LIST_AUTOSIZE)
				
			#lctrl.DeleteItem(fila)
			#if display == 'first':
				#self.GetLFRecord("min")
			#elif display == 'last':
				#self.GetLFRecord("max")
		#else:
			#lctrl.InsertColumn(0, "       No Existen Prospectos", wx.LIST_FORMAT_CENTER)
			#lctrl.SetColumnWidth(0, 167)
		
			
		#control = self.GetControl(ID_TEXTCTRLPROSPECTOTOTALREGISTROS)
		#control.SetBackgroundColour(wx.Colour(153,255,153))
		#control.SetForegroundColour(wx.NamedColour("BLACK"))
		#control.SetValue(str(fila))
		#if fila:
			#if self.usuario in self.usuariorestringido:
				#self.GetControl(ID_BUTTONPROSPECTOEDITARLISTCTRL).Enable(False)
			#else:
				#self.GetControl(ID_BUTTONPROSPECTOEDITARLISTCTRL).Enable(True)
		#else:
			#self.GetControl(ID_BUTTONPROSPECTOEDITARLISTCTRL).Enable(False)
		#wx.EndBusyCursor()

	#def OnLCtrl(self, event):
		#self.currentitem = event.m_itemIndex
		#self.LCtrl()
		#event.Skip()
		
	#def LCtrl(self):
		#lctrl = self.GetControl(self.listctrl)
		#datointerno = lctrl.GetItem(self.currentitem, 0).GetText()
		#datointerno = int(datointerno)
		##if self.GetControl(ID_BUTTONMOVTOBANCOAPLICAR).IsEnabled():
			##self.NewFlag = False
			##self.Text(True)
			##if not self.NewFlag:
				##if Mensajes().YesNo(self,u"Algunos datos han cambiado\n\n� Desea ud. grabarlos ?", \
						    ##u"Confirmaci�n"):
					##self.SaveRecord()
					
		#if self.datointernoynombre:
			#if self.GetRecord(datointerno, nombre):
				#pass
				##if self.eliminado == "N" and self.clasificado == "N":
					##self.GetControl(ID_BUTTONMOVTOBANCOELIMINARLISTCTRL).Enable(True)
			#else:
				#pass
		#elif self.GetRecord(datointerno):
			#pass
			##if self.eliminado == "N" and self.clasificado == "N":
				##self.GetControl(ID_BUTTONMOVTOBANCOELIMINARLISTCTRL).Enable(True)
		#else:
			#Mensajes().Warn(self, u"Escoja un registro v�lido", u"Atenci�n")
		
	#def GetLFRecord(self, what):
		#lctrl = self.GetControl(ID_LISTCTRLPROSPECTO)
		#sql = """
		#select p.idprospecto, p.nombre, convert(varchar(10), p.fechaasignacion, 103),
		#convert(varchar(10), p.fechacierre, 103), convert(varchar(10), p.fechaseguimiento, 103),
		#convert(varchar(10), p.fechanoseguimiento, 103),	v.nombre, g.nombre, m.descripcion
		#from %s p join VENDEDOR v on v.codigo = p.idvendedor
		#join gerentesventas g on g.codigo = v.gerente
		#join gixmediospublicitarios m on m.idmediopublicitario = p.idmediopublicitario
		#%s order by p.nombre
		#""" % (self.dbtable, self.sqlfiltro)
		
		#idprospecto = ""
		#try:
			#cursor = r_cn.cursor()
			#cursor.execute(str(sql))
			#row = fetchone(cursor)
			#if row is not None:
				#idprospecto = int(row[0])
			#self.GetRecord(idprospecto)
			#if not self.ctrlindex:
				#if what == "min":
					#lctrl.SetItemState(0, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
				#else:
					#lctrl.SetItemState(lctrl.GetItemCount() - 1, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
		#finally:
			#cursor.close()
		
	#def OnText(self, event):
		#self.controlactual = event.GetId()
		#if self.controlactual == ID_TEXTCTRLPROSPECTONOMBRE:
			#valor = self.GetControl(self.controlactual).GetValue().encode("iso8859-1")
			#valornum = str(valor).replace('.','')
			#if valor and not valornum.isdigit():
				#if not str(valor).isupper():
					#self.GetControl(self.controlactual).SetValue(str(valor).upper())
					#lastposition = self.GetControl(self.controlactual).GetLastPosition()
					#self.GetControl(self.controlactual).SetInsertionPoint(lastposition)
		
		#if self.Text(vengodeontext = True):
			#self.GetControl(ID_CHOICEPROSPECTOTIPOFECHAFILTRO).SetSelection(0)
			#self.GetControl(ID_TEXTCTRLPROSPECTOFECHAINICIALFILTRO).SetValue("")
			#self.GetControl(ID_TEXTCTRLPROSPECTOFECHAFINALFILTRO).SetValue("")
			#self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).SetSelection(SetChoiceIndex())
			#self.GetControl(ID_CHOICEPROSPECTOVENDEDORFILTRO).SetSelection(SetChoiceIndex())
			#self.GetControl(ID_CHOICEPROSPECTOMEDIOPUBLICITARIOFILTRO).SetSelection(SetChoiceIndex())
			#self.GetControl(ID_TEXTCTRLPROSPECTOAFILIACIONIMSSFILTRO).Clear()
			#self.SalirDetalle()
			#self.FillListCtrl()
			
		#event.Skip()
	
	#def Text(self, VengodelaLista = False, vengodeontext = False):
		#for id in(ID_TEXTCTRLPROSPECTONOMBRE, ID_TEXTCTRLPROSPECTOTELEFONO, ID_TEXTCTRLPROSPECTOIMSS,
				  #ID_CHOICEPROSPECTOGERENTE, ID_CHOICEPROSPECTOVENDEDOR, ID_COMBOPROSPECTOMEDIOPUBLICITARIO,
				  #ID_TEXTCTRLPROSPECTOFECHAASIGNACION):
			#control = self.GetControl(id)
			##if vengodeontext:
				##if (self.controlactual == ID_TEXTCTRLPROSPECTONOMBRE and self.detail):
					##ctrl = self.GetControl(ID_TEXTCTRLPROSPECTONOMBRE)
					##nombre = ctrl.GetValue().strip()
					##if self.ExisteProspecto(nombre):
						##if Mensajes().YesNo(self, u"Ya existe el prospecto: %s\n\n" \
											##u"� Desea localizarlo ?" % nombre, u"Confirmaci�n"):
							##ctrl.SetValue("")
							##self.GetControl(ID_TEXTCTRLPROSPECTONOMBREFILTRO).SetValue(str(nombre.encode("iso8859-1")))
							##return True
						##else:
							##ctrl.SetValue(""); ctrl.SetFocus()
							##return False
			#if id in (ID_CHOICEPROSPECTOGERENTE, ID_CHOICEPROSPECTOVENDEDOR):
				#valor = control.GetLabel().strip()
			#else:
				#try:
					#valor = control.GetValue().strip()
				#except:
					#valor = control.GetStringSelection()
			#if valor == "" and not self.FillingARecord and not self.NewFlag:
				#self.NewFlag = True
				#if not VengodelaLista:
					#Mensajes().Info(self, u"� No debe quedar ning�n dato requerido * en blanco !", u"Atenci�n")
					#return False
					
		#id = self.controlactual
		#editable = False
		#if not self.FillingARecord:
			#if not self.GetControl(id).IsEditable():
				#self.GetControl(id).SetEditable(True)
				#editable = True
				
			#if self.OriginalDistinto(id):
				#self.GetControl(id).SetBackgroundColour(wx.CYAN)
				#self.GetControl(id).Refresh()
			#else:
				#self.GetControl(id).SetBackgroundColour(wx.WHITE)
				#self.GetControl(id).Refresh()
			
			#if self.OriginalesDistintos():
				#self.GetControl(ID_BUTTONPROSPECTOACEPTARFORM).Enable(True)
			#else:
				#self.GetControl(ID_BUTTONPROSPECTOACEPTARFORM).Enable(False)
			
		#self.ChoiceControl(ID_CHOICEPROSPECTOGERENTE)
		#self.ChoiceControl(ID_CHOICEPROSPECTOVENDEDOR)
		
		#if editable:
			#self.GetControl(id).SetEditable(False)
			
		#return False
			
	#def ExisteProspecto(self, nombre, agrega):
		#aux1 = nombre.encode("iso8859-1")
		#name = aux1.replace(" ", "")
		#sql = """
		#select count(nombre) from gixprospectos	group by nombre having replace(nombre,' ','') = '%s'
		#""" % name
		#existe = False
		#try:
			#cu = r_cn.cursor()
			#cu.execute(str(sql))
			#row = fetchone(cu)
			#if row:
				#if agrega:
					#if int(row[0]) > 0:
						#existe = True
				#elif self.OriginalDistinto(ID_TEXTCTRLPROSPECTONOMBRE):
					#if int(row[0]) > 0:
						#existe = True
				#else:
					#if int(row[0]) > 1:
						#existe = True
		#finally:
			#cu.close()
		#return existe
		
	#def ObtenerBanco(self, idbanco):
		#""" Obtener de base de datos el nombre del banco
		#"""
		#sql = "select nombre from gixbancos where idbanco = %s" % idbanco
		#nombre = ""
		#try:
			#cu = r_cn.cursor()
			#cu.execute(str(sql))
			#row = fetchone(cu)
			#if row:
				#nombre = "%s" % (self.GetStringFromField(row[0]),) 
		#finally:
			#cu.close()
		#return nombre
	
	#def ActualizaSaldo(self):
		#fechaactual = self.GetControl(ID_TEXTCTRLMOVTOBANCOFECHAMOVTO).GetValue()
		#dia_actual, mes_actual, ano_actual = fechaactual.split('/')
		#fechaanterior = self.originales[ID_TEXTCTRLMOVTOBANCOFECHAMOVTO]
		#if fechaanterior != None:
			#dia_anterior, mes_anterior, ano_anterior = fechaanterior.split('/')
		#tipomovtoactual = self.GetControl(ID_CHOICEMOVTOBANCOTIPOMOVIMIENTO).GetLabel()
		#tipomovtoanterior = self.originales[ID_CHOICEMOVTOBANCOTIPOMOVIMIENTO]
		#cantidadactual = self.GetControl(ID_TEXTCTRLMOVTOBANCOCANTIDAD).GetValue()
		#cantidadanterior = self.originales[ID_TEXTCTRLMOVTOBANCOCANTIDAD]
		#try:
			#cantidadactual = float(cantidadactual)
		#except:
			#cantidadactual = 0
		#try:
			#cantidadanterior = float(cantidadanterior)
		#except:
			#cantidadanterior = 0
		#if fechaactual != fechaanterior or tipomovtoactual != tipomovtoanterior or cantidadactual != cantidadanterior:
			#if tipomovtoactual == tipomovtoanterior and cantidadactual == cantidadanterior:
				#if int(mes_actual) != int(mes_anterior) or int(ano_actual) != int(ano_anterior):
					#self.EliminaMovimientoSaldo(dia_anterior, mes_anterior, ano_anterior, tipomovtoanterior, cantidadanterior)
					#return True
				#else:
					#pass
			#else:
				#self.EliminaMovimientoSaldo(dia_anterior, mes_anterior, ano_anterior, tipomovtoanterior, cantidadanterior)
				#return True
		#return False
				
	#def EliminaMovimientoSaldo(self, dia_anterior, mes_anterior, ano_anterior, tipomovtoanterior, cantidadanterior):
		#fechamovto = "'%04d/%02d/01'" % (int(ano_anterior), int(mes_anterior))
		#sql = """
		#select convert(varchar(10), periodo, 111), saldoinicial, totalabonos, totalcargos
		#from gixbancossaldosxperiodo where idbanco = %s and periodo >= %s
		#""" % (self.idbanco, fechamovto)
		#cu = r_cn.cursor()
		#cu.execute(str(sql))
		#rows = fetchall(cu)
		#cu.close()
		#periodos = []
		#periodosxactualizar = {}
		#for row in rows:
			#periodos.append(self.GetStringFromField(row[0]))
			#periodosxactualizar[self.GetStringFromField(row[0])] = [float(row[1]), float(row[2]), float(row[3])]
		#periodos.sort()
		#entro = True
		#for periodo in periodos:
			#if entro:
				#entro = False
				#if tipomovtoanterior == "ABONO":
					#cantidad = float(periodosxactualizar[periodo][1])
					#cantidad -= float(cantidadanterior)
					#sqlupdate = "totalabonos = %s" % float(cantidad)
				#else:
					#cantidad = float(periodosxactualizar[periodo][2])
					#cantidad -= float(cantidadanterior)
					#sqlupdate = "totalcargos = %s" % float(cantidad)
			#else:
				#cantidad = float(periodosxactualizar[periodo][0])
				#if tipomovtoanterior == "ABONO":
					#cantidad -= float(cantidadanterior)
				#else:
					#cantidad += float(cantidadanterior)
				#sqlupdate = "saldoinicial = %s" % float(cantidad)
			
			#sql = "update gixbancossaldosxperiodo set %s where idbanco = %s and periodo = '%s'" \
				#% (sqlupdate, self.idbanco, periodo)
			#todobien = self.QueryUpdateRecord(sql)
	
	#def SaveRecord(self):
		#idprospecto = self.GetControl(ID_TEXTCTRLPROSPECTOID).GetValue()
		#if idprospecto.strip() == "" :
			#bienGrabado, self.idprospecto = self.AddRecord()
			#if not bienGrabado:
				#Mensajes().Info(self,u"� El Registro no fue grabado !", u"Atenci�n")
		#else:
			#bienGrabado, self.idprospecto = self.UpdateRecord()
			#if not bienGrabado:
				#Mensajes().Info(self,u"� El Registro no fue actualizado !", u"Atenci�n")
		#if bienGrabado:
			#if wx.Platform == '__WXMSW__':
				#self.ActiveNoteBook(ID_NOTEBOOKPROSPECTOLISTCTRL, ID_NOTEBOOKPROSPECTOFORM, 1011, 670)
			#else:
				#self.ActiveNoteBook(ID_NOTEBOOKPROSPECTOLISTCTRL, ID_NOTEBOOKPROSPECTOFORM, 1060, 685)
			#if self.usuario in self.usuariorestringido:
				#self.GetControl(ID_BUTTONPROSPECTOAGREGARLISTCTRL).Enable(False)
			#else:
				#self.GetControl(ID_BUTTONPROSPECTOAGREGARLISTCTRL).Enable(True)
			##self.GetControl(ID_BUTTONPROSPECTOEDITARLISTCTRL).Enable(True)
			#self.GetControl(ID_BUTTONPROSPECTOCERRARLISTCTRL).Enable(True)
			#self.GetControl(ID_LISTCTRLPROSPECTO).SetFocus()
			##lctrl = self.GetControl(ID_LISTCTRLPROSPECTO)
			##lctrl.SetItemState(self.ctrlindex, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
			##lctrl.EnsureVisible(self.ctrlindex)
			##self.GetControl(ID_BUTTONMOVTOBANCOAPLICAR).Enable(False)
			##self.GetControl(ID_BUTTONMOVTOBANCOAGREGAR).Enable(True)
			##self.GetRecord("%s" % (idprospecto))
			
	#def UpdateRecord(self):
		#idprospecto = self.GetControl(ID_TEXTCTRLPROSPECTOID).GetValue()
		#inx = self.GetControl(ID_CHOICEPROSPECTOGERENTE).GetSelection()
		#idgerente = self.GetControl(ID_CHOICEPROSPECTOGERENTE).GetClientData(inx)
		#inx = self.GetControl(ID_CHOICEPROSPECTOVENDEDOR).GetSelection()
		#idvendedor = self.GetControl(ID_CHOICEPROSPECTOVENDEDOR).GetClientData(inx)
		#nombre = self.GetControl(ID_TEXTCTRLPROSPECTONOMBRE).GetValue()
		#afiliacionimss = self.GetControl(ID_TEXTCTRLPROSPECTOIMSS).GetValue()
		#telefonos = self.GetControl(ID_TEXTCTRLPROSPECTOTELEFONO).GetValue()
		#fecha = self.GetControl(ID_TEXTCTRLPROSPECTOFECHAASIGNACION).GetValue()
		#fechaOk, fechaasignacion = self.PreparaFecha(fecha)
		#if not fechaOk:
			#return False, 0
		#fecha = self.GetControl(ID_TEXTCTRLPROSPECTOFECHACIERRE).GetValue()
		#fechaOk, fechacierre = self.PreparaFecha(fecha)
		#if not fechaOk:
			#return False, 0
		#fecha = self.GetControl(ID_TEXTCTRLPROSPECTOFECHASEGUIMIENTO).GetValue()
		#fechaOk, fechaseguimiento = self.PreparaFecha(fecha)
		#if not fechaOk:
			#return False, 0
		#fecha = self.GetControl(ID_TEXTCTRLPROSPECTOFECHANOSEGUIMIENTO).GetValue()
		#fechaOk, fechanoseguimiento = self.PreparaFecha(fecha)
		#if not fechaOk:
			#return False, 0
		
		#descripcion = self.GetControl(ID_COMBOPROSPECTOMEDIOPUBLICITARIO).GetValue()
		#if not self.ExisteMedioPublicitario(descripcion):
			#Mensajes().Info(self, u"� El medio publicitario %s no existe !\n\n" \
							#u"Si desea agregarlo solicite autorizaci�n." % descripcion, u"Atenci�n")
			#return False, 0
			
			## Lo siguiente es por si se permite dar de alta medios publicitarios al usuario.
			##
			##if Mensajes().YesNo(self, u"� El medio publicitario %s no existe !\n\n� Desea agregarlo ?" \
								##% descripcion, u"Confirmaci�n"):
				##sql = "insert into gixmediospublicitarios (descripcion) values ('%s')" % (descripcion)
				##queTal, idmediopublicitario = self.QueryUpdateRecord(sql, True)
				##if not queTal:
					##return False, 0
			##else:
				##return False, 0
		#else:
			#inx = self.GetControl(ID_COMBOPROSPECTOMEDIOPUBLICITARIO).GetSelection()
			#idmediopublicitario = self.GetControl(ID_COMBOPROSPECTOMEDIOPUBLICITARIO).GetClientData(inx)
			
		#setListForQuery = """
		#idgerente = %s, idvendedor = %s, nombre = '%s', afiliacionimss = '%s', telefonos = '%s', fechaasignacion = %s,
		#fechacierre = %s, fechaseguimiento = %s, fechanoseguimiento = %s, idmediopublicitario = %s
		#""" % (idgerente, idvendedor, nombre, afiliacionimss, telefonos, fechaasignacion, fechacierre,
			   #fechaseguimiento, fechanoseguimiento, idmediopublicitario)
		#sql = "update %s set %s where idprospecto = %s" \
			#% (self.dbtable, setListForQuery, idprospecto)
		
		#queTal = self.QueryUpdateRecord(sql)
		#numero = 0
		#if queTal:
			#numero = int(idprospecto)
			#sql = """
			#insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension)
			#values ('%s', getdate(), '%s', '%s', '%s', '%s')
			#""" % (self.BlogGUID, self.usuario, u"Modificaci�n del Prospecto", "", "")
			#if not self.QueryUpdateRecord(sql):
				#Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
		
		#return queTal, numero
	
	#def PreparaFecha(self, fecha):
		#if fecha:
			#try:
				#fecha_dia, fecha_mes, fecha_ano = fecha.split('/')
				#gooddate = "'%04d/%02d/%02d'" % (int(fecha_ano), int(fecha_mes), int(fecha_dia))
				#return True, gooddate
			#except:
				#Mensajes().Info(self, u"Problemas con la fecha al agregar el prospecto", u"Atenci�n")
				#return False, "Null"
		#else:
			#return True, "Null"
		
	#def ExisteMedioPublicitario(self, descripcion):
		#sql = "select idmediopublicitario from gixmediospublicitarios where descripcion = '%s'" % (descripcion)
		#cu = r_cn.cursor()
		#cu.execute(str(sql))
		#row = fetchone(cu)
		#cu.close()
		#if row is not None:
			#return True
		#else:
			#return False
		
	#def AddRecord(self):
		#inx = self.GetControl(ID_CHOICEPROSPECTOGERENTE).GetSelection()
		#idgerente = self.GetControl(ID_CHOICEPROSPECTOGERENTE).GetClientData(inx)
		#inx = self.GetControl(ID_CHOICEPROSPECTOVENDEDOR).GetSelection()
		#idvendedor = self.GetControl(ID_CHOICEPROSPECTOVENDEDOR).GetClientData(inx)
		#nombre = self.GetControl(ID_TEXTCTRLPROSPECTONOMBRE).GetValue()
		#afiliacionimss = self.GetControl(ID_TEXTCTRLPROSPECTOIMSS).GetValue()
		#telefonos = self.GetControl(ID_TEXTCTRLPROSPECTOTELEFONO).GetValue()
		#fecha = self.GetControl(ID_TEXTCTRLPROSPECTOFECHAASIGNACION).GetValue()
		#fechaOk, fechaasignacion = self.PreparaFecha(fecha)
		#if not fechaOk:
			#return False, 0
		#fecha = self.GetControl(ID_TEXTCTRLPROSPECTOFECHACIERRE).GetValue()
		#fechaOk, fechacierre = self.PreparaFecha(fecha)
		#if not fechaOk:
			#return False, 0
		#fecha = self.GetControl(ID_TEXTCTRLPROSPECTOFECHASEGUIMIENTO).GetValue()
		#fechaOk, fechaseguimiento = self.PreparaFecha(fecha)
		#if not fechaOk:
			#return False, 0
		#fecha = self.GetControl(ID_TEXTCTRLPROSPECTOFECHANOSEGUIMIENTO).GetValue()
		#fechaOk, fechanoseguimiento = self.PreparaFecha(fecha)
		#if not fechaOk:
			#return False, 0
		
		#descripcion = self.GetControl(ID_COMBOPROSPECTOMEDIOPUBLICITARIO).GetValue()
		#if not self.ExisteMedioPublicitario(descripcion):
			#Mensajes().Info(self, u"� El medio publicitario %s no existe !\n\n" \
							#u"Si desea agregarlo solicite autorizaci�n." % descripcion, u"Atenci�n")
			#return False, 0
			
			## Lo siguiente es por si se permite dar de alta medios publicitarios al usuario.
			##
			##if Mensajes().YesNo(self, u"� El medio publicitario %s no existe !\n\n� Desea agregarlo ?" \
								##% descripcion, u"Confirmaci�n"):
				##sql = "insert into gixmediospublicitarios (descripcion) values ('%s')" % (descripcion)
				##queTal, idmediopublicitario = self.QueryUpdateRecord(sql, True)
				##if not queTal:
					##return False, 0
			##else:
				##return False, 0
		#else:
			#inx = self.GetControl(ID_COMBOPROSPECTOMEDIOPUBLICITARIO).GetSelection()
			#idmediopublicitario = self.GetControl(ID_COMBOPROSPECTOMEDIOPUBLICITARIO).GetClientData(inx)
		
		#sqlFields = """
		#idgerente, idvendedor, nombre, afiliacionimss, telefonos, fechaasignacion, fechacierre,
		#fechaseguimiento, fechanoseguimiento, idmediopublicitario
		#"""
		#sqlValues = "%s, %s, '%s', '%s', '%s', %s, %s, %s, %s, %s" % \
			#(idgerente, idvendedor, nombre, afiliacionimss, telefonos, fechaasignacion, fechacierre,
			 #fechaseguimiento, fechanoseguimiento, idmediopublicitario)
		#sql = "insert into %s (%s) values (%s)" % (self.dbtable, sqlFields, sqlValues) 
		#sqlmax = "select max(idprospecto) from %s" % (self.dbtable)
		#queTal, idprospecto = self.QueryUpdateRecord(sql, sqlmax, True)
		#if queTal:
			#self.GetControl(ID_TEXTCTRLPROSPECTOID).SetValue(str(idprospecto))
			#sql = "select convert(varchar(100), BlogGUID) from %s where idprospecto = %s" % (self.dbtable, idprospecto)
			#cu = r_cn.cursor()
			#cu.execute(str(sql))
			#row = fetchone(cu)
			#cu.close()
			#if row is not None:
				#self.BlogGUID = row[0]
				#sql = """
				#insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura,
				#ContenidoText, ContenidoBinario, Extension)
				#values ('%s', getdate(), '%s', '%s', '%s', '%s')
				#""" % (self.BlogGUID, self.usuario, "Alta del Prospecto", "", "")
				#if not self.QueryUpdateRecord(sql):
					#Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
			#else:
				#Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
		#else:
			#idprospecto = 0

		#return queTal, int(idprospecto)
	
	#def OnDeleteRecord(self, event):
		#id = self.GetControl(ID_TEXTCTRLMOVTOBANCOID).GetValue()
		#if Mensajes().YesNo(self,u"� Desea realmente eliminar el registro %s ?" % id, u"Confirmaci�n") :
			#if self.DeleteRecord():
				#sql = """
				#insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension)
				#values ('%s', getdate(), '%s', '%s', '%s', '%s')
				#""" % (self.BlogGUID, self.usuario, u"Eliminaci�n del Movimiento", "", "")
				#if not self.QueryUpdateRecord(sql):
					#Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
				#fechaanterior = self.originales[ID_TEXTCTRLMOVTOBANCOFECHAMOVTO]
				#dia_anterior, mes_anterior, ano_anterior = fechaanterior.split('/')
				#tipomovtoanterior = self.originales[ID_CHOICEMOVTOBANCOTIPOMOVIMIENTO]
				#cantidadanterior = self.originales[ID_TEXTCTRLMOVTOBANCOCANTIDAD]
				#try:
					#cantidadanterior = float(cantidadanterior)
				#except:
					#cantidadanterior = 0
				#self.FillListCtrl()
				#self.EliminaMovimientoSaldo(dia_anterior, mes_anterior, ano_anterior, tipomovtoanterior, cantidadanterior)
				#self.ObtenerSaldo()
				#self.GetControl(ID_BUTTONMOVTOBANCOAPLICAR).Enable(False)
				#self.GetControl(ID_BUTTONMOVTOBANCOAGREGARLISTCTRL).Enable(True)
				#self.GetControl(ID_BUTTONMOVTOBANCOEDITARLISTCTRL).Enable(False)
				#self.GetControl(ID_BUTTONMOVTOBANCOELIMINARLISTCTRL).Enable(False)
		#self.GetControl(ID_LISTCTRLMOVTOBANCO).SetFocus()
		#event.Skip()
		#return
				
	#def DeleteRecord(self):
		#idreferenciamovto = self.idreferenciamovto.GetValue().strip()
		#if idreferenciamovto == "":
			#Mensajes().Info(self, u"No se ha especificado el movimiento", u"Atenci�n")
			#return False
		#sql = "update %s set eliminado = 'S' where idreferenciamovto = %s" % (self.dbtable, idreferenciamovto)
		#return self.QueryUpdateRecord(sql)

	#def DespliegaCombo(self, id, valor):
		#combo = self.GetControl(id)
		#for inx in range(0, combo.GetCount()):
			#if valor == combo.GetClientData(inx):
				#combo.SetSelection(inx)
				#break
	
	#def GetRecord(self, record):
		#lctrl = self.GetControl(self.listctrl)
		#try:
			#a = int(record)
		#except:
			#return False
		
		#self.FillingARecord = True
		#self.LimpiaControles()
		#self.SetColoreable(False)
		#for v in self.controles_tipo_txt.itervalues():
			#self.originales[v] = ""
		#self.originales[ID_CHOICEPROSPECTOGERENTE] = ""
		#self.originales[ID_CHOICEPROSPECTOVENDEDOR] = ""
		#self.originales[ID_COMBOPROSPECTOMEDIOPUBLICITARIO] = ""
		
		#idprospecto = int(record)
		#self.GetControl(ID_TEXTCTRLPROSPECTOID).SetValue(str(idprospecto))
		
		#sql = """
		#select nombre, telefonos, afiliacionimss, idgerente, idvendedor, convert(varchar(10), fechaasignacion, 103),
		#convert(varchar(10), fechaseguimiento, 103), convert(varchar(10), fechacierre, 103),
		#convert(varchar(10), fechanoseguimiento, 103), idmediopublicitario,	convert(varchar(100), BlogGUID)
		#from %s where idprospecto = %s
		#""" % (self.dbtable, idprospecto)
		#cursor = r_cn.cursor()
		#cursor.execute(str(sql))
		#row = fetchone(cursor)
		#cursor.close()
		
		#self.GetControl(ID_TEXTCTRLPROSPECTONOMBRE).SetValue(str(row[0]))
		#self.GetControl(ID_TEXTCTRLPROSPECTOTELEFONO).SetValue(str(row[1]))
		#self.GetControl(ID_TEXTCTRLPROSPECTOIMSS).SetValue(str(row[2]))
		
		#self.ObtenerGerentes(ID_CHOICEPROSPECTOGERENTE)
		#self.DespliegaCombo(ID_CHOICEPROSPECTOGERENTE, int(row[3]))
		#filtro = "where Desactivado = %s and gerente = %s" % (0, int(row[3]))
		#self.ObtenerVendedores(filtro, ID_CHOICEPROSPECTOVENDEDOR)
		#self.DespliegaCombo(ID_CHOICEPROSPECTOVENDEDOR, int(row[4]))
		#self.ObtenerMediosPublicitarios(ID_COMBOPROSPECTOMEDIOPUBLICITARIO)
		#self.DespliegaCombo(ID_COMBOPROSPECTOMEDIOPUBLICITARIO, int(row[9]))
		
		#if str(row[5]) == "None": asignacion = ""
		#else: asignacion = str(row[5])
		#if str(row[6]) == "None": seguimiento = ""
		#else: seguimiento = str(row[6])
		#if str(row[7]) == "None": cierre = ""
		#else: cierre = str(row[7])
		#if str(row[8]) == "None": noseguimiento = ""
		#else: noseguimiento = str(row[8])
		#self.GetControl(ID_TEXTCTRLPROSPECTOFECHAASIGNACION).SetValue(asignacion)
		#self.GetControl(ID_TEXTCTRLPROSPECTOFECHASEGUIMIENTO).SetValue(seguimiento)
		#self.GetControl(ID_TEXTCTRLPROSPECTOFECHACIERRE).SetValue(cierre)
		#self.GetControl(ID_TEXTCTRLPROSPECTOFECHANOSEGUIMIENTO).SetValue(noseguimiento)
		
		#self.BlogGUID = str(row[10])
		
		#for x in ("NOMBRE,TELEFONO,IMSS,GERENTE,VENDEDOR,MEDIOPUBLICITARIO," \
				  #"FECHAASIGNACION,FECHACIERRE,FECHASEGUIMIENTO,FECHANOSEGUIMIENTO").split(","):
			#if x in ("GERENTE, VENDEDOR"):
				#key = eval("ID_CHOICEPROSPECTO%s" % x)
				#self.originales[key] = self.GetControl(key).GetLabel()
			#elif x == "MEDIOPUBLICITARIO":
				#key = eval("ID_COMBOPROSPECTO%s" % x)
				#try:
					#self.originales[key] = self.GetControl(key).GetValue()
				#except:
					#self.originales[key] = self.GetControl(key).GetStringSelection()
			#else:
				#key = eval("ID_TEXTCTRLPROSPECTO%s" % x)
				#self.originales[key] = self.GetControl(key).GetValue()
		
		#self.FillingARecord = False
		##self.GetControl(ID_BUTTONMOVTOBANCOAPLICAR).Enable(False)
		##self.GetControl(ID_BUTTONMOVTOBANCOAGREGAR).Enable(True)
		#return True

class GixConteoMediosPublicitarios(wx.Frame, GixBase):
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize,
	             style = wx.DEFAULT_FRAME_STYLE, usuario = None ):
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		self.SetSize(wx.Size(950, 600))
		panel = wx.Panel( self, -1 )
    		sizer = wx.BoxSizer(wx.VERTICAL)
    		self.listctrl = wx.ListCtrl(panel, -1, wx.DefaultPosition, [870,520],
		                                style = wx.LC_REPORT | wx.BORDER_NONE | wx.LC_SORT_ASCENDING | wx.LC_VRULES)
		self.listctrl.SetFont(wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL))

		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnLCtrl,  self.listctrl)
		self.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.OnRightClick,  self.listctrl)

		sizer.Add(self.listctrl, flag = wx.EXPAND)
    		panel.SetSizer( sizer )
		self.popupmenu = wx.Menu()
		self.Bind(wx.EVT_MENU, self.OnIncrementa, self.popupmenu.Append(-1, "Incrementa estadistica para este medio"))
		self.Bind(wx.EVT_MENU, self.OnRefrescar, self.popupmenu.Append(-1, "Refrescar Vista"))
		menu = wx.Menu()
		salir = menu.Append(-1, "Salir")
		self.Bind(wx.EVT_MENU, self.OnQuit, salir)
		mb = wx.MenuBar()
	
		mb.Append(menu, "Archivo")
		self.SetMenuBar(mb)
		wx.EVT_CLOSE( self, self.OnQuit)
		self.BuildListCtrl()

	def OnQuit(self,event):
		self.Destroy()

	def OnLCtrl(self,event):
		self.medio = self.listctrl.GetItem( event.m_itemIndex,1).GetText()
		
	def OnRefrescar(self,event):
		self.BuildListCtrl()

	def OnIncrementa(self,event):
		#d = dict( medio_publicitario = int(self.medio))
		#req = dict( request = "mediomovimiento", user = "any", source = "cliente3", args = d )
		#rkey = setParametersInMemcache(req, FORCETEST)
		#sleep(1)
		
		sql = "insert into gixmediosmovimientos (fkmediopublicitario) values (%s)" % int(self.medio)
		transicion, trash = self.QueryUpdateRecord(sql)
		if not transicion:
			Mensajes().Info(self, u"� Problemas al agregar conteo de medio publicitario !\n%s" % sql, u"Atenci�n")
		
		self.BuildListCtrl()

	def OnRightClick(self,event):
		self.PopupMenu(self.popupmenu)

	def BuildListCtrl(self):
		try:
      			self.listctrl.ClearAll()
    		except:
      			pass
    		bg1 = wx.Colour( 239, 235, 239 )
    		bg2 = wx.Colour( 229, 195, 135 ) 
		
    		title = u"No.,Medio,Descripcion,Estatus,Conteo"
		colAlign = ("wx.LIST_FORMAT_RIGHT","wx.LIST_FORMAT_CENTER","wx.LIST_FORMAT_LEFT","wx.LIST_FORMAT_CENTER","wx.LIST_FORMAT_RIGHT")
    		for i, colTitle in enumerate(title.split(",")):
      			self.listctrl.InsertColumn(i, colTitle, eval(colAlign[i]))

		y = 0
		sql = """
		select a.idmediopublicitario as idmediopublicitario, a.descripcion as descripcion,
		a.estatus as estatus, isnull(b.suma,0) as suma from gixmediospublicitarios a left join 
		(select fkmediopublicitario, count(*) as suma from gixmediosmovimientos group by fkmediopublicitario) b
		 on a.idmediopublicitario = b.fkmediopublicitario where a.estatus = 'A' order by a.descripcion
		"""
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for r in rows:
				y += 1
				i = self.listctrl.InsertStringItem(sys.maxint, "  %04d" % y )
				bgcolor = bg1
				if i % 2 == 0:
					bgcolor = bg2
	 
				self.listctrl.SetItemBackgroundColour( i, bgcolor)
				try:
					self.listctrl.SetStringItem(i, 1, str(r[0]))
					self.listctrl.SetStringItem(i, 2, str(r[1]))
					self.listctrl.SetStringItem(i, 3, str(r[2]))
					self.listctrl.SetStringItem(i, 4, str(r[3]))
				except:
					pass

		for i in (2,):
      			self.listctrl.SetColumnWidth(i, wx.LIST_AUTOSIZE)

class GixVentasProspectosConsulta(wx.Frame, GixBase):
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize,
	             style = wx.DEFAULT_FRAME_STYLE, usuario = None ):
	
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		self.usuario = usuario
		self.limitedias = 41   # 126 versi�n original a 2 ciclos
		self.sortoptions = {0:("p.idprospecto asc",
		                       "p.idprospecto desc", "desc", ""),
		                    1:("p.apellidopaterno1 asc, p.apellidomaterno1 asc, p.nombre1 asc",
		                       "p.apellidopaterno1 desc, p.apellidomaterno1 desc, p.nombre1 desc", "asc", "< "),
		                    2:("p.apellidomaterno1 asc, p.nombre1 asc, p.apellidopaterno1 asc",
		                       "p.apellidomaterno1 desc, p.nombre1 desc, p.apellidopaterno1 desc", "desc", ""),
		                    3:("p.nombre1 asc, p.apellidopaterno1 asc, p.apellidomaterno1 asc",
		                       "p.nombre1 desc, p.apellidopaterno1 desc, p.apellidomaterno1 desc", "desc", ""),
		                    4:("p.afiliacionimss asc",
		                       "p.afiliacionimss desc", "desc", ""),
		                    5:("v.nombre asc, p.apellidopaterno1 asc, p.apellidomaterno1 asc, p.nombre1 asc",
		                       "v.nombre desc, p.apellidopaterno1 desc, p.apellidomaterno1 desc, p.nombre1 desc", "desc", ""),
		                    6:("g.nombre asc",
		                       "g.nombre desc", "desc", ""),
		                    7:("p.nombre asc",
		                       "p.nombre desc", "desc", "")}
		self.sortcol, self.prevcol = 1,1
		self.sortgrid = self.sortoptions[1][0]
		panel = wx.Panel(self, -1)
		ProspectoVtasFuncion(panel, True, True)
		anchos = [-1,190]
		self.CreateStatusBar(2)
		self.SetStatusWidths(anchos)
		self.SetStatusText(u"Ventas", 0)
		self.SetStatusText(u"Consulta de Prospectos", 1)
		
		wx.EVT_CLOSE(self, lambda _: self.Destroy())
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearch, id = ID_SEARCHCTRLPROSPECTOVTASPROSPECTOFILTRO)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnClean, id = ID_SEARCHCTRLPROSPECTOVTASPROSPECTOFILTRO)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearch, id = ID_SEARCHCTRLPROSPECTOVTASPROSPECTOFILTRO)
		self.GetControl(ID_SEARCHCTRLPROSPECTOVTASPROSPECTOFILTRO).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearch, id = ID_SEARCHCTRLPROSPECTOVTASIMSSFILTRO)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnClean, id = ID_SEARCHCTRLPROSPECTOVTASIMSSFILTRO)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearch, id = ID_SEARCHCTRLPROSPECTOVTASIMSSFILTRO)
		self.GetControl(ID_SEARCHCTRLPROSPECTOVTASIMSSFILTRO).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearch, id = ID_SEARCHCTRLPROSPECTOVTASPATERNOFILTRO)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnClean, id = ID_SEARCHCTRLPROSPECTOVTASPATERNOFILTRO)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearch, id = ID_SEARCHCTRLPROSPECTOVTASPATERNOFILTRO)
		self.GetControl(ID_SEARCHCTRLPROSPECTOVTASPATERNOFILTRO).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearch, id = ID_SEARCHCTRLPROSPECTOVTASMATERNOFILTRO)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnClean, id = ID_SEARCHCTRLPROSPECTOVTASMATERNOFILTRO)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearch, id = ID_SEARCHCTRLPROSPECTOVTASMATERNOFILTRO)
		self.GetControl(ID_SEARCHCTRLPROSPECTOVTASMATERNOFILTRO).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearch, id = ID_SEARCHCTRLPROSPECTOVTASNOMBREFILTRO)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnClean, id = ID_SEARCHCTRLPROSPECTOVTASNOMBREFILTRO)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearch, id = ID_SEARCHCTRLPROSPECTOVTASNOMBREFILTRO)
		self.GetControl(ID_SEARCHCTRLPROSPECTOVTASNOMBREFILTRO).ShowCancelButton(True)
		wx.EVT_BUTTON(self, ID_BUTTONPROSPECTOVTASREFRESCARFILTRO, self.OnDoSearch)
		
		self.grid = self.GetControl(ID_GRIDPROSPECTOVTAS)
		self.grid.Bind(gridlib.EVT_GRID_LABEL_LEFT_CLICK, self.OnGridSortChange)
		self.grid.SetColLabelSize(40)
		self.grid.SetRowLabelSize(0)
		self.GetControl(ID_TEXTPROSPECTOVTASMENSAJEGRID).Show(False)
		self.GetControl(ID_SEARCHCTRLPROSPECTOVTASPATERNOFILTRO).SetFocus()
		
	def OnGridSortChange(self, evt):
		self.sortcol = evt.GetCol()
		if self.sortoptions[self.sortcol][2] == "desc":
			self.sortgrid = self.sortoptions[self.sortcol][0]
			self.sortoptions[self.sortcol] = (self.sortoptions[self.sortcol][0],
			                                  self.sortoptions[self.sortcol][1], "asc", "< ")
		else:
			self.sortgrid = self.sortoptions[self.sortcol][1]
			self.sortoptions[self.sortcol] = (self.sortoptions[self.sortcol][0],
			                                  self.sortoptions[self.sortcol][1], "desc", "> ")
		if self.prevcol != self.sortcol:
			self.sortoptions[self.prevcol] = (self.sortoptions[self.prevcol][0],
			                                  self.sortoptions[self.prevcol][1],
			                                  self.sortoptions[self.prevcol][2], "")
		self.FillGridCtrl()
		self.prevcol = self.sortcol
			
	def OnDoSearch(self, evt):
		self.FillGridCtrl()

	def OnClean(self, evt):
		ctrlid = evt.GetId()
		self.GetControl(ctrlid).SetValue("")

	def GetString(self, dato):
		try:
			valor = dato.encode("iso8859-1")
		except:
			try:
				valor = str(dato)
			except:
				valor = dato
				
		return valor
		
	def SetString(self, dato):
		try:
			valor = dato.decode("iso8859-1")
		except:
			try:
				valor = str(dato)
			except:
				valor = dato
				
		return valor
		
	def FillGridCtrl(self):
		wx.BeginBusyCursor()
		self.sqlfiltro = ""
		wild = "%%"
		
		nombreprospecto = self.GetControl(ID_SEARCHCTRLPROSPECTOVTASPROSPECTOFILTRO).GetValue()
		if nombreprospecto:
			aux1 = nombreprospecto.encode("iso8859-1")
			name = aux1.replace(" ", "")
			self.sqlfiltro = "(replace(p.nombre,' ','')) like '%s%s%s'" % (wild, name, wild)
				
		afiliacionimss = self.GetControl(ID_SEARCHCTRLPROSPECTOVTASIMSSFILTRO).GetValue()
		if afiliacionimss:
			if self.sqlfiltro:
				self.sqlfiltro += " and p.afiliacionimss like '%s%s%s'" % (wild, afiliacionimss, wild)
			else:
				self.sqlfiltro = "p.afiliacionimss like '%s%s%s'" % (wild, afiliacionimss, wild)
				
		apellidopaterno = self.GetControl(ID_SEARCHCTRLPROSPECTOVTASPATERNOFILTRO).GetValue()
		if apellidopaterno:
			if self.sqlfiltro:
				self.sqlfiltro += " and p.apellidopaterno1 like '%s%s%s'" % (wild, apellidopaterno, wild)
			else:
				self.sqlfiltro = "p.apellidopaterno1 like '%s%s%s'" % (wild, apellidopaterno, wild)
				
		apellidomaterno = self.GetControl(ID_SEARCHCTRLPROSPECTOVTASMATERNOFILTRO).GetValue()
		if apellidomaterno:
			if self.sqlfiltro:
				self.sqlfiltro += " and p.apellidomaterno1 like '%s%s%s'" % (wild, apellidomaterno, wild)
			else:
				self.sqlfiltro = "p.apellidomaterno1 like '%s%s%s'" % (wild, apellidomaterno, wild)
				
		nombre = self.GetControl(ID_SEARCHCTRLPROSPECTOVTASNOMBREFILTRO).GetValue()
		if nombre:
			if self.sqlfiltro:
				self.sqlfiltro += " and p.nombre1 like '%s%s%s'" % (wild, nombre, wild)
			else:
				self.sqlfiltro = "p.nombre1 like '%s%s%s'" % (wild, nombre, wild)
				
		if self.sqlfiltro:
			self.sqlfiltro = """
			where %s and p.congelado = 0 and datediff(day, p.fechaasignacion, getdate()) < %s and p.cuenta = 0
			and v.desactivado = 0
			""" % (self.sqlfiltro, self.limitedias)
		else:
			self.sqlfiltro = """
			where p.congelado = 0 and datediff(day, p.fechaasignacion, getdate()) < %s and p.cuenta = 0
			and v.desactivado = 0
			""" % self.limitedias
			
		sql = """
		select p.idprospecto, rtrim(ltrim(p.apellidopaterno1)), rtrim(ltrim(p.apellidomaterno1)),
		rtrim(ltrim(p.nombre1)), p.afiliacionimss, v.nombre, g.nombre, p.nombre,
		datediff(day, p.fechaasignacion, getdate())
		from gixprospectos p join VENDEDOR v on v.codigo = p.idvendedor
		join gerentesventas g on g.codigo = v.gerente
		%s order by %s
		""" % (self.sqlfiltro, self.sortgrid)
		metapiece = ((50, u"%sId" % self.sortoptions[0][3], wx.ALIGN_RIGHT),
		             (150, u"%sApellido Paterno" % self.sortoptions[1][3]),
		             (150, u"%sApellido Materno" % self.sortoptions[2][3]),
		             (150, u"%sNombre" % self.sortoptions[3][3]),
		             (80, u"%sNo. IMSS" % self.sortoptions[4][3], wx.ALIGN_CENTER),
		             (250, u"%sVendedor" % self.sortoptions[5][3]),
		             (250, u"%sGerente" % self.sortoptions[6][3]),
		             (250, u"%sNombre Formato Anterior" % self.sortoptions[7][3]))
		elements = len(metapiece)
		filas = self.grid.GetNumberRows()
		cols = self.grid.GetNumberCols()
		if filas: self.grid.DeleteRows(0, filas)
		if cols: self.grid.DeleteCols(0, cols)
		sqlx = sql.replace('\t', ' ')
		sql = sqlx.replace('\n', ' ')
		cu = r_cn.cursor()
		cu.execute(self.GetString(sql))
		rows = fetchall(cu)
		cu.close()
		fila = 0
		if rows:
			self.grid.InsertRows(0, 1)
			self.grid.InsertCols(0, elements)
			for colindex, metacols in enumerate(metapiece):
				self.grid.SetColSize(colindex, metacols[0])
				self.grid.SetColLabelValue(colindex, metacols[1])
			self.grid.ForceRefresh()
			if len(rows) > 1:
				self.grid.AppendRows(len(rows) - 1)
				
			for fila, row in enumerate(rows):
				for col in range(0, colindex + 1):
					if fila % 2 == 0:
						self.grid.SetCellBackgroundColour(fila, col, wx.NamedColour("LIGHT BLUE"))
						
					self.grid.SetReadOnly(fila, col, True)
					
					if len(metapiece[col]) in (3,4):
						col_selected = metapiece[col]
						hAlignmnt = col_selected[2]
						self.grid.SetCellAlignment(fila, col, hAlignmnt, wx.ALIGN_CENTER)
						
					funcion = ""
					if len(metapiece[col]) == 4:
						funcion = col_selected[3]
	
					if row[col] == None:
						self.grid.SetCellValue(fila, col, '')
					else:
						try:
							if funcion == "":
								valor = self.SetString(row[col])
								self.grid.SetCellValue(fila, col, valor)
							else:
								try:
									lafuncion = funcion % row[col]
									self.grid.SetCellValue(fila, col, eval(lafuncion))
								except:
									self.grid.SetCellValue(fila,col, '**')
						except:
							self.grid.SetCellValue(fila, col, self.SetString(row[col]))
							
			self.GetControl(ID_TEXTPROSPECTOVTASMENSAJEGRID).Show(True)
			self.grid.AutoSizeColumns()
			self.grid.SetGridCursor(0, 10)
			self.grid.MakeCellVisible(0, 10)
			self.grid.SetFocus()
		else:
			self.GetControl(ID_TEXTPROSPECTOVTASMENSAJEGRID).Show(False)
			
		wx.EndBusyCursor()
		
class NuevoProspectoAgregado(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Tome Nota del Nuevo Id", pos = wx.DefaultPosition, size = wx.DefaultSize,
		     style = wx.DEFAULT_DIALOG_STYLE, prospecto = "", idprospecto = 0):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		ProspectosVentasFunc3(self, True)
		self.GetControl(ID_TEXTCTRLPROSPECTOAGREGADOPROSPECTO).SetValue(self.GetString(prospecto))
		self.GetControl(ID_TEXTCTRLPROSPECTOAGREGADOID).SetValue(self.GetString(idprospecto))
		wx.EVT_CLOSE(self, lambda _: self.Destroy())
		wx.EVT_BUTTON(self, ID_BUTTONPROSPECTOAGREGADOCONTINUAR, lambda _: self.Destroy())
		
	def GetString(self, dato):
		try:
			valor = dato.encode("iso8859-1")
		except:
			try:
				valor = str(dato)
			except:
				valor = dato
				
		return valor
	
class GixVentasProspectosBueno(wx.Frame, GixBase, GixBaseListCtrl):
	coloreable = "ID_TEXTCTRLPROSPECTOID"
	coloreableeditable = False
	ctt = [coloreable, "ID_TEXTCTRLPROSPECTONOMBRE1", "ID_TEXTCTRLPROSPECTOAPELLIDOPATERNO1", "ID_TEXTCTRLPROSPECTOAPELLIDOMATERNO1",
	       "ID_TEXTCTRLPROSPECTOIMSS", "ID_TEXTCTRLPROSPECTOFECHANACIMIENTO",
	       "ID_TEXTCTRLPROSPECTORFC", "ID_TEXTCTRLPROSPECTOCURP", "ID_TEXTCTRLPROSPECTOTELEFONOCASA", "ID_TEXTCTRLPROSPECTOTELEFONOOFICINA",
	       "ID_TEXTCTRLPROSPECTOEXTENSIONOFICINA", "ID_TEXTCTRLPROSPECTOTELEFONOCELULAR",
	       "ID_TEXTCTRLPROSPECTOFECHAALTA", "ID_TEXTCTRLPROSPECTOFECHACIERRE", "ID_TEXTCTRLPROSPECTOLUGARTRABAJO", "ID_TEXTCTRLPROSPECTOCUENTA",
	       "ID_TEXTCTRLPROSPECTOMEDIOPUBLICITARIOSUGERIDO"]
	activecontrolafternewrecord = ID_TEXTCTRLPROSPECTOAPELLIDOPATERNO1
	listctrl = ID_LISTCTRLPROSPECTO
	dbtable  = "gixprospectos"
	controles_tipo_txt = dict(zip(ctt,map(eval,ctt)))
	DicDatesAndTxt = {ID_BITMAPBUTTONPROSPECTOELEGIRFECHAINICIALFILTRO : ID_TEXTCTRLPROSPECTOFECHAINICIALFILTRO,
			  ID_BITMAPBUTTONPROSPECTOELEGIRFECHAFINALFILTRO : ID_TEXTCTRLPROSPECTOFECHAFINALFILTRO,
			  ID_BITMAPBUTTONPROSPECTOELEGIRFECHANACIMIENTO : ID_TEXTCTRLPROSPECTOFECHANACIMIENTO,
			  ID_BITMAPBUTTONPROSPECTOELEGIRFECHAALTA : ID_TEXTCTRLPROSPECTOFECHAALTA}
	
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize,
		     style = wx.DEFAULT_FRAME_STYLE, usuario = None):
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		self.sortoptions = {0:("p.idprospecto asc", "p.idprospecto desc", "desc", ""),
		                    1:("p.apellidopaterno1 asc, p.apellidomaterno1 asc, p.nombre1 asc",
		                       "p.apellidopaterno1 desc, p.apellidomaterno1 desc, p.nombre1 desc", "asc", "< "),
		                    2:("p.apellidomaterno1 asc, p.nombre1 asc, p.apellidopaterno1 asc",
		                       "p.apellidomaterno1 desc, p.nombre1 desc, p.apellidopaterno1 desc", "desc", ""),
		                    3:("p.nombre1 asc, p.apellidopaterno1 asc, p.apellidomaterno1 asc",
		                       "p.nombre1 desc, p.apellidopaterno1 desc, p.apellidomaterno1 desc", "desc", ""),
		                    4:("p.telefonocasa asc", "p.telefonocasa desc", "desc", ""),
		                    5:("p.telefonooficina asc", "p.telefonooficina desc", "desc", ""),
		                    6:("p.telefonocelular asc", "p.telefonocelular desc", "desc", ""),
		                    7:("p.nombre asc", "p.nombre desc", "desc", ""),
		                    8:("p.fechaasignacion asc ", "p.fechaasignacion desc", "desc", ""),
		                    9:("p.fechacierre asc", "p.fechacierre desc", "desc", ""),
		                    10:("p.telefonos asc", "p.telefonos desc", "desc", ""),
		                    11:("p.afiliacionimss asc", "p.afiliacionimss desc", "desc", ""),
		                    12:("v.nombre asc", "v.nombre desc", "desc", ""),
		                    13:("g.nombre asc", "g.nombre desc", "desc", ""),
		                    14:("m.descripcion asc", "m.descripcion desc", "desc", "")}
		self.sortcol, self.prevcol = 1,1
		self.sortlistctrl = self.sortoptions[1][0]
		self.InitialFlags(prospectos = True)
		self.usuario = usuario
		self.ObtenerDerechosUsuarios()
		self.editable = 1
		self.idbanco = -1
		self.ctrlindex = 0
		self.idrefmovto = 0
		self.currentitem = ""
		self.detail = False
		self.exitdetail = False
		self.selecteditems = []
		self.lugardetrabajo = ""
		self.panel = wx.Panel(self, -1)
		ProspectosVentasFuncion(self.panel, True, True)
		self.ObtenerGerentes(); self.ObtenerVendedores(); self.ObtenerMediosPublicitarios()
		self.SetColoreable(False)
		self.originales = {}
		for v in self.controles_tipo_txt.itervalues():
			self.Bind(wx.EVT_TEXT, self.OnText, self.GetControl(v))
			self.originales[v] = ""
		self.Bind(wx.EVT_TEXT, self.OnText, self.GetControl(ID_COMBOPROSPECTOMEDIOPUBLICITARIO))
		self.originales[ID_COMBOPROSPECTOMEDIOPUBLICITARIO] = ""
		for v in self.DicDatesAndTxt.keys():
			self.Bind(wx.EVT_BUTTON, self.OnFechaButton, id = v )
		for v in (ID_CHOICEPROSPECTOGERENTE, ID_CHOICEPROSPECTOVENDEDOR):
			wx.EVT_CHOICE(self, v, self.OnChoiceControl)
			self.originales[v] = ""
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONPROSPECTOLIMPIARFECHANACIMIENTO, self.OnLimpiarFechaNacimiento)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONPROSPECTOLIMPIARFECHAALTA, self.OnLimpiarFechaAlta)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONPROSPECTOLUGARDETRABAJO, self.OnUltimoLugarDeTrabajo)
		
		wx.EVT_BUTTON(self, ID_BUTTONPROSPECTOACEPTARFORM, self.OnAplicarDetalle)
		wx.EVT_BUTTON(self, ID_BUTTONPROSPECTOCANCELARFORM, self.OnSalirDetalle)
		
		self.GetControl(ID_CHOICEPROSPECTOCUENTAFILTRO).SetSelection(0)
		self.GetControl(ID_CHOICEPROSPECTOTIPOFECHAFILTRO).SetSelection(1)
		self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).SetSelection(SetChoiceIndex())
		self.GetControl(ID_CHOICEPROSPECTOVENDEDORFILTRO).SetSelection(SetChoiceIndex())
		self.GetControl(ID_CHOICEPROSPECTOMEDIOPUBLICITARIOFILTRO).SetSelection(SetChoiceIndex())
		
		self.addlistctrlbtn = ID_BUTTONPROSPECTOAGREGARLISTCTRL
		self.editlistctrlbtn = ID_BUTTONPROSPECTOEDITARLISTCTRL
		self.exitlistctrlbtn = ID_BUTTONPROSPECTOCERRARLISTCTRL
		wx.EVT_BUTTON(self, ID_BUTTONPROSPECTOAGREGARLISTCTRL, self.OnNewRecord)
		wx.EVT_BUTTON(self, ID_BUTTONPROSPECTOEDITARLISTCTRL, self.OnEditRecord)
		wx.EVT_BUTTON(self, ID_BUTTONPROSPECTOCERRARLISTCTRL, self.OnExitRecordCtrl)
		wx.EVT_BUTTON(self, ID_BUTTONPROSPECTOREFRESCARLISTCTRL, self.OnRefrescar)
		wx.EVT_BUTTON(self, ID_BUTTONPROSPECTOEXCELLISTCTRL, self.OnPrintExcel)
		self.GetControl(ID_BUTTONPROSPECTOEXCELLISTCTRL).Show(False)
		
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnLCtrlDeselected, id = self.listctrl)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnLCtrl, id = self.listctrl)
		self.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.OnRightClick, id = self.listctrl)
		self.Bind(wx.EVT_LIST_COL_CLICK, self.OnClasificarProspectos, id = self.listctrl)
		
		anchos = [-1,80]
		self.CreateStatusBar(2)
		self.SetStatusWidths(anchos)
		self.SetStatusText(u"Ventas", 0)
		self.SetStatusText(u"Prospectos", 1)
		
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearch, id = ID_SEARCHCTRLPROSPECTOIDFILTRO)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnClean, id = ID_SEARCHCTRLPROSPECTOIDFILTRO)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearch, id = ID_SEARCHCTRLPROSPECTOIDFILTRO)
		self.GetControl(ID_SEARCHCTRLPROSPECTOIDFILTRO).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearch, id = ID_SEARCHCTRLPROSPECTOAPELLIDOPATERNOFILTRO)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnClean, id = ID_SEARCHCTRLPROSPECTOAPELLIDOPATERNOFILTRO)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearch, id = ID_SEARCHCTRLPROSPECTOAPELLIDOPATERNOFILTRO)
		self.GetControl(ID_SEARCHCTRLPROSPECTOAPELLIDOPATERNOFILTRO).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearch, id = ID_SEARCHCTRLPROSPECTOAPELLIDOMATERNOFILTRO)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnClean, id = ID_SEARCHCTRLPROSPECTOAPELLIDOMATERNOFILTRO)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearch, id = ID_SEARCHCTRLPROSPECTOAPELLIDOMATERNOFILTRO)
		self.GetControl(ID_SEARCHCTRLPROSPECTOAPELLIDOMATERNOFILTRO).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearch, id = ID_SEARCHCTRLPROSPECTONOMBREFILTRO)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnClean, id = ID_SEARCHCTRLPROSPECTONOMBREFILTRO)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearch, id = ID_SEARCHCTRLPROSPECTONOMBREFILTRO)
		self.GetControl(ID_SEARCHCTRLPROSPECTONOMBREFILTRO).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearch, id = ID_SEARCHCTRLPROSPECTONOMBREANTERIORFILTRO)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnClean, id = ID_SEARCHCTRLPROSPECTONOMBREANTERIORFILTRO)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearch, id = ID_SEARCHCTRLPROSPECTONOMBREANTERIORFILTRO)
		self.GetControl(ID_SEARCHCTRLPROSPECTONOMBREANTERIORFILTRO).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearch, id = ID_SEARCHCTRLPROSPECTOAFILIACIONIMSSFILTRO)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnClean, id = ID_SEARCHCTRLPROSPECTOAFILIACIONIMSSFILTRO)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearch, id = ID_SEARCHCTRLPROSPECTOAFILIACIONIMSSFILTRO)
		self.GetControl(ID_SEARCHCTRLPROSPECTOAFILIACIONIMSSFILTRO).ShowCancelButton(True)

		wx.EVT_CHOICE(self, ID_CHOICEPROSPECTOCUENTAFILTRO, self.OnChoiceFiltro)
		wx.EVT_CHOICE(self, ID_CHOICEPROSPECTOTIPOFECHAFILTRO, self.OnChoiceFiltro)
		wx.EVT_CHOICE(self, ID_CHOICEPROSPECTOVENDEDORFILTRO, self.OnChoiceFiltro)
		wx.EVT_CHOICE(self, ID_CHOICEPROSPECTOMEDIOPUBLICITARIOFILTRO, self.OnChoiceFiltro)
		self.Bind(wx.EVT_TEXT, self.OnFechaFiltro, id = ID_TEXTCTRLPROSPECTOFECHAINICIALFILTRO)
		self.Bind(wx.EVT_TEXT, self.OnFechaFiltro, id = ID_TEXTCTRLPROSPECTOFECHAFINALFILTRO)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONPROSPECTOLIMPIARFECHAINICIALFILTRO, self.OnLimpiarFechaFiltro)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONPROSPECTOLIMPIARFECHAFINALFILTRO, self.OnLimpiarFechaFinalFiltro)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONPROSPECTOLIMPIARGERENTEFITRO, self.OnLimpiarGerenteFiltro)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONPROSPECTOLIMPIARVENDEDORFILTRO, self.OnLimpiarVendedorFiltro)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONPROSPECTOLIMPIARMEDIOPUBLICITARIOFILTRO, self.OnLimpiarMedioPublicitarioFiltro)
		
		wx.EVT_CLOSE(self, self.OnExit)
		
		self.GetControl(ID_TEXTCTRLPROSPECTOIMSS).SetMaxLength(11)
		if self.usuario not in self.specialuser:
			self.GetControl(ID_BITMAPBUTTONPROSPECTOELEGIRFECHAALTA).Show(False)
			self.GetControl(ID_BITMAPBUTTONPROSPECTOLIMPIARFECHAALTA).Show(False)
		if self.usuario not in self.cashuser:
			self.GetControl(ID_CHECKBOXPROSPECTOCONTADO).Enable(False)
			self.GetControl(ID_CHECKBOXPROSPECTOHIPOTECARIA).Enable(False)
			
		self.ChangeNoteBook()
		self.GetControl(ID_NOTEBOOKPROSPECTOLISTCTRL).Move(wx.Point(-1, 5))
		self.GetControl(ID_LISTCTRLPROSPECTO).SetFocus()
		self.limitedias = 10000
		if self.usuario in self.usuariorestringido:
			self.limitedias = 41     # 126 este es el limite anterior en el manejo de los 2 ciclos mas 5 dias
			if self.usuario in self.recepcionistas: # or (self.usuario in self.gerentes)
				self.GetControl(ID_BUTTONPROSPECTOAGREGARLISTCTRL).Enable(False)
				self.GetControl(ID_BUTTONPROSPECTOEDITARLISTCTRL).Enable(False)
			if self.usuario in self.gerentes:
				self.GetControl(ID_TEXTPROSPECTOGERENTEFILTRO).Enable(False)
				self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).Enable(False)
				self.GetControl(ID_BITMAPBUTTONPROSPECTOLIMPIARGERENTEFITRO).Enable(False)
				self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).SetSelection(0)
			elif self.usuario in self.vendedores:
				self.GetControl(ID_TEXTPROSPECTOGERENTEFILTRO).Enable(False)
				self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).Enable(False)
				self.GetControl(ID_BITMAPBUTTONPROSPECTOLIMPIARGERENTEFITRO).Enable(False)
				self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).SetSelection(0)
				self.GetControl(ID_TEXTPROSPECTOVENDEDORFILTRO).Enable(False)
				self.GetControl(ID_CHOICEPROSPECTOVENDEDORFILTRO).Enable(False)
				self.GetControl(ID_BITMAPBUTTONPROSPECTOLIMPIARVENDEDORFILTRO).Enable(False)
				self.GetControl(ID_CHOICEPROSPECTOVENDEDORFILTRO).SetSelection(0)
			
			#self.FillListCtrl()
			
		if self.usuario in self.consulta:
			self.GetControl(ID_BUTTONPROSPECTOAGREGARLISTCTRL).Show(False)
			self.GetControl(ID_BUTTONPROSPECTOEDITARLISTCTRL).Show(False)
			self.GetControl(ID_BUTTONPROSPECTOACEPTARFORM).Show(False)
		else:
			self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnEditRecord, id = self.listctrl)

		
		#self.ProcesoX()
		
	def OnExit(self, event):
		if self.detail:
			self.SalirDetalle()
		else:
			self.ExitRecordCtrl()
			
	def OnExitRecordCtrl(self, event):
		self.ExitRecordCtrl()
		
	def ExitRecordCtrl(self):
		self.Destroy()
		
	def ProcesoX(self):
		pass
		#sql = """
		#select p.idprospecto, p.idgerente, p.idvendedor, p.fechaasignacion, isnull(t.idtransicion, 0)
		#from gixprospectos p
		#left join gixprospectostransiciones t on t.fkprospecto = p.idprospecto
		#"""
		#sqlx = sql.replace('\t', ' ')
		#sql = sqlx.replace('\n', ' ')
		#cu = r_cn.cursor()
		#cu.execute(str(sql))
		#rows = fetchall(cu)
		#cu.close()
		#if rows:
			#for row in rows:
				#if int(row[4]) == 0:
					#sql = """
					#insert into gixprospectostransiciones
					#(fkprospecto, fecha, transicion, fkgerente, fkvendedor, ciclo, notas)
					#values (%s, '%s', 'I', %s, %s, 1, 'Alta del prospecto')
					#""" % (int(row[0]), row[3], int(row[1]), int(row[2]))
					#transicion, trash = self.QueryUpdateRecord(sql)
					#if not transicion:
						#Mensajes().Info(self, u"Problemas al insertar transiciones\n%s" % sql, u"Atenci�n")
				#else:
					#sql = """
					#update gixprospectostransiciones set fecha = '%s' where idtransicion = %s
					#""" % (row[3], int(row[4]))
					#transicion, trash = self.QueryUpdateRecord(sql)
					#if not transicion:
						#Mensajes().Info(self, u"Problemas al actualizar transiciones\n%s" % sql, u"Atención")
			
		#return
		
	def SetLogProspecto(self, prospecto = 0, registros = 0):
		idprospecto = int(prospecto)
		sql = ""
		if not registros:
			alavista = self.GetControl(ID_TEXTCTRLPROSPECTOTOTALREGISTROS).GetValue()
			try:
				registros = int(alavista)
			except:
				registros = 0
		if idprospecto:
			sql = """
			insert into gixprospectoslog
			(alavista, usuario, fkprospecto, fkgerente, fkvendedor, nombre1, apellidopaterno1, apellidomaterno1,
			fechadenacimiento, rfc, curp, telefonocasa, telefonooficina, extensionoficina, telefonocelular,
			lugardetrabajo, cuenta, nombre, afiliacionimss, telefonos, fechaasignacion, fechacierre, fechaseguimiento,
			fechanoseguimiento, fkmediopublicitario, mediopublicitariosugerido, congelado, contado, hipotecaria, BlogGUID)
			select %s, '%s', idprospecto, idgerente, idvendedor, nombre1, apellidopaterno1, apellidomaterno1,
			fechadenacimiento, rfc, curp, telefonocasa, telefonooficina, extensionoficina, telefonocelular,
			lugardetrabajo, cuenta, nombre, afiliacionimss, telefonos, fechaasignacion, fechacierre, fechaseguimiento,
			fechanoseguimiento, idmediopublicitario, mediopublicitariosugerido, congelado, contado, hipotecaria, BlogGUID
			from %s where idprospecto = %s
			""" % (registros, self.usuario, self.dbtable, idprospecto)
			todook, trash = self.QueryUpdateRecord(sql)
			if not todook:
				Mensajes().Info(self, u"Problemas al actualizar log (prospectos)\n%s" % sql, u"Atenci�n")
		elif registros:
			sql = """
			insert into gixprospectoslog
			(alavista, usuario, fkprospecto, fkgerente, fkvendedor, nombre1, apellidopaterno1, apellidomaterno1,
			fechadenacimiento, rfc, curp, telefonocasa, telefonooficina, extensionoficina, telefonocelular,
			lugardetrabajo, cuenta, nombre, afiliacionimss, telefonos, fechaasignacion, fechacierre, fechaseguimiento,
			fechanoseguimiento, fkmediopublicitario, mediopublicitariosugerido, congelado, contado, hipotecaria)
			values (%s, '%s', 0, 0, 0, '<<Browser>>', '', '', '', '', '', '', '', '', '', '', 0, '', '', '', '', '', '',
			'', 0, '', 0, 0, 0)
			""" % (registros, self.usuario)
			todook, trash = self.QueryUpdateRecord(sql)
			if not todook:
				Mensajes().Info(self, u"Problemas al actualizar log (registros)\n%s" % sql, u"Atenci�n")
		else:
			pass
			
	def OnClasificarProspectos(self, event):
		self.sortcol = event.GetColumn()
		if self.sortoptions[self.sortcol][2] == "desc":
			self.sortlistctrl = self.sortoptions[self.sortcol][0]
			self.sortoptions[self.sortcol] = (self.sortoptions[self.sortcol][0],
			                                  self.sortoptions[self.sortcol][1], "asc", "< ")
		else:
			self.sortlistctrl = self.sortoptions[self.sortcol][1]
			self.sortoptions[self.sortcol] = (self.sortoptions[self.sortcol][0],
			                                  self.sortoptions[self.sortcol][1], "desc", "> ")
		if self.prevcol != self.sortcol:
			self.sortoptions[self.prevcol] = (self.sortoptions[self.prevcol][0],
			                                  self.sortoptions[self.prevcol][1],
			                                  self.sortoptions[self.prevcol][2], "")
		self.FillListCtrl()
		self.prevcol = self.sortcol
		event.Skip()
		
	def OnUltimoLugarDeTrabajo(self, event):
		if self.lugardetrabajo:
			self.GetControl(ID_TEXTCTRLPROSPECTOLUGARTRABAJO).SetValue(self.lugardetrabajo)
		
	def ChangeNoteBook(self):
		if wx.Platform == '__WXMSW__':
			self.ActiveNoteBook(ID_NOTEBOOKPROSPECTOLISTCTRL, ID_NOTEBOOKPROSPECTOFORM, 993, 680)
		elif wx.Platform == '__WXMAC__':
			self.ActiveNoteBook(ID_NOTEBOOKPROSPECTOLISTCTRL, ID_NOTEBOOKPROSPECTOFORM, 1080, 685)
		else:
			self.ActiveNoteBook(ID_NOTEBOOKPROSPECTOLISTCTRL, ID_NOTEBOOKPROSPECTOFORM, 1080, 698)
			
	def ObtenerDerechosUsuarios(self):
		self.revinculador = ["GMV"] # Revinculador(es) con m�xima autoridad (incluye 5 d�as al final del 1er. ciclo)
		self.specialuser = [] #["JORGE H", "ELIZABETH"] # Pueden modificar la fecha de alta e imponer el n�mero del imss
		self.cashuser = ["JORGE H", "ELIZABETH"] # Pueden asignar prospectos (ventas) de contado e hipotecaria
		self.recepcionistas = {"KARIME":0}
		self.congelador = ["ELIZABETH","EDUARDOFM"]
		self.consulta = ["PAOLA", "LUIS"]
		self.usuariorestringido, self.gerentes, self.vendedores = {}, {}, {}
		
		sql = "select Usuario, fkgerente from Usuarios where fkgerente is not null"
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				if row[1] is not None:
					if int(row[1]) > 0:
						self.gerentes[str(row[0])] = int(row[1])
					
		sql = "select usuario, fkvendedor from gixanip where fkvendedor is not null"
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				if row[1] is not None:
					if int(row[1]) > 0:
						self.vendedores[str(row[0])] = int(row[1])
					
		for dic in (self.gerentes, self.vendedores, self.recepcionistas):
			for key, value in dic.iteritems():
				self.usuariorestringido[key] = value
				
	def ObtenerGerentes(self, idctrl = ID_CHOICEPROSPECTOGERENTEFILTRO):
		condicion = ""; sigue = True
		if self.usuario in self.usuariorestringido:
			if self.usuario not in self.recepcionistas:
				if self.usuario in self.gerentes:
					condicion = "where codigo = %s" % self.usuariorestringido[self.usuario]
				elif self.usuario in self.vendedores:
					sql = "select gerente from VENDEDOR where codigo = %s" % self.usuariorestringido[self.usuario]
					cu = r_cn.cursor()
					cu.execute(str(sql))
					row = fetchone(cu)
					cu.close()
					if row is not None:
						condicion = "where codigo = %s" % int(row[0])
					else:
						sigue = False
				else:
					sigue = False
					
		control = self.GetControl(idctrl)
		control.Enable(False)
		control.Show(False)
		control.Clear()
		
		if sigue:
			sql = """
			select codigo, nombre from gerentesventas %s order by nombre
			""" % condicion
			cu = r_cn.cursor()
			cu.execute(str(sql))
			rows = fetchall(cu)
			cu.close()
			if rows:
				for row in rows:
					control.Append(str(row[1]).decode("iso8859-1"), int(row[0]))
				if control.GetCount() == 1:
					control.SetSelection(0)
			else:
				sigue = False
				
		control.Show(True)
		control.Enable(True)
		self.GetControl(ID_BUTTONPROSPECTOREFRESCARLISTCTRL).Enable(sigue)
		
	def ObtenerVendedores(self, filtro = "", idctrl = ID_CHOICEPROSPECTOVENDEDORFILTRO):
		nombrevendedor = False
		sigue = True
		if self.usuario in self.usuariorestringido:
			if self.usuario not in self.recepcionistas:
				if not filtro or self.usuario in self.vendedores:
					if self.usuario in self.gerentes:
						if idctrl == ID_CHOICEPROSPECTOVENDEDORFILTRO:
							filtro = "where gerente = %s" % self.usuariorestringido[self.usuario]
						else:
							filtro = "where gerente = %s and interno <> 1" % self.usuariorestringido[self.usuario]
					elif self.usuario in self.vendedores:
						gtectrl = self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO)
						inx = gtectrl.GetSelection()
						gerente = gtectrl.GetClientData(inx)
						filtro = "where codigo = %s and gerente = %s" % (self.usuariorestringido[self.usuario], int(gerente))
						nombrevendedor = True
					else:
						sigue = False
					
		control = self.GetControl(idctrl)
		control.Enable(False)
		control.Show(False)
		control.Clear()
		
		if sigue:
			if filtro:
				filtro += " and desactivado <> 1"
			else:
				filtro = "where desactivado <> 1"
			sql = """
			select codigo, nombre from VENDEDOR %s order by nombre
			""" % (filtro)
			cu = r_cn.cursor()
			cu.execute(str(sql))
			rows = fetchall(cu)
			cu.close()
			if rows:
				for row in rows:
					control.Append(str(row[1]).decode("iso8859-1"), int(row[0]))
				if control.GetCount() == 1:
					control.SetSelection(0)
					if nombrevendedor:
						self.SetTitle(u"Ventas/Prospectos  -  Vendedor: %s" % self.GetString(row[1]))
				else:
					self.SetTitle(u"Ventas/Prospectos  -  Usuario: %s" % self.usuario)
			else:
				sigue = False
				
		control.Show(True)
		control.Enable(True)
		self.GetControl(ID_BUTTONPROSPECTOREFRESCARLISTCTRL).Enable(sigue)
		
	def ObtenerMediosPublicitarios(self, id = ID_CHOICEPROSPECTOMEDIOPUBLICITARIOFILTRO):
		control = self.GetControl(id)
		control.Enable(False)
		control.Show(False)
		control.Clear()
		sql = """
		select idmediopublicitario, descripcion from gixmediospublicitarios
		where estatus = 'A' order by descripcion
		"""
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(str(row[1]).decode("iso8859-1"), int(row[0]))
				
			control.SetSelection(SetChoiceIndex())

		control.Show(True)
		control.Enable(True)
		
	def ObtenerFechaDelDia(self):
		sql = "select convert(varchar(10), getdate(), 103)"
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		self.GetControl(ID_TEXTCTRLPROSPECTOFECHAALTA).SetValue("%s" % str(row[0]))
		
	def OnDoSearch(self, evt):
		self.FillListCtrl()

	def OnClean(self, evt):
		ctrlid = evt.GetId()
		self.GetControl(ctrlid).SetValue("")
		self.FillListCtrl()
		
	def OnChoiceControl(self, event):
		id = event.GetId()
		self.ChoiceControl(id)
		if id == ID_CHOICEPROSPECTOGERENTE:
			inx = self.GetControl(id).GetSelection()
			gerente = self.GetControl(id).GetClientData(inx)
			filtro = "where desactivado = %s and gerente = %s" % (0, gerente)
			self.ObtenerVendedores(filtro, ID_CHOICEPROSPECTOVENDEDOR)
			self.ChoiceControl(ID_CHOICEPROSPECTOVENDEDOR)
		
	def ChoiceControl(self, id):
		if not self.FillingARecord:
			if self.GetControl(id).GetLabel() <> self.originales[id]:
				self.GetControl(id).SetBackgroundColour(wx.CYAN)
				self.GetControl(id).Refresh()
				choice = True
			else:
				self.GetControl(id).SetBackgroundColour(wx.WHITE)
				self.GetControl(id).Refresh()
				choice = False
			
			if self.OriginalesDistintos() or choice:
				self.GetControl(ID_BUTTONPROSPECTOACEPTARFORM).Enable(True)
			else:
				self.GetControl(ID_BUTTONPROSPECTOACEPTARFORM).Enable(False)
				
	def GetGerente(self, idgerente):
		sql = "select nombre from gerentesventas where codigo = %s" % idgerente
		cu = r_cn.cursor()
		cu.execute(sql)
		row = fetchone(cu)
		cu.close()
		return self.GetString(row[0])
				
	def OnRevincularProspecto(self, event):
		filtro = ""; continua = True
		inx = self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).GetSelection()
		if inx > -1 and self.usuario not in self.revinculador:
			idgerente = self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).GetClientData(inx)
			filtro = "where gerente = %s and desactivado <> 1 and interno = 1" % idgerente
			nombregte = self.GetGerente(idgerente)
		else:
			lGerenteNombre = []; lGerenteCodigo = []
			sql = "select codigo, nombre from gerentesventas where activo <> 0 order by nombre"
			cursor = r_cn.cursor()
			cursor.execute(sql)
			while True:
				row = fetchone(cursor)
				if row is None:
					break
				lGerenteCodigo.append(int(row[0]))
				lGerenteNombre.append(self.GetStringFromField(row[1]))
				
			cursor.close()
			if len(lGerenteCodigo) > 0:
				inx = wx.GetSingleChoiceIndex("Opciones", u"Elija el Gerente Destino", lGerenteNombre, parent = None)
				if inx > -1:
					idgerente = lGerenteCodigo[inx]
					filtro = "where gerente = %s and desactivado <> 1 and interno = 1" % idgerente
					nombregte = lGerenteNombre[inx]
				else:
					continua = False
			else:
				Mensajes().Info(self, u"� No existen gerentes registrados !", u"Atenci�n")
				continua = False
				
		if continua:
			lVendedorNombre = []; lVendedorCodigo = []
			sql = "select codigo, nombre from VENDEDOR %s order by nombre" % filtro
			cursor = r_cn.cursor()
			cursor.execute(sql)
			while True:
				row = fetchone(cursor)
				if row is None:
					break
				lVendedorCodigo.append(int(row[0]))
				lVendedorNombre.append(self.GetStringFromField(row[1]))
				
			cursor.close()
			if len(lVendedorCodigo) > 0:
				inx = wx.GetSingleChoiceIndex("Opciones", u"Elija el Vendedor Destino", lVendedorNombre, parent = None)
				if inx > -1:
					idvendedor = lVendedorCodigo[inx]
					if Mensajes().YesNo(self, u"Prospecto(s) a revincular: %s\nCantidad de prospectos: %s\n" \
					                    u"Gerente destino: %s\n"
						            u"Vendedor destino: %s\n\n"
						            u"� Desea realmente llevar a cabo la revinculaci�n ?" \
						            % (self.selecteditems, len(self.selecteditems),
					                       nombregte, lVendedorNombre[inx]), u"Confirmaci�n"):
						self.Revincula(idgerente, idvendedor)
						self.FillListCtrl()
			else:
				Mensajes().Info(self, u"� El gerente no tiene asignados vendedores !", u"Atenci�n")
			
	def Revincula(self, idgerente, idvendedor):
		setListForQuery = "idgerente = %s, idvendedor = %s" % (idgerente, idvendedor)
		for idprospecto in self.selecteditems:
			sql = """
			select p.idvendedor, v.nombre, g.nombre, v.vendedorvirtual from %s p
			join VENDEDOR v on v.codigo = p.idvendedor
			join gerentesventas g on g.codigo = p.idgerente
			where p.idprospecto = %s
			""" % (self.dbtable, idprospecto)
			cu = r_cn.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			cu.close()
			
			#if not self.usuario in self.revinculador and not int(row[3]):
				#Mensajes().Info(self, u"� No puede revincular el prospecto %s !\n\n" \
				                #u"No proviene del vendedor virtual." % idprospecto,
				                #u"Atenci�n")
			#else:
			
			wx.BeginBusyCursor()
			codigoorigen = int(row[0]); nombreorigen = self.GetString(row[1]); gerenteorigen = self.GetString(row[2])
			if codigoorigen == idvendedor:
				Mensajes().Info(self, u"Se trato de revincular el prospecto %s\n" \
			                        u"del vendedor %s\nal mismo vendedor.\n\n" \
			                        u"Recuerde que esto no es posible." % (idprospecto, nombreorigen))
			else:
				sql = """
			        update %s set %s where idprospecto = %s
			        """ % (self.dbtable, setListForQuery, idprospecto)
				queTal = self.QueryUpdateRecord(sql)
				if queTal:
					self.SetLogProspecto(idprospecto)
					sql = "select max(ciclo) from gixprospectostransiciones where fkprospecto = %s" % idprospecto
					cu = r_cn.cursor()
					cu.execute(str(sql))
					row = fetchone(cu)
					cu.close()
					ciclo = int(row[0])
					sql = """ 
				        insert into gixprospectostransiciones
				        (fkprospecto, fecha, transicion, fkgerente, fkvendedor, ciclo, notas)
				        values (%s, getdate(), 'R', %s, %s, %s, 'Revinculacion del prospecto')
				        """ % (idprospecto, idgerente, idvendedor, ciclo)
					transicion, trash = self.QueryUpdateRecord(sql)
					if not transicion:
						Mensajes().Info(self, u"Problemas al actualizar transiciones\n%s" % sql, u"Atenci�n")
					sql = """
				        select convert(varchar(100), BlogGUID) from %s where idprospecto = %s
				        """ % (self.dbtable, idprospecto)
					cu = r_cn.cursor()
					cu.execute(str(sql))
					row = fetchone(cu)
					cu.close()
					blogprospecto = str(row[0])
					sql = """
				        insert into Blogs
				        (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension, Estatus)
				        values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
				        """ % (blogprospecto, self.usuario,
				               u"Revinculaci�n proveniente del vendedor: %s, Gerente: %s" % (nombreorigen, gerenteorigen),
				               "", "", "")
					if not self.QueryUpdateRecord(sql):
						Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
					if ciclo == 1:
						sql = """
					        select idtransicion from gixprospectostransiciones
					        where fkprospecto = %s and transicion = 'L' and ciclo = 1
					        """ % idprospecto
						cu = r_cn.cursor()
						cu.execute(str(sql))
						transicion = cu.fetchone()
						cu.close()
						if transicion is not None:
							aviso = "Revinculacion directa por el director comercial (Inicio 2do. ciclo)"
							sql = """
						        insert into gixprospectostransiciones
						        (fkprospecto, fecha, transicion, fkgerente, fkvendedor, ciclo, notas)
						        values (%s, getdate(), 'I', %s, %s, 2, '%s')
						        """ % (idprospecto, idgerente, idvendedor, aviso)
							if not self.QueryUpdateRecord(sql):
								Mensajes().Info(self, u"Problemas al agregar transici�n", u"Atenci�n")
							sql = """
						        insert into Blogs
						        (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario,
						        Extension, Estatus)
						        values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
						        """ % (blogprospecto, self.usuario, aviso, "", "", "")
							if not self.QueryUpdateRecord(sql):
								Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
				
			wx.EndBusyCursor()
		
	def OnCongelarProspecto(self, event):
		if Mensajes().YesNo(self, u"Prospecto(s) a congelar: %s\nCantidad de prospectos: %s\n\n" \
		                    u"� Desea realmente enviar a la congeladora ?" % (self.selecteditems, len(self.selecteditems)),
		                    u"Confirmaci�n"):
			self.Congelar()
			self.FillListCtrl()
			
	def Congelar(self):
		wx.BeginBusyCursor()
		for idprospecto in self.selecteditems:
			sql = """
		        update gixprospectos set congelado = 1 where idprospecto = %s
		        """ % idprospecto
			queTal = self.QueryUpdateRecord(sql)
			if queTal:
				sql = """
			        select convert(varchar(100), BlogGUID) from gixprospectos where idprospecto = %s
			        """ % idprospecto
				cu = r_cn.cursor()
				cu.execute(str(sql))
				row = fetchone(cu)
				cu.close()
				blogprospecto = str(row[0])
				sql = """
			        insert into Blogs
			        (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension, Estatus)
			        values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
			        """ % (blogprospecto, self.usuario, u"Enviado a la congeladora", "", "", "")
				if not self.QueryUpdateRecord(sql):
					Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
					
		wx.EndBusyCursor()
		
	def OnColoresProspecto(self, event):
		#Mensajes().Info(self, u"Azul.- Prospecto en el primer ciclo (primeros 40 d�as).\n" \
		                #u"Amarillo.- Prospecto en el primer ciclo (�ltimos 20 d�as).\n\n" \
		                #u"Verde.- Prospecto en el segundo ciclo (primeros 40 d�as).\n" \
		                #u"Naranja.- Prospecto en el segundo ciclo (�ltimos 20 d�as).\n\n" \
		                #u"Rojo.- Prospecto que pertenece a un vendedor inhabilitado." \
		                #, u"Significado de los Colores")
		
		Mensajes().Info(self, u"El ciclo actual de vida de un prospecto es de 40 d�as.\n\n" \
		                u"Azul.- Prospecto dentro de los primeros 35 d�as.\n" \
		                u"Amarillo.- Prospecto en los �ltimos 5 d�as de su ciclo.\n\n" \
		                u"Verde.- Prospecto m�s de los 40 d�as (cierre).\n" \
		                u"Rojo.- Prospecto que pertenece a un vendedor inhabilitado." \
		                , u"Significado de los Colores")

	def OnHistoriaCiclo(self, event):
		goal = ((90, u"Fecha"), (300, u"Transici�n"), (100, u"Vendedor"), (100, u"Gerente"))
		query = """
		select convert(varchar(10), t.fecha, 103), t.notas, v.nombre, g.nombre
		from gixprospectostransiciones t
		join gerentesventas g on g.codigo = t.fkgerente
		join VENDEDOR v on v.codigo = t.fkvendedor
		where fkprospecto = %s order by t.fecha desc
		""" % int(self.fkprospecto)
		title = u"Historia del Ciclo del %s %s" % (self.idtitleblog, self.idregistryblog)
		table = "gixprospectostransiciones"
		frame = GixFrameCatalogo(self, -1, title, wx.Point(20,20), wx.Size(800,600), 
					 wx.DEFAULT_FRAME_STYLE, None, None, None, table, goal, query,
					 gridsize = [680,350], color = "AQUAMARINE")
		frame.Centre(wx.BOTH)
		frame.Show(True)
		
	def OnRightClick(self, event):
		self.fkprospecto = self.GetControl(ID_TEXTCTRLPROSPECTOID).GetValue()
		idregistryblog = "%s " % self.fkprospecto
		for id in (ID_TEXTCTRLPROSPECTOAPELLIDOPATERNO1, " ", ID_TEXTCTRLPROSPECTOAPELLIDOMATERNO1, ", ", ID_TEXTCTRLPROSPECTONOMBRE1):
			if str(id).isdigit():
				idregistryblog += self.GetControl(id).GetValue().strip()
			else:
				idregistryblog += id
		idtitleblog = "Prospecto"
		consulta = False
		if self.usuario in self.consulta:
			consulta = True
		self.OpenBlogPopupMenu(idregistryblog, idtitleblog, consulta)

	def ActiveNoteBook(self, nbtrue, nbfalse, width, height):
		#self.GetControl(nbtrue).Show(False)
		self.GetControl(nbfalse).Show(False)
		self.SetSize(wx.Size(width, height))
		self.CentreOnScreen()
		self.GetControl(nbtrue).Show(True)
	
	def OnLimpiarFechaNacimiento(self, event):
		self.GetControl(ID_TEXTCTRLPROSPECTOFECHANACIMIENTO).SetValue("")
		
	def OnLimpiarFechaAlta(self, event):
		self.GetControl(ID_TEXTCTRLPROSPECTOFECHAALTA).SetValue("")
		
	def OnLimpiarFechaFiltro(self, event):
		self.GetControl(ID_TEXTCTRLPROSPECTOFECHAINICIALFILTRO).SetValue("")
		self.GetControl(ID_TEXTCTRLPROSPECTOFECHAFINALFILTRO).SetValue("")
	
	def OnLimpiarFechaFinalFiltro(self, event):
		self.GetControl(ID_TEXTCTRLPROSPECTOFECHAFINALFILTRO).SetValue("")
		
	def OnLimpiarGerenteFiltro(self, event):
		self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).SetSelection(SetChoiceIndex())
		
	def OnLimpiarVendedorFiltro(self, event):
		self.GetControl(ID_CHOICEPROSPECTOVENDEDORFILTRO).SetSelection(SetChoiceIndex())
		self.RefrescoCondicional()
		
	def OnLimpiarMedioPublicitarioFiltro(self, event):
		self.GetControl(ID_CHOICEPROSPECTOMEDIOPUBLICITARIOFILTRO).SetSelection(SetChoiceIndex())
		self.RefrescoCondicional()
		
	def RevisaProspectoUniversal( self, afiliacionimss ):
		sql = """ select top 1 pt.fkprospecto, pt.fkgerente, pt.fkvendedor
		from gixprospectostransiciones pt join gixprospectos p on pt.fkprospecto = p.idprospecto
		join vendedor v on pt.fkvendedor = v.codigo
		where p.cuenta = 0 and p.congelado = 0
		and p.afiliacionimss = '%s'
		order by pt.idtransicion desc
		""" % ( afiliacionimss, )
		cu = r_cn.cursor()
		cu.execute ( str(sql) )
		gerente, vendedor = 0, 0
		for row in fetchall(cu):
			gerente = row[1]
			vendedor = row[2]
		cu.close()
		if gerente == 9:
			return True
		return False
		
	def RevisaAfiliacionImss(self, afiliacionimss):
		sql = """select convert(varchar(10), fechaasignacion, 103), idprospecto,
		rtrim(ltrim(apellidopaterno1)) + ' ' + rtrim(ltrim(apellidomaterno1)) + ', ' + rtrim(ltrim(nombre1)), rtrim(ltrim(nombre))
		from gixprospectos
		where afiliacionimss = '%s' and congelado = 0 order by fechaasignacion
		""" % str(afiliacionimss)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		
		self.es_universal = False
		if rows:
			afiliaciones = rows
			try:
				self.es_universal = self.RevisaProspectoUniversal( afiliacionimss )
			except:
				pass
		else:
			afiliaciones = []
			
			
		return afiliaciones
	
	def IdDuplicado(self, afiliaciones):
		ids = ""
		for fechaalta, idprospecto, nombre1, nombre in afiliaciones:
			nom = nombre1.replace(",", "")
			nom = nom.replace(" ", "")
			if nom:
				ids += u"Alta: %s  Id: %s  %s\n" % (fechaalta, int(idprospecto), self.GetString(nombre1))
			else:
				ids += u"Alta: %s  Id: %s  %s\n" % (fechaalta, int(idprospecto), self.GetString(nombre))
			
		return ids
		
	def OnAplicarDetalle(self, event):
		idprospecto = self.GetControl(ID_TEXTCTRLPROSPECTOID).GetValue()
		if idprospecto.strip() == "":
			agrega = True
		else:
			agrega = False
		ctrl = self.GetControl(ID_TEXTCTRLPROSPECTONOMBRE)
		nombre = ctrl.GetValue().strip()
		if self.ExisteProspecto(nombre, agrega):
			if Mensajes().YesNo(self, u"Ya existe el prospecto: %s\n\n" \
					    u"� Desea localizarlo ?" % nombre, u"Confirmaci�n"):
				ctrl.SetValue("")
				self.GetControl(ID_TEXTCTRLPROSPECTONOMBREFILTRO).SetValue(str(nombre.encode("iso8859-1")))
				self.GetControl(ID_CHOICEPROSPECTOTIPOFECHAFILTRO).SetSelection(0)
				self.GetControl(ID_TEXTCTRLPROSPECTOFECHAINICIALFILTRO).SetValue("")
				self.GetControl(ID_TEXTCTRLPROSPECTOFECHAFINALFILTRO).SetValue("")
				self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).SetSelection(SetChoiceIndex())
				self.GetControl(ID_CHOICEPROSPECTOVENDEDORFILTRO).SetSelection(SetChoiceIndex())
				self.GetControl(ID_CHOICEPROSPECTOMEDIOPUBLICITARIOFILTRO).SetSelection(SetChoiceIndex())
				self.GetControl(ID_TEXTCTRLPROSPECTOAFILIACIONIMSSFILTRO).Clear()
				self.SalirDetalle()
				self.FillListCtrl()
			else:
				ctrl.SetValue(""); ctrl.SetFocus()
		else:
			self.NewFlag = False
			self.Text()
			if not self.NewFlag:
				afiliacionimss = self.GetControl(ID_TEXTCTRLPROSPECTOIMSS).GetValue()
				if not afiliacionimss and (self.GetControl(ID_CHECKBOXPROSPECTOCONTADO).IsChecked() or
				                           self.GetControl(ID_CHECKBOXPROSPECTOHIPOTECARIA).IsChecked()):
					self.SaveRecord()
					self.detail = False
				elif afiliacionimss.isdigit():
					if len(afiliacionimss) == 11:
						afiliaciones = self.RevisaAfiliacionImss(afiliacionimss)
						if agrega:
							if len(afiliaciones) == 0:
								self.SaveRecord()
								self.detail = False
							else:
								if self.usuario in self.specialuser:
									if Mensajes().YesNo(self, u"� El n�mero de afiliaci�n al I.M.S.S. ya existe !\n\n" \
											    u"Duplicidad en el(los) siguiente(s) Id(s):\n%s\n" \
											    u"� Desea continuar con el registro del prospecto ?" \
											    % self.IdDuplicado(afiliaciones), u"Confirmaci�n"):
										self.SaveRecord()
										self.detail = False
									else:
										pass
								else:
									#aqui va mi codigo JDAC
									Mensajes().Error(self, u"� El n�mero de afiliaci�n al I.M.S.S. ya existe !", u"Error")
									if self.es_universal:
										Mensajes().Error(self, u"El n�mero de afiliaci�n al I.M.S.S. corresponde a un prospecto universal", u"Aviso")
						else:
							if len(afiliaciones) == 0:
								self.SaveRecord()
								self.detail = False
							elif len(afiliaciones) == 1:
								if int(afiliaciones[0][1]) == int(idprospecto):
									self.SaveRecord()
									self.detail = False
								else:
									if self.usuario in self.specialuser:
										if Mensajes().YesNo(self, u"� El n�mero de afiliaci�n al I.M.S.S. ya existe !\n\n" \
												    u"Duplicidad en el(los) siguiente(s) Id(s):\n%s\n" \
												    u"� Desea continuar con el registro del prospecto ?" \
												    % self.IdDuplicado(afiliaciones), u"Confirmaci�n"):
											self.SaveRecord()
											self.detail = False
										else:
											pass
									else:
										Mensajes().Error(self, u"� El n�mero de afiliaci�n al I.M.S.S. ya existe !", u"Error")
							else:
								if self.usuario in self.specialuser:
									if Mensajes().YesNo(self, u"� El n�mero de afiliaci�n al I.M.S.S. ya existe !\n\n" \
											    u"Duplicidad en el(los) siguiente(s) Id(s):\n%s\n" \
											    u"� Desea continuar con el registro del prospecto ?" \
											    % self.IdDuplicado(afiliaciones), u"Confirmaci�n"):
										self.SaveRecord()
										self.detail = False
									else:
										pass
								else:
									Mensajes().Error(self, u"� El n�mero de afiliaci�n al I.M.S.S. ya existe !", u"Error")
					else:
						Mensajes().Error(self, u"� Por favor revise el n�mero de afiliaci�n al I.M.S.S. !", u"Error")
				else:
					Mensajes().Error(self, u"� Por favor revise el n�mero de afiliaci�n al I.M.S.S. !", u"Error")
	
	def OnSalirDetalle(self, event):
		self.SalirDetalle()
		
	def SalirDetalle(self):
		if self.currentitem:
			self.LCtrl()
			
		self.ChangeNoteBook()
		if (self.usuario in self.usuariorestringido) and (self.usuario not in self.vendedores) and \
		   (self.usuario not in self.gerentes):
			self.GetControl(ID_BUTTONPROSPECTOAGREGARLISTCTRL).Enable(False)
			self.GetControl(ID_BUTTONPROSPECTOEDITARLISTCTRL).Enable(False)
		else:
			self.GetControl(ID_BUTTONPROSPECTOAGREGARLISTCTRL).Enable(True)
			self.GetControl(ID_BUTTONPROSPECTOEDITARLISTCTRL).Enable(True)
		self.GetControl(ID_BUTTONPROSPECTOCERRARLISTCTRL).Enable(True)
		self.GetControl(ID_LISTCTRLPROSPECTO).SetFocus()
		self.detail = False
		
		if self.usuario in self.usuariorestringido:
			if self.usuario in self.recepcionistas: # self.usuario in self.gerentes or 
				self.GetControl(ID_BUTTONPROSPECTOAGREGARLISTCTRL).Enable(False)
				self.GetControl(ID_BUTTONPROSPECTOEDITARLISTCTRL).Enable(False)
			if self.usuario in self.gerentes:
				self.GetControl(ID_TEXTPROSPECTOGERENTEFILTRO).Enable(False)
				self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).Enable(False)
				self.GetControl(ID_BITMAPBUTTONPROSPECTOLIMPIARGERENTEFITRO).Enable(False)
				self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).SetSelection(0)
			elif self.usuario in self.vendedores:
				self.GetControl(ID_TEXTPROSPECTOGERENTEFILTRO).Enable(False)
				self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).Enable(False)
				self.GetControl(ID_BITMAPBUTTONPROSPECTOLIMPIARGERENTEFITRO).Enable(False)
				self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).SetSelection(0)
				self.GetControl(ID_TEXTPROSPECTOVENDEDORFILTRO).Enable(False)
				self.GetControl(ID_CHOICEPROSPECTOVENDEDORFILTRO).Enable(False)
				self.GetControl(ID_BITMAPBUTTONPROSPECTOLIMPIARVENDEDORFILTRO).Enable(False)
				self.GetControl(ID_CHOICEPROSPECTOVENDEDORFILTRO).SetSelection(0)
				
	def RefrescoCondicional(self):
		if self.usuario in self.usuariorestringido:
			self.FillListCtrl()
		
	def OnRefrescar(self, event):
		self.FillListCtrl()

	def OnEditRecord(self, event):
		if (self.usuario in self.usuariorestringido) and (self.usuario not in self.vendedores) and \
		   (self.usuario not in self.gerentes):
			return
		elif self.usuario in self.gerentes:
			if not self.habilitaedicion:
				return
		if self.LCtrl():
			if wx.Platform == '__WXMSW__':
				self.ActiveNoteBook(ID_NOTEBOOKPROSPECTOFORM, ID_NOTEBOOKPROSPECTOLISTCTRL, 743, 700)
				self.GetControl(ID_NOTEBOOKPROSPECTOFORM).SetSize(wx.Size(725, 635))
			elif wx.Platform == '__WXMAC__':
				self.ActiveNoteBook(ID_NOTEBOOKPROSPECTOFORM, ID_NOTEBOOKPROSPECTOLISTCTRL, 770, 800)
				self.GetControl(ID_NOTEBOOKPROSPECTOFORM).SetSize(wx.Size(760, 760))
			else:
				self.ActiveNoteBook(ID_NOTEBOOKPROSPECTOFORM, ID_NOTEBOOKPROSPECTOLISTCTRL, 752, 792)
				self.GetControl(ID_NOTEBOOKPROSPECTOFORM).SetSize(wx.Size(742, 760))

			self.GetControl(ID_TEXTCTRLPROSPECTOIMSS).SetEditable(False)
			self.GetControl(ID_NOTEBOOKPROSPECTOFORM).Refresh()
			self.GetControl(ID_BUTTONPROSPECTOACEPTARFORM).Enable(True)
			self.GetControl(ID_BUTTONPROSPECTOCANCELARFORM).Enable(True)
			self.detail = True
			if self.lugardetrabajo:
				self.GetControl(ID_BITMAPBUTTONPROSPECTOLUGARDETRABAJO).Enable(True)
			else:
				self.GetControl(ID_BITMAPBUTTONPROSPECTOLUGARDETRABAJO).Enable(False)
			
	def OnChoiceFiltro(self, event):
		self.RefrescoCondicional()
		
	def OnFechaFiltro(self, event):
		id = event.GetId()
		if id == ID_TEXTCTRLPROSPECTOFECHAINICIALFILTRO:
			habilitado = self.GetControl(ID_TEXTCTRLPROSPECTOFECHAFINALFILTRO).IsEnabled()
			if self.GetControl(id).GetValue():
				if not habilitado:
					self.GetControl(ID_TEXTPROSPECTOFECHAFINALFILTRO).Enable(True)
					self.GetControl(ID_TEXTCTRLPROSPECTOFECHAFINALFILTRO).Enable(True)
					self.GetControl(ID_BITMAPBUTTONPROSPECTOELEGIRFECHAFINALFILTRO).Enable(True)
					self.GetControl(ID_BITMAPBUTTONPROSPECTOLIMPIARFECHAFINALFILTRO).Enable(True)
			else:
				if habilitado:
					self.GetControl(ID_TEXTPROSPECTOFECHAFINALFILTRO).Enable(False)
					self.GetControl(ID_TEXTCTRLPROSPECTOFECHAFINALFILTRO).Enable(False)
					self.GetControl(ID_BITMAPBUTTONPROSPECTOELEGIRFECHAFINALFILTRO).Enable(False)
					self.GetControl(ID_BITMAPBUTTONPROSPECTOLIMPIARFECHAFINALFILTRO).Enable(False)
					
		self.RefrescoCondicional()
				
	def OnPrintExcel(self, event):
		pass
		#tabla = self.dbtable
		#meta = ((14,"Id") , (200,u"Prospecto"), (70,u"Alta"), (70,u"Cierre"), (70,u"Tel�fono(s)"), (70,u"No. IMSS"),
			#(70,u"Seguimiento"), (70,u"No Seguimiento"), (200,u"Vendedor"), (200,u"Gerente"), (200,u"Medio Publicitario"))
		#query = self.FillListCtrl(printexcel = True)
		#titulo = u"Prospectos"
		#self.DisplayGrid(tabla, meta, query, titulo)

	def FillListCtrl(self, display = 'first', printexcel = False):
		wx.BeginBusyCursor()
		
		warnings.warn("<<Entro - FillListCtrl>>")
		
		self.selecteditems = []
		self.sqlfiltro = ""
		tipofechafiltro = ""
		tipofecha = self.GetControl(ID_CHOICEPROSPECTOTIPOFECHAFILTRO).GetSelection()
		if tipofecha in (1,2):
			tipofechadict = {1:("p.fechaasignacion", "(p.fechacierre is Null)"),
			                 2:("p.fechacierre", "(p.fechacierre is not Null)")}
			tipofechafiltro = tipofechadict[tipofecha][0]
			self.sqlfiltro = tipofechadict[tipofecha][1]
			
		fechainicial = self.GetControl(ID_TEXTCTRLPROSPECTOFECHAINICIALFILTRO).GetValue()
		if fechainicial:
			try:
				fecha_dia, fecha_mes, fecha_ano = fechainicial.split('/')
				fechainicial = "'%s/%02d/%02d'" % (fecha_ano, int(fecha_mes), int(fecha_dia))
				fechafinal = self.GetControl(ID_TEXTCTRLPROSPECTOFECHAFINALFILTRO).GetValue()
				if fechafinal:
					fecha_dia, fecha_mes, fecha_ano = fechafinal.split('/')
					fechafinal = "'%s/%02d/%02d'" % (fecha_ano, int(fecha_mes), int(fecha_dia))
					if fechainicial > fechafinal:
						control = self.GetControl(ID_TEXTCTRLPROSPECTOTOTALREGISTROS)
						control.SetBackgroundColour(wx.Colour(153,255,153))
						control.SetForegroundColour(wx.NamedColour("BLACK"))
						control.SetValue("0.00")
						wx.EndBusyCursor()
						Mensajes().Info(self, u"� La Fecha Inicial no debe ser mayor a la Fecha Final !", u"Atenci�n")
						return
					elif tipofechafiltro:
						self.sqlfiltro += " and (%s >= %s and %s <= %s)" \
						    % (tipofechafiltro, fechainicial, tipofechafiltro, fechafinal)
					else:
						self.sqlfiltro = """
						((fechaasignacion >= %s and fechaasignacion <= %s) or
						(fechacierre >= %s and fechacierre <= %s))
						""" % (fechainicial, fechafinal, fechainicial, fechafinal)
				elif tipofechafiltro:
					self.sqlfiltro += " and (%s = %s)" % (tipofechafiltro, fechainicial)
				else:
					self.sqlfiltro = """
					((p.fechaasignacion = %s) or (p.fechacierre = %s))
					""" % (fechainicial, fechainicial)
			except:
				pass
					
		inx = self.GetControl(ID_CHOICEPROSPECTOCUENTAFILTRO).GetSelection()
		if inx in (1,2,3):
			tipocuentadict = {1:'contado <> 1 and hipotecaria <> 1', 2:'contado <> 0', 3:'hipotecaria <> 0'}
			if self.sqlfiltro:
				self.sqlfiltro += " and %s" % tipocuentadict[inx]
			else:
				self.sqlfiltro = tipocuentadict[inx]
			
		inx = self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).GetSelection()
		if inx > -1:
			idgerente = self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).GetClientData(inx)
			if idgerente:
				if self.sqlfiltro:
					self.sqlfiltro += " and p.idgerente = %s" % idgerente
				else:
					self.sqlfiltro = "p.idgerente = %s" % idgerente
	
		inx = self.GetControl(ID_CHOICEPROSPECTOMEDIOPUBLICITARIOFILTRO).GetSelection()
		if inx > -1:
			idmediopublicitario = self.GetControl(ID_CHOICEPROSPECTOMEDIOPUBLICITARIOFILTRO).GetClientData(inx)
			if idmediopublicitario:
				if self.sqlfiltro:
					self.sqlfiltro += " and p.idmediopublicitario = %s" % idmediopublicitario
				else:
					self.sqlfiltro = "p.idmediopublicitario = %s" % idmediopublicitario
				
		inx = self.GetControl(ID_CHOICEPROSPECTOVENDEDORFILTRO).GetSelection()
		if inx > -1:
			idvendedor = self.GetControl(ID_CHOICEPROSPECTOVENDEDORFILTRO).GetClientData(inx)
			if idvendedor:
				if self.sqlfiltro:
					self.sqlfiltro += " and p.idvendedor = %s" % idvendedor
				else:
					self.sqlfiltro = "p.idvendedor = %s" % idvendedor
				
		wild = "%%"
		nombreprospecto = self.GetControl(ID_SEARCHCTRLPROSPECTONOMBREANTERIORFILTRO).GetValue()
		if nombreprospecto:
			aux1 = nombreprospecto.encode("iso8859-1")
			name = aux1.replace(" ", "")
			if self.sqlfiltro:
				self.sqlfiltro += " and (replace(p.nombre,' ','')) like '%s%s%s'" % (wild, name, wild)
			else:
				self.sqlfiltro = "(replace(p.nombre,' ','')) like '%s%s%s'" % (wild, name, wild)
				
		afiliacionimss = self.GetControl(ID_SEARCHCTRLPROSPECTOAFILIACIONIMSSFILTRO).GetValue()
		if afiliacionimss:
			if self.sqlfiltro:
				self.sqlfiltro += " and (replace(p.afiliacionimss,' ','')) like '%s%s%s'" % (wild, afiliacionimss, wild)
			else:
				self.sqlfiltro = "(replace(p.afiliacionimss,' ','')) like '%s%s%s'" % (wild, afiliacionimss, wild)
				
		apellidopaterno = self.GetControl(ID_SEARCHCTRLPROSPECTOAPELLIDOPATERNOFILTRO).GetValue()
		if apellidopaterno:
			if self.sqlfiltro:
				self.sqlfiltro += " and (replace(p.apellidopaterno1,' ','')) like '%s%s%s'" % (wild, apellidopaterno, wild)
			else:
				self.sqlfiltro = "(replace(p.apellidopaterno1,' ','')) like '%s%s%s'" % (wild, apellidopaterno, wild)
				
		apellidomaterno = self.GetControl(ID_SEARCHCTRLPROSPECTOAPELLIDOMATERNOFILTRO).GetValue()
		if apellidomaterno:
			if self.sqlfiltro:
				self.sqlfiltro += " and (replace(p.apellidomaterno1,' ','')) like '%s%s%s'" % (wild, apellidomaterno, wild)
			else:
				self.sqlfiltro = "(replace(p.apellidomaterno1,' ','')) like '%s%s%s'" % (wild, apellidomaterno, wild)
				
		nombre = self.GetControl(ID_SEARCHCTRLPROSPECTONOMBREFILTRO).GetValue()
		if nombre:
			if self.sqlfiltro:
				self.sqlfiltro += " and (replace(p.nombre1,' ','')) like '%s%s%s'" % (wild, nombre, wild)
			else:
				self.sqlfiltro = "(replace(p.nombre1,' ','')) like '%s%s%s'" % (wild, nombre, wild)
				
		idprospecto = self.GetControl(ID_SEARCHCTRLPROSPECTOIDFILTRO).GetValue()
		try:
			idpro = int(idprospecto)
		except:
			idpro = ""
		if idpro:
			if self.sqlfiltro:
				self.sqlfiltro += " and p.idprospecto = %s" % idpro
			else:
				self.sqlfiltro = "p.idprospecto = %s" % idpro
				
		if self.sqlfiltro:
			self.sqlfiltro = """
			where %s and p.congelado = 0 and (datediff(day, t.fecha, getdate()) < %s or p.cuenta <> 0)
			and t.transicion = 'I' and t.ciclo = 1
			""" % (self.sqlfiltro, self.limitedias)
		else:
			self.sqlfiltro = """
			where p.congelado = 0 and (datediff(day, t.fecha, getdate()) < %s or p.cuenta <> 0)
			and t.transicion = 'I' and t.ciclo = 1
			""" % self.limitedias
			
		if printexcel:
			sql = """
			select p.idprospecto, p.nombre, convert(varchar(10), p.fechaasignacion, 103),
			convert(varchar(10), p.fechacierre, 103), p.telefonos, p.afiliacionimss,
			convert(varchar(10), p.fechaseguimiento, 103), convert(varchar(10), p.fechanoseguimiento, 103),
			v.nombre, g.nombre, m.descripcion, datediff(day, p.fechaasignacion, getdate())
			from %s p join VENDEDOR v on v.codigo = p.idvendedor
			join gerentesventas g on g.codigo = v.gerente
			join gixmediospublicitarios m on m.idmediopublicitario = p.idmediopublicitario
			%s order by p.nombre
			""" % (self.dbtable, self.sqlfiltro)
			sqlx = sql.replace('\t', ' ')
			sql = sqlx.replace('\n', ' ')
			wx.EndBusyCursor()
			return str(sql)
			
		warnings.warn("<<Paso filtro - FillListCtrl>>")
		
		lctrl = self.GetControl(ID_LISTCTRLPROSPECTO)
		lctrl.ClearAll()
		sql = """
		select p.idprospecto, rtrim(ltrim(p.apellidopaterno1)), rtrim(ltrim(p.apellidomaterno1)), rtrim(ltrim(p.nombre1)),
		p.telefonocasa, p.telefonooficina, p.extensionoficina, p.telefonocelular, p.nombre,
		convert(varchar(10), p.fechaasignacion, 103), convert(varchar(10), p.fechacierre, 103), p.telefonos, p.afiliacionimss,
		v.nombre, g.nombre, m.descripcion, v.desactivado, datediff(day, t.fecha, getdate())
		from %s p join VENDEDOR v on v.codigo = p.idvendedor
		join gerentesventas g on g.codigo = v.gerente
		join gixmediospublicitarios m on m.idmediopublicitario = p.idmediopublicitario
		join gixprospectostransiciones t on t.fkprospecto = p.idprospecto
		%s order by %s
		""" % (self.dbtable, self.sqlfiltro, self.sortlistctrl)
		sqlx = sql.replace('\t', ' ')
		sql = sqlx.replace('\n', ' ')
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		fila = 0

		warnings.warn("<<Inicio ciclo rows - FillListCtrl>>")

		if rows:
			title = ((u"%sId" % self.sortoptions[0][3], wx.LIST_FORMAT_CENTER),
			         (u"%sApellido Paterno" % self.sortoptions[1][3], wx.LIST_FORMAT_LEFT),
				 (u"%sApellido Materno" % self.sortoptions[2][3], wx.LIST_FORMAT_LEFT),
			         (u"%sNombre" % self.sortoptions[3][3], wx.LIST_FORMAT_LEFT),
				 (u"%sCasa" % self.sortoptions[4][3], wx.LIST_FORMAT_LEFT),
			         (u"%sOficina" % self.sortoptions[5][3], wx.LIST_FORMAT_LEFT),
			         (u"%sCelular (Movil)" % self.sortoptions[6][3], wx.LIST_FORMAT_LEFT),
				 (u"%sNombre Formato Anterior" % self.sortoptions[7][3], wx.LIST_FORMAT_LEFT),
			         (u"%sAlta" % self.sortoptions[8][3], wx.LIST_FORMAT_CENTER),
				 (u"%sCierre" % self.sortoptions[9][3], wx.LIST_FORMAT_CENTER),
			         (u"%sTel�fono(s)" % self.sortoptions[10][3], wx.LIST_FORMAT_LEFT),
			         (u"%sNo. IMSS" % self.sortoptions[11][3], wx.LIST_FORMAT_CENTER),
				 (u"%sVendedor" % self.sortoptions[12][3], wx.LIST_FORMAT_LEFT),
			         (u"%sGerente" % self.sortoptions[13][3], wx.LIST_FORMAT_LEFT),
			         (u"%sMedio Publicitario" % self.sortoptions[14][3], wx.LIST_FORMAT_LEFT))
			for i, coltitle in enumerate(title):
				lctrl.InsertColumn(i, coltitle[0], coltitle[1])
			for row in rows:
				teloficinaext = self.GetString(row[5])
				if str(row[6]) not in ("", " "):
					teloficinaext += " ext. %s" % str(row[6])
				if str(row[9]) == "None": asignacion = ""
				else: asignacion = str(row[9])
				if str(row[10]) == "None": cierre = ""
				else: cierre = str(row[10])
				if int(row[16]) == 0:
					if int(row[0]) == 22999:
						x = 12
					#if (int(row[17]) > 40 and int(row[17]) < 66):
						#if fila %2 != 0: bgcolor = [252,252,104]
						#else:            bgcolor = [250,250,164]
					#elif int(row[17]) > 65 and int(row[17]) < 106:
						#if fila %2 != 0: bgcolor = [150,204,150]
						#else:            bgcolor = [200,230,200]
					#elif int(row[17]) > 105:
						#if fila %2 != 0: bgcolor = [248,181,68]
						#else:            bgcolor = [251,212,146]
					#else:
						#if fila %2 != 0: bgcolor = [153,153,255]
						#else:            bgcolor = [200,200,255]
						
					if (int(row[17]) > 35 and int(row[17]) < 41):
						if fila %2 != 0: bgcolor = [252,252,104]
						else:            bgcolor = [250,250,164]
					elif int(row[17]) > 40:
						if fila %2 != 0: bgcolor = [150,204,150]
						else:            bgcolor = [200,230,200]
					#elif int(row[17]) > 105:
						#if fila %2 != 0: bgcolor = [248,181,68]
						#else:            bgcolor = [251,212,146]
					else:
						if fila %2 != 0: bgcolor = [153,153,255]
						else:            bgcolor = [200,200,255]
				else:
					if fila %2 != 0: bgcolor = [255,153,153]
					else:            bgcolor = [255,215,215]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, self.GetString(row[1]))
				lctrl.SetStringItem(index, 2, self.GetString(row[2]))
				lctrl.SetStringItem(index, 3, self.GetString(row[3]))
				lctrl.SetStringItem(index, 4, self.GetString(row[4]))
				lctrl.SetStringItem(index, 5, teloficinaext)
				lctrl.SetStringItem(index, 6, self.GetString(row[7]))
				lctrl.SetStringItem(index, 7, self.GetString(row[8]))
				lctrl.SetStringItem(index, 8, asignacion)
				lctrl.SetStringItem(index, 9, cierre)
				lctrl.SetStringItem(index, 10, self.GetString(row[11]))
				lctrl.SetStringItem(index, 11, self.GetString(row[12]))
				lctrl.SetStringItem(index, 12, self.GetString(row[13]))
				lctrl.SetStringItem(index, 13, self.GetString(row[14]))
				lctrl.SetStringItem(index, 14, self.GetString(row[15]))
				lctrl.SetItemData(index, row[0])
				if int(row[0]) == self.idrefmovto:
					self.ctrlindex = index
				fila += 1

			warnings.warn("<<Finalizo ciclo - FillListCtrl>>")

			fila = 0
			for i, coltitle in enumerate(title):
				if i == 0:
					fila = lctrl.InsertStringItem(sys.maxint, "#%s#" % coltitle[0])
				else:
					lctrl.SetStringItem(fila, i, "#%s#" % coltitle[0])
					
			lctrl.SetColumnWidth(0, 50)
			for i in range(1, 15):
				lctrl.SetColumnWidth(i, wx.LIST_AUTOSIZE)
				
			lctrl.DeleteItem(fila)
			if display == 'first':
				self.GetLFRecord("min")
			elif display == 'last':
				self.GetLFRecord("max")
		else:
			lctrl.InsertColumn(0, "       No Existen Prospectos", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 250)
		
			
		control = self.GetControl(ID_TEXTCTRLPROSPECTOTOTALREGISTROS)
		control.SetBackgroundColour(wx.Colour(153,255,153))
		control.SetForegroundColour(wx.NamedColour("BLACK"))
		control.SetValue(str(fila))
		self.SetLogProspecto(registros = fila)
		if fila:
			if (self.usuario in self.usuariorestringido) and (self.usuario not in self.vendedores):
				self.GetControl(ID_BUTTONPROSPECTOEDITARLISTCTRL).Enable(False)
			else:
				self.GetControl(ID_BUTTONPROSPECTOEDITARLISTCTRL).Enable(True)
		else:
			self.GetControl(ID_BUTTONPROSPECTOEDITARLISTCTRL).Enable(False)
			
		wx.EndBusyCursor()
		
	def OnLCtrlDeselected(self, event):
		self.currentitem = event.m_itemIndex
		lctrl = self.GetControl(self.listctrl)
		datointerno = lctrl.GetItem(self.currentitem, 0).GetText()
		datointerno = int(str(datointerno).split(".")[0])
		self.selecteditems.remove(datointerno)
		event.Skip()

	def OnLCtrl(self, event):
		self.currentitem = event.m_itemIndex
		self.LCtrl()
		lctrl = self.GetControl(self.listctrl)
		datointerno = lctrl.GetItem(self.currentitem, 0).GetText()
		datointerno = int(str(datointerno).split(".")[0])
		self.selecteditems.append(datointerno)
		self.datointerno = datointerno
		event.Skip()
					
	def LCtrl(self):
		lctrl = self.GetControl(self.listctrl)
		datointerno = 0
		todobien = True
		try:
			datointerno = lctrl.GetItem(self.currentitem, 0).GetText()
			datointerno = int(str(datointerno).split(".")[0])
		except:
			datointerno = int(str(datointerno).split(".")[0])
		if datointerno > 0:
			if self.datointernoynombre:
				self.GetRecord(datointerno, nombre)
			elif not self.GetRecord(datointerno):
				Mensajes().Warn(self, u"Escoja un registro v�lido", u"Atenci�n")
				todobien = False
		else:
			Mensajes().Error(self, u"No hay nada que editar", u"Error")
			todobien = False
			
		return todobien
		
	def GetLFRecord(self, what):
		lctrl = self.GetControl(ID_LISTCTRLPROSPECTO)
		sql = """
		select p.idprospecto, rtrim(ltrim(p.apellidopaterno1)), rtrim(ltrim(p.apellidomaterno1)), rtrim(ltrim(p.nombre1)),
		telefonocasa, telefonooficina, extensionoficina, telefonocelular,
		p.nombre, convert(varchar(10), p.fechaasignacion, 103),	convert(varchar(10), p.fechacierre, 103),
		telefonos, afiliacionimss, v.nombre, g.nombre, m.descripcion, v.desactivado
		from %s p join VENDEDOR v on v.codigo = p.idvendedor
		join gerentesventas g on g.codigo = v.gerente
		join gixmediospublicitarios m on m.idmediopublicitario = p.idmediopublicitario
		join gixprospectostransiciones t on t.fkprospecto = p.idprospecto
		%s order by p.apellidopaterno1, p.apellidomaterno1, p.nombre1
		""" % (self.dbtable, self.sqlfiltro)
		
		idprospecto = ""
		try:
			cursor = r_cn.cursor()
			cursor.execute(str(sql))
			row = fetchone(cursor)
			if row is not None:
				idprospecto = int(row[0])
			self.GetRecord(idprospecto)
			if not self.ctrlindex:
				if what == "min":
					lctrl.SetItemState(0, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
				else:
					lctrl.SetItemState(lctrl.GetItemCount() - 1, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
		except:
			warnings.warn("<<Prospectos - GetLFRecord>>")
			wx.EndBusyCursor()
		finally:
			cursor.close()
		
	def OnText(self, event):
		self.controlactual = event.GetId()
		if self.controlactual in (ID_TEXTCTRLPROSPECTONOMBRE1, ID_TEXTCTRLPROSPECTOAPELLIDOPATERNO1,
		                          ID_TEXTCTRLPROSPECTOAPELLIDOMATERNO1, ID_TEXTCTRLPROSPECTORFC,
		                          ID_TEXTCTRLPROSPECTOCURP, ID_TEXTCTRLPROSPECTOLUGARTRABAJO,
					  ID_TEXTCTRLPROSPECTOMEDIOPUBLICITARIOSUGERIDO):
			valor = self.GetControl(self.controlactual).GetValue()
			valornum = self.GetString(valor).replace('.','')
			if valor and not valornum.isdigit():
				if not valor.isupper():
					self.GetControl(self.controlactual).SetValue(valor.upper())
					lastposition = self.GetControl(self.controlactual).GetLastPosition()
					self.GetControl(self.controlactual).SetInsertionPoint(lastposition)
		
		if self.Text(vengodeontext = True):
			self.GetControl(ID_CHOICEPROSPECTOTIPOFECHAFILTRO).SetSelection(0)
			self.GetControl(ID_TEXTCTRLPROSPECTOFECHAINICIALFILTRO).SetValue("")
			self.GetControl(ID_TEXTCTRLPROSPECTOFECHAFINALFILTRO).SetValue("")
			self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).SetSelection(SetChoiceIndex())
			self.GetControl(ID_CHOICEPROSPECTOVENDEDORFILTRO).SetSelection(SetChoiceIndex())
			self.GetControl(ID_CHOICEPROSPECTOMEDIOPUBLICITARIOFILTRO).SetSelection(SetChoiceIndex())
			self.GetControl(ID_TEXTCTRLPROSPECTOAFILIACIONIMSSFILTRO).Clear()
			self.SalirDetalle()
			self.FillListCtrl()
			
		event.Skip()
	
	def Text(self, VengodelaLista = False, vengodeontext = False):
		for id in (ID_CHOICEPROSPECTOGERENTE, ID_CHOICEPROSPECTOVENDEDOR, ID_TEXTCTRLPROSPECTONOMBRE1,
		           ID_TEXTCTRLPROSPECTOAPELLIDOPATERNO1, ID_TEXTCTRLPROSPECTOAPELLIDOMATERNO1,
		           ID_TEXTCTRLPROSPECTOIMSS, ID_TEXTCTRLPROSPECTOFECHAALTA, ID_COMBOPROSPECTOMEDIOPUBLICITARIO):
			control = self.GetControl(id)
			#if vengodeontext:
				#if (self.controlactual == ID_TEXTCTRLPROSPECTONOMBRE and self.detail):
					#ctrl = self.GetControl(ID_TEXTCTRLPROSPECTONOMBRE)
					#nombre = ctrl.GetValue().strip()
					#if self.ExisteProspecto(nombre):
						#if Mensajes().YesNo(self, u"Ya existe el prospecto: %s\n\n" \
											#u"� Desea localizarlo ?" % nombre, u"Confirmaci�n"):
							#ctrl.SetValue("")
							#self.GetControl(ID_TEXTCTRLPROSPECTONOMBREFILTRO).SetValue(str(nombre.encode("iso8859-1")))
							#return True
						#else:
							#ctrl.SetValue(""); ctrl.SetFocus()
							#return False
			if id in (ID_CHOICEPROSPECTOGERENTE, ID_CHOICEPROSPECTOVENDEDOR):
				valor = control.GetStringSelection().strip()
			else:
				try:
					valor = control.GetValue().strip()
				except:
					valor = control.GetLabel().strip()
			if valor == "" and not self.FillingARecord and not self.NewFlag:
				self.NewFlag = True
				if not VengodelaLista:
					if id == ID_TEXTCTRLPROSPECTOIMSS and (self.GetControl(ID_CHECKBOXPROSPECTOCONTADO).IsChecked() or
					                                       self.GetControl(ID_CHECKBOXPROSPECTOHIPOTECARIA).IsChecked()):
						self.NewFlag = False
					else:
						Mensajes().Info(self, u"� No debe quedar ning�n dato requerido * en blanco !", u"Atenci�n")
						return False
					
		id = self.controlactual
		editable = False
		if not self.FillingARecord:
			if not self.GetControl(id).IsEditable():
				self.GetControl(id).SetEditable(True)
				editable = True
				
			if self.OriginalDistinto(id):
				self.GetControl(id).SetBackgroundColour(wx.CYAN)
				self.GetControl(id).Refresh()
			else:
				self.GetControl(id).SetBackgroundColour(wx.WHITE)
				self.GetControl(id).Refresh()
			
			if self.OriginalesDistintos():
				self.GetControl(ID_BUTTONPROSPECTOACEPTARFORM).Enable(True)
			else:
				self.GetControl(ID_BUTTONPROSPECTOACEPTARFORM).Enable(False)
			
		self.ChoiceControl(ID_CHOICEPROSPECTOGERENTE)
		self.ChoiceControl(ID_CHOICEPROSPECTOVENDEDOR)
		
		if editable:
			self.GetControl(id).SetEditable(False)
			
		return False
	
	def ExisteProspecto(self, nombre, agrega):
		return False   # Forza resultado de no existe
	
		#aux1 = self.GetStringEncode(nombre)
		#name = aux1.replace(" ", "")
		#sql = """
		#select count(nombre) from gixprospectos	group by nombre having replace(nombre,' ','') = '%s'
		#""" % name
		#existe = False
		#try:
			#cu = r_cn.cursor()
			#cu.execute(sql)
			#row = fetchone(cu)
			#if row:
				#if agrega:
					#if int(row[0]) > 0:
						#existe = True
				#elif self.OriginalDistinto(ID_TEXTCTRLPROSPECTONOMBRE):
					#if int(row[0]) > 0:
						#existe = True
				#else:
					#if int(row[0]) > 1:
						#existe = True
		#finally:
			#cu.close()
			
		#return existe
	
	def NuevoProspectoAgregado(self):
		titulo = u"Tome Nota del Nuevo Id"
		dialog = NuevoProspectoAgregado(self, -1, titulo, size = (450,400), style = wx.DEFAULT_DIALOG_STYLE,
						prospecto = self.prospecto, idprospecto = self.idprospecto)
		dialog.CenterOnScreen()
		dialog.ShowModal()
		
	def SaveRecord(self):
		idprospecto = self.GetControl(ID_TEXTCTRLPROSPECTOID).GetValue()
		if idprospecto.strip() == "" :
			bienGrabado, self.idprospecto, self.prospecto = self.AddRecord()
			if not bienGrabado:
				Mensajes().Info(self,u"� El Registro no fue grabado !", u"Atenci�n")
			else:
				self.NuevoProspectoAgregado()
		else:
			bienGrabado, self.idprospecto = self.UpdateRecord()
			if not bienGrabado:
				Mensajes().Info(self,u"� El Registro no fue actualizado !", u"Atenci�n")
		if bienGrabado:
			self.ChangeNoteBook()
			if (self.usuario in self.usuariorestringido) and (self.usuario not in self.vendedores) and \
			   (self.usuario not in self.gerentes):
				self.GetControl(ID_BUTTONPROSPECTOAGREGARLISTCTRL).Enable(False)
				self.GetControl(ID_BUTTONPROSPECTOEDITARLISTCTRL).Enable(False)
			else:
				self.GetControl(ID_BUTTONPROSPECTOAGREGARLISTCTRL).Enable(True)
				self.GetControl(ID_BUTTONPROSPECTOEDITARLISTCTRL).Enable(True)
			self.GetControl(ID_BUTTONPROSPECTOCERRARLISTCTRL).Enable(True)
			self.GetControl(ID_LISTCTRLPROSPECTO).SetFocus()
			#lctrl = self.GetControl(ID_LISTCTRLPROSPECTO)
			#lctrl.SetItemState(self.ctrlindex, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
			#lctrl.EnsureVisible(self.ctrlindex)
			#self.GetControl(ID_BUTTONMOVTOBANCOAPLICAR).Enable(False)
			#self.GetControl(ID_BUTTONMOVTOBANCOAGREGAR).Enable(True)
			#self.GetRecord("%s" % (idprospecto))
			
	def UpdateRecord(self):
		idprospecto = self.GetControl(ID_TEXTCTRLPROSPECTOID).GetValue()
		contado = 0
		if self.GetControl(ID_CHECKBOXPROSPECTOCONTADO).IsChecked():
			contado = 1
		hipotecaria = 0
		if self.GetControl(ID_CHECKBOXPROSPECTOHIPOTECARIA).IsChecked():
			hipotecaria = 1
		inx = self.GetControl(ID_CHOICEPROSPECTOGERENTE).GetSelection()
		idgerente = self.GetControl(ID_CHOICEPROSPECTOGERENTE).GetClientData(inx)
		inx = self.GetControl(ID_CHOICEPROSPECTOVENDEDOR).GetSelection()
		idvendedor = self.GetControl(ID_CHOICEPROSPECTOVENDEDOR).GetClientData(inx)
		nombre1 = self.GetControl(ID_TEXTCTRLPROSPECTONOMBRE1).GetValue()
		apellidopaterno1 = self.GetControl(ID_TEXTCTRLPROSPECTOAPELLIDOPATERNO1).GetValue()
		apellidomaterno1 = self.GetControl(ID_TEXTCTRLPROSPECTOAPELLIDOMATERNO1).GetValue()
		fecha = self.GetControl(ID_TEXTCTRLPROSPECTOFECHANACIMIENTO).GetValue()
		fechaOk, fechanacimiento = self.PreparaFecha(fecha)
		if not fechaOk:
			return False, 0
		rfc = self.GetControl(ID_TEXTCTRLPROSPECTORFC).GetValue()
		curp = self.GetControl(ID_TEXTCTRLPROSPECTOCURP).GetValue()
		telefonocasa = self.GetControl(ID_TEXTCTRLPROSPECTOTELEFONOCASA).GetValue()
		telefonooficina = self.GetControl(ID_TEXTCTRLPROSPECTOTELEFONOOFICINA).GetValue()
		extensionoficina = self.GetControl(ID_TEXTCTRLPROSPECTOEXTENSIONOFICINA).GetValue()
		telefonocelular = self.GetControl(ID_TEXTCTRLPROSPECTOTELEFONOCELULAR).GetValue()
		lugardetrabajo = self.GetControl(ID_TEXTCTRLPROSPECTOLUGARTRABAJO).GetValue()
		afiliacionimss = self.GetControl(ID_TEXTCTRLPROSPECTOIMSS).GetValue()
		fecha = self.GetControl(ID_TEXTCTRLPROSPECTOFECHAALTA).GetValue()
		fechaOk, fechaalta = self.PreparaFecha(fecha)
		if not fechaOk:
			return False, 0
		descripcion = self.GetControl(ID_COMBOPROSPECTOMEDIOPUBLICITARIO).GetValue()
		if not self.ExisteMedioPublicitario(descripcion):
			Mensajes().Info(self, u"� El medio publicitario %s no existe !\n\n" \
					u"Si desea agregarlo solicite autorizaci�n." % descripcion, u"Atenci�n")
			return False, 0
		else:
			inx = self.GetControl(ID_COMBOPROSPECTOMEDIOPUBLICITARIO).GetSelection()
			idmediopublicitario = self.GetControl(ID_COMBOPROSPECTOMEDIOPUBLICITARIO).GetClientData(inx)
		sugerido = self.GetControl(ID_TEXTCTRLPROSPECTOMEDIOPUBLICITARIOSUGERIDO).GetValue()
			
		setListForQuery = """
		idgerente = %s, idvendedor = %s, nombre1 = '%s', apellidopaterno1 = '%s', apellidomaterno1 = '%s', fechadenacimiento = %s,
		rfc = '%s', curp = '%s', telefonocasa = '%s', telefonooficina = '%s', extensionoficina = '%s', telefonocelular = '%s',
		lugardetrabajo = '%s', afiliacionimss = '%s', fechaasignacion = %s, idmediopublicitario = %s, mediopublicitariosugerido = '%s',
		contado = %s, hipotecaria = %s
		""" % (int(idgerente), int(idvendedor), nombre1, apellidopaterno1, apellidomaterno1, fechanacimiento, rfc, curp,
		       telefonocasa, telefonooficina, extensionoficina, telefonocelular, lugardetrabajo, afiliacionimss, fechaalta,
		       int(idmediopublicitario), sugerido, int(contado), int(hipotecaria))
		sql = "update %s set %s where idprospecto = %s" \
			% (self.dbtable, setListForQuery, idprospecto)
		
		queTal = self.QueryUpdateRecord(sql)
		numero = 0
		if queTal:
			self.SetLogProspecto(idprospecto)
			if lugardetrabajo:
				self.lugardetrabajo = lugardetrabajo
			numero = int(idprospecto)
			sql = """
			insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension)
			values ('%s', getdate(), '%s', '%s', '%s', '%s')
			""" % (self.BlogGUID, self.usuario, u"Modificaci�n del Prospecto", "", "")
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
		
		return queTal, numero
	
	def PreparaFecha(self, fecha):
		if fecha:
			try:
				fecha_dia, fecha_mes, fecha_ano = fecha.split('/')
				gooddate = "'%04d/%02d/%02d'" % (int(fecha_ano), int(fecha_mes), int(fecha_dia))
				return True, gooddate
			except:
				Mensajes().Info(self, u"Problemas con la fecha al agregar el prospecto", u"Atenci�n")
				return False, "Null"
		else:
			return True, "Null"
		
	def ExisteMedioPublicitario(self, descripcion):
		sql = "select idmediopublicitario from gixmediospublicitarios where descripcion = '%s'" % (descripcion)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row is not None:
			return True
		else:
			return False
		
	def AddRecord(self):
		contado = 0
		if self.GetControl(ID_CHECKBOXPROSPECTOCONTADO).IsChecked():
			contado = 1
		hipotecaria = 0
		if self.GetControl(ID_CHECKBOXPROSPECTOHIPOTECARIA).IsChecked():
			hipotecaria = 1
		inx = self.GetControl(ID_CHOICEPROSPECTOGERENTE).GetSelection()
		idgerente = self.GetControl(ID_CHOICEPROSPECTOGERENTE).GetClientData(inx)
		inx = self.GetControl(ID_CHOICEPROSPECTOVENDEDOR).GetSelection()
		idvendedor = self.GetControl(ID_CHOICEPROSPECTOVENDEDOR).GetClientData(inx)
		nombre1 = self.GetControl(ID_TEXTCTRLPROSPECTONOMBRE1).GetValue()
		apellidopaterno1 = self.GetControl(ID_TEXTCTRLPROSPECTOAPELLIDOPATERNO1).GetValue()
		apellidomaterno1 = self.GetControl(ID_TEXTCTRLPROSPECTOAPELLIDOMATERNO1).GetValue()
		fecha = self.GetControl(ID_TEXTCTRLPROSPECTOFECHANACIMIENTO).GetValue()
		fechaOk, fechanacimiento = self.PreparaFecha(fecha)
		if not fechaOk:
			return False, 0, ""
		rfc = self.GetControl(ID_TEXTCTRLPROSPECTORFC).GetValue()
		curp = self.GetControl(ID_TEXTCTRLPROSPECTOCURP).GetValue()
		telefonocasa = self.GetControl(ID_TEXTCTRLPROSPECTOTELEFONOCASA).GetValue()
		telefonooficina = self.GetControl(ID_TEXTCTRLPROSPECTOTELEFONOOFICINA).GetValue()
		extensionoficina = self.GetControl(ID_TEXTCTRLPROSPECTOEXTENSIONOFICINA).GetValue()
		telefonocelular = self.GetControl(ID_TEXTCTRLPROSPECTOTELEFONOCELULAR).GetValue()
		lugardetrabajo = self.GetControl(ID_TEXTCTRLPROSPECTOLUGARTRABAJO).GetValue()
		afiliacionimss = self.GetControl(ID_TEXTCTRLPROSPECTOIMSS).GetValue()
		fecha = self.GetControl(ID_TEXTCTRLPROSPECTOFECHAALTA).GetValue()
		fechaOk, fechaalta = self.PreparaFecha(fecha)
		if not fechaOk:
			return False, 0, ""
		descripcion = self.GetControl(ID_COMBOPROSPECTOMEDIOPUBLICITARIO).GetValue()
		if not self.ExisteMedioPublicitario(descripcion):
			Mensajes().Info(self, u"� El medio publicitario %s no existe !\n\n" \
					u"Si desea agregarlo solicite autorizaci�n." % descripcion, u"Atenci�n")
			return False, 0, ""
		else:
			inx = self.GetControl(ID_COMBOPROSPECTOMEDIOPUBLICITARIO).GetSelection()
			idmediopublicitario = self.GetControl(ID_COMBOPROSPECTOMEDIOPUBLICITARIO).GetClientData(inx)
		sugerido = self.GetControl(ID_TEXTCTRLPROSPECTOMEDIOPUBLICITARIOSUGERIDO).GetValue()
		
		query = """
		select top 1 idvendedor from gixprospectos where afiliacionimss = '%s' order by fechaasignacion desc
		""" % afiliacionimss
		cu = r_cn.cursor()
		cu.execute(str(query))
		vendedor = fetchone(cu)
		cu.close()
		if vendedor is not None:
			if int(vendedor[0]) == int(idvendedor):
				if Mensajes().YesNo(self, u"El prospecto que desea agregar ya estuvo 40 d�as\n" \
				                    u"en su bandeja.\n\nSi desea retomarlo continue y solicite autorizaci�n\n" \
				                    u"para que le sea reasignado.\n\n" \
				                    u"Nota.- Es caso de duda consulte a su gerente.\n\n" \
				                    u"� Desea continuar ?\n", u"Confirmaci�n alta de prospecto"):
					idgerente = 9; idvendedor = 474
				else:
					return False, 0, ""
		
		sqlFields = """
		idgerente, idvendedor, nombre1, apellidopaterno1, apellidomaterno1, fechadenacimiento, rfc, curp,
		telefonocasa, telefonooficina, extensionoficina, telefonocelular, lugardetrabajo,
		afiliacionimss, fechaasignacion, idmediopublicitario, mediopublicitariosugerido, contado, hipotecaria
		"""
		sqlValues = "%s, %s, '%s', '%s', '%s', %s, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', %s, %s, '%s', %s, %s" % \
			  (int(idgerente), int(idvendedor), nombre1, apellidopaterno1, apellidomaterno1, fechanacimiento,
			   rfc, curp, telefonocasa, telefonooficina, extensionoficina, telefonocelular, lugardetrabajo,
			   afiliacionimss, fechaalta, int(idmediopublicitario), sugerido, int(contado), int(hipotecaria))
		sql = "insert into %s (%s) values (%s)" % (self.dbtable, sqlFields, sqlValues) 
		sqlmax = "select max(idprospecto) from %s" % (self.dbtable)
		queTal, idprospecto = self.QueryUpdateRecord(sql, sqlmax, True)
		if queTal:
			if lugardetrabajo:
				self.lugardetrabajo = lugardetrabajo
			self.GetControl(ID_TEXTCTRLPROSPECTOID).SetValue(str(idprospecto))
			sql = """
			insert into gixprospectostransiciones
			(fkprospecto, fecha, transicion, fkgerente, fkvendedor, ciclo, notas)
			values (%s, getdate(), 'I', %s, %s, 1, 'Alta del prospecto (Inicio 1er. ciclo)')
			""" % (int(idprospecto), int(idgerente), int(idvendedor))
			transicion, trash = self.QueryUpdateRecord(sql)
			if not transicion:
				Mensajes().Info(self, u"Problemas al actualizar transiciones\n%s" % sql, u"Atenci�n")
			sql = "select convert(varchar(100), BlogGUID) from %s where idprospecto = %s" % (self.dbtable, idprospecto)
			cu = r_cn.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			cu.close()
			if row is not None:
				self.BlogGUID = row[0]
				sql = """
				insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura,
				ContenidoText, ContenidoBinario, Extension)
				values ('%s', getdate(), '%s', '%s', '%s', '%s')
				""" % (self.BlogGUID, self.usuario, "Alta del Prospecto", "", "")
				if not self.QueryUpdateRecord(sql):
					Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
			else:
				Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
		else:
			idprospecto = 0
			
		prospecto = u"%s %s, %s" % (apellidopaterno1, apellidomaterno1, nombre1)

		return queTal, int(idprospecto), prospecto
	
	def DespliegaCombo(self, id, valor):
		combo = self.GetControl(id)
		for inx in range(0, combo.GetCount()):
			if valor == combo.GetClientData(inx):
				combo.SetSelection(inx)
				break
	
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
		return dato
	
	def GetStringEncode(self, valor):
		dato = ""
		try:
			dato = valor.encode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
		return dato
	
	def GetRecord(self, record):
		lctrl = self.GetControl(self.listctrl)
		try:
			a = int(record)
		except:
			return False
		
		if a < 1:
			return False
		
		self.FillingARecord = True
		self.LimpiaControles()
		self.SetColoreable(False)
		for v in self.controles_tipo_txt.itervalues():
			self.originales[v] = ""
		self.originales[ID_CHOICEPROSPECTOGERENTE] = ""
		self.originales[ID_CHOICEPROSPECTOVENDEDOR] = ""
		self.originales[ID_COMBOPROSPECTOMEDIOPUBLICITARIO] = ""
		
		idprospecto = int(record)
		self.GetControl(ID_TEXTCTRLPROSPECTOID).SetValue(str(idprospecto))
		sql = """
		select p.idgerente, p.idvendedor, p.nombre1, p.apellidopaterno1, p.apellidomaterno1,
		convert(varchar(10), p.fechadenacimiento, 103), p.rfc, p.curp, p.telefonocasa, p.telefonooficina, p.extensionoficina,
		p.telefonocelular, p.lugardetrabajo, p.cuenta, p.nombre, p.afiliacionimss, p.telefonos,
		convert(varchar(10), p.fechaasignacion, 103), convert(varchar(10), p.fechacierre, 103),
		p.idmediopublicitario, p.mediopublicitariosugerido, p.contado, p.hipotecaria, convert(varchar(100), p.BlogGUID),
		v.interno from %s p
		join VENDEDOR v on v.codigo = p.idvendedor
		where idprospecto = %s
		""" % (self.dbtable, idprospecto)
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		cursor.close()
		
		externos = ""
		if self.usuario in self.gerentes:
			self.habilitaedicion = False
			if int(row[24]) != 1:
				self.habilitaedicion = True; externos = "and interno <> 1"
			self.GetControl(ID_BUTTONPROSPECTOEDITARLISTCTRL).Enable(self.habilitaedicion)
			
		self.GetControl(ID_TEXTCTRLPROSPECTONOMBRE1).SetValue(self.GetString(row[2]))
		self.GetControl(ID_TEXTCTRLPROSPECTOAPELLIDOPATERNO1).SetValue(self.GetString(row[3]))
		self.GetControl(ID_TEXTCTRLPROSPECTOAPELLIDOMATERNO1).SetValue(self.GetString(row[4]))
		self.GetControl(ID_TEXTCTRLPROSPECTOIMSS).SetValue(self.GetString(row[15]))
		if str(row[5]) == "None": fechanacimiento = ""
		else: fechanacimiento = str(row[5])
		self.GetControl(ID_TEXTCTRLPROSPECTOFECHANACIMIENTO).SetValue(fechanacimiento)
		self.GetControl(ID_TEXTCTRLPROSPECTORFC).SetValue(self.GetString(row[6]))
		self.GetControl(ID_TEXTCTRLPROSPECTOCURP).SetValue(self.GetString(row[7]))
		self.GetControl(ID_TEXTCTRLPROSPECTOTELEFONOCASA).SetValue(str(row[8]))
		self.GetControl(ID_TEXTCTRLPROSPECTOTELEFONOOFICINA).SetValue(str(row[9]))
		self.GetControl(ID_TEXTCTRLPROSPECTOEXTENSIONOFICINA).SetValue(str(row[10]))
		self.GetControl(ID_TEXTCTRLPROSPECTOTELEFONOCELULAR).SetValue(str(row[11]))
		if str(row[17]) == "None": fechaalta = ""
		else: fechaalta = str(row[17])
		self.GetControl(ID_TEXTCTRLPROSPECTOFECHAALTA).SetValue(fechaalta)
		self.GetControl(ID_TEXTCTRLPROSPECTOLUGARTRABAJO).SetValue(self.GetString(row[12]))
		if str(row[18]) == "None": fechacierre = ""
		else: fechacierre = str(row[18])
		self.GetControl(ID_TEXTCTRLPROSPECTOFECHACIERRE).SetValue(fechacierre)
		if int(row[13]) > 0: cuenta = int(row[13])
		else: cuenta = ""
		self.GetControl(ID_TEXTCTRLPROSPECTOCUENTA).SetValue(str(cuenta))
		self.ObtenerGerentes(ID_CHOICEPROSPECTOGERENTE)
		self.DespliegaCombo(ID_CHOICEPROSPECTOGERENTE, int(row[0]))
		filtro = "where desactivado = %s and gerente = %s %s" % (0, int(row[0]), externos)
		self.ObtenerVendedores(filtro, ID_CHOICEPROSPECTOVENDEDOR)
		self.DespliegaCombo(ID_CHOICEPROSPECTOVENDEDOR, int(row[1]))
		self.ObtenerMediosPublicitarios(ID_COMBOPROSPECTOMEDIOPUBLICITARIO)
		self.DespliegaCombo(ID_COMBOPROSPECTOMEDIOPUBLICITARIO, int(row[19]))
		if self.GetString(row[20]) == "None": sugerido = ""
		else: sugerido = self.GetString(row[20])
		self.GetControl(ID_TEXTCTRLPROSPECTOMEDIOPUBLICITARIOSUGERIDO).SetValue(sugerido)
		self.GetControl(ID_TEXTCTRLPROSPECTONOMBRE).SetValue(self.GetString(row[14]))
		self.GetControl(ID_TEXTCTRLPROSPECTOTELEFONO).SetValue(str(row[16]))
		if row[21]:
			self.GetControl(ID_CHECKBOXPROSPECTOCONTADO).SetValue(True)
		else:
			self.GetControl(ID_CHECKBOXPROSPECTOCONTADO).SetValue(False)
		if row[22]:
			self.GetControl(ID_CHECKBOXPROSPECTOHIPOTECARIA).SetValue(True)
		else:
			self.GetControl(ID_CHECKBOXPROSPECTOHIPOTECARIA).SetValue(False)
		self.BlogGUID = str(row[23])
		
		for x in ("NOMBRE,TELEFONO,IMSS,GERENTE,VENDEDOR,MEDIOPUBLICITARIO").split(","):
			if x in ("GERENTE, VENDEDOR"):
				key = eval("ID_CHOICEPROSPECTO%s" % x)
				self.originales[key] = self.GetControl(key).GetLabel()
			elif x == "MEDIOPUBLICITARIO":
				key = eval("ID_COMBOPROSPECTO%s" % x)
				try:
					self.originales[key] = self.GetControl(key).GetValue()
				except:
					self.originales[key] = self.GetControl(key).GetStringSelection()
			else:
				key = eval("ID_TEXTCTRLPROSPECTO%s" % x)
				self.originales[key] = self.GetControl(key).GetValue()
		
		self.FillingARecord = False
		return True

class GixVentasProspectosBuenoOriginal(wx.Frame, GixBase, GixBaseListCtrl):
	coloreable = "ID_TEXTCTRLPROSPECTOID"
	coloreableeditable = False
	ctt = [coloreable, "ID_TEXTCTRLPROSPECTONOMBRE1", "ID_TEXTCTRLPROSPECTOAPELLIDOPATERNO1", "ID_TEXTCTRLPROSPECTOAPELLIDOMATERNO1",
	       "ID_TEXTCTRLPROSPECTOIMSS", "ID_TEXTCTRLPROSPECTOFECHANACIMIENTO",
	       "ID_TEXTCTRLPROSPECTORFC", "ID_TEXTCTRLPROSPECTOCURP", "ID_TEXTCTRLPROSPECTOTELEFONOCASA", "ID_TEXTCTRLPROSPECTOTELEFONOOFICINA",
	       "ID_TEXTCTRLPROSPECTOEXTENSIONOFICINA", "ID_TEXTCTRLPROSPECTOTELEFONOCELULAR",
	       "ID_TEXTCTRLPROSPECTOFECHAALTA", "ID_TEXTCTRLPROSPECTOFECHACIERRE", "ID_TEXTCTRLPROSPECTOLUGARTRABAJO", "ID_TEXTCTRLPROSPECTOCUENTA",
	       "ID_TEXTCTRLPROSPECTOMEDIOPUBLICITARIOSUGERIDO"]
	activecontrolafternewrecord = ID_TEXTCTRLPROSPECTOAPELLIDOPATERNO1
	listctrl = ID_LISTCTRLPROSPECTO
	dbtable  = "gixprospectos"
	controles_tipo_txt = dict(zip(ctt,map(eval,ctt)))
	DicDatesAndTxt = {ID_BITMAPBUTTONPROSPECTOELEGIRFECHAINICIALFILTRO : ID_TEXTCTRLPROSPECTOFECHAINICIALFILTRO,
			  ID_BITMAPBUTTONPROSPECTOELEGIRFECHAFINALFILTRO : ID_TEXTCTRLPROSPECTOFECHAFINALFILTRO,
			  ID_BITMAPBUTTONPROSPECTOELEGIRFECHANACIMIENTO : ID_TEXTCTRLPROSPECTOFECHANACIMIENTO,
			  ID_BITMAPBUTTONPROSPECTOELEGIRFECHAALTA : ID_TEXTCTRLPROSPECTOFECHAALTA}
	
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize,
		     style = wx.DEFAULT_FRAME_STYLE, usuario = None):
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		self.sortoptions = {0:("p.idprospecto asc", "p.idprospecto desc", "desc", ""),
		                    1:("p.apellidopaterno1 asc, p.apellidomaterno1 asc, p.nombre1 asc",
		                       "p.apellidopaterno1 desc, p.apellidomaterno1 desc, p.nombre1 desc", "asc", "< "),
		                    2:("p.apellidomaterno1 asc, p.nombre1 asc, p.apellidopaterno1 asc",
		                       "p.apellidomaterno1 desc, p.nombre1 desc, p.apellidopaterno1 desc", "desc", ""),
		                    3:("p.nombre1 asc, p.apellidopaterno1 asc, p.apellidomaterno1 asc",
		                       "p.nombre1 desc, p.apellidopaterno1 desc, p.apellidomaterno1 desc", "desc", ""),
		                    4:("p.telefonocasa asc", "p.telefonocasa desc", "desc", ""),
		                    5:("p.telefonooficina asc", "p.telefonooficina desc", "desc", ""),
		                    6:("p.telefonocelular asc", "p.telefonocelular desc", "desc", ""),
		                    7:("p.nombre asc", "p.nombre desc", "desc", ""),
		                    8:("p.fechaasignacion asc ", "p.fechaasignacion desc", "desc", ""),
		                    9:("p.fechacierre asc", "p.fechacierre desc", "desc", ""),
		                    10:("p.telefonos asc", "p.telefonos desc", "desc", ""),
		                    11:("p.afiliacionimss asc", "p.afiliacionimss desc", "desc", ""),
		                    12:("v.nombre asc", "v.nombre desc", "desc", ""),
		                    13:("g.nombre asc", "g.nombre desc", "desc", ""),
		                    14:("m.descripcion asc", "m.descripcion desc", "desc", "")}
		self.sortcol, self.prevcol = 1,1
		self.sortlistctrl = self.sortoptions[1][0]
		self.InitialFlags(prospectos = True)
		self.usuario = usuario
		self.ObtenerDerechosUsuarios()
		self.editable = 1
		self.idbanco = -1
		self.ctrlindex = 0
		self.idrefmovto = 0
		self.currentitem = ""
		self.detail = False
		self.exitdetail = False
		self.selecteditems = []
		self.lugardetrabajo = ""
		self.panel = wx.Panel(self, -1)
		ProspectosVentasFuncion(self.panel, True, True)
		self.ObtenerGerentes(); self.ObtenerVendedores(); self.ObtenerMediosPublicitarios()
		self.SetColoreable(False)
		self.originales = {}
		for v in self.controles_tipo_txt.itervalues():
			self.Bind(wx.EVT_TEXT, self.OnText, self.GetControl(v))
			self.originales[v] = ""
		self.Bind(wx.EVT_TEXT, self.OnText, self.GetControl(ID_COMBOPROSPECTOMEDIOPUBLICITARIO))
		self.originales[ID_COMBOPROSPECTOMEDIOPUBLICITARIO] = ""
		for v in self.DicDatesAndTxt.keys():
			self.Bind(wx.EVT_BUTTON, self.OnFechaButton, id = v )
		for v in (ID_CHOICEPROSPECTOGERENTE, ID_CHOICEPROSPECTOVENDEDOR):
			wx.EVT_CHOICE(self, v, self.OnChoiceControl)
			self.originales[v] = ""
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONPROSPECTOLIMPIARFECHANACIMIENTO, self.OnLimpiarFechaNacimiento)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONPROSPECTOLIMPIARFECHAALTA, self.OnLimpiarFechaAlta)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONPROSPECTOLUGARDETRABAJO, self.OnUltimoLugarDeTrabajo)
		
		wx.EVT_BUTTON(self, ID_BUTTONPROSPECTOACEPTARFORM, self.OnAplicarDetalle)
		wx.EVT_BUTTON(self, ID_BUTTONPROSPECTOCANCELARFORM, self.OnSalirDetalle)
		
		self.GetControl(ID_CHOICEPROSPECTOCUENTAFILTRO).SetSelection(0)
		self.GetControl(ID_CHOICEPROSPECTOTIPOFECHAFILTRO).SetSelection(1)
		self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).SetSelection(SetChoiceIndex())
		self.GetControl(ID_CHOICEPROSPECTOVENDEDORFILTRO).SetSelection(SetChoiceIndex())
		self.GetControl(ID_CHOICEPROSPECTOMEDIOPUBLICITARIOFILTRO).SetSelection(SetChoiceIndex())
		
		self.addlistctrlbtn = ID_BUTTONPROSPECTOAGREGARLISTCTRL
		self.editlistctrlbtn = ID_BUTTONPROSPECTOEDITARLISTCTRL
		self.exitlistctrlbtn = ID_BUTTONPROSPECTOCERRARLISTCTRL
		wx.EVT_BUTTON(self, ID_BUTTONPROSPECTOAGREGARLISTCTRL, self.OnNewRecord)
		wx.EVT_BUTTON(self, ID_BUTTONPROSPECTOEDITARLISTCTRL, self.OnEditRecord)
		wx.EVT_BUTTON(self, ID_BUTTONPROSPECTOCERRARLISTCTRL, self.OnExitRecordCtrl)
		wx.EVT_BUTTON(self, ID_BUTTONPROSPECTOREFRESCARLISTCTRL, self.OnRefrescar)
		wx.EVT_BUTTON(self, ID_BUTTONPROSPECTOEXCELLISTCTRL, self.OnPrintExcel)
		self.GetControl(ID_BUTTONPROSPECTOEXCELLISTCTRL).Show(False)
		
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnLCtrlDeselected, id = self.listctrl)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnLCtrl, id = self.listctrl)
		self.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.OnRightClick, id = self.listctrl)
		self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnEditRecord, id = self.listctrl)
		self.Bind(wx.EVT_LIST_COL_CLICK, self.OnClasificarProspectos, id = self.listctrl)
		
		anchos = [-1,80]
		self.CreateStatusBar(2)
		self.SetStatusWidths(anchos)
		self.SetStatusText(u"Ventas", 0)
		self.SetStatusText(u"Prospectos", 1)
		
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearch, id = ID_SEARCHCTRLPROSPECTOIDFILTRO)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnClean, id = ID_SEARCHCTRLPROSPECTOIDFILTRO)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearch, id = ID_SEARCHCTRLPROSPECTOIDFILTRO)
		self.GetControl(ID_SEARCHCTRLPROSPECTOIDFILTRO).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearch, id = ID_SEARCHCTRLPROSPECTOAPELLIDOPATERNOFILTRO)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnClean, id = ID_SEARCHCTRLPROSPECTOAPELLIDOPATERNOFILTRO)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearch, id = ID_SEARCHCTRLPROSPECTOAPELLIDOPATERNOFILTRO)
		self.GetControl(ID_SEARCHCTRLPROSPECTOAPELLIDOPATERNOFILTRO).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearch, id = ID_SEARCHCTRLPROSPECTOAPELLIDOMATERNOFILTRO)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnClean, id = ID_SEARCHCTRLPROSPECTOAPELLIDOMATERNOFILTRO)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearch, id = ID_SEARCHCTRLPROSPECTOAPELLIDOMATERNOFILTRO)
		self.GetControl(ID_SEARCHCTRLPROSPECTOAPELLIDOMATERNOFILTRO).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearch, id = ID_SEARCHCTRLPROSPECTONOMBREFILTRO)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnClean, id = ID_SEARCHCTRLPROSPECTONOMBREFILTRO)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearch, id = ID_SEARCHCTRLPROSPECTONOMBREFILTRO)
		self.GetControl(ID_SEARCHCTRLPROSPECTONOMBREFILTRO).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearch, id = ID_SEARCHCTRLPROSPECTONOMBREANTERIORFILTRO)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnClean, id = ID_SEARCHCTRLPROSPECTONOMBREANTERIORFILTRO)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearch, id = ID_SEARCHCTRLPROSPECTONOMBREANTERIORFILTRO)
		self.GetControl(ID_SEARCHCTRLPROSPECTONOMBREANTERIORFILTRO).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearch, id = ID_SEARCHCTRLPROSPECTOAFILIACIONIMSSFILTRO)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnClean, id = ID_SEARCHCTRLPROSPECTOAFILIACIONIMSSFILTRO)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearch, id = ID_SEARCHCTRLPROSPECTOAFILIACIONIMSSFILTRO)
		self.GetControl(ID_SEARCHCTRLPROSPECTOAFILIACIONIMSSFILTRO).ShowCancelButton(True)

		wx.EVT_CHOICE(self, ID_CHOICEPROSPECTOCUENTAFILTRO, self.OnChoiceFiltro)
		wx.EVT_CHOICE(self, ID_CHOICEPROSPECTOTIPOFECHAFILTRO, self.OnChoiceFiltro)
		wx.EVT_CHOICE(self, ID_CHOICEPROSPECTOVENDEDORFILTRO, self.OnChoiceFiltro)
		wx.EVT_CHOICE(self, ID_CHOICEPROSPECTOMEDIOPUBLICITARIOFILTRO, self.OnChoiceFiltro)
		self.Bind(wx.EVT_TEXT, self.OnFechaFiltro, id = ID_TEXTCTRLPROSPECTOFECHAINICIALFILTRO)
		self.Bind(wx.EVT_TEXT, self.OnFechaFiltro, id = ID_TEXTCTRLPROSPECTOFECHAFINALFILTRO)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONPROSPECTOLIMPIARFECHAINICIALFILTRO, self.OnLimpiarFechaFiltro)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONPROSPECTOLIMPIARFECHAFINALFILTRO, self.OnLimpiarFechaFinalFiltro)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONPROSPECTOLIMPIARGERENTEFITRO, self.OnLimpiarGerenteFiltro)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONPROSPECTOLIMPIARVENDEDORFILTRO, self.OnLimpiarVendedorFiltro)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONPROSPECTOLIMPIARMEDIOPUBLICITARIOFILTRO, self.OnLimpiarMedioPublicitarioFiltro)
		
		wx.EVT_CLOSE(self, self.OnExit)
		
		self.GetControl(ID_TEXTCTRLPROSPECTOIMSS).SetMaxLength(11)
		if self.usuario not in self.specialuser:
			self.GetControl(ID_BITMAPBUTTONPROSPECTOELEGIRFECHAALTA).Show(False)
			self.GetControl(ID_BITMAPBUTTONPROSPECTOLIMPIARFECHAALTA).Show(False)
		if self.usuario not in self.cashuser:
			self.GetControl(ID_CHECKBOXPROSPECTOCONTADO).Enable(False)
			self.GetControl(ID_CHECKBOXPROSPECTOHIPOTECARIA).Enable(False)
			
		self.ChangeNoteBook()
		self.GetControl(ID_NOTEBOOKPROSPECTOLISTCTRL).Move(wx.Point(-1, 5))
		self.GetControl(ID_LISTCTRLPROSPECTO).SetFocus()
		self.limitedias = 10000
		if self.usuario in self.usuariorestringido:
			self.limitedias = 126
			if self.usuario in self.recepcionistas: # or (self.usuario in self.gerentes)
				self.GetControl(ID_BUTTONPROSPECTOAGREGARLISTCTRL).Enable(False)
				self.GetControl(ID_BUTTONPROSPECTOEDITARLISTCTRL).Enable(False)
			if self.usuario in self.gerentes:
				self.GetControl(ID_TEXTPROSPECTOGERENTEFILTRO).Enable(False)
				self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).Enable(False)
				self.GetControl(ID_BITMAPBUTTONPROSPECTOLIMPIARGERENTEFITRO).Enable(False)
				self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).SetSelection(0)
			elif self.usuario in self.vendedores:
				self.GetControl(ID_TEXTPROSPECTOGERENTEFILTRO).Enable(False)
				self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).Enable(False)
				self.GetControl(ID_BITMAPBUTTONPROSPECTOLIMPIARGERENTEFITRO).Enable(False)
				self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).SetSelection(0)
				self.GetControl(ID_TEXTPROSPECTOVENDEDORFILTRO).Enable(False)
				self.GetControl(ID_CHOICEPROSPECTOVENDEDORFILTRO).Enable(False)
				self.GetControl(ID_BITMAPBUTTONPROSPECTOLIMPIARVENDEDORFILTRO).Enable(False)
				self.GetControl(ID_CHOICEPROSPECTOVENDEDORFILTRO).SetSelection(0)
			
			self.FillListCtrl()
		
		#self.ProcesoX()
		
	def OnExit(self, event):
		if self.detail:
			self.SalirDetalle()
		else:
			self.ExitRecordCtrl()
			
	def OnExitRecordCtrl(self, event):
		self.ExitRecordCtrl()
		
	def ExitRecordCtrl(self):
		self.Destroy()
		
	def ProcesoX(self):
		pass
		#sql = """
		#select p.idprospecto, p.idgerente, p.idvendedor, p.fechaasignacion, isnull(t.idtransicion, 0)
		#from gixprospectos p
		#left join gixprospectostransiciones t on t.fkprospecto = p.idprospecto
		#"""
		#sqlx = sql.replace('\t', ' ')
		#sql = sqlx.replace('\n', ' ')
		#cu = r_cn.cursor()
		#cu.execute(str(sql))
		#rows = fetchall(cu)
		#cu.close()
		#if rows:
			#for row in rows:
				#if int(row[4]) == 0:
					#sql = """
					#insert into gixprospectostransiciones
					#(fkprospecto, fecha, transicion, fkgerente, fkvendedor, ciclo, notas)
					#values (%s, '%s', 'I', %s, %s, 1, 'Alta del prospecto')
					#""" % (int(row[0]), row[3], int(row[1]), int(row[2]))
					#transicion, trash = self.QueryUpdateRecord(sql)
					#if not transicion:
						#Mensajes().Info(self, u"Problemas al insertar transiciones\n%s" % sql, u"Atenci�n")
				#else:
					#sql = """
					#update gixprospectostransiciones set fecha = '%s' where idtransicion = %s
					#""" % (row[3], int(row[4]))
					#transicion, trash = self.QueryUpdateRecord(sql)
					#if not transicion:
						#Mensajes().Info(self, u"Problemas al actualizar transiciones\n%s" % sql, u"Atención")
			
		#return
		
	def SetLogProspecto(self, prospecto = 0, registros = 0):
		idprospecto = int(prospecto)
		sql = ""
		if not registros:
			alavista = self.GetControl(ID_TEXTCTRLPROSPECTOTOTALREGISTROS).GetValue()
			try:
				registros = int(alavista)
			except:
				registros = 0
		if idprospecto:
			sql = """
			insert into gixprospectoslog
			(alavista, usuario, fkprospecto, fkgerente, fkvendedor, nombre1, apellidopaterno1, apellidomaterno1,
			fechadenacimiento, rfc, curp, telefonocasa, telefonooficina, extensionoficina, telefonocelular,
			lugardetrabajo, cuenta, nombre, afiliacionimss, telefonos, fechaasignacion, fechacierre, fechaseguimiento,
			fechanoseguimiento, fkmediopublicitario, mediopublicitariosugerido, congelado, contado, hipotecaria, BlogGUID)
			select %s, '%s', idprospecto, idgerente, idvendedor, nombre1, apellidopaterno1, apellidomaterno1,
			fechadenacimiento, rfc, curp, telefonocasa, telefonooficina, extensionoficina, telefonocelular,
			lugardetrabajo, cuenta, nombre, afiliacionimss, telefonos, fechaasignacion, fechacierre, fechaseguimiento,
			fechanoseguimiento, idmediopublicitario, mediopublicitariosugerido, congelado, contado, hipotecaria, BlogGUID
			from %s where idprospecto = %s
			""" % (registros, self.usuario, self.dbtable, idprospecto)
			todook, trash = self.QueryUpdateRecord(sql)
			if not todook:
				Mensajes().Info(self, u"Problemas al actualizar log (prospectos)\n%s" % sql, u"Atenci�n")
		elif registros:
			sql = """
			insert into gixprospectoslog
			(alavista, usuario, fkprospecto, fkgerente, fkvendedor, nombre1, apellidopaterno1, apellidomaterno1,
			fechadenacimiento, rfc, curp, telefonocasa, telefonooficina, extensionoficina, telefonocelular,
			lugardetrabajo, cuenta, nombre, afiliacionimss, telefonos, fechaasignacion, fechacierre, fechaseguimiento,
			fechanoseguimiento, fkmediopublicitario, mediopublicitariosugerido, congelado, contado, hipotecaria)
			values (%s, '%s', 0, 0, 0, '<<Browser>>', '', '', '', '', '', '', '', '', '', '', 0, '', '', '', '', '', '',
			'', 0, '', 0, 0, 0)
			""" % (registros, self.usuario)
			todook, trash = self.QueryUpdateRecord(sql)
			if not todook:
				Mensajes().Info(self, u"Problemas al actualizar log (registros)\n%s" % sql, u"Atenci�n")
		else:
			pass
			
	def OnClasificarProspectos(self, event):
		self.sortcol = event.GetColumn()
		if self.sortoptions[self.sortcol][2] == "desc":
			self.sortlistctrl = self.sortoptions[self.sortcol][0]
			self.sortoptions[self.sortcol] = (self.sortoptions[self.sortcol][0],
			                                  self.sortoptions[self.sortcol][1], "asc", "< ")
		else:
			self.sortlistctrl = self.sortoptions[self.sortcol][1]
			self.sortoptions[self.sortcol] = (self.sortoptions[self.sortcol][0],
			                                  self.sortoptions[self.sortcol][1], "desc", "> ")
		if self.prevcol != self.sortcol:
			self.sortoptions[self.prevcol] = (self.sortoptions[self.prevcol][0],
			                                  self.sortoptions[self.prevcol][1],
			                                  self.sortoptions[self.prevcol][2], "")
		self.FillListCtrl()
		self.prevcol = self.sortcol
		event.Skip()
		
	def OnUltimoLugarDeTrabajo(self, event):
		if self.lugardetrabajo:
			self.GetControl(ID_TEXTCTRLPROSPECTOLUGARTRABAJO).SetValue(self.lugardetrabajo)
		
	def ChangeNoteBook(self):
		if wx.Platform == '__WXMSW__':
			self.ActiveNoteBook(ID_NOTEBOOKPROSPECTOLISTCTRL, ID_NOTEBOOKPROSPECTOFORM, 993, 680)
		elif wx.Platform == '__WXMAC__':
			self.ActiveNoteBook(ID_NOTEBOOKPROSPECTOLISTCTRL, ID_NOTEBOOKPROSPECTOFORM, 1060, 685)
		else:
			self.ActiveNoteBook(ID_NOTEBOOKPROSPECTOLISTCTRL, ID_NOTEBOOKPROSPECTOFORM, 1080, 698)
		
	def ObtenerDerechosUsuarios(self):
		self.revinculador = ["GMV"] # Revinculador(es) con m�xima autoridad (incluye 5 d�as al final del 1er. ciclo)
		self.specialuser = [] #["JORGE H", "ELIZABETH"] # Pueden modificar la fecha de alta e imponer el n�mero del imss
		self.cashuser = ["JORGE H", "ELIZABETH"] # Pueden asignar prospectos (ventas) de contado e hipotecaria
		self.recepcionistas = {"KARIME":0}
		self.usuariorestringido, self.gerentes, self.vendedores = {}, {}, {}
		
		sql = "select Usuario, fkgerente from Usuarios where fkgerente is not null"
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				if row[1] is not None:
					if int(row[1]) > 0:
						self.gerentes[str(row[0])] = int(row[1])
					
		sql = "select usuario, fkvendedor from gixanip where fkvendedor is not null"
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				if row[1] is not None:
					if int(row[1]) > 0:
						self.vendedores[str(row[0])] = int(row[1])
					
		for dic in (self.gerentes, self.vendedores, self.recepcionistas):
			for key, value in dic.iteritems():
				self.usuariorestringido[key] = value
				
	def ObtenerGerentes(self, idctrl = ID_CHOICEPROSPECTOGERENTEFILTRO):
		condicion = ""; sigue = True
		if self.usuario in self.usuariorestringido:
			if self.usuario not in self.recepcionistas:
				if self.usuario in self.gerentes:
					condicion = "where codigo = %s" % self.usuariorestringido[self.usuario]
				elif self.usuario in self.vendedores:
					sql = "select gerente from VENDEDOR where codigo = %s" % self.usuariorestringido[self.usuario]
					cu = r_cn.cursor()
					cu.execute(str(sql))
					row = fetchone(cu)
					cu.close()
					if row is not None:
						condicion = "where codigo = %s" % int(row[0])
					else:
						sigue = False
				else:
					sigue = False
					
		control = self.GetControl(idctrl)
		control.Enable(False)
		control.Show(False)
		control.Clear()
		
		if sigue:
			sql = """
			select codigo, nombre from gerentesventas %s order by nombre
			""" % condicion
			cu = r_cn.cursor()
			cu.execute(str(sql))
			rows = fetchall(cu)
			cu.close()
			if rows:
				for row in rows:
					control.Append(str(row[1]).decode("iso8859-1"), int(row[0]))
				if control.GetCount() == 1:
					control.SetSelection(0)
			else:
				sigue = False
				
		control.Show(True)
		control.Enable(True)
		self.GetControl(ID_BUTTONPROSPECTOREFRESCARLISTCTRL).Enable(sigue)
		
	def ObtenerVendedores(self, filtro = "", idctrl = ID_CHOICEPROSPECTOVENDEDORFILTRO):
		nombrevendedor = False
		sigue = True
		if self.usuario in self.usuariorestringido:
			if self.usuario not in self.recepcionistas:
				if not filtro or self.usuario in self.vendedores:
					if self.usuario in self.gerentes:
						if idctrl == ID_CHOICEPROSPECTOVENDEDORFILTRO:
							filtro = "where gerente = %s" % self.usuariorestringido[self.usuario]
						else:
							filtro = "where gerente = %s and interno <> 1" % self.usuariorestringido[self.usuario]
					elif self.usuario in self.vendedores:
						gtectrl = self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO)
						inx = gtectrl.GetSelection()
						gerente = gtectrl.GetClientData(inx)
						filtro = "where codigo = %s and gerente = %s" % (self.usuariorestringido[self.usuario], int(gerente))
						nombrevendedor = True
					else:
						sigue = False
					
		control = self.GetControl(idctrl)
		control.Enable(False)
		control.Show(False)
		control.Clear()
		
		if sigue:
			if filtro:
				filtro += " and desactivado <> 1"
			else:
				filtro = "where desactivado <> 1"
			sql = """
			select codigo, nombre from VENDEDOR %s order by nombre
			""" % (filtro)
			cu = r_cn.cursor()
			cu.execute(str(sql))
			rows = fetchall(cu)
			cu.close()
			if rows:
				for row in rows:
					control.Append(str(row[1]).decode("iso8859-1"), int(row[0]))
				if control.GetCount() == 1:
					control.SetSelection(0)
					if nombrevendedor:
						self.SetTitle(u"Ventas/Prospectos  -  Vendedor: %s" % self.GetString(row[1]))
				else:
					self.SetTitle(u"Ventas/Prospectos  -  Usuario: %s" % self.usuario)
			else:
				sigue = False
				
		control.Show(True)
		control.Enable(True)
		self.GetControl(ID_BUTTONPROSPECTOREFRESCARLISTCTRL).Enable(sigue)
		
	def ObtenerMediosPublicitarios(self, id = ID_CHOICEPROSPECTOMEDIOPUBLICITARIOFILTRO):
		control = self.GetControl(id)
		control.Enable(False)
		control.Show(False)
		control.Clear()
		sql = """
		select idmediopublicitario, descripcion from gixmediospublicitarios
		where estatus = 'A' order by descripcion
		"""
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(str(row[1]).decode("iso8859-1"), int(row[0]))
				
		control.Show(True)
		control.Enable(True)
		
	def ObtenerFechaDelDia(self):
		sql = "select convert(varchar(10), getdate(), 103)"
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		self.GetControl(ID_TEXTCTRLPROSPECTOFECHAALTA).SetValue("%s" % str(row[0]))
		
	def OnDoSearch(self, evt):
		self.FillListCtrl()

	def OnClean(self, evt):
		ctrlid = evt.GetId()
		self.GetControl(ctrlid).SetValue("")
		self.FillListCtrl()
		
	def OnChoiceControl(self, event):
		id = event.GetId()
		self.ChoiceControl(id)
		if id == ID_CHOICEPROSPECTOGERENTE:
			inx = self.GetControl(id).GetSelection()
			gerente = self.GetControl(id).GetClientData(inx)
			filtro = "where desactivado = %s and gerente = %s" % (0, gerente)
			self.ObtenerVendedores(filtro, ID_CHOICEPROSPECTOVENDEDOR)
			self.ChoiceControl(ID_CHOICEPROSPECTOVENDEDOR)
		
	def ChoiceControl(self, id):
		if not self.FillingARecord:
			if self.GetControl(id).GetLabel() <> self.originales[id]:
				self.GetControl(id).SetBackgroundColour(wx.CYAN)
				self.GetControl(id).Refresh()
				choice = True
			else:
				self.GetControl(id).SetBackgroundColour(wx.WHITE)
				self.GetControl(id).Refresh()
				choice = False
			
			if self.OriginalesDistintos() or choice:
				self.GetControl(ID_BUTTONPROSPECTOACEPTARFORM).Enable(True)
			else:
				self.GetControl(ID_BUTTONPROSPECTOACEPTARFORM).Enable(False)
				
	def GetGerente(self, idgerente):
		sql = "select nombre from gerentesventas where codigo = %s" % idgerente
		cu = r_cn.cursor()
		cu.execute(sql)
		row = fetchone(cu)
		cu.close()
		return self.GetString(row[0])
				
	def OnRevincularProspecto(self, event):
		filtro = ""; continua = True
		inx = self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).GetSelection()
		if inx > -1 and self.usuario not in self.revinculador:
			idgerente = self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).GetClientData(inx)
			filtro = "where gerente = %s and desactivado <> 1 and interno = 1" % idgerente
			nombregte = self.GetGerente(idgerente)
		else:
			lGerenteNombre = []; lGerenteCodigo = []
			sql = "select codigo, nombre from gerentesventas order by nombre"
			cursor = r_cn.cursor()
			cursor.execute(sql)
			while True:
				row = fetchone(cursor)
				if row is None:
					break
				lGerenteCodigo.append(int(row[0]))
				lGerenteNombre.append(self.GetStringFromField(row[1]))
				
			cursor.close()
			if len(lGerenteCodigo) > 0:
				inx = wx.GetSingleChoiceIndex("Opciones", u"Elija el Gerente Destino", lGerenteNombre, parent = None)
				if inx > -1:
					idgerente = lGerenteCodigo[inx]
					filtro = "where gerente = %s and desactivado <> 1 and interno = 1" % idgerente
					nombregte = lGerenteNombre[inx]
				else:
					continua = False
			else:
				Mensajes().Info(self, u"� No existen gerentes registrados !", u"Atenci�n")
				continua = False
				
		if continua:
			lVendedorNombre = []; lVendedorCodigo = []
			sql = "select codigo, nombre from VENDEDOR %s order by nombre" % filtro
			cursor = r_cn.cursor()
			cursor.execute(sql)
			while True:
				row = fetchone(cursor)
				if row is None:
					break
				lVendedorCodigo.append(int(row[0]))
				lVendedorNombre.append(self.GetStringFromField(row[1]))
				
			cursor.close()
			if len(lVendedorCodigo) > 0:
				inx = wx.GetSingleChoiceIndex("Opciones", u"Elija el Vendedor Destino", lVendedorNombre, parent = None)
				if inx > -1:
					idvendedor = lVendedorCodigo[inx]
					if Mensajes().YesNo(self, u"Prospecto(s) a revincular: %s\nCantidad de prospectos: %s\n" \
					                    u"Gerente destino: %s\n"
						            u"Vendedor destino: %s\n\n"
						            u"� Desea realmente llevar a cabo la revinculaci�n ?" \
						            % (self.selecteditems, len(self.selecteditems),
					                       nombregte, lVendedorNombre[inx]), u"Confirmaci�n"):
						self.Revincula(idgerente, idvendedor)
						self.FillListCtrl()
			else:
				Mensajes().Info(self, u"� El gerente no tiene asignados vendedores !", u"Atenci�n")
			
	def Revincula(self, idgerente, idvendedor):
		wx.BeginBusyCursor()
		setListForQuery = "idgerente = %s, idvendedor = %s" % (idgerente, idvendedor)
		for idprospecto in self.selecteditems:
			sql = """
			select p.idvendedor, v.nombre, g.nombre from %s p
			join VENDEDOR v on v.codigo = p.idvendedor
			join gerentesventas g on g.codigo = p.idgerente
			where p.idprospecto = %s
			""" % (self.dbtable, idprospecto)
			cu = r_cn.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			cu.close()
			codigoorigen = int(row[0]); nombreorigen = self.GetString(row[1]); gerenteorigen = self.GetString(row[2])
			if codigoorigen == idvendedor:
				Mensajes().Info(self, u"Se trato de revincular el prospecto %s\n" \
				                u"del vendedor %s\nal mismo vendedor.\n\n" \
				                u"Recuerde que esto no es posible." % (idprospecto, nombreorigen))
			else:
				sql = """
				update %s set %s where idprospecto = %s
				""" % (self.dbtable, setListForQuery, idprospecto)
				queTal = self.QueryUpdateRecord(sql)
				if queTal:
					self.SetLogProspecto(idprospecto)
					sql = "select max(ciclo) from gixprospectostransiciones where fkprospecto = %s" % idprospecto
					cu = r_cn.cursor()
					cu.execute(str(sql))
					row = fetchone(cu)
					cu.close()
					ciclo = int(row[0])
					sql = """ 
					insert into gixprospectostransiciones
					(fkprospecto, fecha, transicion, fkgerente, fkvendedor, ciclo, notas)
					values (%s, getdate(), 'R', %s, %s, %s, 'Revinculacion del prospecto')
					""" % (idprospecto, idgerente, idvendedor, ciclo)
					transicion, trash = self.QueryUpdateRecord(sql)
					if not transicion:
						Mensajes().Info(self, u"Problemas al actualizar transiciones\n%s" % sql, u"Atenci�n")
					sql = """
					select convert(varchar(100), BlogGUID) from %s where idprospecto = %s
					""" % (self.dbtable, idprospecto)
					cu = r_cn.cursor()
					cu.execute(str(sql))
					row = fetchone(cu)
					cu.close()
					blogprospecto = str(row[0])
					sql = """
					insert into Blogs
					(BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension, Estatus)
					values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
					""" % (blogprospecto, self.usuario,
					       u"Revinculaci�n proveniente del vendedor: %s, Gerente: %s" % (nombreorigen, gerenteorigen),
					       "", "", "")
					if not self.QueryUpdateRecord(sql):
						Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
					if ciclo == 1:
						sql = """
						select idtransicion from gixprospectostransiciones
						where fkprospecto = %s and transicion = 'L' and ciclo = 1
						""" % idprospecto
						cu = r_cn.cursor()
						cu.execute(str(sql))
						transicion = cu.fetchone()
						cu.close()
						if transicion is not None:
							aviso = "Revinculacion directa por el director comercial (Inicio 2do. ciclo)"
							sql = """
							insert into gixprospectostransiciones
							(fkprospecto, fecha, transicion, fkgerente, fkvendedor, ciclo, notas)
							values (%s, getdate(), 'I', %s, %s, 2, '%s')
							""" % (idprospecto, idgerente, idvendedor, aviso)
							if not self.QueryUpdateRecord(sql):
								Mensajes().Info(self, u"Problemas al agregar transici�n", u"Atenci�n")
							sql = """
							insert into Blogs
							(BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario,
							Extension, Estatus)
							values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
							""" % (blogprospecto, self.usuario, aviso, "", "", "")
							if not self.QueryUpdateRecord(sql):
								Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
					
		wx.EndBusyCursor()
		
	def OnColoresProspecto(self, event):
		Mensajes().Info(self, u"Azul.- Prospecto en el primer ciclo (primeros 40 d�as).\n" \
		                u"Amarillo.- Prospecto en el primer ciclo (�ltimos 20 d�as).\n\n" \
		                u"Verde.- Prospecto en el segundo ciclo (primeros 40 d�as).\n" \
		                u"Naranja.- Prospecto en el segundo ciclo (�ltimos 20 d�as).\n\n" \
		                u"Rojo.- Prospecto que pertenece a un vendedor inhabilitado." \
		                , u"Significado de los Colores")
				
	def OnHistoriaCiclo(self, event):
		goal = ((90, u"Fecha"), (300, u"Transici�n"), (100, u"Vendedor"), (100, u"Gerente"))
		query = """
		select convert(varchar(10), t.fecha, 103), t.notas, v.nombre, g.nombre
		from gixprospectostransiciones t
		join gerentesventas g on g.codigo = t.fkgerente
		join VENDEDOR v on v.codigo = t.fkvendedor
		where fkprospecto = %s order by t.fecha desc
		""" % int(self.fkprospecto)
		title = u"Historia del Ciclo del %s %s" % (self.idtitleblog, self.idregistryblog)
		table = "gixprospectostransiciones"
		frame = GixFrameCatalogo(self, -1, title, wx.Point(20,20), wx.Size(800,600), 
					 wx.DEFAULT_FRAME_STYLE, None, None, None, table, goal, query,
					 gridsize = [680,350], color = "AQUAMARINE")
		frame.Centre(wx.BOTH)
		frame.Show(True)
		
	def OnRightClick(self, event):
		self.fkprospecto = self.GetControl(ID_TEXTCTRLPROSPECTOID).GetValue()
		idregistryblog = "%s " % self.fkprospecto
		for id in (ID_TEXTCTRLPROSPECTOAPELLIDOPATERNO1, " ", ID_TEXTCTRLPROSPECTOAPELLIDOMATERNO1, ", ", ID_TEXTCTRLPROSPECTONOMBRE1):
			if str(id).isdigit():
				idregistryblog += self.GetControl(id).GetValue().strip()
			else:
				idregistryblog += id
		idtitleblog = "Prospecto"
		self.OpenBlogPopupMenu(idregistryblog, idtitleblog)

	def ActiveNoteBook(self, nbtrue, nbfalse, width, height):
		self.GetControl(nbtrue).Show(False)
		self.GetControl(nbfalse).Show(False)
		self.SetSize(wx.Size(width, height))
		self.CentreOnScreen()
		self.GetControl(nbtrue).Show(True)
	
	def OnLimpiarFechaNacimiento(self, event):
		self.GetControl(ID_TEXTCTRLPROSPECTOFECHANACIMIENTO).SetValue("")
		
	def OnLimpiarFechaAlta(self, event):
		self.GetControl(ID_TEXTCTRLPROSPECTOFECHAALTA).SetValue("")
		
	def OnLimpiarFechaFiltro(self, event):
		self.GetControl(ID_TEXTCTRLPROSPECTOFECHAINICIALFILTRO).SetValue("")
		self.GetControl(ID_TEXTCTRLPROSPECTOFECHAFINALFILTRO).SetValue("")
	
	def OnLimpiarFechaFinalFiltro(self, event):
		self.GetControl(ID_TEXTCTRLPROSPECTOFECHAFINALFILTRO).SetValue("")
		
	def OnLimpiarGerenteFiltro(self, event):
		self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).SetSelection(SetChoiceIndex())
		
	def OnLimpiarVendedorFiltro(self, event):
		self.GetControl(ID_CHOICEPROSPECTOVENDEDORFILTRO).SetSelection(SetChoiceIndex())
		self.RefrescoCondicional()
		
	def OnLimpiarMedioPublicitarioFiltro(self, event):
		self.GetControl(ID_CHOICEPROSPECTOMEDIOPUBLICITARIOFILTRO).SetSelection(SetChoiceIndex())
		self.RefrescoCondicional()
		
	def RevisaAfiliacionImss(self, afiliacionimss):
		sql = """select convert(varchar(10), fechaasignacion, 103), idprospecto,
		rtrim(ltrim(apellidopaterno1)) + ' ' + rtrim(ltrim(apellidomaterno1)) + ', ' + rtrim(ltrim(nombre1)), rtrim(ltrim(nombre))
		from gixprospectos
		where afiliacionimss = '%s' and congelado = 0 order by fechaasignacion
		""" % str(afiliacionimss)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			afiliaciones = rows
		else:
			afiliaciones = []
			
		return afiliaciones
	
	def IdDuplicado(self, afiliaciones):
		ids = ""
		for fechaalta, idprospecto, nombre1, nombre in afiliaciones:
			nom = nombre1.replace(",", "")
			nom = nom.replace(" ", "")
			if nom:
				ids += u"Alta: %s  Id: %s  %s\n" % (fechaalta, int(idprospecto), self.GetString(nombre1))
			else:
				ids += u"Alta: %s  Id: %s  %s\n" % (fechaalta, int(idprospecto), self.GetString(nombre))
			
		return ids
		
	def OnAplicarDetalle(self, event):
		idprospecto = self.GetControl(ID_TEXTCTRLPROSPECTOID).GetValue()
		if idprospecto.strip() == "":
			agrega = True
		else:
			agrega = False
		ctrl = self.GetControl(ID_TEXTCTRLPROSPECTONOMBRE)
		nombre = ctrl.GetValue().strip()
		if self.ExisteProspecto(nombre, agrega):
			if Mensajes().YesNo(self, u"Ya existe el prospecto: %s\n\n" \
					    u"� Desea localizarlo ?" % nombre, u"Confirmaci�n"):
				ctrl.SetValue("")
				self.GetControl(ID_TEXTCTRLPROSPECTONOMBREFILTRO).SetValue(str(nombre.encode("iso8859-1")))
				self.GetControl(ID_CHOICEPROSPECTOTIPOFECHAFILTRO).SetSelection(0)
				self.GetControl(ID_TEXTCTRLPROSPECTOFECHAINICIALFILTRO).SetValue("")
				self.GetControl(ID_TEXTCTRLPROSPECTOFECHAFINALFILTRO).SetValue("")
				self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).SetSelection(SetChoiceIndex())
				self.GetControl(ID_CHOICEPROSPECTOVENDEDORFILTRO).SetSelection(SetChoiceIndex())
				self.GetControl(ID_CHOICEPROSPECTOMEDIOPUBLICITARIOFILTRO).SetSelection(SetChoiceIndex())
				self.GetControl(ID_TEXTCTRLPROSPECTOAFILIACIONIMSSFILTRO).Clear()
				self.SalirDetalle()
				self.FillListCtrl()
			else:
				ctrl.SetValue(""); ctrl.SetFocus()
		else:
			self.NewFlag = False
			self.Text()
			if not self.NewFlag:
				afiliacionimss = self.GetControl(ID_TEXTCTRLPROSPECTOIMSS).GetValue()
				if not afiliacionimss and (self.GetControl(ID_CHECKBOXPROSPECTOCONTADO).IsChecked() or
				                           self.GetControl(ID_CHECKBOXPROSPECTOHIPOTECARIA).IsChecked()):
					self.SaveRecord()
					self.detail = False
				elif afiliacionimss.isdigit():
					if len(afiliacionimss) == 11:
						afiliaciones = self.RevisaAfiliacionImss(afiliacionimss)
						if agrega:
							if len(afiliaciones) == 0:
								self.SaveRecord()
								self.detail = False
							else:
								if self.usuario in self.specialuser:
									if Mensajes().YesNo(self, u"� El n�mero de afiliaci�n al I.M.S.S. ya existe !\n\n" \
											    u"Duplicidad en el(los) siguiente(s) Id(s):\n%s\n" \
											    u"� Desea continuar con el registro del prospecto ?" \
											    % self.IdDuplicado(afiliaciones), u"Confirmaci�n"):
										self.SaveRecord()
										self.detail = False
									else:
										pass
								else:
									Mensajes().Error(self, u"� El n�mero de afiliaci�n al I.M.S.S. ya existe !", u"Error")
						else:
							if len(afiliaciones) == 0:
								self.SaveRecord()
								self.detail = False
							elif len(afiliaciones) == 1:
								if int(afiliaciones[0][1]) == int(idprospecto):
									self.SaveRecord()
									self.detail = False
								else:
									if self.usuario in self.specialuser:
										if Mensajes().YesNo(self, u"� El n�mero de afiliaci�n al I.M.S.S. ya existe !\n\n" \
												    u"Duplicidad en el(los) siguiente(s) Id(s):\n%s\n" \
												    u"� Desea continuar con el registro del prospecto ?" \
												    % self.IdDuplicado(afiliaciones), u"Confirmaci�n"):
											self.SaveRecord()
											self.detail = False
										else:
											pass
									else:
										Mensajes().Error(self, u"� El n�mero de afiliaci�n al I.M.S.S. ya existe !", u"Error")
							else:
								if self.usuario in self.specialuser:
									if Mensajes().YesNo(self, u"� El n�mero de afiliaci�n al I.M.S.S. ya existe !\n\n" \
											    u"Duplicidad en el(los) siguiente(s) Id(s):\n%s\n" \
											    u"� Desea continuar con el registro del prospecto ?" \
											    % self.IdDuplicado(afiliaciones), u"Confirmaci�n"):
										self.SaveRecord()
										self.detail = False
									else:
										pass
								else:
									Mensajes().Error(self, u"� El n�mero de afiliaci�n al I.M.S.S. ya existe !", u"Error")
					else:
						Mensajes().Error(self, u"� Por favor revise el n�mero de afiliaci�n al I.M.S.S. !", u"Error")
				else:
					Mensajes().Error(self, u"� Por favor revise el n�mero de afiliaci�n al I.M.S.S. !", u"Error")
	
	def OnSalirDetalle(self, event):
		self.SalirDetalle()
		
	def SalirDetalle(self):
		if self.currentitem:
			self.LCtrl()
			
		self.ChangeNoteBook()
		if (self.usuario in self.usuariorestringido) and (self.usuario not in self.vendedores) and \
		   (self.usuario not in self.gerentes):
			self.GetControl(ID_BUTTONPROSPECTOAGREGARLISTCTRL).Enable(False)
			self.GetControl(ID_BUTTONPROSPECTOEDITARLISTCTRL).Enable(False)
		else:
			self.GetControl(ID_BUTTONPROSPECTOAGREGARLISTCTRL).Enable(True)
			self.GetControl(ID_BUTTONPROSPECTOEDITARLISTCTRL).Enable(True)
		self.GetControl(ID_BUTTONPROSPECTOCERRARLISTCTRL).Enable(True)
		self.GetControl(ID_LISTCTRLPROSPECTO).SetFocus()
		self.detail = False
		
		if self.usuario in self.usuariorestringido:
			if self.usuario in self.recepcionistas: # self.usuario in self.gerentes or 
				self.GetControl(ID_BUTTONPROSPECTOAGREGARLISTCTRL).Enable(False)
				self.GetControl(ID_BUTTONPROSPECTOEDITARLISTCTRL).Enable(False)
			if self.usuario in self.gerentes:
				self.GetControl(ID_TEXTPROSPECTOGERENTEFILTRO).Enable(False)
				self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).Enable(False)
				self.GetControl(ID_BITMAPBUTTONPROSPECTOLIMPIARGERENTEFITRO).Enable(False)
				self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).SetSelection(0)
			elif self.usuario in self.vendedores:
				self.GetControl(ID_TEXTPROSPECTOGERENTEFILTRO).Enable(False)
				self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).Enable(False)
				self.GetControl(ID_BITMAPBUTTONPROSPECTOLIMPIARGERENTEFITRO).Enable(False)
				self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).SetSelection(0)
				self.GetControl(ID_TEXTPROSPECTOVENDEDORFILTRO).Enable(False)
				self.GetControl(ID_CHOICEPROSPECTOVENDEDORFILTRO).Enable(False)
				self.GetControl(ID_BITMAPBUTTONPROSPECTOLIMPIARVENDEDORFILTRO).Enable(False)
				self.GetControl(ID_CHOICEPROSPECTOVENDEDORFILTRO).SetSelection(0)
				
	def RefrescoCondicional(self):
		if self.usuario in self.usuariorestringido:
			self.FillListCtrl()
		
	def OnRefrescar(self, event):
		self.FillListCtrl()

	def OnEditRecord(self, event):
		if (self.usuario in self.usuariorestringido) and (self.usuario not in self.vendedores) and \
		   (self.usuario not in self.gerentes):
			return
		elif self.usuario in self.gerentes:
			if not self.habilitaedicion:
				return
		if self.LCtrl():
			if wx.Platform == '__WXMSW__':
				self.ActiveNoteBook(ID_NOTEBOOKPROSPECTOFORM, ID_NOTEBOOKPROSPECTOLISTCTRL, 743, 700)
				self.GetControl(ID_NOTEBOOKPROSPECTOFORM).SetSize(wx.Size(725, 635))
			elif wx.Platform == '__WXMAC__':
				self.ActiveNoteBook(ID_NOTEBOOKPROSPECTOFORM, ID_NOTEBOOKPROSPECTOLISTCTRL, 730, 800)
				self.GetControl(ID_NOTEBOOKPROSPECTOFORM).SetSize(wx.Size(720, 740))
			else:
				self.ActiveNoteBook(ID_NOTEBOOKPROSPECTOFORM, ID_NOTEBOOKPROSPECTOLISTCTRL, 752, 792)
				self.GetControl(ID_NOTEBOOKPROSPECTOFORM).SetSize(wx.Size(742, 740))

			self.GetControl(ID_NOTEBOOKPROSPECTOFORM).Refresh()
			self.GetControl(ID_BUTTONPROSPECTOACEPTARFORM).Enable(True)
			self.GetControl(ID_BUTTONPROSPECTOCANCELARFORM).Enable(True)
			self.detail = True
			if self.lugardetrabajo:
				self.GetControl(ID_BITMAPBUTTONPROSPECTOLUGARDETRABAJO).Enable(True)
			else:
				self.GetControl(ID_BITMAPBUTTONPROSPECTOLUGARDETRABAJO).Enable(False)
			
	def OnChoiceFiltro(self, event):
		self.RefrescoCondicional()
		
	def OnFechaFiltro(self, event):
		id = event.GetId()
		if id == ID_TEXTCTRLPROSPECTOFECHAINICIALFILTRO:
			habilitado = self.GetControl(ID_TEXTCTRLPROSPECTOFECHAFINALFILTRO).IsEnabled()
			if self.GetControl(id).GetValue():
				if not habilitado:
					self.GetControl(ID_TEXTPROSPECTOFECHAFINALFILTRO).Enable(True)
					self.GetControl(ID_TEXTCTRLPROSPECTOFECHAFINALFILTRO).Enable(True)
					self.GetControl(ID_BITMAPBUTTONPROSPECTOELEGIRFECHAFINALFILTRO).Enable(True)
					self.GetControl(ID_BITMAPBUTTONPROSPECTOLIMPIARFECHAFINALFILTRO).Enable(True)
			else:
				if habilitado:
					self.GetControl(ID_TEXTPROSPECTOFECHAFINALFILTRO).Enable(False)
					self.GetControl(ID_TEXTCTRLPROSPECTOFECHAFINALFILTRO).Enable(False)
					self.GetControl(ID_BITMAPBUTTONPROSPECTOELEGIRFECHAFINALFILTRO).Enable(False)
					self.GetControl(ID_BITMAPBUTTONPROSPECTOLIMPIARFECHAFINALFILTRO).Enable(False)
					
		self.RefrescoCondicional()
				
	def OnPrintExcel(self, event):
		tabla = self.dbtable
		meta = ((14,"Id") , (200,u"Prospecto"), (70,u"Alta"), (70,u"Cierre"), (70,u"Tel�fono(s)"), (70,u"No. IMSS"),
			(70,u"Seguimiento"), (70,u"No Seguimiento"), (200,u"Vendedor"), (200,u"Gerente"), (200,u"Medio Publicitario"))
		query = self.FillListCtrl(printexcel = True)
		titulo = u"Prospectos"
		self.DisplayGrid(tabla, meta, query, titulo)

	def FillListCtrl(self, display= 'first', printexcel = False):
		wx.BeginBusyCursor()
		
		warnings.warn("<<Entro - FillListCtrl>>")
		
		self.selecteditems = []
		self.sqlfiltro = ""
		tipofechafiltro = ""
		tipofecha = self.GetControl(ID_CHOICEPROSPECTOTIPOFECHAFILTRO).GetSelection()
		if tipofecha in (1,2):
			tipofechadict = {1:("p.fechaasignacion", "(p.fechacierre is Null)"),
			                 2:("p.fechacierre", "(p.fechacierre is not Null)")}
			tipofechafiltro = tipofechadict[tipofecha][0]
			self.sqlfiltro = tipofechadict[tipofecha][1]
			
		fechainicial = self.GetControl(ID_TEXTCTRLPROSPECTOFECHAINICIALFILTRO).GetValue()
		if fechainicial:
			try:
				fecha_dia, fecha_mes, fecha_ano = fechainicial.split('/')
				fechainicial = "'%s/%02d/%02d'" % (fecha_ano, int(fecha_mes), int(fecha_dia))
				fechafinal = self.GetControl(ID_TEXTCTRLPROSPECTOFECHAFINALFILTRO).GetValue()
				if fechafinal:
					fecha_dia, fecha_mes, fecha_ano = fechafinal.split('/')
					fechafinal = "'%s/%02d/%02d'" % (fecha_ano, int(fecha_mes), int(fecha_dia))
					if fechainicial > fechafinal:
						control = self.GetControl(ID_TEXTCTRLPROSPECTOTOTALREGISTROS)
						control.SetBackgroundColour(wx.Colour(153,255,153))
						control.SetForegroundColour(wx.NamedColour("BLACK"))
						control.SetValue("0.00")
						wx.EndBusyCursor()
						Mensajes().Info(self, u"� La Fecha Inicial no debe ser mayor a la Fecha Final !", u"Atenci�n")
						return
					elif tipofechafiltro:
						self.sqlfiltro += " and (%s >= %s and %s <= %s)" \
						    % (tipofechafiltro, fechainicial, tipofechafiltro, fechafinal)
					else:
						self.sqlfiltro = """
						((fechaasignacion >= %s and fechaasignacion <= %s) or
						(fechacierre >= %s and fechacierre <= %s))
						""" % (fechainicial, fechafinal, fechainicial, fechafinal)
				elif tipofechafiltro:
					self.sqlfiltro += " and (%s = %s)" % (tipofechafiltro, fechainicial)
				else:
					self.sqlfiltro = """
					((p.fechaasignacion = %s) or (p.fechacierre = %s))
					""" % (fechainicial, fechainicial)
			except:
				pass
					
		inx = self.GetControl(ID_CHOICEPROSPECTOCUENTAFILTRO).GetSelection()
		if inx in (1,2,3):
			tipocuentadict = {1:'contado <> 1 and hipotecaria <> 1', 2:'contado <> 0', 3:'hipotecaria <> 0'}
			if self.sqlfiltro:
				self.sqlfiltro += " and %s" % tipocuentadict[inx]
			else:
				self.sqlfiltro = tipocuentadict[inx]
			
		inx = self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).GetSelection()
		if inx > -1:
			idgerente = self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).GetClientData(inx)
			if idgerente:
				if self.sqlfiltro:
					self.sqlfiltro += " and p.idgerente = %s" % idgerente
				else:
					self.sqlfiltro = "p.idgerente = %s" % idgerente
	
		inx = self.GetControl(ID_CHOICEPROSPECTOMEDIOPUBLICITARIOFILTRO).GetSelection()
		if inx > -1:
			idmediopublicitario = self.GetControl(ID_CHOICEPROSPECTOMEDIOPUBLICITARIOFILTRO).GetClientData(inx)
			if idmediopublicitario:
				if self.sqlfiltro:
					self.sqlfiltro += " and p.idmediopublicitario = %s" % idmediopublicitario
				else:
					self.sqlfiltro = "p.idmediopublicitario = %s" % idmediopublicitario
				
		inx = self.GetControl(ID_CHOICEPROSPECTOVENDEDORFILTRO).GetSelection()
		if inx > -1:
			idvendedor = self.GetControl(ID_CHOICEPROSPECTOVENDEDORFILTRO).GetClientData(inx)
			if idvendedor:
				if self.sqlfiltro:
					self.sqlfiltro += " and p.idvendedor = %s" % idvendedor
				else:
					self.sqlfiltro = "p.idvendedor = %s" % idvendedor
				
		wild = "%%"
		nombreprospecto = self.GetControl(ID_SEARCHCTRLPROSPECTONOMBREANTERIORFILTRO).GetValue()
		if nombreprospecto:
			aux1 = nombreprospecto.encode("iso8859-1")
			name = aux1.replace(" ", "")
			if self.sqlfiltro:
				self.sqlfiltro += " and (replace(p.nombre,' ','')) like '%s%s%s'" % (wild, name, wild)
			else:
				self.sqlfiltro = "(replace(p.nombre,' ','')) like '%s%s%s'" % (wild, name, wild)
				
		afiliacionimss = self.GetControl(ID_SEARCHCTRLPROSPECTOAFILIACIONIMSSFILTRO).GetValue()
		if afiliacionimss:
			if self.sqlfiltro:
				self.sqlfiltro += " and (replace(p.afiliacionimss,' ','')) like '%s%s%s'" % (wild, afiliacionimss, wild)
			else:
				self.sqlfiltro = "(replace(p.afiliacionimss,' ','')) like '%s%s%s'" % (wild, afiliacionimss, wild)
				
		apellidopaterno = self.GetControl(ID_SEARCHCTRLPROSPECTOAPELLIDOPATERNOFILTRO).GetValue()
		if apellidopaterno:
			if self.sqlfiltro:
				self.sqlfiltro += " and (replace(p.apellidopaterno1,' ','')) like '%s%s%s'" % (wild, apellidopaterno, wild)
			else:
				self.sqlfiltro = "(replace(p.apellidopaterno1,' ','')) like '%s%s%s'" % (wild, apellidopaterno, wild)
				
		apellidomaterno = self.GetControl(ID_SEARCHCTRLPROSPECTOAPELLIDOMATERNOFILTRO).GetValue()
		if apellidomaterno:
			if self.sqlfiltro:
				self.sqlfiltro += " and (replace(p.apellidomaterno1,' ','')) like '%s%s%s'" % (wild, apellidomaterno, wild)
			else:
				self.sqlfiltro = "(replace(p.apellidomaterno1,' ','')) like '%s%s%s'" % (wild, apellidomaterno, wild)
				
		nombre = self.GetControl(ID_SEARCHCTRLPROSPECTONOMBREFILTRO).GetValue()
		if nombre:
			if self.sqlfiltro:
				self.sqlfiltro += " and (replace(p.nombre1,' ','')) like '%s%s%s'" % (wild, nombre, wild)
			else:
				self.sqlfiltro = "(replace(p.nombre1,' ','')) like '%s%s%s'" % (wild, nombre, wild)
				
		idprospecto = self.GetControl(ID_SEARCHCTRLPROSPECTOIDFILTRO).GetValue()
		try:
			idpro = int(idprospecto)
		except:
			idpro = ""
		if idpro:
			if self.sqlfiltro:
				self.sqlfiltro += " and p.idprospecto = %s" % idpro
			else:
				self.sqlfiltro = "p.idprospecto = %s" % idpro
				
		if self.sqlfiltro:
			self.sqlfiltro = """
			where %s and p.congelado = 0 and (datediff(day, t.fecha, getdate()) < %s or p.cuenta <> 0)
			and t.transicion = 'I' and t.ciclo = 1
			""" % (self.sqlfiltro, self.limitedias)
		else:
			self.sqlfiltro = """
			where p.congelado = 0 and (datediff(day, t.fecha, getdate()) < %s or p.cuenta <> 0)
			and t.transicion = 'I' and t.ciclo = 1
			""" % self.limitedias
			
		if printexcel:
			sql = """
			select p.idprospecto, p.nombre, convert(varchar(10), p.fechaasignacion, 103),
			convert(varchar(10), p.fechacierre, 103), p.telefonos, p.afiliacionimss,
			convert(varchar(10), p.fechaseguimiento, 103), convert(varchar(10), p.fechanoseguimiento, 103),
			v.nombre, g.nombre, m.descripcion, datediff(day, p.fechaasignacion, getdate())
			from %s p join VENDEDOR v on v.codigo = p.idvendedor
			join gerentesventas g on g.codigo = v.gerente
			join gixmediospublicitarios m on m.idmediopublicitario = p.idmediopublicitario
			%s order by p.nombre
			""" % (self.dbtable, self.sqlfiltro)
			sqlx = sql.replace('\t', ' ')
			sql = sqlx.replace('\n', ' ')
			wx.EndBusyCursor()
			return str(sql)
			
		warnings.warn("<<Paso filtro - FillListCtrl>>")
		
		lctrl = self.GetControl(ID_LISTCTRLPROSPECTO)
		lctrl.ClearAll()
		sql = """
		select p.idprospecto, rtrim(ltrim(p.apellidopaterno1)), rtrim(ltrim(p.apellidomaterno1)), rtrim(ltrim(p.nombre1)),
		p.telefonocasa, p.telefonooficina, p.extensionoficina, p.telefonocelular, p.nombre,
		convert(varchar(10), p.fechaasignacion, 103), convert(varchar(10), p.fechacierre, 103), p.telefonos, p.afiliacionimss,
		v.nombre, g.nombre, m.descripcion, v.desactivado, datediff(day, t.fecha, getdate())
		from %s p join VENDEDOR v on v.codigo = p.idvendedor
		join gerentesventas g on g.codigo = v.gerente
		join gixmediospublicitarios m on m.idmediopublicitario = p.idmediopublicitario
		join gixprospectostransiciones t on t.fkprospecto = p.idprospecto
		%s order by %s
		""" % (self.dbtable, self.sqlfiltro, self.sortlistctrl)
		sqlx = sql.replace('\t', ' ')
		sql = sqlx.replace('\n', ' ')
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		fila = 0

		warnings.warn("<<Inicio ciclo rows - FillListCtrl>>")

		if rows:
			title = ((u"%sId" % self.sortoptions[0][3], wx.LIST_FORMAT_CENTER),
			         (u"%sApellido Paterno" % self.sortoptions[1][3], wx.LIST_FORMAT_LEFT),
				 (u"%sApellido Materno" % self.sortoptions[2][3], wx.LIST_FORMAT_LEFT),
			         (u"%sNombre" % self.sortoptions[3][3], wx.LIST_FORMAT_LEFT),
				 (u"%sCasa" % self.sortoptions[4][3], wx.LIST_FORMAT_LEFT),
			         (u"%sOficina" % self.sortoptions[5][3], wx.LIST_FORMAT_LEFT),
			         (u"%sCelular (Movil)" % self.sortoptions[6][3], wx.LIST_FORMAT_LEFT),
				 (u"%sNombre Formato Anterior" % self.sortoptions[7][3], wx.LIST_FORMAT_LEFT),
			         (u"%sAlta" % self.sortoptions[8][3], wx.LIST_FORMAT_CENTER),
				 (u"%sCierre" % self.sortoptions[9][3], wx.LIST_FORMAT_CENTER),
			         (u"%sTel�fono(s)" % self.sortoptions[10][3], wx.LIST_FORMAT_LEFT),
			         (u"%sNo. IMSS" % self.sortoptions[11][3], wx.LIST_FORMAT_CENTER),
				 (u"%sVendedor" % self.sortoptions[12][3], wx.LIST_FORMAT_LEFT),
			         (u"%sGerente" % self.sortoptions[13][3], wx.LIST_FORMAT_LEFT),
			         (u"%sMedio Publicitario" % self.sortoptions[14][3], wx.LIST_FORMAT_LEFT))
			for i, coltitle in enumerate(title):
				lctrl.InsertColumn(i, coltitle[0], coltitle[1])
			for row in rows:
				teloficinaext = self.GetString(row[5])
				if str(row[6]) not in ("", " "):
					teloficinaext += " ext. %s" % str(row[6])
				if str(row[9]) == "None": asignacion = ""
				else: asignacion = str(row[9])
				if str(row[10]) == "None": cierre = ""
				else: cierre = str(row[10])
				if int(row[16]) == 0:
					if int(row[0]) == 22999:
						x = 12
					if (int(row[17]) > 40 and int(row[17]) < 66):
						if fila %2 != 0: bgcolor = [252,252,104]
						else:            bgcolor = [250,250,164]
					elif int(row[17]) > 65 and int(row[17]) < 106:
						if fila %2 != 0: bgcolor = [150,204,150]
						else:            bgcolor = [200,230,200]
					elif int(row[17]) > 105:
						if fila %2 != 0: bgcolor = [248,181,68]
						else:            bgcolor = [251,212,146]
					else:
						if fila %2 != 0: bgcolor = [153,153,255]
						else:            bgcolor = [200,200,255]
				else:
					if fila %2 != 0: bgcolor = [255,153,153]
					else:            bgcolor = [255,215,215]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, self.GetString(row[1]))
				lctrl.SetStringItem(index, 2, self.GetString(row[2]))
				lctrl.SetStringItem(index, 3, self.GetString(row[3]))
				lctrl.SetStringItem(index, 4, self.GetString(row[4]))
				lctrl.SetStringItem(index, 5, teloficinaext)
				lctrl.SetStringItem(index, 6, self.GetString(row[7]))
				lctrl.SetStringItem(index, 7, self.GetString(row[8]))
				lctrl.SetStringItem(index, 8, asignacion)
				lctrl.SetStringItem(index, 9, cierre)
				lctrl.SetStringItem(index, 10, self.GetString(row[11]))
				lctrl.SetStringItem(index, 11, self.GetString(row[12]))
				lctrl.SetStringItem(index, 12, self.GetString(row[13]))
				lctrl.SetStringItem(index, 13, self.GetString(row[14]))
				lctrl.SetStringItem(index, 14, self.GetString(row[15]))
				lctrl.SetItemData(index, row[0])
				if int(row[0]) == self.idrefmovto:
					self.ctrlindex = index
				fila += 1

			warnings.warn("<<Finalizo ciclo - FillListCtrl>>")

			fila = 0
			for i, coltitle in enumerate(title):
				if i == 0:
					fila = lctrl.InsertStringItem(sys.maxint, "#%s#" % coltitle[0])
				else:
					lctrl.SetStringItem(fila, i, "#%s#" % coltitle[0])
					
			lctrl.SetColumnWidth(0, 50)
			for i in range(1, 15):
				lctrl.SetColumnWidth(i, wx.LIST_AUTOSIZE)
				
			lctrl.DeleteItem(fila)
			if display == 'first':
				self.GetLFRecord("min")
			elif display == 'last':
				self.GetLFRecord("max")
		else:
			lctrl.InsertColumn(0, "       No Existen Prospectos", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 250)
		
			
		control = self.GetControl(ID_TEXTCTRLPROSPECTOTOTALREGISTROS)
		control.SetBackgroundColour(wx.Colour(153,255,153))
		control.SetForegroundColour(wx.NamedColour("BLACK"))
		control.SetValue(str(fila))
		self.SetLogProspecto(registros = fila)
		if fila:
			if (self.usuario in self.usuariorestringido) and (self.usuario not in self.vendedores):
				self.GetControl(ID_BUTTONPROSPECTOEDITARLISTCTRL).Enable(False)
			else:
				self.GetControl(ID_BUTTONPROSPECTOEDITARLISTCTRL).Enable(True)
		else:
			self.GetControl(ID_BUTTONPROSPECTOEDITARLISTCTRL).Enable(False)
			
		wx.EndBusyCursor()
		
	def OnLCtrlDeselected(self, event):
		self.currentitem = event.m_itemIndex
		lctrl = self.GetControl(self.listctrl)
		datointerno = lctrl.GetItem(self.currentitem, 0).GetText()
		datointerno = int(str(datointerno).split(".")[0])
		self.selecteditems.remove(datointerno)
		event.Skip()

	def OnLCtrl(self, event):
		self.currentitem = event.m_itemIndex
		self.LCtrl()
		lctrl = self.GetControl(self.listctrl)
		datointerno = lctrl.GetItem(self.currentitem, 0).GetText()
		datointerno = int(str(datointerno).split(".")[0])
		self.selecteditems.append(datointerno)
		self.datointerno = datointerno
		event.Skip()
					
	def LCtrl(self):
		lctrl = self.GetControl(self.listctrl)
		datointerno = 0
		todobien = True
		try:
			datointerno = lctrl.GetItem(self.currentitem, 0).GetText()
			datointerno = int(str(datointerno).split(".")[0])
		except:
			datointerno = int(str(datointerno).split(".")[0])
		if datointerno > 0:
			if self.datointernoynombre:
				self.GetRecord(datointerno, nombre)
			elif not self.GetRecord(datointerno):
				Mensajes().Warn(self, u"Escoja un registro v�lido", u"Atenci�n")
				todobien = False
		else:
			Mensajes().Error(self, u"No hay nada que editar", u"Error")
			todobien = False
			
		return todobien
		
	def GetLFRecord(self, what):
		lctrl = self.GetControl(ID_LISTCTRLPROSPECTO)
		sql = """
		select p.idprospecto, rtrim(ltrim(p.apellidopaterno1)), rtrim(ltrim(p.apellidomaterno1)), rtrim(ltrim(p.nombre1)),
		telefonocasa, telefonooficina, extensionoficina, telefonocelular,
		p.nombre, convert(varchar(10), p.fechaasignacion, 103),	convert(varchar(10), p.fechacierre, 103),
		telefonos, afiliacionimss, v.nombre, g.nombre, m.descripcion, v.desactivado
		from %s p join VENDEDOR v on v.codigo = p.idvendedor
		join gerentesventas g on g.codigo = v.gerente
		join gixmediospublicitarios m on m.idmediopublicitario = p.idmediopublicitario
		join gixprospectostransiciones t on t.fkprospecto = p.idprospecto
		%s order by p.apellidopaterno1, p.apellidomaterno1, p.nombre1
		""" % (self.dbtable, self.sqlfiltro)
		
		idprospecto = ""
		try:
			cursor = r_cn.cursor()
			cursor.execute(str(sql))
			row = fetchone(cursor)
			if row is not None:
				idprospecto = int(row[0])
			self.GetRecord(idprospecto)
			if not self.ctrlindex:
				if what == "min":
					lctrl.SetItemState(0, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
				else:
					lctrl.SetItemState(lctrl.GetItemCount() - 1, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
		except:
			warnings.warn("<<Prospectos - GetLFRecord>>")
			wx.EndBusyCursor()
		finally:
			cursor.close()
		
	def OnText(self, event):
		self.controlactual = event.GetId()
		if self.controlactual in (ID_TEXTCTRLPROSPECTONOMBRE1, ID_TEXTCTRLPROSPECTOAPELLIDOPATERNO1,
		                          ID_TEXTCTRLPROSPECTOAPELLIDOMATERNO1, ID_TEXTCTRLPROSPECTORFC,
		                          ID_TEXTCTRLPROSPECTOCURP, ID_TEXTCTRLPROSPECTOLUGARTRABAJO,
					  ID_TEXTCTRLPROSPECTOMEDIOPUBLICITARIOSUGERIDO):
			valor = self.GetControl(self.controlactual).GetValue()
			valornum = self.GetString(valor).replace('.','')
			if valor and not valornum.isdigit():
				if not valor.isupper():
					self.GetControl(self.controlactual).SetValue(valor.upper())
					lastposition = self.GetControl(self.controlactual).GetLastPosition()
					self.GetControl(self.controlactual).SetInsertionPoint(lastposition)
		
		if self.Text(vengodeontext = True):
			self.GetControl(ID_CHOICEPROSPECTOTIPOFECHAFILTRO).SetSelection(0)
			self.GetControl(ID_TEXTCTRLPROSPECTOFECHAINICIALFILTRO).SetValue("")
			self.GetControl(ID_TEXTCTRLPROSPECTOFECHAFINALFILTRO).SetValue("")
			self.GetControl(ID_CHOICEPROSPECTOGERENTEFILTRO).SetSelection(SetChoiceIndex())
			self.GetControl(ID_CHOICEPROSPECTOVENDEDORFILTRO).SetSelection(SetChoiceIndex())
			self.GetControl(ID_CHOICEPROSPECTOMEDIOPUBLICITARIOFILTRO).SetSelection(SetChoiceIndex())
			self.GetControl(ID_TEXTCTRLPROSPECTOAFILIACIONIMSSFILTRO).Clear()
			self.SalirDetalle()
			self.FillListCtrl()
			
		event.Skip()
	
	def Text(self, VengodelaLista = False, vengodeontext = False):
		for id in (ID_CHOICEPROSPECTOGERENTE, ID_CHOICEPROSPECTOVENDEDOR, ID_TEXTCTRLPROSPECTONOMBRE1,
		           ID_TEXTCTRLPROSPECTOAPELLIDOPATERNO1, ID_TEXTCTRLPROSPECTOAPELLIDOMATERNO1,
		           ID_TEXTCTRLPROSPECTOIMSS, ID_TEXTCTRLPROSPECTOFECHAALTA, ID_COMBOPROSPECTOMEDIOPUBLICITARIO):
			control = self.GetControl(id)
			#if vengodeontext:
				#if (self.controlactual == ID_TEXTCTRLPROSPECTONOMBRE and self.detail):
					#ctrl = self.GetControl(ID_TEXTCTRLPROSPECTONOMBRE)
					#nombre = ctrl.GetValue().strip()
					#if self.ExisteProspecto(nombre):
						#if Mensajes().YesNo(self, u"Ya existe el prospecto: %s\n\n" \
											#u"� Desea localizarlo ?" % nombre, u"Confirmaci�n"):
							#ctrl.SetValue("")
							#self.GetControl(ID_TEXTCTRLPROSPECTONOMBREFILTRO).SetValue(str(nombre.encode("iso8859-1")))
							#return True
						#else:
							#ctrl.SetValue(""); ctrl.SetFocus()
							#return False
			if id in (ID_CHOICEPROSPECTOGERENTE, ID_CHOICEPROSPECTOVENDEDOR):
				valor = control.GetStringSelection().strip()
			else:
				try:
					valor = control.GetValue().strip()
				except:
					valor = control.GetLabel().strip()
			if valor == "" and not self.FillingARecord and not self.NewFlag:
				self.NewFlag = True
				if not VengodelaLista:
					if id == ID_TEXTCTRLPROSPECTOIMSS and (self.GetControl(ID_CHECKBOXPROSPECTOCONTADO).IsChecked() or
					                                       self.GetControl(ID_CHECKBOXPROSPECTOHIPOTECARIA).IsChecked()):
						self.NewFlag = False
					else:
						Mensajes().Info(self, u"� No debe quedar ning�n dato requerido * en blanco !", u"Atenci�n")
						return False
					
		id = self.controlactual
		editable = False
		if not self.FillingARecord:
			if not self.GetControl(id).IsEditable():
				self.GetControl(id).SetEditable(True)
				editable = True
				
			if self.OriginalDistinto(id):
				self.GetControl(id).SetBackgroundColour(wx.CYAN)
				self.GetControl(id).Refresh()
			else:
				self.GetControl(id).SetBackgroundColour(wx.WHITE)
				self.GetControl(id).Refresh()
			
			if self.OriginalesDistintos():
				self.GetControl(ID_BUTTONPROSPECTOACEPTARFORM).Enable(True)
			else:
				self.GetControl(ID_BUTTONPROSPECTOACEPTARFORM).Enable(False)
			
		self.ChoiceControl(ID_CHOICEPROSPECTOGERENTE)
		self.ChoiceControl(ID_CHOICEPROSPECTOVENDEDOR)
		
		if editable:
			self.GetControl(id).SetEditable(False)
			
		return False
	
	def ExisteProspecto(self, nombre, agrega):
		return False   # Forza resultado de no existe
	
		#aux1 = self.GetStringEncode(nombre)
		#name = aux1.replace(" ", "")
		#sql = """
		#select count(nombre) from gixprospectos	group by nombre having replace(nombre,' ','') = '%s'
		#""" % name
		#existe = False
		#try:
			#cu = r_cn.cursor()
			#cu.execute(sql)
			#row = fetchone(cu)
			#if row:
				#if agrega:
					#if int(row[0]) > 0:
						#existe = True
				#elif self.OriginalDistinto(ID_TEXTCTRLPROSPECTONOMBRE):
					#if int(row[0]) > 0:
						#existe = True
				#else:
					#if int(row[0]) > 1:
						#existe = True
		#finally:
			#cu.close()
			
		#return existe
	
	def NuevoProspectoAgregado(self):
		titulo = u"Tome Nota del Nuevo Id"
		dialog = NuevoProspectoAgregado(self, -1, titulo, size = (450,400), style = wx.DEFAULT_DIALOG_STYLE,
						prospecto = self.prospecto, idprospecto = self.idprospecto)
		dialog.CenterOnScreen()
		dialog.ShowModal()
		
	def SaveRecord(self):
		idprospecto = self.GetControl(ID_TEXTCTRLPROSPECTOID).GetValue()
		if idprospecto.strip() == "" :
			bienGrabado, self.idprospecto, self.prospecto = self.AddRecord()
			if not bienGrabado:
				Mensajes().Info(self,u"� El Registro no fue grabado !", u"Atenci�n")
			else:
				self.NuevoProspectoAgregado()
		else:
			bienGrabado, self.idprospecto = self.UpdateRecord()
			if not bienGrabado:
				Mensajes().Info(self,u"� El Registro no fue actualizado !", u"Atenci�n")
		if bienGrabado:
			self.ChangeNoteBook()
			if (self.usuario in self.usuariorestringido) and (self.usuario not in self.vendedores) and \
			   (self.usuario not in self.gerentes):
				self.GetControl(ID_BUTTONPROSPECTOAGREGARLISTCTRL).Enable(False)
				self.GetControl(ID_BUTTONPROSPECTOEDITARLISTCTRL).Enable(False)
			else:
				self.GetControl(ID_BUTTONPROSPECTOAGREGARLISTCTRL).Enable(True)
				self.GetControl(ID_BUTTONPROSPECTOEDITARLISTCTRL).Enable(True)
			self.GetControl(ID_BUTTONPROSPECTOCERRARLISTCTRL).Enable(True)
			self.GetControl(ID_LISTCTRLPROSPECTO).SetFocus()
			#lctrl = self.GetControl(ID_LISTCTRLPROSPECTO)
			#lctrl.SetItemState(self.ctrlindex, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
			#lctrl.EnsureVisible(self.ctrlindex)
			#self.GetControl(ID_BUTTONMOVTOBANCOAPLICAR).Enable(False)
			#self.GetControl(ID_BUTTONMOVTOBANCOAGREGAR).Enable(True)
			#self.GetRecord("%s" % (idprospecto))
			
	def UpdateRecord(self):
		idprospecto = self.GetControl(ID_TEXTCTRLPROSPECTOID).GetValue()
		contado = 0
		if self.GetControl(ID_CHECKBOXPROSPECTOCONTADO).IsChecked():
			contado = 1
		hipotecaria = 0
		if self.GetControl(ID_CHECKBOXPROSPECTOHIPOTECARIA).IsChecked():
			hipotecaria = 1
		inx = self.GetControl(ID_CHOICEPROSPECTOGERENTE).GetSelection()
		idgerente = self.GetControl(ID_CHOICEPROSPECTOGERENTE).GetClientData(inx)
		inx = self.GetControl(ID_CHOICEPROSPECTOVENDEDOR).GetSelection()
		idvendedor = self.GetControl(ID_CHOICEPROSPECTOVENDEDOR).GetClientData(inx)
		nombre1 = self.GetControl(ID_TEXTCTRLPROSPECTONOMBRE1).GetValue()
		apellidopaterno1 = self.GetControl(ID_TEXTCTRLPROSPECTOAPELLIDOPATERNO1).GetValue()
		apellidomaterno1 = self.GetControl(ID_TEXTCTRLPROSPECTOAPELLIDOMATERNO1).GetValue()
		fecha = self.GetControl(ID_TEXTCTRLPROSPECTOFECHANACIMIENTO).GetValue()
		fechaOk, fechanacimiento = self.PreparaFecha(fecha)
		if not fechaOk:
			return False, 0
		rfc = self.GetControl(ID_TEXTCTRLPROSPECTORFC).GetValue()
		curp = self.GetControl(ID_TEXTCTRLPROSPECTOCURP).GetValue()
		telefonocasa = self.GetControl(ID_TEXTCTRLPROSPECTOTELEFONOCASA).GetValue()
		telefonooficina = self.GetControl(ID_TEXTCTRLPROSPECTOTELEFONOOFICINA).GetValue()
		extensionoficina = self.GetControl(ID_TEXTCTRLPROSPECTOEXTENSIONOFICINA).GetValue()
		telefonocelular = self.GetControl(ID_TEXTCTRLPROSPECTOTELEFONOCELULAR).GetValue()
		lugardetrabajo = self.GetControl(ID_TEXTCTRLPROSPECTOLUGARTRABAJO).GetValue()
		afiliacionimss = self.GetControl(ID_TEXTCTRLPROSPECTOIMSS).GetValue()
		fecha = self.GetControl(ID_TEXTCTRLPROSPECTOFECHAALTA).GetValue()
		fechaOk, fechaalta = self.PreparaFecha(fecha)
		if not fechaOk:
			return False, 0
		descripcion = self.GetControl(ID_COMBOPROSPECTOMEDIOPUBLICITARIO).GetValue()
		if not self.ExisteMedioPublicitario(descripcion):
			Mensajes().Info(self, u"� El medio publicitario %s no existe !\n\n" \
					u"Si desea agregarlo solicite autorizaci�n." % descripcion, u"Atenci�n")
			return False, 0
		else:
			inx = self.GetControl(ID_COMBOPROSPECTOMEDIOPUBLICITARIO).GetSelection()
			idmediopublicitario = self.GetControl(ID_COMBOPROSPECTOMEDIOPUBLICITARIO).GetClientData(inx)
		sugerido = self.GetControl(ID_TEXTCTRLPROSPECTOMEDIOPUBLICITARIOSUGERIDO).GetValue()
			
		setListForQuery = """
		idgerente = %s, idvendedor = %s, nombre1 = '%s', apellidopaterno1 = '%s', apellidomaterno1 = '%s', fechadenacimiento = %s,
		rfc = '%s', curp = '%s', telefonocasa = '%s', telefonooficina = '%s', extensionoficina = '%s', telefonocelular = '%s',
		lugardetrabajo = '%s', afiliacionimss = '%s', fechaasignacion = %s, idmediopublicitario = %s, mediopublicitariosugerido = '%s',
		contado = %s, hipotecaria = %s
		""" % (int(idgerente), int(idvendedor), nombre1, apellidopaterno1, apellidomaterno1, fechanacimiento, rfc, curp,
		       telefonocasa, telefonooficina, extensionoficina, telefonocelular, lugardetrabajo, afiliacionimss, fechaalta,
		       int(idmediopublicitario), sugerido, int(contado), int(hipotecaria))
		sql = "update %s set %s where idprospecto = %s" \
			% (self.dbtable, setListForQuery, idprospecto)
		
		queTal = self.QueryUpdateRecord(sql)
		numero = 0
		if queTal:
			self.SetLogProspecto(idprospecto)
			if lugardetrabajo:
				self.lugardetrabajo = lugardetrabajo
			numero = int(idprospecto)
			sql = """
			insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension)
			values ('%s', getdate(), '%s', '%s', '%s', '%s')
			""" % (self.BlogGUID, self.usuario, u"Modificaci�n del Prospecto", "", "")
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
		
		return queTal, numero
	
	def PreparaFecha(self, fecha):
		if fecha:
			try:
				fecha_dia, fecha_mes, fecha_ano = fecha.split('/')
				gooddate = "'%04d/%02d/%02d'" % (int(fecha_ano), int(fecha_mes), int(fecha_dia))
				return True, gooddate
			except:
				Mensajes().Info(self, u"Problemas con la fecha al agregar el prospecto", u"Atenci�n")
				return False, "Null"
		else:
			return True, "Null"
		
	def ExisteMedioPublicitario(self, descripcion):
		sql = "select idmediopublicitario from gixmediospublicitarios where descripcion = '%s'" % (descripcion)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row is not None:
			return True
		else:
			return False
		
	def AddRecord(self):
		contado = 0
		if self.GetControl(ID_CHECKBOXPROSPECTOCONTADO).IsChecked():
			contado = 1
		hipotecaria = 0
		if self.GetControl(ID_CHECKBOXPROSPECTOHIPOTECARIA).IsChecked():
			hipotecaria = 1
		inx = self.GetControl(ID_CHOICEPROSPECTOGERENTE).GetSelection()
		idgerente = self.GetControl(ID_CHOICEPROSPECTOGERENTE).GetClientData(inx)
		inx = self.GetControl(ID_CHOICEPROSPECTOVENDEDOR).GetSelection()
		idvendedor = self.GetControl(ID_CHOICEPROSPECTOVENDEDOR).GetClientData(inx)
		nombre1 = self.GetControl(ID_TEXTCTRLPROSPECTONOMBRE1).GetValue()
		apellidopaterno1 = self.GetControl(ID_TEXTCTRLPROSPECTOAPELLIDOPATERNO1).GetValue()
		apellidomaterno1 = self.GetControl(ID_TEXTCTRLPROSPECTOAPELLIDOMATERNO1).GetValue()
		fecha = self.GetControl(ID_TEXTCTRLPROSPECTOFECHANACIMIENTO).GetValue()
		fechaOk, fechanacimiento = self.PreparaFecha(fecha)
		if not fechaOk:
			return False, 0
		rfc = self.GetControl(ID_TEXTCTRLPROSPECTORFC).GetValue()
		curp = self.GetControl(ID_TEXTCTRLPROSPECTOCURP).GetValue()
		telefonocasa = self.GetControl(ID_TEXTCTRLPROSPECTOTELEFONOCASA).GetValue()
		telefonooficina = self.GetControl(ID_TEXTCTRLPROSPECTOTELEFONOOFICINA).GetValue()
		extensionoficina = self.GetControl(ID_TEXTCTRLPROSPECTOEXTENSIONOFICINA).GetValue()
		telefonocelular = self.GetControl(ID_TEXTCTRLPROSPECTOTELEFONOCELULAR).GetValue()
		lugardetrabajo = self.GetControl(ID_TEXTCTRLPROSPECTOLUGARTRABAJO).GetValue()
		afiliacionimss = self.GetControl(ID_TEXTCTRLPROSPECTOIMSS).GetValue()
		fecha = self.GetControl(ID_TEXTCTRLPROSPECTOFECHAALTA).GetValue()
		fechaOk, fechaalta = self.PreparaFecha(fecha)
		if not fechaOk:
			return False, 0
		descripcion = self.GetControl(ID_COMBOPROSPECTOMEDIOPUBLICITARIO).GetValue()
		if not self.ExisteMedioPublicitario(descripcion):
			Mensajes().Info(self, u"� El medio publicitario %s no existe !\n\n" \
					u"Si desea agregarlo solicite autorizaci�n." % descripcion, u"Atenci�n")
			return False, 0
		else:
			inx = self.GetControl(ID_COMBOPROSPECTOMEDIOPUBLICITARIO).GetSelection()
			idmediopublicitario = self.GetControl(ID_COMBOPROSPECTOMEDIOPUBLICITARIO).GetClientData(inx)
		sugerido = self.GetControl(ID_TEXTCTRLPROSPECTOMEDIOPUBLICITARIOSUGERIDO).GetValue()
		
		sqlFields = """
		idgerente, idvendedor, nombre1, apellidopaterno1, apellidomaterno1, fechadenacimiento, rfc, curp,
		telefonocasa, telefonooficina, extensionoficina, telefonocelular, lugardetrabajo,
		afiliacionimss, fechaasignacion, idmediopublicitario, mediopublicitariosugerido, contado, hipotecaria
		"""
		sqlValues = "%s, %s, '%s', '%s', '%s', %s, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', %s, %s, '%s', %s, %s" % \
			  (int(idgerente), int(idvendedor), nombre1, apellidopaterno1, apellidomaterno1, fechanacimiento,
			   rfc, curp, telefonocasa, telefonooficina, extensionoficina, telefonocelular, lugardetrabajo,
			   afiliacionimss, fechaalta, int(idmediopublicitario), sugerido, int(contado), int(hipotecaria))
		sql = "insert into %s (%s) values (%s)" % (self.dbtable, sqlFields, sqlValues) 
		sqlmax = "select max(idprospecto) from %s" % (self.dbtable)
		queTal, idprospecto = self.QueryUpdateRecord(sql, sqlmax, True)
		if queTal:
			if lugardetrabajo:
				self.lugardetrabajo = lugardetrabajo
			self.GetControl(ID_TEXTCTRLPROSPECTOID).SetValue(str(idprospecto))
			sql = """
			insert into gixprospectostransiciones
			(fkprospecto, fecha, transicion, fkgerente, fkvendedor, ciclo, notas)
			values (%s, getdate(), 'I', %s, %s, 1, 'Alta del prospecto (Inicio 1er. ciclo)')
			""" % (int(idprospecto), int(idgerente), int(idvendedor))
			transicion, trash = self.QueryUpdateRecord(sql)
			if not transicion:
				Mensajes().Info(self, u"Problemas al actualizar transiciones\n%s" % sql, u"Atenci�n")
			sql = "select convert(varchar(100), BlogGUID) from %s where idprospecto = %s" % (self.dbtable, idprospecto)
			cu = r_cn.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			cu.close()
			if row is not None:
				self.BlogGUID = row[0]
				sql = """
				insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura,
				ContenidoText, ContenidoBinario, Extension)
				values ('%s', getdate(), '%s', '%s', '%s', '%s')
				""" % (self.BlogGUID, self.usuario, "Alta del Prospecto", "", "")
				if not self.QueryUpdateRecord(sql):
					Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
			else:
				Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
		else:
			idprospecto = 0
			
		prospecto = u"%s %s, %s" % (apellidopaterno1, apellidomaterno1, nombre1)

		return queTal, int(idprospecto), prospecto
	
	def DespliegaCombo(self, id, valor):
		combo = self.GetControl(id)
		for inx in range(0, combo.GetCount()):
			if valor == combo.GetClientData(inx):
				combo.SetSelection(inx)
				break
	
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
		return dato
	
	def GetStringEncode(self, valor):
		dato = ""
		try:
			dato = valor.encode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
		return dato
	
	def GetRecord(self, record):
		lctrl = self.GetControl(self.listctrl)
		try:
			a = int(record)
		except:
			return False
		
		if a < 1:
			return False
		
		self.FillingARecord = True
		self.LimpiaControles()
		self.SetColoreable(False)
		for v in self.controles_tipo_txt.itervalues():
			self.originales[v] = ""
		self.originales[ID_CHOICEPROSPECTOGERENTE] = ""
		self.originales[ID_CHOICEPROSPECTOVENDEDOR] = ""
		self.originales[ID_COMBOPROSPECTOMEDIOPUBLICITARIO] = ""
		
		idprospecto = int(record)
		self.GetControl(ID_TEXTCTRLPROSPECTOID).SetValue(str(idprospecto))
		sql = """
		select p.idgerente, p.idvendedor, p.nombre1, p.apellidopaterno1, p.apellidomaterno1,
		convert(varchar(10), p.fechadenacimiento, 103), p.rfc, p.curp, p.telefonocasa, p.telefonooficina, p.extensionoficina,
		p.telefonocelular, p.lugardetrabajo, p.cuenta, p.nombre, p.afiliacionimss, p.telefonos,
		convert(varchar(10), p.fechaasignacion, 103), convert(varchar(10), p.fechacierre, 103),
		p.idmediopublicitario, p.mediopublicitariosugerido, p.contado, p.hipotecaria, convert(varchar(100), p.BlogGUID),
		v.interno from %s p
		join VENDEDOR v on v.codigo = p.idvendedor
		where idprospecto = %s
		""" % (self.dbtable, idprospecto)
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		cursor.close()
		
		externos = ""
		if self.usuario in self.gerentes:
			self.habilitaedicion = False
			if int(row[24]) != 1:
				self.habilitaedicion = True; externos = "and interno <> 1"
			self.GetControl(ID_BUTTONPROSPECTOEDITARLISTCTRL).Enable(self.habilitaedicion)
			
		self.GetControl(ID_TEXTCTRLPROSPECTONOMBRE1).SetValue(self.GetString(row[2]))
		self.GetControl(ID_TEXTCTRLPROSPECTOAPELLIDOPATERNO1).SetValue(self.GetString(row[3]))
		self.GetControl(ID_TEXTCTRLPROSPECTOAPELLIDOMATERNO1).SetValue(self.GetString(row[4]))
		self.GetControl(ID_TEXTCTRLPROSPECTOIMSS).SetValue(self.GetString(row[15]))
		if str(row[5]) == "None": fechanacimiento = ""
		else: fechanacimiento = str(row[5])
		self.GetControl(ID_TEXTCTRLPROSPECTOFECHANACIMIENTO).SetValue(fechanacimiento)
		self.GetControl(ID_TEXTCTRLPROSPECTORFC).SetValue(self.GetString(row[6]))
		self.GetControl(ID_TEXTCTRLPROSPECTOCURP).SetValue(self.GetString(row[7]))
		self.GetControl(ID_TEXTCTRLPROSPECTOTELEFONOCASA).SetValue(str(row[8]))
		self.GetControl(ID_TEXTCTRLPROSPECTOTELEFONOOFICINA).SetValue(str(row[9]))
		self.GetControl(ID_TEXTCTRLPROSPECTOEXTENSIONOFICINA).SetValue(str(row[10]))
		self.GetControl(ID_TEXTCTRLPROSPECTOTELEFONOCELULAR).SetValue(str(row[11]))
		if str(row[17]) == "None": fechaalta = ""
		else: fechaalta = str(row[17])
		self.GetControl(ID_TEXTCTRLPROSPECTOFECHAALTA).SetValue(fechaalta)
		self.GetControl(ID_TEXTCTRLPROSPECTOLUGARTRABAJO).SetValue(self.GetString(row[12]))
		if str(row[18]) == "None": fechacierre = ""
		else: fechacierre = str(row[18])
		self.GetControl(ID_TEXTCTRLPROSPECTOFECHACIERRE).SetValue(fechacierre)
		if int(row[13]) > 0: cuenta = int(row[13])
		else: cuenta = ""
		self.GetControl(ID_TEXTCTRLPROSPECTOCUENTA).SetValue(str(cuenta))
		self.ObtenerGerentes(ID_CHOICEPROSPECTOGERENTE)
		self.DespliegaCombo(ID_CHOICEPROSPECTOGERENTE, int(row[0]))
		filtro = "where desactivado = %s and gerente = %s %s" % (0, int(row[0]), externos)
		self.ObtenerVendedores(filtro, ID_CHOICEPROSPECTOVENDEDOR)
		self.DespliegaCombo(ID_CHOICEPROSPECTOVENDEDOR, int(row[1]))
		self.ObtenerMediosPublicitarios(ID_COMBOPROSPECTOMEDIOPUBLICITARIO)
		self.DespliegaCombo(ID_COMBOPROSPECTOMEDIOPUBLICITARIO, int(row[19]))
		if self.GetString(row[20]) == "None": sugerido = ""
		else: sugerido = self.GetString(row[20])
		self.GetControl(ID_TEXTCTRLPROSPECTOMEDIOPUBLICITARIOSUGERIDO).SetValue(sugerido)
		self.GetControl(ID_TEXTCTRLPROSPECTONOMBRE).SetValue(self.GetString(row[14]))
		self.GetControl(ID_TEXTCTRLPROSPECTOTELEFONO).SetValue(str(row[16]))
		if row[21]:
			self.GetControl(ID_CHECKBOXPROSPECTOCONTADO).SetValue(True)
		else:
			self.GetControl(ID_CHECKBOXPROSPECTOCONTADO).SetValue(False)
		if row[22]:
			self.GetControl(ID_CHECKBOXPROSPECTOHIPOTECARIA).SetValue(True)
		else:
			self.GetControl(ID_CHECKBOXPROSPECTOHIPOTECARIA).SetValue(False)
		self.BlogGUID = str(row[23])
		
		for x in ("NOMBRE,TELEFONO,IMSS,GERENTE,VENDEDOR,MEDIOPUBLICITARIO").split(","):
			if x in ("GERENTE, VENDEDOR"):
				key = eval("ID_CHOICEPROSPECTO%s" % x)
				self.originales[key] = self.GetControl(key).GetLabel()
			elif x == "MEDIOPUBLICITARIO":
				key = eval("ID_COMBOPROSPECTO%s" % x)
				try:
					self.originales[key] = self.GetControl(key).GetValue()
				except:
					self.originales[key] = self.GetControl(key).GetStringSelection()
			else:
				key = eval("ID_TEXTCTRLPROSPECTO%s" % x)
				self.originales[key] = self.GetControl(key).GetValue()
		
		self.FillingARecord = False
		return True

class GixMovimientosBancos(wx.Frame, GixBase, GixBaseListCtrl):
	coloreable = "ID_TEXTCTRLMOVTOBANCOID"
	coloreableeditable = False
	ctt = [coloreable, "ID_TEXTCTRLMOVTOBANCOFECHAMOVTO", "ID_TEXTCTRLMOVTOBANCOCANTIDAD", "ID_TEXTCTRLMOVTOBANCOREFERENCIA"]
	activecontrolafternewrecord = ID_TEXTCTRLMOVTOBANCOFECHAMOVTO
	listctrl = ID_LISTCTRLMOVTOBANCO
	dbtable  = "gixbancosmovimientos"
	controles_tipo_txt = dict(zip(ctt,map(eval,ctt)))
	DicDatesAndTxt = {ID_BITMAPBUTTONMOVTOBANCOFECHAMOVTO : ID_TEXTCTRLMOVTOBANCOFECHAMOVTO,
	                  ID_BITMAPBUTTONMOVTOBANCOFECHAFILTRO: ID_TEXTCTRLMOVTOBANCOFECHAFILTRO,
	                  ID_BITMAPBUTTONMOVTOBANCOFECHARANGO : ID_TEXTCTRLMOVTOBANCOFECHARANGO}
	titulo = " - Bancos Capturas"
	editable = 1
	
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize,
	             style = wx.DEFAULT_FRAME_STYLE, usuario = None):
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		self.InitialFlags(movimientosbancos = True)
		self.usuario = usuario
		self.empresaid = self.GetEmpresa()
		self.idbanco = -1
		self.ctrlindex = 0
		self.idrefmovto = 0
		self.currentitem = ""
		panel = wx.Panel(self, -1)
		BancosMovimientosFuncion(panel, True, True)
		self.originales = {}
		for v in self.controles_tipo_txt.itervalues():
			self.Bind(wx.EVT_TEXT, self.OnText, self.GetControl(v))
			self.originales[v] = ""
		for v in self.DicDatesAndTxt.keys():
			self.Bind(wx.EVT_BUTTON, self.OnFechaButton, id = v )
		self.SetColoreable(False)
		self.idreferenciamovto = self.GetControl(ID_TEXTCTRLMOVTOBANCOID)
		self.originales[ID_CHOICEMOVTOBANCOTIPOMOVIMIENTO] = ""
		self.originales[ID_CHOICEMOVTOBANCOESTATUS] = ""
		self.GetControl(ID_CHOICEMOVTOBANCOFILTROTIPOMOVTO).SetSelection(0)
		self.GetControl(ID_CHOICEMOVTOBANCOFILTROCLASIFICADO).SetSelection(2)
		self.GetControl(ID_CHOICEMOVTOBANCOFILTROELIMINADO).SetSelection(2)
		self.addlistctrlbtn = ID_BUTTONMOVTOBANCOAGREGARLISTCTRL
		self.editlistctrlbtn = ID_BUTTONMOVTOBANCOEDITARLISTCTRL
		self.deletelistctrlbtn = ID_BUTTONMOVTOBANCOELIMINARLISTCTRL
		self.exitlistctrlbtn = ID_BUTTONMOVTOBANCOSALIRLISTCTRL
		wx.EVT_BUTTON(self, ID_BUTTONMOVTOBANCOIMPRIMIREXCELLISTCTRL, self.OnPrintExcel)
		wx.EVT_BUTTON(self, ID_BUTTONMOVTOBANCOREFRESCARLISTCTRL, self.OnRefrescar)
		wx.EVT_BUTTON(self, ID_BUTTONMOVTOBANCOAGREGARLISTCTRL, self.OnNewRecord)
		wx.EVT_BUTTON(self, ID_BUTTONMOVTOBANCOEDITARLISTCTRL, self.OnEditRecord)
		wx.EVT_BUTTON(self, ID_BUTTONMOVTOBANCOELIMINARLISTCTRL, self.OnDeleteRecord)
		wx.EVT_BUTTON(self, ID_BUTTONMOVTOBANCOSALIRLISTCTRL, self.OnExitRecordCtrl)
		wx.EVT_CLOSE(self, self.OnExitRecordCtrl)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnLCtrl, id = self.listctrl)
		self.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.OnRightClick, id = self.listctrl)
		self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnEditRecord, id = self.listctrl)
		self.ElegirBanco()
		if self.idbanco < 0:
			self.Destroy()
		#self.FillListCtrl()
		#self.ObtenerSaldo()
		self.ReconstruirSaldoCuenta()
		anchos = [-1,130]
		self.CreateStatusBar(2)
		self.SetStatusWidths(anchos)
		self.SetStatusText(u"Recursos Financieros", 0)
		self.SetStatusText(u"Bancos Capturas", 1)
		self.Bind(wx.EVT_TEXT, self.OnChoiceFiltro, id = ID_TEXTCTRLMOVTOBANCOFECHAFILTRO)
		self.Bind(wx.EVT_TEXT, self.OnChoiceFiltro, id = ID_TEXTCTRLMOVTOBANCOFECHARANGO)
		wx.EVT_BUTTON(self, ID_BUTTONMOVTOBANCOBANCO, self.OnElegirBanco)
		wx.EVT_CHOICE(self, ID_CHOICEMOVTOBANCOTIPOMOVIMIENTO, self.OnChoiceControl)
		wx.EVT_CHOICE(self, ID_CHOICEMOVTOBANCOESTATUS, self.OnChoiceControl)
		wx.EVT_CHOICE(self, ID_CHOICEMOVTOBANCOFILTROTIPOMOVTO, self.OnChoiceFiltro)
		wx.EVT_CHOICE(self, ID_CHOICEMOVTOBANCOFILTROCLASIFICADO, self.OnChoiceFiltro)
		wx.EVT_CHOICE(self, ID_CHOICEMOVTOBANCOFILTROELIMINADO, self.OnChoiceFiltro)
		wx.EVT_BUTTON(self, ID_BUTTONMOVTOBANCOAPLICAR, self.OnAplicarDetalle)
		wx.EVT_BUTTON(self, ID_BUTTONMOVTOBANCOAGREGAR, self.OnAgregarDetalle)
		wx.EVT_BUTTON(self, ID_BUTTONMOVTOBANCOSALIR, self.OnSalirDetalle)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONMOVTOBANCOLIMPIARFECHAFILTRO, self.OnLimpiarFechaFiltro)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONMOVTOBANCOLIMPIARFECHARANGO, self.OnLimpiarFechaRango)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONMOVTOBANCOREFRESCARSALDO, self.OnReconstruirSaldoCuenta)
		if wx.Platform == '__WXMSW__':
			self.ActiveNoteBook(ID_NOTEBOOKMOVTOBANCOLISTCTRL, ID_NOTEBOOKMOVTOBANCOFORM, 785, 650)
		else:
			self.ActiveNoteBook(ID_NOTEBOOKMOVTOBANCOLISTCTRL, ID_NOTEBOOKMOVTOBANCOFORM, 865, 660)
		self.GetControl(ID_NOTEBOOKMOVTOBANCOLISTCTRL).Move(wx.Point(-1, 75))
		self.GetControl(ID_LISTCTRLMOVTOBANCO).SetFocus()
		
	def OnExitRecordCtrl(self, event):
		self.ReconstruirSaldoCuenta()
		self.Destroy()
		
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
				
		return dato.strip()
		
	def OnRightClick(self, event):
		idregistryblog = self.GetControl(ID_TEXTCTRLMOVTOBANCOID).GetValue()
		idtitleblog = "Movimiento"
		self.OpenBlogPopupMenu(idregistryblog, idtitleblog)

	def OnConsultarBlog(self, event):
		movimiento = self.GetControl(ID_TEXTCTRLMOVTOBANCOID).GetValue()
		meta = ((90, "Fecha"), (90, "Hora"), (100, u"Usuario"), (300, u"Blog"))
		query = """
		select convert(varchar(50), FechaCaptura, 103), convert(varchar(50), FechaCaptura, 108),
		UsuarioCaptura, ContenidoText from Blogs
		where BlogGUID = '%s' order by FechaCaptura desc;
		select count(*) from Blogs where BlogGUID = '%s'
		""" % (self.BlogGUID, self.BlogGUID)
		titulo = u"Consulta del Blog del Movimiento %s" % movimiento
		tabla = "Blogs"
		frame = GixFrameCatalogo(self, -1, titulo, wx.Point(20,20), wx.Size(800,600), 
								 wx.DEFAULT_FRAME_STYLE, None, None, None, tabla, meta, query,
								 gridsize = [680,350], color = "AQUAMARINE")
		frame.Centre(wx.BOTH)
		frame.Show(True)
		
	def OnParticiparBlog(self, event):
		movimiento = self.GetControl(ID_TEXTCTRLMOVTOBANCOID).GetValue()
		blog = wx.TextEntryDialog(self, u"Digite", u"Participando en el Blog del Movimiento %s" % movimiento,
								  defaultValue = "", style = wx.OK | wx.TE_MULTILINE)
		blog.SetSize(wx.Size(400,300))
		blog.Centre(wx.BOTH)
		blog.ShowModal()
		comentario = blog.GetValue()
		blog.Destroy()
		if comentario:
			sql = """
			insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension)
			values ('%s', getdate(), '%s', '%s', '%s', '%s')
			""" % (self.BlogGUID, self.usuario, comentario, "", "")
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
		
	def GetEmpresa(self):
		obj = Parametro(usuario = self.usuario)
		self.ObtenerEmpresa(obj.empresadetrabajo)
		return obj.empresadetrabajo
	
	def ActiveNoteBook(self, nbtrue, nbfalse, width, height):
		self.GetControl(nbtrue).Show(False)
		self.GetControl(nbfalse).Show(False)
		self.SetSize(wx.Size(width, height))
		self.CentreOnScreen()
		self.GetControl(nbtrue).Show(True)
	
	def OnLimpiarFechaFiltro(self, event):
		self.GetControl(ID_TEXTCTRLMOVTOBANCOFECHAFILTRO).SetValue("")
		self.GetControl(ID_TEXTCTRLMOVTOBANCOFECHARANGO).SetValue("")
	
	def OnLimpiarFechaRango(self, event):
		self.GetControl(ID_TEXTCTRLMOVTOBANCOFECHARANGO).SetValue("")
		
	def OnReconstruirSaldoCuenta(self, event):
		if Mensajes().YesNo(self,u"� Desea realmente reconstruir el saldo de la cuenta ?", u"Confirmaci�n"):
			self.ReconstruirSaldoCuenta()
			Mensajes().Info(self, u"� Ha finalizado la reconstrucci�n del saldo de la cuenta !", u"Atenci�n")
		
	def ReconstruirSaldoCuenta(self):
		wx.BeginBusyCursor()    
		sql = """
		select convert(varchar(10), periodo, 111)
		from gixbancossaldosxperiodo where idbanco = %s order by periodo
		""" % self.idbanco
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			cu = r_cn.cursor()
			for row in rows:
				sql = """
				delete from gixbancossaldosxperiodo where idbanco = %s and periodo = '%s'
				""" % (self.idbanco, str(row[0]))
				try:
					cu.execute(str(sql))
				except:
					wx.EndBusyCursor()
					Mensajes().Info(self, u"Sucedi� algo que impidi� eliminar este registro.\n" \
					                u"Quiz� se deba a que hay otra informaci�n\n" \
					                u"que depende de este registro.\n\n%s" % sql, u"Atenci�n")
					wx.BeginBusyCursor()    
			cu.close()
			
		sql = """
		select convert(varchar(10), fechamovto, 111), tipomovto, cantidad
		from gixbancosmovimientos where idbanco = %s and eliminado = 'N' order by fechamovto
		""" % self.idbanco
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			periodosdict = []
			saldosxperiodo = {}
			saldoinicial = 0
			for row in rows:
				fecha_ano, fecha_mes, fecha_dia = str(row[0]).split('/')
				periodo = "%04d/%02d/01" % (int(fecha_ano), int(fecha_mes))
				tipomovto = str(row[1]); cantidad = float(row[2])
				if saldosxperiodo.has_key(periodo):
					if tipomovto == "A":
						abonos = float(saldosxperiodo[periodo][1])
						abonos += float(cantidad)
						saldosxperiodo[periodo][1] = float(abonos)
						saldoinicial += float(cantidad)
					else:
						cargos = float(saldosxperiodo[periodo][2])
						cargos += float(cantidad)
						saldosxperiodo[periodo][2] = float(cargos)
						saldoinicial -= float(cantidad)
				else:
					periodosdict.append(periodo)
					if tipomovto == "A":
						saldosxperiodo[periodo] = [float(saldoinicial), float(cantidad), float(0)]
						saldoinicial += float(cantidad)
					else:
						saldosxperiodo[periodo] = [float(saldoinicial), float(0), float(cantidad)]
						saldoinicial -= float(cantidad)
						
			periodosdict.sort()
			for periodo in periodosdict:
				saldoinicial = float(saldosxperiodo[periodo][0])
				totalabonos = float(saldosxperiodo[periodo][1])
				totalcargos = float(saldosxperiodo[periodo][2])
				sql = """
				insert into gixbancossaldosxperiodo (idbanco, periodo, saldoinicial, totalabonos, totalcargos)
				values (%s, '%s', %s, %s, %s)
				""" % (self.idbanco, periodo, float(saldoinicial), float(totalabonos), float(totalcargos))
				if not self.QueryUpdateRecord(sql):
					wx.EndBusyCursor()
					Mensajes().Info(self, u"Problemas al actualizar saldos.\n\n%s" % sql, u"Atenci�n")
					wx.BeginBusyCursor()    
		self.ObtenerSaldo()
		wx.EndBusyCursor()    
	
	def OnAplicarDetalle(self, event):
		self.NewFlag = False
		self.Text()
		control = self.GetControl(ID_TEXTCTRLMOVTOBANCOCANTIDAD)
		cantidad = control.GetValue().strip()
		try:
			if not float(cantidad) > 0:
				Mensajes().Info(self, u"� La cantidad debe ser mayor a cero !", u"Atenci�n")
				control.SetValue("")
				control.SetSelection(-1,-1)
				return
		except:
			Mensajes().Info(self, u"� Digite correctamente la cantidad !", u"Atenci�n")
			control.SetValue("")
			control.SetSelection(-1,-1)
			return
		if not self.NewFlag:
			if Mensajes().YesNo(self,u"� Desea realmente grabar la informaci�n ?", u"Confirmaci�n"):
				self.SaveRecord()
				self.GetControl(ID_BUTTONMOVTOBANCOAGREGAR).Enable(True)
				self.GetControl(ID_BUTTONMOVTOBANCOAGREGAR).SetFocus()
	
	def OnAgregarDetalle(self, event):
		self.GetControl(ID_CHOICEMOVTOBANCOESTATUS).SetSelection(0)
		self.NewFlag = True
		for k,id in self.controles_tipo_txt.iteritems():
			control = self.GetControl(id)
			if id in (ID_TEXTCTRLMOVTOBANCOID, ID_TEXTCTRLMOVTOBANCOCANTIDAD, ID_TEXTCTRLMOVTOBANCOREFERENCIA):
				control.SetValue("")
			if k == self.coloreable:
				control.SetBackgroundColour(wx.GREEN)
			else:
				control.SetBackgroundColour(wx.WHITE)
			control.Refresh()
		
		for v in self.controles_tipo_txt.itervalues():
			self.originales[ v ] = None
			
		control = self.GetControl(ID_TEXTCTRLMOVTOBANCOCLASIFICADO)
		control.SetBackgroundColour(wx.NamedColour("RED"))
		control.SetForegroundColour(wx.NamedColour("WHITE"))
		control.SetValue("NO CLASIFICADO")
		self.GetControl(ID_STATICBITMAPMOVTOBANCOCLASIFICADO).SetBitmap(MyBitmapsFunc(35))
		self.SetColoreable(self.coloreableeditable)
		self.GetControl(ID_BUTTONMOVTOBANCOAPLICAR).Enable(True)
		self.GetControl(ID_BUTTONMOVTOBANCOAGREGAR).Enable(False)
		self.GetControl(ID_TEXTCTRLMOVTOBANCOCANTIDAD).SetFocus()
		
	def OnSalirDetalle(self, event):
		if self.currentitem:
			self.LCtrl()
		if wx.Platform == '__WXMSW__':
			self.ActiveNoteBook(ID_NOTEBOOKMOVTOBANCOLISTCTRL, ID_NOTEBOOKMOVTOBANCOFORM, 785, 650)
		else:
			self.ActiveNoteBook(ID_NOTEBOOKMOVTOBANCOLISTCTRL, ID_NOTEBOOKMOVTOBANCOFORM, 865, 660)
		self.GetControl(ID_BUTTONMOVTOBANCOAPLICAR).Enable(False)
		self.GetControl(ID_BUTTONMOVTOBANCOAGREGAR).Enable(False)
		self.GetControl(ID_BUTTONMOVTOBANCOSALIR).Enable(False)
		self.GetControl(ID_BUTTONMOVTOBANCOAGREGARLISTCTRL).Enable(True)
		self.GetControl(ID_LISTCTRLMOVTOBANCO).SetFocus()
		
	def OnRefrescar(self, event):
		self.FillListCtrl()

	def OnEditRecord(self, event):
		self.LCtrl()
		if self.eliminado == "S" or self.clasificado == "S":
			Mensajes().Info(self, u"Recuerde que un registro eliminado o clasificado\n" \
							u"no puede ser editado.", u"Atenci�n")
		else:
			if wx.Platform == '__WXMSW__':
				self.ActiveNoteBook(ID_NOTEBOOKMOVTOBANCOFORM, ID_NOTEBOOKMOVTOBANCOLISTCTRL, 785, 327)
			else:
				self.ActiveNoteBook(ID_NOTEBOOKMOVTOBANCOFORM, ID_NOTEBOOKMOVTOBANCOLISTCTRL, 865, 350)
			self.GetControl(ID_BUTTONMOVTOBANCOAGREGAR).Enable(True)
			self.GetControl(ID_BUTTONMOVTOBANCOSALIR).Enable(True)
			self.GetControl(ID_TEXTCTRLMOVTOBANCOCANTIDAD).SetFocus()
			self.GetControl(ID_TEXTCTRLMOVTOBANCOCANTIDAD).SetSelection(-1, -1)
	
	def OnElegirBanco(self, event):
		self.ReconstruirSaldoCuenta()
		if self.ElegirBanco():
			self.FillListCtrl()
			#self.ObtenerSaldo()
			self.ReconstruirSaldoCuenta()
		
	def ElegirBanco(self):
		self.inxbanco = []
		self.chobanco = []
		query = """
		select idbanco, nombre + '.                              '
		from gixbancos where empresaid = %s order by nombre
		""" % self.empresaid
		cu = r_cn.cursor()
		cu.execute(query)
		rows = fetchall(cu)
		cu.close()
		for row in rows:
			self.inxbanco.append(row[0])
			self.chobanco.append(self.GetStringFromField(row[1]))

		self.index = wx.GetSingleChoiceIndex(u"Opciones",  u"Elegir Banco y Cuenta", self.chobanco, parent = None)
		if int(self.index) > -1:
			id = ID_BUTTONMOVTOBANCOBANCO
			banco, trash = self.chobanco[self.index].split(". ")
			idbanco = self.inxbanco[self.index]
			self.idbanco = idbanco
			self.GetControl(id).SetLabel(self.GetStringFromField(banco + self.titulo))
			xysize = self.GetControl(id).GetBestSize()
			self.GetControl(id).SetSize(xysize)
			return True
		return False

	def OnChoiceControl(self, event):
		id = event.GetId()
		self.ChoiceControl(id)
		
	def ChoiceControl(self, id):
		if not self.FillingARecord:
			if self.GetControl(id).GetStringSelection() <> self.originales[id]:
				self.GetControl(id).SetBackgroundColour(wx.CYAN)
				self.GetControl(id).Refresh()
				choice = True
			else:
				self.GetControl(id).SetBackgroundColour(wx.WHITE)
				self.GetControl(id).Refresh()
				choice = False
			
			if self.OriginalesDistintos() or choice:
				self.GetControl(ID_BUTTONMOVTOBANCOAPLICAR).Enable(True)
			else:
				self.GetControl(ID_BUTTONMOVTOBANCOAPLICAR).Enable(False)

	def OnChoiceFiltro(self, event):
		id = event.GetId()
		if id == ID_TEXTCTRLMOVTOBANCOFECHAFILTRO:
			habilitado = self.GetControl(ID_TEXTCTRLMOVTOBANCOFECHARANGO).IsEnabled()
			if self.GetControl(id).GetValue():
				if not habilitado:
					self.GetControl(ID_TEXTMOVTOBANCOFECHARANGO).Enable(True)
					self.GetControl(ID_TEXTCTRLMOVTOBANCOFECHARANGO).Enable(True)
					self.GetControl(ID_BITMAPBUTTONMOVTOBANCOFECHARANGO).Enable(True)
					self.GetControl(ID_BITMAPBUTTONMOVTOBANCOLIMPIARFECHARANGO).Enable(True)
			else:
				if habilitado:
					self.GetControl(ID_TEXTMOVTOBANCOFECHARANGO).Enable(False)
					self.GetControl(ID_TEXTCTRLMOVTOBANCOFECHARANGO).Enable(False)
					self.GetControl(ID_BITMAPBUTTONMOVTOBANCOFECHARANGO).Enable(False)
					self.GetControl(ID_BITMAPBUTTONMOVTOBANCOLIMPIARFECHARANGO).Enable(False)
			event.Skip()
			return
				
		self.FillListCtrl()
	
	def OnPrintExcel(self, event):
		tabla = self.dbtable
		meta = ((14,"Id Movto.") , (70,u"Fecha"), (20,u"Tipo"), (20,u"Cantidad"),
				(100,u"Referencia"), (20,"Estatus"), (20,u"Clasificado"))
		query = self.FillListCtrl(printexcel = True)
		bancocuenta = self.GetControl(ID_BUTTONMOVTOBANCOBANCO).GetLabel()
		titulo = u"Movimientos de Banco - %s" % bancocuenta
		self.DisplayGrid(tabla, meta, query, titulo)

	def FillListCtrl(self, display= 'first', printexcel = False):
		lctrl = self.GetControl(ID_LISTCTRLMOVTOBANCO)
		lctrl.ClearAll()
		fechafiltro = self.GetControl(ID_TEXTCTRLMOVTOBANCOFECHAFILTRO).GetValue()
		fechamovto = ""
		if fechafiltro:
			try:
				fecha_dia, fecha_mes, fecha_ano = self.GetControl(ID_TEXTCTRLMOVTOBANCOFECHAFILTRO).GetValue().split('/')
				fechainicial = "'%s/%02d/%02d'" % (fecha_ano, int(fecha_mes), int(fecha_dia))
				fecharango = self.GetControl(ID_TEXTCTRLMOVTOBANCOFECHARANGO).GetValue()
				if fecharango:
					rango_dia, rango_mes, rango_ano = self.GetControl(ID_TEXTCTRLMOVTOBANCOFECHARANGO).GetValue().split('/')
					fechafinal = "'%s/%02d/%02d'" % (rango_ano, int(rango_mes), int(rango_dia))
					if fechainicial > fechafinal:
						control = self.GetControl(ID_TEXTCTRLMOVTOBANCOTOTALVISTA)
						control.SetBackgroundColour(wx.Colour(153,255,153))
						control.SetForegroundColour(wx.NamedColour("BLACK"))
						control.SetValue("0.00")
						Mensajes().Info(self, u"� La Fecha Inicial no debe ser mayor a la Fecha Final !", u"Atenci�n")
						return
					else:
						fechamovto = "and (bm.fechamovto >= %s and bm.fechamovto <= %s)" % (fechainicial, fechafinal)
				else:
					fechamovto = "and bm.fechamovto = %s" % fechainicial
			except:
				fechamovto = ""
				
		self.filtrotipomovto = self.GetControl(ID_CHOICEMOVTOBANCOFILTROTIPOMOVTO).GetStringSelection()
		if self.filtrotipomovto == "Cargos": self.filtrotipomovto = "and bm.tipomovto = 'C'"
		elif self.filtrotipomovto == "Abonos": self.filtrotipomovto = "and bm.tipomovto = 'A'"
		else: self.filtrotipomovto = ""
		
		self.filtroclasificado = self.GetControl(ID_CHOICEMOVTOBANCOFILTROCLASIFICADO).GetStringSelection()
		if self.filtroclasificado == "Si": self.filtroclasificado = "and bm.clasificado = 'S'"
		elif self.filtroclasificado == "No": self.filtroclasificado = "and bm.clasificado = 'N'"
		else: self.filtroclasificado = ""
		
		self.filtroeliminado = self.GetControl(ID_CHOICEMOVTOBANCOFILTROELIMINADO).GetStringSelection()
		if self.filtroeliminado == "Si": self.filtroeliminado = "and bm.eliminado = 'S'"
		elif self.filtroeliminado == "No": self.filtroeliminado = "and bm.eliminado = 'N'"
		else: self.filtroeliminado = ""
		
		if printexcel:
			sql = """
			select bm.idreferenciamovto, convert(varchar(10), bm.fechamovto, 103), bm.tipomovto,
			bm.cantidad, bm.referencia, bm.estatus, bm.clasificado, bm.eliminado,
			convert(varchar(10), bm.fechamovto,111) as fecha
			from %s bm join gixbancos ba on ba.idbanco = bm.idbanco
			where bm.empresaid = %s and bm.idbanco = %s %s %s %s %s order by fecha desc, bm.idreferenciamovto desc
			""" % (self.dbtable, int(self.empresaid), int(self.idbanco), fechamovto,
				   self.filtrotipomovto, self.filtroclasificado, self.filtroeliminado)
			return sql
		
		sql = """
		select bm.idreferenciamovto, convert(varchar(10), bm.fechamovto, 103), bm.tipomovto, ba.nombre,
		bm.cantidad, bm.referencia, bm.estatus, bm.clasificado, bm.eliminado,
		convert(varchar(10), bm.fechamovto,111) as fecha
		from %s bm join gixbancos ba on ba.idbanco = bm.idbanco
		where bm.empresaid = %s and bm.idbanco = %s %s %s %s %s order by fecha desc, bm.idreferenciamovto desc
		""" % (self.dbtable, int(self.empresaid), int(self.idbanco), fechamovto,
			   self.filtrotipomovto, self.filtroclasificado, self.filtroeliminado)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		fila = 0
		totalvista = 0
		if rows:
			wx.BeginBusyCursor()
			lctrl.InsertColumn(0, "Id", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, "Fecha", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(2, "Tipo", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(3, "Cantidad", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(4, "Referencia", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(5, "Estatus", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(6, "Clasificado", wx.LIST_FORMAT_CENTER)
			for row in rows:
				if str(row[8]) == "S":
					if fila %2 != 0: bgcolor = [255,153,153]
					else:            bgcolor = [255,215,215]
				else:
					if fila %2 != 0: bgcolor = [204,204,255]
					else:            bgcolor = [230,230,255]
					
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				if str(row[2]) == "C":
					tipo = "CARGO"
					totalvista -= float(row[4])
				else:
					tipo = "ABONO"
					totalvista += float(row[4])
					
				if str(row[6]) == "F": estatus = "FIRME"
				else: estatus = "SBC"
				
				if str(row[7]) == "S": clasificado = "Si"
				else: clasificado = "No"
				
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, row[1])
				lctrl.SetStringItem(index, 2, tipo)
				lctrl.SetStringItem(index, 3, str(amount_and_cents_with_commas(row[4])))
				lctrl.SetStringItem(index, 4, self.GetString(row[5]))
				lctrl.SetStringItem(index, 5, estatus)
				lctrl.SetStringItem(index, 6, clasificado)
				lctrl.SetItemData(index, row[0])
				if int(row[0]) == self.idrefmovto:
					self.ctrlindex = index
					
				fila += 1
				
			lctrl.SetColumnWidth(0, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(2, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(3, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(4, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(6, 70)
			wx.EndBusyCursor()
			if display == 'first':
				self.GetLFRecord("min")
			elif display == 'last':
				self.GetLFRecord("max")
				
		else:
			lctrl.InsertColumn(0, "       Cuenta sin Movimientos", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 167)
			
		control = self.GetControl(ID_TEXTCTRLMOVTOBANCOTOTALVISTA)
		if totalvista < 0:
			totalvista *= -1
			control.SetBackgroundColour(wx.NamedColour("RED"))
			control.SetForegroundColour(wx.NamedColour("WHITE"))
		else:
			control.SetBackgroundColour(wx.Colour(153,255,153))
			control.SetForegroundColour(wx.NamedColour("BLACK"))
			
		control.SetValue(str(amount_and_cents_with_commas(totalvista)))
		if fila:
			self.GetControl(ID_BUTTONMOVTOBANCOEDITARLISTCTRL).Enable(True)
			self.GetControl(ID_BUTTONMOVTOBANCOELIMINARLISTCTRL).Enable(True)
		else:
			self.GetControl(ID_BUTTONMOVTOBANCOEDITARLISTCTRL).Enable(False)
			self.GetControl(ID_BUTTONMOVTOBANCOELIMINARLISTCTRL).Enable(False)
			
	def OnLCtrl(self, event):
		self.currentitem = event.m_itemIndex
		self.LCtrl()
		event.Skip()
		
	def LCtrl(self):
		lctrl = self.GetControl(self.listctrl)
		datointerno = lctrl.GetItem(self.currentitem, 0).GetText()
		datointerno = int(datointerno)
		if self.GetControl(ID_BUTTONMOVTOBANCOAPLICAR).IsEnabled():
			self.NewFlag = False
			self.Text(True)
			if not self.NewFlag:
				if Mensajes().YesNo(self,u"Algunos datos han cambiado\n\n� Desea ud. grabarlos ?", \
						    u"Confirmaci�n"):
					self.SaveRecord()
					
		if self.datointernoynombre:
			if self.GetRecord(datointerno, nombre):
				if self.eliminado == "N" and self.clasificado == "N":
					self.GetControl(ID_BUTTONMOVTOBANCOELIMINARLISTCTRL).Enable(True)
			else:
				pass
		elif self.GetRecord(datointerno):
			if self.eliminado == "N" and self.clasificado == "N":
				self.GetControl(ID_BUTTONMOVTOBANCOELIMINARLISTCTRL).Enable(True)
		else:
			Mensajes().Warn(self, u"Escoja un registro v�lido", u"Atenci�n")
		
	def GetLFRecord(self, what):
		lctrl = self.GetControl(self.listctrl)
		sql = """
		select %s(bm.fechamovto), bm.idreferenciamovto from %s bm
		where bm.empresaid = %s and bm.idbanco = %s %s %s %s
		group by bm.idreferenciamovto
		""" % (what, self.dbtable, self.empresaid, self.idbanco, self.filtrotipomovto,
			   self.filtroclasificado, self.filtroeliminado)
		idrefmovto = ""
		try:
			cursor = r_cn.cursor()
			cursor.execute(str(sql))
			row = fetchone(cursor)
			cursor.close()
			if row is not None:
				idrefmovto = int(row[1])
			self.GetRecord(idrefmovto)
			if not self.ctrlindex:
				if what == "min":
					lctrl.SetItemState(0, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
				else:
					lctrl.SetItemState(lctrl.GetItemCount() - 1, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
		finally:
			pass
		
	def OnText(self, event):
		self.controlactual = event.GetId()
		self.Text()
	
	def Text(self, VengodelaLista = False):
		for id in(ID_TEXTCTRLMOVTOBANCOFECHAMOVTO, ID_CHOICEMOVTOBANCOTIPOMOVIMIENTO, ID_TEXTCTRLMOVTOBANCOCANTIDAD,
				  ID_TEXTCTRLMOVTOBANCOREFERENCIA, ID_CHOICEMOVTOBANCOESTATUS):
			control = self.GetControl(id)
			if id in (ID_CHOICEMOVTOBANCOTIPOMOVIMIENTO, ID_CHOICEMOVTOBANCOESTATUS):
				valor = control.GetStringSelection().strip()
			else:
				valor = control.GetValue().strip()
			if valor == "" and not self.FillingARecord and not self.NewFlag:
				self.NewFlag = True
				if not VengodelaLista:
					Mensajes().Info(self, u"� No debe quedar ning�n dato en blanco !", u"Atenci�n")
					return
			if id == ID_TEXTCTRLMOVTOBANCOCANTIDAD:
				cantidad = control.GetValue().strip()
				if cantidad != "":
					if str(cantidad)[-1:] != ".":
						if not str(cantidad)[-1:].isdigit():
							Mensajes().Info(self, u"� La cantidad debe ser num�rica !", u"Atenci�n")
							control.SetValue(str(cantidad)[:-1])
							control.SetSelection(-1,-1)
							return
						else:
							try:
								if not float(cantidad) > 0 and len(str(cantidad)) > 2:
									Mensajes().Info(self, u"� La cantidad debe ser igual o mayor a .01 !", u"Atenci�n")
									control.SetValue("")
									control.SetSelection(-1,-1)
									return
							except:
								Mensajes().Info(self, u"� Digite correctamente la cantidad !", u"Atenci�n")
								control.SetValue("")
								control.SetSelection(-1,-1)
								return
				elif not self.FillingARecord and not self.NewFlag:
					self.NewFlag = True
					if not VengodelaLista:
						Mensajes().Info(self, u"� La cantidad no debe quedar en blanco !", u"Atenci�n")
						return

			if id == ID_TEXTCTRLMOVTOBANCOREFERENCIA:
				ctrl = self.GetControl(ID_TEXTCTRLMOVTOBANCOREFERENCIA)
				valor = ctrl.GetValue().encode("iso8859-1")
				valornum = str(valor).replace('.','')
				if valor and not valornum.isdigit():
					if valor not in (",", ".", "#", "&", "!", "�", "?", "�", "/", "(", ")", "$", "'"):
						if not str(valor).isupper():
							ctrl.SetValue(str(valor).upper())
							lastposition = ctrl.GetLastPosition()
							ctrl.SetInsertionPoint(lastposition)
					else:
						ctrl.SetValue("")
					
		id = self.controlactual
		if not self.FillingARecord:
			if self.OriginalDistinto(id):
				self.GetControl(id).SetBackgroundColour(wx.CYAN)
				self.GetControl(id).Refresh()
			else:
				self.GetControl(id).SetBackgroundColour(wx.WHITE)
				self.GetControl(id).Refresh()
			if self.OriginalesDistintos():
				self.GetControl(ID_BUTTONMOVTOBANCOAPLICAR).Enable(True)
			else:
				self.GetControl(ID_BUTTONMOVTOBANCOAPLICAR).Enable(False)
		self.ChoiceControl(ID_CHOICEMOVTOBANCOTIPOMOVIMIENTO)
		self.ChoiceControl(ID_CHOICEMOVTOBANCOESTATUS)
		
	def ObtenerEmpresa(self, empresaid):
		""" Obtener de base de datos la raz�n social de la empresa
		"""
		query = """
		select RazonSocial + ' - ' + convert(varchar(7), EmpresaID)
		from cont_Empresas where EmpresaId = %s
		""" % empresaid
		try:
			cu = r_cn.cursor()
			cu.execute(query)
			row = fetchone(cu)
			cu.close()
			if row:
				self.SetTitle(self.GetStringFromField(row[0]),)
			else:
				Mensajes().Info(self, u"No se ha encontrado la empresa de trabajo.\n" \
								u"Por favor abandone este m�dulo y verifique.", u"Atenci�n")
		except:
			cu.close()
			Mensajes().Info(self, u"Se estan experimentando problemas.\n" \
							u"Por favor abandone este m�dulo y verifique.\n\n%s" % query, u"Atenci�n")
		
	def ObtenerBanco(self, idbanco):
		""" Obtener de base de datos el nombre del banco
		"""
		sql = "select nombre from gixbancos where idbanco = %s" % idbanco
		nombre = ""
		try:
			cu = r_cn.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			cu.close()
			if row:
				nombre = "%s" % (self.GetStringFromField(row[0]),) 
		except:
			cu.close()
			
		return nombre
	
	def ActualizaSaldo(self):
		fechaactual = self.GetControl(ID_TEXTCTRLMOVTOBANCOFECHAMOVTO).GetValue()
		dia_actual, mes_actual, ano_actual = fechaactual.split('/')
		fechaanterior = self.originales[ID_TEXTCTRLMOVTOBANCOFECHAMOVTO]
		if fechaanterior != None:
			dia_anterior, mes_anterior, ano_anterior = fechaanterior.split('/')
		tipomovtoactual = self.GetControl(ID_CHOICEMOVTOBANCOTIPOMOVIMIENTO).GetStringSelection()
		tipomovtoanterior = self.originales[ID_CHOICEMOVTOBANCOTIPOMOVIMIENTO]
		cantidadactual = self.GetControl(ID_TEXTCTRLMOVTOBANCOCANTIDAD).GetValue()
		cantidadanterior = self.originales[ID_TEXTCTRLMOVTOBANCOCANTIDAD]
		try:
			cantidadactual = float(cantidadactual)
		except:
			cantidadactual = 0
		try:
			cantidadanterior = float(cantidadanterior)
		except:
			cantidadanterior = 0
		if fechaactual != fechaanterior or tipomovtoactual != tipomovtoanterior or cantidadactual != cantidadanterior:
			if tipomovtoactual == tipomovtoanterior and cantidadactual == cantidadanterior:
				if int(mes_actual) != int(mes_anterior) or int(ano_actual) != int(ano_anterior):
					self.EliminaMovimientoSaldo(dia_anterior, mes_anterior, ano_anterior, tipomovtoanterior, cantidadanterior)
					return True
				else:
					pass
			else:
				self.EliminaMovimientoSaldo(dia_anterior, mes_anterior, ano_anterior, tipomovtoanterior, cantidadanterior)
				return True
		return False
				
	def EliminaMovimientoSaldo(self, dia_anterior, mes_anterior, ano_anterior, tipomovtoanterior, cantidadanterior):
		fechamovto = "'%04d/%02d/01'" % (int(ano_anterior), int(mes_anterior))
		sql = """
		select convert(varchar(10), periodo, 111), saldoinicial, totalabonos, totalcargos
		from gixbancossaldosxperiodo where idbanco = %s and periodo >= %s
		""" % (self.idbanco, fechamovto)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		periodos = []
		periodosxactualizar = {}
		for row in rows:
			periodos.append(self.GetStringFromField(row[0]))
			periodosxactualizar[self.GetStringFromField(row[0])] = [float(row[1]), float(row[2]), float(row[3])]
			
		periodos.sort()
		entro = True
		for periodo in periodos:
			if entro:
				entro = False
				if tipomovtoanterior == "ABONO":
					cantidad = float(periodosxactualizar[periodo][1])
					cantidad -= float(cantidadanterior)
					sqlupdate = "totalabonos = %s" % float(cantidad)
				else:
					cantidad = float(periodosxactualizar[periodo][2])
					cantidad -= float(cantidadanterior)
					sqlupdate = "totalcargos = %s" % float(cantidad)
			else:
				cantidad = float(periodosxactualizar[periodo][0])
				if tipomovtoanterior == "ABONO":
					cantidad -= float(cantidadanterior)
				else:
					cantidad += float(cantidadanterior)
				sqlupdate = "saldoinicial = %s" % float(cantidad)
			
			sql = "update gixbancossaldosxperiodo set %s where idbanco = %s and periodo = '%s'" \
				% (sqlupdate, self.idbanco, periodo)
			todobien = self.QueryUpdateRecord(sql)
	
	def ObtenerSaldo(self):
		controlq = self.GetControl(ID_TEXTCTRLMOVTOBANCOSALDO)
		controll = self.GetControl(ID_TEXTMOVTOBANCOSALDOLETRA)
		sql = """
		select periodo, saldoinicial, totalabonos, totalcargos
		from gixbancossaldosxperiodo where idbanco = %s order by periodo desc
		""" % self.idbanco
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if False:
			f = ""
			for x in row:
				f += str(x) + " "
			warnings.warn("<<Valor de row: %s>>" % f)

		self.saldo = 0
		if row:
			self.saldo = float(row[1]) + float(row[2]) - float(row[3])
			
		warnings.warn("<<Valor de self.saldo: %s" % self.saldo)
			
		controlq.SetValue(str(amount_and_cents_with_commas(self.saldo)))
		if self.saldo < 0:
			self.saldo *= -1
			controlq.SetValue(str(amount_and_cents_with_commas(self.saldo)))
			controlq.SetBackgroundColour(wx.NamedColour("RED"))
			controlq.SetForegroundColour(wx.NamedColour("WHITE"))
			controll.SetLabel("(MENOS "+str(c2p(self.saldo).texto())+")")
			controll.SetBackgroundColour(wx.NamedColour("RED"))
			controll.SetForegroundColour(wx.NamedColour("WHITE"))
		elif self.saldo > 0:
			controlq.SetBackgroundColour(wx.Colour(153,255,153))
			controlq.SetForegroundColour(wx.NamedColour("BLACK"))
			controll.SetLabel("("+str(c2p(self.saldo).texto())+")")
			controll.SetBackgroundColour(wx.Colour(153,255,153))
			controll.SetForegroundColour(wx.BLACK)
		else:
			controlq.SetBackgroundColour(wx.Colour(153,255,153))
			controlq.SetForegroundColour(wx.NamedColour("BLACK"))
			controlq.SetValue("0.00")
			controll.SetLabel("(CERO PESOS 00/100 M.N.)")
			controll.SetBackgroundColour(wx.Colour(153,255,153))
			controll.SetForegroundColour(wx.BLACK)
			
	def SaveRecord(self):
		idreferenciamovto = self.idreferenciamovto.GetValue()
		if idreferenciamovto.strip() == "" :
			bienGrabado, self.idrefmovto = self.AddRecord()
			if bienGrabado:
				puesto = self.GetControl(ID_TEXTCTRLMOVTOBANCOID).GetValue()
				#self.ObtenerSaldo()
				self.ReconstruirSaldoCuenta()
			else:
				Mensajes().Info(self,u"� El Registro no fue grabado !", u"Atenci�n")
		else:
			bienGrabado, self.idrefmovto = self.UpdateRecord()
			if bienGrabado:
				if self.ActualizaSaldo():
					#self.ObtenerSaldo()
					self.ReconstruirSaldoCuenta()
			else:
				Mensajes().Info(self,u"� El Registro no fue actualizado !", u"Atenci�n")
		if bienGrabado:
			lctrl = self.GetControl(ID_LISTCTRLMOVTOBANCO)
			lctrl.SetItemState(self.ctrlindex, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
			lctrl.EnsureVisible(self.ctrlindex)
			self.GetControl(ID_BUTTONMOVTOBANCOAPLICAR).Enable(False)
			self.GetControl(ID_BUTTONMOVTOBANCOAGREGAR).Enable(True)
			self.GetRecord("%s" % (idreferenciamovto))
			
	def UpdateRecord(self):
		idreferenciamovto = self.GetControl(ID_TEXTCTRLMOVTOBANCOID).GetValue()
		empresaid = self.empresaid
		idbanco = self.idbanco
		fechamovto = "NULL"
		periodo = ""
		try:
			fecha_dia, fecha_mes, fecha_ano = self.GetControl(ID_TEXTCTRLMOVTOBANCOFECHAMOVTO).GetValue().split('/')
			fecha_dia, fecha_mes, fecha_ano = int(fecha_dia), int(fecha_mes), int(fecha_ano)
			fechamovto = "'%04d/%02d/%02d'" % (fecha_ano, fecha_mes, fecha_dia)
			periodo = "'%04d/%02d/01'" % (fecha_ano, fecha_mes)
		except:
			Mensajes().Info(self, u"Problemas con la fecha al actualizar movimientos", u"Atenci�n")
			return False, 0
		
		tipomovto = self.GetControl(ID_CHOICEMOVTOBANCOTIPOMOVIMIENTO).GetStringSelection()
		if tipomovto == "CARGO":
			tipomovto = "C"
		else:
			tipomovto = "A"
		cantidad = self.GetControl(ID_TEXTCTRLMOVTOBANCOCANTIDAD).GetValue()
		referencia = self.GetControl(ID_TEXTCTRLMOVTOBANCOREFERENCIA).GetValue()
		estatus = self.GetControl(ID_CHOICEMOVTOBANCOESTATUS).GetStringSelection()
		if estatus == "FIRME":
			estatus = "F"
		else:
			estatus = "S"
		setListForQuery = """
		empresaid = %s, idbanco = %s, fechamovto = %s, tipomovto = '%s', cantidad = %s,
		referencia = '%s', estatus = '%s'
		""" % (empresaid, idbanco, fechamovto, tipomovto, float(cantidad), referencia, estatus)
		sql = "update %s set %s where idreferenciamovto = %s" \
			% (self.dbtable, setListForQuery, idreferenciamovto)
		queTal = self.QueryUpdateRecord(sql)
		numero = 0
		if queTal:
			numero = int(idreferenciamovto)
			updateok = self.UpdateBankBalance(periodo, cantidad, fecha_mes, fecha_ano, tipomovto)
			if not updateok:
				return False, 0
			sql = """
			insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension)
			values ('%s', getdate(), '%s', '%s', '%s', '%s')
			""" % (self.BlogGUID, self.usuario, u"Modificaci�n del Movimiento", "", "")
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
		
		return queTal, numero
		
	def AddRecord(self):
		empresaid = self.empresaid
		idbanco = self.idbanco
		fechamovto = "NULL"
		periodo = ""
		try:
			fecha_dia, fecha_mes, fecha_ano = self.GetControl(ID_TEXTCTRLMOVTOBANCOFECHAMOVTO).GetValue().split('/')
			fecha_dia, fecha_mes, fecha_ano = int(fecha_dia), int(fecha_mes), int(fecha_ano)
			fechamovto = "'%04d/%02d/%02d'" % (fecha_ano, fecha_mes, fecha_dia)
			periodo = "'%04d/%02d/01'" % (fecha_ano, fecha_mes)
		except:
			Mensajes().Info(self, u"Problemas con la fecha al agregar movimientos", u"Atenci�n")
			return False, 0
		tipomovto = self.GetControl(ID_CHOICEMOVTOBANCOTIPOMOVIMIENTO).GetStringSelection()
		if tipomovto == "CARGO":
			tipomovto = "C"
		else:
			tipomovto = "A"
		cantidad = self.GetControl(ID_TEXTCTRLMOVTOBANCOCANTIDAD).GetValue()
		referencia = self.GetControl(ID_TEXTCTRLMOVTOBANCOREFERENCIA).GetValue()
		estatus = self.GetControl(ID_CHOICEMOVTOBANCOESTATUS).GetStringSelection()
		if estatus == "FIRME":
			estatus = "F"
		else:
			estatus = "S"
		sqlFields = """
		empresaid, idbanco, fechamovto, tipomovto, cantidad, referencia, estatus, clasificado, eliminado
		"""
		sqlValues = "%s, %s, %s, '%s', %s, '%s', '%s', '%s', '%s'" % \
			(empresaid, idbanco, fechamovto, tipomovto, float(cantidad), referencia, estatus, "N", "N")
		sql = "insert into %s (%s) values (%s)" % (self.dbtable, sqlFields, sqlValues) 
		queTal = self.QueryUpdateRecord(sql)
		numero = 0
		if queTal:
			updateok = self.UpdateBankBalance(periodo, cantidad, fecha_mes, fecha_ano, tipomovto)
			if not updateok:
				return False, 0
			sqlx = "select max(idreferenciamovto) from %s" % self.dbtable
			cu = r_cn.cursor()
			cu.execute(str(sqlx))
			row = fetchone(cu)
			cu.close()
			if row is not None:
				numero = int(row[0])
			self.GetControl(ID_TEXTCTRLMOVTOBANCOID).SetValue(str(numero))
			sqly = "select convert(varchar(100), BlogGUID) from %s where idreferenciamovto = %s" % (self.dbtable, numero)
			cu = r_cn.cursor()
			cu.execute(str(sqly))
			row = fetchone(cu)
			cu.close()
			if row is not None:
				self.BlogGUID = row[0]
			sql = """
			insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura,
			ContenidoText, ContenidoBinario, Extension)
			values ('%s', getdate(), '%s', '%s', '%s', '%s')
			""" % (self.BlogGUID, self.usuario, "Alta del Movimiento", "", "")
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")

		return queTal, int(numero)
	
	def UpdateBankBalance(self, periodo, cantidad, fecha_mes, fecha_ano, tipomovto):
		updateok= True
		sql = """
		select saldoinicial, totalabonos, totalcargos from gixbancossaldosxperiodo
		where idbanco = %s and periodo = %s
		""" % (self.idbanco, periodo)
		try:
			cu = r_cn.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			cu.close()
			if not row:
				todobien, saldo = self.GetBankBalance(fecha_mes, fecha_ano)
				if todobien:
					if tipomovto == "A":
						saldosiguienteperiodo = float(saldo) + float(cantidad)
						sql = """
						insert into gixbancossaldosxperiodo
						(idbanco, periodo, saldoinicial, totalabonos, totalcargos)
						values (%s, %s, %s, %s, %s)
						""" % (self.idbanco, periodo, float(saldo), float(cantidad), 0)
					else:
						saldosiguienteperiodo = float(saldo) - float(cantidad)
						sql = """
						insert into gixbancossaldosxperiodo
						(idbanco, periodo, saldoinicial, totalabonos, totalcargos)
						values (%s, %s, %s, %s, %s)
						""" % (self.idbanco, periodo, float(saldo), 0, float(cantidad))
					updateok = self.QueryUpdateRecord(sql)
				else:
					updateok = False
			else:
				totalabonos = float(row[1])
				totalcargos = float(row[2])
				if tipomovto == "A":
					totalabonos += float(cantidad)
				else:
					totalcargos += float(cantidad)
				saldosiguienteperiodo = float(row[0]) + float(totalabonos) - float(totalcargos)
				sql = """
				update gixbancossaldosxperiodo set totalabonos = %s, totalcargos = %s
				where idbanco = %s and periodo = %s
				""" % (float(totalabonos), float(totalcargos), self.idbanco, periodo)
				updateok = self.QueryUpdateRecord(sql)
		except:
			Mensajes().Info(self, u"Problemas al actualizar saldos\n%s" % sql, u"Atenci�n")
			updateok = False
			
		updateok = self.UpdateInitialBankBalances(fecha_mes, fecha_ano, saldosiguienteperiodo)
			
		return updateok
	
	def GetBankBalance(self, fecha_mes, fecha_ano):
		sql = """
		select min(periodo) from gixbancossaldosxperiodo where idbanco = %s
		""" % self.idbanco
		try:
			cu = r_cn.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			cu.close()
			if str(row[0]) != "None":
				limite_periodo = str(row[0])
				limite_ano, limite_mes, limite_dia = limite_periodo.split('-')
			else:
				limite_ano, limite_mes = fecha_ano, fecha_mes
			limite_ano, limite_mes = int(limite_ano), int(limite_mes)
			saldo = 0
			todobien = True
			while True:
				if fecha_mes == 1:
					fecha_mes = 12
					fecha_ano -= 1
				else:
					fecha_mes -= 1
				if fecha_ano < limite_ano:
					break
				if fecha_ano == limite_ano and fecha_mes < limite_mes:
					break
				periodo = "'%04d/%02d/01'" % (fecha_ano, fecha_mes)
				sql = """
				select saldoinicial + totalabonos - totalcargos
				from gixbancossaldosxperiodo where idbanco = %s and periodo = %s
				""" % (self.idbanco, periodo)
				try:
					cu = r_cn.cursor()
					cu.execute(str(sql))
					row = fetchone(cu)
					cu.close()
					if row:
						saldo = float(row[0])
						break
				except:
					Mensajes().Info(self, u"Problemas al buscar saldo inicial\n%s" \
							% sql, u"Atenci�n")
					todobien = False
					break
		except:
			Mensajes().Info(self, u"Problemas al buscar periodo inicial\n%s" % sql, u"Atenci�n")
			todobien = False
			
		return todobien, saldo
	
	def UpdateInitialBankBalances(self, fecha_mes, fecha_ano, saldosiguienteperiodo):
		sql = """
		select max(periodo) from gixbancossaldosxperiodo where idbanco = %s
		""" % self.idbanco
		try:
			cu = r_cn.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			cu.close()
			if str(row[0]) != "None":
				limite_periodo = str(row[0])
				limite_ano, limite_mes, limite_dia = limite_periodo.split('-')
			else:
				limite_ano, limite_mes = fecha_ano, fecha_mes
				
			limite_ano, limite_mes = int(limite_ano), int(limite_mes)
			todobien = True
			while True:
				if fecha_mes == 12:
					fecha_mes = 1
					fecha_ano += 1
				else:
					fecha_mes += 1
				if fecha_ano > limite_ano:
					break
				if fecha_ano == limite_ano and fecha_mes > limite_mes:
					break
				periodo = "'%04d/%02d/01'" % (fecha_ano, fecha_mes)
				sql = """
				select saldoinicial, totalabonos, totalcargos
				from gixbancossaldosxperiodo where idbanco = %s and periodo = %s
				""" % (self.idbanco, periodo)
				try:
					cu = r_cn.cursor()
					cu.execute(str(sql))
					row = fetchone(cu)
					cu.close()
					if row:
						sql = """
						update gixbancossaldosxperiodo set saldoinicial = %s
						where idbanco = %s and periodo = %s
						""" % (float(saldosiguienteperiodo), self.idbanco, periodo)
						saldosiguienteperiodo += float(row[1]) - float(row[2])
						todobien = self.QueryUpdateRecord(sql)
						if not todobien:
							break
				except:
					Mensajes().Info(self, u"Problemas al buscar saldo inicial\n%s" \
							% sql, u"Atenci�n")
					todobien = False
					break
		except:
			Mensajes().Info(self, u"Problemas al buscar �ltimo periodo\n%s" % sql, u"Atenci�n")
			todobien = False
		
		return todobien
	
	def OnDeleteRecord(self, event):
		id = self.GetControl(ID_TEXTCTRLMOVTOBANCOID).GetValue()
		if Mensajes().YesNo(self,u"� Desea realmente eliminar el registro %s ?" % id, u"Confirmaci�n") :
			if self.DeleteRecord():
				sql = """
				insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension)
				values ('%s', getdate(), '%s', '%s', '%s', '%s')
				""" % (self.BlogGUID, self.usuario, u"Eliminaci�n del Movimiento", "", "")
				if not self.QueryUpdateRecord(sql):
					Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
					
				fechaanterior = self.originales[ID_TEXTCTRLMOVTOBANCOFECHAMOVTO]
				dia_anterior, mes_anterior, ano_anterior = fechaanterior.split('/')
				tipomovtoanterior = self.originales[ID_CHOICEMOVTOBANCOTIPOMOVIMIENTO]
				cantidadanterior = self.originales[ID_TEXTCTRLMOVTOBANCOCANTIDAD]
				try:
					cantidadanterior = float(cantidadanterior)
				except:
					cantidadanterior = 0
					
				self.FillListCtrl()
				self.EliminaMovimientoSaldo(dia_anterior, mes_anterior, ano_anterior, tipomovtoanterior, cantidadanterior)
				#self.ObtenerSaldo()
				self.ReconstruirSaldoCuenta()
				self.GetControl(ID_BUTTONMOVTOBANCOAPLICAR).Enable(False)
				self.GetControl(ID_BUTTONMOVTOBANCOAGREGARLISTCTRL).Enable(True)
				self.GetControl(ID_BUTTONMOVTOBANCOEDITARLISTCTRL).Enable(False)
				self.GetControl(ID_BUTTONMOVTOBANCOELIMINARLISTCTRL).Enable(False)
				
		self.GetControl(ID_LISTCTRLMOVTOBANCO).SetFocus()
		event.Skip()
		return
				
	def DeleteRecord(self):
		idreferenciamovto = self.idreferenciamovto.GetValue().strip()
		if idreferenciamovto == "":
			Mensajes().Info(self, u"No se ha especificado el movimiento", u"Atenci�n")
			return False
		sql = "update %s set eliminado = 'S' where idreferenciamovto = %s" % (self.dbtable, idreferenciamovto)
		return self.QueryUpdateRecord(sql)
		
	def GetRecord(self, record):
		lctrl = self.GetControl(self.listctrl)
		try:
			a = int(record)
		except:
			return False
		
		self.FillingARecord = True
		self.LimpiaControles()
		self.SetColoreable(False)
		for v in self.controles_tipo_txt.itervalues():
			self.originales[v] = None
		self.originales[ID_CHOICEMOVTOBANCOTIPOMOVIMIENTO] = None
		self.originales[ID_CHOICEMOVTOBANCOESTATUS] = None
		
		idrefmovto = int(record)
		self.idreferenciamovto.SetValue(str(idrefmovto))
		sql = """
		select convert(varchar(10),fechamovto,103), tipomovto, cantidad, referencia,
		estatus, clasificado, eliminado, convert(varchar(100), BlogGUID)
		from %s where idreferenciamovto = %s
		"""	% (self.dbtable, idrefmovto)
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		cursor.close()
		fechamovto, tipomovto, cantidad, referencia, estatus, self.clasificado, self.eliminado, self.BlogGUID = map(str, row)
		self.GetControl(ID_TEXTCTRLMOVTOBANCOFECHAMOVTO).SetValue(fechamovto)
		if tipomovto == "C":
			self.GetControl(ID_CHOICEMOVTOBANCOTIPOMOVIMIENTO).SetSelection(0)
		else:
			self.GetControl(ID_CHOICEMOVTOBANCOTIPOMOVIMIENTO).SetSelection(1)
		self.GetControl(ID_TEXTCTRLMOVTOBANCOCANTIDAD).SetValue(cantidad)
		self.GetControl(ID_TEXTCTRLMOVTOBANCOREFERENCIA).SetValue(referencia)
		if estatus == "F":
			self.GetControl(ID_CHOICEMOVTOBANCOESTATUS).SetSelection(0)
		else:
			self.GetControl(ID_CHOICEMOVTOBANCOESTATUS).SetSelection(1)
		control = self.GetControl(ID_TEXTCTRLMOVTOBANCOCLASIFICADO)
		if self.clasificado == "S":
			control.SetBackgroundColour(wx.Colour(153,255,153))
			control.SetForegroundColour(wx.NamedColour("BLACK"))
			control.SetValue("Clasificado")
			self.GetControl(ID_STATICBITMAPMOVTOBANCOCLASIFICADO).SetBitmap(MyBitmapsFunc(34))
		else:
			control.SetBackgroundColour(wx.NamedColour("RED"))
			control.SetForegroundColour(wx.NamedColour("WHITE"))
			control.SetValue("NO CLASIFICADO")
			self.GetControl(ID_STATICBITMAPMOVTOBANCOCLASIFICADO).SetBitmap(MyBitmapsFunc(35))
		for x in "FECHAMOVTO,TIPOMOVIMIENTO,CANTIDAD,REFERENCIA,ESTATUS".split(","):
			if x in ("TIPOMOVIMIENTO,ESTATUS"):
				key = eval("ID_CHOICEMOVTOBANCO%s" % x)
				self.originales[key] = self.GetControl(key).GetStringSelection()
			else:
				key = eval("ID_TEXTCTRLMOVTOBANCO%s" % x)
				self.originales[key] = self.GetControl(key).GetValue()
		
		self.FillingARecord = False
		self.GetControl(ID_BUTTONMOVTOBANCOAPLICAR).Enable(False)
		self.GetControl(ID_BUTTONMOVTOBANCOAGREGAR).Enable(True)
		self.GetControl(ID_BUTTONMOVTOBANCOAGREGARLISTCTRL).Enable(True)
		if self.eliminado == "S" or self.clasificado == "S":
			self.GetControl(ID_BUTTONMOVTOBANCOEDITARLISTCTRL).Enable(False)
			self.GetControl(ID_BUTTONMOVTOBANCOELIMINARLISTCTRL).Enable(False)
		else:
			self.GetControl(ID_BUTTONMOVTOBANCOEDITARLISTCTRL).Enable(True)
			self.GetControl(ID_BUTTONMOVTOBANCOELIMINARLISTCTRL).Enable(True)
		return True

class GixIngresosClasificacion(wx.Frame, GixBase, GixBaseListCtrl):
	idtcfechafiltro = ID_TEXTCTRLINGRESOFECHAFILTRO
	idbbelegirfechafiltro = ID_BITMAPBUTTONINGRESOELEGIRFECHAFILTRO
	idbblimpiarfechafiltro = ID_BITMAPBUTTONINGRESOLIMPIARFECHAFILTRO
	idtxfechafinalfiltro = ID_TEXTINGRESOFECHAFINALFILTRO
	idtcfechafinalfiltro = ID_TEXTCTRLINGRESOFECHAFINALFILTRO
	idbbelegirfechafinalfiltro = ID_BITMAPBUTTONINGRESOELEGIRFECHAFINALFILTRO
	idbblimpiarfechafinalfiltro = ID_BITMAPBUTTONINGRESOLIMPIARFECHAFINALFILTRO
	idlc = ID_LISTCTRLINGRESO
	idtctotalvista = ID_TEXTCTRLINGRESOTOTALVISTA
	idbtpartidas = ID_BUTTONINGRESOPARTIDASLISTCTRL
	idbtrefrescarlc = ID_BUTTONINGRESOREFRESCARLISTCTRL
	idbtagregarlc = ID_BUTTONINGRESOAGREGARLISTCTRL
	idbtsalirlc = ID_BUTTONINGRESOSALIRLISTCTRL
		
	idtcfecha = ID_TEXTCTRLINGRESOFECHA
	idbbelegirfecha = ID_BITMAPBUTTONINGRESOFECHA
	idbblimpiarfecha = ID_BITMAPBUTTONINGRESOLIMPIARFECHA
	idtxbancoorigen = ID_TEXTINGRESOBANCOORIGEN
	idchbancoorigen = ID_CHOICEINGRESOBANCOORIGEN
	idbblimpiarbancoorigen = ID_BITMAPBUTTONINGRESOLIMPIABANCOORIGEN
	idtxsubsidios = ID_TEXTINGRESOSUBSIDIOS
	idtcsubsidios = ID_TEXTCTRLINGRESOSUBSIDIOS
	idtxcentrocosto = ID_TEXTINGRESOCENTROCOSTO
	idcbcentrocosto = ID_COMBOINGRESOCENTROCOSTO
	idtxpartida = ID_TEXTINGRESOPARTIDA
	idcbpartida = ID_COMBOINGRESOPARTIDA
	idsbpartida = ID_STATICBITMAPINGRESOPARTIDA
	idtxsubpartida1 = ID_TEXTINGRESOSUBPARTIDA1
	idcbsubpartida1 = ID_COMBOINGRESOSUBPARTIDA1
	idsbsubpartida1 = ID_STATICBITMAPINGRESOSUBPARTIDA1
	idtxsubpartida2 = ID_TEXTINGRESOSUBPARTIDA2
	idcbsubpartida2 = ID_COMBOINGRESOSUBPARTIDA2
	idsbsubpartida2 = ID_STATICBITMAPINGRESOSUBPARTIDA2
	idtxsubpartida3 = ID_TEXTINGRESOSUBPARTIDA3
	idcbsubpartida3 = ID_COMBOINGRESOSUBPARTIDA3
	idsbsubpartida3 = ID_STATICBITMAPINGRESOSUBPARTIDA3
	idtxsubpartida4 = ID_TEXTINGRESOSUBPARTIDA4
	idcbsubpartida4 = ID_COMBOINGRESOSUBPARTIDA4
	idsbsubpartida4 = ID_STATICBITMAPINGRESOSUBPARTIDA4
	idtxsubpartida5 = ID_TEXTINGRESOSUBPARTIDA5
	idcbsubpartida5 = ID_COMBOINGRESOSUBPARTIDA5
	idsbsubpartida5 = ID_STATICBITMAPINGRESOSUBPARTIDA5
	idbtclasificarform = ID_BUTTONINGRESOCLASIFICARFORM
	idbtsalirform = ID_BUTTONINGRESOSALIRFORM
	
	idbtbanco = ID_BUTTONINGRESOBANCO
	idnbform = ID_NOTEBOOKINGRESOFORM
	idnblistctrl = ID_NOTEBOOKINGRESOLISTCTRL

	ctt = ["idtcfecha", "idtcsubsidios"]
	controles_tipo_txt = dict(zip(ctt,map(eval,ctt)))
	controlesfechafinalfiltro = [idtxfechafinalfiltro, idtcfechafinalfiltro,
								 idbbelegirfechafinalfiltro, idbblimpiarfechafinalfiltro]
	controles_cb_deshabilitados = [(1, idtxpartida, idcbpartida), (2, idtxsubpartida1, idcbsubpartida1),
								   (3, idtxsubpartida2, idcbsubpartida2), (4, idtxsubpartida3, idcbsubpartida3),
								   (5, idtxsubpartida4, idcbsubpartida4), (6, idtxsubpartida5, idcbsubpartida5)]
	controles_cb_partidas = [idcbcentrocosto, idcbpartida, idcbsubpartida1, idcbsubpartida2,
							 idcbsubpartida3, idcbsubpartida4, idcbsubpartida5]
	DicDatesAndTxt = {idbbelegirfecha : idtcfecha, idbbelegirfechafiltro : idtcfechafiltro,
					  idbbelegirfechafinalfiltro : idtcfechafinalfiltro}
	activecontrolafternewrecord = idbbelegirfecha
	dbtable  = "gixbancosmovimientos"
	titulo = u" - Ingresos"
	
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize,
				 style = wx.DEFAULT_FRAME_STYLE, usuario = None):
		
		def BuildWindow():
			wx.Frame.__init__(self, parent, id, title, pos, size, style)
			panel = wx.Panel(self, -1)
			IngresosClasificacionFuncion12(panel, True, True)
		
		def BuildStatusBar():
			anchos = [-1,60,90]
			self.CreateStatusBar(3)
			self.SetStatusWidths(anchos)
			self.SetStatusText(u"Recursos Financieros", 0)
			self.SetStatusText(u"Ingresos", 1)
			self.SetStatusText(u"Clasificaci�n", 2)
			
		def InitialValues(usuario):
			self.InitialFlags()
			self.usuario = usuario
			self.empresaid = self.GetEmpresa()
			self.idbanco, self.PartidaID = -1,-1
			self.idbancoorigen, self.ctrlindex, self.idrefmovto, self.editable, self.cantidadeliminar = 0,0,0,0,0
			self.partidaafectable, self.subpartida1afectable, self.subpartida2afectable = 0,0,0
			self.subpartida3afectable, self.subpartida4afectable, self.subpartida5afectable = 0,0,0
			self.currentitem = ""
			self.clasificado = "S"
			
		def UpdateButtons():
			wx.EVT_BUTTON(self, self.idbtrefrescarlc, self.OnRefrescar)
			wx.EVT_BUTTON(self, self.idbtagregarlc, self.OnNewRecord)
			wx.EVT_BUTTON(self, self.idbtsalirlc, self.OnExitRecord)
			wx.EVT_CLOSE(self, self.OnExitRecord)
			wx.EVT_BUTTON(self, self.idbtclasificarform, self.OnClasificar)
			wx.EVT_BUTTON(self, self.idbtsalirform, self.OnSalirDetalle)
			
		def WorkWithListCtrl():
			self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnLCtrl, id = self.idlc)
			self.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.OnRightClick, id = self.idlc)
			self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnPersonalizarConciliacion, id = self.idlc)
			wx.EVT_BUTTON(self, self.idbtpartidas, self.OnPersonalizarConciliacion)
			
		def WorkWithForm():
			wx.EVT_BUTTON(self, self.idbtbanco, self.OnElegirBanco)
			wx.EVT_BUTTON(self, self.idbblimpiarfecha, self.OnLimpiarFecha)
			wx.EVT_CHOICE(self, self.idchbancoorigen, self.OnChoice)
			wx.EVT_BUTTON(self, self.idbblimpiarbancoorigen, self.OnLimpiarBancoOrigen)
			for id in self.controles_cb_partidas:
				self.Bind(wx.EVT_COMBOBOX, self.OnComboBox, self.GetControl(id))
				
		def FilterSectionForListCtrl():
			self.Bind(wx.EVT_TEXT, self.OnTextFiltro, id = self.idtcfechafiltro)
			self.Bind(wx.EVT_TEXT, self.OnTextFiltro, id = self.idtcfechafinalfiltro)
			wx.EVT_BUTTON(self, self.idbblimpiarfechafiltro, self.OnLimpiarFechaFiltro)
			wx.EVT_BUTTON(self, self.idbblimpiarfechafinalfiltro, self.OnLimpiarFechaFiltro)
			
		def ReadOnlyCtrl():
			self.readonlyctrl = [self.idtcfecha]
	
		def InitialControlValues():
			for v in self.controles_tipo_txt.itervalues():
				self.Bind(wx.EVT_TEXT, self.OnText, self.GetControl(v))
			for v in self.DicDatesAndTxt.keys():
				self.Bind(wx.EVT_BUTTON, self.OnFechaButton, id = v )
			
		def StartNoteBook():
			if wx.Platform == '__WXMSW__':
				self.notebook = {self.idnblistctrl:(635,660), self.idnbform:(651,455)}
			else:
				self.notebook = {self.idnblistctrl:(627,660), self.idnbform:(690,510)}
			self.ActiveNoteBook(self.idnblistctrl)
			self.GetControl(self.idnblistctrl).Move(wx.Point(-1, 33))
			self.GetControl(self.idlc).SetFocus()
		
		BuildWindow(); BuildStatusBar(); InitialValues(usuario); UpdateButtons()
		WorkWithListCtrl(); WorkWithForm(); FilterSectionForListCtrl()
		self.ElegirBanco()
		if self.idbanco < 0: self.Destroy()
		ReadOnlyCtrl(); InitialControlValues(); StartNoteBook()
		#self.FillListCtrl()
		
	def OnExitRecord(self, event):
		self.ReconstruirSaldoCuenta()
		self.Destroy()
		
	def ReconstruirSaldoCuenta(self):
		wx.BeginBusyCursor()    
		sql = """
		select convert(varchar(10), periodo, 111)
		from gixbancossaldosxperiodo where idbanco = %s order by periodo
		""" % self.idbanco
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			cu = r_cn.cursor()
			for row in rows:
				sql = """
				delete from gixbancossaldosxperiodo where idbanco = %s and periodo = '%s'
				""" % (self.idbanco, str(row[0]))
				try:
					cu.execute(str(sql))
				except:
					wx.EndBusyCursor()    
					Mensajes().Info(self, u"Sucedi� algo que impidi� eliminar este registro.\n" \
					                u"Quiz� se deba a que hay otra informaci�n\n" \
					                u"que depende de este registro.\n\n%s" % sql, u"Atenci�n")
					wx.BeginBusyCursor()    
			cu.close()
		sql = """
		select convert(varchar(10), fechamovto, 111), tipomovto, cantidad
		from gixbancosmovimientos where idbanco = %s and eliminado = 'N' order by fechamovto
		""" % self.idbanco
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			periodosdict = []
			saldosxperiodo = {}
			saldoinicial = 0
			for row in rows:
				fecha_ano, fecha_mes, fecha_dia = str(row[0]).split('/')
				periodo = "%04d/%02d/01" % (int(fecha_ano), int(fecha_mes))
				tipomovto = str(row[1]); cantidad = float(row[2])
				if saldosxperiodo.has_key(periodo):
					if tipomovto == "A":
						abonos = float(saldosxperiodo[periodo][1])
						abonos += float(cantidad)
						saldosxperiodo[periodo][1] = float(abonos)
						saldoinicial += float(cantidad)
					else:
						cargos = float(saldosxperiodo[periodo][2])
						cargos += float(cantidad)
						saldosxperiodo[periodo][2] = float(cargos)
						saldoinicial -= float(cantidad)
				else:
					periodosdict.append(periodo)
					if tipomovto == "A":
						saldosxperiodo[periodo] = [float(saldoinicial), float(cantidad), float(0)]
						saldoinicial += float(cantidad)
					else:
						saldosxperiodo[periodo] = [float(saldoinicial), float(0), float(cantidad)]
						saldoinicial -= float(cantidad)
			periodosdict.sort()
			for periodo in periodosdict:
				saldoinicial = float(saldosxperiodo[periodo][0])
				totalabonos = float(saldosxperiodo[periodo][1])
				totalcargos = float(saldosxperiodo[periodo][2])
				sql = """
				insert into gixbancossaldosxperiodo (idbanco, periodo, saldoinicial, totalabonos, totalcargos)
				values (%s, '%s', %s, %s, %s)
				""" % (self.idbanco, periodo, float(saldoinicial), float(totalabonos), float(totalcargos))
				if not self.QueryUpdateRecord(sql):
					wx.EndBusyCursor()
					Mensajes().Info(self, u"Problemas al actualizar saldos.\n\n%s" % sql, u"Atenci�n")
					wx.BeginBusyCursor()    
		wx.EndBusyCursor()    
		
	def OnRefrescar(self, event):
		self.FillListCtrl()
		
	def OcultaSubpartidas(self, subpartidas):
		for partida in subpartidas:
			if partida == 0:
				self.partida = -1
				self.GetControl(self.idsbpartida).Show(False)
				self.partidaafectable = 0
			elif partida == 1:
				self.subpartida1 = -1
				self.GetControl(self.idsbsubpartida1).Show(False)
				self.subpartida1afectable = 0
			elif partida == 2:
				self.subpartida2 = -1
				self.GetControl(self.idsbsubpartida2).Show(False)
				self.subpartida2afectable = 0
			elif partida == 3:
				self.subpartida3 = -1
				self.GetControl(self.idsbsubpartida3).Show(False)
				self.subpartida3afectable = 0
			elif partida == 4:
				self.subpartida4 = -1
				self.GetControl(self.idsbsubpartida4).Show(False)
				self.subpartida4afectable = 0
			elif partida == 5:
				self.subpartida5 = -1
				self.GetControl(self.idsbsubpartida5).Show(False)
				self.subpartida5afectable = 0
			
	def DeshabilitaCombos(self, iniciolimpia = 1, iniciodeshabilita = 1, indice = 0):
		for orden, idtx, idcb in self.controles_cb_deshabilitados:
			if orden >= iniciolimpia:
				self.GetControl(idcb).Clear()
			if orden >= iniciodeshabilita:
				self.GetControl(idtx).Enable(False)
				self.GetControl(idcb).Enable(False)
		if indice == 0:
			self.OcultaSubpartidas(subpartidas = (0,1,2,3,4,5))
		elif indice == 1:
			self.OcultaSubpartidas(subpartidas = (1,2,3,4,5))
		elif indice == 2:
			self.OcultaSubpartidas(subpartidas = (2,3,4,5))
		elif indice == 3:
			self.OcultaSubpartidas(subpartidas = (3,4,5))
		elif indice == 4:
			self.OcultaSubpartidas(subpartidas = (4,5))
		elif indice == 5:
			self.OcultaSubpartidas(subpartidas = (5,))
			
	def ObtenerCentrosCostos(self):
		self.centrocostoid = -1
		control = self.GetControl(self.idcbcentrocosto)
		control.Clear()
		sql = """
		select CentroCostoID, Descripcion from gixcentroscostos where EmpresaID = %s order by Descripcion
		""" % self.empresaid
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(str(row[1]), int(row[0]))
		
	def ObtenerPartidas(self):
		self.GetControl(self.idtxpartida).Enable(True)
		control = self.GetControl(self.idcbpartida)
		control.Enable(True)
		control.Clear()
		sql = """
		select PartidaID, Descripcion from gixpartidasegresos
		where EmpresaID = %s and CentroCostoID = %s and HijaDePartidaID is null and naturaleza = 'I'
		order by Descripcion
		""" % (self.empresaid, self.centrocostoid)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(str(row[1]), int(row[0]))
				
	def ObtenerPartidaAfectable(self, partida):
		sql = """
		select Afectable from gixpartidasegresos where PartidaID = %s
		""" % partida
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row:
			return int(row[0])
		return 0
				
	def ObtenerSubpartidas(self, subpartida, numerosubpartida):
		filtrofinal = ""
		if numerosubpartida == 1:
			idtx = self.idtxsubpartida1
			idcb = self.idcbsubpartida1
		elif numerosubpartida == 2:
			idtx = self.idtxsubpartida2
			idcb = self.idcbsubpartida2
		elif numerosubpartida == 3:
			idtx = self.idtxsubpartida3
			idcb = self.idcbsubpartida3
		elif numerosubpartida == 4:
			idtx = self.idtxsubpartida4
			idcb = self.idcbsubpartida4
		elif numerosubpartida == 5:
			idtx = self.idtxsubpartida5
			idcb = self.idcbsubpartida5
			filtrofinal = "and Afectable =  1"
		self.GetControl(idtx).Enable(True)
		control = self.GetControl(idcb)
		control.Enable(True)
		control.Clear()
		sql = """
		select PartidaID, Descripcion from gixpartidasegresos
		where EmpresaID = %s and CentroCostoID = %s and HijaDePartidaID = %s and naturaleza = 'I' %s
		order by Descripcion
		""" % (self.empresaid, self.centrocostoid, subpartida, filtrofinal)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(str(row[1]), int(row[0]))
		
	def OnComboBox(self, event):
		id = event.GetId()
		if id == self.idcbcentrocosto:
			combo = self.GetControl(id); index = combo.GetSelection(); centrocostoid = combo.GetClientData(index)
			if centrocostoid != self.centrocostoid:
				self.centrocostoid = centrocostoid
				self.ObtenerPartidas(); self.DeshabilitaCombos(2, 2, 0)
		elif id == self.idcbpartida:
			combo = self.GetControl(id); index = combo.GetSelection(); partida = combo.GetClientData(index)
			if partida != self.partida:
				self.partida = partida
				self.partidaafectable = self.ObtenerPartidaAfectable(partida)
				if self.partidaafectable:
					self.GetControl(self.idsbpartida).Show(True)
				else:
					self.GetControl(self.idsbpartida).Show(False)
				self.ObtenerSubpartidas(partida, 1); self.DeshabilitaCombos(3, 3, 1)
		elif id == self.idcbsubpartida1:
			combo = self.GetControl(id); index = combo.GetSelection(); subpartida1 = combo.GetClientData(index)
			if subpartida1 != self.subpartida1:
				self.subpartida1 = subpartida1
				self.subpartida1afectable = self.ObtenerPartidaAfectable(subpartida1)
				if self.subpartida1afectable:
					self.GetControl(self.idsbsubpartida1).Show(True)
				else:
					self.GetControl(self.idsbsubpartida1).Show(False)
				self.ObtenerSubpartidas(subpartida1, 2); self.DeshabilitaCombos(4, 4, 2)
		elif id == self.idcbsubpartida2:
			combo = self.GetControl(id); index = combo.GetSelection(); subpartida2 = combo.GetClientData(index)
			if subpartida2 != self.subpartida2:
				self.subpartida2 = subpartida2
				self.subpartida2afectable = self.ObtenerPartidaAfectable(subpartida2)
				if self.subpartida2afectable:
					self.GetControl(self.idsbsubpartida2).Show(True)
				else:
					self.GetControl(self.idsbsubpartida2).Show(False)
				self.ObtenerSubpartidas(subpartida2, 3); self.DeshabilitaCombos(5, 5, 3)
		elif id == self.idcbsubpartida3:
			combo = self.GetControl(id); index = combo.GetSelection(); subpartida3 = combo.GetClientData(index)
			if subpartida3 != self.subpartida3:
				self.subpartida3 = subpartida3
				self.subpartida3afectable = self.ObtenerPartidaAfectable(subpartida3)
				if self.subpartida3afectable:
					self.GetControl(self.idsbsubpartida3).Show(True)
				else:
					self.GetControl(self.idsbsubpartida3).Show(False)
				self.ObtenerSubpartidas(subpartida3, 4); self.DeshabilitaCombos(6, 6, 4)
		elif id == self.idcbsubpartida4:
			combo = self.GetControl(id); index = combo.GetSelection(); subpartida4 = combo.GetClientData(index)
			if subpartida4 != self.subpartida4:
				self.subpartida4 = subpartida4
				self.subpartida4afectable = self.ObtenerPartidaAfectable(subpartida4)
				if self.subpartida4afectable:
					self.GetControl(self.idsbsubpartida4).Show(True)
				else:
					self.GetControl(self.idsbsubpartida4).Show(False)
				self.ObtenerSubpartidas(subpartida4, 5); self.DeshabilitaCombos(7, 7, 5)
		elif id == self.idcbsubpartida5:
			combo = self.GetControl(id); index = combo.GetSelection(); subpartida5 = combo.GetClientData(index)
			if subpartida5 != self.subpartida5:
				self.subpartida5 = subpartida5
				self.subpartida5afectable = self.ObtenerPartidaAfectable(subpartida5)
				if self.subpartida5afectable:
					self.GetControl(self.idsbsubpartida5).Show(True)
				else:
					self.GetControl(self.idsbsubpartida5).Show(False)
					
		self.Text()
		
	def OnLimpiarFecha(self, event):
		self.GetControl(self.idtcfecha).SetValue("")
		
	def OnLimpiarBancoOrigen(self, event):
		self.GetControl(self.idchbancoorigen).Clear()
		self.ObtenerBancosOrigen()
		self.idbancoorigen = 0

	def OnLimpiarFechaFiltro(self, event):
		id = event.GetId()
		if id == self.idbblimpiarfechafiltro:
			self.GetControl(self.idtcfechafinalfiltro).SetValue("")
			self.GetControl(self.idtcfechafiltro).SetValue("")
			for id in self.controlesfechafinalfiltro:
				self.GetControl(id).Enable(False)
		else:
			self.GetControl(self.idtcfechafinalfiltro).SetValue("")
			
	def OnTextFiltro(self, event):
		id = event.GetId()
		bool = True
		fechainicial = self.GetControl(self.idtcfechafiltro).GetValue()
		fechafinal = self.GetControl(self.idtcfechafinalfiltro).GetValue()
		if id == self.idtcfechafiltro:
			if not fechainicial:
				bool = False
				self.GetControl(self.idtcfechafinalfiltro).SetValue("")
			for id in self.controlesfechafinalfiltro:
				self.GetControl(id).Enable(bool)
				
		if (id == self.idtcfechafinalfiltro or bool) and fechafinal:
			diai, mesi, anoi = fechainicial.split("/")
			diaf, mesf, anof = fechafinal.split("/")
			finicial = "%s%s%s" % (int(anoi), int(mesi), int(diai))
			ffinal = "%s%s%s" % (int(anof), int(mesf), int(diaf))
			if finicial > ffinal:
				Mensajes().Info(self, u"� Por favor revise el rango de fechas !\n\n" \
								u"La fecha inicial no debe ser mayor a la fecha final.", u"Atenci�n")
				bool = False
				
		if bool:
			self.FillListCtrl()
	
	def OnRightClick(self, event):
		if self.currentitem or self.currentitem == 0:
			self.LCtrl()
			self.addlistctrlbtn = self.idbtagregarlc
			self.OpenBlogPopupMenu(idregistryblog = self.idrefmovto, idtitleblog = "Ingreso")
	
	def OnPersonalizarConciliacion(self, event):
		sql = """
		select cantidad, referencia from %s where idreferenciamovto = %s
		""" % (self.dbtable, int(self.datointerno))
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row is not None:
			cantidad = float(row[0])
			referencia = str(row[1])
		else:
			Mensajes().Info(self,"Problemas con \n%s" % sql, u"Atenci�n")
			return
		frame = GixIngPersonalizarConciliacion(self, -1, u"Conciliaci�n", wx.Point(20,20), wx.Size(965,420),
							empresaid = self.empresaid, idreferenciamovto = self.datointerno,
							cantidad = cantidad, referencia = referencia, actualizapartidas = True,
							usuario = self.usuario, refreshlistctrl = self.FillListCtrl)
		frame.Centre(wx.BOTH)
		frame.Show(True)
		
	def OnSalirDetalle(self, event):
		if self.currentitem:
			self.LCtrl()
		self.ActiveNoteBook(self.idnblistctrl)
		self.GetControl(self.idbtclasificarform).Enable(False)
		self.GetControl(self.idbtsalirform).Enable(False)
		self.GetControl(self.idbtagregarlc).Enable(True)
		self.GetControl(self.idlc).SetFocus()
		self.FillListCtrl()

	def OnElegirBanco(self, event):
		self.ReconstruirSaldoCuenta()
		if self.ElegirBanco():
			self.GetControl(self.idchbancoorigen).Clear()
			self.GetControl(self.idtcsubsidios).SetValue("")
			self.ObtenerBancosOrigen()
			self.FillListCtrl()
			
	def OnChoice(self, event):
		id  = event.GetId()
		choice = self.GetControl(id)
		inx = choice.GetSelection()
		self.idbancoorigen = choice.GetClientData(inx)
		self.Text()
		
	def ObtenerBancosOrigen(self):
		control = self.GetControl(self.idchbancoorigen)
		control.Clear()
		sql = """
		select idbanco, nombre from gixbancos where empresaid = %s and idbanco <> %s order by nombre
		""" % (self.empresaid, self.idbanco)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(str(row[1]), int(row[0]))
				
	def OnText(self, event):
		self.Text()
	
	def Text(self):
		validaid = [self.idtcfecha]
		if not self.CombosOk():
			self.GetControl(self.idbtclasificarform).Enable(False)
		else:
			self.GetControl(self.idbtclasificarform).Enable(True)
			if len(validaid) > 0:
				for id in validaid:
					if self.GetControl(id).GetValue().strip() == "":
						self.GetControl(self.idbtclasificarform).Enable(False)
			
	def CombosOk(self):
		if self.partidaafectable: return True
		elif self.subpartida1afectable: return True
		elif self.subpartida2afectable: return True
		elif self.subpartida3afectable: return True
		elif self.subpartida4afectable: return True
		elif self.subpartida5afectable: return True
		else: return False
				
	def OnClasificar(self, event):
		cc = self.centrocostoid; pr = self.partida; s1 = self.subpartida1; s2 = self.subpartida2
		s3 = self.subpartida3; s4 =  self.subpartida4; s5 = self.subpartida5
		idbancoorigen = self.idbancoorigen
		subsidio = self.GetControl(self.idtcsubsidios).GetValue()
		if not subsidio:
			subsidio = 0
		sigue = True
		fechafiltro = ""
		fechamovto = self.GetControl(self.idtcfecha).GetValue()
		if fechamovto:
			try:
				fecha_dia, fecha_mes, fecha_ano = \
						 self.GetControl(self.idtcfecha).GetValue().split("/")
				fechafiltro = "and fechamovto = '%s/%02d/%02d'" % (fecha_ano, int(fecha_mes), int(fecha_dia))
			except:
				fechafiltro = ""
		else:
			if Mensajes().YesNo(self, u"No ha introducido la fecha de ingreso, por lo tanto,\n" \
								u"se mostrar�n todos los abonos no clasificados.\n\n" \
								u"� Desea continuar ?", u"Confirmaci�n"):
				pass
			else:
				sigue = False

		if sigue:
			partidastit = ""
			for id in self.controles_cb_partidas:
				tit = self.GetControl(id).GetStringSelection()
				if tit:
					if partidastit:
						partidastit += "; "
					partidastit += tit
				else:
					break
			if wx.Platform == '__WXMSW__':
				w = 490; h = 560
			else:
				w = 570; h = 550
			frame = GixElegirMovimientoBanco(self, -1, u"Clasificaci�n", wx.Point(20,20), wx.Size(w,h),
											 usuario = self.usuario, empresaid = self.empresaid, idbanco = self.idbanco,
											 fechafiltro = fechafiltro, partidastit = partidastit,
											 idbancoorigen = idbancoorigen, subsidio = subsidio,
											 cc = cc, pr = pr, s1 = s1, s2 = s2, s3 = s3, s4 = s4, s5 = s5)
			frame.Centre(wx.BOTH)
			frame.Show(True)
			if self.currentitem:
				self.LCtrl()
			
	def FillListCtrl(self, display= 'first'):
		lctrl = self.GetControl(self.idlc)
		lctrl.ClearAll()
		fechafiltro = self.GetControl(self.idtcfechafiltro).GetValue()
		fechafinalfiltro = self.GetControl(self.idtcfechafinalfiltro).GetValue()
		filtrofechaingreso = ""
		if fechafiltro:
			try:
				fecha_dia, fecha_mes, fecha_ano = self.GetControl(self.idtcfechafiltro).GetValue().split('/')
				if fechafinalfiltro:
					fechaf_dia, fechaf_mes, fechaf_ano = self.GetControl(self.idtcfechafinalfiltro).GetValue().split('/')
					filtrofechaingreso = "and (fechamovto >= '%s/%02d/%02d' and fechamovto <= '%s/%02d/%02d')" \
									   % (fecha_ano, int(fecha_mes), int(fecha_dia), \
										  fechaf_ano, int(fechaf_mes), int(fechaf_dia))
				else:
					filtrofechaingreso = "and fechamovto = '%s/%02d/%02d'" % (fecha_ano, int(fecha_mes), int(fecha_dia))
			except:
				filtrofechaingreso = ""
		#sql = """
		#select idreferenciamovto, convert(varchar(10), fechamovto, 103), cantidad, referencia, idbancoorigen,
		#subsidio, eliminado
		#from %s	where empresaid = %s and idbanco = %s and tipomovto = 'A' and clasificado = 'S' %s
		#order by fechamovto desc, idreferenciamovto
		#""" % (self.dbtable, int(self.empresaid), int(self.idbanco), filtrofechaingreso)
		sql = """
		select b.idreferenciamovto, convert(varchar(10), b.fechamovto, 103), b.cantidad, b.referencia,
		(select sum(i.movimientos) from gixingresospartidas i where i.idreferenciamovto = b.idreferenciamovto),
		 b.idbancoorigen, b.eliminado, b.subsidio
		from %s b join gixingresospartidas p on p.idreferenciamovto = b.idreferenciamovto
		where b.empresaid = %s and b.idbanco = %s and b.tipomovto = 'A' and b.clasificado = 'S' %s
		group by b.idreferenciamovto, b.fechamovto, b.cantidad, b.referencia, b.idbancoorigen, b.eliminado, b.subsidio
		order by b.fechamovto desc, b.idreferenciamovto
		""" % (self.dbtable, int(self.empresaid), int(self.idbanco), filtrofechaingreso)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		fila = 0
		totalvista = 0
		if rows:
			wx.BeginBusyCursor()
			lctrl.InsertColumn(0, u"Id", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"Fecha", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(2, u"Cantidad", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(3, u"Referencia", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(4, u"Movtos.", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(5, u"Banco Origen", wx.LIST_FORMAT_CENTER)
			for row in rows:
				if str(row[6]) == "S":
					if fila %2 != 0: bgcolor = [255,153,153]
					else:            bgcolor = [255,215,215]
				else:
					if fila %2 != 0: bgcolor = [204,204,255]
					else:            bgcolor = [230,230,255]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				totalvista += float(row[2])
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, row[1])
				lctrl.SetStringItem(index, 2, str(amount_and_cents_with_commas(row[2])))
				lctrl.SetStringItem(index, 3, str(row[3]))
				subsidio = ""
				if row[4]:
					if int(row[4]):
						subsidio = str(int(row[4]))
				elif row[7]:
					if int(row[7]):
						subsidio = str(int(row[7]))
				lctrl.SetStringItem(index, 4, str(subsidio))
				nombrebanco = ""
				try:
					if row[5]:
						nombrebanco = self.ObtenerBanco(idbanco = int(row[5]))
				except:
					nombrebanco = ""
				lctrl.SetStringItem(index, 5, str(nombrebanco))
				lctrl.SetItemData(index, row[0])
				if int(row[0]) == self.idrefmovto:
					self.ctrlindex = index
				fila += 1
				
			lctrl.SetColumnWidth(0, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(2, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(3, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(4, 60)
			lctrl.SetColumnWidth(5, wx.LIST_AUTOSIZE)
			wx.EndBusyCursor()
			if display == 'first':
				self.GetLFRecord("min")
			elif display == 'last':
				self.GetLFRecord("max")
		else:
			lctrl.InsertColumn(0, "       No Existen Registros", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 167)
			
		control = self.GetControl(self.idtctotalvista)
		if totalvista < 0:
			control.SetBackgroundColour(wx.NamedColour("RED"))
			control.SetForegroundColour(wx.NamedColour("WHITE"))
		else:
			control.SetBackgroundColour(wx.Colour(153,255,153))
			control.SetForegroundColour(wx.NamedColour("BLACK"))
		control.SetValue(str(amount_and_cents_with_commas(totalvista)))

	def OnLCtrl(self, event):
		self.currentitem = event.m_itemIndex
		self.LCtrl()
		event.Skip()
		
	def LCtrl(self):
		lctrl = self.GetControl(self.idlc)
		datointerno = lctrl.GetItem(self.currentitem, 0).GetText()
		self.datointerno = int(datointerno)
		if self.datointernoynombre:
			self.GetRecord(self.datointerno, nombre)
		elif self.GetRecord(self.datointerno):
			pass
		else:
			Mensajes().Warn(self, u"Escoja un registro v�lido", u"Atenci�n")
		
	def GetLFRecord(self, what):
		lctrl = self.GetControl(self.idlc)
		sql = """
		select %s(fechamovto), idreferenciamovto from %s
		where empresaid = %s and idbanco = %s
		group by idreferenciamovto
		""" % (what, self.dbtable, self.empresaid, self.idbanco)
		idrefingreso = ""
		try:
			cursor = r_cn.cursor()
			cursor.execute(str(sql))
			row = fetchone(cursor)
			if row is not None:
				idrefingreso = int(row[1])
			self.GetRecord(idrefingreso)
			if not self.ctrlindex:
				if what == "min":
					lctrl.SetItemState(0, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
				else:
					lctrl.SetItemState(lctrl.GetItemCount() - 1, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
		finally:
			cursor.close()

	def OnNewRecord(self, event):
		self.ObtenerCentrosCostos()
		self.DeshabilitaCombos()
		self.ActiveNoteBook(self.idnbform)
		self.GetControl(self.idtcfecha).SetValue("")
		self.GetControl(self.idchbancoorigen).Clear()
		self.ObtenerBancosOrigen()
		self.GetControl(self.idtcsubsidios).SetValue("")
		self.GetControl(self.idbtclasificarform).Enable(False)
		self.GetControl(self.idbtsalirform).Enable(True)
		self.GetControl(self.activecontrolafternewrecord).SetFocus()
			
	def OnDeleteRecord(self, event):
		Mensajes().Info(self, u"� Opci�n deshabilitada, no es posible eliminar !", u"Atenci�n")
		return
		#id = self.idrefmovto
		#if Mensajes().YesNo(self,u"� Desea realmente eliminar el registro %s ?" % id, u"Confirmaci�n") :
			#if self.DeleteRecord(id):
				#sql = """
				#insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension)
				#values ('%s', getdate(), '%s', '%s', '%s', '%s')
				#""" % (self.BlogGUID, self.usuario, u"Eliminaci�n del Ingreso", "", "")
				#if not self.QueryUpdateRecord(sql):
					#Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
				#self.FillListCtrl()
				#self.GetControl(self.idbtagregarlc).Enable(True)
		#self.GetControl(self.idlc).SetFocus()
				
	def DeleteRecord(self, id):
		if id == "" or self.cantidadeliminar > -1:
			Mensajes().Info(self, u"No se ha especificado el Registro a Eliminar", u"Atenci�n")
			return False

		if self.DeleteRecordAndBalance(id):
			return True
		else:
			return False
		
	def GetRecord(self, record):
		try:
			a = int(record)
		except:
			return False
		
		self.idrefmovto = int(record)
		sql = """
		select convert(varchar(10), fechamovto, 103), cantidad, referencia, eliminado, convert(varchar(100), BlogGUID)
		from %s where idreferenciamovto = %s
		"""	% (self.dbtable, self.idrefmovto)
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		cursor.close()
		self.fechamovto, self.cantidad, self.referencia, self.eliminado, self.BlogGUID = map(str,row)
		self.cantidadeliminar = float(self.cantidad) * -1
		self.GetControl(self.idbtclasificarform).Enable(True)
		self.GetControl(self.idbtagregarlc).Enable(True)
		return True

class GixElegirMovimientoBanco(wx.Frame, GixBase, GixBaseListCtrl):
	idtxbanco = ID_TEXTELEGIRMOVTOBANCOBANCO
	idlc = ID_LISTCTRLELEGIRMOVTOBANCO
	refreshlistctrlbtn = ID_BUTTONELEGIRMOVTOBANCOREFRESCARLISTCTRL
	partidaslistctrlbtn = ID_BUTTONELEGIRMOVTOBANCOPARTIDASLISTCTRL
	applylistctrlbtn = ID_BUTTONELEGIRMOVTOBANCOAPLICARLISTCTRL
	exitlistctrlbtn = ID_BUTTONELEGIRMOVTOBANCOSALIRLISTCTRL
	dbtable  = "gixbancosmovimientos"
	dbadd = "gixingresospartidas"
	
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize, style = wx.DEFAULT_FRAME_STYLE,
				 usuario = None, empresaid = None, idbanco = None, fechafiltro = None,
				 partidastit = None, idbancoorigen = None, subsidio = 0,
				 cc = -1, pr = -1, s1 = -1, s2 = -1, s3 = -1, s4 = -1, s5 = -1):
		
		def BuildWindow():
			wx.Frame.__init__(self, parent, id, title, pos, size, style)
			panel = wx.Panel(self, -1)
			ElegirMovimientoBanco(panel, True, True)
		
		def BuildStatusBar():
			anchos = [-1,105,85]
			self.CreateStatusBar(3)
			self.SetStatusWidths(anchos)
			self.SetStatusText(u"Recursos Financieros", 0)
			self.SetStatusText(u"Abonos al Banco", 1)
			self.SetStatusText(u"Clasificaci�n", 2)
			
		def InitialValues():
			self.usuario = usuario
			self.empresaid = self.GetEmpresa()
			self.idbanco = idbanco
			self.fechafiltro = fechafiltro
			self.idbancoorigen = idbancoorigen
			self.subsidio = subsidio
			self.cc = cc; self.pr = pr; self.s1 = s1; self.s2 = s2; self.s3 = s3; self.s4 = s4; self.s5 = s5
			self.partidas = [self.pr, self.s1, self.s2, self.s3, self.s4, self.s5]
			self.GetControl(ID_TEXTELEGIRMOVTOBANCOBANCO).SetLabel(self.ObtenerBanco(idbanco))
			self.GetControl(ID_TEXTELEGIRMOVTOBANCOCCPARTIDA).SetLabel(partidastit)
			self.ctrlindex = 0
			self.idrefingreso = 0
			self.currentitem = ""
			
		def UpdateButtons():
			wx.EVT_BUTTON(self, self.refreshlistctrlbtn, self.OnRefresh)
			wx.EVT_BUTTON(self, self.applylistctrlbtn, self.OnApply)
			wx.EVT_BUTTON(self, self.exitlistctrlbtn, self.OnExit)
			
		def WorkWithListCtrl():
			self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnItemSelected, id = self.idlc)
			self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnItemDeselected, id = self.idlc)
			self.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.OnRightClick, id = self.idlc)
			self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnPersonalizarConciliacion, id = self.idlc)
			wx.EVT_BUTTON(self, self.partidaslistctrlbtn, self.OnPersonalizarConciliacion)
			
		BuildWindow(); BuildStatusBar(); InitialValues(); UpdateButtons(); WorkWithListCtrl(); self.FillListCtrl()
		
	def OnExit(self, event):
		self.Destroy()
		
	def OnRefresh(self, event):
		self.FillListCtrl()

	def FillListCtrl(self):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(self.idlc)
		lctrl.ClearAll()
		sql = """
		select idreferenciamovto, convert(varchar(10), fechamovto, 103), cantidad, referencia, estatus
		from %s where empresaID = %s and idbanco = %s and tipomovto = 'A' and
		clasificado = 'N' and eliminado = 'N' %s
		order by fechamovto desc, idreferenciamovto desc
		""" % (self.dbtable, self.empresaid, self.idbanco, self.fechafiltro)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		fila = 0
		if rows:
			lctrl.InsertColumn(0, "Id", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, "Fecha", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(2, "Cantidad", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(3, "Referencia", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(4, "Estatus", wx.LIST_FORMAT_CENTER)
			for row in rows:
				if self.IngresosPartidas(idreferenciamovto = int(row[0])):
					if fila %2 != 0: bgcolor = [170,255,170]
					else:            bgcolor = [204,255,204]
				else:
					if fila %2 != 0: bgcolor = [204,204,255]
					else:            bgcolor = [230,230,255]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				if str(row[4]) == "F": estatus = "FIRME"
				else: estatus = "SBC"
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, row[1])
				lctrl.SetStringItem(index, 2, str(amount_and_cents_with_commas(row[2])))
				lctrl.SetStringItem(index, 3, str(row[3]))
				lctrl.SetStringItem(index, 4, estatus)
				lctrl.SetItemData(index, row[0])
				if int(row[0]) == self.idrefingreso:
					self.ctrlindex = index
				fila += 1
			lctrl.SetColumnWidth(0, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(2, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(3, 70)
			lctrl.SetColumnWidth(4, 70)
		else:
			lctrl.InsertColumn(0, "       No Existen Registros", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 167)
		cu.close()
		self.GetControl(self.applylistctrlbtn).Enable(False)
		self.GetControl(self.partidaslistctrlbtn).Enable(False)
		self.selecteditems = []
		wx.EndBusyCursor()

	def IngresosPartidas(self, idreferenciamovto):
		sql = "select count(*) from gixingresospartidas where idreferenciamovto = %s" % idreferenciamovto
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)[0]
		cu.close()
		if int(row) > 0:
			return True
		else:
			return False
			
	def OnItemSelected(self, event):
		lctrl = self.GetControl(self.idlc)
		self.currentitem = event.m_itemIndex
		datointerno = lctrl.GetItem(self.currentitem, 0).GetText()
		datointerno = int(datointerno)
		self.selecteditems.append(datointerno)
		self.datointerno = datointerno
		self.CheckSelectedList()
		event.Skip()
					
	def OnItemDeselected(self, event):
		lctrl = self.GetControl(self.idlc)
		self.currentitem = event.m_itemIndex
		datointerno = lctrl.GetItem(self.currentitem, 0).GetText()
		datointerno = int(datointerno)
		self.selecteditems.remove(datointerno)
		self.CheckSelectedList()
		event.Skip()
		
	def OnRightClick(self, event):
		if not hasattr(self, "ID_VIEWHELP"):
			ID_PERSONALIZARCONCILIACION = wx.NewId()
			ID_VIEWHELP = wx.NewId()
			self.Bind(wx.EVT_MENU, self.OnPersonalizarConciliacion, id=ID_PERSONALIZARCONCILIACION)
			self.Bind(wx.EVT_MENU, self.OnViewHelp, id=ID_VIEWHELP)
		popup = wx.Menu()
		popup.Append(ID_PERSONALIZARCONCILIACION, u"Personalizar la Afectaci�n de Partidas del Ingreso %s" % self.datointerno)
		popup.AppendSeparator()
		popup.Append(ID_VIEWHELP, u"� Como Elegir Registro(s) ?")
		self.PopupMenu(popup)
		popup.Destroy()
		
	def OnPersonalizarConciliacion(self, event):
		sql = """
		select cantidad, referencia from %s where idreferenciamovto = %s
		""" % (self.dbtable, int(self.datointerno))
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row is not None:
			cantidad = float(row[0])
			referencia = str(row[1])
		else:
			Mensajes().Info(self,"Problemas con \n%s" % sql, u"Atenci�n")
			return
		frame = GixIngPersonalizarConciliacion(self, -1, "Conciliaci�n", wx.Point(20,20), wx.Size(965,420),
											   empresaid = self.empresaid, idreferenciamovto = self.datointerno,
											   cantidad = cantidad, referencia = referencia, actualizapartidas = False)
		frame.Centre(wx.BOTH)
		frame.Show(True)
		
	def OnViewHelp(self, event):
		Mensajes().Info(self, u"Un Registro.- De un clic izquierdo del mouse (rat�n) sobre el registro.\n\n" \
						u"Varios Registros Continuos.- Elija el primer registro con un clic izquierdo\n" \
						u"del mouse (rat�n), sostenga presionada la tecla shift y de otro clic\n" \
						u"izquierdo del mouse (rat�n) sobre el �ltimo registro elegido.\n\n" \
						u"Varios Registros Salteados.- Elija el primer registro con un clic izquierdo\n" \
						u"del mouse (rat�n), sostenga presionada la tecla ctrl y de clic izquierdo\n" \
						u"del mouse (rat�n) sobre los registros deseados.", u"Como Elegir Registro(s)")
		
	def CheckSelectedList(self):
		ctrl1 = self.GetControl(self.applylistctrlbtn)
		ctrl2 = self.GetControl(self.partidaslistctrlbtn)
		if self.selecteditems:
			ctrl1.Enable(True); ctrl2.Enable(True)
		else:
			ctrl1.Enable(False); ctrl2.Enable(False)
		
	def OnApply(self, event):
		self.selecteditems.sort()
		if len(self.selecteditems) > 1: char = "s"
		else: char = ""
		if Mensajes().YesNo(self,u"Movimiento%s a clasificar:\n%s\n\n" \
							u"� Desea realmente llevar a cabo la clasificaci�n ?" \
							% (char, self.selecteditems), u"Confirmaci�n"):
			self.Apply()
			self.FillListCtrl()
			self.GetControl(self.applylistctrlbtn).Enable(False)
			self.GetControl(self.partidaslistctrlbtn).Enable(False)
			Mensajes().Info(self, u"Clasificaci�n finalizada", u"Aviso")
			
		self.GetControl(self.idlc).SetFocus()
	
	def Apply(self):
		wx.BeginBusyCursor()
		for partida in self.partidas:
			if partida > -1:
				self.PartidaID = partida
			else:
				break
		if len(self.selecteditems) > 1:
			movimientos = tuple(self.selecteditems)
			where = "in"
		else:
			movimientos = self.selecteditems[0]
			where = "="
		sql = """
		select idreferenciamovto, convert(varchar(10), fechamovto, 111), cantidad,
		convert(varchar(100), BlogGUID)
		from %s where idreferenciamovto %s %s
		""" % (self.dbtable, where, movimientos)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		if rows:
			for row in rows:
				idreferenciamovto = int(row[0]); fechaingreso = str(row[1]); cantidad = float(row[2])
				blogbanco = str(row[3]); idbancoorigen = self.idbancoorigen
				if self.AddRecord(cu, idreferenciamovto, fechaingreso, cantidad, idbancoorigen, blogbanco):
					try:
						r_cn.commit()
					except:
						pass
				else:
					try:
						r_cn.rollback()
					except:
						pass
		cu.close()
		wx.EndBusyCursor()
		
	def ActualizacionPersonalizada(self, cu, fechaingreso, partidaslst, cantidad, tipomovto):
		for partida in partidaslst:
			if partida > -1:
				self.partidapersonalizada = partida
			else:
				break
		if self.UpdateBalance(cu, fechaingreso, cantidad, partidaid = self.partidapersonalizada, tipomovto = tipomovto):
			return True
		else:
			return False
			
	def AddRecord(self, cu, idreferenciamovto, fechaingreso, cantidad, idbancoorigen, blogbanco):
		sql = """
		select count(*) from %s where idreferenciamovto = %s
		""" % (self.dbadd, idreferenciamovto)
		cu.execute(str(sql))
		partidas = fetchone(cu)[0]
		if int(partidas):
			sql = """
			select partida, subpartida1, subpartida2, subpartida3, subpartida4, subpartida5, cantidad, tipomovto
			from %s where idreferenciamovto = %s
			""" % (self.dbadd, idreferenciamovto)
			cu.execute(str(sql))
			if partidas > 1:
				rows = fetchall(cu)
				for row in rows:
					partidaslst = [int(row[0]), int(row[1]), int(row[2]), int(row[3]), int(row[4]), int(row[5])]
					cantidad = float(row[6]); tipomovto = str(row[7])
					if not self.ActualizacionPersonalizada(cu, fechaingreso, partidaslst, cantidad, tipomovto):
						return False
			else:
				row = fetchone(cu)
				partidaslst = [int(row[0]), int(row[1]), int(row[2]), int(row[3]), int(row[4]), int(row[5])]
				cantidad = float(row[6]); tipomovto = str(row[7])
				if not self.ActualizacionPersonalizada(cu, fechaingreso, partidaslst, cantidad, tipomovto):
					return False
		else:
			sqlFields = """
			idreferenciamovto, centrocostoid, partida, subpartida1, subpartida2, subpartida3,
			subpartida4, subpartida5, cantidad, tipomovto, movimientos
			"""
			sqlValues = "%s, %s, %s, %s, %s, %s, %s, %s, %s, 'A', %s" % \
					  (int(idreferenciamovto), int(self.cc), int(self.pr), int(self.s1), int(self.s2),
					   int(self.s3), int(self.s4), int(self.s5), float(cantidad), int(self.subsidio)) 
			sql = "insert into %s (%s) values (%s)" % (self.dbadd, sqlFields, sqlValues) 
			try:
				sqlencoded = sql.encode("iso8859-1")
				cu.execute(sqlencoded)
			except:
				Mensajes().Info(self,"Problemas con \n%s" % sql, u"Atenci�n")
				return False
		
			if not self.UpdateBalance(cu, fechaingreso, cantidad, partidaid = self.PartidaID, tipomovto = 'A'):
				return False
		
		sqlFieldValues = "clasificado = '%s', idbancoorigen = %s, subsidio = %s" \
					   % ("S", idbancoorigen, 0)
		sql = "update %s set %s where idreferenciamovto = %s" % (self.dbtable, sqlFieldValues, idreferenciamovto)
		try:
			sqlencoded = sql.encode("iso8859-1")
			cu.execute(sqlencoded)
		except:
			Mensajes().Info(self,"Problemas con\n%s" % sql, u"Atenci�n")
			return False
		
		BlogGUID = blogbanco
		if self.UpdateBlog(cu, BlogGUID, comentario = "Clasificado"):
			return True
		else:
			return False
				
	def UpdateBlog(self, cu, BlogGUID, comentario = ""):
		sql = """
		insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura,
		ContenidoText, ContenidoBinario, Extension)
		values ('%s', getdate(), '%s', '%s', '%s', '%s')
		""" % (BlogGUID, self.usuario, comentario, "", "")
		try:
			sqlencoded = sql.encode("iso8859-1")
			cu.execute(sqlencoded)
			return True
		except:
			Mensajes().Info(self, u"Problemas al actualizar el blog\n%s" % sqlencoded, u"Atenci�n")
			return False
		
class GixIngPersonalizarConciliacion(wx.Frame, GixBase, GixBaseListCtrl):
	idtxempresa = ID_TEXTINGEMPRESA
	idtxcantidadaconciliar = ID_TEXTINGCANTIDADACONCILIAR
	idlcpartidas = ID_LISTCTRLINGPARTIDAS
	idbbagregarpartida = ID_BITMAPBUTTONINGAGREGARPARTIDA
	idbbguardarpartida = ID_BITMAPBUTTONINGGUARDARPARTIDA
	idbbeliminarpartida = ID_BITMAPBUTTONINGELIMINARPARTIDA
	idtctotalingreso = ID_TEXTCTRLINGTOTALINGRESO
	idtxcentrocosto = ID_TEXTINGCENTROCOSTO
	idcbcentrocosto = ID_COMBOINGCENTROCOSTO
	idtxpartida = ID_TEXTINGPARTIDA
	idcbpartida = ID_COMBOINGPARTIDA
	idsbpartida = ID_STATICBITMAPINGPARTIDA
	idtxsubpartida1 = ID_TEXTINGSUBPARTIDA1
	idcbsubpartida1 = ID_COMBOINGSUBPARTIDA1
	idsbsubpartida1 = ID_STATICBITMAPINGSUBPARTIDA1
	idtxsubpartida2 = ID_TEXTINGSUBPARTIDA2
	idcbsubpartida2 = ID_COMBOINGSUBPARTIDA2
	idsbsubpartida2 = ID_STATICBITMAPINGSUBPARTIDA2
	idtxsubpartida3 = ID_TEXTINGSUBPARTIDA3
	idcbsubpartida3 = ID_COMBOINGSUBPARTIDA3
	idsbsubpartida3 = ID_STATICBITMAPINGSUBPARTIDA3
	idtxsubpartida4 = ID_TEXTINGSUBPARTIDA4
	idcbsubpartida4 = ID_COMBOINGSUBPARTIDA4
	idsbsubpartida4 = ID_STATICBITMAPINGSUBPARTIDA4
	idtxsubpartida5 = ID_TEXTINGSUBPARTIDA5
	idcbsubpartida5 = ID_COMBOINGSUBPARTIDA5
	idsbsubpartida5 = ID_STATICBITMAPINGSUBPARTIDA5
	idtccantidad = ID_TEXTCTRLINGCANTIDAD
	idtxcantidad = ID_TEXTINGCANTIDAD
	idrbtipomovto = ID_RADIOBOXINGTIPOMOVTO
	idtcnumeromovimientos = ID_TEXTCTRLINGNUMEROMOVIMIENTOS
	idtxtotalingreso = ID_TEXTINGTOTALINGRESO
	
	cttx = ["idtccantidad", "idtcnumeromovimientos"]
	ctcb = ["idcbcentrocosto", "idcbpartida", "idcbsubpartida1", "idcbsubpartida2",
		   "idcbsubpartida3", "idcbsubpartida4", "idcbsubpartida5"]
	ctrb = ["idrbtipomovto"]
	controles_tipo_txt = dict(zip(cttx,map(eval,cttx)))
	controles_tipo_combo = dict(zip(ctcb,map(eval,ctcb)))
	controles_tipo_radiobox = dict(zip(ctrb,map(eval,ctrb)))
	controles_de_captura = [(idtccantidad, "tc"), (idrbtipomovto, "rb"), (idcbcentrocosto, "cb"),
							(idcbpartida, "cb"), (idcbsubpartida1, "cb"), (idcbsubpartida2, "cb"),
							(idcbsubpartida3, "cb"), (idcbsubpartida4, "cb"), (idcbsubpartida5, "cb"),
							(idtcnumeromovimientos, "tc")]
	controles_cb_deshabilitados = [(1,idtxcentrocosto, idcbcentrocosto), (2, idtxpartida, idcbpartida),
									  (3, idtxsubpartida1, idcbsubpartida1), (4, idtxsubpartida2, idcbsubpartida2),
									  (5, idtxsubpartida3, idcbsubpartida3), (6, idtxsubpartida4, idcbsubpartida4),
									  (7, idtxsubpartida5, idcbsubpartida5)]
	controles_cb_partidas = [idcbcentrocosto, idcbpartida, idcbsubpartida1, idcbsubpartida2,
							 idcbsubpartida3, idcbsubpartida4, idcbsubpartida5]
	activecontrolafternewrecord = idcbcentrocosto
	
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize,
				 style = wx.DEFAULT_FRAME_STYLE | wx.FRAME_FLOAT_ON_PARENT,
				 empresaid = None, idreferenciamovto = None, cantidad = None, referencia = None,
				 actualizapartidas = False, usuario = None, refreshlistctrl = ""):
		
		def BuildWindow():
			wx.Frame.__init__(self, parent, id, title, pos, size, style)
			panel = wx.Panel(self, -1)
			IngresosPersonalizarConciliacion(panel, True, True)
		
		def BuildStatusBar():
			anchos = [-1,55,133]
			self.CreateStatusBar(3)
			self.SetStatusWidths(anchos)
			self.SetStatusText(u"Recursos Financieros", 0)
			self.SetStatusText(u"Ingresos", 1)
			self.SetStatusText(u"Personalizar Partidas", 2)
			
		def InitialValues():
			self.empresaid = empresaid
			self.empresaidini = 0
			self.idreferenciamovto = idreferenciamovto
			self.cantidadconciliar = cantidad
			self.referencia = referencia
			self.FillingARecord, self.NewFlag = False, False
			self.actualizapartidas = actualizapartidas
			self.usuario = usuario
			self.refreshlistctrl = refreshlistctrl
			self.SetTitle(u"Personalizando la Afectaci�n de Partidas del Ingreso %s - Referencia %s" \
						  % (self.idreferenciamovto, self.referencia.decode("iso8859-1")))
			self.GetControl(self.idtxempresa).SetLabel(self.ObtenerEmpresa())
			cantidadaconciliar = u"Ingreso a Clasificar $ %s" % str(amount_and_cents_with_commas(self.cantidadconciliar))
			self.GetControl(self.idtxcantidadaconciliar).SetLabel(cantidadaconciliar)
			self.GetControl(self.idtxcantidadaconciliar).Centre(direction = wx.HORIZONTAL)
			
		def UpdateButtons():
			wx.EVT_CLOSE(self, self.OnExitRecord)
			wx.EVT_BUTTON(self, self.idbbagregarpartida, self.OnAgregarPartida)
			wx.EVT_BUTTON(self, self.idbbguardarpartida, self.OnGuardarPartida)
			wx.EVT_BUTTON(self, self.idbbeliminarpartida, self.OnEliminarPartida)
			
		def WorkWithListCtrl():
			self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnLCtrlPartidas, id = self.idlcpartidas)
			
		def ReadOnlyCtrl():
			self.readonlyctrl = ["idcbcentrocosto", "idcbpartida", "idcbsubpartida1", "idcbsubpartida2",
								 "idcbsubpartida3", "idcbsubpartida4", "idcbsubpartida5"]
	
		def InitialControlValues():
			self.originales = {}
			for v in self.controles_tipo_txt.itervalues():
				self.Bind(wx.EVT_TEXT, self.OnText, self.GetControl(v))
				self.originales[v] = ""
			self.Bind(wx.EVT_TEXT_ENTER, self.OnTextEnter, self.GetControl(self.idtccantidad))
			for v in self.controles_tipo_combo.itervalues():
				self.Bind(wx.EVT_COMBOBOX, self.OnComboBox, self.GetControl(v))
				self.originales[v] = ""
			for v in self.controles_tipo_radiobox.itervalues():
				self.Bind(wx.EVT_RADIOBOX, self.OnRadioBox, self.GetControl(v))
				self.originales[v] = ""
				
		def Start():
			sql = "select count(*) from gixingresospartidas where idreferenciamovto = %s" % int(self.idreferenciamovto)
			cu = r_cn.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)[0]
			cu.close()
			if row:
				self.inicio = True
				self.modoedicion = True
				self.EditRecord()
				self.modoedicion = False
				self.LCtrlPartidas(); self.LCtrlPartidas()
				self.inicio = False
			else:
				self.inicio = False
				self.AgregarPartidas()
				
		BuildWindow(); BuildStatusBar(); InitialValues(); UpdateButtons()
		WorkWithListCtrl(); ReadOnlyCtrl(); InitialControlValues(); Start()
		
	def OnExitRecord(self, event):
		if self.totalpartidas != 0:
			totalpartidas = "%.2f" % self.totalpartidas
			cantidadconciliar = "%.2f" % self.cantidadconciliar
			if totalpartidas != cantidadconciliar:
				totalpartidasaux = str(amount_and_cents_with_commas(self.totalpartidas))
				cantidadconciliaraux = str(amount_and_cents_with_commas(self.cantidadconciliar))
				Mensajes().Info(self, u"� Por favor cuadre las partidas y el ingreso !\n\n" \
								u"El total de las partidas $ %s no es igual al total del ingreso $ %s" \
								% (totalpartidasaux, cantidadconciliaraux), u"Atenci�n")
				return
		elif self.actualizapartidas:
			if self.DesclasificaIngreso():
				Mensajes().Info(self, u"El ingreso no afecta a ning�na partida, por lo tanto,\n" \
								u"ha quedado desclasificado.\n\n" \
								u"Si desea volver a clasificar el ingreso, lleve a cabo\n" \
								u"el procedimiento normal de clasificaci�n.", u"Atenci�n")
				self.refreshlistctrl()
			else:
				Mensajes().Info(self, u"� Se experimentaron problemas al desclasificar el ingreso !", u"Atenci�n")
		self.Destroy()
		
	def DesclasificaIngreso(self):
		sql = """
		select convert(varchar(100), BlogGUID) from gixbancosmovimientos where idreferenciamovto = %s
		""" % self.idreferenciamovto
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		blog = str(row[0])
		sqlFieldValues = "clasificado = 'N', idbancoorigen = 0, subsidio = 0"
		sql = "update gixbancosmovimientos set %s where idreferenciamovto = %s" % (sqlFieldValues, self.idreferenciamovto)
		try:
			sqlencoded = sql.encode("iso8859-1")
			cu.execute(sqlencoded)
			cu.close()
		except:
			Mensajes().Info(self,"Problemas con\n%s" % sql, u"Atenci�n")
			cu.close()
			return False
		contenido = u"Desclasificaci�n"
		sql = """
		insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension)
		values ('%s', getdate(), '%s', '%s', '%s', '%s')
		""" % (blog, self.usuario, contenido, "", "")
		if not self.QueryUpdateRecord(sql):
			Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
		return True
		
	def AgregarPartidas(self):
		self.totalpartidas = 0
		self.nuevapartida, self.NewFlag, self.modoedicion = True, True, True
		self.GetControl(self.idlcpartidas).ClearAll()
		self.GetControl(self.idtctotalingreso).SetValue("")
		self.GetControl(self.idtctotalingreso).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(self.idtxtotalingreso).SetLabel("")
		for id, tipo in self.controles_de_captura:
			self.GetControl(id).Enable(True)
		for k, id in self.controles_tipo_txt.iteritems():
			control = self.GetControl(id); control.SetValue(""); control.Refresh()
		for k,id in self.controles_tipo_combo.iteritems():
			control = self.GetControl(id)
			if id != self.idcbcentrocosto:
				control.Clear()
			control.SetBackgroundColour(wx.WHITE); control.Refresh()
		for k, id in self.controles_tipo_radiobox.iteritems():
			control = self.GetControl(id); control.SetSelection(1); control.Refresh()
		for v in self.controles_tipo_txt.itervalues():
			self.originales[v] = ""
		for v in self.controles_tipo_combo.itervalues():
			self.originales[v] = ""
		for v in self.controles_tipo_radiobox.itervalues():
			self.originales[v] = ""
		self.centrocostoid = -1
		self.DeshabilitaCombos()
		self.GetControl(self.idlcpartidas).Enable(False)
		self.GetControl(self.idbbagregarpartida).Enable(False)
		self.GetControl(self.idbbguardarpartida).Enable(False)
		self.GetControl(self.idbbeliminarpartida).Enable(False)
		control = self.GetControl(self.activecontrolafternewrecord)
		control.SetFocus()
		
	def OnTextEnter(self, event):
		control = self.GetControl(self.idbbguardarpartida)
		if control.IsEnabled():
			control.SetFocus()

	def ObtenerEmpresa(self):
		sql = """
		select Razonsocial from cont_Empresas where EmpresaID = %s
		""" % self.empresaid
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row:
			return str(row[0])
		return "NO EXISTE LA EMPRESA %s" % self.empresaid

	def OcultaSubpartidas(self, subpartidas):
		for partida in subpartidas:
			if partida == 0:
				self.centrocostoid = -1
				self.GetControl(self.idsbpartida).Show(False)
				self.partidaafectable = 0
			elif partida == 1:
				self.partida = -1
				self.GetControl(self.idsbpartida).Show(False)
				self.partidaafectable = 0
			elif partida == 2:
				self.subpartida1 = -1
				self.GetControl(self.idsbsubpartida1).Show(False)
				self.subpartida1afectable = 0
			elif partida == 3:
				self.subpartida2 = -1
				self.GetControl(self.idsbsubpartida2).Show(False)
				self.subpartida2afectable = 0
			elif partida == 4:
				self.subpartida3 = -1
				self.GetControl(self.idsbsubpartida3).Show(False)
				self.subpartida3afectable = 0
			elif partida == 5:
				self.subpartida4 = -1
				self.GetControl(self.idsbsubpartida4).Show(False)
				self.subpartida4afectable = 0
			elif partida == 6:
				self.subpartida5 = -1
				self.GetControl(self.idsbsubpartida5).Show(False)
				self.subpartida5afectable = 0
				
	def DeshabilitaCombos(self, iniciolimpia = 2, iniciodeshabilita = 2, indice = 1):
		for orden, idtx, idcb in self.controles_cb_deshabilitados:
			if orden >= iniciolimpia:
				self.GetControl(idcb).Clear()
			if orden >= iniciodeshabilita:
				self.GetControl(idtx).Enable(False)
				self.GetControl(idcb).Enable(False)
		if self.modoedicion:
			if indice == 0:
				self.OcultaSubpartidas(subpartidas = (0,1,2,3,4,5,6))
			elif indice == 1:
				self.OcultaSubpartidas(subpartidas = (1,2,3,4,5,6))
			elif indice == 2:
				self.OcultaSubpartidas(subpartidas = (2,3,4,5,6))
			elif indice == 3:
				self.OcultaSubpartidas(subpartidas = (3,4,5,6))
			elif indice == 4:
				self.OcultaSubpartidas(subpartidas = (4,5,6))
			elif indice == 5:
				self.OcultaSubpartidas(subpartidas = (5,6))
			elif indice == 6:
				self.subpartida5 = -1
				self.GetControl(self.idsbsubpartida5).Show(False)
				self.subpartida5afectable = 0
			
	def DespliegaCombo(self, id, valor):
		combo = self.GetControl(id)
		for inx in range(0, combo.GetCount()):
			if valor == combo.GetClientData(inx):
				combo.SetSelection(inx)
				break
		
	def ObtenerPartida(self, row):
		partida = 0
		for inx in range(3,8):
			if int(row[inx]) < 0:
				partida = int(row[inx-1])
				break
			elif inx == 7:
				partida = int(row[inx])
		if partida > 0:
			sql = """
			select Descripcion, Afectable from gixpartidasegresos where PartidaID = %s
			""" % partida
			cu = r_cn.cursor()
			cu.execute(str(sql))
			fila = fetchone(cu)
			cu.close()
			if fila:
				if int(fila[1]):
					return str(fila[0])
				else:
					return str("Partida No Afectable")
			else:
				return str("Partida Inexistente")
		else:
			return str("Error")
		
	def OnAgregarPartida(self, event):
		self.nuevapartida = True
		for id in self.controles_cb_partidas:
			control = self.GetControl(id)
			control.Clear()
			control.SetBackgroundColour(wx.WHITE)
			control.Refresh()
			self.originales[id] = ""
		self.GetControl(self.idtccantidad).SetValue("")
		self.GetControl(self.idtccantidad).SetBackgroundColour(wx.WHITE)
		self.originales[self.idtccantidad] = ""
		self.GetControl(self.idrbtipomovto).SetSelection(1)
		self.originales[self.idrbtipomovto] = ""
		self.GetControl(self.idtcnumeromovimientos).SetValue("")
		self.GetControl(self.idtcnumeromovimientos).SetBackgroundColour(wx.WHITE)
		self.originales[self.idtcnumeromovimientos] = ""
		self.modoedicion = True
		self.DeshabilitaCombos(2, 2, 0)
		self.modoedicion = False
		self.ObtenerCentrosCostos()
		self.GetControl(self.idbbagregarpartida).Enable(False)
		self.GetControl(self.idbbguardarpartida).Enable(True)
		self.GetControl(self.idcbcentrocosto).SetFocus()

	def AceptarDetalle(self):
		self.NewFlag = False
		self.Text()
		if not self.NewFlag:
			if 1 in (self.partidaafectable, self.subpartida1afectable, self.subpartida2afectable, \
					 self.subpartida3afectable, self.subpartida4afectable, self.subpartida5afectable):
				if Mensajes().YesNo(self, u"� Desea realmente grabar la informaci�n ?", u"Confirmaci�n"):
					return True
			else:
				Mensajes().Info(self, u"� Por favor revise la partida o subpartida que desea afectar !", u"Atenci�n")
				return False
		return False

	def OnGuardarPartida(self, event):
		if self.AceptarDetalle():
			if self.nuevapartida:
				self.AddPartida()
			else:
				self.UpdatePartida()
			self.modoedicion = True
			self.EditRecord()
			self.modoedicion = False
			self.GetControl(self.idbbagregarpartida).SetFocus()
					
	def ObtenerPartidaUpdate(self, partidas):
		for partida in partidas:
			if partida > -1:
				partidaid = partida
			else:
				break
		return partidaid
	
	def UpdatePartida(self):
		wx.BeginBusyCursor()
		sql = """
		select p.partida, p.subpartida1, p.subpartida2, p.subpartida3, p.subpartida4, p.subpartida5,
		p.cantidad, p.tipomovto, convert(varchar(10), m.fechamovto, 111), convert(varchar(100), m.BlogGUID)
		from gixingresospartidas p join gixbancosmovimientos m on p.idreferenciamovto = m.idreferenciamovto
		where idingresopartida = %s
		""" % self.idingresopartida
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		fechaingreso = str(row[8])
		if self.actualizapartidas:
			partidas = [int(row[0]), int(row[1]), int(row[2]), int(row[3]), int(row[4]), int(row[5])]
			cantidad = float(row[6]) * float(-1); tipomovto = str(row[7]); blog = str(row[9])
			partidaid = self.ObtenerPartidaUpdate(partidas)
			self.UpdateBalance(cu, fechaingreso, cantidad, partidaid, tipomovto)
		
		cantidad = self.GetControl(self.idtccantidad).GetValue().strip()
		pos = self.GetControl(self.idrbtipomovto).GetSelection()
		if pos == 0:
			tipomovto = "C"
		else:
			tipomovto = "A"
		mov = self.GetControl(self.idtcnumeromovimientos).GetValue().strip()
		try:
			movimientos = int(mov)
		except:
			movimientos = 0
		sqllist = """
		centrocostoid = %s, partida = %s, subpartida1 = %s, subpartida2 = %s, subpartida3 = %s,
		subpartida4 = %s, subpartida5 = %s, cantidad = %s, tipomovto = '%s', movimientos = %s
		""" % (int(self.centrocostoid), int(self.partida), int(self.subpartida1), int(self.subpartida2),
			   int(self.subpartida3), int(self.subpartida4), int(self.subpartida5), float(cantidad),
			   str(tipomovto), movimientos)
		sql = """
		update gixingresospartidas set %s where idingresopartida = %s
		""" % (sqllist, self.idingresopartida)
		if not self.QueryUpdateRecord(sql):
			Mensajes().Info(self, u"Sucedi� algo que impidi� actualizar la partida %s\n\n%s" \
							% (self.idingresopartida, sql), u"Atenci�n")
		elif self.actualizapartidas:
			partidas = [int(self.partida), int(self.subpartida1), int(self.subpartida2), int(self.subpartida3),
						int(self.subpartida4), int(self.subpartida5)]
			partidaid = self.ObtenerPartidaUpdate(partidas)
			self.UpdateBalance(cu, fechaingreso, cantidad, partidaid, tipomovto)
			contenido = u"Edici�n de la partida %s" % self.idingresopartida
			sql = """
			insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension)
			values ('%s', getdate(), '%s', '%s', '%s', '%s')
			""" % (blog, self.usuario, contenido, "", "")
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
		cu.close()
		wx.EndBusyCursor()
	
	def AddPartida(self):
		if self.actualizapartidas:
			sql = """
			select convert(varchar(10), fechamovto, 111), convert(varchar(100), BlogGUID)
			from gixbancosmovimientos where idreferenciamovto = %s
			""" % self.idreferenciamovto
			cu = r_cn.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			cu.close()
			fechaingreso = str(row[0]); blog = str(row[1])
		cantidad = self.GetControl(self.idtccantidad).GetValue().strip()
		pos = self.GetControl(self.idrbtipomovto).GetSelection()
		if pos == 0:
			tipomovto = "C"
		else:
			tipomovto = "A"
		mov = self.GetControl(self.idtcnumeromovimientos).GetValue().strip()
		try:
			movimientos = int(mov)
		except:
			movimientos = 0
		sql = """
		insert into gixingresospartidas	(idreferenciamovto, centrocostoid, partida,
		subpartida1, subpartida2, subpartida3, subpartida4, subpartida5, cantidad, tipomovto, movimientos)
		values (%s, %s, %s, %s, %s, %s, %s, %s, %s, '%s', %s)
		""" % (int(self.idreferenciamovto), int(self.centrocostoid), int(self.partida), int(self.subpartida1),
			   int(self.subpartida2), int(self.subpartida3), int(self.subpartida4), int(self.subpartida5),
			   float(cantidad), str(tipomovto), movimientos)
		if self.QueryUpdateRecord(sql):
			if self.actualizapartidas:
				partidas = [int(self.partida), int(self.subpartida1), int(self.subpartida2), int(self.subpartida3),
							int(self.subpartida4), int(self.subpartida5)]
				partidaid = self.ObtenerPartidaUpdate(partidas)
				cu = r_cn.cursor()
				self.UpdateBalance(cu, fechaingreso, cantidad, partidaid, tipomovto)
				cu.close()
				contenido = u"Se agrega nueva partida"
				sql = """
				insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension)
				values ('%s', getdate(), '%s', '%s', '%s', '%s')
				""" % (blog, self.usuario, contenido, "", "")
				if not self.QueryUpdateRecord(sql):
					Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
			return True
		else:
			return False
				
	def OnEliminarPartida(self, event):
		sql = "select count(*) from gixingresospartidas where idreferenciamovto = %s" % self.idreferenciamovto
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)[0]
		cu.close()
		if int(row) > 0:
			if Mensajes().YesNo(self,u"� Desea realmente eliminar la partida %s ?" % self.idingresopartida, u"Confirmaci�n"):
				if self.EliminarPartida():
					self.FillListCtrlPartidas()
		else:
			Mensajes().Info(self, u"� No hay partida que afectar !", u"Atenci�n")
			
	def EliminarPartida(self, update = False):
		if self.actualizapartidas:
			sql = """
			select p.partida, p.subpartida1, p.subpartida2, p.subpartida3, p.subpartida4, p.subpartida5,
			p.cantidad, p.tipomovto, convert(varchar(10), m.fechamovto, 111), convert(varchar(100), m.BlogGUID)
			from gixingresospartidas p join gixbancosmovimientos m on p.idreferenciamovto = m.idreferenciamovto
			where idingresopartida = %s
			""" % self.idingresopartida
			cu = r_cn.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			partidas = [int(row[0]), int(row[1]), int(row[2]), int(row[3]), int(row[4]), int(row[5])]
			cantidad = float(row[6]) * float(-1); tipomovto = str(row[7]); fechaingreso = str(row[8])
			blog = str(row[9])
			partidaid = self.ObtenerPartidaUpdate(partidas)
			self.UpdateBalance(cu, fechaingreso, cantidad, partidaid, tipomovto)
			cu.close()
			
		sql = "delete from gixingresospartidas where idingresopartida = %s" % self.idingresopartida
		try:
			cu = r_cn.cursor()
			cu.execute(str(sql))
			cu.close()
			r_cn.commit()
		except:
			r_cn.rollback()
			Mensajes().Info(self, u"Sucedi� algo que impidi� eliminar la partida %s\n\n%s" \
							% (self.idingresopartida, sql), u"Atenci�n")
			return False
		
		if self.actualizapartidas:
			contenido = u"Eliminaci�n de la partida %s" % self.idingresopartida
			sql = """
			insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension)
			values ('%s', getdate(), '%s', '%s', '%s', '%s')
			""" % (blog, self.usuario, contenido, "", "")
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
		return True
	
	def OnLCtrlPartidas(self, event):
		self.currentitempartidas = event.m_itemIndex
		self.LCtrlPartidas()
		event.Skip()
		
	def LCtrlPartidas(self):
		self.nuevapartida = False
		if not self.modoedicion:
			self.DeshabilitaCombos()
		lctrl = self.GetControl(self.idlcpartidas)
		datointerno = lctrl.GetItem(self.currentitempartidas, 0).GetText()
		self.idingresopartida = int(datointerno)
		sql = """
		select centrocostoid, partida, subpartida1, subpartida2, subpartida3, subpartida4, subpartida5,
		cantidad, tipomovto, movimientos
		from gixingresospartidas where idingresopartida = %s
		""" % self.idingresopartida
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row:
			self.centrocostoid = int(row[0]); self.partida = int(row[1]); self.subpartida1 = int(row[2])
			self.subpartida2 = int(row[3]); self.subpartida3 = int(row[4]); self.subpartida4 = int(row[5])
			self.subpartida5 = int(row[6]); self.cantidad = float(row[7]); self.tipomovto = str(row[8])
			try:
				self.movimientos = int(row[9])
			except:
				self.movimientos = 0
			if not self.modoedicion:
				self.EditRecord()
				self.RevisaCambios()
		else:
			Mensajes().Info(self, u"No se encontro la partida elegida\n\n%s" % sql, u"Atenci�n")

	def FillListCtrlPartidas(self, display = 'first'):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(self.idlcpartidas)
		lctrl.ClearAll()
		sql = """
		select idingresopartida, cantidad, centrocostoid, partida,
		subpartida1, subpartida2, subpartida3, subpartida4, subpartida5, tipomovto
		from gixingresospartidas where idreferenciamovto = %s order by idingresopartida desc
		""" % self.idreferenciamovto
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		fila, self.totalpartidas = 0, 0
		if rows:
			lctrl.InsertColumn(0, "Id", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, "Cantidad", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(2, "Partida / Subpartida")
			lctrl.InsertColumn(3, "Movto.")
			for row in rows:
				if fila %2 != 0: bgcolor = [204,204,255]
				else:            bgcolor = [230,230,255]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, str(amount_and_cents_with_commas(row[1])))
				lctrl.SetStringItem(index, 2, str(self.ObtenerPartida(row)))
				lctrl.SetStringItem(index, 3, str(self.ObtenerTipoMovto(row[9])))
				lctrl.SetItemData(index, row[0])
				fila += 1
				if str(row[9]) == "A":
					self.totalpartidas += float(row[1])
				else:
					self.totalpartidas -= float(row[1])
			lctrl.SetColumnWidth(0, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(2, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(3, wx.LIST_AUTOSIZE)
		else:
			lctrl.InsertColumn(0, "Sin Partidas", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 100)
		control = self.GetControl(self.idtctotalingreso)
		controltx = self.GetControl(self.idtxtotalingreso)
		if self.totalpartidas < 0:
			totalpartidas = self.totalpartidas * -1
			control.SetBackgroundColour(wx.NamedColour("RED"))
			control.SetForegroundColour(wx.NamedColour("WHITE"))
			controltx.SetForegroundColour(wx.NamedColour("RED"))
			menos = "MENOS "
		else:
			totalpartidas = self.totalpartidas
			control.SetBackgroundColour(wx.Colour(153,255,153))
			control.SetForegroundColour(wx.NamedColour("BLACK"))
			controltx.SetForegroundColour(wx.NamedColour("BLUE"))
			menos = ""
		amount = amount_and_cents_with_commas(totalpartidas)
		control.SetValue(str(amount).rjust(20))
		self.GetControl(self.idtxtotalingreso).SetLabel(str(menos + c2p(totalpartidas).texto()))
		control.Refresh()
		controltx.Refresh()
		lctrl.SetItemState(0, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
		wx.EndBusyCursor()
		
	def ObtenerTipoMovto(self, movto):
		if movto == "C":
			return "Cargo"
		else:
			return "Abono"

	def EditRecord(self):
		if self.modoedicion:
			for id, tipo in self.controles_de_captura:
				self.GetControl(id).Enable(True)
			
		self.DeshabilitaCombos()
		if self.modoedicion:
			self.FillListCtrlPartidas()
			self.FillingARecord = True
			for k, id in self.controles_tipo_txt.iteritems():
				control = self.GetControl(id); control.SetValue("")
				control.SetBackgroundColour(wx.WHITE); control.Refresh()
			for k, id in self.controles_tipo_combo.iteritems():
				control = self.GetControl(id); control.Clear()
				control.SetBackgroundColour(wx.WHITE); control.Refresh()
			for k, id in self.controles_tipo_radiobox.iteritems():
				control = self.GetControl(id); control.SetSelection(1); control.Refresh()
			
		self.GetControl(self.idsbpartida).Show(False); self.GetControl(self.idsbsubpartida1).Show(False)
		self.GetControl(self.idsbsubpartida2).Show(False); self.GetControl(self.idsbsubpartida3).Show(False)
		self.GetControl(self.idsbsubpartida4).Show(False); self.GetControl(self.idsbsubpartida5).Show(False)
		self.partidaafectable, self.subpartida1afectable, self.subpartida2afectable = 0,0,0
		self.subpartida3afectable, self.subpartida4afectable, self.subpartida5afectable = 0,0,0
		
		self.ObtenerCentrosCostos(); self.DespliegaCombo(self.idcbcentrocosto, self.centrocostoid)
		self.ObtenerPartidas(); self.DespliegaCombo(self.idcbpartida, self.partida)
		self.partidaafectable = self.ObtenerPartidaAfectable(self.partida)
		if self.partidaafectable:
			self.GetControl(self.idsbpartida).Show(True)
			self.partidaafectable = 1
		elif self.subpartida1 > 0:
			self.ObtenerSubpartidas(self.partida, 1)
			self.DespliegaCombo(self.idcbsubpartida1, self.subpartida1)
			self.partidaafectable = self.ObtenerPartidaAfectable(self.subpartida1)
			if self.partidaafectable:
				self.GetControl(self.idsbsubpartida1).Show(True)
				self.subpartida1afectable = 1
			elif self.subpartida2 > 0:
				self.ObtenerSubpartidas(self.subpartida1, 2)
				self.DespliegaCombo(self.idcbsubpartida2, self.subpartida2)
				self.partidaafectable = self.ObtenerPartidaAfectable(self.subpartida2)
				if self.partidaafectable:
					self.GetControl(self.idsbsubpartida2).Show(True)
					self.subpartida2afectable = 1
				elif self.subpartida3 > 0:
					self.ObtenerSubpartidas(self.subpartida2, 3)
					self.DespliegaCombo(self.idcbsubpartida3, self.subpartida3)
					self.partidaafectable = self.ObtenerPartidaAfectable(self.subpartida3)
					if self.partidaafectable:
						self.GetControl(self.idsbsubpartida3).Show(True)
						self.subpartida3afectable = 1
					elif self.subpartida4 > 0:
						self.ObtenerSubpartidas(self.subpartida3, 4)
						self.DespliegaCombo(self.idcbsubpartida4, self.subpartida4)
						self.partidaafectable = self.ObtenerPartidaAfectable(self.subpartida4)
						if self.partidaafectable:
							self.GetControl(self.idsbsubpartida4).Show(True)
							self.subpartida4afectable = 1
						elif self.subpartida5 > 0:
							self.ObtenerSubpartidas(self.subpartida4, 5)
							self.DespliegaCombo(self.idcbsubpartida5, self.subpartida5)
							self.partidaafectable = self.ObtenerPartidaAfectable(self.subpartida5)
							if self.partidaafectable:
								self.GetControl(self.idsbsubpartida5).Show(True)
								self.subpartida5afectable = 1
								
		self.GetControl(self.idtccantidad).SetValue(str(float(self.cantidad)))
		if self.tipomovto == "C":
			pos = 0
		else:
			pos = 1
		self.GetControl(self.idrbtipomovto).SetSelection(pos)
		self.GetControl(self.idtcnumeromovimientos).SetValue(str(int(self.movimientos)))
		if self.modoedicion:
			for v in self.controles_tipo_txt.itervalues():
				self.originales[v] = self.GetControl(v).GetValue()
			for v in self.controles_tipo_radiobox.itervalues():
				self.originales[v] = self.GetControl(v).GetSelection()
				
		if not self.modoedicion:
			control = self.GetControl(self.idtccantidad)
			self.originales[self.idtccantidad] = control.GetValue()
			control.SetBackgroundColour(wx.WHITE); control.Refresh()
			control = self.GetControl(self.idtcnumeromovimientos)
			self.originales[self.idtcnumeromovimientos] = control.GetValue()
			control.SetBackgroundColour(wx.WHITE); control.Refresh()
			for trash1, trash2, idcb in self.controles_cb_deshabilitados:
				control = self.GetControl(idcb)
				self.originales[idcb] = control.GetStringSelection()
				control.SetBackgroundColour(wx.WHITE)
				control.Refresh()
			control = self.GetControl(self.idrbtipomovto)
			self.originales[self.idrbtipomovto] = control.GetSelection()
			control.Refresh()
		else:
			for v in self.controles_tipo_combo.itervalues():
				self.originales[v] = self.GetControl(v).GetStringSelection()
			self.FillingARecord = False
			self.GetControl(self.idlcpartidas).Enable(True)
			self.GetControl(self.idbbagregarpartida).Enable(True)
			self.GetControl(self.idbbguardarpartida).Enable(False)
			self.GetControl(self.idbbeliminarpartida).Enable(True)
	
	def ObtenerCentrosCostos(self):
		self.GetControl(self.idtxcentrocosto).Enable(True)
		control = self.GetControl(self.idcbcentrocosto)
		control.Enable(True)
		control.Clear()
		sql = """
		select CentroCostoID, Descripcion from gixcentroscostos where EmpresaID = %s order by Descripcion
		""" % self.empresaid
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(str(row[1]), int(row[0]))
		
	def ObtenerPartidas(self):
		self.GetControl(self.idtxpartida).Enable(True)
		control = self.GetControl(self.idcbpartida)
		control.Enable(True)
		control.Clear()
		sql = """
		select PartidaID, Descripcion from gixpartidasegresos
		where EmpresaID = %s and CentroCostoID = %s and HijaDePartidaID is null
		order by Descripcion
		""" % (self.empresaid, self.centrocostoid)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(str(row[1]), int(row[0]))
		
	def ObtenerSubpartidas(self, subpartida, numerosubpartida):
		filtrofinal = ""
		if numerosubpartida == 1:
			idtx = self.idtxsubpartida1
			idcb = self.idcbsubpartida1
		elif numerosubpartida == 2:
			idtx = self.idtxsubpartida2
			idcb = self.idcbsubpartida2
		elif numerosubpartida == 3:
			idtx = self.idtxsubpartida3
			idcb = self.idcbsubpartida3
		elif numerosubpartida == 4:
			idtx = self.idtxsubpartida4
			idcb = self.idcbsubpartida4
		elif numerosubpartida == 5:
			idtx = self.idtxsubpartida5
			idcb = self.idcbsubpartida5
			filtrofinal = "and Afectable =  1"
		self.GetControl(idtx).Enable(True)
		control = self.GetControl(idcb)
		control.Enable(True)
		control.Clear()
		sql = """
		select PartidaID, Descripcion from gixpartidasegresos
		where EmpresaID = %s and CentroCostoID = %s and HijaDePartidaID = %s %s
		order by Descripcion
		""" % (self.empresaid, self.centrocostoid, subpartida, filtrofinal)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(str(row[1]), int(row[0]))
		
	def OnComboBox(self, event):
		self.controlactual = event.GetId()
		modoedicion = self.modoedicion
		self.modoedicion = True
		self.Text()
		self.modoedicion = modoedicion
		self.RevisaCambios()
		
	def OnRadioBox(self, event):
		self.controlactual = event.GetId()
		modoedicion = self.modoedicion
		self.modoedicion = True
		self.Text()
		self.modoedicion = modoedicion
		self.RevisaCambios()
		
	def OnText(self, event):
		self.controlactual = event.GetId()
		self.Text()
	
	def Text(self, VengodelaLista = False):
		for id in (self.idcbcentrocosto, self.idcbpartida, self.idtccantidad):
			control = self.GetControl(id)
			try:
				valor = control.GetValue().strip()
			except:
				try:
					valor = control.GetStringSelection()
				except:
					valor = ""
			if valor == "" and not self.FillingARecord and not self.NewFlag and not self.inicio:
				self.NewFlag = True
				if not VengodelaLista:
					Mensajes().Info(self, u"� No debe quedar ning�n dato requerido * en blanco !", u"Atenci�n")
					return
			if id == self.idtccantidad:
				cantidad = control.GetValue().strip()
				if cantidad != "":
					try:
						if str(cantidad)[-1:] != ".":
							if not str(cantidad)[-1:].isdigit():
								Mensajes().Info(self, u"� La cantidad debe ser num�rica !", u"Atenci�n")
								control.SetValue(str(cantidad)[:-1])
								control.SetSelection(-1,-1)
								return
							else:
								self.GetControl(self.idtxcantidad).SetLabel(str(c2p(cantidad).texto()))
					except:
						Mensajes().Info(self, u"� La cantidad debe ser num�rica !", u"Atenci�n")
						control.SetValue("")
						control.SetSelection(-1,-1)
						return
				else:
					self.GetControl(self.idtxcantidad).SetLabel("")
					if not self.FillingARecord and not self.NewFlag:
						self.NewFlag = True
						if not VengodelaLista:
							Mensajes().Info(self, u"� La cantidad no debe quedar en blanco !", u"Atenci�n")
							return
		if id == self.idtcnumeromovimientos:
			movimientos = control.GetValue().strip()
			if movimientos != "":
				try:
					if not str(movimientos)[-1:].isdigit():
						Mensajes().Info(self, u"� El n�mero de movimientos debe ser num�rico !", u"Atenci�n")
						control.SetValue(str(movimientos)[:-1])
						control.SetSelection(-1,-1)
						return
				except:
					Mensajes().Info(self, u"� El n�mero de movimientos debe ser num�rico !", u"Atenci�n")
					control.SetValue("")
					control.SetSelection(-1,-1)
					return
		if not self.FillingARecord:
			id = self.controlactual
			if id != self.idrbtipomovto:
				if id in self.readonlyctrl:	self.GetControl(id).SetEditable(True)
				if self.OriginalDistinto(id):
					self.GetControl(id).SetBackgroundColour(wx.CYAN)
					self.GetControl(id).Refresh()
				else:
					self.GetControl(id).SetBackgroundColour(wx.WHITE)
					self.GetControl(id).Refresh()
				if id in self.readonlyctrl:	self.GetControl(id).SetEditable(False)
			
			if self.empresaidini != self.empresaid:
				self.empresaidini = self.empresaid
				self.ObtenerCentrosCostos(); self.DeshabilitaCombos(2, 2, 1)
				
			if id == self.idcbcentrocosto:
				combo = self.GetControl(id); index = combo.GetSelection(); centrocostoid = combo.GetClientData(index)
				if centrocostoid != self.centrocostoid:
					self.centrocostoid = centrocostoid
					self.ObtenerPartidas(); self.DeshabilitaCombos(3, 3, 1)
			elif id == self.idcbpartida:
				combo = self.GetControl(id); index = combo.GetSelection(); partida = combo.GetClientData(index)
				if partida != self.partida:
					self.partida = partida
					self.partidaafectable = self.ObtenerPartidaAfectable(partida)
					if self.partidaafectable:
						self.GetControl(self.idsbpartida).Show(True)
					else:
						self.GetControl(self.idsbpartida).Show(False)
					self.ObtenerSubpartidas(partida, 1); self.DeshabilitaCombos(4, 4, 2)
			elif id == self.idcbsubpartida1:
				combo = self.GetControl(id); index = combo.GetSelection(); subpartida1 = combo.GetClientData(index)
				if subpartida1 != self.subpartida1:
					self.subpartida1 = subpartida1
					self.subpartida1afectable = self.ObtenerPartidaAfectable(subpartida1)
					if self.subpartida1afectable:
						self.GetControl(self.idsbsubpartida1).Show(True)
					else:
						self.GetControl(self.idsbsubpartida1).Show(False)
					self.ObtenerSubpartidas(subpartida1, 2); self.DeshabilitaCombos(5, 5, 3)
			elif id == self.idcbsubpartida2:
				combo = self.GetControl(id); index = combo.GetSelection(); subpartida2 = combo.GetClientData(index)
				if subpartida2 != self.subpartida2:
					self.subpartida2 = subpartida2
					self.subpartida2afectable = self.ObtenerPartidaAfectable(subpartida2)
					if self.subpartida2afectable:
						self.GetControl(self.idsbsubpartida2).Show(True)
					else:
						self.GetControl(self.idsbsubpartida2).Show(False)
					self.ObtenerSubpartidas(subpartida2, 3); self.DeshabilitaCombos(6, 6, 4)
			elif id == self.idcbsubpartida3:
				combo = self.GetControl(id); index = combo.GetSelection(); subpartida3 = combo.GetClientData(index)
				if subpartida3 != self.subpartida3:
					self.subpartida3 = subpartida3
					self.subpartida3afectable = self.ObtenerPartidaAfectable(subpartida3)
					if self.subpartida3afectable:
						self.GetControl(self.idsbsubpartida3).Show(True)
					else:
						self.GetControl(self.idsbsubpartida3).Show(False)
					self.ObtenerSubpartidas(subpartida3, 4); self.DeshabilitaCombos(7, 7, 5)
			elif id == self.idcbsubpartida4:
				combo = self.GetControl(id); index = combo.GetSelection(); subpartida4 = combo.GetClientData(index)
				if subpartida4 != self.subpartida4:
					self.subpartida4 = subpartida4
					self.subpartida4afectable = self.ObtenerPartidaAfectable(subpartida4)
					if self.subpartida4afectable:
						self.GetControl(self.idsbsubpartida4).Show(True)
					else:
						self.GetControl(self.idsbsubpartida4).Show(False)
					self.ObtenerSubpartidas(subpartida4, 5); self.DeshabilitaCombos(8, 8, 6)
			elif id == self.idcbsubpartida5:
				combo = self.GetControl(id); index = combo.GetSelection(); subpartida5 = combo.GetClientData(index)
				if subpartida5 != self.subpartida5:
					self.subpartida5 = subpartida5
					self.subpartida5afectable = self.ObtenerPartidaAfectable(subpartida5)
					if self.subpartida5afectable:
						self.GetControl(self.idsbsubpartida5).Show(True)
					else:
						self.GetControl(self.idsbsubpartida5).Show(False)

			self.RevisaCambios()
			
	def RevisaCambios(self, cambiosolicitud = False, cambiopartida = False):
		for id, tipo in self.controles_de_captura:
			if id in self.readonlyctrl:	self.GetControl(id).SetEditable(True)
			if tipo == "cb":
				valor = self.GetControl(id).GetStringSelection()
			elif tipo == "rb":
				valor = self.GetControl(id).GetSelection()
			else:
				valor = self.GetControl(id).GetValue()
			if valor <> self.originales[id]:
				if tipo != "rb":
					self.GetControl(id).SetBackgroundColour(wx.CYAN)
					self.GetControl(id).Refresh()
				cambiopartida = True
			elif tipo != "rb":
				self.GetControl(id).SetBackgroundColour(wx.WHITE)
				self.GetControl(id).Refresh()
			if id in self.readonlyctrl:	self.GetControl(id).SetEditable(False)
			
		if cambiopartida:
			self.GetControl(self.idbbagregarpartida).Enable(False)
			self.GetControl(self.idbbguardarpartida).Enable(True)
		else:
			self.GetControl(self.idbbagregarpartida).Enable(True)
			self.GetControl(self.idbbguardarpartida).Enable(False)
				
	def ObtenerPartidaAfectable(self, partida):
		sql = """
		select Afectable from gixpartidasegresos where PartidaID = %s
		""" % partida
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row:
			return int(row[0])
		return 0
	
class GixElegirFirmantes(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Elegir Firmantes", pos = wx.DefaultPosition,
				 size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE, usuario = None, idbanco = None,
				 selecteditems = []):
		
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.usuario = usuario
		self.idbanco = idbanco
		self.selecteditems = selecteditems
		
		ElegirFirmantes(self, True)
		
		wx.EVT_BUTTON(self, ID_BUTTONELEGIRFIRMANTESACEPTAR, self.OnOk)
		wx.EVT_BUTTON(self, ID_BUTTONELEGIRFIRMANTESCANCELAR, self.OnClose)
		wx.EVT_CLOSE(self, self.OnClose)
		
		self.inxlst, self.cholst = self.FillFirmantes()
		if wx.Platform == '__WXMSW__':
			self.lb = wx.CheckListBox(self, -1, (5, 10), [335, 150], self.cholst)
		else:
			self.lb = wx.CheckListBox(self, -1, (5, 10), [335, 150], self.cholst)
		
	def FillFirmantes(self):
		query = """
		select d.idfirmante, f.nombre from gixfirmantesbancos d
		join gixfirmantes f on d.idfirmante = f.idfirmante
		where f.estatus = 'A' and d.idbanco = %s
		order by nombre
		""" % self.idbanco
		inxlst = []; cholst = []
		try:
			cu = r_cn.cursor()
			cu.execute(query)
			rows = fetchall(cu)
			cu.close()
			if rows:
				for row in rows:
					inxlst.append(row[0])
					cholst.append(row[1])
		except:
			pass
		
		return inxlst, cholst
		
	def OnClose(self, event):
		self.Destroy()
		
	def OnOk(self, event):
		seleccion = []; continua = True
		for inx, x in enumerate(self.cholst):
			if self.lb.IsChecked(inx):
				seleccion.append(self.inxlst[inx])
		if seleccion:
			if len(seleccion) > 1:
				firmantes = tuple(map(int, seleccion))
				sql = """
				select nombre from gixfirmantes where idfirmante in (%s)
				""" % (",".join(map(str, firmantes)),)
				cu = r_cn.cursor()
				cu.execute(str(sql))
				rows = fetchall(cu)
				cu.close()
				if rows:
					primero = True
					for row in rows:
						if primero:
							primero = False
							contenido = "FIRMAN CHEQUE: " + str(row[0])
						else:
							contenido += ", " + str(row[0])
				else:
					Mensajes().Info(self, u"� Problemas al buscar firmantes !\n\n%s" % sql, u"Atenci�n")
					continua = False
			else:
				sql = """
				select nombre from gixfirmantes where idfirmante = %s
				""" % int(seleccion[0])
				cu = r_cn.cursor()
				cu.execute(str(sql))
				row = fetchone(cu)
				cu.close()
				if row is not None:
					contenido = "FIRMA CHEQUE: " + str(row[0])
				else:
					Mensajes().Info(self, u"� Problemas al buscar firmante !\n\n%s" % sql, u"Atenci�n")
					continua = False
		else:
			Mensajes().Info(self, u"� Debe elegir al menos un firmante !", u"Atenci�n")
			continua = False
		
		if continua:
			if len(self.selecteditems) > 1:
				sql = """
				select convert(varchar(100), BlogGUID) from gixegresoscheques
				where idcheque in (%s)
				""" % (",".join(map(str, self.selecteditems)),)
				cu = r_cn.cursor()
				cu.execute(str(sql))
				rows = fetchall(cu)
				cu.close()
				if rows:
					for row in rows:
						sql = """
						insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText,
						ContenidoBinario, Extension, Estatus)
						values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
						""" % (str(row[0]), self.usuario, contenido, "", "", "M")
						if not self.QueryUpdateRecord(sql):
							Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
			else:
				sql = """
				select convert(varchar(100), BlogGUID) from gixegresoscheques
				where idcheque = %s
				""" % (self.selecteditems[0])
				cu = r_cn.cursor()
				cu.execute(str(sql))
				row = fetchone(cu)
				cu.close()
				if row is not None:
					sql = """
					insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText,
					ContenidoBinario, Extension, Estatus)
					values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
					""" % (str(row[0]), self.usuario, contenido, "", "", "M")
					if not self.QueryUpdateRecord(sql):
						Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
						
			self.Destroy()
		
class GixElegirDocumento(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Elegir Documento", pos = wx.DefaultPosition, size = wx.DefaultSize,
				 style = wx.DEFAULT_DIALOG_STYLE, documentoelegido = None, cliente = None, nombrecliente = None):
		
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		if cliente == None:
			Mensajes().Info(self, u"� Busqueda cancelada !\n\nSe experimentaron problemas al iniciar la busqueda.", \
							u"Atenci�n")
			self.Destroy()
		self.DocumentoElegido = documentoelegido
		self.cliente = cliente
		self.codigodocumento = []
		ElegirDocumento(self, True)
		titulo = u"Elegir Documento para la Devoluci�n de Saldo a Favor del Cliente:  %s" % nombrecliente
		self.SetTitle(titulo)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelected, id = ID_LISTCTRLELEGIRDOCUMENTO)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselected, id = ID_LISTCTRLELEGIRDOCUMENTO)
		self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnActivated, id = ID_LISTCTRLELEGIRDOCUMENTO)
		self.Bind(wx.EVT_BUTTON, self.OnClose, id = ID_BUTTONELEGIRDOCUMENTOCANCELAR)
		self.Bind(wx.EVT_BUTTON, self.OnActivated, id = ID_BUTTONELEGIRDOCUMENTOELEGIR)
		wx.EVT_CLOSE(self, self.OnClose)
		self.GetControl(ID_LISTCTRLELEGIRDOCUMENTO).SetFocus()
		self.FillListCtrl()
		
	def OnClose(self, evt):
		self.Destroy()
		
	def OnSelected(self, evt):
		currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLELEGIRDOCUMENTO).GetItem(currentitem, 1).GetText()
		self.codigodocumento.append(int(datointerno))
		self.GetControl(ID_BUTTONELEGIRDOCUMENTOELEGIR).Enable(True)
		evt.Skip()
		
	def OnDeselected(self, evt):
		currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLELEGIRDOCUMENTO).GetItem(currentitem, 1).GetText()
		self.codigodocumento.remove(int(datointerno))
		if not self.codigodocumento:
			self.GetControl(ID_BUTTONELEGIRDOCUMENTOELEGIR).Enable(False)
		evt.Skip()
	
	def OnActivated(self, evt):
		if self.DocumentoElegido(codigodocumento = self.codigodocumento):
			self.Destroy()
		self.GetControl(ID_LISTCTRLELEGIRDOCUMENTO).SetFocus()
		
	def FillListCtrl(self):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLELEGIRDOCUMENTO)
		lctrl.Enable(False)
		lctrl.Show(False)
		lctrl.ClearAll()
		query = """
		select c.codigo, d.codigo, convert(varchar(10), d.fechadeelaboracion, 103), d.cargo, d.abono, d.saldo,
		isnull(i.iden1, ''), isnull(i.iden2, ''), isnull(e.descripcion, ''), isnull(s.descripcion, ''), d.idcheque
		from CUENTA c
		join DOCUMENTO d on c.codigo = d.fk_cuenta
		left join INMUEBLE i on c.fk_inmueble = i.codigo
		left join ETAPA e on c.fk_etapa = e.codigo
		left join DESARROLLO s on e.fk_desarrollo = s.codigo
		where d.fk_tipo = 13 and c.fk_cliente = %s
		order by c.codigo desc, d.codigo desc, d.fechadeelaboracion desc		
		""" % self.cliente
		cu = r_cn.cursor()
		cu.execute(str(query))
		rows = fetchall(cu)
		cu.close()
		fila = 0
		if rows:
			lctrl.InsertColumn(0, u"Cuenta", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"Documento", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(2, u"Fecha", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(3, u"Cargos", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(4, u"Abonos", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(5, u"Saldo", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(6, u"Lote", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(7, u"Manzana", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(8, u"Etapa")
			lctrl.InsertColumn(9, u"Desarrollo")
			for row in rows:
				if row[10] or float(row[5]) != 0:
					if fila %2 != 0: bgcolor = [255,153,153]
					else:            bgcolor = [255,215,215]
				else:
					if fila %2 != 0: bgcolor = [150,204,150]
					else:            bgcolor = [200,230,200]
				index = lctrl.InsertStringItem(sys.maxint, str(row[1]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, str(row[1]))
				lctrl.SetStringItem(index, 2, str(row[2]))
				lctrl.SetStringItem(index, 3, str(amount_and_cents_with_commas(row[3])))
				lctrl.SetStringItem(index, 4, str(amount_and_cents_with_commas(row[4])))
				lctrl.SetStringItem(index, 5, str(amount_and_cents_with_commas(row[5])))
				lctrl.SetStringItem(index, 6, str(row[6]))
				lctrl.SetStringItem(index, 7, str(row[7]))
				lctrl.SetStringItem(index, 8, str(row[8]))
				lctrl.SetStringItem(index, 9, str(row[9]))
				lctrl.SetItemData(index, row[1])
				fila += 1
			lctrl.SetColumnWidth(0, 60)
			lctrl.SetColumnWidth(1, 70)
			lctrl.SetColumnWidth(2, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(3, 80)
			lctrl.SetColumnWidth(4, 80)
			lctrl.SetColumnWidth(5, 80)
			lctrl.SetColumnWidth(6, 60)
			lctrl.SetColumnWidth(7, 68)
			lctrl.SetColumnWidth(8, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(9, wx.LIST_AUTOSIZE)
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Documentos", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 200)
		self.GetControl(ID_BUTTONELEGIRDOCUMENTOELEGIR).Enable(False)
		lctrl.Enable(True)
		lctrl.Show(True)
		wx.EndBusyCursor()
		
class GixEgrSolicitudCheques(wx.Frame, GixBase, GixBaseListCtrl):
	idtxusuarioarea = ID_TEXTEGRCHEQUESUSUARIOAREA
	idtcfechacaptura = ID_TEXTCTRLEGRCHEQUESFECHACAPTURA
	idtcidcheque = ID_TEXTCTRLEGRCHEQUESIDCHEQUE
	idchestatus = ID_CHOICEEGRCHEQUESESTATUS
	idchprogramacion = ID_CHOICEEGRCHEQUESPROGRAMACION
	idtcfechaprogramada = ID_TEXTCTRLEGRCHEQUESFECHAPROGRAMADA
	idbbelegirfechaprogramada = ID_BITMAPBUTTONEGRCHEQUESELEGIRFECHAPROGRAMADA
	idcbempresa = ID_COMBOEGRCHEQUESEMPRESA
	idlcpartidas = ID_LISTCTRLEGRCHEQUESPARTIDAS
	idbbagregarpartida = ID_BITMAPBUTTONEGRCHEQUESAGREGARPARTIDA
	idbbguardarpartida = ID_BITMAPBUTTONEGRCHEQUESGUARDARPARTIDA
	idbbeliminarpartida = ID_BITMAPBUTTONEGRCHEQUESELIMINARPARTIDA
	idtctotalcheque = ID_TEXTCTRLEGRCHEQUESTOTALCHEQUE
	idtxtotalcheque = ID_TEXTEGRCHEQUESTOTALCHEQUE
	idtxcentrocosto = ID_TEXTEGRCHEQUESCENTROCOSTO
	idcbcentrocosto = ID_COMBOEGRCHEQUESCENTROCOSTO
	idtxpartida = ID_TEXTEGRCHEQUESPARTIDA
	idcbpartida = ID_COMBOEGRCHEQUESPARTIDA
	idsbpartida = ID_STATICBITMAPEGRCHEQUESPARTIDA
	idtxsubpartida1 = ID_TEXTEGRCHEQUESSUBPARTIDA1
	idcbsubpartida1 = ID_COMBOEGRCHEQUESSUBPARTIDA1
	idsbsubpartida1 = ID_STATICBITMAPEGRCHEQUESSUBPARTIDA1
	idtxsubpartida2 = ID_TEXTEGRCHEQUESSUBPARTIDA2
	idcbsubpartida2 = ID_COMBOEGRCHEQUESSUBPARTIDA2
	idsbsubpartida2 = ID_STATICBITMAPEGRCHEQUESSUBPARTIDA2
	idtxsubpartida3 = ID_TEXTEGRCHEQUESSUBPARTIDA3
	idcbsubpartida3 = ID_COMBOEGRCHEQUESSUBPARTIDA3
	idsbsubpartida3 = ID_STATICBITMAPEGRCHEQUESSUBPARTIDA3
	idtxsubpartida4 = ID_TEXTEGRCHEQUESSUBPARTIDA4
	idcbsubpartida4 = ID_COMBOEGRCHEQUESSUBPARTIDA4
	idsbsubpartida4 = ID_STATICBITMAPEGRCHEQUESSUBPARTIDA4
	idtxsubpartida5 = ID_TEXTEGRCHEQUESSUBPARTIDA5
	idcbsubpartida5 = ID_COMBOEGRCHEQUESSUBPARTIDA5
	idsbsubpartida5 = ID_STATICBITMAPEGRCHEQUESSUBPARTIDA5
	idcbbeneficiario = ID_COMBOEGRCHEQUESBENEFICIARIO
	idtgbeneficiariodevolucion = ID_TOGGLEBUTTONEGRCHEQUESBENEFICIARIODEVOLUCION
	idtcbeneficiario = ID_TEXTCTRLEGRCHEQUESBENEFICIARIO
	idtcconcepto = ID_TEXTCTRLEGRCHEQUESCONCEPTO
	idbbelegirconcepto = ID_BITMAPBUTTONEGRCHEQUESELEGIRCONCEPTO
	idtccantidad = ID_TEXTCTRLEGRCHEQUESCANTIDAD
	idtxcantidad = ID_TEXTEGRCHEQUESCANTIDAD
	idchanexo = ID_CHOICEEGRCHEQUESANEXO
	idtcanexoadicional = ID_TEXTCTRLEGRCHEQUESANEXOADICIONAL
	idtcobservaciones = ID_TEXTCTRLEGRCHEQUESOBSERVACIONES
	idtxespecificaciones = ID_TEXTEGRCHEQUESESPECIFICACIONES
	idchespecificaciones = ID_CHOICEEGRCHEQUESESPECIFICACIONES
	idbbespecificaciones = ID_BITMAPBUTTONEGRCHEQUESESPECIFICACIONES
	idtxestimacion = ID_TEXTEGRCHEQUESESTIMACION
	idckestimacion = ID_CHECKBOXEGRCHEQUESESTIMACION
	idtxbancoorigen = ID_TEXTEGRCHEQUESBANCOORIGEN
	idchbancoorigen = ID_CHOICEEGRCHEQUESBANCOORIGEN
	idtxnumerochequeorigen = ID_TEXTEGRCHEQUESNUMEROCHEQUEORIGEN
	idtcnumerochequeorigen = ID_TEXTCTRLEGRCHEQUESNUMEROCHEQUEORIGEN
	idtxbancodestino = ID_TEXTEGRCHEQUESBANCODESTINO
	idtcbancodestino = ID_TEXTCTRLEGRCHEQUESBANCODESTINO
	idtxsucursaldestino = ID_TEXTEGRCHEQUESSUCURSALDESTINO
	idtcsucursaldestino = ID_TEXTCTRLEGRCHEQUESSUCURSALDESTINO
	idtxplazadestino = ID_TEXTEGRCHEQUESPLAZADESTINO
	idtcplazadestino = ID_TEXTCTRLEGRCHEQUESPLAZADESTINO
	idtxclavebancariadestino = ID_TEXTEGRCHEQUESCLAVEBANCARIADESTINO
	idtcclavebancariadestino = ID_TEXTCTRLEGRCHEQUESCLAVEBANCARIADESTINO
	idbtaplicarform = ID_BUTTONEGRCHEQUESAPLICARFORM
	idbtaceptarform = ID_BUTTONEGRCHEQUESACEPTARFORM
	idbtcancelarform = ID_BUTTONEGRCHEQUESCANCELARFORM

	idtcfechacapturafiltro = ID_TEXTCTRLEGRCHEQUESFECHACAPTURAFILTRO
	idbbelegirfechacapturafiltro = ID_BITMAPBUTTONEGRCHEQUESELEGIRFECHACAPTURAFILTRO
	idbblimpiarfechacapturafiltro = ID_BITMAPBUTTONEGRCHEQUESLIMPIARFECHACAPTURAFILTRO
	idtcfechaprogramadafiltro = ID_TEXTCTRLEGRCHEQUESFECHAPROGRAMADAFILTRO
	idbbelegirfechaprogramadafiltro = ID_BITMAPBUTTONEGRCHEQUESELEGIRFECHAPROGRAMADAFILTRO
	idbblimpiarfechaprogramadafiltro = ID_BITMAPBUTTONEGRCHEQUESLIMPIARFECHAPROGRAMADAFILTRO
	idtcfechacapturarango = ID_TEXTCTRLEGRCHEQUESFECHACAPTURARANGO
	idbbelegirfechacapturarango = ID_BITMAPBUTTONEGRCHEQUESELEGIRFECHACAPTURARANGO
	idbblimpiarfechacapturarango = ID_BITMAPBUTTONEGRCHEQUESLIMPIARFECHACAPTURARANGO
	idtcfechaprogramadarango = ID_TEXTCTRLEGRCHEQUESFECHAPROGRAMADARANGO
	idbbelegirfechaprogramadarango = ID_BITMAPBUTTONEGRCHEQUESELEGIRFECHAPROGRAMADARANGO
	idbblimpiarfechaprogramadarango = ID_BITMAPBUTTONEGRCHEQUESLIMPIARFECHAPROGRAMADARANGO
	idbbelegirbeneficiariofiltro = ID_BITMAPBUTTONEGRCHEQUESELEGIRBENEFICIARIOFILTRO
	idfrbeneficiariofiltro = ID_FOREIGNEGRCHEQUESBENEFICIARIOFILTRO
	idtxempresafiltro = ID_TEXTEGRCHEQUESEMPRESAFILTRO
	idchempresafiltro = ID_CHOICEEGRCHEQUESEMPRESAFILTRO
	idbblimpiarempresafiltro = ID_BITMAPBUTTONEGRCHEQUESLIMPIAREMPRESAFILTRO
	idchestatusfiltro = ID_CHOICEEGRCHEQUESESTATUSFILTRO
	idtgmulticheque = ID_TOGGLEBUTTONEGRCHEQUESMULTICHEQUE
	idtgfondeo = ID_TOGGLEBUTTONEGRCHEQUESFONDEO
	idckfondeo = ID_CHECKBOXEGRCHEQUESFONDEO
	idbtcambiarestatus = ID_BUTTONEGRCHEQUESCAMBIARESTATUS
	idlnmulticheque12 = ID_LINEEGRCHEQUESMULTICHEQUE12
	idlnmulticheque22 = ID_LINEEGRCHEQUESMULTICHEQUE22
	idtxmultichequetotalcheque = ID_TEXTEGRCHEQUESMULTICHEQUETOTALCHEQUE
	idtcmultichequetotalcheque = ID_TEXTCTRLEGRCHEQUESMULTICHEQUETOTALCHEQUE
	idbtmultichequerecalcularcheque = ID_BUTTONEGRCHEQUESMULTICHEQUERECALCULARCHEQUE
	idtxmultichequetotalchequeletra = ID_TEXTEGRCHEQUESMULTICHEQUETOTALCHEQUELETRA
	idtxmultichequenumerocheque = ID_TEXTEGRCHEQUESMULTICHEQUENUMEROCHEQUE
	idtcmultichequenumerocheque = ID_TEXTCTRLEGRCHEQUESMULTICHEQUENUMEROCHEQUE
	idbtmultichequeaplicarcheque = ID_BUTTONEGRCHEQUESMULTICHEQUEAPLICARCHEQUE
	idtxconciliarmovimientosbanco = ID_TEXTEGRCHEQUESCONCILIARMOVIMIENTOSBANCO
	idtxconciliarsolicitudescheques = ID_TEXTEGRCHEQUESCONCILIARSOLICITUDESCHEQUES
	idlccargos = ID_LISTCTRLEGRCHEQUESCARGOS
	idlc = ID_LISTCTRLEGRCHEQUES
	idtcconciliarmovimientosbanco = ID_TEXTCTRLEGRCHEQUESCONCILIARMOVIMIENTOSBANCOS
	idbtconciliarbancoscheques = ID_BUTTONEGRCHEQUESCONCILIARBANCOSCHEQUES
	idtcconciliarsolicitudescheques = ID_TEXTCTRLEGRCHEQUESCONCILIARSOLICITUDESCHEQUES
	idtxsaldoinicialdisponible = ID_TEXTEGRCHEQUESSALDOINICIALDISPONIBLE
	idtcsaldoinicialdisponible = ID_TEXTCTRLEGRCHEQUESSALDOINICIALDISPONIBLE
	idtxcantidadfondear = ID_TEXTEGRCHEQUESCANTIDADFONDEAR
	idtccantidadfondear = ID_TEXTCTRLEGRCHEQUESCANTIDADFONDEAR
	idtxsaldofinaldisponible = ID_TEXTEGRCHEQUESSALDOFINALDISPONIBLE
	idtcsaldofinaldisponible = ID_TEXTCTRLEGRCHEQUESSALDOFINALDISPONIBLE
	idtxsaldoinicialtransito = ID_TEXTEGRCHEQUESSALDOINICIALTRANSITO
	idtcsaldoinicialtransito = ID_TEXTCTRLEGRCHEQUESSALDOINICIALTRANSITO
	idtxsaldofinaltransito = ID_TEXTEGRCHEQUESSALDOFINALTRANSITO
	idtcsaldofinaltransito = ID_TEXTCTRLEGRCHEQUESSALDOFINALTRANSITO
	idtxtotalvista = ID_TEXTEGRCHEQUESTOTALVISTA
	idtctotalvista = ID_TEXTCTRLEGRCHEQUESTOTALVISTA
	idtxsaldobanco = ID_TEXTEGRCHEQUESSALDOBANCO
	idtcsaldobanco = ID_TEXTCTRLEGRCHEQUESSALDOBANCO
	idtxsaldobancoletra = ID_TEXTEGRCHEQUESSALDOBANCOLETRA
	idlnsaldobanco = ID_LINEEGRCHEQUESSALDOBANCO
	idbtfirmanteslistctrl = ID_BUTTONEGRCHEQUESFIRMANTESLISTCTRL
	idbtrecalcularlistctrl = ID_BUTTONEGRCHEQUESRECALCULARLISTCTRL
	idbtfondearlistctrl = ID_BUTTONEGRCHEQUESFONDEARLISTCTRL
	idbtprintexcellistctrl = ID_BUTTONEGRCHEQUESPRINTEXCELLISTCTRL
	idbtclonarlistctrl = ID_BUTTONEGRCHEQUESCLONARLISTCTRL
	idbtimprimirlistctrl = ID_BUTTONEGRCHEQUESIMPRIMIRLISTCTRL
	idbtagregarlistctrl = ID_BUTTONEGRCHEQUESAGREGARLISTCTRL
	idbteditarlistctrl = ID_BUTTONEGRCHEQUESEDITARLISTCTRL
	idbtsalirlistctrl = ID_BUTTONEGRCHEQUESALIRLISTCTRL
	
	idnbform = ID_NOTEBOOKEGRCHEQUESFORM
	idnblistctrl = ID_NOTEBOOKEGRCHEQUESLISTCTRL
	
	cttx = ["idtcfechacaptura", "idtcidcheque", "idtcfechaprogramada", "idtcconcepto", "idtccantidad",
	        "idtcanexoadicional", "idtcnumerochequeorigen", "idtcbancodestino", "idtcsucursaldestino",
	        "idtcplazadestino", "idtcclavebancariadestino", "idtcobservaciones"]
	ctch = ["idchanexo", "idchbancoorigen", "idchespecificaciones", "idchestatus", "idchprogramacion"]
	ctcb = ["idcbempresa", "idcbcentrocosto", "idcbpartida", "idcbsubpartida1", "idcbsubpartida2",
	        "idcbsubpartida3", "idcbsubpartida4", "idcbsubpartida5", "idcbbeneficiario"]
	controles_tipo_txt = dict(zip(cttx,map(eval,cttx)))
	controles_tipo_choice = dict(zip(ctch,map(eval,ctch)))
	controles_tipo_combo = dict(zip(ctcb,map(eval,ctcb)))
	controles_de_captura = [(idtcfechaprogramada, "tc"), (idtcconcepto, "tc"), (idtccantidad, "tc"),
	                        (idtcanexoadicional, "tc"), (idtcnumerochequeorigen, "tc"), (idtcbancodestino, "tc"),
	                        (idtcsucursaldestino, "tc"), (idtcplazadestino, "tc"), (idtcclavebancariadestino, "tc"),
	                        (idtcobservaciones, "tc"), (idchanexo, "ch"), (idchbancoorigen, "ch"),
	                        (idchespecificaciones, "ch"), (idchestatus, "ch"), (idchprogramacion, "ch"),
	                        (idcbempresa, "cb"), (idcbcentrocosto, "cb"), (idcbpartida, "cb"), (idcbsubpartida1, "cb"),
	                        (idcbsubpartida2, "cb"), (idcbsubpartida3, "cb"), (idcbsubpartida4, "cb"),
	                        (idcbsubpartida5, "cb"), (idcbbeneficiario, "cb")]
	controles_cb_deshabilitados = [(1,idtxcentrocosto, idcbcentrocosto), (2, idtxpartida, idcbpartida),
	                               (3, idtxsubpartida1, idcbsubpartida1), (4, idtxsubpartida2, idcbsubpartida2),
	                               (5, idtxsubpartida3, idcbsubpartida3), (6, idtxsubpartida4, idcbsubpartida4),
	                               (7, idtxsubpartida5, idcbsubpartida5)]
	controles_tc_deshabilitados = [(idtxbancodestino, idtcbancodestino),
	                               (idtxsucursaldestino, idtcsucursaldestino),
	                               (idtxplazadestino, idtcplazadestino),
	                               (idtxclavebancariadestino, idtcclavebancariadestino)]
	controles_cb_partidas = [idcbcentrocosto, idcbpartida, idcbsubpartida1, idcbsubpartida2,
	                         idcbsubpartida3, idcbsubpartida4, idcbsubpartida5]
	lstctrlorder = {0:("ch.idcheque","desc","> "), 1:("ch.fechacaptura","desc",""), 2:("ch.fechaprogramada","desc",""),
	                3:("ch.numerochequeorigen","desc",""), 4:("ch.cantidad","desc",""), 5:("be.nombre","desc",""),
	                6:("em.RazonSocial","desc",""), 7:("ch.estatus","desc",""), 8:("ch.usuariosolicitante","desc","")}
	DicDatesAndTxt = {idbbelegirfechaprogramada : idtcfechaprogramada,
	                  idbbelegirfechacapturafiltro : idtcfechacapturafiltro,
	                  idbbelegirfechacapturarango : idtcfechacapturarango,
	                  idbbelegirfechaprogramadafiltro : idtcfechaprogramadafiltro,
	                  idbbelegirfechaprogramadarango : idtcfechaprogramadarango}
	coloreable = ("idtcfechacaptura", "idtcidcheque", "idtcfechaprogramada")
	activecontrolafternewrecord = idcbbeneficiario
	dbtable  = "gixegresoscheques"
	
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize,
	             style = wx.DEFAULT_FRAME_STYLE, usuario = None, devolucionsaldo = False):
		
		def BuildWindow(usuario):
			wx.Frame.__init__(self, parent, id, title, pos, size, style)
			if FORCESCROLL:
				sb = wx.ScrolledWindow(self, -1)
				sb.SetScrollbars(20, 20, 150, 150)
				panel = wx.Panel(sb, -1, size=(970,315))
				sb.Layout()
			else:
				panel = wx.Panel(self, -1)
				
			if wx.Platform == '__WXMSW__':
				EgresosChequesFuncion12(panel, True, True)
			else:
				EgresosChequesFuncion12Mac(panel, True, True)
				
			self.ObtenerEmpresasFiltro()
		
		def BuildStatusBar():
			anchos = [-1,55,133]
			self.CreateStatusBar(3)
			self.SetStatusWidths(anchos)
			self.SetStatusText(u"Recursos Financieros", 0)
			self.SetStatusText(u"Egresos", 1)
			self.SetStatusText(u"Solicitud de Cheques", 2)
			
		def InitialValues(usuario):
			self.valida, self.editable = True, True
			self.FillingARecord, self.NewFlag, self.agregar, self.datointernoynombre = False, False, False, False
			self.ckfondeo = False
			self.ctrlindex, self.idcheque, self.origenempresaid, self.origenidbanco = 0, 0, 0, 0
			self.saldobanco, self.saldoinicialdisponible, self.saldoinicialtransito = 0, 0, 0
			self.saldofinaldisponible, self.saldofinaltransito, self.cantidadfondear = 0, 0, 0
			self.cantidadtotalcargo, self.cantidadtotalcheque, self.datointerno = 0, 0, 0
			self.colprev, self.colsort = 0, 0
			self.lstctrlsort = "ch.idcheque desc"
			self.usuario = usuario
			self.devolucionsaldo = devolucionsaldo
			self.currentitem = None
			self.beneficiario = -1
			self.selecteditems = []
			
		def UpdateButtons():
			wx.EVT_BUTTON(self, self.idbtmultichequerecalcularcheque, self.OnRecalcularTotalCheque)
			wx.EVT_BUTTON(self, self.idbtmultichequeaplicarcheque, self.OnAplicarMulticheque)
			wx.EVT_BUTTON(self, self.idbtfirmanteslistctrl, self.OnFirmantes)
			wx.EVT_BUTTON(self, self.idbtrecalcularlistctrl, self.OnRecalcularSaldos)
			wx.EVT_BUTTON(self, self.idbtfondearlistctrl, self.OnFondear)
			wx.EVT_BUTTON(self, self.idbtprintexcellistctrl, self.OnPrintExcel)
			wx.EVT_BUTTON(self, self.idbtclonarlistctrl, self.OnClonarSolicitud)
			wx.EVT_BUTTON(self, self.idbtimprimirlistctrl, self.OnImprimirSolicitud)
			wx.EVT_BUTTON(self, self.idbtagregarlistctrl, self.OnAgregarDetalle)
			wx.EVT_BUTTON(self, self.idbteditarlistctrl, self.OnEditRecord)
			wx.EVT_BUTTON(self, self.idbtsalirlistctrl, self.OnExitRecord)
			wx.EVT_BUTTON(self, self.idbtaplicarform, self.OnAceptarDetalle)
			wx.EVT_BUTTON(self, self.idbtaceptarform, self.OnAceptarDetalle)
			wx.EVT_BUTTON(self, self.idbtcancelarform, self.OnSalirDetalle)
			wx.EVT_CLOSE(self, self.OnClose)
			wx.EVT_BUTTON(self, self.idbbagregarpartida, self.OnAgregarPartida)
			wx.EVT_BUTTON(self, self.idbbguardarpartida, self.OnGuardarPartida)
			wx.EVT_BUTTON(self, self.idbbeliminarpartida, self.OnEliminarPartida)
			wx.EVT_BUTTON(self, self.idbtconciliarbancoscheques, self.OnConciliarBancosCheques)
			
		def WorkWithListCtrl():
			self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnLCtrlCargos, id = self.idlccargos)
			self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnItemDeselectedCargos, id = self.idlccargos)
			self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnLCtrl, id = self.idlc)
			self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnItemDeselected, id = self.idlc)
			self.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.OnRightClick, id = self.idlc)
			self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnEditRecord, id = self.idlc)
			self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnLCtrlPartidas, id = self.idlcpartidas)
			self.Bind(wx.EVT_LIST_COL_CLICK, self.OnClasificarSolicitud, id = self.idlc)
			
		def WorkWithForm():
			wx.EVT_BUTTON(self, self.idbbespecificaciones, self.OnVerificarEspecificaciones)
			
		def FilterSectionForListCtrl():
			self.Bind(wx.EVT_TEXT, self.OnChoiceFiltroLocal, id = self.idtcfechacapturafiltro)
			self.Bind(wx.EVT_TEXT, self.OnChoiceFiltroLocal, id = self.idtcfechacapturarango)
			self.Bind(wx.EVT_TEXT, self.OnChoiceFiltroLocal, id = self.idtcfechaprogramadafiltro)
			self.Bind(wx.EVT_TEXT, self.OnChoiceFiltroLocal, id = self.idtcfechaprogramadarango)
			wx.EVT_BUTTON(self, self.idbblimpiarfechacapturafiltro, self.OnLimpiarFechaCapturaFiltro)
			wx.EVT_BUTTON(self, self.idbblimpiarfechacapturarango, self.OnLimpiarFechaCapturaRango)
			wx.EVT_BUTTON(self, self.idbblimpiarfechaprogramadafiltro, self.OnLimpiarFechaProgramadaFiltro)
			wx.EVT_BUTTON(self, self.idbblimpiarfechaprogramadarango, self.OnLimpiarFechaProgramadaRango)
			
			self.GetControl(self.idfrbeneficiariofiltro).ShowCancelButton(True)
			self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnTextEnterBeneficiarioFiltro, id = self.idfrbeneficiariofiltro)
			self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnLimpiarBeneficiarioFiltro, id = self.idfrbeneficiariofiltro)
			self.Bind(wx.EVT_TEXT_ENTER, self.OnTextEnterBeneficiarioFiltro, id = self.idfrbeneficiariofiltro)
			self.Bind(wx.EVT_TEXT, self.OnTextBeneficiarioFiltro, id = self.idfrbeneficiariofiltro)
			wx.EVT_BUTTON(self, self.idbbelegirbeneficiariofiltro, self.OnObtenerBeneficiarioFiltro)
			
			wx.EVT_CHOICE(self, self.idchempresafiltro, self.OnChoiceFiltroLocal)
			wx.EVT_BUTTON(self, self.idbblimpiarempresafiltro, self.OnLimpiarEmpresaFiltro)
			wx.EVT_CHOICE(self, self.idchestatusfiltro, self.OnChoiceFiltroLocal)
			self.GetControl(self.idchestatusfiltro).SetSelection(1)
			wx.EVT_TOGGLEBUTTON(self, self.idtgmulticheque, self.OnMulticheque)
			wx.EVT_TOGGLEBUTTON(self, self.idtgfondeo, self.OnFondeo)
			wx.EVT_CHECKBOX(self, self.idckfondeo, self.OnCheckBoxFondeo)
			wx.EVT_BUTTON(self, self.idbtcambiarestatus, self.OnCambiarEstatus)
			if self.usuario in ("ADRIANA", "JUAN", "ARAMOS", "MARTHA", "CESAR"):
				self.GetControl(self.idtgmulticheque).Enable(True)
				self.GetControl(self.idtgfondeo).Enable(True)
				self.GetControl(self.idckfondeo).Enable(True)
			
		def InitialControlValues():
			self.originales = {}
			for v in self.controles_tipo_txt.itervalues():
				self.Bind(wx.EVT_TEXT, self.OnText, self.GetControl(v))
				self.originales[v] = ""
			self.Bind(wx.EVT_TEXT_ENTER, self.OnTextEnter, self.GetControl(self.idtccantidad))
			for v in self.controles_tipo_choice.itervalues():
				self.Bind(wx.EVT_CHOICE, self.OnChoiceControl, self.GetControl(v))
				self.originales[v] = ""
			for v in self.controles_tipo_combo.itervalues():
				self.Bind(wx.EVT_COMBOBOX, self.OnComboBox, self.GetControl(v))
				self.Bind(wx.EVT_TEXT, self.OnText, self.GetControl(v))
				self.originales[v] = ""
			for v in self.DicDatesAndTxt.keys():
				self.Bind(wx.EVT_BUTTON, self.OnFechaButton, id = v )
			self.originales[self.idckestimacion] = ""
			wx.EVT_CHECKBOX(self, self.idckestimacion, self.OnCheckBoxEstimacion)
			wx.EVT_TOGGLEBUTTON(self, self.idtgbeneficiariodevolucion, self.OnBeneficiarioDevolucion)
			self.Bind(wx.EVT_BUTTON, self.OnBtnElegirDocumento, id = self.idbbelegirconcepto)
			if not self.devolucionsaldo:
				if self.usuario not in ("ADRIANA", "MARTHA", "CESAR"):
					self.GetControl(self.idtgbeneficiariodevolucion).Enable(False)
					self.GetControl(self.idbbelegirconcepto).Enable(False)
					self.GetControl(self.idtgbeneficiariodevolucion).Show(False)
					self.GetControl(self.idbbelegirconcepto).Show(False)
				
		def ReadOnlyCtrl():
			self.readonlyctrl = ["idcbempresa", "idcbcentrocosto", "idcbpartida", "idcbsubpartida1", "idcbsubpartida2",
			                     "idcbsubpartida3", "idcbsubpartida4", "idcbsubpartida5", "idtcfechaprogramada"]
	
		def StartNoteBook():
			# self.size
			if wx.Platform == '__WXMSW__':
				self.notebook = {self.idnblistctrl:(980,700), self.idnbform:(925,740)}
			else:
				self.notebook = {self.idnblistctrl:(1026,690), self.idnbform:(950,850)}
			self.launch = False
			self.ToggleMultichequeSolicitud("Multicheque", "Aplicar un Cheque a Varias Solicitudes", False, 1, True)
			self.launch = True
			self.ToggleFondeoSolicitud("Fondeo", u"Fondeo y Proyecci�n", False, 1, True)
			self.GetControl(self.idtxconciliarmovimientosbanco).Show(False)
			self.GetControl(self.idtxconciliarsolicitudescheques).Show(False)
			self.GetControl(self.idtcconciliarmovimientosbanco).Show(False)
			self.GetControl(self.idbtconciliarbancoscheques).Show(False)
			self.GetControl(self.idtcconciliarsolicitudescheques).Show(False)
			self.GetControl(self.idlccargos).Show(False)
			self.GetControl(self.idlc).Move(wx.Point(5, 97))
			self.ActiveNoteBook(self.idnblistctrl)
			if wx.Platform == '__WXMSW__':
				self.GetControl(self.idlc).SetSize(wx.Size(913, 447))
			else:
				self.GetControl(self.idnblistctrl).SetSize(wx.Size(-1, 640))
				self.GetControl(self.idlc).SetSize(wx.Size(970, 443))
				self.GetControl(self.idnbform).SetSize(wx.Size(943, 800))

			#self.ActiveNoteBook(self.idnblistctrl)
			self.GetControl(self.idnbform).Move(wx.Point(-1, 5))
			self.GetControl(self.idnblistctrl).Move(wx.Point(-1, 5))
			self.GetControl(self.idlc).SetFocus()
			
		BuildWindow(usuario); BuildStatusBar(); InitialValues(usuario); UpdateButtons()
		WorkWithListCtrl(); WorkWithForm(); FilterSectionForListCtrl()
		ReadOnlyCtrl(); InitialControlValues(); StartNoteBook()
		
	def OnExitRecord(self, event):
		self.Destroy()
		
	def OnClose(self, event):
		pass
		
	def OnBtnElegirDocumento(self, event):
		nombrecliente = self.GetControl(self.idcbbeneficiario).GetValue()
		if self.idbeneficiario and nombrecliente:
			nombrecliente = ""
			sql = """
			select nombre from CLIENTE where codigo = %s
			""" % self.idbeneficiario
			cu = r_cn.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			cu.close()
			if row:
				try:
					nombrecliente = row[0].decode("iso8859-1")
				except:
					try:
						nombrecliente = str(row[0])
					except:
						nombrecliente = row[0]
				self.idbmp = event.GetId()
				dlg = GixElegirDocumento(self, documentoelegido = self.DocumentoElegido, cliente = self.idbeneficiario,
							 nombrecliente = nombrecliente)
				dlg.CenterOnParent()
				dlg.Show(True)
			else:
				Mensajes().Info(self, u"� No se encontro el cliente (beneficiario) !", u"Atenci�n")
		else:
			Mensajes().Info(self, u"� Por favor elija el cliente (beneficiario) !", u"Aviso")
	
	def DocumentoElegido(self, codigodocumento):
		todook = False; concepto = ""; saldototal = 0; self.codigodocumento = []
		codigodocumento.sort()
		query = """
		select c.codigo, d.codigo, convert(varchar(10), d.fechadeelaboracion, 103), d.cargo, d.abono, d.saldo,
		i.domiciliooficial, e.descripcion, s.descripcion, d.idcheque
		from DOCUMENTO d
		join CUENTA c on d.fk_cuenta = c.codigo
		join INMUEBLE i on c.fk_inmueble = i.codigo
		join ETAPA e on c.fk_etapa = e.codigo
		join DESARROLLO s on e.fk_desarrollo = s.codigo
		where d.codigo in (%s)
		order by c.codigo desc, d.codigo desc, d.fechadeelaboracion desc		
		""" % (",".join(map(str, codigodocumento)),)
		cu = r_cn.cursor()
		cu.execute(str(query))
		rows = fetchall(cu)
		cu.close()
		if rows:
			todook = True
			for row in rows:
				if row[9]:
					if self.idcheque != int(row[9]):
						Mensajes().Info(self, u"� El documento %s ya fu� asignado a la solicitud %s !"
										% (int(row[1]), int(row[9])), u"Atenci�n")
						todook = False
						break
				if float(row[5]) != 0:
					Mensajes().Info(self, u"� El saldo del documento %s no se encuentra en cero !"
									% (int(row[1])), u"Atenci�n")
					todook = False
					break
				
				saldototal += float(row[3])
				if concepto:
					concepto += ", " + str(row[1])
				else:
					concepto = "DOCTO(S): " + str(row[1])
					
				self.codigodocumento.append(int(row[1]))
				
			if todook:
				concepto += "  TOTAL: " + str(amount_and_cents_with_commas(saldototal))
				self.GetControl(self.idbmp - 1).SetValue(concepto)
			else:
				self.codigodocumento = []
				
		return todook
	
	def OnTextEnter(self, event):
		control = self.GetControl(self.idbbguardarpartida)
		if control.IsEnabled():
			control.SetFocus()
			
	def ElegirEstatus(self):
		estatusdir = {"Solicitud":"S", "Revisado":"R", "Autorizado":"A", "Elaborado":"E", "Fondeado":"F",
			      "Cobrado":"B", "Retenido":"T", "Cancelado":"C"}
		estatuslst = []
		estatusini = self.GetControl(self.idchestatusfiltro).GetStringSelection()
		if estatusini == u"Solicitud":
			estatuslst = ["Revisado", "Cancelado"]
		elif estatusini == u"Revisado":
			estatuslst = ["Autorizado", "Cancelado"]
		elif estatusini == u"Autorizado":
			estatuslst = ["Elaborado", "Cancelado"]
		elif estatusini == u"Elaborado":
			estatuslst = ["Cancelado"]
		if estatuslst:
			self.choestatus = []
			for estatus in estatuslst:
				self.choestatus.append(self.GetStringFromField(estatus))
			self.index = wx.GetSingleChoiceIndex(u"Elija el Nuevo Estatus",  u"Cambio de Estatus %s" % estatusini,
							     self.choestatus, parent = None)
			if int(self.index) > -1:
				estatusfin = self.choestatus[self.index]
				return True, estatusini, estatusfin, estatusdir[estatusfin]
			
		return False, "", "", ""
	
	def CambiarEstatus(self, estatus, estatusini, estatusfin):
		contenido = u"Cambio de estatus %s a estatus %s" % (estatusini, estatusfin)
		for idcheque in self.selecteditems:
			if estatus == "E":
				sql = "update %s set estatus = '%s', cantidadcheque = cantidad where idcheque = %s" \
					% (self.dbtable, estatus, idcheque)
			else:
				sql = "update %s set estatus = '%s' where idcheque = %s" % (self.dbtable, estatus, idcheque)
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"� Se experimento un problema al actualizar la solicitud %s !\n\n" \
						u"Tome nota y revise la solicitud al finalizar el proceso." % idcheque, u"Atenci�n")
			else:
				sql = "select convert(varchar(50), BlogGUID) from %s where idcheque = %s" % (self.dbtable, idcheque)
				cu = r_cn.cursor()
				cu.execute(str(sql))
				row = fetchone(cu)
				BlogGUID = str(row[0])
				cu.close()
				sql = """
				insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText,
				ContenidoBinario, Extension, Estatus)
				values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
				""" % (BlogGUID, self.usuario, contenido, "", "", estatus)
				if not self.QueryUpdateRecord(sql):
					Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
					
		self.FillListCtrl()

	def OnCambiarEstatus(self, event):
		todobien, estatusini, estatusfin, estatus = self.ElegirEstatus()
		if todobien:
			self.selecteditems.sort()
			if len(self.selecteditems) > 1: char = "es"
			else: char = ""
			if Mensajes().YesNo(self,u"Solicitud%s a cambiar del estatus %s al estatus %s:\n\n%s\n\n" \
			                    u"� Desea continuar ?" \
			                    % (char, estatusini, estatusfin, self.selecteditems), u"Confirmaci�n"):
				self.CambiarEstatus(estatus, estatusini, estatusfin)
				
		self.GetControl(self.idlc).SetFocus()
		
	def OnRecalcularSaldos(self, event):
		self.RecalculaSaldos()
		Mensajes().Info(self, u"Rec�lculo finalizado.", u"Aviso")
		
	def RecalculaSaldos(self):
		wx.BeginBusyCursor()
		self.LimpiaSaldosFondeo()
		self.CalculaCantidadAFondear()
		self.ObtenerSaldoBanco()
		self.CalculaSaldoInicialFinalTransito()
		self.CalculaSaldoInicialFinalDisponible()
		wx.EndBusyCursor()
		
	def LimpiaSaldosFondeo(self):
		for id in (self.idtcsaldoinicialdisponible, self.idtccantidadfondear, self.idtcsaldofinaldisponible,
				   self.idtcsaldoinicialtransito, self.idtcsaldofinaltransito, self.idtcsaldobanco,
				   self.idtxsaldobancoletra):
			if id == self.idtxsaldobancoletra:
				self.GetControl(id).SetLabel("")
			else:
				self.GetControl(id).SetValue("")
			self.GetControl(id).SetBackgroundColour(wx.Colour(255,255,255))
			self.GetControl(id).SetForegroundColour(wx.Colour(0,0,0))
		
	def CalculaCantidadAFondear(self):
		self.cantidadfondear = 0
		if len(self.selecteditems) > 0:
			if len(self.selecteditems) > 1:
				self.selecteditems.sort()
				movimientos = tuple(self.selecteditems)
				where = "in"
			else:
				movimientos = self.selecteditems[0]
				where = "="
			sql = """
			select sum(cantidad) from %s where idcheque %s %s
			""" % (self.dbtable, where, movimientos)
			cu = r_cn.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			self.cantidadfondear = float(row[0])
			cu.close()
		control = self.GetControl(self.idtccantidadfondear)
		control.SetBackgroundColour(wx.Colour(153,255,153))
		amount = amount_and_cents_with_commas(self.cantidadfondear)
		control.SetValue(str(amount).rjust(20))
		
	def CalculaSaldoInicialFinalTransito(self):
		query = """
		select sum(cantidad) from gixegresoscheques
		where estatus = 'F' and empresaid = %s and idbancoorigen = %s
		""" % (self.origenempresaid, self.origenidbanco)
		cu = r_cn.cursor()
		cu.execute(query)
		row = fetchone(cu)
		cu.close()
		if None in row:
			self.saldoinicialtransito = 0
		else:
			self.saldoinicialtransito = float(row[0])
		control = self.GetControl(self.idtcsaldoinicialtransito)
		control.SetBackgroundColour(wx.Colour(153,255,153))
		amount = amount_and_cents_with_commas(self.saldoinicialtransito)
		control.SetValue(str(amount).rjust(20))
		self.saldofinaltransito = self.saldoinicialtransito + self.cantidadfondear
		control = self.GetControl(self.idtcsaldofinaltransito)
		control.SetBackgroundColour(wx.Colour(153,255,153))
		amount = amount_and_cents_with_commas(self.saldofinaltransito)
		control.SetValue(str(amount).rjust(20))

		if self.saldoinicialtransito > 0:
			# (aa).- Actualmente no se afecta el banco.
			#self.saldobanco += self.saldoinicialtransito
			control = self.GetControl(self.idtcsaldobanco)
			ctrlletra = self.GetControl(self.idtxsaldobancoletra)
			if self.saldobanco < 0:
				control.SetBackgroundColour(wx.Colour(255,0,0))
				control.SetForegroundColour(wx.Colour(255,255,255))
				amount = amount_and_cents_with_commas(self.saldobanco * -1)
				control.SetValue(str(amount).rjust(20))
				ctrlletra.SetBackgroundColour(wx.Colour(255,0,0))
				ctrlletra.SetForegroundColour(wx.Colour(255,255,255))
				ctrlletra.SetLabel(str(c2p(self.saldobanco * -1).texto()))
			else:
				control.SetBackgroundColour(wx.Colour(153,255,153))
				control.SetForegroundColour(wx.Colour(0,0,0))
				amount = amount_and_cents_with_commas(self.saldobanco)
				control.SetValue(str(amount).rjust(20))
				ctrlletra.SetBackgroundColour(wx.Colour(153,255,153))
				ctrlletra.SetForegroundColour(wx.Colour(0,0,0))
				ctrlletra.SetLabel(str(c2p(self.saldobanco).texto()))
		
	def CalculaSaldoInicialFinalDisponible(self):
		control = self.GetControl(self.idtcsaldoinicialdisponible)
		self.saldoinicialdisponible = self.saldobanco - self.saldoinicialtransito
		if self.saldoinicialdisponible < 0:
			control.SetBackgroundColour(wx.Colour(255,0,0))
			control.SetForegroundColour(wx.Colour(255,255,255))
			amount = amount_and_cents_with_commas(self.saldoinicialdisponible * -1)
			control.SetValue(str(amount).rjust(20))
		else:
			control.SetBackgroundColour(wx.Colour(153,255,153))
			control.SetForegroundColour(wx.Colour(0,0,0))
			amount = amount_and_cents_with_commas(self.saldoinicialdisponible)
			control.SetValue(str(amount).rjust(20))
		control = self.GetControl(self.idtcsaldofinaldisponible)
		self.saldofinaldisponible = self.saldoinicialdisponible - self.cantidadfondear
		if self.saldofinaldisponible < 0:
			control.SetBackgroundColour(wx.Colour(255,0,0))
			control.SetForegroundColour(wx.Colour(255,255,255))
			amount = amount_and_cents_with_commas(self.saldofinaldisponible * -1)
			control.SetValue(str(amount).rjust(20))
		else:
			control.SetBackgroundColour(wx.Colour(153,255,153))
			control.SetForegroundColour(wx.Colour(0,0,0))
			amount = amount_and_cents_with_commas(self.saldofinaldisponible)
			control.SetValue(str(amount).rjust(20))

	def ObtenerSaldoBanco(self):
		sql = """
		select periodo, saldoinicial, totalabonos, totalcargos
		from gixbancossaldosxperiodo where idbanco = %s order by periodo desc
		""" % self.origenidbanco
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		self.saldobanco = 0
		if row:
			self.saldobanco = float(row[1]) + float(row[2]) - float(row[3])
		control = self.GetControl(self.idtcsaldobanco)
		ctrlletra = self.GetControl(self.idtxsaldobancoletra)
		if self.saldobanco < 0:
			control.SetBackgroundColour(wx.Colour(255,0,0))
			control.SetForegroundColour(wx.Colour(255,255,255))
			amount = amount_and_cents_with_commas(self.saldobanco * -1)
			control.SetValue(str(amount).rjust(20))
			ctrlletra.SetBackgroundColour(wx.Colour(255,0,0))
			ctrlletra.SetForegroundColour(wx.Colour(255,255,255))
			ctrlletra.SetLabel(str(c2p(self.saldobanco * -1).texto()))
		else:
			control.SetBackgroundColour(wx.Colour(153,255,153))
			control.SetForegroundColour(wx.Colour(0,0,0))
			amount = amount_and_cents_with_commas(self.saldobanco)
			control.SetValue(str(amount).rjust(20))
			ctrlletra.SetBackgroundColour(wx.Colour(153,255,153))
			ctrlletra.SetForegroundColour(wx.Colour(0,0,0))
			ctrlletra.SetLabel(str(c2p(self.saldobanco).texto()))
			
	def OnAplicarMulticheque(self, event):
		control = self.GetControl(self.idtcmultichequenumerocheque)
		numerodecheque = control.GetValue().strip()
		if not numerodecheque:
			Mensajes().Info(self, u"� Por favor digite el n�mero del cheque !", u"Atenci�n")
			control.SetFocus()
		elif not str(numerodecheque).isdigit():
			Mensajes().Info(self, u"� El n�mero de cheque debe ser num�rico !", u"Atenci�n")
			control.SetFocus()
		else:
			self.selecteditems.sort()
			if Mensajes().YesNo(self,u"Solicitudes a relacionar con el cheque %s:\n%s\n\n" \
								u"� Desea continuar ?" \
								% (numerodecheque, self.selecteditems), u"Confirmaci�n"):
				wx.BeginBusyCursor()
				setListForQuery = "numerochequeorigen = '%s'" % str(numerodecheque)
				for idcheque in self.selecteditems:
					sql = """
					update %s set %s where idcheque = %s
					""" % (self.dbtable, setListForQuery, idcheque)
					queTal = self.QueryUpdateRecord(sql)
					if not queTal:
						break
				if queTal:
					Mensajes().Info(self, u"Ha finalizado la relaci�n del cheque %s\n" \
									u"con las solicitudes elegidas:\n%s"
									% (numerodecheque, self.selecteditems), u"Atenci�n")
				else:
					Mensajes().Info(self, u"Ha sido suspendida la relaci�n del cheque %s\n" \
									u"con las solicitudes elegidas:\n%s"
									% (numerodecheque, self.selecteditems), u"Atenci�n")
				wx.EndBusyCursor()
				self.FillListCtrl()
			else:
				self.GetControl(self.idlc).SetFocus()
				
	def HabilitaDeshabilitaEmpresaFiltro(self, bool):
		self.ObtenerEmpresasFiltro()
		self.GetControl(self.idtxempresafiltro).Enable(bool)
		self.GetControl(self.idchempresafiltro).Enable(bool)
		self.GetControl(self.idbblimpiarempresafiltro).Enable(bool)
				
	def OnBeneficiarioDevolucion(self, event):
		self.BeneficiarioDevolucion()
		
	def BeneficiarioDevolucion(self):
		wx.BeginBusyCursor()
		self.GetControl(self.idtcbeneficiario).SetValue("")
		self.GetControl(self.idtcconcepto).SetValue("")
		if self.GetControl(self.idtgbeneficiariodevolucion).GetValue():
			self.ToggleBeneficiarioDevolucion(u"Devoluci�n", u"Utilizar esta Solicitud de Cheque para Devoluci�n de " \
			                                  u"Saldo a Favor", True, False)
			self.ObtenerBeneficiarios(False)
		else:
			self.ToggleBeneficiarioDevolucion(u"Solicitud", u"Utilizar esta Solicitud de Cheque por Concepto " \
			                                  u"Diferente a Devoluci�n de Saldo a Favor", False, True)
			self.ObtenerBeneficiarios()
		wx.EndBusyCursor()
			
	def ToggleBeneficiarioDevolucion(self, label, tip, bool1, bool2):
		self.GetControl(self.idtgbeneficiariodevolucion).SetLabel(label)
		self.GetControl(self.idtgbeneficiariodevolucion).SetToolTip(wx.ToolTip(tip))
		self.GetControl(self.idbbelegirconcepto).Show(bool1)
		self.GetControl(self.idtcconcepto).SetEditable(bool2)
		
	def OnMulticheque(self, event):
		control = self.GetControl(self.idchestatusfiltro)
		if self.GetControl(self.idtgmulticheque).GetValue():
			if self.ElegirEmpresa(titulo = "Emisora del Cheque"):
				if self.ElegirBanco(titulo = "Emisora del Cheque"):
					wx.BeginBusyCursor()
					self.HabilitaDeshabilitaEmpresaFiltro(False)
					control.Clear()
					control.Append("<Todo>", 0); control.Append("Revisado", 1)
					control.Append("Autorizado", 2)
					if wx.Platform == '__WXMSW__':
						self.GetControl(self.idlc).SetSize(wx.Size(-1, 382))
					else:
						self.GetControl(self.idlc).SetSize(wx.Size(-1, 382))
					self.GetControl(self.idlc).Move(wx.Point(-1, 161))
					self.GetControl(self.idtgfondeo).Enable(False)
					self.ToggleMultichequeSolicitud("Solicitudes", "Regresar a Solicitud de Cheques", True, 0, False)
					titulo = u"APLICAR UN CHEQUE A VARIAS SOLICITUDES DE %s  -  BANCO Y CUENTA %s" \
						   % (self.razonsocialorigen, self.bancoctaorigen)
					self.SetTitle(titulo)
					self.RecalcularTotalCheque()
					self.GetControl(self.idtcmultichequenumerocheque).SetValue("")
					wx.EndBusyCursor()
				else:
					self.GetControl(self.idtgmulticheque).SetValue(False)
			else:
				self.GetControl(self.idtgmulticheque).SetValue(False)
		else:
			self.HabilitaDeshabilitaEmpresaFiltro(True)
			control.Clear()
			control.Append("<Todo>", 0); control.Append("Solicitud", 1); control.Append("Revisado", 2)
			control.Append("Autorizado", 3); control.Append("Elaborado", 4); control.Append("Fondeado", 5)
			control.Append("Cobrado", 6); control.Append("Retenido", 7); control.Append("Cancelado", 8)
			self.origenempresaid, self.origenidbanco = 0, 0
			self.ToggleMultichequeSolicitud("Multicheque", "Aplicar un Cheque a Varias Solicitudes", False, 1, True)
			self.GetControl(self.idtgfondeo).Enable(True)
			self.GetControl(self.idlc).Move(wx.Point(-1, 97))
			if wx.Platform == '__WXMSW__':
				self.GetControl(self.idlc).SetSize(wx.Size(-1, 447))
			else:
				self.GetControl(self.idlc).SetSize(wx.Size(-1, 443))
			self.SetTitle("Solicitud de Cheques")
			
	def ToggleMultichequeSolicitud(self, label, tip, bool, estatus, onoffestatus):
		self.GetControl(self.idtgmulticheque).SetLabel(label)
		self.GetControl(self.idtgmulticheque).SetToolTip(wx.ToolTip(tip))
		self.GetControl(self.idlnmulticheque12).Show(bool)
		self.GetControl(self.idlnmulticheque22).Show(bool)
		self.GetControl(self.idtxmultichequetotalcheque).Show(bool)
		self.GetControl(self.idtcmultichequetotalcheque).Show(bool)
		self.GetControl(self.idbtmultichequerecalcularcheque).Show(bool)
		self.GetControl(self.idtxmultichequetotalchequeletra).Show(bool)
		self.GetControl(self.idtxmultichequenumerocheque).Show(bool)
		self.GetControl(self.idtcmultichequenumerocheque).Show(bool)
		self.GetControl(self.idbtmultichequeaplicarcheque).Show(bool)
		self.GetControl(self.idbtmultichequeaplicarcheque).Enable(False)
		self.GetControl(self.idchestatusfiltro).SetSelection(estatus)
		self.GetControl(self.idbtagregarlistctrl).Enable(onoffestatus)
		if self.launch:
			self.FillListCtrl()
		
	def OnRecalcularTotalCheque(self, event):
		self.RecalcularTotalCheque()
		Mensajes().Info(self, u"Rec�lculo finalizado.", u"Aviso")
		
	def RecalcularTotalCheque(self):
		wx.BeginBusyCursor()
		self.LimpiaTotalCheque()
		self.CalculaTotalCheque()
		wx.EndBusyCursor()
		
	def LimpiaTotalCheque(self):
		self.GetControl(self.idtcmultichequetotalcheque).SetValue("")
		self.GetControl(self.idtcmultichequetotalcheque).SetBackgroundColour(wx.Colour(255,255,255))
		self.GetControl(self.idtcmultichequetotalcheque).SetForegroundColour(wx.Colour(0,0,0))
		self.GetControl(self.idtxmultichequetotalchequeletra).SetLabel("")
		self.GetControl(self.idtxmultichequetotalchequeletra).SetBackgroundColour(wx.Colour(255,255,255))
		self.GetControl(self.idtxmultichequetotalchequeletra).SetForegroundColour(wx.Colour(0,0,0))
		
	def CalculaTotalCheque(self):
		self.cantidadtotalcheque = 0 
		if len(self.selecteditems) > 0:
			if len(self.selecteditems) > 1:
				self.selecteditems.sort()
				movimientos = tuple(self.selecteditems)
				where = "in"
			else:
				movimientos = self.selecteditems[0]
				where = "="
			sql = """
			select sum(cantidad) from %s where idcheque %s %s
			""" % (self.dbtable, where, movimientos)
			cu = r_cn.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			cu.close()
			self.cantidadtotalcheque = float(row[0])
		if self.GetControl(self.idtgfondeo).GetValue() and self.GetControl(self.idckfondeo).IsChecked():
			if len(self.selecteditems) > 0:
				self.concicilarnumerochequesolicitud = 0
				sql = """
				select numerochequeorigen from %s where idcheque %s %s
				""" % (self.dbtable, where, movimientos)
				cu = r_cn.cursor()
				cu.execute(str(sql))
				if where == "in":
					rows = fetchall(cu)
					first = True
					for row in rows:
						if first:
							self.concicilarnumerochequesolicitud = str(row[0])
							first = False
						else:
							if self.concicilarnumerochequesolicitud != str(row[0]):
								pass
								#self.concicilarnumerochequesolicitud = 0
								#Mensajes().Info(self, u"� Inconsistencia en la conciliaci�n !\n\n" \
												#u"Por favor revise los n�meros de cheque de las solicitudes elegidas.", \
												#u"Atenci�n")
								#break
				else:
					row = fetchone(cu)
					self.concicilarnumerochequesolicitud = str(row[0])
				cu.close()
			self.ComparaCantidadesAConciliar()
		else:
			control = self.GetControl(self.idtcmultichequetotalcheque)
			control.SetBackgroundColour(wx.Colour(153,255,153))
			amount = amount_and_cents_with_commas(self.cantidadtotalcheque)
			control.SetValue(str(amount).rjust(20))
			control = self.GetControl(self.idtxmultichequetotalchequeletra)
			control.SetBackgroundColour(wx.Colour(153,255,153))
			control.SetLabel(str(c2p(self.cantidadtotalcheque).texto()))
		
	def OnClasificarSolicitud(self, event):
		self.colsort = event.GetColumn()
		if self.lstctrlorder[self.colsort][1] == "desc":
			self.lstctrlsort = "%s asc" % self.lstctrlorder[self.colsort][0]
			self.lstctrlorder[self.colsort] = (self.lstctrlorder[self.colsort][0], "asc", "< ")
		else:
			self.lstctrlsort = "%s desc" % self.lstctrlorder[self.colsort][0]
			self.lstctrlorder[self.colsort] = (self.lstctrlorder[self.colsort][0], "desc", "> ")
		if self.colprev != self.colsort:
			self.lstctrlorder[self.colprev] = (self.lstctrlorder[self.colprev][0], self.lstctrlorder[self.colprev][1], "")
		self.FillListCtrl()
		self.colprev = self.colsort
		event.Skip()
			
	def OnCheckBoxFondeo(self, event):
		if self.GetControl(self.idckfondeo).IsChecked():
			self.ckfondeo = True
			self.GetControl(self.idtgfondeo).SetLabel("Conciliar")
			self.GetControl(self.idtgfondeo).SetToolTip(wx.ToolTip(u"Conciliaci�n de Bancos vs. Cheques"))
			self.GetControl(self.idckfondeo).SetToolTip(wx.ToolTip(u"Fondeo; Afectar Partidas"))
		else:
			self.ckfondeo = False
			self.GetControl(self.idtgfondeo).SetLabel("Fondeo")
			self.GetControl(self.idtgfondeo).SetToolTip(wx.ToolTip(u"Fondeo y Proyecci�n"))
			self.GetControl(self.idckfondeo).SetToolTip(wx.ToolTip(u"Conciliar; Conciliaci�n de Bancos vs. Cheques"))
			
	def OnFondeo(self, event):
		control = self.GetControl(self.idchestatusfiltro)
		if self.GetControl(self.idtgfondeo).GetValue():
			tit = self.GetControl(self.idtgfondeo).GetLabel()
			titulo = "Origen para %s" % tit
			if self.ElegirEmpresa(titulo):
				if self.ElegirBanco(titulo):
					self.HabilitaDeshabilitaEmpresaFiltro(False)
					control.Clear()
					if self.ckfondeo:
						control.Append("Fondeado", 0)
						self.DespliegueConciliacion()
					else:
						control.Append("<Todo>", 0); control.Append("Elaborado", 1)
						control.Append("Retenido", 2); control.Append(u"Proyecci�n", 3)
						if wx.Platform == '__WXMSW__':
							self.GetControl(self.idlc).SetSize(wx.Size(-1, 385))
						else:
							self.GetControl(self.idlc).SetSize(wx.Size(-1, 383))
					self.GetControl(self.idtgmulticheque).Enable(False)
					self.GetControl(self.idckfondeo).Enable(False)
					self.ToggleFondeoSolicitud("Solicitudes", "Regresar a Solicitud de Cheques", True, 0, False)
					if self.ckfondeo:
						titulo = u"CONCILIACION DE BANCOS VS. CHEQUES DE %s  -  BANCO Y CUENTA %s" \
						   % (self.razonsocialorigen, self.bancoctaorigen)
					else:
						titulo = u"FONDEO Y PROYECCION DE %s  -  BANCO Y CUENTA %s" \
						   % (self.razonsocialorigen, self.bancoctaorigen)
					self.SetTitle(titulo)
					if self.ckfondeo:
						self.FillListCtrlCargos()
					else:
						self.RecalculaSaldos()
				else:
					self.GetControl(self.idtgfondeo).SetValue(False)
			else:
				self.GetControl(self.idtgfondeo).SetValue(False)
		else:
			self.HabilitaDeshabilitaEmpresaFiltro(True)
			self.DespliegueConciliacion(False)
			control.Clear()
			control.Append("<Todo>", 0); control.Append("Solicitud", 1); control.Append("Revisado", 2)
			control.Append("Autorizado", 3); control.Append("Elaborado", 4); control.Append("Fondeado", 5)
			control.Append("Cobrado", 6); control.Append("Retenido", 7); control.Append("Cancelado", 8)
			self.origenempresaid, self.origenidbanco = 0, 0
			if self.ckfondeo:
				self.ToggleFondeoSolicitud("Conciliar", "Conciliaci�n de Bancos vs. Cheques", False, 1, True)
			else:
				self.ToggleFondeoSolicitud("Fondeo", "Fondeo y Proyecci�n", False, 1, True)
			self.GetControl(self.idtgmulticheque).Enable(True)
			self.GetControl(self.idckfondeo).Enable(True)
			if self.ckfondeo:
				self.GetControl(self.idlccargos).Show(False)
				self.GetControl(self.idlc).Move(wx.Point(5, 97))
			if wx.Platform == '__WXMSW__':
				self.GetControl(self.idlc).SetSize(wx.Size(880, 447))
			else:
				self.GetControl(self.idlc).SetSize(wx.Size(952, 443))
			self.SetTitle("Solicitud de Cheques")
			
	def DespliegueConciliacion(self, conciliacion = True):
		if conciliacion:
			self.cantidadtotalcargo, self.cantidadtotalcheque = 0, 0
			amount = amount_and_cents_with_commas(self.cantidadtotalcargo)
			self.GetControl(self.idtcconciliarmovimientosbanco).SetValue(str(amount).rjust(20))
			amount = amount_and_cents_with_commas(self.cantidadtotalcheque)
			self.GetControl(self.idtcconciliarsolicitudescheques).SetValue(str(amount).rjust(20))
			self.GetControl(self.idtxtotalvista).Show(False)
			self.GetControl(self.idtctotalvista).Show(False)
			if wx.Platform == '__WXMSW__':
				self.GetControl(self.idlc).SetSize(wx.Size(434, 407))
			else:
				self.GetControl(self.idlc).SetSize(wx.Size(520, 407))
			self.GetControl(self.idlc).Move(wx.Point(439, 119))
			self.GetControl(self.idlccargos).SetSize(wx.Size(434, 407))
			self.GetControl(self.idlccargos).Move(wx.Point(5, 119))
			self.GetControl(self.idlccargos).Show(True)
			self.GetControl(self.idlnmulticheque12).Show(True)
			self.GetControl(self.idlnmulticheque22).Show(True)
			self.GetControl(self.idtxconciliarmovimientosbanco).Move(wx.Point(10, 102))
			self.GetControl(self.idtxconciliarsolicitudescheques).Move(wx.Point(443, 102))
			self.GetControl(self.idtxconciliarmovimientosbanco).Show(True)
			self.GetControl(self.idtxconciliarsolicitudescheques).Show(True)
			self.GetControl(self.idtcconciliarmovimientosbanco).Move(wx.Point(-1, 540))
			self.GetControl(self.idbtconciliarbancoscheques).Move(wx.Point(-1, 540))
			self.GetControl(self.idtcconciliarsolicitudescheques).Move(wx.Point(-1, 540))
			self.GetControl(self.idtcconciliarmovimientosbanco).SetBackgroundColour(wx.Colour(153,255,153))
			self.GetControl(self.idtcconciliarsolicitudescheques).SetBackgroundColour(wx.Colour(153,255,153))
			self.GetControl(self.idtcconciliarmovimientosbanco).Show(True)
			self.GetControl(self.idbtconciliarbancoscheques).Show(True)
			self.GetControl(self.idtcconciliarsolicitudescheques).Show(True)
		else:
			self.GetControl(self.idtcconciliarmovimientosbanco).Show(False)
			self.GetControl(self.idbtconciliarbancoscheques).Show(False)
			self.GetControl(self.idtcconciliarsolicitudescheques).Show(False)
			self.GetControl(self.idtxconciliarsolicitudescheques).Show(False)
			self.GetControl(self.idtxconciliarmovimientosbanco).Show(False)
			self.GetControl(self.idlnmulticheque22).Show(False)
			self.GetControl(self.idlnmulticheque12).Show(False)
			self.GetControl(self.idlccargos).Show(False)
			self.GetControl(self.idlc).Move(wx.Point(5, 97))
			if wx.Platform == '__WXMSW__':
				self.GetControl(self.idlc).SetSize(wx.Size(880, 447))
			else:
				self.GetControl(self.idlc).SetSize(wx.Size(952, 443))
			self.GetControl(self.idtxtotalvista).Show(True)
			self.GetControl(self.idtctotalvista).Show(True)
			
	def ToggleFondeoSolicitud(self, label, tip, bool, estatus, onoffestatus):
		self.GetControl(self.idtgfondeo).SetLabel(label)
		self.GetControl(self.idtgfondeo).SetToolTip(wx.ToolTip(tip))
		if not self.ckfondeo:
			self.GetControl(self.idtxsaldobanco).Show(bool)
			self.GetControl(self.idtcsaldobanco).Show(bool)
			self.GetControl(self.idtxsaldobancoletra).Show(bool)
			self.GetControl(self.idlnsaldobanco).Show(bool)
			self.GetControl(self.idtxsaldoinicialdisponible).Show(bool)
			self.GetControl(self.idtcsaldoinicialdisponible).Show(bool)
			self.GetControl(self.idtxcantidadfondear).Show(bool)
			self.GetControl(self.idtccantidadfondear).Show(bool)
			self.GetControl(self.idtxsaldofinaldisponible).Show(bool)
			self.GetControl(self.idtcsaldofinaldisponible).Show(bool)
			self.GetControl(self.idtxsaldoinicialtransito).Show(bool)
			self.GetControl(self.idtcsaldoinicialtransito).Show(bool)
			self.GetControl(self.idtxsaldofinaltransito).Show(bool)
			self.GetControl(self.idtcsaldofinaltransito).Show(bool)
			self.GetControl(self.idbtfirmanteslistctrl).Show(bool)
			self.GetControl(self.idbtrecalcularlistctrl).Show(bool)
			self.GetControl(self.idbtfondearlistctrl).Show(bool)
		self.GetControl(self.idchestatusfiltro).SetSelection(estatus)
		self.GetControl(self.idbtagregarlistctrl).Enable(onoffestatus)
		self.FillListCtrl()
		
	def OnConciliarBancosCheques(self, event):
		if len(self.selecteditems) > 0 and self.selecteditemcargos:
			if Mensajes().YesNo(self, u"Movimiento(Cargo) del banco: %s\nSolicitud(es): %s\n\n" \
								u"� Desea realmente hacer la conciliaci�n ?" \
								% (self.selecteditemcargos, self.selecteditems), u"Confirmaci�n"):
				selecteditems = self.selecteditems
				if len(self.selecteditems) > 1:
					first = True
					for idcheque in self.selecteditems:
						sql = """
						update gixegresoscheques set idreferenciamovto = %s, estatus = '%s'	where idcheque = %s
						""" % (self.selecteditemcargos, "B", idcheque)
						queTal = self.QueryUpdateRecord(sql)
						if queTal:
							if first:
								first = False
								idchequelst = str(idcheque)
							else:
								idchequelst += "," + str(idcheque)
				else:
					sql = """
					update gixegresoscheques set idreferenciamovto = %s, estatus = '%s'	where idcheque = %s
					""" % (self.selecteditemcargos, "B", self.selecteditems[0])
					queTal = self.QueryUpdateRecord(sql)
					if queTal:
						idchequelst = str(self.selecteditems[0])
					
				sql = """
				update gixbancosmovimientos set clasificado = '%s', idcheque = '%s'
				where idreferenciamovto = %s
				""" % ("S", idchequelst, self.selecteditemcargos)
				queTal = self.QueryUpdateRecord(sql)
				if len(selecteditems) > 1:
					sql = """
					select convert(varchar(10), b.fechamovto, 111), convert(varchar(100), e.BlogGUID)
					from gixegresoscheques e
					join gixbancosmovimientos b on e.idreferenciamovto = b.idreferenciamovto
					where e.idcheque in (%s)
					""" % (",".join(map(str, selecteditems)),)
					cu = r_cn.cursor()
					cu.execute(str(sql))
					rows = fetchall(cu)
					cu.close()
					if rows:
						for row in  rows:
							sql = """
							insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText,
							ContenidoBinario, Extension, Estatus)
							values ('%s', '%s', '%s', '%s', '%s', '%s', '%s')
							""" % (str(row[1]), str(row[0]), self.usuario, "Cobrado", "", "", "B")
							if not self.QueryUpdateRecord(sql):
								Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
				else:
					sql = """
					select convert(varchar(10), b.fechamovto, 111), convert(varchar(100), e.BlogGUID)
					from gixegresoscheques e
					join gixbancosmovimientos b on e.idreferenciamovto = b.idreferenciamovto
					where e.idcheque = %s
					""" % (selecteditems[0])
					cu = r_cn.cursor()
					cu.execute(str(sql))
					row = fetchone(cu)
					cu.close()
					if row is not None:
						sql = """
						insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText,
						ContenidoBinario, Extension, Estatus)
						values ('%s', '%s', '%s', '%s', '%s', '%s', '%s')
						""" % (str(row[1]), str(row[0]), self.usuario, "Cobrado", "", "", "B")
						if not self.QueryUpdateRecord(sql):
							Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
				
				self.GetControl(self.idlccargos).DeleteItem(self.currentitemcargos)
				if len(self.currentitemlst) > 1:
					self.FillListCtrl()
					self.currentitemlst = []
					#for item in self.currentitemlst:
						#self.GetControl(self.idlc).DeleteItem(item)
				else:
					self.GetControl(self.idlc).DeleteItem(self.currentitemlst[0])
					
				self.cantidadtotalcargo, self.cantidadtotalcheque = 0, 0
				amount = amount_and_cents_with_commas(self.cantidadtotalcargo)
				self.GetControl(self.idtcconciliarmovimientosbanco).SetValue(str(amount).rjust(20))
				amount = amount_and_cents_with_commas(self.cantidadtotalcheque)
				self.GetControl(self.idtcconciliarsolicitudescheques).SetValue(str(amount).rjust(20))
		
	def FillListCtrlCargos(self, display = 'first', printexcel = False):
		lctrl = self.GetControl(self.idlccargos)
		#lctrl.Enable(False)
		#lctrl.Show(False)
		lctrl.ClearAll()
		sql = """
		select idreferenciamovto, convert(varchar(10), fechamovto, 103), cantidad, referencia,
		convert(varchar(10), fechamovto, 111) as fecha from gixbancosmovimientos
		where empresaid = %s and idbanco = %s and tipomovto = 'C' and clasificado = 'N' and eliminado = 'N'
		order by fecha desc, idreferenciamovto desc
		""" % (int(self.origenempresaid), int(self.origenidbanco))
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		fila = 0
		if rows:
			wx.BeginBusyCursor()
			lctrl.InsertColumn(0, "Id", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, "Fecha", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(2, "Cantidad", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(3, "Referencia / Cheque", wx.LIST_FORMAT_CENTER)
			for row in rows:
				if fila %2 != 0: bgcolor = [204,204,255]
				else:            bgcolor = [230,230,255]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, row[1])
				lctrl.SetStringItem(index, 2, str(amount_and_cents_with_commas(row[2])))
				lctrl.SetStringItem(index, 3, row[3])
				lctrl.SetItemData(index, row[0])
				#if int(row[0]) == self.idrefmovto:
					#self.ctrlindex = index
				fila += 1
				
			lctrl.SetColumnWidth(0, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(2, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(3, wx.LIST_AUTOSIZE)
			wx.EndBusyCursor()
			if display == 'first':
				self.GetLFRecord("min")
			elif display == 'last':
				self.GetLFRecord("max")
		else:
			lctrl.InsertColumn(0, "       Cuenta sin Movimientos", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 167)
			
		self.selecteditemcargos = 0
		#lctrl.Show(True)
		#lctrl.Enable(True)
		
	def ComparaCantidadesAConciliar(self):
		if self.cantidadtotalcargo and self.cantidadtotalcheque:
			if self.cantidadtotalcargo == self.cantidadtotalcheque:
				self.GetControl(self.idbtconciliarbancoscheques).Enable(True)
			else:
				self.GetControl(self.idbtconciliarbancoscheques).Enable(False)
		else:
			self.GetControl(self.idbtconciliarbancoscheques).Enable(False)

	def CalculaTotalCargo(self):
		self.cantidadtotalcargo, self.conciliarreferenciacargo = 0, 0
		if self.selecteditemcargos > 0:
			sql = """
			select cantidad, referencia from gixbancosmovimientos
			where idreferenciamovto = %s
			""" % self.selecteditemcargos
			cu = r_cn.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			cu.close()
			self.cantidadtotalcargo = float(row[0])
			self.conciliarreferenciacargo = str(row[1])
		amount = amount_and_cents_with_commas(self.cantidadtotalcargo)
		self.GetControl(self.idtcconciliarmovimientosbanco).SetValue(str(amount).rjust(20))
		self.ComparaCantidadesAConciliar()
		
	def OnItemDeselectedCargos(self, event):
		self.selecteditemcargos = 0
		self.CalculaTotalCargo()
		event.Skip()
		
	def OnLCtrlCargos(self, event):
		lctrl = self.GetControl(self.idlccargos)
		self.currentitemcargos = event.m_itemIndex
		datointerno = lctrl.GetItem(self.currentitemcargos, 0).GetText()
		self.selecteditemcargos = int(datointerno)
		self.CalculaTotalCargo()
		event.Skip()

	def ElegirEmpresa(self, titulo = "Origen para Fondeo"):
		self.inxempresa = []
		self.choempresa = []
		query = """
		select EmpresaID, Razonsocial + '_                              '
		from cont_Empresas where activarecfin = 'S' order by RazonSocial
		"""
		cu = r_cn.cursor()
		cu.execute(query)
		rows = fetchall(cu)
		cu.close()
		for row in rows:
			self.inxempresa.append(row[0])
			self.choempresa.append(self.GetStringFromField(row[1]))
		self.index = wx.GetSingleChoiceIndex(u"Opciones",  u"Elegir Empresa %s" % titulo,
											 self.choempresa, parent = None)
		if int(self.index) > -1:
			self.razonsocialorigen, trash = self.choempresa[self.index].split("_          ")
			self.origenempresaid = self.inxempresa[self.index]
			return True
		return False
	
	def ElegirBanco(self, titulo = "Origen para Fondeo"):
		self.inxbanco = []
		self.chobanco = []
		query = """
		select idbanco, nombre + '_                                                            '
		from gixbancos where empresaid = %s order by nombre
		""" % self.origenempresaid
		cu = r_cn.cursor()
		cu.execute(query)
		rows = fetchall(cu)
		cu.close()
		for row in rows:
			self.inxbanco.append(row[0])
			self.chobanco.append(self.GetStringFromField(row[1]))
		self.index = wx.GetSingleChoiceIndex(u"Opciones",  u"Elegir Banco y Cuenta %s" % titulo,
											 self.chobanco, parent = None)
		if int(self.index) > -1:
			self.bancoctaorigen, trash = self.chobanco[self.index].split("_          ")
			self.origenidbanco = self.inxbanco[self.index]
			return True
		return False
	
	def OnClonarSolicitud(self, event):
		if str(self.currentitem).isdigit():
			if self.GetCloneRecord(record = self.datointerno):
				dlg = wx.TextEntryDialog(self, u"� Cuantas clonaciones desea ?",
				                         u"Clonaci�n de la Solicitud %s" % self.datointerno)
				dlg.SetValue("1")
				if dlg.ShowModal() == wx.ID_OK:
					clonaciones = dlg.GetValue()
					dlg.Destroy()
					if str(clonaciones).isdigit():
						clonaciones = int(clonaciones)
						if clonaciones:
							if clonaciones > 1:
								veces = u"veces"; tit = u"Clonaciones"; tit2 = "finalizadas"
							else:
								veces = u"vez";	tit = u"Clonaci�n"; tit2 = "finalizada"
								
							dlg = wx.TextEntryDialog(self, u"Motivo de la clonaci�n",
							                         u"Clonaci�n de la Solicitud %s" % self.datointerno)
							if dlg.ShowModal() == wx.ID_OK:
								motivo = dlg.GetValue()
								dlg.Destroy()
								if motivo:
									if Mensajes().YesNo(self, u"%s\n\n"
									                    u"� Desea realmente clonar %s %s la solicitud %s ?"
									                    % (motivo, clonaciones, veces, self.datointerno),
									                    u"Confirmaci�n"):
										wx.BeginBusyCursor()
										self.ClonarSolicitud(clonaciones, motivo)
										sql = """
										insert into Blogs 
										(BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension)
										values ('%s', getdate(), '%s', '%s', '%s', '%s')
										""" % (self.BlogGUIDC, self.usuario, u"%s %s de la Solicitud de Cheque - %s"
											   % (clonaciones, tit, motivo), "", "")
										if not self.QueryUpdateRecord(sql):
											Mensajes().Info(self, u"Problemas al actualizar el blog.\n\n%s"
											                % sql, u"Atenci�n")
										wx.EndBusyCursor()
										self.FillListCtrl()
										Mensajes().Info(self, u"� %s %s %s de la solicitud %s !"
										                % (clonaciones, tit, tit2, self.datointerno), u"Aviso")
							else:
								dlg.Destroy()
				else:
					dlg.Destroy()
				
	def ClonarSolicitud(self, clonaciones, motivo):
		concepto = self.conceptoC
		if self.devolucionC == "S":
			Mensajes().Info(self, u"La solicitud a clonar es una devoluci�n de saldo a favor,\n"
			                u"por lo tanto, una vez terminada la clonaci�n elija el documento\n"
			                u"que corresponde a la devoluci�n.", "Atenci�n")
			concepto = "DOCUMENTO POR ELEGIR"
			
		sqlFields = """ 
		fechacaptura, tipoprogramacion, fechaprogramada, empresaid, idbeneficiario, devolucion, concepto, cantidad,
		anexo, anexoadicional, especificaciones, idbancoorigen, numerochequeorigen, bancodestino,
		sucursaldestino, plazadestino, clavebancariadestino, observaciones, estatus, usuariosolicitante,
		idfondeo, cantidadcheque
		"""
		sqlValues = "getdate(), '%s', '%s', %s, %s, '%s', '%s', %s, '%s', '%s', '%s'," \
				  "%s, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', %s, %s" % \
				  (self.tipoprogramacionC, self.fechaprogramadaC, self.empresaidC, self.idbeneficiarioC, self.devolucionC,
				   concepto, float(self.cantidadpartidasC), self.anexoC, self.anexoadicionalC, self.especificacionesC,
				   -1, "", self.bancodestinoC, self.sucursaldestinoC, self.plazadestinoC, self.clavebancariadestinoC,
				   self.observacionesC, "S", self.usuario, 0, 0)
		sql = """
		insert into %s (%s) values (%s)
		""" % (self.dbtable, sqlFields, sqlValues)
		sqlmax = "select max(idcheque) from gixegresoscheques"
		for loop in range(0, clonaciones):
			queTal, identity = self.QueryUpdateRecord(sql, sqlmax, True)
			if queTal:
				if identity is None:
					Mensajes().Info(self, u"Problemas al buscar nueva solicitud clonada.\n\n%s" % sqlmax, u"Atenci�n")
				else:
					sqly = "select convert(varchar(100), BlogGUID) from %s where idcheque = %s" % (self.dbtable, identity)
					cursor = r_cn.cursor()
					cursor.execute(str(sqly))
					row = fetchone(cursor)
					cursor.close()
					if row is None:
						Mensajes().Info(self, u"Problemas al buscar blog de solicitud clonada.\n\n%s" % sqly, u"Atenci�n")
					else:
						BlogGUID = row[0]
						sqlb = """
						insert into Blogs 
						(BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension, Estatus)
						values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
						""" % (BlogGUID, self.usuario, "Solicitud de Cheque Clonada - Procedencia Solicitud %s - %s"
							   % (self.datointerno, motivo), "", "", "S")
						queTal, trash = self.QueryUpdateRecord(sqlb)
						if not queTal:
							Mensajes().Info(self, u"Problemas al actualizar el blog.\n\n%s" % sqlb, u"Atenci�n")
							
					self.ClonarPartidas(identity)
					
	def Clon(self, valor):
		if valor > 1000000:
			return -1
		
		return int(valor)
		
	def ClonarPartidas(self, identity):
		sql = """
		select centrocostoid, partida, subpartida1, subpartida2, subpartida3, subpartida4, subpartida5, cantidad
		from gixegresoschequespartidas where idcheque = %s
		""" % self.datointerno
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		rows = fetchall(cursor)
		cursor.close()
		if rows:
			for row in rows:
				sql = """
				insert into gixegresoschequespartidas
				(idcheque, centrocostoid, partida, subpartida1, subpartida2, subpartida3, subpartida4, subpartida5, cantidad)
				values (%s, %s, %s, %s, %s, %s, %s, %s, %s)
				""" % (identity, self.Clon(row[0]), self.Clon(row[1]), self.Clon(row[2]), self.Clon(row[3]),
				       self.Clon(row[4]), self.Clon(row[5]), self.Clon(row[6]), float(row[7]))
				if not self.QueryUpdateRecord(sql):
					Mensajes().Info(self, u"Problemas al actualizar las partidas.\n\n%s" % sql, u"Atenci�n")
				
	def OnImprimirSolicitud(self, event):
		if str(self.currentitem).isdigit():
			wx.BeginBusyCursor()
			self.GetRecord(record = self.datointerno)
			gridcontenthtml, pisaflag = self.GetHtmlFromGrid()
			if not pisaflag:
				gridheaderhtml,	gridfooterhtml = "", ""
				printobj = GixGridHtmlPrinting(grid = "", titulo = u"Solicitud de Cheque. ")
				printobj.PreviewText(gridcontenthtml, gridheaderhtml, gridfooterhtml)
			else:
				archivo = self.GetPdfFileName("solicitud")
				gridcontenthtml = gridcontenthtml.encode("utf-8")
				pdf = pisa.CreatePDF(cStringIO.StringIO(gridcontenthtml), file(archivo, "wb"))
				if not pdf.err:
					try:
						pdf.dest.close()
					except:
						warnings.warn("<<pdf.dest.close() no se pudo.>>")
					try:
						os.startfile(str(archivo))
					except:
						#os.system("open %s" % archivo)
						commmand_line = "open %s" % archivo
						p = subprocess.Popen(commmand_line, shell = True)
						pid, sts = os.waitpid(p.pid, 0)						
						
			sql = """
			insert into Blogs 
			(BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension)
			values ('%s', getdate(), '%s', '%s', '%s', '%s')
			""" % (self.BlogGUID, self.usuario, u"Impresi�n de la Solicitud de Cheque", "", "")
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"Problemas al actualizar el blog.\n\n%s" % sql, u"Atenci�n")
			wx.EndBusyCursor()
	
	def GetHtmlFromGrid(self, html = ""):
		if self.devolucionsaldo:
			titulo = "SOLICITUD DE CHEQUE PARA DEVOLUCION DE SALDO A FAVOR"
		else:
			titulo = "SOLICITUD DE CHEQUE"
		meses = ("", "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto",
				 "Septiembre", "Octubre", "Noviembre", "Diciembre")
		dia, mes, ano = self.fechacaptura.split("/")
		fechasolicitud = "%s %s, %s" % (meses[int(mes)], dia, ano)
		dia, mes, ano = self.fechaprogramada.split("/")
		fechaprogramada = "%s %s, %s" % (meses[int(mes)], dia, ano)
		totalchequeq = str(amount_and_cents_with_commas(self.cantidadpartidas))
		totalchequel = (str(c2p(self.cantidadpartidas).texto()))
		beneficiario = self.ObtenerBeneficiario()
		empresa = self.ObtenerEmpresa()
		concepto = self.concepto
		observaciones = self.observaciones
		usuario, area, jefeinmediato, puestoinmediato = self.ObtenerUsuarioAreaImpresion()
		destino = ""
		if self.bancodestino:
			destino = self.bancodestino
			if self.sucursaldestino:
				destino += " SUCURSAL %s" % self.sucursaldestino
			if self.plazadestino:
				destino += " PLAZA %s" % self.plazadestino
			if self.clavebancariadestino:
				destino += " CLAVE/CUENTA %s" % self.clavebancariadestino
		head = """
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:py="http://genshi.edgewall.org/">
	        <head>
			    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
			      </head>
			        <body>
		"""
		pisaflag = False
		try:
			pisa
			pisaflag = True
		except:
			pass
		
		css = ""
		dac = True
		if not pisaflag:
			warnings.warn("<<Entro en: if not pisaflag>>")
			html = '<table width="570" align="center">' \
				'<tr><td align="center"><font face="futura hv bt" size=5><b>%s</b></font>' \
				'<br/><br/><br/></td></tr></table>' \
				'<table width="570" align="right">' \
				'<tr><td align="right"><font face="futura hv bt" size=3><b>FECHA PROGRAMADA: %s</b></font>' \
				'<br/><br/></td></tr></table>' \
				'<table width="570">' \
				'<tr><td><font face="futura hv bt" size=1><b>POR:</b></font>' \
				'<font face="futura hv bt" size=2> $%s</font></td></tr>' \
				'<tr><td><font face="futura hv bt" size=2>(%s)</font><br/><br/></td></tr>' \
				'<tr><td><font face="futura hv bt" size=1><b>A FAVOR DE:</b></font></td></tr>' \
				'<tr><td><font face="futura hv bt" size=2>%s</font><br/><br/></td></tr>' \
				'<tr><td><font face="futura hv bt" size=1><b>CONCEPTO:</b></font></td></tr>' \
				'<tr><td><font face="futura hv bt" size=2>%s</font><br/><br/></td></tr>' \
				'<tr><td><font face="futura hv bt" size=1><b>DESTINO:</b></font></td></tr>' \
				'<tr><td><font face="futura hv bt" size=2>%s</font><br/><br/></td></tr>' \
				'<tr><td><font face="futura hv bt" size=1><b>EMPRESA:</b></font></td></tr>' \
				'<tr><td><font face="futura hv bt" size=2>%s</font><br/><br/></td></tr>' \
				'<tr><td><font face="futura hv bt" size=1><b>OBSERVACIONES:</b></font></td></tr>' \
				'<tr><td><font face="futura hv bt" size=2>%s</font><br/><br/><br/><br/></td></tr></table>' \
				'<table width="570">' \
				'<tr><td align="right"><font face="futura hv bt" size=2><u>%s - %s</u></font></td></tr>' \
				'<tr><td align="right"><font face="futura hv bt" size=1><b>FIRMA DEL SOLICITANTE</b></font>' \
				'</td></tr></table><br/><br/><br/><br/><br/><br/><br/><br/><br/>' \
				'<table width="570 align="center""><tr>' \
				'<td align="center"><font face="futura hv bt" size=1>CESAR MILANES CHAVEZ</font></td>' \
				'<td align="center"><font face="futura hv bt" size=1>ADRIANA RAMOS VALENCIANO</font></td>' \
				'<td align="center"><font face="futura hv bt" size=1>%s</font></td>' \
				'</tr><tr>' \
				'<td align="center"><font face="futura hv bt" size=1><b>________________________________________</b></font></td>' \
				'<td align="center"><font face="futura hv bt" size=1><b>________________________________________</b></font></td>' \
				'<td align="center"><font face="futura hv bt" size=1><b>________________________________________</b></font></td>' \
				'</tr><tr>' \
				'<td align="center"><font face="futura hv bt" size=1><b>SUBDIRECTOR ADMINISTRATIVO</b></font></td>' \
				'<td align="center"><font face="futura hv bt" size=1><b>RECURSOS FINANCIEROS</b></font></td>' \
				'<td align="center"><font face="futura hv bt" size=1><b>%s</b></font></td>' \
				'</tr><tr>' \
				'<td align="center"><font face="futura hv bt" size=1>AUTORIZACION</font></td>' \
				'<td align="center"><font face="futura hv bt" size=1>AUTORIZACION</font></td>' \
				'<td align="center"><font face="futura hv bt" size=1>AUTORIZACION - Jefe de Area</font></td>' \
				'</tr></table><br/><br/><br/><br/><br/><br/><br/><br/>' \
				'<table width="570 align="center""><tr>' \
				'<td align="center"><font face="futura hv bt" size=1><b>______________________________</b></font></td>' \
				'<td align="center"><font face="futura hv bt" size=1><b>______________________________</b></font></td>' \
				'</tr><tr>' \
				'<td align="center"><font face="futura hv bt" size=1><b>EXTEMPORANEO</b></font></td>' \
				'<td align="center"><font face="futura hv bt" size=1><b>GASTO</b></font></td>' \
				'</tr><tr>' \
				'<td align="center"><font face="futura hv bt" size=1>AUTORIZACION DIRECTIVO</font></td>' \
				'<td align="center"><font face="futura hv bt" size=1>AUTORIZACION DIRECTIVO</font></td>' \
				'</tr></table><br/><br/><br/><br/>' \
				'<table width="570" align="left"><tr>' \
				'<td align="left"><font face="futura hv bt" size=2><b>FECHA DE LA SOLICITUD: %s</b></font><br/><br/></td></tr>' \
				'<tr><td align="left"><font face="futura hv bt" size=1><b>INSTRUCCIONES:</b></font></td>' \
				'</tr></table>' \
				% (titulo, fechaprogramada, totalchequeq, totalchequel, beneficiario.decode("iso8859-1"),
				   concepto.decode("iso8859-1"), destino.decode("iso8859-1"), empresa.decode("iso8859-1"),
				   observaciones.decode("iso8859-1"), usuario.decode("iso8859-1"), area.decode("iso8859-1"),
				   jefeinmediato.decode("iso8859-1"), puestoinmediato.decode("iso8859-1"), fechasolicitud)
		else:
			warnings.warn("<<Entro en: else de if not pisaflag>>")
			html = '<table><tr><td><br/><br/></td></tr></table>' \
				'<table width="570" align="center">' \
				'<tr><td align="center"><span style="font-size: 16pt; font-weight: bold;"><br/>' \
				'%s</span><br/><br/><br/></td></tr></table>' \
				'<table width="570" align="right">' \
				'<tr><td align="right"><span style="font-size: 11pt"><b>FECHA PROGRAMADA: %s</b></span>' \
				'<br/><br/></td></tr></table>' \
				'<table width="570">' \
				'<tr><td><b>POR:</b>' \
				'<span style="font-size: 9pt"> $%s</span></td></tr>' \
				'<tr><td><span style="font-size: 9pt">(%s)</span><br/><br/></td></tr>' \
				'<tr><td><b>A FAVOR DE:</b></td></tr>' \
				'<tr><td><span style="font-size: 9pt">%s</span><br/><br/></td></tr>' \
				'<tr><td><b>CONCEPTO:</b></td></tr>' \
				'<tr><td><span style="font-size: 9pt">%s</span><br/><br/></td></tr>' \
				'<tr><td><b>DESTINO:</b></td></tr>' \
				'<tr><td><span style="font-size: 9pt">%s</span><br/><br/></td></tr>' \
				'<tr><td><b>EMPRESA:</b></td></tr>' \
				'<tr><td><span style="font-size: 9pt">%s</span><br/><br/></td></tr>' \
				'<tr><td><b>OBSERVACIONES:</b></td></tr>' \
				'<tr><td><span style="font-size: 9pt">%s</span><br/><br/><br/><br/></td></tr></table>' \
				'<table width="570">' \
				'<tr><td align="right"><span style="font-size: 9pt"><u>%s - %s</u></span></td></tr>' \
				'<tr><td align="right"><b>FIRMA DEL SOLICITANTE</b>' \
				'<br/><br/><br/><br/><br/><br/><br/><br/><br/></td></tr></table>' \
				'<table width="570" align="center""><tr>' \
				'<td align="center"><font face="futura hv bt" size=1>CESAR MILANES CHAVEZ</font></td>' \
				'<td align="center"><font face="futura hv bt" size=1>ADRIANA RAMOS VALENCIANO</font></td>' \
				'<td align="center"><font face="futura hv bt" size=1>%s</font></td>' \
				'</tr><tr>' \
				'<td align="center"><font face="futura hv bt" size=1><b>________________________________________</b></font></td>' \
				'<td align="center"><font face="futura hv bt" size=1><b>________________________________________</b></font></td>' \
				'<td align="center"><font face="futura hv bt" size=1><b>________________________________________</b></font></td>' \
				'</tr><tr>' \
				'<td align="center"><font face="futura hv bt" size=1><b>SUBDIRECTOR ADMINISTRATIVO</b></font></td>' \
				'<td align="center"><font face="futura hv bt" size=1><b>RECURSOS FINANCIEROS</b></font></td>' \
				'<td align="center"><font face="futura hv bt" size=1><b>%s</b></font></td>' \
				'</tr><tr>' \
				'<td align="center"><font face="futura hv bt" size=1>AUTORIZACION</font></td>' \
				'<td align="center"><font face="futura hv bt" size=1>AUTORIZACION</font></td>' \
				'<td align="center"><font face="futura hv bt" size=1>AUTORIZACION - Jefe de Area</font>' \
				'<br/><br/><br/><br/><br/><br/><br/><br/></td></tr></table>' \
				'<table width="570" align="center""><tr>' \
				'<td align="center"><font face="futura hv bt" size=1><b>________________________________________</b></font></td>' \
				'<td align="center"><font face="futura hv bt" size=1><b>________________________________________</b></font></td>' \
				'</tr><tr>' \
				'<td align="center"><font face="futura hv bt" size=1><b>EXTEMPORANEO</b></font></td>' \
				'<td align="center"><font face="futura hv bt" size=1><b>GASTO</b></font></td>' \
				'</tr><tr>' \
				'<td align="center"><font face="futura hv bt" size=1>AUTORIZACION DIRECTIVO</font></td>' \
				'<td align="center"><font face="futura hv bt" size=1>AUTORIZACION DIRECTIVO</font>' \
				'<br/><br/><br/><br/></td></tr></table>' \
				'<table width="570" align="left"><tr>' \
				'<td align="left"><span style="font-size: 9pt"><b>FECHA DE LA SOLICITUD: %s</b></span><br/><br/></td></tr>' \
				'<tr><td align="left"><font face="futura hv bt" size=1><b>INSTRUCCIONES:</b></font></td>' \
				'</tr></table>' \
				% (titulo, fechaprogramada, totalchequeq, totalchequel, beneficiario.decode("iso8859-1"),
				   concepto.decode("iso8859-1"), destino.decode("iso8859-1"), empresa.decode("iso8859-1"),
				   observaciones.decode("iso8859-1"), usuario.decode("iso8859-1"), area.decode("iso8859-1"),
				   jefeinmediato.decode("iso8859-1"), puestoinmediato.decode("iso8859-1"), fechasolicitud)
		#genshi = head + html + "</body></html>"
		if dac and pisaflag:
			css = """<style type="text/css">
			@media print {
			    @font-face {
			        font-family: FuturaHBT;
				src: url(FUTURAH.TTF);
        		    }
			}        
			html {
			      font-family: FuturaHBT;
			}
			</style>
			"""
			warnings.warn("<<Entro en: if dac and pisaflag>>")
			html =  '<table><tr><td></td></tr></table>' \
				'<table width="570" align="center">' \
				'<tr><td align="center"><span style="font-size: 16pt; font-weight: bold;"><br/>' \
				'%s</span><br/><br/><br/></td></tr></table>' \
				'<table width="570" align="right">' \
				'<tr><td align="right"><span style="font-size: 11pt"><b>FECHA PROGRAMADA: %s</b></span>' \
				'<br/></td></tr></table>' \
				'<table width="570">' \
				'<tr><td><b>POR:</b>' \
				'<span style="font-size: 9pt"> $%s</span></td></tr>' \
				'<tr><td><span style="font-size: 9pt">(%s)</span><br/><br/></td></tr>' \
				'<tr><td><b>A FAVOR DE:</b></td></tr>' \
				'<tr><td><span style="font-size: 9pt">%s</span><br/><br/></td></tr>' \
				'<tr><td><b>CONCEPTO:</b></td></tr>' \
				'<tr><td><span style="font-size: 9pt">%s</span><br/><br/></td></tr>' \
				'<tr><td><b>DESTINO:</b></td></tr>' \
				'<tr><td><span style="font-size: 9pt">%s</span><br/><br/></td></tr>' \
				'<tr><td><b>EMPRESA:</b></td></tr>' \
				'<tr><td><span style="font-size: 9pt">%s</span><br/><br/></td></tr>' \
				'<tr><td><b>OBSERVACIONES:</b></td></tr>' \
				'<tr><td><span style="font-size: 9pt">%s</span><br/><br/></td></tr></table>' \
				'<table width="570">' \
				'<tr><td align="right"><span style="font-size: 9pt"><u>%s - %s</u></span></td></tr>' \
				'<tr><td align="right"><b>FIRMA DEL SOLICITANTE</b>' \
				'<br/><br/><br/><br/><br/><br/><br/><br/><br/></td></tr></table>' \
				'<table width="570" align="center""><tr>' \
				'<td align="center"><font size=9>CESAR MILANES CHAVEZ</font></td>' \
				'<td align="center"><font size=9>ADRIANA RAMOS VALENCIANO</font></td>' \
				'<td align="center"><font size=9>%s</font></td>' \
				'</tr><tr>' \
				'<td align="center"><font size=9><b>________________________________________</b></font></td>' \
				'<td align="center"><font size=9><b>________________________________________</b></font></td>' \
				'<td align="center"><font size=9><b>________________________________________</b></font></td>' \
				'</tr><tr>' \
				'<td align="center"><font size=9><b>SUBDIRECTOR ADMINISTRATIVO</b></font></td>' \
				'<td align="center"><font size=9><b>RECURSOS FINANCIEROS</b></font></td>' \
				'<td align="center"><font size=9><b>%s</b></font></td>' \
				'</tr><tr>' \
				'<td align="center"><font size=9>AUTORIZACION</font><br/><br/><br/><br/><br/><br/><br/><br/></td>' \
				'<td align="center"><font size=9>AUTORIZACION</font><br/><br/><br/><br/><br/><br/><br/><br/></td>' \
				'<td align="center"><font size=9>AUTORIZACION - Jefe de Area</font><br/><br/><br/><br/><br/><br/><br/><br/>' \
				'</td></tr></table>' \
				'<table width="570" align="center""><tr>' \
				'<td align="center"><font  size=9><b>________________________________________</b></font></td>' \
				'<td align="center"><font  size=9><b>________________________________________</b></font></td>' \
				'</tr><tr>' \
				'<td align="center"><font size=9><b>EXTEMPORANEO</b></font></td>' \
				'<td align="center"><font size=9><b>GASTO</b></font></td>' \
				'</tr><tr>' \
				'<td align="center"><font size=9>AUTORIZACION DIRECTIVO</font><br/><br/><br/></td>' \
				'<td align="center"><font size=9>AUTORIZACION DIRECTIVO</font><br/><br/><br/>' \
				'</td></tr></table>' \
				'<table width="570" align="left"><tr>' \
				'<td align="left"><span style="font-size: 9pt"><b>FECHA DE LA SOLICITUD: %s</b></span><br/><br/></td></tr>' \
				'<tr><td align="left"><font size=9><b>INSTRUCCIONES:</b></font></td>' \
				'</tr></table>' \
				% (titulo, fechaprogramada, totalchequeq, totalchequel, beneficiario.decode("iso8859-1"),
				   concepto.decode("iso8859-1"), destino.decode("iso8859-1"), empresa.decode("iso8859-1"),
				   observaciones.decode("iso8859-1"), usuario.decode("iso8859-1"), area.decode("iso8859-1"),
				   jefeinmediato.decode("iso8859-1"), puestoinmediato.decode("iso8859-1"), fechasolicitud)
		if not pisaflag:
			html = html.replace("<br/>","<br>")
		else:
			#html = html.replace("<br/>","<br/>&nbsp;")
			html = '<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /></head><body>' + css + html + '</body></html>'
			#return genshi
			
		return html, pisaflag
	
	def ObtenerBeneficiario(self):
		if self.devolucion == "S":
			sql = """
			select nombre from CLIENTE where codigo = %s
			""" % self.idbeneficiario
		else:
			sql = """
			select nombre from gixbeneficiarios where idbeneficiario = %s
			""" % self.idbeneficiario
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row:
			return str(row[0])
		return "NO EXISTE EL BENEFICIARIO %s" % self.idbeneficiario
		
	def ObtenerEmpresa(self):
		sql = """
		select Razonsocial from cont_Empresas where EmpresaID = %s
		""" % self.empresaid
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row:
			return str(row[0])
		return "NO EXISTE LA EMPRESA %s" % self.empresaid

	def ObtenerUsuarioAreaImpresion(self):
		sql = """
		select rtrim(ltrim(u.Nombre)), p.descripcion, p.idpuesto_jis from Usuarios u
		join gixempleados e on u.Usuario = e.usuario
		join gixpuestos p on e.idempleado = p.idempleado
		where u.Usuario = '%s'
		""" % self.usuariosolicitante
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row:
			jefeinmediato, puestoinmediato = self.ObtenerJefeInmediato(int(row[2]))
			return str(row[0]), str(row[1]), str(jefeinmediato), str(puestoinmediato)
		return "", "", "", ""
	
	def ObtenerJefeInmediato(self, idpuesto_jis):
		sql = """
		select rtrim(ltrim(u.Nombre)), rtrim(ltrim(p.descripcion)) from gixpuestos p
		join gixempleados e on p.idempleado = e.idempleado
		join Usuarios u on e.usuario = u.Usuario
		where p.idpuesto = %s
		""" % idpuesto_jis
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row:
			return str(row[0]), str(row[1])
		return  "", ""
	
	def OnFirmantes(self, event):
		self.selecteditems.sort()
		if len(self.selecteditems) > 1:
			char1 = "las"; char2 = "es"
		else:
			char1 = "la"; char2 = ""
		if Mensajes().YesNo(self,u"Asignaci�n y Registro de firmantes en %s solicitud%s:\n%s\n\n" \
							u"� Desea continuar ?" \
							% (char1, char2, self.selecteditems), u"Confirmaci�n"):
			dlg = GixElegirFirmantes(self, usuario = self.usuario, idbanco = self.origenidbanco,
									 selecteditems = self.selecteditems)
			dlg.CenterOnScreen()
			dlg.ShowModal()
			
		self.GetControl(self.idlc).SetFocus()
		
	def OnFondear(self, event):
		#if self.saldofinaldisponible < 0:
			#Mensajes().Info(self, u"� Petici�n de fondeo de cheques cancelada !\n\n" \
							#u"No es posible llevar a cabo el fondeo de cheques mientras el\n" \
							#u"saldo final se encuentre en rojo (saldo negativo).", u"Atenci�n")
		#else:
		# lo que sigue va dentro del else. Adaptaci�n para el fondeo inicial
		self.selecteditems.sort()
		if len(self.selecteditems) > 1: char = "es"
		else: char = ""
		if Mensajes().YesNo(self,u"Solicitud%s a fondear:\n%s\n\n" \
							u"� Desea continuar ?" \
							% (char, self.selecteditems), u"Confirmaci�n"):
			self.Fondear()
		self.GetControl(self.idlc).SetFocus()

	def Fondear(self):
		sql = "select getdate()"
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		defaultvalue = u"Fondeo elaborado el %s" % str(row[0])
		dlg = wx.TextEntryDialog(self, u"Descripci�n", u"Elaboraci�n del Fondeo", "%s" % defaultvalue)
		while True:
			if dlg.ShowModal() == wx.ID_OK:
				descripcion = dlg.GetValue()
				if descripcion:
					dlg.Destroy()
					if Mensajes().YesNo(self,u"Recuerde que al llevar a cabo el fondeo, se afectar�n " \
										u"las partidas y/o subpartidas que se\nincluyan en las solicitudes " \
										u"elegidas a ser fondeadas.\n\n" \
										# (aa).- Actualmente no se afecta el banco.
										#u"Tambi�n ser�n generados los movimientos de cargo, los cuales, " \
										#u"afectar�n directamente\na las cuentas del banco origen (emisoras del egreso), " \
										#u"asi como al saldo de las mismas.\n\n" \
										u"� Desea realmente llevar a cabo el fondeo ?", u"Confirmaci�n"):
						biengrabado, idfondeo = self.AgregaFondeo(descripcion)
						if biengrabado:
							self.AplicaFondeo(idfondeo)
							self.FillListCtrl()
							self.GetControl(self.idbtfirmanteslistctrl).Enable(False)
							self.GetControl(self.idbtfondearlistctrl).Enable(False)
							self.GetControl(self.idbteditarlistctrl).Enable(False)
							self.GetControl(self.idbtclonarlistctrl).Enable(False)
							self.GetControl(self.idbtimprimirlistctrl).Enable(False)
							self.GetControl(self.idbtcambiarestatus).Enable(False)
							Mensajes().Info(self, u"Fondeo finalizado", u"Aviso")
						else:
							Mensajes().Info(self, u"� No fu� posible llevar a cabo el fondeo !", u"Atenci�n")
						self.GetControl(self.idlc).SetFocus()
						break
					else:
						self.GetControl(self.idlc).SetFocus()
						break
				else:
					Mensajes().Info(self, u"Para continuar es necesario que digite\n" \
									u"la Descripci�n del Fondeo.", u"Atenci�n")
					dlg.SetValue(defaultvalue)
			else:
				dlg.Destroy()
				self.GetControl(self.idlc).SetFocus()
				break
			
	def AgregaFondeo(self, descripcion):
		sql = """
		insert into gixfondeos (descripcion, fechacreacion, usuariocreador)
		values ('%s', getdate(), '%s')
		""" % (descripcion, self.usuario)
		biengrabado =  self.QueryUpdateRecord(sql)
		idfondeo = 0
		if biengrabado:
			sql = "select max(idfondeo) from gixfondeos"
			cu = r_cn.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			cu.close()
			if row is not None:
				idfondeo = int(row[0])
			else:
				biengrabado = False
		return biengrabado, int(idfondeo)
	
	def AplicaFondeo(self, idfondeo):
		wx.BeginBusyCursor()
		setListForQuery = "estatus = '%s', idfondeo = %s" % ("F", idfondeo)
		for idcheque in self.selecteditems:
			sql = """
			update %s set %s where idcheque = %s
			""" % (self.dbtable, setListForQuery, idcheque)
			queTal = self.QueryUpdateRecord(sql)
			if queTal:
				sql = """
				select convert(varchar(10), fechaprogramada, 111), concepto, cantidad,
				especificaciones, convert(varchar(100), BlogGUID)
				from %s where idcheque = %s
				""" % (self.dbtable, idcheque)
				cu = r_cn.cursor()
				cu.execute(str(sql))
				row = fetchone(cu)
				cu.close()
				fechaprogramada = str(row[0]); concepto = str(row[1]); cantidad = float(row[2])
				especificaciones = str(row[3]); blogcheque = str(row[4])
				sql = """
				insert into Blogs
				(BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension, Estatus)
				values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
				""" % (blogcheque, self.usuario, u"Fondeo", "", "", "F")
				if not self.QueryUpdateRecord(sql):
					Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
				totalcheque = self.ActualizaPartidas(idcheque, fechaprogramada)
				# (aa).- Lo siguiente genera el movimiento (cargo) afectando la cuenta-banco y el saldo.
				# Actualmente no se afecta el banco.
				#if totalcheque:
					#todook, idreferenciamovto = \
						  #self.AgregaMovimientoBanco(idcheque, fechaprogramada, cantidad,\
													 #especificaciones, referencia = concepto)
					#if not todook:
						#Mensajes().Info(self, u"� Se detectaron problemas al actualizar bancos !\n\n" \
										#u"Solicitud: %s, Fecha Programada: %s, Total Cheque: %s" \
										#u", Movimiento de Banco: %s\n\n� Tome nota y revise !" \
										#% (idcheque, fechaprogramada, totalcheque, idreferenciamovto), u"Atenci�n")
		wx.EndBusyCursor()
	
	def ActualizaPartidas(self, idcheque, fechaprogramada, sumaoresta = 1, totalcheque = 0):
		sql = """
		select partida, subpartida1, subpartida2, subpartida3, subpartida4, subpartida5, cantidad
		from gixegresoschequespartidas where idcheque = %s order by idchequepartida
		""" % idcheque
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				cantidad = float(row[6])
				totalcheque += cantidad
				cantidad *= float(sumaoresta)
				for inx in range(0,6):
					partidaid = int(row[inx])
					if partidaid < 0:
						break
					elif not self.ActualizaSaldoPartida(idcheque, partidaid, fechaprogramada, cantidad):
							Mensajes().Info(self, u"� Se detectaron problemas al actualizar partidas !\n\n" \
											u"Solicitud: %s, Partida: %s, Fecha Programada: %s, Cantidad: %s\n\n" \
											u"� Tome nota y revise !" \
											% (idcheque, partidaid, fechaprogramada, cantidad), u"Atenci�n")
		return totalcheque
	
	def ActualizaSaldoPartida(self, idcheque, partidaid, fechaprogramada, cantidad, periodo = "", updateok = True):
		try:
			fecha_ano, fecha_mes, fecha_dia = fechaprogramada.split('/')
			fecha_ano, fecha_mes, fecha_dia = int(fecha_ano), int(fecha_mes), int(fecha_dia)
			periodo = "'%04d/%02d/01'" % (fecha_ano, fecha_mes)
		except:
			Mensajes().Info(self, u"Problemas con la fecha al actualizar saldos.\n" \
							u"Solicitud: %s, Partida: %s, Fecha: %s, Periodo: %s\n\n" \
							u"� No fu� afectada la partida, tome nota y revise !" \
							% (idcheque, partidaid, fechaprogramada, periodo), u"Atenci�n")
			return False
		
		sql = """
		select saldoinicial, totalabonos, totalcargos from gixpartidasxperiodo
		where partidaid = %s and periodo = %s
		""" % (partidaid, periodo)
		try:
			cu = r_cn.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			cu.close()
			if not row:
				todobien, saldo = self.ObtenerSaldoInicial(partidaid, fecha_mes, fecha_ano)
				if todobien:
					saldosiguienteperiodo = float(saldo) - float(cantidad)
					sql = """
					insert into gixpartidasxperiodo
					(partidaid, periodo, saldoinicial, totalabonos, totalcargos)
					values (%s, %s, %s, %s, %s)
					""" % (partidaid, periodo, float(saldo), 0, float(cantidad))
					updateok = self.QueryUpdateRecord(sql)
				else:
					return False
			else:
				totalcargos = float(row[2]) + float(cantidad)
				saldosiguienteperiodo = float(row[0]) + float(row[1]) - float(totalcargos)
				sql = """
				update gixpartidasxperiodo set totalcargos = %s
				where partidaid = %s and periodo = %s
				""" % (float(totalcargos), partidaid, periodo)
				updateok = self.QueryUpdateRecord(sql)
		except:
			Mensajes().Info(self, u"Problemas al actualizar saldos\n%s" % sql, u"Atenci�n")
			return False
		
		if updateok:
			updateok = self.ActualizaSaldosIniciales(partidaid, fecha_mes, fecha_ano, saldosiguienteperiodo)
			
		return updateok
	
	def ObtenerSaldoInicial(self, partidaid, fecha_mes, fecha_ano, saldo = 0, todobien = True):
		sql = """
		select min(periodo) from gixpartidasxperiodo where partidaid = %s
		""" % partidaid
		try:
			cu = r_cn.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			cu.close()
			if str(row[0]) != "None":
				limite_periodo = str(row[0])
				limite_ano, limite_mes, limite_dia = limite_periodo.split('-')
			else:
				limite_ano, limite_mes = fecha_ano, fecha_mes
			limite_ano, limite_mes = int(limite_ano), int(limite_mes)
			while True:
				if fecha_mes == 1:
					fecha_mes = 12
					fecha_ano -= 1
				else:
					fecha_mes -= 1
				if fecha_ano < limite_ano:
					break
				if fecha_ano == limite_ano and fecha_mes < limite_mes:
					break
				periodo = "'%04d/%02d/01'" % (fecha_ano, fecha_mes)
				sql = """
				select saldoinicial + totalabonos - totalcargos
				from gixpartidasxperiodo where partidaid = %s and periodo = %s
				""" % (partidaid, periodo)
				try:
					cu = r_cn.cursor()
					cu.execute(str(sql))
					row = fetchone(cu)
					cu.close()
					if row:
						saldo = float(row[0])
						break
				except:
					Mensajes().Info(self, u"Problemas al buscar saldo inicial\n\n%s" % sql, u"Atenci�n")
					todobien = False
					break
		except:
			Mensajes().Info(self, u"Problemas al buscar periodo inicial\n\n%s" % sql, u"Atenci�n")
			todobien = False
			
		return todobien, saldo
	
	def ActualizaSaldosIniciales(self, partidaid, fecha_mes, fecha_ano, saldosiguienteperiodo, todobien = True):
		sql = """
		select max(periodo) from gixpartidasxperiodo where partidaid = %s
		""" % partidaid
		try:
			cu = r_cn.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			cu.close()
			if str(row[0]) != "None":
				limite_periodo = str(row[0])
				limite_ano, limite_mes, limite_dia = limite_periodo.split('-')
			else:
				limite_ano, limite_mes = fecha_ano, fecha_mes
			limite_ano, limite_mes = int(limite_ano), int(limite_mes)
			while True:
				if fecha_mes == 12:
					fecha_mes = 1
					fecha_ano += 1
				else:
					fecha_mes += 1
				if fecha_ano > limite_ano:
					break
				if fecha_ano == limite_ano and fecha_mes > limite_mes:
					break
				periodo = "'%04d/%02d/01'" % (fecha_ano, fecha_mes)
				sql = """
				select saldoinicial, totalabonos, totalcargos
				from gixpartidasxperiodo where partidaid = %s and periodo = %s
				""" % (partidaid, periodo)
				try:
					cu = r_cn.cursor()
					cu.execute(str(sql))
					row = fetchone(cu)
					cu.close()
					if row:
						sql = """
						update gixpartidasxperiodo set saldoinicial = %s
						where partidaid = %s and periodo = %s
						""" % (float(saldosiguienteperiodo), partidaid, periodo)
						saldosiguienteperiodo += float(row[1]) - float(row[2])
						todobien = self.QueryUpdateRecord(sql)
						if not todobien:
							break
				except:
					Mensajes().Info(self, u"Problemas al buscar saldo inicial\n%s" \
							% sql, u"Atenci�n")
					todobien = False
					break
		except:
			Mensajes().Info(self, u"Problemas al buscar �ltimo periodo\n%s" % sql, u"Atenci�n")
			todobien = False
		
		return todobien

	def AgregaMovimientoBanco(self, idcheque, fechaprogramada, cantidad, especificaciones, referencia):
		empresaid = self.empresaid
		idbanco = self.idbancoorigen
		fechamovto = "NULL"
		periodo = ""
		try:
			fecha_ano, fecha_mes, fecha_dia = fechaprogramada.split('/')
			fecha_ano, fecha_mes, fecha_dia = int(fecha_ano), int(fecha_mes), int(fecha_dia)
			fechamovto = "'%04d/%02d/%02d'" % (fecha_ano, fecha_mes, fecha_dia)
			periodo = "'%04d/%02d/01'" % (fecha_ano, fecha_mes)
		except:
			Mensajes().Info(self, u"Problemas con la fecha al agregar movimientos", u"Atenci�n")
			return False, 0
		tipomovto = "C"
		estatus = "F"
		sqlFields = """
		empresaid, idbanco, fechamovto, tipomovto, cantidad, referencia, estatus, clasificado, eliminado, idcheque
		"""
		sqlValues = "%s, %s, %s, '%s', %s, '%s', '%s', '%s', '%s', %s" % \
			(empresaid, idbanco, fechamovto, tipomovto, float(cantidad), referencia,
			 estatus, "S", "N", idcheque)
		sql = "insert into gixbancosmovimientos (%s) values (%s)" % (sqlFields, sqlValues) 
		queTal = self.QueryUpdateRecord(sql)
		numero = 0
		if queTal:
			if not self.ActualizarSaldoBanco(idbanco, periodo, cantidad, fecha_mes, fecha_ano, tipomovto):
				return False, 0
			sqlx = "select max(idreferenciamovto) from gixbancosmovimientos"
			cu = r_cn.cursor()
			cu.execute(str(sqlx))
			row = fetchone(cu)
			cu.close()
			if row is not None:
				numero = int(row[0])
			sqly = """
			select convert(varchar(100), BlogGUID) from gixbancosmovimientos where idreferenciamovto = %s
			""" % numero
			cu = r_cn.cursor()
			cu.execute(str(sqly))
			row = fetchone(cu)
			cu.close()
			if row is not None:
				self.BlogGUID = row[0]
			comentario = "Fondeo de la Solicitud No. %s" % idcheque
			sql = """
			insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura,
			ContenidoText, ContenidoBinario, Extension)
			values ('%s', getdate(), '%s', '%s', '%s', '%s')
			""" % (self.BlogGUID, self.usuario, comentario, "", "")
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")

		return queTal, int(numero)
	
	def ActualizarSaldoBanco(self, idbanco, periodo, cantidad, fecha_mes, fecha_ano, tipomovto, updateok = True):
		sql = """
		select saldoinicial, totalabonos, totalcargos from gixbancossaldosxperiodo
		where idbanco = %s and periodo = %s
		""" % (idbanco, periodo)
		try:
			cu = r_cn.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			cu.close()
			if not row:
				todobien, saldo = self.ObtenerSaldoInicialBanco(idbanco, fecha_mes, fecha_ano)
				if todobien:
					if tipomovto == "A":
						saldosiguienteperiodo = float(saldo) + float(cantidad)
						sql = """
						insert into gixbancossaldosxperiodo
						(idbanco, periodo, saldoinicial, totalabonos, totalcargos)
						values (%s, %s, %s, %s, %s)
						""" % (idbanco, periodo, float(saldo), float(cantidad), 0)
					else:
						saldosiguienteperiodo = float(saldo) - float(cantidad)
						sql = """
						insert into gixbancossaldosxperiodo
						(idbanco, periodo, saldoinicial, totalabonos, totalcargos)
						values (%s, %s, %s, %s, %s)
						""" % (idbanco, periodo, float(saldo), 0, float(cantidad))
					updateok = self.QueryUpdateRecord(sql)
				else:
					updateok = False
			else:
				totalabonos = float(row[1])
				totalcargos = float(row[2])
				if tipomovto == "A":
					totalabonos += float(cantidad)
				else:
					totalcargos += float(cantidad)
				saldosiguienteperiodo = float(row[0]) + float(totalabonos) - float(totalcargos)
				sql = """
				update gixbancossaldosxperiodo set totalabonos = %s, totalcargos = %s
				where idbanco = %s and periodo = %s
				""" % (float(totalabonos), float(totalcargos), idbanco, periodo)
				updateok = self.QueryUpdateRecord(sql)
		except:
			Mensajes().Info(self, u"Problemas al actualizar saldos\n%s" % sql, u"Atenci�n")
			updateok = False
			
		updateok = self.ActualizaSaldosInicialesBanco(idbanco, fecha_mes, fecha_ano, saldosiguienteperiodo)
			
		return updateok
	
	def ObtenerSaldoInicialBanco(self, idbanco, fecha_mes, fecha_ano, saldo = 0, todobien = True):
		sql = """
		select min(periodo) from gixbancossaldosxperiodo where idbanco = %s
		""" % idbanco
		try:
			cu = r_cn.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			cu.close()
			if str(row[0]) != "None":
				limite_periodo = str(row[0])
				limite_ano, limite_mes, limite_dia = limite_periodo.split('-')
			else:
				limite_ano, limite_mes = fecha_ano, fecha_mes
			limite_ano, limite_mes = int(limite_ano), int(limite_mes)
			while True:
				if fecha_mes == 1:
					fecha_mes = 12
					fecha_ano -= 1
				else:
					fecha_mes -= 1
				if fecha_ano < limite_ano:
					break
				if fecha_ano == limite_ano and fecha_mes < limite_mes:
					break
				periodo = "'%04d/%02d/01'" % (fecha_ano, fecha_mes)
				sql = """
				select saldoinicial + totalabonos - totalcargos
				from gixbancossaldosxperiodo where idbanco = %s and periodo = %s
				""" % (idbanco, periodo)
				try:
					cu = r_cn.cursor()
					cu.execute(str(sql))
					row = fetchone(cu)
					cu.close()
					if row:
						saldo = float(row[0])
						break
				except:
					Mensajes().Info(self, u"Problemas al buscar saldo inicial\n%s" \
							% sql, u"Atenci�n")
					todobien = False
					break
		except:
			Mensajes().Info(self, u"Problemas al buscar periodo inicial\n%s" % sql, u"Atenci�n")
			todobien = False
			
		return todobien, saldo
	
	def ActualizaSaldosInicialesBanco(self, idbanco, fecha_mes, fecha_ano, saldosiguienteperiodo):
		sql = """
		select max(periodo) from gixbancossaldosxperiodo where idbanco = %s
		""" % idbanco
		try:
			cu = r_cn.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			cu.close()
			if str(row[0]) != "None":
				limite_periodo = str(row[0])
				limite_ano, limite_mes, limite_dia = limite_periodo.split('-')
			else:
				limite_ano, limite_mes = fecha_ano, fecha_mes
				
			limite_ano, limite_mes = int(limite_ano), int(limite_mes)
			todobien = True
			while True:
				if fecha_mes == 12:
					fecha_mes = 1
					fecha_ano += 1
				else:
					fecha_mes += 1
					
				if fecha_ano > limite_ano:
					break
				
				if fecha_ano == limite_ano and fecha_mes > limite_mes:
					break
				
				periodo = "'%04d/%02d/01'" % (fecha_ano, fecha_mes)
				sql = """
				select saldoinicial, totalabonos, totalcargos
				from gixbancossaldosxperiodo where idbanco = %s and periodo = %s
				""" % (idbanco, periodo)
				try:
					cu = r_cn.cursor()
					cu.execute(str(sql))
					row = fetchone(cu)
					cu.close()
					if row:
						sql = """
						update gixbancossaldosxperiodo set saldoinicial = %s
						where idbanco = %s and periodo = %s
						""" % (float(saldosiguienteperiodo), idbanco, periodo)
						saldosiguienteperiodo += float(row[1]) - float(row[2])
						todobien = self.QueryUpdateRecord(sql)
						if not todobien:
							break
				except:
					Mensajes().Info(self, u"Problemas al buscar saldo inicial\n%s" \
					                % sql, u"Atenci�n")
					todobien = False
					break
		except:
			Mensajes().Info(self, u"Problemas al buscar �ltimo periodo\n%s" % sql, u"Atenci�n")
			todobien = False
		
		return todobien
	
	def OnChoiceFiltroLocal(self, event):
		estatus = self.GetControl(self.idchestatusfiltro).GetStringSelection()
		if estatus == u"Proyecci�n":
			Mensajes().Info(self, u"La proyecci�n incluye todas las solicitudes con estatus de solicitud,\n" \
							u"revisado, autorizado, elaborado y retenido.\n" \
							u"No se incluyen las solicitudes canceladas, fondeadas y cobradas.\n\n" \
							u"Nota.- Desde la proyecci�n no es posible llevar a cabo el fondeo.", u"Aviso")
		elif estatus == "<Todo>":
			if self.GetControl(self.idtgfondeo).GetValue():
				Mensajes().Info(self, u"El estatus <Todo> incluye unicamente las solicitudes candidatas\n" \
								u"a ser fondeadas, es decir, las elaboradas y retenidas.", u"Aviso")
			elif self.GetControl(self.idtgmulticheque).GetValue():
				Mensajes().Info(self, u"El estatus <Todo> incluye unicamente las solicitudes\n" \
								u"con estatus de revisado y autorizado.", u"Aviso")
			else:
				Mensajes().Info(self, u"El estatus <Todo> incluye todas las solicitudes,\n" \
								u"excepto las canceladas.", u"Aviso")
		self.FillListCtrl()
		
	def OnLimpiarFechaCapturaFiltro(self, event):
		self.GetControl(self.idtcfechacapturafiltro).SetValue("")
		self.GetControl(self.idtcfechacapturarango).SetValue("")
		
	def OnLimpiarFechaCapturaRango(self, event):
		self.GetControl(self.idtcfechacapturarango).SetValue("")
		
	def OnLimpiarFechaProgramadaFiltro(self, event):
		self.GetControl(self.idtcfechaprogramadafiltro).SetValue("")
		self.GetControl(self.idtcfechaprogramadarango).SetValue("")
		
	def OnLimpiarFechaProgramadaRango(self, event):
		self.GetControl(self.idtcfechaprogramadarango).SetValue("")
		
	def OnObtenerBeneficiarioFiltro(self, event):
		query = "select idbeneficiario, nombre from gixbeneficiarios order by nombre"
		idbeneficiario, nombre = self.GetChoiceFromList(query, caption = u"Elegir Beneficiario")
		if idbeneficiario:
			self.GetControl(self.idfrbeneficiariofiltro).SetValue(str(nombre))
			self.beneficiario = int(idbeneficiario)
			self.FillListCtrl()
			
	def OnLimpiarBeneficiarioFiltro(self, event):
		self.GetControl(self.idfrbeneficiariofiltro).SetValue("")
		self.beneficiario = -1
		self.FillListCtrl()
		
	#def OnChoiceFiltro(self, event):
		#self.FillListCtrl()
		
	def ObtenerEmpresasFiltro(self):
		control = self.GetControl(self.idchempresafiltro)
		control.Enable(False)
		control.Show(False)
		control.Clear()
		sql = """
		select EmpresaID, Razonsocial from cont_Empresas where activarecfin = 'S' order by RazonSocial
		"""
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(str(row[1]).decode("iso8859-1"), int(row[0]))
				
		control.SetSelection(SetChoiceIndex())
		control.Show(True)
		control.Enable(True)
		
	def OnLimpiarEmpresaFiltro(self, event):
		self.ObtenerEmpresasFiltro()
		self.FillListCtrl()
		
	def OnChoiceControl(self, event):
		id = event.GetId()
		self.ChoiceControl(id)
		self.RevisaCambios()
		
	def ChoiceControl(self, id):
		if id == self.idchprogramacion:
			programacion = self.GetControl(id).GetStringSelection()
			id = self.idtcfechaprogramada
			if programacion == "Normal":
				self.GetControl(id).SetEditable(False)
				self.GetControl(id).SetBackgroundColour(wx.GREEN)
				self.GetControl(self.idbbelegirfechaprogramada).Enable(False)
				self.CalculaFechaProgramada()
			else:
				self.GetControl(id).SetEditable(True)
				self.GetControl(id).SetBackgroundColour(wx.WHITE)
				self.GetControl(self.idbbelegirfechaprogramada).Enable(True)
				if not self.FillingARecord:
					if self.GetControl(id).GetValue() <> self.originales[id]:
						self.GetControl(id).SetBackgroundColour(wx.CYAN)
					else:
						self.GetControl(id).SetBackgroundColour(wx.WHITE)
					self.GetControl(id).Refresh()
		elif not self.FillingARecord:
			if self.GetControl(id).GetStringSelection() <> self.originales[id]:
				self.GetControl(id).SetBackgroundColour(wx.CYAN)
				if id == self.idchestatus:
					self.GetControl(self.idlcpartidas).Enable(False)
					self.GetControl(self.idbbagregarpartida).Enable(False)
					self.GetControl(self.idbbeliminarpartida).Enable(False)
					for id in self.controles_cb_partidas:
						self.GetControl(id).Enable(False)
					self.GetControl(self.idtccantidad).Enable(False)
			else:
				self.GetControl(id).SetBackgroundColour(wx.WHITE)
				if id == self.idchestatus:
					self.GetControl(self.idlcpartidas).Enable(True)
					self.GetControl(self.idbbagregarpartida).Enable(True)
					self.GetControl(self.idbbeliminarpartida).Enable(True)
					self.FillListCtrlPartidas()
					self.GetControl(self.idtccantidad).Enable(True)
			self.GetControl(id).Refresh()
		if id == self.idchespecificaciones:
			especificacion = self.GetControl(id).GetStringSelection()
			if especificacion in ("Spei", "Transferencia o Traspaso"):
				self.estoyenobtenerbancobeneficiario = True
				self.ObtenerBancoBeneficiario()
				self.HabilitaTextControl()
				self.GetControl(self.idbbespecificaciones).Enable(True)
				self.estoyenobtenerbancobeneficiario = False
			elif especificacion in ("Cheque", "Cheque Certificado", "Cheque de Caja"):
				self.estoyenobtenerbancobeneficiario = True
				self.ObtenerBancoBeneficiarioCheque()
				self.HabilitaTextControl()
				self.GetControl(self.idbbespecificaciones).Enable(True)
				self.estoyenobtenerbancobeneficiario = False
			else:
				self.DeshabilitaTextControl()
				self.GetControl(self.idbbespecificaciones).Enable(False)
		if id == self.idchestatus:
			if self.GetControl(self.idchprogramacion).IsEnabled():
				if self.idbeneficiario != -1 or self.beneficiarionombre:
					especificacion = self.GetControl(self.idchespecificaciones).GetStringSelection()
					if especificacion in ("Spei", "Transferencia o Traspaso"):
						self.ObtenerBancoBeneficiario()
						self.HabilitaTextControl()
						self.GetControl(self.idbbespecificaciones).Enable(True)
					elif especificacion in ("Cheque", "Cheque Certificado", "Cheque de Caja"):
						self.ObtenerBancoBeneficiarioCheque()
						self.HabilitaTextControl()
						self.GetControl(self.idbbespecificaciones).Enable(True)
					else:
						self.DeshabilitaTextControl()
						self.GetControl(self.idbbespecificaciones).Enable(False)
				else:
					self.DeshabilitaTextControl()
					self.GetControl(self.idbbespecificaciones).Enable(False)
		if id == self.idchbancoorigen:
			choice = self.GetControl(id)
			index = choice.GetSelection()
			idbancoorigen = choice.GetClientData(index)
			if idbancoorigen != self.idbancoorigen:
				self.idbancoorigen = idbancoorigen
				
	def OnCheckBoxEstimacion(self, event):
		pagoestimacion = 0
		if self.GetControl(self.idckestimacion).IsChecked():
			pagoestimacion = 1
		if pagoestimacion != self.pagoestimacion:
			self.pagoestimacion = pagoestimacion
		self.RevisaCambios()
		
	def OnVerificarEspecificaciones(self, event):
		especificacion = self.GetControl(self.idchespecificaciones).GetStringSelection()
		if especificacion in ("Spei", "Transferencia o Traspaso"):
			self.ObtenerBancoBeneficiario(verificabeneficiario = True)
		elif especificacion in ("Cheque", "Cheque Certificado", "Cheque de Caja"):
			self.ObtenerBancoBeneficiarioCheque(verificabeneficiario = True)
			
	def OnRightClick(self, event):
		self.idregistryblog = self.idcheque
		self.idtitleblog = "Registro"
		if not hasattr(self, "ID_VIEWBLOG"):
			ID_VIEWBLOG = wx.NewId(); ID_ADDBLOG = wx.NewId()
			self.Bind(wx.EVT_MENU, self.OnViewBlog, id = ID_VIEWBLOG)
			self.Bind(wx.EVT_MENU, self.OnAddBlog, id = ID_ADDBLOG)
			self.Bind(wx.EVT_MENU, self.OnAgregarDetalle, id = self.idbtagregarlistctrl)
			self.Bind(wx.EVT_MENU, self.OnEditRecord, id = self.idbteditarlistctrl)
		popup = wx.Menu()
		popup.Append(ID_VIEWBLOG, u"Consultar el Blog del %s %s" % (self.idtitleblog, self.idregistryblog))
		popup.Append(ID_ADDBLOG, u"Participar en el Blog...")
		popup.AppendSeparator()
		popup.Append(self.idbtagregarlistctrl, u"Agregar")
		popup.Append(self.idbteditarlistctrl, u"Editar")
		if self.GetControl(self.idtgfondeo).GetValue() or self.GetControl(self.idtgmulticheque).GetValue():
			popup.Enable(self.idbtagregarlistctrl, False)
		if not self.editable: popup.Enable(self.idbteditarlistctrl, False)
		self.PopupMenu(popup)
		popup.Destroy()
		
	def OnViewBlog(self, event):
		goal = ((90, u"Fecha"), (90, u"Hora"), (100, u"Usuario"), (300, u"Blog"))
		query = """
		select convert(varchar(50), FechaCaptura, 103), convert(varchar(50), FechaCaptura, 108),
		UsuarioCaptura, ContenidoText from Blogs
		where BlogGUID = '%s' order by FechaCaptura desc;
		select count(*) from Blogs where BlogGUID = '%s'
		""" % (self.BlogGUID, self.BlogGUID)
		title = u"Consultando el Blog del %s %s" % (self.idtitleblog, self.idregistryblog)
		table = "Blogs"
		frame = GixFrameCatalogo(self, -1, title, wx.Point(20,20), wx.Size(800,600), 
								 wx.DEFAULT_FRAME_STYLE, None, None, None, table, goal, query,
								 gridsize = [680,350], color = "AQUAMARINE")
		frame.Centre(wx.BOTH)
		frame.Show(True)
		
	def OnAddBlog(self, event):
		blog = wx.TextEntryDialog(self, u"Digite", u"Participando en el Blog del %s %s"
								  % (self.idtitleblog, self.idregistryblog),
								  defaultValue = "", style = wx.OK | wx.TE_MULTILINE)
		blog.SetSize(wx.Size(400,300))
		blog.Centre(wx.BOTH)
		blog.ShowModal()
		comment = blog.GetValue()
		blog.Destroy()
		if comment:
			sql = """
			insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension)
			values ('%s', getdate(), '%s', '%s', '%s', '%s')
			""" % (self.BlogGUID, self.usuario, comment, "", "")
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"� Problemas al actualizar el blog !", u"Atenci�n")
			else:
				self.EnviaMail(comment)
			
	def EnviaMail(self, comment):
		demails = {}
		lusers = [self.usuario, 'ADRIANA']

		for usr in lusers:
			usuarionombre, area, email, aborta = self.ObtenerUsuarioAreaEmail(usr)
			if aborta: continue
			else:
				demails[usr] = (usuarionombre, area, email)
		
		if self.estatus == "S": estatus = "SOLICITUD"
		elif self.estatus == "R": estatus = "REVISADO"
		elif self.estatus == "A": estatus = "AUTORIZADO"
		elif self.estatus == "E": estatus = "ELABORADO"
		elif self.estatus == "F": estatus = "FONDEADO"
		elif self.estatus == "T": estatus = "RETENIDO"
		elif self.estatus == "B": estatus = "COBRADO"
		elif self.estatus == "C": estatus = "CANCELADO"
		else: estatus = "DESCONOCIDO"
		lemails = demails.keys()
		nota = u"Actividad en el blog de la solicitud %s" % self.idregistryblog
		nsubject = "Solicitud %s. Actividad en el blog (No Contestar)" % (self.idregistryblog)
		nfromAddr = "gix@grupoiclar.com"
		mensaje = u"""
%s
	
Participante: %s
Estatus de la solicitud: %s

%s
		""" % (nota, self.usuario.decode("iso8859-1"), estatus.decode("iso8859-1"),
			   comment.decode("iso8859-1"))
		
		nuevomensaje = []
		for letra in mensaje:
			try:
				salida = str(letra)
			except:
				salida = "*"
			nuevomensaje.append(salida)
			
		nmensaje = "".join(nuevomensaje)
		for mail in lemails:
			if not jsonweb:
				pass
				#toAddr = []
				#toAddr.append(mail)
				#sendmail(toAddr, fromAddr = nfromAddr, subject = nsubject, message = nmensaje)
			else:
				values = dict(addr = mail, subject = nsubject, body = nmensaje)
				data = urlencode(values)
				json_string = urlopen("%s?%s" % (URLSMAIL, data)).read()
				foo = json.loads(json_string)
			
	def ObtenerUsuarioAreaEmail(self, usuario):
		sql = """
		select rtrim(ltrim(u.Nombre)), rtrim(ltrim(p.descripcion)), rtrim(ltrim(e.email))
		from Usuarios u join gixempleados e on u.Usuario = e.usuario
		join gixpuestos p on e.idempleado = p.idempleado
		where u.Usuario = '%s'
		""" % usuario
		try:
			cu = r_cn.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			cu.close()
			if row:
				usuarionombre, area, email = map(str, row)
				return usuarionombre, area, email, False
			else:
				aborta = True
		except:
			aborta = True
			
		if aborta:
			Mensajes().Info(self, u"� Su participaci�n en el blog no pudo ser notificada por e-mail !\n\n" \
							u"Usuario: %s\nNombre: %s\nArea: %s\nE-mail: %s\n\n" \
							u"Por favor verifique la informaci�n anterior." \
							% (self.usuario, usuarionombreblog, areablog, emailblog), "Atenci�n")
			return "", "", "", True
		
	def OnAceptarDetalle(self, event):
		id = event.GetId()
		if id == self.idbtaceptarform:
			if self.AceptarDetalle():
				self.FillListCtrl()
				self.SalirDetalle()
		else:
			estatusch = self.GetControl(self.idchestatus).GetStringSelection()
			if estatusch == "Solicitud": estatus = "S"
			elif estatusch == "Revisado": estatus = "R"
			elif estatusch == "Autorizado": estatus = "A"
			elif estatusch == "Elaborado": estatus = "E"
			elif estatusch == "Fondeado": estatus = "F"
			elif estatusch == "Retenido": estatus = "T"
			elif estatusch == "Cobrado": estatus = "B"
			else: estatus = "C"
			if estatus == self.estatus:
				if self.AceptarDetalle():
					self.modoedicion = True
					self.EditRecord()
					self.modoedicion = False
					self.GetControl(self.idbbagregarpartida).SetFocus()
			elif self.AceptarDetalle():
				Mensajes().Info(self, u"� Cambio de estatus exitoso !", u"Atenci�n")
				self.SalirDetalle()
				
	def CantidadDecimal(self, cantidad):
		decimal.getcontext().prec = 2
		fraccion = Decimal(Decimal(str(cantidad)) - int(Decimal(str(cantidad))))
		decimal.getcontext().prec = 28
		return int(Decimal(str(cantidad))) + fraccion
	
	def AceptarDetalle(self, validacantidad = True, salirdetalle = False):
		estatusch = self.GetControl(self.idchestatus).GetStringSelection()
		if estatusch == "Solicitud": estatus = "S"
		elif estatusch == "Revisado": estatus = "R"
		elif estatusch == "Autorizado": estatus = "A"
		elif estatusch == "Elaborado": estatus = "E"
		elif estatusch == "Fondeado": estatus = "F"
		elif estatusch == "Retenido": estatus = "T"
		elif estatusch == "Cobrado": estatus = "B"
		else: estatus = "C"
		if (estatus != self.estatus and estatus == "E"):
			pass
		elif (validacantidad and estatus in ("E", "F", "T", "B")):
			cantidad = self.totalcheque
			cantidadcheque = self.cantidadcheque
			q1 = self.CantidadDecimal(cantidad)
			q2 = self.CantidadDecimal(cantidadcheque)
			if q1 != q2:
				totalpartidas = str(amount_and_cents_with_commas(cantidad))
				totalcheque = str(amount_and_cents_with_commas(cantidadcheque))
				Mensajes().Info(self, u"� Por favor revise las partidas y el cheque !\n\n" \
								u"El total de las partidas $ %s no es igual a la cantidad\n" \
								u"con la que se elabor� el cheque $ %s" \
								% (totalpartidas, totalcheque), u"Atenci�n")
				return False
		if salirdetalle:
			return True
		self.NewFlag = False
		self.Text()
		if not self.NewFlag:
			if 1 in (self.partidaafectable, self.subpartida1afectable, self.subpartida2afectable, \
					 self.subpartida3afectable, self.subpartida4afectable, self.subpartida5afectable):
				especificacion = self.GetControl(self.idchespecificaciones).GetStringSelection()
				if especificacion in ("Spei", "Transferencia o Traspaso"):
					control = self.GetControl(self.idtcclavebancariadestino)
					clavebancariadestino = control.GetValue().strip()
					if not str(clavebancariadestino).isdigit():
						Mensajes().Info(self, u"� Por favor revise la clave bancaria !\n\n" \
										u"Esta debe ser numerica.", u"Atenci�n")
						control.SetFocus()
						return False
					elif len(clavebancariadestino) != 18:
						Mensajes().Info(self, u"� Por favor revise la clave bancaria !\n\n" \
										u"Esta se debe componer de 18 digitos.", u"Atenci�n")
						control.SetFocus()
						return False
				else:
					if especificacion in ("Cheque", "Cheque Certificado", "Cheque de Caja"):
						control = self.GetControl(self.idtcnumerochequeorigen)
						numerochequeorigen = control.GetValue().strip()
						bancoorigen = self.GetControl(self.idchbancoorigen).GetStringSelection()
						if bancoorigen:
							if numerochequeorigen:
								if not str(numerochequeorigen).isdigit():
									Mensajes().Info(self, u"� Por favor revise el n�mero de cheque !\n\n" \
													u"Este debe ser numerico.", u"Atenci�n")
									control.SetFocus()
									return False
						elif numerochequeorigen:
							if not str(numerochequeorigen).isdigit():
								Mensajes().Info(self, u"Por favor elija el banco origen y\n" \
												u"revise el n�mero de cheque.\n\n"
												u"El cheque debe ser numerico.", u"Atenci�n")
								control.SetFocus()
								return False
							else:
								Mensajes().Info(self, u"Por favor elija el banco origen\n" \
												u"al que pertenece el cheque.", u"Atenci�n")
								self.GetControl(self.idchbancoorigen).SetFocus()
								return False
				continua, self.idbeneficiario = self.RevisaBeneficiario()
				if continua == 1:
					if self.agregar:
						if Mensajes().YesNo(self, u"Recuerde haber elegido correctamente la Empresa Emisora,\n" \
											u"ya que no podra modificarse posteriormente.\n\n" \
											u"� Desea realmente grabar la informaci�n ?", u"Confirmaci�n"):
							self.SaveRecord()
							return True
					else:
						self.SaveRecord()
						return True
				elif continua == 2:
					self.SaveRecord()
					return True
			else:
				Mensajes().Info(self, u"� Por favor revise la partida o subpartida que desea afectar !", u"Atenci�n")
				return False
		
		return False

	#def GetString(self, valor):
		#dato = ""
		#try:
			#dato = valor.encode("iso8859-1")
		#except:
			#try:
				#dato = str(valor)
			#except:
				#dato = valor
		#return dato
	
	def Clr(self, dato):
		row = ""
		try:
			row = dato.strip()
		except:
			row = dato
			
		return row
	
	def RevisaBeneficiario(self):
		especificacion = self.GetControl(self.idchespecificaciones).GetStringSelection()
		nombre = self.GetControl(self.idcbbeneficiario).GetValue().strip()
		bancodestino = self.GetControl(self.idtcbancodestino).GetValue().strip()
		sucursaldestino = self.GetControl(self.idtcsucursaldestino).GetValue().strip()
		plazadestino = self.GetControl(self.idtcplazadestino).GetValue().strip()
		clavebancariadestino = self.GetControl(self.idtcclavebancariadestino).GetValue().strip()
		try:
			nom = nombre.encode("iso8859-1")
		except:
			nom = nombre
		if self.GetControl(self.idtgbeneficiariodevolucion).GetValue():
			sql = """
			select codigo from CLIENTE where nombre = '%s'
			""" % nom
			devolucion = True
		else:
			sql = """
			select idbeneficiario, rtrim(ltrim(banco)), rtrim(ltrim(sucursal)), rtrim(ltrim(plaza)),
			rtrim(ltrim(clavebancaria)), rtrim(ltrim(bancocheque)), rtrim(ltrim(sucursalcheque)),
			rtrim(ltrim(plazacheque)), rtrim(ltrim(cuentacheque))
			from gixbeneficiarios where nombre = '%s'
			""" % nom
			devolucion = False
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row:
			if devolucion:
				return 1, int(row[0])
			elif especificacion in ("Spei", "Transferencia o Traspaso"):
				if self.GetString(bancodestino) != self.Clr(row[1]) or self.GetString(sucursaldestino) != self.Clr(row[2]) or \
				   self.GetString(plazadestino) != self.Clr(row[3]) or self.GetString(clavebancariadestino) != self.Clr(row[4]):
					if Mensajes().YesNo(self, u"Se han encontrado cambios en las especificaciones (spei, transferencias o traspasos)\n" \
										u"del beneficiario (banco, sucursal, plaza, clave bancaria).\n\n" \
										u"� Desea conservar los cambios en el registro personal del beneficiario ?", u"Confirmaci�n"):
						columnas = """
						banco = '%s', sucursal = '%s', plaza = '%s', clavebancaria = '%s'
						""" % (bancodestino, sucursaldestino, plazadestino, clavebancariadestino)
						sql = "update gixbeneficiarios set %s where idbeneficiario = %s" % (columnas, int(row[0]))
						queTal = self.QueryUpdateRecord(sql)
						if queTal:
							return 1, int(row[0])
						else:
							return 0, 0
					else:
						return 1, int(row[0])
				else:
					return 1, int(row[0])
			elif especificacion in ("Cheque", "Cheque Certificado", "Cheque de Caja"):
				if self.GetString(bancodestino) != self.Clr(row[5]) or self.GetString(sucursaldestino) != self.Clr(row[6]) or \
				   self.GetString(plazadestino) != self.Clr(row[7]) or self.GetString(clavebancariadestino) != self.Clr(row[8]):
					if Mensajes().YesNo(self, u"Se han encontrado cambios en las especificaciones (cuenta de cheque)\n" \
										u"del beneficiario (banco, sucursal, plaza, cuenta).\n\n" \
										u"� Desea conservar los cambios en el registro personal del beneficiario ?", u"Confirmaci�n"):
						columnas = """
						bancocheque = '%s', sucursalcheque = '%s', plazacheque = '%s', cuentacheque = '%s'
						""" % (bancodestino, sucursaldestino, plazadestino, clavebancariadestino)
						sql = "update gixbeneficiarios set %s where idbeneficiario = %s" % (columnas, int(row[0]))
						queTal = self.QueryUpdateRecord(sql)
						if queTal:
							return 1, int(row[0])
						else:
							return 0, 0
					else:
						return 1, int(row[0])
				else:
					return 1, int(row[0])
			else:
				return 1, int(row[0])
		elif devolucion:
			Mensajes().Info(self, u"No se encuentra registrado el cliente:\n%s\n" \
							u"Para solicitar la devoluci�n es necesario\n" \
							u"que se encuentre registrado." % nombre)
			return 0, 0
		elif Mensajes().YesNo(self, u"No se encuentra registrado el beneficiario:\n%s\n" \
							u"Para continuar es necesario registrarlo.\n\n"
							u"� Desea realmente registrar al nuevo beneficiario y grabar la informaci�n ?" \
							% nombre, u"Confirmaci�n"):
			columnas = """
			nombre, banco, sucursal, plaza, clavebancaria, bancocheque, sucursalcheque, plazacheque, cuentacheque
			"""
			if especificacion in ("Spei", "Transferencia o Traspaso"):
				valores = "'%s', '%s', '%s', '%s', '%s', '', '', '', ''" % \
						(nombre, str(bancodestino), str(sucursaldestino), str(plazadestino), str(clavebancariadestino))
			elif especificacion in ("Cheque", "Cheque Certificado", "Cheque de Caja"):
				valores = "'%s', '', '', '', '', '%s', '%s', '%s', '%s'" % \
						(nombre, str(bancodestino), str(sucursaldestino), str(plazadestino), str(clavebancariadestino))
			else:
				valores = "'%s', '', '', '', '', '', '', '', ''" % nombre
			sql = "insert into gixbeneficiarios (%s) values (%s)" % (columnas, valores)
			queTal =  self.QueryUpdateRecord(sql)
			if queTal:
				sql = "select max(idbeneficiario) from gixbeneficiarios"
				cu = r_cn.cursor()
				cu.execute(str(sql))
				row = fetchone(cu)
				cu.close()
				if row is not None:
					return 2, int(row[0])
				else:
					return 0, 0
			else:
				return 0, 0
		else:
			return 0, 0
			
	def OnAgregarDetalle(self, event):
		self.agregar, self.NewFlag, self.modoedicion = True, True, True
		self.estoyenobtenerbancobeneficiario = False
		self.idcheque = 0
		self.GetControl(self.idlcpartidas).ClearAll()
		self.GetControl(self.idtctotalcheque).SetValue("")
		self.GetControl(self.idtctotalcheque).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(self.idtxtotalcheque).SetLabel("")
		for id, tipo in self.controles_de_captura:
			self.GetControl(id).Enable(True)
		for k, id in self.controles_tipo_txt.iteritems():
			control = self.GetControl(id)
			control.SetValue("")
			if k in self.coloreable:
				control.SetBackgroundColour(wx.GREEN)
			else:
				control.SetBackgroundColour(wx.WHITE)
			control.Refresh()
		for k,id in self.controles_tipo_combo.iteritems():
			control = self.GetControl(id)
			control.Clear()
			control.SetBackgroundColour(wx.WHITE)
			control.Refresh()
		control = self.GetControl(self.idckestimacion)
		control.SetBackgroundColour(wx.WHITE)
		control.SetValue(False)
		control.Refresh()
		usuario, area = self.ObtenerUsuarioArea()
		usuarioarea = u"%s (%s)  -  %s" % (usuario, self.usuario.decode("iso8859-1"), area)
		self.GetNextUserStatus()
		self.GetControl(self.idtcidcheque).SetValue("Nueva")
		self.GetControl(self.idtxusuarioarea).SetLabel(usuarioarea)
		self.GetControl(self.idchprogramacion).SetSelection(0)
		self.GetControl(self.idchestatus).SetSelection(0)
		self.estatus = "S"
		self.GetControl(self.idchanexo).SetSelection(0)
		self.GetControl(self.idchespecificaciones).SetSelection(0)
		self.GetControl(self.idchprogramacion).SetBackgroundColour(wx.CYAN)
		self.GetControl(self.idchestatus).SetBackgroundColour(wx.CYAN)
		self.GetControl(self.idchanexo).SetBackgroundColour(wx.CYAN)
		self.GetControl(self.idchespecificaciones).SetBackgroundColour(wx.CYAN)
		self.GetControl(self.idchbancoorigen).Clear()
		for v in self.controles_tipo_txt.itervalues():
			self.originales[v] = ""
		for v in self.controles_tipo_choice.itervalues():
			self.originales[v] = ""
		for v in self.controles_tipo_combo.itervalues():
			self.originales[v] = ""
		self.originales[self.idckestimacion] = ""
		self.empresaid, self.idbeneficiario, self.idbancoorigen, self.beneficiarionombre, self.pagoestimacion = -1, -1, -1, "", 0
		self.DeshabilitaCombos()
		self.DeshabilitaTextControl()
		self.ObtenerEmpresas()
		self.GetControl(self.idtcbeneficiario).SetValue("")
		wx.BeginBusyCursor()
		if self.devolucionsaldo:
			self.GetControl(self.idtgbeneficiariodevolucion).SetValue(True)
			self.GetControl(self.idtgbeneficiariodevolucion).Enable(False)
			self.ToggleBeneficiarioDevolucion(u"Devoluci�n", u"Utilizar esta Solicitud de Cheque para Devoluci�n de " \
			                                  u"Saldo a Favor", True, False)
			self.ObtenerBeneficiarios(False)
		else:
			self.GetControl(self.idtgbeneficiariodevolucion).SetValue(False)
			self.GetControl(self.idtgbeneficiariodevolucion).Enable(True)
			self.ToggleBeneficiarioDevolucion(u"Solicitud", u"Utilizar esta Solicitud de Cheque por Concepto " \
			                                  u"Diferente a Devoluci�n de Saldo a Favor", False, True)
			self.ObtenerBeneficiarios()
		wx.EndBusyCursor()
		self.CalculaFechaCaptura()
		self.CalculaFechaProgramada()
		self.GetControl(self.idlcpartidas).Enable(False)
		self.GetControl(self.idbtaplicarform).Enable(True)
		self.GetControl(self.idbtaceptarform).Enable(True)
		self.GetControl(self.idbbagregarpartida).Enable(False)
		self.GetControl(self.idbbguardarpartida).Enable(False)
		self.GetControl(self.idbbeliminarpartida).Enable(False)
		self.ActiveNoteBook(self.idnbform)
		#if wx.Platform == '__WXMAC__':
			#self.GetControl(self.idnbform).SetSize(wx.Size(943, 800))
			
		control = self.GetControl(self.activecontrolafternewrecord)
		control.SetFocus()
		if self.usuario == "ELIZABETH" and not self.devolucionsaldo:
			Mensajes().Info(self, u"Eli, si esta solicitud de cheque es para una\n" \
			                u"devoluci�n de saldo a favor, recuerda que\n" \
			                u"debe ser elaborada en el m�dulo de ventas,\n" \
			                u"Solicitud de Devoluci�n de Saldo a Favor.", u"Recordatorio para Elizabeth")
		
	def CalculaFechaCaptura(self):
		sql = "select convert(varchar(10), getdate(), 103)"
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		self.GetControl(self.idtcfechacaptura).SetValue(str(row[0]))
		
	def CalculaFechaProgramada(self):
		week_day_sum = {0:11, 1:10, 2:9, 3:8, 4:7, 5:13, 6:12}
		fechacaptura = self.GetControl(self.idtcfechacaptura).GetValue()
		server_dy, server_mo, server_yr = fechacaptura.split('/')
		server_date = "'%04d/%02d/%02d'" % (int(server_yr), int(server_mo), int(server_dy))
		start_date = date(int(server_yr), int(server_mo), int(server_dy))
		week_day = date.weekday(start_date)
		sql = """
		select convert(varchar(10), dateadd(day, %s, %s), 103)
		""" % (week_day_sum[week_day], server_date)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		self.GetControl(self.idtcfechaprogramada).SetValue(str(row[0]))
		
	def OcultaSubpartidas(self, subpartidas):
		for partida in subpartidas:
			if partida == 0:
				self.centrocostoid = -1
				self.GetControl(self.idsbpartida).Show(False)
				self.partidaafectable = 0
			elif partida == 1:
				self.partida = -1
				self.GetControl(self.idsbpartida).Show(False)
				self.partidaafectable = 0
			elif partida == 2:
				self.subpartida1 = -1
				self.GetControl(self.idsbsubpartida1).Show(False)
				self.subpartida1afectable = 0
			elif partida == 3:
				self.subpartida2 = -1
				self.GetControl(self.idsbsubpartida2).Show(False)
				self.subpartida2afectable = 0
			elif partida == 4:
				self.subpartida3 = -1
				self.GetControl(self.idsbsubpartida3).Show(False)
				self.subpartida3afectable = 0
			elif partida == 5:
				self.subpartida4 = -1
				self.GetControl(self.idsbsubpartida4).Show(False)
				self.subpartida4afectable = 0
			elif partida == 6:
				self.subpartida5 = -1
				self.GetControl(self.idsbsubpartida5).Show(False)
				self.subpartida5afectable = 0
			
	def DeshabilitaCombos(self, iniciolimpia = 1, iniciodeshabilita = 1, indice = 0):
		for orden, idtx, idcb in self.controles_cb_deshabilitados:
			control = self.GetControl(idcb)
			if orden >= iniciolimpia:
				control.Clear()
				if wx.Platform == "__WXMAC__":
					control.SetEditable(True)
					control.SetValue("")
					control.SetEditable(False)
			if orden >= iniciodeshabilita:
				self.GetControl(idtx).Enable(False)
				control.Enable(False)
				
		if self.modoedicion:
			if indice == 0:
				self.OcultaSubpartidas(subpartidas = (0,1,2,3,4,5,6))
			elif indice == 1:
				self.OcultaSubpartidas(subpartidas = (1,2,3,4,5,6))
			elif indice == 2:
				self.OcultaSubpartidas(subpartidas = (2,3,4,5,6))
			elif indice == 3:
				self.OcultaSubpartidas(subpartidas = (3,4,5,6))
			elif indice == 4:
				self.OcultaSubpartidas(subpartidas = (4,5,6))
			elif indice == 5:
				self.OcultaSubpartidas(subpartidas = (5,6))
			elif indice == 6:
				self.subpartida5 = -1
				self.GetControl(self.idsbsubpartida5).Show(False)
				self.subpartida5afectable = 0
			
	def DeshabilitaTextControl(self):
		if self.idbeneficiario != -1 or self.beneficiarionombre:
			self.GetControl(self.idtxespecificaciones).Enable(True)
			self.GetControl(self.idchespecificaciones).Enable(True)
			if self.usuario in ("ADRIANA", "MARTHA", "JUAN", "ARAMOS", "SERGIO", "JORGE RIOS", "CESAR"):
				self.GetControl(self.idtxestimacion).Enable(True)
				self.GetControl(self.idckestimacion).Enable(True)
				self.GetControl(self.idtxbancoorigen).Enable(True)
				self.GetControl(self.idchbancoorigen).Enable(True)
				self.GetControl(self.idtxnumerochequeorigen).Enable(True)
				self.GetControl(self.idtcnumerochequeorigen).Enable(True)
			else:
				self.GetControl(self.idtxestimacion).Enable(False)
				self.GetControl(self.idckestimacion).Enable(False)
				self.GetControl(self.idtxbancoorigen).Enable(False)
				self.GetControl(self.idchbancoorigen).Enable(False)
				self.GetControl(self.idtxnumerochequeorigen).Enable(False)
				self.GetControl(self.idtcnumerochequeorigen).Enable(False)
		else:
			self.GetControl(self.idtxespecificaciones).Enable(False)
			self.GetControl(self.idchespecificaciones).Enable(False)
			self.GetControl(self.idtxestimacion).Enable(False)
			self.GetControl(self.idckestimacion).Enable(False)
			self.GetControl(self.idtxbancoorigen).Enable(False)
			self.GetControl(self.idchbancoorigen).Enable(False)
			self.GetControl(self.idtxnumerochequeorigen).Enable(False)
			self.GetControl(self.idtcnumerochequeorigen).Enable(False)
			self.GetControl(self.idtcnumerochequeorigen).SetValue("")
		for idtx, idtc in self.controles_tc_deshabilitados:
			self.GetControl(idtx).Enable(False)
			self.GetControl(idtc).Enable(False)
			self.GetControl(idtc).SetValue("")
			
	def HabilitaTextControl(self):
		if self.idbeneficiario != -1 or self.beneficiarionombre:
			self.GetControl(self.idtxespecificaciones).Enable(True)
			self.GetControl(self.idchespecificaciones).Enable(True)
			if self.usuario in ("ADRIANA", "MARTHA", "JUAN", "ARAMOS", "SERGIO", "JORGE RIOS", "CESAR"):
				self.GetControl(self.idtxestimacion).Enable(True)
				self.GetControl(self.idckestimacion).Enable(True)
				self.GetControl(self.idtxbancoorigen).Enable(True)
				self.GetControl(self.idchbancoorigen).Enable(True)
				especificacion = self.GetControl(self.idchespecificaciones).GetStringSelection()
				if especificacion in ("Spei", "Transferencia o Traspaso"):
					self.GetControl(self.idtxnumerochequeorigen).Enable(False)
					self.GetControl(self.idtcnumerochequeorigen).Enable(False)
					self.GetControl(self.idtcnumerochequeorigen).SetValue("")
				else:
					self.GetControl(self.idtxnumerochequeorigen).Enable(True)
					self.GetControl(self.idtcnumerochequeorigen).Enable(True)
					self.GetControl(self.idtcnumerochequeorigen).SetValue("")
			else:
				self.GetControl(self.idtxestimacion).Enable(False)
				self.GetControl(self.idckestimacion).Enable(False)
				self.GetControl(self.idtxbancoorigen).Enable(False)
				self.GetControl(self.idchbancoorigen).Enable(False)
				self.GetControl(self.idtxnumerochequeorigen).Enable(False)
				self.GetControl(self.idtcnumerochequeorigen).Enable(False)
			for idtx, idtc in self.controles_tc_deshabilitados:
				self.GetControl(idtx).Enable(True)
				self.GetControl(idtc).Enable(True)
		else:
			self.GetControl(self.idtxespecificaciones).Enable(False)
			self.GetControl(self.idchespecificaciones).Enable(False)
			self.GetControl(self.idtxestimacion).Enable(False)
			self.GetControl(self.idckestimacion).Enable(False)
			self.GetControl(self.idtxbancoorigen).Enable(False)
			self.GetControl(self.idchbancoorigen).Enable(False)
			self.GetControl(self.idtxnumerochequeorigen).Enable(False)
			self.GetControl(self.idtcnumerochequeorigen).Enable(False)
			self.GetControl(self.idtcnumerochequeorigen).SetValue("")
			for idtx, idtc in self.controles_tc_deshabilitados:
				self.GetControl(idtx).Enable(False)
				self.GetControl(idtc).Enable(False)
				self.GetControl(idtc).SetValue("")
		
	def OnSalirDetalle(self, event):
		if self.currentitem is not None:
			self.LCtrl()
			self.idcheque = self.GetControl(self.idtcidcheque).GetValue()
			if self.idcheque.strip() != "Nueva":
				sql = """
				update %s set cantidad = %s where idcheque = %s
				""" % (self.dbtable, float(self.totalcheque), self.idcheque)
				if self.QueryUpdateRecord(sql):
					self.FillListCtrl()
					lctrl = self.GetControl(self.idlc)
					lctrl.SetItemState(self.currentitem, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
				else:
					Mensajes().Info(self, u"Problemas al actualizar el total del cheque", u"Atenci�n")
		self.SalirDetalle()
			
	def SalirDetalle(self):
		if self.AceptarDetalle(salirdetalle = True):
			self.connlite.close()
			self.ActiveNoteBook(self.idnblistctrl)
			self.GetControl(self.idlc).SetFocus()
		
	def DespliegaCombo(self, id, valor):
		combo = self.GetControl(id)
		for inx in range(0, combo.GetCount()):
			if valor == combo.GetClientData(inx):
				combo.SetSelection(inx)
				break
			
	def ObtenerPartida(self, row):
		partida = 0
		for inx in range(3,8):
			if asignaMenosUno(int(row[inx])) < 0:
				partida = int(row[inx-1])
				break
			elif inx == 7:
				partida = int(row[inx])
				
		if partida > 0:
			sql = """
			select Descripcion, Afectable from gixpartidasegresos where PartidaID = %s
			""" % partida
			cu = r_cn.cursor()
			cu.execute(str(sql))
			fila = fetchone(cu)
			cu.close()
			if fila:
				if int(fila[1]):
					return self.GetString(fila[0])
				else:
					return str("Partida No Afectable")
			else:
				return str("Partida Inexistente")
		else:
			return str("Error")
		
	def OnAgregarPartida(self, event):
		self.nuevapartida = True
		for id in self.controles_cb_partidas:
			control = self.GetControl(id)
			control.Clear()
			control.SetBackgroundColour(wx.WHITE)
			control.Refresh()
			self.originales[id] = ""
		self.GetControl(self.idtccantidad).SetValue("")
		self.GetControl(self.idtccantidad).SetBackgroundColour(wx.WHITE)
		self.originales[self.idtccantidad] = ""
		self.modoedicion = True
		self.DeshabilitaCombos(2, 2, 0)
		self.modoedicion = False
		self.ObtenerCentrosCostos()
		self.GetControl(self.idbtaplicarform).Enable(False)
		self.GetControl(self.idbtaceptarform).Enable(False)
		self.GetControl(self.idbbagregarpartida).Enable(False)
		self.GetControl(self.idbbguardarpartida).Enable(True)
		self.GetControl(self.idcbcentrocosto).SetFocus()
		self.GetControl(self.idchestatus).Enable(False)
	
	def OnGuardarPartida(self, event):
		if self.AceptarDetalle(validacantidad = False):
			if self.nuevapartida:
				self.AddPartida()
			else:
				self.UpdatePartida()
			self.modoedicion = True
			self.EditRecord()
			self.modoedicion = False
			self.GetControl(self.idbbagregarpartida).SetFocus()
			
	def UpdatePartida(self):
		if self.EliminarPartida(update = True):
			if self.AddPartida(update = True):
				estatusch = self.GetControl(self.idchestatus).GetStringSelection()
				if estatusch in ("Fondeado", "Cobrado"):
					Mensajes().Info(self, u"La solicitud se encuentra en estatus de %s, por lo tanto,\n" \
									u"se han afectado los saldos de las partidas." % estatusch, u"Atenci�n")
				contenido = u"Edici�n de la partida %s" % self.idpartida
				sql = """
				insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension)
				values ('%s', getdate(), '%s', '%s', '%s', '%s')
				""" % (self.BlogGUID, self.usuario, contenido, "", "")
				if not self.QueryUpdateRecord(sql):
					Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
	
	def AddPartida(self, update = False):
		partida = asignaMenosUno(int(self.partida)); subpartida1 = asignaMenosUno(int(self.subpartida1))
		subpartida2 = asignaMenosUno(int(self.subpartida2)); subpartida3 = asignaMenosUno(int(self.subpartida3))
		subpartida4 = asignaMenosUno(int(self.subpartida4)); subpartida5 = asignaMenosUno(int(self.subpartida5))
		cantidad = self.GetControl(self.idtccantidad).GetValue().strip()
		if not update:
			sql = """
			insert into gixegresoschequespartidas
			(idcheque, centrocostoid, partida, subpartida1, subpartida2, subpartida3, subpartida4, subpartida5, cantidad)
			values (%s, %s, %s, %s, %s, %s, %s, %s, %s)
			""" % (int(self.idcheque), int(self.centrocostoid), asignaMenosUno(self.partida),
			       asignaMenosUno(self.subpartida1), asignaMenosUno(self.subpartida2),
			       asignaMenosUno(self.subpartida3), asignaMenosUno(self.subpartida4),
			       asignaMenosUno(self.subpartida5), float(cantidad))
			sqlmax = "select max(idchequepartida) from gixegresoschequespartidas"
			queTal, idchequepartida = self.QueryUpdateRecord(sql, sqlmax, True)
			if not queTal:
				return False
			elif not idchequepartida:
				Mensajes().Info(self, u"Problemas al buscar la nueva partida.\n\n%s" % sql, u"Atenci�n")
				return False
		else:
			sql = """
			update gixegresoschequespartidas set centrocostoid = %s, partida = %s, subpartida1 = %s, subpartida2 = %s,
			subpartida3 = %s, subpartida4 = %s, subpartida5 = %s, cantidad = %s
			where idchequepartida = %s
			""" % (int(self.centrocostoid), asignaMenosUno(self.partida), asignaMenosUno(self.subpartida1),
			       asignaMenosUno(self.subpartida2), asignaMenosUno(self.subpartida3),
			       asignaMenosUno(self.subpartida4), asignaMenosUno(self.subpartida5), float(cantidad), self.idpartida)
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"Problemas al actualizar la partida.", u"Atenci�n")
				return False
		
		estatusch = self.GetControl(self.idchestatus).GetStringSelection()
		if estatusch in ("Fondeado", "Cobrado"):
			try:
				fecha_dia, fecha_mes, fecha_ano = self.fechaprogramada.split('/')
				fecha_ano, fecha_mes, fecha_dia = int(fecha_ano), int(fecha_mes), int(fecha_dia)
				fechaprogramada = "%04d/%02d/%02d" % (fecha_ano, fecha_mes, fecha_dia)
			except:
				Mensajes().Info(self, u"Problemas con la fecha al actualizar saldos.\n\n" \
								u"Solicitud: %s, Fecha Programada: %s\n\n" \
								u"� No fu� afectada la partida, tome nota y revise !" \
								% (self.idcheque, self.fechaprogramada), u"Atenci�n")
				return False
			if not update:
				Mensajes().Info(self, u"La solicitud se encuentra en estatus de %s, por lo tanto,\n" \
								u"se afectar� el saldo de la partida agregada." % estatusch, u"Atenci�n")
			for partidaid in (partida, subpartida1, subpartida2, subpartida3, subpartida4, subpartida5):
				if partidaid < 0:
					break
				elif not self.ActualizaSaldoPartida(self.idcheque, partidaid, fechaprogramada, cantidad):
						Mensajes().Info(self, u"� Se detectaron problemas al actualizar partidas !\n\n" \
										u"Solicitud: %s, Partida: %s, Fecha Programada: %s, Cantidad: %s\n\n" \
										u"� Tome nota y revise !" \
										% (idcheque, partidaid, fechaprogramada, cantidad), u"Atenci�n")
		if not update:
			contenido = u"Se agrega nueva partida %s" % idchequepartida
			sql = """
			insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension)
			values ('%s', getdate(), '%s', '%s', '%s', '%s')
			""" % (self.BlogGUID, self.usuario, contenido, "", "")
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
		
		return True
				
	def OnEliminarPartida(self, event):
		sql = "select count(*) from gixegresoschequespartidas where idcheque = %s" % self.idcheque
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)[0]
		cu.close()
		if int(row) > 1:
			if Mensajes().YesNo(self,u"� Desea realmente eliminar la partida %s ?" % self.idpartida, u"Confirmaci�n"):
				if self.EliminarPartida():
					self.FillListCtrlPartidas()
		elif int(row) == 1:
			Mensajes().Info(self, u"No es posible eliminar la partida, recuerde que la solicitud\n" \
							u"debe al menos afectar a una partida.\n" \
							u"Si la partida no es la correcta, entonces modifiquela.", u"Atenci�n")
		else:
			Mensajes().Info(self, u"� No hay partida que afectar !", u"Atenci�n")
			
	def EliminarPartida(self, update = False):
		estatusch = self.GetControl(self.idchestatus).GetStringSelection()
		if estatusch in ("Fondeado", "Cobrado"):
			try:
				fecha_dia, fecha_mes, fecha_ano = self.fechaprogramada.split('/')
				fecha_ano, fecha_mes, fecha_dia = int(fecha_ano), int(fecha_mes), int(fecha_dia)
				fechaprogramada = "%04d/%02d/%02d" % (fecha_ano, fecha_mes, fecha_dia)
			except:
				Mensajes().Info(self, u"Problemas con la fecha al actualizar saldos.\n\n" \
								u"Solicitud: %s, Fecha Programada: %s\n\n" \
								u"� No fu� afectada la partida, tome nota y revise !" \
								% (self.idcheque, self.fechaprogramada), u"Atenci�n")
				return False
			sql = """
			select partida, subpartida1, subpartida2, subpartida3, subpartida4, subpartida5, cantidad
			from gixegresoschequespartidas where idchequepartida = %s
			""" % self.idpartida
			cu = r_cn.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			cu.close()
			partida = int(row[0]); subpartida1 = int(row[1]); subpartida2 = int(row[2])
			subpartida3 = int(row[3]); subpartida4 = int(row[4]); subpartida5 = int(row[5])
			cantidad = float(row[6]) * float(-1)
			if not update:
				Mensajes().Info(self, u"La solicitud se encuentra en estatus de %s, por lo tanto,\n" \
								u"se afectar� el saldo de la partida eliminada." % estatusch, u"Atenci�n")
			for partidaid in (partida, subpartida1, subpartida2, subpartida3, subpartida4, subpartida5):
				if partidaid < 0:
					break
				elif not self.ActualizaSaldoPartida(self.idcheque, partidaid, fechaprogramada, cantidad):
						Mensajes().Info(self, u"� Se detectaron problemas al actualizar partidas !\n\n" \
										u"Solicitud: %s, Partida: %s, Fecha Programada: %s, Cantidad: %s\n\n" \
										u"� Tome nota y revise !" \
										% (self.idcheque, partidaid, fechaprogramada, cantidad), u"Atenci�n")
		if not update:
			try:
				sql = "delete from gixegresoschequespartidas where idchequepartida = %s" % self.idpartida
				cu = r_cn.cursor()
				cu.execute(str(sql))
				cu.close()
				r_cn.commit()
			except:
				r_cn.rollback()
				Mensajes().Info(self, u"Sucedi� algo que impidi� eliminar la partida %s\n\n%s" \
								% (self.idpartida, sql), u"Atenci�n")
				return False
			
			contenido = u"Eliminaci�n de la partida %s" % self.idpartida
			sql = """
			insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText,
			ContenidoBinario, Extension) values ('%s', getdate(), '%s', '%s', '%s', '%s')
			""" % (self.BlogGUID, self.usuario, contenido, "", "")
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
		
		return True
	
	def OnLCtrlPartidas(self, event):
		self.nuevapartida = False
		if not self.modoedicion:
			self.DeshabilitaCombos()
		lctrl = self.GetControl(self.idlcpartidas)
		self.currentitempartidas = event.m_itemIndex
		datointerno = lctrl.GetItem(self.currentitempartidas, 0).GetText()
		try:
			self.idpartida = int(str(datointerno).split(".")[0])
		except:
			self.idpartida = int(str(datointerno))
		
		#self.idpartida = int(datointerno)
		sql = """
		select centrocostoid, partida, subpartida1, subpartida2, subpartida3, subpartida4, subpartida5, cantidad
		from gixegresoschequespartidas where idchequepartida = %s
		""" % self.idpartida
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row:
			self.centrocostoid = int(row[0]); self.partida = int(row[1]); self.subpartida1 = int(row[2])
			self.subpartida2 = int(row[3]); self.subpartida3 = int(row[4])
			self.subpartida4 = int(row[5]); self.subpartida5 = int(row[6])
			self.cantidad = float(row[7])
			if not self.modoedicion:
				self.EditRecord()
				self.RevisaCambios()
		else:
			Mensajes().Info(self, u"No se encontro la partida elegida\n\n%s" % sql, u"Atenci�n")
		event.Skip()

	def FillListCtrlPartidas(self, display = 'first'):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(self.idlcpartidas)
		lctrl.Enable(False)
		lctrl.Show(False)
		lctrl.ClearAll()
		sql = """
		select idchequepartida, cantidad, centrocostoid, partida,
		subpartida1, subpartida2, subpartida3, subpartida4, subpartida5
		from gixegresoschequespartidas where idcheque = %s order by idchequepartida desc
		""" % self.idcheque
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		fila, self.totalcheque = 0, 0
		if rows:
			lctrl.InsertColumn(0, "Id", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, "Cantidad", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(2, "Partida / Subpartida")
			for row in rows:
				if fila %2 != 0: bgcolor = [204,204,255]
				else:            bgcolor = [230,230,255]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, str(amount_and_cents_with_commas(row[1])))
				lctrl.SetStringItem(index, 2, self.ObtenerPartida(row))
				lctrl.SetItemData(index, row[0])
				fila += 1
				self.totalcheque += float(row[1])
				
			lctrl.SetColumnWidth(0, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(2, wx.LIST_AUTOSIZE)
			lctrl.SetItemState(0, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
		else:
			lctrl.InsertColumn(0, "Sin Partidas", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 100)
			
		control = self.GetControl(self.idtctotalcheque)
		control.SetBackgroundColour(wx.Colour(153,255,153))
		amount = amount_and_cents_with_commas(self.totalcheque)
		control.SetValue(str(amount).rjust(20))
		self.GetControl(self.idtxtotalcheque).SetLabel(str(c2p(self.totalcheque).texto()))
		#lctrl.SetItemState(0, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
		lctrl.Show(True)
		lctrl.Enable(True)
		wx.EndBusyCursor()

	def OnEditRecord(self, event):
		self.GetControl(self.idtcbeneficiario).SetValue("")
		self.modoedicion = True
		self.EditRecord()
		self.modoedicion = False
		
	def EditRecord(self):
		if self.modoedicion:
			for id, tipo in self.controles_de_captura:
				self.GetControl(id).Enable(True)
			self.GetControl(self.idbbespecificaciones).Enable(True)
			self.GetRecord(record = self.datointerno)
			
		self.DeshabilitaCombos()
		if self.modoedicion:
			self.FillListCtrlPartidas()
			self.agregar = False
			self.FillingARecord = True
			for k, id in self.controles_tipo_txt.iteritems():
				control = self.GetControl(id); control.SetValue("")
				if k in self.coloreable:
					control.SetBackgroundColour(wx.GREEN)
				else:
					control.SetBackgroundColour(wx.WHITE)
				control.Refresh()
			for k, id in self.controles_tipo_combo.iteritems():
				control = self.GetControl(id)
				control.Clear()
				control.SetBackgroundColour(wx.WHITE)
				control.Refresh()
			for id in self.controles_tipo_choice.itervalues():
				self.GetControl(id).SetBackgroundColour(wx.WHITE)
				self.GetControl(id).Refresh()
			control = self.GetControl(self.idckestimacion)
			control.SetBackgroundColour(wx.WHITE)
			control.SetValue(False)
			control.Refresh()
			
		self.GetControl(self.idsbpartida).Show(False); self.GetControl(self.idsbsubpartida1).Show(False)
		self.GetControl(self.idsbsubpartida2).Show(False); self.GetControl(self.idsbsubpartida3).Show(False)
		self.GetControl(self.idsbsubpartida4).Show(False); self.GetControl(self.idsbsubpartida5).Show(False)
		self.partidaafectable, self.subpartida1afectable, self.subpartida2afectable = 0,0,0
		self.subpartida3afectable, self.subpartida4afectable, self.subpartida5afectable = 0,0,0
		if self.modoedicion:
			usuario, area = self.ObtenerUsuarioArea()
			#usuarioarea = u"%s (%s)  -  %s" % (usuario.decode("iso8859-1"), self.usuariosolicitante.decode("iso8859-1"), \
			                                   #area.decode("iso8859-1"))
			usuarioarea = u"%s (%s)  -  %s" % (usuario, self.GetString(self.usuariosolicitante), area)
			self.GetControl(self.idtxusuarioarea).SetLabel(usuarioarea)
			self.GetControl(self.idtcfechacaptura).SetValue(self.fechacaptura)
			self.GetControl(self.idtcidcheque).SetValue(str(self.idcheque))
			if self.tipoprogramacion == "N":
				self.GetControl(self.idchprogramacion).SetSelection(0)
				self.GetControl(self.idtcfechaprogramada).SetEditable(False)
				self.GetControl(self.idtcfechaprogramada).SetBackgroundColour(wx.GREEN)
				self.GetControl(self.idbbelegirfechaprogramada).Enable(False)
			else:
				self.GetControl(self.idchprogramacion).SetSelection(1)
				self.GetControl(self.idtcfechaprogramada).SetEditable(True)
				self.GetControl(self.idtcfechaprogramada).SetBackgroundColour(wx.WHITE)
				self.GetControl(self.idbbelegirfechaprogramada).Enable(True)
			self.GetControl(self.idtcfechaprogramada).SetValue(self.fechaprogramada)
			estatusactual = self.estatus
			self.GetNextUserStatus(False, estatusactual)
			self.GetControl(self.idchestatus).SetSelection(0)
			self.ObtenerEmpresas(); self.DespliegaCombo(self.idcbempresa, self.empresaid)
		
		self.ObtenerCentrosCostos(); self.DespliegaCombo(self.idcbcentrocosto, self.centrocostoid)
		self.ObtenerPartidas(); self.DespliegaCombo(self.idcbpartida, self.partida)
		self.partidaafectable = self.ObtenerPartidaAfectable(self.partida)
		if self.partidaafectable:
			self.GetControl(self.idsbpartida).Show(True)
			self.partidaafectable = 1
		elif self.subpartida1 > 0:
			self.ObtenerSubpartidas(self.partida, 1)
			self.DespliegaCombo(self.idcbsubpartida1, self.subpartida1)
			self.partidaafectable = self.ObtenerPartidaAfectable(self.subpartida1)
			if self.partidaafectable:
				self.GetControl(self.idsbsubpartida1).Show(True)
				self.subpartida1afectable = 1
			elif self.subpartida2 > 0:
				self.ObtenerSubpartidas(self.subpartida1, 2)
				self.DespliegaCombo(self.idcbsubpartida2, self.subpartida2)
				self.partidaafectable = self.ObtenerPartidaAfectable(self.subpartida2)
				if self.partidaafectable:
					self.GetControl(self.idsbsubpartida2).Show(True)
					self.subpartida2afectable = 1
				elif self.subpartida3 > 0:
					self.ObtenerSubpartidas(self.subpartida2, 3)
					self.DespliegaCombo(self.idcbsubpartida3, self.subpartida3)
					self.partidaafectable = self.ObtenerPartidaAfectable(self.subpartida3)
					if self.partidaafectable:
						self.GetControl(self.idsbsubpartida3).Show(True)
						self.subpartida3afectable = 1
					elif self.subpartida4 > 0:
						self.ObtenerSubpartidas(self.subpartida3, 4)
						self.DespliegaCombo(self.idcbsubpartida4, self.subpartida4)
						self.partidaafectable = self.ObtenerPartidaAfectable(self.subpartida4)
						if self.partidaafectable:
							self.GetControl(self.idsbsubpartida4).Show(True)
							self.subpartida4afectable = 1
						elif self.subpartida5 > 0:
							self.ObtenerSubpartidas(self.subpartida4, 5)
							self.DespliegaCombo(self.idcbsubpartida5, self.subpartida5)
							self.partidaafectable = self.ObtenerPartidaAfectable(self.subpartida5)
							if self.partidaafectable:
								self.GetControl(self.idsbsubpartida5).Show(True)
								self.subpartida5afectable = 1
								
		self.GetControl(self.idtccantidad).SetValue(str(float(self.cantidad)))
		if self.modoedicion:
			wx.BeginBusyCursor()
			if self.devolucion == "S":
				self.GetControl(self.idtgbeneficiariodevolucion).SetValue(True)
				if self.devolucionsaldo:
					self.GetControl(self.idtgbeneficiariodevolucion).Enable(False)
				self.ToggleBeneficiarioDevolucion(u"Devoluci�n", u"Utilizar esta Solicitud de Cheque para Devoluci�n de " \
				                                  u"Saldo a Favor", True, False)
				self.ObtenerBeneficiarios(False)
			else:
				self.GetControl(self.idtgbeneficiariodevolucion).SetValue(False)
				self.ToggleBeneficiarioDevolucion(u"Solicitud", u"Utilizar esta Solicitud de Cheque por Concepto " \
												  u"Diferente a Devoluci�n de Saldo a Favor", False, True)
				self.ObtenerBeneficiarios()
			self.DespliegaCombo(self.idcbbeneficiario, self.idbeneficiario)
			wx.EndBusyCursor()
			self.GetControl(self.idtcconcepto).SetValue(self.concepto)
			if self.anexo == "F": anexo = 0
			elif self.anexo == "C": anexo = 1
			elif self.anexo == "P": anexo = 2
			else: anexo = 3
			self.GetControl(self.idchanexo).SetSelection(int(anexo))
			self.GetControl(self.idtcanexoadicional).SetValue(self.anexoadicional)
			self.GetControl(self.idtcobservaciones).SetValue(self.observaciones)
			estatus = self.GetControl(self.idchestatus).GetStringSelection()
			if self.especificaciones == "N": especificacion = 0
			elif self.especificaciones == "E": especificacion = 1
			elif self.especificaciones == "A": especificacion = 2
			elif self.especificaciones == "D": especificacion = 3
			elif self.especificaciones == "S": especificacion = 4
			elif self.especificaciones == "T": especificacion = 5
			self.GetControl(self.idchespecificaciones).SetSelection(especificacion)
			if especificacion in (0, 1, 2, 4, 5):
				self.GetControl(self.idtcbancodestino).SetValue(self.bancodestino)
				self.GetControl(self.idtcsucursaldestino).SetValue(self.sucursaldestino)
				self.GetControl(self.idtcplazadestino).SetValue(self.plazadestino)
				self.GetControl(self.idtcclavebancariadestino).SetValue(self.clavebancariadestino)
				self.HabilitaTextControl()
				self.GetControl(self.idbbespecificaciones).Enable(True)
				self.estoyenobtenerbancobeneficiario = False
			else:
				self.DeshabilitaTextControl()
				self.GetControl(self.idbbespecificaciones).Enable(False)
			pagoestimacion = False
			if self.pagoestimacion == 1:
				pagoestimacion = True
			self.GetControl(self.idckestimacion).SetValue(pagoestimacion)
			self.ObtenerBancosCuentas()
			self.DespliegaCombo(self.idchbancoorigen, self.idbancoorigen)
			self.GetControl(self.idtcnumerochequeorigen).SetValue(self.numerochequeorigen)
			self.agregar = False
			self.LCtrl()
			self.ActiveNoteBook(self.idnbform)
			self.GetControl(self.idcbbeneficiario).SetFocus()
			for v in self.controles_tipo_txt.itervalues():
				self.originales[v] = self.GetControl(v).GetValue()
			for v in self.controles_tipo_choice.itervalues():
				self.originales[v] = self.GetControl(v).GetStringSelection()
			self.originales[self.idckestimacion] = self.pagoestimacion
				
		if not self.modoedicion:
			control = self.GetControl(self.idtccantidad)
			self.originales[self.idtccantidad] = control.GetValue()
			control.SetBackgroundColour(wx.WHITE)
			control.Refresh()
			for trash1, trash2, idcb in self.controles_cb_deshabilitados:
				control = self.GetControl(idcb)
				self.originales[idcb] = control.GetStringSelection()
				control.SetBackgroundColour(wx.WHITE)
				control.Refresh()
		else:
			for v in self.controles_tipo_combo.itervalues():
				self.originales[v] = self.GetControl(v).GetStringSelection()
			self.FillingARecord = False
			if not self.editable:
				for id, tipo in self.controles_de_captura:
					self.GetControl(id).Enable(False)
					self.GetControl(self.idbbespecificaciones).Enable(False)
			else:
				if self.estatus in ("E", "F", "T", "B", "C"):
					self.GetControl(self.idbbespecificaciones).Enable(False)
					for id, tipo in self.controles_de_captura:
						deshabilita = True
						if self.estatus != "C":
							if id == self.idtccantidad:
								deshabilita = False
							else:
								for i, tx, idcb in self.controles_cb_deshabilitados:
									if id == idcb:
										deshabilita = False
										break
						if deshabilita:
							self.GetControl(id).Enable(False)
					if self.estatus != "B":
						self.GetControl(self.idchestatus).Enable(True)
			if self.estatus == "C":
				self.GetControl(self.idlcpartidas).Enable(False)
				self.GetControl(self.idbbagregarpartida).Enable(False)
				self.GetControl(self.idbbguardarpartida).Enable(False)
				self.GetControl(self.idbbeliminarpartida).Enable(False)
			else:
				self.GetControl(self.idlcpartidas).Enable(True)
				self.GetControl(self.idbbagregarpartida).Enable(True)
				self.GetControl(self.idbbguardarpartida).Enable(False)
				self.GetControl(self.idbbeliminarpartida).Enable(True)
			self.GetControl(self.idbtaplicarform).Enable(False)
			self.GetControl(self.idbtaceptarform).Enable(False)
			self.GetControl(self.idcbempresa).Enable(False)
			
	def ObtenerUsuarioArea(self):
		if self.agregar:
			usuario = self.usuario
		else:
			usuario = self.usuariosolicitante
		sql = """
		select rtrim(ltrim(u.Nombre)), p.descripcion
		from Usuarios u join gixempleados e on u.Usuario = e.usuario
		join gixpuestos p on e.idempleado = p.idempleado
		where u.Usuario = '%s'
		""" % usuario
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row:
			return self.GetString(row[0]), self.GetString(row[1])
		return "", ""
		
	def ObtenerEmpresas(self):
		control = self.GetControl(self.idcbempresa)
		control.Clear()
		sql = """
		select EmpresaID, Razonsocial from cont_Empresas where activarecfin = 'S' order by RazonSocial
		"""
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(self.GetString(row[1]), int(row[0]))
				
		if wx.Platform == "__WXMAC__":
			control.SetEditable(True)
			control.SetValue("")
			control.SetEditable(False)
		
	def ObtenerCentrosCostos(self):
		self.GetControl(self.idtxcentrocosto).Enable(True)
		control = self.GetControl(self.idcbcentrocosto)
		control.Enable(True)
		control.Clear()
		sql = """
		select CentroCostoID, Descripcion from gixcentroscostos where EmpresaID = %s order by Descripcion
		""" % self.empresaid
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(self.GetString(row[1]), int(row[0]))
				
		if wx.Platform == "__WXMAC__":
			control.SetEditable(True)
			control.SetValue("")
			control.SetEditable(False)
		
	def ObtenerPartidas(self):
		self.GetControl(self.idtxpartida).Enable(True)
		control = self.GetControl(self.idcbpartida)
		control.Enable(True)
		control.Clear()
		sql = """
		select PartidaID, Descripcion from gixpartidasegresos
		where EmpresaID = %s and CentroCostoID = %s and HijaDePartidaID is null and naturaleza = 'E'
		order by Descripcion
		""" % (self.empresaid, self.centrocostoid)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(self.GetString(row[1]), int(row[0]))
		
		if wx.Platform == "__WXMAC__":
			control.SetEditable(True)
			control.SetValue("")
			control.SetEditable(False)
		
	def ObtenerSubpartidas(self, subpartida, numerosubpartida):
		filtrofinal = ""
		if numerosubpartida == 1:
			idtx = self.idtxsubpartida1
			idcb = self.idcbsubpartida1
		elif numerosubpartida == 2:
			idtx = self.idtxsubpartida2
			idcb = self.idcbsubpartida2
		elif numerosubpartida == 3:
			idtx = self.idtxsubpartida3
			idcb = self.idcbsubpartida3
		elif numerosubpartida == 4:
			idtx = self.idtxsubpartida4
			idcb = self.idcbsubpartida4
		elif numerosubpartida == 5:
			idtx = self.idtxsubpartida5
			idcb = self.idcbsubpartida5
			filtrofinal = "and Afectable =  1"
		self.GetControl(idtx).Enable(True)
		control = self.GetControl(idcb)
		control.Enable(True)
		control.Clear()
		sql = """
		select PartidaID, Descripcion from gixpartidasegresos
		where EmpresaID = %s and CentroCostoID = %s and HijaDePartidaID = %s and naturaleza = 'E' %s
		order by Descripcion
		""" % (self.empresaid, self.centrocostoid, subpartida, filtrofinal)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(self.GetString(row[1]), int(row[0]))
				
		if wx.Platform == "__WXMAC__":
			control.SetEditable(True)
			control.SetValue("")
			control.SetEditable(False)
		
	def ObtenerBancosCuentas(self):
		control = self.GetControl(self.idchbancoorigen)
		control.Clear()
		sql = """
		select idbanco, nombre from gixbancos where empresaid = %s order by nombre
		""" % self.empresaid
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(self.GetString(row[1]), int(row[0]))
				
		control.SetSelection(-1)
				
	def ObtenerBancoBeneficiario(self, nombrecombo = "", verificabeneficiario = False):
		if self.GetControl(self.idtgbeneficiariodevolucion).GetValue():
			self.GetControl(self.idtcbancodestino).SetValue("")
			self.GetControl(self.idtcsucursaldestino).SetValue("")
			self.GetControl(self.idtcplazadestino).SetValue("")
			self.GetControl(self.idtcclavebancariadestino).SetValue("")
			return
		elif nombrecombo:
			nombre = nombrecombo
		else:
			nombre = self.GetControl(self.idcbbeneficiario).GetStringSelection()
		sql = """
		select idbeneficiario, nombre, banco, sucursal, plaza, clavebancaria
		from gixbeneficiarios where nombre = '%s'
		""" % nombre.encode("iso8859-1")
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row:
			bancodestino = self.GetControl(self.idtcbancodestino).GetValue().strip()
			sucursaldestino = self.GetControl(self.idtcsucursaldestino).GetValue().strip()
			plazadestino = self.GetControl(self.idtcplazadestino).GetValue().strip()
			clavebancariadestino = self.GetControl(self.idtcclavebancariadestino).GetValue().strip()
			if str(bancodestino) != row[2].strip() or str(sucursaldestino) != row[3].strip() or \
			   str(plazadestino) != row[4].strip() or str(clavebancariadestino) != row[5].strip():
				if Mensajes().YesNo(self, u"Especificaciones del beneficiario:\n%s\n\n" \
									u"Banco: %s\nSucursal: %s\nPlaza: %s\nClave Bancaria: %s\n\n" \
									u"� Desea utilizar las especificaciones registradas del beneficiario\n" \
									u"para spei, transferencias o traspasos ?" \
									% (nombre.strip(), row[2].strip(), row[3].strip(), row[4].strip(), row[5].strip()), \
									u"Confirmaci�n"):
					self.GetControl(self.idtcbancodestino).SetValue(str(row[2]))
					self.GetControl(self.idtcsucursaldestino).SetValue(str(row[3]))
					self.GetControl(self.idtcplazadestino).SetValue(str(row[4]))
					self.GetControl(self.idtcclavebancariadestino).SetValue(str(row[5]))
			elif verificabeneficiario:
				Mensajes().Info(self, u"Especificaciones del beneficiario:\n%s\n\n" \
								u"Banco: %s\nSucursal: %s\nPlaza: %s\nClave Bancaria: %s" \
								% (nombre.strip(), row[2].strip(), row[3].strip(), row[4].strip(), row[5].strip()), \
								u"Informaci�n")
		else:
			self.GetControl(self.idtcbancodestino).SetValue("")
			self.GetControl(self.idtcsucursaldestino).SetValue("")
			self.GetControl(self.idtcplazadestino).SetValue("")
			self.GetControl(self.idtcclavebancariadestino).SetValue("")
		
	def ObtenerBancoBeneficiarioCheque(self, nombrecombo = "", verificabeneficiario = False):
		if self.GetControl(self.idtgbeneficiariodevolucion).GetValue():
			self.GetControl(self.idtcbancodestino).SetValue("")
			self.GetControl(self.idtcsucursaldestino).SetValue("")
			self.GetControl(self.idtcplazadestino).SetValue("")
			self.GetControl(self.idtcclavebancariadestino).SetValue("")
			return
		elif nombrecombo:
			nombre = nombrecombo
		else:
			nombre = self.GetControl(self.idcbbeneficiario).GetStringSelection()
		sql = """
		select idbeneficiario, nombre, bancocheque, sucursalcheque, plazacheque, cuentacheque
		from gixbeneficiarios where nombre = '%s'
		""" % nombre.encode("iso8859-1")
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row:
			bancodestino = self.GetControl(self.idtcbancodestino).GetValue().strip()
			sucursaldestino = self.GetControl(self.idtcsucursaldestino).GetValue().strip()
			plazadestino = self.GetControl(self.idtcplazadestino).GetValue().strip()
			clavebancariadestino = self.GetControl(self.idtcclavebancariadestino).GetValue().strip()
			if str(bancodestino) != row[2].strip() or str(sucursaldestino) != row[3].strip() or \
			   str(plazadestino) != row[4].strip() or str(clavebancariadestino) != row[5].strip():
				if Mensajes().YesNo(self, u"Especificaciones del beneficiario:\n%s\n\n" \
									u"Banco: %s\nSucursal: %s\nPlaza: %s\nCuenta: %s\n\n" \
									u"� Desea utilizar las especificaciones registradas del beneficiario\n" \
									u"para deposito en cuenta de cheques ?" \
									% (nombre.strip(), row[2].strip(), row[3].strip(), row[4].strip(), row[5].strip()), \
									u"Confirmaci�n"):
					self.GetControl(self.idtcbancodestino).SetValue(str(row[2]))
					self.GetControl(self.idtcsucursaldestino).SetValue(str(row[3]))
					self.GetControl(self.idtcplazadestino).SetValue(str(row[4]))
					self.GetControl(self.idtcclavebancariadestino).SetValue(str(row[5]))
			elif verificabeneficiario:
				Mensajes().Info(self, u"Especificaciones del beneficiario:\n%s\n\n" \
								u"Banco: %s\nSucursal: %s\nPlaza: %s\nCuenta: %s" \
								% (nombre.strip(), row[2].strip(), row[3].strip(), row[4].strip(), row[5].strip()), \
								u"Informaci�n")
		else:
			self.GetControl(self.idtcbancodestino).SetValue("")
			self.GetControl(self.idtcsucursaldestino).SetValue("")
			self.GetControl(self.idtcplazadestino).SetValue("")
			self.GetControl(self.idtcclavebancariadestino).SetValue("")
		
	def ObtenerBeneficiarios(self, beneficiario = True):
		self.codigodocumento = []
		control = self.GetControl(self.idcbbeneficiario)
		control.Enable(False)
		control.Show(False)
		control.Clear()
		if beneficiario:
			sql = """
			select idbeneficiario, nombre from gixbeneficiarios order by nombre
			"""
		else:
			sql = """
			select codigo, nombre from CLIENTE order by nombre
			"""
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			self.connlite = sqlite3.connect(':memory:')
			self.culite = self.connlite.cursor()
			self.culite.execute("""create table beneficiario (idbeneficiario integer, nombre text)""")
			for row in rows:
				control.Append(self.GetString(row[1]), int(row[0]))
				fila = (int(row[0]), self.GetString(row[1]))
				self.culite.execute("insert into beneficiario values (?,?)", fila)
			self.connlite.commit()
			#self.culite.close()
			#self.connlite.close()
				
		control.Show(True)
		control.Enable(True)
		control.SetSelection(False)
				
	def GetNextUserStatus(self, nuevasolicitud = True, estatusactual = "S"):
		control = self.GetControl(self.idchestatus)
		control.Clear()
		if nuevasolicitud:
			control.Append("Solicitud", 1)
		else:
			if self.usuario in ("ADRIANA", "JUAN", "ARAMOS", "SERGIO", "MARTHA", "CESAR"):
				if estatusactual == "S":
					control.Append("Solicitud", 1)
					control.Append("Revisado", 2)
					control.Append("Cancelado", 3)
				elif estatusactual == "R":
					control.Append("Revisado", 1)
					control.Append("Autorizado", 2)
					control.Append("Cancelado", 3)
				elif estatusactual == "A":
					control.Append("Autorizado", 1)
					control.Append("Elaborado", 2)
					control.Append("Cancelado", 3)
				elif estatusactual == "E":
					control.Append("Elaborado", 1)
					control.Append("Cancelado", 2)
				elif estatusactual == "F":
					control.Append("Fondeado", 1)
					control.Append("Retenido", 2)
				elif estatusactual == "B":
					control.Append("Cobrado", 1)
				elif estatusactual == "T":
					control.Append("Retenido", 1)
					control.Append("Cancelado", 2)
				elif estatusactual == "C":
					control.Append("Cancelado", 1)
					control.Append("Solicitud", 2)
			elif estatusactual == "S":
				if self.usuario == "JORGE RIOS":
					control.Append("Solicitud", 1)
					control.Append("Revisado", 2)
					control.Append("Cancelado", 3)
					
				else:
					control.Append("Solicitud", 1)
					control.Append("Cancelado", 2)
			elif estatusactual == "R":
				control.Append("Revisado", 1)
			elif estatusactual == "A":
				control.Append("Autorizado", 1)
			elif estatusactual == "E":
				control.Append("Elaborado", 1)
			elif estatusactual == "F":
				control.Append("Fondeado", 1)
			elif estatusactual == "B":
				control.Append("Cobrado", 1)
			elif estatusactual == "T":
				control.Append("Retenido", 1)
			elif estatusactual == "C":
				control.Append("Cancelado", 1)
					
	def UserWithSpecialAccess(self):
		if self.usuario in ("ADRIANA", "JUAN", "ARAMOS", "SERGIO", "MARTHA", "CESAR"): return True
		else: return False
		
	def OnPrintExcel(self, event):
		tabla = self.dbtable
		meta = ((14, "Id Solicitud") , (70, u"Captura"), (70,u"Programado"),(20,u"Cheque"),
			(70,u"Cantidad"), (100,"Beneficiario"),(100,u"Empresa"),(20,"Estatus"),(100,"Solicitante"))
		query = self.FillListCtrl(printexcel = True)
		titulo = u"Solicitud de Cheques" 
		self.DisplayGrid(tabla, meta, query, titulo)
		
	def FillListCtrl(self, display = 'first', printexcel = False):
		lctrl = self.GetControl(self.idlc)
		if not printexcel:
			wx.BeginBusyCursor()
			lctrl.Enable(False)
			lctrl.Show(False)
			lctrl.ClearAll()
		countfiltros = 0
		self.fechacapturafiltro = ""
		fechacapturainicial = self.GetControl(self.idtcfechacapturafiltro).GetValue()
		if fechacapturainicial:
			try:
				fecha_dia, fecha_mes, fecha_ano = self.GetControl(self.idtcfechacapturafiltro).GetValue().split('/')
				fechacapturainicial = "'%s/%02d/%02d'" % (fecha_ano, int(fecha_mes), int(fecha_dia))
				fecharango = self.GetControl(self.idtcfechacapturarango).GetValue()
				if fecharango:
					rango_dia, rango_mes, rango_ano = self.GetControl(self.idtcfechacapturarango).GetValue().split('/')
					fechacapturafinal = "'%s/%02d/%02d'" % (rango_ano, int(rango_mes), int(rango_dia))
					if fechacapturainicial > fechacapturafinal:
						control = self.GetControl(self.idtctotalvista)
						control.SetBackgroundColour(wx.Colour(153,255,153))
						control.SetForegroundColour(wx.NamedColour("BLACK"))
						control.SetValue("0.00")
						Mensajes().Info(self, u"� La fecha inicial no debe ser mayor a la fecha final !", \
										u"Atenci�n: Revise el rango de la fecha de captura")
						return
					else:
						self.fechacapturafiltro = "(ch.fechacaptura >= %s and ch.fechacaptura <= %s)" \
										   % (fechacapturainicial, fechacapturafinal)
						countfiltros += 1
				else:
					self.fechacapturafiltro = "ch.fechacaptura = %s" % fechacapturainicial
					countfiltros += 1
			except:
				self.fechacapturafiltro = ""
		self.fechaprogramadafiltro = ""
		fechaprogramadainicial = self.GetControl(self.idtcfechaprogramadafiltro).GetValue()
		if fechaprogramadainicial:
			try:
				fecha_dia, fecha_mes, fecha_ano = self.GetControl(self.idtcfechaprogramadafiltro).GetValue().split('/')
				fechaprogramadainicial = "'%s/%02d/%02d'" % (fecha_ano, int(fecha_mes), int(fecha_dia))
				fecharango = self.GetControl(self.idtcfechaprogramadarango).GetValue()
				if fecharango:
					rango_dia, rango_mes, rango_ano = self.GetControl(self.idtcfechaprogramadarango).GetValue().split('/')
					fechaprogramadafinal = "'%s/%02d/%02d'" % (rango_ano, int(rango_mes), int(rango_dia))
					if fechaprogramadainicial > fechaprogramadafinal:
						control = self.GetControl(self.idtctotalvista)
						control.SetBackgroundColour(wx.Colour(153,255,153))
						control.SetForegroundColour(wx.NamedColour("BLACK"))
						control.SetValue("0.00")
						Mensajes().Info(self, u"� La fecha inicial no debe ser mayor a la fecha final !", \
										u"Atenci�n: Revise el rango de la fecha programada")
						return
					else:
						if countfiltros > 0: y = "and"
						else: y = ""
						self.fechaprogramadafiltro = "%s (ch.fechaprogramada >= %s and ch.fechaprogramada <= %s)" \
										   % (y, fechaprogramadainicial, fechaprogramadafinal)
						countfiltros += 1
				else:
					if countfiltros > 0: y = "and"
					else: y = ""
					self.fechaprogramadafiltro = "%s ch.fechaprogramada = %s" % (y, fechaprogramadainicial)
					countfiltros += 1
			except:
				self.fechaprogramadafiltro = ""
		self.beneficiariofiltro = ""
		if self.beneficiario > -1:
			if countfiltros > 0: y = "and"
			else: y = ""
			self.beneficiariofiltro = "%s ch.idbeneficiario = %s" % (y, self.beneficiario)
			countfiltros += 1
		else:
			beneficiario = self.GetControl(self.idfrbeneficiariofiltro).GetValue()
			if beneficiario:
				if countfiltros > 0: y = "and"
				else: y = ""
				self.beneficiariofiltro = "%s be.nombre like '%s%s%s'" % (y, "%%", beneficiario, "%%")
				countfiltros += 1
		estatus = self.GetControl(self.idchestatusfiltro).GetStringSelection()
		if estatus == u"Proyecci�n":
			filtro = "ch.estatus in ('S', 'R', 'A', 'E', 'T')"
		else:
			if estatus == "<Todo>":
				if self.GetControl(self.idtgfondeo).GetValue():
					filtro = "ch.estatus in ('E','T')"
				elif self.GetControl(self.idtgmulticheque).GetValue():
					filtro = "ch.estatus in ('R','A')"
				else:
					filtro = "ch.estatus <> 'C' and ch.estatus <> 'O' and ch.estatus <> 'P' and ch.estatus <> 'N'"
			else:
				if estatus == "Solicitud": filtro = "ch.estatus = 'S'"
				elif estatus == "Revisado": filtro = "ch.estatus = 'R'"
				elif estatus == "Autorizado": filtro = "ch.estatus = 'A'"
				elif estatus == "Elaborado": filtro = "ch.estatus = 'E'"
				elif estatus == "Fondeado": filtro = "ch.estatus = 'F'"
				elif estatus == "Retenido": filtro = "ch.estatus = 'T'"
				elif estatus == "Cobrado": filtro = "ch.estatus = 'B'"
				else: filtro = "ch.estatus = 'C'"
		countfiltros += 1
		if countfiltros > 1:
			self.estatusfiltro = "and %s" % filtro
		else:
			self.estatusfiltro = filtro
		if self.UserWithSpecialAccess():
			self.usuariofiltro = ""
		else:
			countfiltros += 1
			if countfiltros > 1:
				if self.usuario in ("JORGE RIOS", "VIVIAN"):
					self.usuariofiltro = "and ch.usuariosolicitante in ('JORGE RIOS', 'VIVIAN')"
				else:
					self.usuariofiltro = "and ch.usuariosolicitante = '%s'" % self.usuario
			else:
				if self.usuario in ("JORGE RIOS", "VIVIAN"):
					self.usuariofiltro = "ch.usuariosolicitante in ('JORGE RIOS', 'VIVIAN')"
				else:
					self.usuariofiltro = "ch.usuariosolicitante = '%s'" % self.usuario
		self.empresafiltro = ""
		ctrl = self.GetControl(self.idchempresafiltro); index = ctrl.GetSelection()
		if index > -1:
			self.idempresafiltro = ctrl.GetClientData(index)
			if self.idempresafiltro > 0:
				if countfiltros > 0: y = "and"
				else: y = ""
				self.empresafiltro = "%s ch.empresaid = %s" % (y, self.idempresafiltro)
				countfiltros += 1
		if self.origenempresaid:
			if not self.empresafiltro:
				countfiltros += 1
			if countfiltros > 1:
				self.empresafiltro = "and ch.empresaid = %s" % self.origenempresaid
			else:
				self.empresafiltro = "ch.empresaid = %s" % self.origenempresaid
		if self.origenidbanco:
			countfiltros += 1
			if countfiltros > 1:
				self.bancofiltro = "and ch.idbancoorigen = %s" % self.origenidbanco
			else:
				self.bancofiltro = "ch.idbancoorigen = %s" % self.origenidbanco
		else: self.bancofiltro = ""
		if self.devolucionsaldo:
			countfiltros += 1
			if countfiltros > 1:
				self.devolucionfiltro = "and ch.devolucion = 'S'"
			else:
				self.devolucionfiltro = "ch.devolucion = 'S'"
		else:
			self.devolucionfiltro = ""
		if countfiltros > 0: self.donde = "where"
		else: self.donde = ""
		
		sql = """
		select ch.idcheque, convert(varchar(10), ch.fechacaptura, 103), convert(varchar(10), ch.fechaprogramada, 103),
		ch.numerochequeorigen, ch.cantidad, isnull(be.nombre, ''), em.RazonSocial, ch.estatus, ch.usuariosolicitante,
		isnull(ct.nombre, ''), ch.devolucion
		from %s ch join cont_Empresas em on ch.empresaid = em.EmpresaID
		left join gixbeneficiarios be on ch.idbeneficiario = be.idbeneficiario
		left join CLIENTE ct on ch.idbeneficiario = ct.codigo
		%s %s %s %s %s %s %s %s %s order by %s
		""" % (self.dbtable, self.donde, self.fechacapturafiltro, self.fechaprogramadafiltro, self.beneficiariofiltro,
			   self.estatusfiltro, self.usuariofiltro, self.empresafiltro, self.bancofiltro, self.devolucionfiltro,
			   self.lstctrlsort)
		if printexcel: return sql
		#if wx.Platform == "__WXMAC__":
			#Mensajes().Info(self, u"Conexion: %s" % r_cn)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		fila = 0
		totalvista = 0
		if rows:
			lctrl.InsertColumn(0, u"%sId" % self.lstctrlorder[0][2], wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"%sCaptura" % self.lstctrlorder[1][2], wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(2, u"%sProgramado" % self.lstctrlorder[2][2], wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(3, u"%sCheque" % self.lstctrlorder[3][2], wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(4, u"%sCantidad" % self.lstctrlorder[4][2], wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(5, u"%sBeneficiario" % self.lstctrlorder[5][2])
			lctrl.InsertColumn(6, u"%sEmpresa" % self.lstctrlorder[6][2])
			lctrl.InsertColumn(7, u"%sEstatus" % self.lstctrlorder[7][2])
			lctrl.InsertColumn(8, u"%sSolicitante" % self.lstctrlorder[8][2])
			for row in rows:
				if str(row[7]) == "C":
					if fila %2 != 0: bgcolor = [255,153,153]
					else:            bgcolor = [255,215,215]
				else:
					if fila %2 != 0: bgcolor = [204,204,255]
					else:            bgcolor = [230,230,255]
				estatus = str(row[7])
				if estatus == "S": estatus = "SOLICITUD"
				elif estatus == "R": estatus = "REVISADO"
				elif estatus == "A": estatus = "AUTORIZADO"
				elif estatus == "E": estatus = "ELABORADO"
				elif estatus == "F": estatus = "FONDEADO"
				elif estatus == "T": estatus = "RETENIDO"
				elif estatus == "B": estatus = "COBRADO"
				elif estatus == "C": estatus = "CANCELADO"
				else: estatus = "DESCONOCIDO"
				if str(row[10]) == "S":
					nombre = self.GetString(row[9])
				else:
					nombre = self.GetString(row[5])
				
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, str(row[1]))
				lctrl.SetStringItem(index, 2, str(row[2]))
				lctrl.SetStringItem(index, 3, str(row[3]))
				lctrl.SetStringItem(index, 4, str(amount_and_cents_with_commas(row[4])))
				lctrl.SetStringItem(index, 5, nombre)
				lctrl.SetStringItem(index, 6, self.GetString(row[6]))
				lctrl.SetStringItem(index, 7, estatus)
				lctrl.SetStringItem(index, 8, self.GetString(row[8]))
				lctrl.SetItemData(index, row[0])
				if int(row[0]) == self.idcheque:
					self.ctrlindex = index
				fila += 1
				totalvista += float(row[4])
			lctrl.SetColumnWidth(0, 55)
			lctrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(2, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(3, 65)
			lctrl.SetColumnWidth(4, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(5, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(6, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(7, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(8, 80)
		else:
			lctrl.InsertColumn(0, "       No Existen Registros", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 167)
		cu.close()
		control = self.GetControl(self.idtctotalvista)
		control.SetBackgroundColour(wx.Colour(153,255,153))
		amount = amount_and_cents_with_commas(totalvista)
		control.SetValue(str(amount).rjust(20))
		self.GetControl(self.idbtfirmanteslistctrl).Enable(False)
		self.GetControl(self.idbtfondearlistctrl).Enable(False)
		self.GetControl(self.idbteditarlistctrl).Enable(False)
		self.GetControl(self.idbtclonarlistctrl).Enable(False)
		self.GetControl(self.idbtimprimirlistctrl).Enable(False)
		self.GetControl(self.idbtcambiarestatus).Enable(False)
		self.currentitemlst = []
		self.selecteditems = []
		lctrl.Show(True)
		lctrl.Enable(True)
		wx.EndBusyCursor()
		if self.currentitem and (self.currentitem < fila):
			lctrl.EnsureVisible(self.currentitem)
		if self.GetControl(self.idtgfondeo).GetValue():
			self.RecalculaSaldos()
		elif self.GetControl(self.idtgmulticheque).GetValue():
			self.RecalcularTotalCheque()
		salir = True
		return salir, fila

	def CheckSelectedList(self):
		if self.GetControl(self.idtgfondeo).GetValue():
			if self.GetControl(self.idckfondeo).IsChecked():
				self.CalculaTotalCheque()
				amount = amount_and_cents_with_commas(self.cantidadtotalcheque)
				self.GetControl(self.idtcconciliarsolicitudescheques).SetValue(str(amount).rjust(20))
			else:
				self.RecalculaSaldos()
				if self.selecteditems:
					estatus = self.GetControl(self.idchestatusfiltro).GetStringSelection()
					if estatus == u"Proyecci�n":
						self.GetControl(self.idbtfirmanteslistctrl).Enable(False)
						self.GetControl(self.idbtfondearlistctrl).Enable(False)
					else:
						self.GetControl(self.idbtfirmanteslistctrl).Enable(True)
						self.GetControl(self.idbtfondearlistctrl).Enable(True)
					self.GetControl(self.idbteditarlistctrl).Enable(True)
				else:
					self.GetControl(self.idbtfirmanteslistctrl).Enable(False)
					self.GetControl(self.idbtfondearlistctrl).Enable(False)
					self.GetControl(self.idbteditarlistctrl).Enable(False)
					self.GetControl(self.idbtclonarlistctrl).Enable(False)
					self.GetControl(self.idbtimprimirlistctrl).Enable(False)
					self.GetControl(self.idbtcambiarestatus).Enable(False)
		elif self.GetControl(self.idtgmulticheque).GetValue():
			self.RecalcularTotalCheque()
			if self.selecteditems:
				self.GetControl(self.idbteditarlistctrl).Enable(True)
				if len(self.selecteditems) > 1:
					self.GetControl(self.idbtmultichequeaplicarcheque).Enable(True)
				else:
					self.GetControl(self.idbtmultichequeaplicarcheque).Enable(False)
			else:
				self.GetControl(self.idbteditarlistctrl).Enable(False)
				self.GetControl(self.idbtmultichequeaplicarcheque).Enable(False)
				self.GetControl(self.idbtclonarlistctrl).Enable(False)
				self.GetControl(self.idbtimprimirlistctrl).Enable(False)
				self.GetControl(self.idbtcambiarestatus).Enable(False)
		
	def OnItemDeselected(self, event):
		if self.selecteditems:
			lctrl = self.GetControl(self.idlc)
			self.currentitem = event.m_itemIndex
			datointerno = lctrl.GetItem(self.currentitem, 0).GetText()
			try:
				datointerno = int(str(datointerno).split(".")[0])
			except:
				datointerno = int(datointerno)
			self.currentitemlst.remove(self.currentitem)
			self.selecteditems.remove(datointerno)
		self.CheckSelectedList()
		event.Skip()
		
	def OnLCtrl(self, event):
		self.FillingARecord = True
		lctrl = self.GetControl(self.idlc)
		self.currentitem = event.m_itemIndex
		warnings.warn("<<self.currentitem %s>>" % self.currentitem)
		datointerno = lctrl.GetItem(self.currentitem, 0).GetText()
		warnings.warn("<<datointerno %s>>" % datointerno)
		try:
			self.datointerno = int(str(datointerno).split(".")[0])
		except:
			self.datointerno = int(str(datointerno))
		warnings.warn("<<self.datointerno %s>>" % self.datointerno)
		self.currentitemlst.append(self.currentitem)
		self.selecteditems.append(self.datointerno)
		self.CheckSelectedList()
		self.LCtrl()
		self.FillingARecord = False
		#event.Skip()

	def LCtrl(self):
		cambio = False
		if not self.agregar and not self.FillingARecord:
			for id in self.controles_tipo_txt.itervalues():
				if id != self.idtccantidad:
					if self.GetControl(id).GetValue() <> self.originales[id]:
						cambio = True
			if not cambio:
				for id in self.controles_tipo_choice.itervalues():
					if self.GetControl(id).GetStringSelection() <> self.originales[id]:
						cambio = True
				if not cambio:
					for id in self.controles_tipo_combo.itervalues():
						if id not in self.controles_cb_partidas:
							if self.GetControl(id).GetStringSelection() <> self.originales[id]:
								cambio = True
					if not cambio:
						pagoestimacion = 0
						if self.GetControl(self.idckestimacion).IsChecked():
							pagoestimacion = 1
						if pagoestimacion != self.originales[self.idckestimacion]:
							cambio = True
		if cambio:
			self.NewFlag = False
			self.Text(True)
			if not self.NewFlag:
				if Mensajes().YesNo(self,u"Algunos datos han cambiado\n\n� Desea ud. grabarlos ?", \
						    u"Confirmaci�n"):
					self.AceptarDetalle()
					
		if self.datointernoynombre:
			if self.GetRecord(record = self.datointerno):
				self.GetControl(self.idbteditarlistctrl).Enable(True)
				self.GetControl(self.idbtclonarlistctrl).Enable(True)
				self.GetControl(self.idbtimprimirlistctrl).Enable(True)
				estatus = self.GetControl(self.idchestatusfiltro).GetStringSelection()
				if estatus in ("<Todo>", "Fondeado", "Cobrado", "Retenido", "Cancelado"):
					self.GetControl(self.idbtcambiarestatus).Enable(False)
				elif self.usuario in ("ADRIANA", "MARTHA"):
					self.GetControl(self.idbtcambiarestatus).Enable(True)
				else:
					self.GetControl(self.idbtcambiarestatus).Enable(False)
				self.editable = True
			else:
				pass
		elif self.GetRecord(record = self.datointerno):
			self.GetControl(self.idbteditarlistctrl).Enable(True)
			self.GetControl(self.idbtclonarlistctrl).Enable(True)
			self.GetControl(self.idbtimprimirlistctrl).Enable(True)
			estatus = self.GetControl(self.idchestatusfiltro).GetStringSelection()
			if estatus in ("<Todo>", "Fondeado", "Cobrado", "Retenido", "Cancelado"):
				self.GetControl(self.idbtcambiarestatus).Enable(False)
			elif self.usuario in ("ADRIANA", "MARTHA"):
				self.GetControl(self.idbtcambiarestatus).Enable(True)
			else:
				self.GetControl(self.idbtcambiarestatus).Enable(False)
			self.editable = True
		else:
			Mensajes().Warn(self, u"Escoja un registro v�lido", u"Atenci�n")
		
	def GetLFRecord(self, what):
		lctrl = self.GetControl(self.idlc)
		sql = """
		select %s(ch.fechacaptura), ch.idcheque from %s ch %s %s %s %s %s %s %s %s %s group by ch.idcheque
		""" % (what, self.dbtable, self.donde, self.fechacapturafiltro, self.fechaprogramadafiltro,
			   self.beneficiariofiltro, self.estatusfiltro, self.usuariofiltro, self.empresafiltro,
			   self.devolucionfiltro, self.bancofiltro)
		idcheque = ""
		try:
			cursor = r_cn.cursor()
			cursor.execute(str(sql))
			row = fetchone(cursor)
			if row is not None:
				idcheque = int(row[1])
			self.GetRecord(record = idcheque)
			if not self.ctrlindex:
				if what == "min":
					lctrl.SetItemState(0, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
				else:
					lctrl.SetItemState(lctrl.GetItemCount() - 1, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
		finally:
			cursor.close()
			
	def OnComboBox(self, event):
		self.GetControl(self.idtcbeneficiario).SetValue("")
		self.controlactual = event.GetId()
		modoedicion = self.modoedicion
		self.modoedicion = True
		self.Text(texto = False)
		self.modoedicion = modoedicion
		self.RevisaCambios()
		
	def OnTextBeneficiarioFiltro(self, event):
		ctrl = self.GetControl(self.idfrbeneficiariofiltro)
		valor = ctrl.GetValue().encode("iso8859-1")
		valornum = str(valor).replace('.','')
		if valor and not valornum.isdigit():
			if valor not in (",", ".", "#", "&", "!", "�", "?", "�", "/", "(", ")", "$", "'"):
				if not str(valor).isupper():
					ctrl.SetValue(str(valor).upper())
					lastposition = ctrl.GetLastPosition()
					ctrl.SetInsertionPoint(lastposition)
			else:
				ctrl.SetValue("")
		if self.beneficiario > -1:
			self.beneficiario = -1
			self.FillListCtrl()
			
	def OnTextEnterBeneficiarioFiltro(self, event):
		self.FillListCtrl()
		
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
				
		return dato.strip()
		
	def OnText(self, event):
		ctrls = [self.idcbbeneficiario, self.idtcconcepto, self.idtcanexoadicional, self.idtcobservaciones,
		         self.idtcbancodestino, self.idtcsucursaldestino, self.idtcplazadestino]
		self.controlactual = event.GetId()
		valor = self.GetString(self.GetControl(self.controlactual).GetValue())

		if self.controlactual in ctrls:
			valornum = valor.replace('.','')
			if valor and not valornum.isdigit():
				if not valor.isupper():
					if wx.Platform == "__WXMAC__"  and self.controlactual == self.idcbbeneficiario:
						pass
					else:
						self.GetControl(self.controlactual).SetValue(valor.upper())
						lastposition = self.GetControl(self.controlactual).GetLastPosition()
						self.GetControl(self.controlactual).SetInsertionPoint(lastposition)
				
		self.Text()
	
	def Text(self, VengodelaLista = False, texto = True):
		especificacion = self.GetControl(self.idchespecificaciones).GetStringSelection()
		programacion = self.GetControl(self.idchprogramacion).GetStringSelection()
		if programacion == "Normal":
			autoprogramada = True
			if especificacion in ("Spei", "Transferencia o Traspaso"):
				spei = True
				valida = (self.idcbempresa, self.idcbcentrocosto, self.idcbpartida, self.idcbbeneficiario,
				          self.idtcconcepto, self.idtccantidad, self.idtcbancodestino, self.idtcsucursaldestino,
				          self.idtcplazadestino, self.idtcclavebancariadestino)
			else:
				spei = False
				valida = (self.idcbempresa, self.idcbcentrocosto, self.idcbpartida, self.idcbbeneficiario,
						  self.idtcconcepto, self.idtccantidad)
		else:
			autoprogramada = False
			if especificacion in ("Spei", "Transferencia o Traspaso"):
				spei = True
				valida = (self.idtcfechaprogramada, self.idcbempresa, self.idcbcentrocosto, self.idcbpartida,
						  self.idcbbeneficiario, self.idtcconcepto, self.idtccantidad, self.idtcbancodestino,
						  self.idtcsucursaldestino, self.idtcplazadestino, self.idtcclavebancariadestino)
			else:
				spei = False
				valida = (self.idtcfechaprogramada, self.idcbempresa, self.idcbcentrocosto, self.idcbpartida,
						  self.idcbbeneficiario, self.idtcconcepto, self.idtccantidad)
		for id in valida:
			control = self.GetControl(id)
			try:
				valor = control.GetValue().strip()
			except:
				try:
					valor = control.GetStringSelection()
				except:
					valor = ""
			if valor == "" and not self.FillingARecord and not self.NewFlag:
				self.NewFlag = True
				if not VengodelaLista:
					if id == self.idcbbeneficiario:
						self.ValidaBeneficiario(id, texto)
					else:
						if spei and not self.estoyenobtenerbancobeneficiario:
							Mensajes().Info(self, u"� No debe quedar ning�n dato requerido * en blanco !\n\n" \
											u"Revise tambi�n las especificaciones de %s,\n" \
											u"recuerde que tambi�n son requeridas." % especificacion, u"Atenci�n")
						else:
							Mensajes().Info(self, u"� No debe quedar ning�n dato requerido * en blanco !", u"Atenci�n")
					return
			if id == self.idtccantidad:
				cantidad = control.GetValue().strip()
				if cantidad != "":
					try:
						if str(cantidad)[-1:] != ".":
							if not str(cantidad)[-1:].isdigit():
								Mensajes().Info(self, u"� La cantidad debe ser num�rica !", u"Atenci�n")
								control.SetValue(str(cantidad)[:-1])
								control.SetSelection(-1,-1)
								return
							else:
								self.GetControl(self.idtxcantidad).SetLabel(str(c2p(cantidad).texto()))
					except:
						Mensajes().Info(self, u"� La cantidad debe ser num�rica !", u"Atenci�n")
						control.SetValue("")
						control.SetSelection(-1,-1)
						return
				else:
					self.GetControl(self.idtxcantidad).SetLabel("")
					if not self.FillingARecord and not self.NewFlag:
						self.NewFlag = True
						if not VengodelaLista:
							Mensajes().Info(self, u"� La cantidad no debe quedar en blanco !", u"Atenci�n")
							return
		if not self.FillingARecord:
			id = self.controlactual
			if (id == self.idtcfechaprogramada and autoprogramada) or id == self.idtcfechacaptura or \
			   id == self.idtcidcheque:
				pass
			else:
				if id in self.readonlyctrl:	self.GetControl(id).SetEditable(True)
				if self.OriginalDistinto(id):
					self.GetControl(id).SetBackgroundColour(wx.CYAN)
					self.GetControl(id).Refresh()
				else:
					self.GetControl(id).SetBackgroundColour(wx.WHITE)
					self.GetControl(id).Refresh()
				if id in self.readonlyctrl: self.GetControl(id).SetEditable(False)
			
			if id == self.idcbempresa:
				combo = self.GetControl(id); index = combo.GetSelection(); empresaid = combo.GetClientData(index)
				if empresaid != self.empresaid:
					self.empresaid = empresaid
					self.ObtenerCentrosCostos(); self.ObtenerBancosCuentas(); self.DeshabilitaCombos(2, 2, 0)
			elif id == self.idcbcentrocosto:
				combo = self.GetControl(id); index = combo.GetSelection(); centrocostoid = combo.GetClientData(index)
				if centrocostoid != self.centrocostoid:
					self.centrocostoid = centrocostoid
					self.ObtenerPartidas(); self.DeshabilitaCombos(3, 3, 1)
			elif id == self.idcbpartida:
				combo = self.GetControl(id); index = combo.GetSelection(); partida = combo.GetClientData(index)
				if partida != self.partida:
					self.partida = partida
					self.partidaafectable = self.ObtenerPartidaAfectable(partida)
					if self.partidaafectable:
						self.GetControl(self.idsbpartida).Show(True)
					else:
						self.GetControl(self.idsbpartida).Show(False)
					self.ObtenerSubpartidas(partida, 1); self.DeshabilitaCombos(4, 4, 2)
			elif id == self.idcbsubpartida1:
				combo = self.GetControl(id); index = combo.GetSelection(); subpartida1 = combo.GetClientData(index)
				if subpartida1 != self.subpartida1:
					self.subpartida1 = subpartida1
					self.subpartida1afectable = self.ObtenerPartidaAfectable(subpartida1)
					if self.subpartida1afectable:
						self.GetControl(self.idsbsubpartida1).Show(True)
					else:
						self.GetControl(self.idsbsubpartida1).Show(False)
					self.ObtenerSubpartidas(subpartida1, 2); self.DeshabilitaCombos(5, 5, 3)
			elif id == self.idcbsubpartida2:
				combo = self.GetControl(id); index = combo.GetSelection(); subpartida2 = combo.GetClientData(index)
				if subpartida2 != self.subpartida2:
					self.subpartida2 = subpartida2
					self.subpartida2afectable = self.ObtenerPartidaAfectable(subpartida2)
					if self.subpartida2afectable:
						self.GetControl(self.idsbsubpartida2).Show(True)
					else:
						self.GetControl(self.idsbsubpartida2).Show(False)
					self.ObtenerSubpartidas(subpartida2, 3); self.DeshabilitaCombos(6, 6, 4)
			elif id == self.idcbsubpartida3:
				combo = self.GetControl(id); index = combo.GetSelection(); subpartida3 = combo.GetClientData(index)
				if subpartida3 != self.subpartida3:
					self.subpartida3 = subpartida3
					self.subpartida3afectable = self.ObtenerPartidaAfectable(subpartida3)
					if self.subpartida3afectable:
						self.GetControl(self.idsbsubpartida3).Show(True)
					else:
						self.GetControl(self.idsbsubpartida3).Show(False)
					self.ObtenerSubpartidas(subpartida3, 4); self.DeshabilitaCombos(7, 7, 5)
			elif id == self.idcbsubpartida4:
				combo = self.GetControl(id); index = combo.GetSelection(); subpartida4 = combo.GetClientData(index)
				if subpartida4 != self.subpartida4:
					self.subpartida4 = subpartida4
					self.subpartida4afectable = self.ObtenerPartidaAfectable(subpartida4)
					if self.subpartida4afectable:
						self.GetControl(self.idsbsubpartida4).Show(True)
					else:
						self.GetControl(self.idsbsubpartida4).Show(False)
					self.ObtenerSubpartidas(subpartida4, 5); self.DeshabilitaCombos(8, 8, 6)
			elif id == self.idcbsubpartida5:
				combo = self.GetControl(id); index = combo.GetSelection(); subpartida5 = combo.GetClientData(index)
				if subpartida5 != self.subpartida5:
					self.subpartida5 = subpartida5
					self.subpartida5afectable = self.ObtenerPartidaAfectable(subpartida5)
					if self.subpartida5afectable:
						self.GetControl(self.idsbsubpartida5).Show(True)
					else:
						self.GetControl(self.idsbsubpartida5).Show(False)
			elif id == self.idcbbeneficiario:
				self.ValidaBeneficiario(id, texto)

			self.RevisaCambios()
			
	def RevisaCambios(self, cambiosolicitud = False, cambiopartida = False):
		for id, tipo in self.controles_de_captura:
			if id in self.readonlyctrl:	self.GetControl(id).SetEditable(True)
			if tipo in ("ch", "cb"):
				valor = self.GetControl(id).GetStringSelection()
			else:
				valor = self.GetControl(id).GetValue()
			if valor <> self.originales[id]:
				self.GetControl(id).SetBackgroundColour(wx.CYAN)
				self.GetControl(id).Refresh()
				cambiosolicitud = True
			else:
				self.GetControl(id).SetBackgroundColour(wx.WHITE)
				self.GetControl(id).Refresh()
			if id in self.readonlyctrl:	self.GetControl(id).SetEditable(False)
			
		for id in self.controles_tipo_combo.itervalues():
			if self.GetControl(id).GetStringSelection() <> self.originales[id]:
				self.GetControl(id).SetBackgroundColour(wx.CYAN)
				cambiosolicitud = True
			else:
				self.GetControl(id).SetBackgroundColour(wx.WHITE)
			self.GetControl(id).Refresh()
			
		for id in self.controles_tipo_choice.itervalues():
			if self.GetControl(id).GetStringSelection() <> self.originales[id]:
				self.GetControl(id).SetBackgroundColour(wx.CYAN)
				cambiosolicitud = True
			else:
				self.GetControl(id).SetBackgroundColour(wx.WHITE)
			self.GetControl(id).Refresh()
			
		pagoestimacion = 0
		if self.GetControl(self.idckestimacion).IsChecked():
			pagoestimacion = 1
		if pagoestimacion != self.originales[self.idckestimacion]:
			self.GetControl(self.idckestimacion).SetBackgroundColour(wx.CYAN)
			cambiosolicitud = True
		else:
			self.GetControl(self.idckestimacion).SetBackgroundColour(wx.WHITE)
		self.GetControl(self.idckestimacion).Refresh()

		idcheque = ""
		try:
			idcheque = self.GetControl(self.idtcidcheque).GetValue()
		except:
			pass
		if not idcheque.strip() == "Nueva":
			if self.GetControl(self.idtccantidad).GetValue() <> self.originales[self.idtccantidad]:
				cambiopartida = True
			else:
				for id in self.controles_cb_partidas:
					if self.GetControl(id).GetStringSelection() <> self.originales[id]:
						cambiopartida = True
						break
			if cambiopartida:
				self.GetControl(self.idbtaplicarform).Enable(False)
				self.GetControl(self.idbtaceptarform).Enable(False)
				self.GetControl(self.idbbagregarpartida).Enable(False)
				self.GetControl(self.idbbguardarpartida).Enable(True)
				self.GetControl(self.idchestatus).Enable(False)
			else:
				self.GetControl(self.idchestatus).Enable(True)
				if cambiosolicitud:
					if self.GetControl(self.idbbeliminarpartida).IsEnabled():
						self.GetControl(self.idbbagregarpartida).Enable(True)
						self.GetControl(self.idbbguardarpartida).Enable(False)
						self.GetControl(self.idbtaplicarform).Enable(True)
						self.GetControl(self.idbtaceptarform).Enable(True)
					else:
						self.GetControl(self.idbtaceptarform).Enable(True)
				elif self.GetControl(self.idbbeliminarpartida).IsEnabled():
					self.GetControl(self.idbbagregarpartida).Enable(True)
					self.GetControl(self.idbbguardarpartida).Enable(False)
					self.GetControl(self.idbtaplicarform).Enable(False)
					self.GetControl(self.idbtaceptarform).Enable(False)
				else:
					self.GetControl(self.idbtaceptarform).Enable(False)
				
	def ValidaBeneficiario(self, id, texto = True):
		if texto:
			if self.valida:
				self.idbeneficiario = -1
				combo = self.GetControl(id)
				self.beneficiarionombre = combo.GetValue()
				if self.beneficiarionombre:
					self.FiltraComboBeneficiario()
				else:
					if self.GetControl(self.idtgbeneficiariodevolucion).GetValue():
						self.ObtenerBeneficiarios(False)
					else:
						self.ObtenerBeneficiarios()
					self.GetControl(self.idtcbeneficiario).SetValue("")
					self.GetControl(self.idcbbeneficiario).SetFocus()
				especificacion = self.GetControl(self.idchespecificaciones).GetStringSelection()
				if especificacion in ("Spei", "Transferencia o Traspaso"):
					self.HabilitaTextControl()
					self.ObtenerBancoBeneficiario()
				else:
					self.DeshabilitaTextControl()
			else:
				self.valida = True
		else:
			self.valida = False
			self.beneficiarionombre = ""
			combo = self.GetControl(id)
			index = combo.GetSelection()
			self.idbeneficiario = combo.GetClientData(index)
			especificacion = self.GetControl(self.idchespecificaciones).GetStringSelection()
			if especificacion in ("Spei", "Transferencia o Traspaso"):
				self.HabilitaTextControl()
				nombrecombo = self.GetControl(self.idcbbeneficiario).GetStringSelection()
				self.ObtenerBancoBeneficiario(nombrecombo = nombrecombo)
			else:
				self.DeshabilitaTextControl()
				
	def FiltraComboBeneficiario(self):
		control = self.GetControl(self.idcbbeneficiario)
		control.Clear()
		nombre = (self.beneficiarionombre.encode("iso8859-1") + "%",)
		#cu = self.connlite.cursor()
		self.culite.execute("select idbeneficiario, nombre from beneficiario where nombre like ? order by nombre", nombre)
		rows = fetchall(self.culite)
		#cu.close()
		if rows:
			first = True
			ctrl = self.GetControl(self.idtcbeneficiario)
			for row in rows:
				control.Append(self.GetString(row[1]), int(row[0]))
				if first:
					first = False
					try:
						#ctrl.SetValue(row[1].encode("iso8859-1"))
						ctrl.SetValue(self.GetString(row[1]))
					except:
						try:
							ctrl.SetValue(str(row[1]))
						except:
							ctrl.SetValue(row[1])
		else:
			self.GetControl(self.idtcbeneficiario).SetValue("")
		
		if wx.Platform != "__WXMAC__":
			control.SetValue(self.beneficiarionombre)
			
		control.SetMark(len(self.beneficiarionombre), -1)


	#def FiltraComboBeneficiario(self):
		#control = self.GetControl(self.idcbbeneficiario)
		#control.Clear()
		#sql = """
		#select idbeneficiario, nombre from gixbeneficiarios where nombre like '%s%%' order by nombre
		#""" % self.beneficiarionombre.encode("iso8859-1")
		#cu = r_cn.cursor()
		#cu.execute(str(sql))
		#rows = fetchall(cu)
		#cu.close()
		#if rows:
			#first = True
			#for row in rows:
				#control.Append(str(row[1]), int(row[0]))
				#if first:
					#first = False
					#self.GetControl(self.idtcbeneficiario).SetValue(str(row[1]))
		#control.SetValue(self.beneficiarionombre)
		#control.SetMark(len(self.beneficiarionombre), -1)

	def ObtenerPartidaAfectable(self, partida):
		sql = """
		select Afectable from gixpartidasegresos where PartidaID = %s
		""" % partida
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row:
			return int(row[0])
		return 0
				
	def SaveRecord(self):
		wx.BeginBusyCursor()
		currentitem = self.currentitem
		self.idcheque = self.GetControl(self.idtcidcheque).GetValue()
		if self.idcheque.strip() == "Nueva":
			bienGrabado, self.idcheque = self.AddRecord()
			puesto = self.GetControl(self.idtcidcheque).GetValue()
			nueva = True
		else:
			bienGrabado = self.UpdateRecord()
			nueva = False
		wx.EndBusyCursor()
			
		if bienGrabado:
			lctrl = self.GetControl(self.idlc)
			if nueva:
				self.FillListCtrl()
				lctrl.SetItemState(self.ctrlindex, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
				#self.GetRecord("%s" % (self.idcheque))
				self.GetRecord(record = self.idcheque)
			else:
				try:
					lctrl.SetItemState(currentitem, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
				except:
					pass
		else:
			Mensajes().Info(self, u"� El Registro no fue grabado !", u"Atenci�n")
		
	def PreparaQuery(self, sql):
		sqlx = sql.replace('\t', ' '); sql = sqlx.replace('\n', ' ')
		return sql

	def UpdateRecord(self):
		tipoprogramacion = self.GetControl(self.idchprogramacion).GetStringSelection()
		if tipoprogramacion == "Normal": tipoprogramacion = "N"
		else: tipoprogramacion = "E"
		f_dia, f_mes, f_ano = self.GetControl(self.idtcfechaprogramada).GetValue().split('/')
		fechaprogramada = "%04d/%02d/%02d" % (int(f_ano), int(f_mes), int(f_dia))
		estatusch = self.GetControl(self.idchestatus).GetStringSelection()
		queryfondeo = ""
		if estatusch == "Solicitud": estatus = "S"
		elif estatusch == "Revisado": estatus = "R"
		elif estatusch == "Autorizado": estatus = "A"
		elif estatusch == "Elaborado": estatus = "E"
		elif estatusch == "Fondeado": estatus = "F"
		elif estatusch == "Retenido":
			estatus = "T"
			queryfondeo = ", idfondeo = 0"
		elif estatusch == "Cobrado": estatus = "B"
		else: estatus = "C"
		concepto = self.GetControl(self.idtcconcepto).GetValue().strip()
		if len(concepto) > 100:
			concepto = concepto[0:100]
			Mensajes().Info(self, u"� Intente abreviar !\n\nHa sido recortado el concepto\n\n%s" % concepto, u"Atenci�n")
		cantidad = float(self.totalcheque)
		querycantidadcheque = ""
		if (estatus != self.estatus and estatus == "E"):
			querycantidadcheque = ", cantidadcheque = %s" % float(cantidad)
		anexo = self.GetControl(self.idchanexo).GetStringSelection()
		if anexo == "Factura": anexo = "F"
		elif anexo == "Copia de la Factura": anexo = "C"
		elif anexo == "Presupuesto": anexo = "P"
		else: anexo = "A"
		anexoadicional = self.GetControl(self.idtcanexoadicional).GetValue().strip()
		if len(anexoadicional) > 50:
			anexoadicional = anexoadicional[0:50]
			Mensajes().Info(self, u"� Intente abreviar !\n\n" \
							u"Han sido recortadas las observaciones adicionales del anexo\n\n%s"
							% anexoadicional, u"Atenci�n")
		especificaciones = self.GetControl(self.idchespecificaciones).GetStringSelection()
		if especificaciones == "Cheque": especificaciones = "N"
		elif especificaciones == "Cheque Certificado": especificaciones = "E"
		elif especificaciones == "Cheque de Caja": especificaciones = "A"
		elif especificaciones == "Cotizar Tipo de Cambio Dlls.": especificaciones = "D"
		elif especificaciones == "Spei": especificaciones = "S"
		elif especificaciones == "Transferencia o Traspaso": especificaciones = "T"
		pagoestimacion = 0
		if self.GetControl(self.idckestimacion).IsChecked():
			pagoestimacion = 1
			
		numerochequeorigen = self.GetControl(self.idtcnumerochequeorigen).GetValue().strip()
		bancodestino = self.GetControl(self.idtcbancodestino).GetValue().strip()
		sucursaldestino = self.GetControl(self.idtcsucursaldestino).GetValue().strip()
		plazadestino = self.GetControl(self.idtcplazadestino).GetValue().strip()
		clavebancariadestino = self.GetControl(self.idtcclavebancariadestino).GetValue().strip()
		observaciones = self.GetControl(self.idtcobservaciones).GetValue().strip()
		if len(observaciones) > 100:
			observaciones = observaciones[0:100]
			Mensajes().Info(self, u"� Intente abreviar !\n\n" \
							u"Han sido recortadas las observaciones\n\n%s" % observaciones, u"Atenci�n")
		devolucion = "N"
		if self.GetControl(self.idtgbeneficiariodevolucion).GetValue():
			devolucion = "S"
		setListForQuery = """ 
		tipoprogramacion = '%s', fechaprogramada = '%s', estatus = '%s', empresaid = %s,
		idbeneficiario = %s, devolucion = '%s', concepto = '%s', cantidad = %s, anexo = '%s', anexoadicional = '%s',
		especificaciones = '%s', idbancoorigen = %s, numerochequeorigen = '%s', bancodestino = '%s',
		sucursaldestino = '%s', plazadestino = '%s', clavebancariadestino = '%s', observaciones = '%s', pagoestimacion = %s %s%s
		""" % (tipoprogramacion, fechaprogramada, estatus, self.empresaid,
			self.idbeneficiario, devolucion, concepto, float(cantidad), anexo, anexoadicional, especificaciones,
			asignaMenosUno(self.idbancoorigen), numerochequeorigen, bancodestino, sucursaldestino, plazadestino,
			clavebancariadestino, observaciones, pagoestimacion, queryfondeo, querycantidadcheque)
		sqlx = "update %s set %s where idcheque = %s" % (self.dbtable, setListForQuery, self.idcheque)
		sql = self.PreparaQuery(sqlx)
		queTal = self.QueryUpdateRecord(sql)
		if queTal:
			if self.originales[self.idchestatus] != estatusch:
				contenido = u"%s, edici�n del registro" % estatusch
				if queryfondeo and self.idfondeo > 0:
					wx.BeginBusyCursor()
					todook = self.LiberarRecursos(cantidad, fechaprogramada)
					wx.EndBusyCursor()
					if todook:
						# (aa).- Actualmente no se afecta el banco.
						#Mensajes().Info(self,u"� Ha retenido la solicitud, por lo tanto, ha liberado recursos !\n\n" \
										#u"Fueron afectadas las partidas y/o subpartidas que se incluyen\n" \
										#u"en la solicitud y eliminado el movimiento de cargo de la cuenta\n" \
										#u"origen, afectando por consecuencia, el saldo de la misma.", u"Atenci�n")
						Mensajes().Info(self,u"� Ha retenido la solicitud, por lo tanto, ha liberado recursos !\n\n" \
										u"Fueron afectadas las partidas y/o subpartidas que se incluyen\n" \
										u"en la solicitud.", u"Atenci�n")
			else:
				estatus = ""
				contenido = u"Edici�n del registro"
				
			if devolucion == "N":
				if self.codigodocumentooriginal:
					sql = """
					update DOCUMENTO set idcheque = 0 where codigo in (%s)
					""" % (",".join(map(str, self.codigodocumentooriginal)),)
					if not self.QueryUpdateRecord(sql):
						Mensajes().Info(self, u"Problemas al actualizar el documento.\n\n%s" % sql, u"Atenci�n-A")
			else:
				if self.codigodocumentooriginal:
					if self.codigodocumento:
						sql = """
						update DOCUMENTO set idcheque = 0 where codigo in (%s)
						""" % (",".join(map(str, self.codigodocumentooriginal)),)
						if not self.QueryUpdateRecord(sql):
							Mensajes().Info(self, u"Problemas al actualizar el documento.\n\n%s" % sql, u"Atenci�n-B")
						sql = """
						update DOCUMENTO set idcheque = %s where codigo in (%s)
						""" % (self.idcheque, ",".join(map(str, self.codigodocumento)),)
						if not self.QueryUpdateRecord(sql):
							Mensajes().Info(self, u"Problemas al actualizar el documento.\n\n%s" % sql, u"Atenci�n-C")
				else:
					sql = """
					update DOCUMENTO set idcheque = %s where codigo in (%s)
					""" % (self.idcheque, ",".join(map(str, self.codigodocumento)),)
					if not self.QueryUpdateRecord(sql):
						Mensajes().Info(self, u"Problemas al actualizar el documento.\n\n%s" % sql, u"Atenci�n-D")
			
			sql = """
			insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension, Estatus)
			values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
			""" % (self.BlogGUID, self.usuario, contenido, "", "", estatus)
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
		
		return queTal
	
	def LiberarRecursos(self, cantidad, fechaprogramada, tipomovto = "C", todook = True, fechamovto = "NULL", periodo = ""):
		todook = True
		cantidad *= -1
		idbanco = self.idbancoorigen
		idcheque = self.idcheque
		try:
			fecha_ano, fecha_mes, fecha_dia = fechaprogramada.split('/')
			fecha_ano, fecha_mes, fecha_dia = int(fecha_ano), int(fecha_mes), int(fecha_dia)
			fechamovto = "'%04d/%02d/%02d'" % (fecha_ano, fecha_mes, fecha_dia)
			periodo = "'%04d/%02d/01'" % (fecha_ano, fecha_mes)
		except:
			Mensajes().Info(self, u"Problemas con la fecha al agregar movimientos", u"Atenci�n")
			return False
		self.ActualizaFondeos()
		totalchequedummy = self.ActualizaPartidas(idcheque, fechaprogramada, sumaoresta = -1)
		# (aa).- Actualmente no se afecta el banco.
		#sql = "delete from gixbancosmovimientos where idcheque = %s" % idcheque
		#try:
			#cu = r_cn.cursor()
			#cu.execute(str(sql))
			#cu.close()
			#r_cn.commit()
		#except:
			#r_cn.rollback()
			#Mensajes().Info(self,u"Sucedi� algo que impidi� eliminar el movimiento de banco.\n%s" \
							#% sql, u"Atenci�n")
		
		#todook = self.ActualizarSaldoBanco(idbanco, periodo, cantidad, fecha_mes, fecha_ano, tipomovto)
		#if not todook:
			#Mensajes().Info(self, u"� Se detectaron problemas al actualizar bancos !\n\n" \
							#u"Solicitud: %s, Fecha Programada: %s, Total Cheque: %s" \
							#u", Movimiento de Banco: %s\n\n� Tome nota y revise !" \
							#% (idcheque, fechaprogramada, totalcheque, idreferenciamovto), u"Atenci�n")
		return todook
	
	def ActualizaFondeos(self):
		sql = "select count(*) from gixegresoscheques where idfondeo = %s" % self.idfondeo
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)[0]
		cu.close()
		if not row:
			sql = "delete from gixfondeos where idfondeo = %s" % self.idfondeo
			try:
				cu = r_cn.cursor()
				cu.execute(str(sql))
				cu.close()
				r_cn.commit()
			except:
				r_cn.rollback()
				Mensajes().Info(self,u"Sucedi� algo que impidi� eliminar el registro de fondeos.\n%s" \
				                % sql, u"Atenci�n")
		
	def AddRecord(self):
		f_dia, f_mes, f_ano = self.GetControl(self.idtcfechacaptura).GetValue().split('/')
		fechacaptura = "%04d/%02d/%02d" % (int(f_ano), int(f_mes), int(f_dia))
		tipoprogramacion = self.GetControl(self.idchprogramacion).GetStringSelection()
		if tipoprogramacion == "Normal": tipoprogramacion = "N"
		else: tipoprogramacion = "E"
		f_dia, f_mes, f_ano = self.GetControl(self.idtcfechaprogramada).GetValue().split('/')
		fechaprogramada = "%04d/%02d/%02d" % (int(f_ano), int(f_mes), int(f_dia))
		concepto = self.GetControl(self.idtcconcepto).GetValue().strip()
		if len(concepto) > 100:
			concepto = concepto[0:100]
			Mensajes().Info(self, u"� Intente abreviar !\n\nHa sido recortado el concepto\n\n%s" % concepto, u"Atenci�n")
		cantidad = self.GetControl(self.idtccantidad).GetValue()
		anexo = self.GetControl(self.idchanexo).GetStringSelection()
		if anexo == "Factura": anexo = "F"
		elif anexo == "Copia de la Factura": anexo = "C"
		elif anexo == "Presupuesto": anexo = "P"
		else: anexo = "A"
		anexoadicional = self.GetControl(self.idtcanexoadicional).GetValue().strip()
		if len(anexoadicional) > 50:
			anexoadicional = anexoadicional[0:50]
			Mensajes().Info(self, u"� Intente abreviar !\n\n" \
							u"Han sido recortadas las observaciones adicionales del anexo\n\n%s"
							% anexoadicional, u"Atenci�n")
		especificaciones = self.GetControl(self.idchespecificaciones).GetStringSelection()
		if especificaciones == "Cheque": especificaciones = "N"
		elif especificaciones == "Cheque Certificado": especificaciones = "E"
		elif especificaciones == "Cheque de Caja": especificaciones = "A"
		elif especificaciones == "Cotizar Tipo de Cambio Dlls.": especificaciones = "D"
		elif especificaciones == "Spei": especificaciones = "S"
		else: especificaciones = "T"
		pagoestimacion = 0
		if self.GetControl(self.idckestimacion).IsChecked():
			pagoestimacion = 1
		numerochequeorigen = self.GetControl(self.idtcnumerochequeorigen).GetValue().strip()
		bancodestino = self.GetControl(self.idtcbancodestino).GetValue().strip()
		sucursaldestino = self.GetControl(self.idtcsucursaldestino).GetValue().strip()
		plazadestino = self.GetControl(self.idtcplazadestino).GetValue().strip()
		clavebancariadestino = self.GetControl(self.idtcclavebancariadestino).GetValue().strip()
		observaciones = self.GetControl(self.idtcobservaciones).GetValue().strip()
		if len(observaciones) > 100:
			observaciones = observaciones[0:100]
			Mensajes().Info(self, u"� Intente abreviar !\n\n" \
							u"Han sido recortadas las observaciones\n\n%s" % observaciones, u"Atenci�n")
		devolucion = "N"
		if self.GetControl(self.idtgbeneficiariodevolucion).GetValue():
			devolucion = "S"
		sqlFields = """ 
		fechacaptura, tipoprogramacion, fechaprogramada, empresaid, idbeneficiario, devolucion, concepto, cantidad,
		anexo, anexoadicional, especificaciones, idbancoorigen, numerochequeorigen, bancodestino,
		sucursaldestino, plazadestino, clavebancariadestino, observaciones, estatus, usuariosolicitante,
		idfondeo, cantidadcheque, pagoestimacion
		"""
		sqlValues = "'%s', '%s', '%s', %s, %s, '%s', '%s', %s, '%s', '%s', '%s'," \
				  "%s, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', %s, %s, %s" % \
				  (fechacaptura, tipoprogramacion, fechaprogramada, self.empresaid, self.idbeneficiario, devolucion,
				   concepto, float(cantidad), anexo, anexoadicional, especificaciones, self.idbancoorigen,
				   numerochequeorigen, bancodestino, sucursaldestino, plazadestino, clavebancariadestino,
				   observaciones, "S", self.usuario, 0, 0, pagoestimacion)
		sql = """
		insert into %s (%s) values (%s)
		""" % (self.dbtable, sqlFields, sqlValues) 
		sqlmax = "select max(idcheque) from gixegresoscheques"
		queTal, identity =  self.QueryUpdateRecord(sql, sqlmax, True)
		numero = 0
		if queTal:
			if identity is not None:
				numero = identity
			else:
				Mensajes().Info(self, u"Problemas al buscar nueva solicitud.\n\n%s" % sqlmax, u"Atenci�n")
				
			if devolucion == "S":
				if self.codigodocumento:
					sql = """
					update DOCUMENTO set idcheque = %s where codigo in (%s)
					""" % (numero, ",".join(map(str, self.codigodocumento)),)
					if not self.QueryUpdateRecord(sql):
						Mensajes().Info(self, u"Problemas al actualizar el documento.\n\n%s" % sql, u"Atenci�n")
				else:
					Mensajes().Info(self, u"Elija el documento para la devoluci�n.", u"Atenci�n")
			
			self.GetControl(self.idtcidcheque).SetValue(str(numero))
			sqly = "select convert(varchar(100), BlogGUID) from %s where idcheque = %s" % (self.dbtable, numero)
			cursor = r_cn.cursor()
			cursor.execute(str(sqly))
			row = fetchone(cursor)
			if row is not None:
				self.BlogGUID = row[0]
			cursor.close()
			sql = """
			insert into gixegresoschequespartidas
			(idcheque, centrocostoid, partida, subpartida1, subpartida2, subpartida3, subpartida4, subpartida5, cantidad)
			values (%s, %s, %s, %s, %s, %s, %s, %s, %s)
			""" % (numero, self.centrocostoid, self.partida, self.subpartida1, self.subpartida2,
				   self.subpartida3, self.subpartida4, self.subpartida5, float(cantidad))
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"Problemas al actualizar las partidas.\n\n%s" % sql, u"Atenci�n")
			sql = """
			insert into Blogs 
			(BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension, Estatus)
			values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
			""" % (self.BlogGUID, self.usuario, "Solicitud de Cheque", "", "", "S")
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"Problemas al actualizar el blog.\n\n%s" % sql, u"Atenci�n")

		return queTal, int(numero)
	
	def OnDeleteRecord(self, event):
		id = self.GetControl(self.idtcid).GetValue()
		if Mensajes().YesNo(self,u"� Desea realmente eliminar el registro %s ?" % id, u"Confirmaci�n"):
			if self.DeleteRecord():
				sql = """
				insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension)
				values ('%s', getdate(), '%s', '%s', '%s', '%s')
				""" % (self.BlogGUID, self.usuario, u"Eliminaci�n del Registro", "", "")
				if not self.QueryUpdateRecord(sql):
					Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
				self.FillListCtrl()
				self.GetControl(self.saveformbtn).Enable(False)
				self.GetControl(self.addlistctrlbtn).Enable(True)
				self.GetControl(self.editlistctrlbtn).Enable(True)
				self.GetControl(self.deletelistctrlbtn).Enable(True)
		self.GetControl(self.idlc).SetFocus()
				
	def DeleteRecord(self):
		idreferenciadetalle = self.idreferenciadetalle.GetValue().strip()
		if idreferenciadetalle == "":
			Mensajes().Info(self, u"No se ha especificado el Registro a Eliminar", u"Atenci�n")
			return False
		sql = "update %s set eliminado = 'S' where idreferenciadetalle = %s" % (self.dbtable, idreferenciadetalle)
		return self.QueryUpdateRecord(sql)
		
	def GetRecord(self, record):
		try:
			self.idcheque = int(record)
		except:
			return False
		sql = """ 
		select convert(varchar(10), fechacaptura, 103), tipoprogramacion, convert(varchar(10), fechaprogramada, 103),
		empresaid, idbeneficiario, devolucion, concepto, cantidad, anexo, anexoadicional, especificaciones, idbancoorigen,
		numerochequeorigen, bancodestino, sucursaldestino, plazadestino, clavebancariadestino, observaciones,
		estatus, idfondeo, usuariosolicitante, cantidadcheque, pagoestimacion, convert(varchar(100), BlogGUID)
		from %s where idcheque = %s
		""" % (self.dbtable, self.idcheque)
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		self.fechacaptura = str(row[0]); self.tipoprogramacion = str(row[1]); self.fechaprogramada = str(row[2])
		self.empresaid = int(row[3]); self.idbeneficiario = int(row[4]); self.devolucion = str(row[5])
		self.concepto = str(row[6]).strip(); self.cantidadpartidas = float(row[7])
		self.anexo = str(row[8]); self.anexoadicional = str(row[9]).strip()
		self.especificaciones = str(row[10]); self.idbancoorigen = int(row[11])
		self.numerochequeorigen = str(row[12]).strip(); self.bancodestino = str(row[13]).strip()
		self.sucursaldestino = str(row[14]).strip(); self.plazadestino = str(row[15]).strip()
		self.clavebancariadestino = str(row[16]).strip(); self.observaciones = str(row[17]).strip()
		self.estatus = str(row[18]); self.idfondeo = int(row[19])
		self.usuariosolicitante = str(row[20]).strip(); self.cantidadcheque = float(row[21])
		self.pagoestimacion = int(row[22])
		
		self.BlogGUID = str(row[23])
		
		sql = """
		select codigo from DOCUMENTO where idcheque = %s
		""" % self.idcheque
		cursor.execute(str(sql))
		rows = fetchall(cursor)
		cursor.close()
		self.codigodocumentooriginal = []
		if rows:
			for row in rows:
				self.codigodocumentooriginal.append(int(row[0]))
			self.codigodocumentooriginal.sort()
		return True
	
	def GetCloneRecord(self, record):
		try:
			idcheque = int(record)
		except:
			return False
		sql = """ 
		select tipoprogramacion, fechaprogramada, empresaid, idbeneficiario, devolucion, concepto, cantidad,
		anexo, anexoadicional, especificaciones, bancodestino, sucursaldestino,
		plazadestino, clavebancariadestino, observaciones, convert(varchar(100), BlogGUID)
		from %s where idcheque = %s
		""" % (self.dbtable, idcheque)
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		cursor.close()
		self.tipoprogramacionC = str(row[0]); self.fechaprogramadaC = str(row[1])
		self.empresaidC = int(row[2]); self.idbeneficiarioC = int(row[3]); self.devolucionC = str(row[4])
		self.conceptoC = str(row[5]).strip(); self.cantidadpartidasC = float(row[6]); self.anexoC = str(row[7])
		self.anexoadicionalC = str(row[8]).strip(); self.especificacionesC = str(row[9])
		self.bancodestinoC = str(row[10]).strip(); self.sucursaldestinoC = str(row[11]).strip()
		self.plazadestinoC = str(row[12]).strip(); self.clavebancariadestinoC = str(row[13]).strip()
		self.observacionesC = str(row[14]).strip(); self.BlogGUIDC = str(row[15])
		return True
	
class GixEgresosOtros(wx.Frame, GixBase, GixBaseListCtrl):
	idtxusuarioarea = ID_TEXTEGROTROSUSUARIOAREA
	idtcfechacaptura = ID_TEXTCTRLEGROTROSFECHACAPTURA
	idtcidcheque = ID_TEXTCTRLEGROTROSIDCHEQUE
	idtxestatus = ID_TEXTEGROTROSESTATUS
	idcbempresa = ID_COMBOEGROTROSEMPRESA
	idtxbancoorigen = ID_TEXTEGROTROSBANCOORIGEN
	idchbancoorigen = ID_CHOICEEGROTROSBANCOORIGEN
	idtxbeneficiario = ID_TEXTEGROTROSBENEFICIARIO
	idcbbeneficiario = ID_COMBOEGROTROSBENEFICIARIO
	idtcbeneficiario = ID_TEXTCTRLEGROTROSBENEFICIARIO
	idtcfechamovimiento = ID_TEXTCTRLEGROTROSFECHAMOVIMIENTO
	idbbelegirfechamovimiento = ID_BITMAPBUTTONEGROTROSELEGIRFECHAMOVIMIENTO
	idckestimacion = ID_CHECKBOXEGROTROSESTIMACION
	idcbconcepto = ID_COMBOEGROTROSCONCEPTO
	idtcconcepto = ID_TEXTCTRLEGROTROSCONCEPTO
	idtcobservaciones = ID_TEXTCTRLEGROTROSOBSERVACIONES
	idlcpartidas = ID_LISTCTRLEGROTROSPARTIDAS
	idbbagregarpartida = ID_BITMAPBUTTONEGROTROSAGREGARPARTIDA
	idbbguardarpartida = ID_BITMAPBUTTONEGROTROSGUARDARPARTIDA
	idbbeliminarpartida = ID_BITMAPBUTTONEGROTROSELIMINARPARTIDA
	idtctotalcheque = ID_TEXTCTRLEGROTROSTOTALCHEQUE
	idtxtotalcheque = ID_TEXTEGROTROSTOTALCHEQUE
	idtxcentrocosto = ID_TEXTEGROTROSCENTROCOSTO
	idcbcentrocosto = ID_COMBOEGROTROSCENTROCOSTO
	idtxpartida = ID_TEXTEGROTROSPARTIDA
	idcbpartida = ID_COMBOEGROTROSPARTIDA
	idsbpartida = ID_STATICBITMAPEGROTROSPARTIDA
	idtxsubpartida1 = ID_TEXTEGROTROSSUBPARTIDA1
	idcbsubpartida1 = ID_COMBOEGROTROSSUBPARTIDA1
	idsbsubpartida1 = ID_STATICBITMAPEGROTROSSUBPARTIDA1
	idtxsubpartida2 = ID_TEXTEGROTROSSUBPARTIDA2
	idcbsubpartida2 = ID_COMBOEGROTROSSUBPARTIDA2
	idsbsubpartida2 = ID_STATICBITMAPEGROTROSSUBPARTIDA2
	idtxsubpartida3 = ID_TEXTEGROTROSSUBPARTIDA3
	idcbsubpartida3 = ID_COMBOEGROTROSSUBPARTIDA3
	idsbsubpartida3 = ID_STATICBITMAPEGROTROSSUBPARTIDA3
	idtxsubpartida4 = ID_TEXTEGROTROSSUBPARTIDA4
	idcbsubpartida4 = ID_COMBOEGROTROSSUBPARTIDA4
	idsbsubpartida4 = ID_STATICBITMAPEGROTROSSUBPARTIDA4
	idtxsubpartida5 = ID_TEXTEGROTROSSUBPARTIDA5
	idcbsubpartida5 = ID_COMBOEGROTROSSUBPARTIDA5
	idsbsubpartida5 = ID_STATICBITMAPEGROTROSSUBPARTIDA5
	idtccantidad = ID_TEXTCTRLEGROTROSCANTIDAD
	idtxcantidad = ID_TEXTEGROTROSCANTIDAD
	idbtaplicarform = ID_BUTTONEGROTROSAPLICARFORM
	idbtaceptarform = ID_BUTTONEGROTROSACEPTARFORM
	idbtcancelarform = ID_BUTTONEGROTROSCANCELARFORM

	idtcfechacapturafiltro = ID_TEXTCTRLEGROTROSFECHACAPTURAFILTRO
	idbbelegirfechacapturafiltro = ID_BITMAPBUTTONEGROTROSELEGIRFECHACAPTURAFILTRO
	idbblimpiarfechacapturafiltro = ID_BITMAPBUTTONEGROTROSLIMPIARFECHACAPTURAFILTRO
	idtcfechamovimientofiltro = ID_TEXTCTRLEGROTROSFECHAMOVIMIENTOFILTRO
	idbbelegirfechamovimientofiltro = ID_BITMAPBUTTONEGROTROSELEGIRFECHAMOVIMIENTOFILTRO
	idbblimpiarfechamovimientofiltro = ID_BITMAPBUTTONEGROTROSLIMPIARFECHAMOVIMIENTOFILTRO
	idtcfechacapturarango = ID_TEXTCTRLEGROTROSFECHACAPTURARANGO
	idbbelegirfechacapturarango = ID_BITMAPBUTTONEGROTROSELEGIRFECHACAPTURARANGO
	idbblimpiarfechacapturarango = ID_BITMAPBUTTONEGROTROSLIMPIARFECHACAPTURARANGO
	idtcfechamovimientorango = ID_TEXTCTRLEGROTROSFECHAMOVIMIENTORANGO
	idbbelegirfechamovimientorango = ID_BITMAPBUTTONEGROTROSELEGIRFECHAMOVIMIENTORANGO
	idbblimpiarfechamovimientorango = ID_BITMAPBUTTONEGROTROSLIMPIARFECHAMOVIMIENTORANGO
	idchempresafiltro = ID_CHOICEEGROTROSEMPRESAFILTRO
	idbblimpiarempresafiltro = ID_BITMAPBUTTONEGROTROSLIMPIAREMPRESAFILTRO
	idchconceptofiltro = ID_CHOICEEGROTROSCONCEPTOFILTRO
	idbblimpiarconceptofiltro = ID_BITMAPBUTTONEGROTROSLIMPIARCONCEPTOFILTRO
	idchbeneficiariofiltro = ID_CHOICEEGROTROSBENEFICIARIOFILTRO
	idbblimpiarbeneficiariofiltro = ID_BITMAPBUTTONEGROTROSLIMPIARBENEFICIARIOFILTRO
	idchestatusfiltro = ID_CHOICEEGROTROSESTATUSFILTRO
	idlc = ID_LISTCTRLEGROTROS
	idtctotalvista = ID_TEXTCTRLEGROTROSTOTALVISTA
	idbtfondearlistctrl = ID_BUTTONEGROTROSFONDEARLISTCTRL
	idbtprintexcellistctrl = ID_BUTTONEGROTROSPRINTEXCELLISTCTRL
	idbtagregarlistctrl = ID_BUTTONEGROTROSAGREGARLISTCTRL
	idbteditarlistctrl = ID_BUTTONEGROTROSEDITARLISTCTRL
	idbtcancelarlistctrl = ID_BUTTONEGROTROSCANCELARLISTCTRL
	idbtsalirlistctrl = ID_BUTTONEGROTROSALIRLISTCTRL
	
	idnbform = ID_NOTEBOOKEGROTROSFORM
	idnblistctrl = ID_NOTEBOOKEGROTROSLISTCTRL
	
	cttx = ["idtcfechacaptura", "idtcidcheque", "idtcfechamovimiento", "idtccantidad", "idtcobservaciones"]
	ctch = ["idchbancoorigen"]
	ctcb = ["idcbempresa", "idcbcentrocosto", "idcbpartida", "idcbsubpartida1", "idcbsubpartida2",
		   "idcbsubpartida3", "idcbsubpartida4", "idcbsubpartida5", "idcbconcepto", "idcbbeneficiario"]
	controles_tipo_txt = dict(zip(cttx,map(eval,cttx)))
	controles_tipo_choice = dict(zip(ctch,map(eval,ctch)))
	controles_tipo_combo = dict(zip(ctcb,map(eval,ctcb)))
	controles_de_captura = [(idtcfechamovimiento, "tc"), (idtcobservaciones, "tc"), (idtccantidad, "tc"),
							(idcbempresa, "cb"), (idchbancoorigen, "ch"),
							(idcbcentrocosto, "cb"), (idcbpartida, "cb"), (idcbsubpartida1, "cb"),
							(idcbsubpartida2, "cb"), (idcbsubpartida3, "cb"), (idcbsubpartida4, "cb"),
							(idcbsubpartida5, "cb"), (idcbconcepto, "cb"), (idcbbeneficiario, "cb")]
	controles_cb_deshabilitados = [(1,idtxcentrocosto, idcbcentrocosto), (2, idtxpartida, idcbpartida),
									  (3, idtxsubpartida1, idcbsubpartida1), (4, idtxsubpartida2, idcbsubpartida2),
									  (5, idtxsubpartida3, idcbsubpartida3), (6, idtxsubpartida4, idcbsubpartida4),
									  (7, idtxsubpartida5, idcbsubpartida5)]
	controles_cb_partidas = [idcbcentrocosto, idcbpartida, idcbsubpartida1, idcbsubpartida2,
							 idcbsubpartida3, idcbsubpartida4, idcbsubpartida5]
	lstctrlorder = {0:("ch.idcheque","desc","> "), 1:("ch.fechacaptura","desc",""), 2:("ch.fechaprogramada","desc",""),
					3:("ch.cantidad","desc",""), 4:("ot.descripcion","desc",""), 5:("be.nombre","desc",""),
					6:("em.RazonSocial","desc",""),	7:("ch.estatus","desc",""), 8:("ch.usuariosolicitante","desc","")}
	DicDatesAndTxt = {idbbelegirfechamovimiento : idtcfechamovimiento,
					  idbbelegirfechacapturafiltro : idtcfechacapturafiltro,
					  idbbelegirfechacapturarango : idtcfechacapturarango,
					  idbbelegirfechamovimientofiltro : idtcfechamovimientofiltro,
					  idbbelegirfechamovimientorango : idtcfechamovimientorango}
	coloreable = ("idtcfechacaptura", "idtcidcheque")
	activecontrolafternewrecord = idcbempresa
	dbtable  = "gixegresoscheques"
	
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize,
				style = wx.DEFAULT_FRAME_STYLE, usuario = None):
		
		def BuildWindow():
			wx.Frame.__init__(self, parent, id, title, pos, size, style)
			panel = wx.Panel(self, -1)
			EgresosOtrosFuncion12(panel, True, True)
			self.ObtenerEmpresasFiltro()
			self.ObtenerConceptosFiltro()
			self.ObtenerBeneficiariosFiltro()
		
		def BuildStatusBar():
			anchos = [-1,55,55]
			self.CreateStatusBar(3)
			self.SetStatusWidths(anchos)
			self.SetStatusText(u"Recursos Financieros", 0)
			self.SetStatusText(u"Egresos", 1)
			self.SetStatusText(u"Otros", 2)
			
		def InitialValues(usuario):
			self.usuario = usuario
			self.valida, self.editable = True, True
			self.FillingARecord, self.NewFlag, self.agregar, self.datointernoynombre = False, False, False, False
			self.ckfondeo = False
			self.ctrlindex, self.idcheque, self.origenempresaid, self.origenidbanco = 0, 0, 0, 0
			self.saldobanco, self.saldoinicialdisponible, self.saldoinicialtransito = 0, 0, 0
			self.saldofinaldisponible, self.saldofinaltransito, self.cantidadfondear = 0, 0, 0
			self.cantidadtotalcargo, self.cantidadtotalcheque, self.datointerno = 0, 0, 0
			self.colprev, self.colsort = 0, 0
			self.lstctrlsort = "ch.idcheque desc"
			self.currentitem = None
			self.beneficiario = -1
			self.selecteditems = []
			self.concepto = -1
			
		def UpdateButtons():
			wx.EVT_BUTTON(self, self.idbtfondearlistctrl, self.OnFondear)
			wx.EVT_BUTTON(self, self.idbtprintexcellistctrl, self.OnPrintExcel)
			wx.EVT_BUTTON(self, self.idbtagregarlistctrl, self.OnAgregarDetalle)
			wx.EVT_BUTTON(self, self.idbteditarlistctrl, self.OnEditRecord)
			wx.EVT_BUTTON(self, self.idbtcancelarlistctrl, self.OnCancelarRecord)
			wx.EVT_BUTTON(self, self.idbtsalirlistctrl, self.OnExitRecord)
			wx.EVT_BUTTON(self, self.idbtaplicarform, self.OnAceptarDetalle)
			wx.EVT_BUTTON(self, self.idbtaceptarform, self.OnAceptarDetalle)
			wx.EVT_BUTTON(self, self.idbtcancelarform, self.OnSalirDetalle)
			wx.EVT_CLOSE(self, self.OnClose)
			wx.EVT_BUTTON(self, self.idbbagregarpartida, self.OnAgregarPartida)
			wx.EVT_BUTTON(self, self.idbbguardarpartida, self.OnGuardarPartida)
			wx.EVT_BUTTON(self, self.idbbeliminarpartida, self.OnEliminarPartida)
			
		def WorkWithListCtrl():
			self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnLCtrl, id = self.idlc)
			self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnItemDeselected, id = self.idlc)
			self.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.OnRightClick, id = self.idlc)
			self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnEditRecord, id = self.idlc)
			self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnLCtrlPartidas, id = self.idlcpartidas)
			self.Bind(wx.EVT_LIST_COL_CLICK, self.OnClasificarSolicitud, id = self.idlc)
			
		def WorkWithForm():
			pass
			
		def FilterSectionForListCtrl():
			self.Bind(wx.EVT_TEXT, self.OnChoiceFiltro, id = self.idtcfechacapturafiltro)
			self.Bind(wx.EVT_TEXT, self.OnChoiceFiltro, id = self.idtcfechacapturarango)
			self.Bind(wx.EVT_TEXT, self.OnChoiceFiltro, id = self.idtcfechamovimientofiltro)
			self.Bind(wx.EVT_TEXT, self.OnChoiceFiltro, id = self.idtcfechamovimientorango)
			wx.EVT_BUTTON(self, self.idbblimpiarfechacapturafiltro, self.OnLimpiarFechaCapturaFiltro)
			wx.EVT_BUTTON(self, self.idbblimpiarfechacapturarango, self.OnLimpiarFechaCapturaRango)
			wx.EVT_BUTTON(self, self.idbblimpiarfechamovimientofiltro, self.OnLimpiarFechaProgramadaFiltro)
			wx.EVT_BUTTON(self, self.idbblimpiarfechamovimientorango, self.OnLimpiarFechaProgramadaRango)
			wx.EVT_CHOICE(self, self.idchempresafiltro, self.OnChoiceFiltro)
			wx.EVT_BUTTON(self, self.idbblimpiarempresafiltro, self.OnLimpiarEmpresaFiltro)
			wx.EVT_CHOICE(self, self.idchconceptofiltro, self.OnChoiceFiltro)
			wx.EVT_BUTTON(self, self.idbblimpiarconceptofiltro, self.OnLimpiarConceptoFiltro)
			wx.EVT_CHOICE(self, self.idchbeneficiariofiltro, self.OnChoiceFiltro)
			wx.EVT_BUTTON(self, self.idbblimpiarbeneficiariofiltro, self.OnLimpiarBeneficiarioFiltro)
			wx.EVT_CHOICE(self, self.idchestatusfiltro, self.OnChoiceFiltro)
			self.ObtenerEstatusFiltro()
			
		def InitialControlValues():
			self.GetControl(self.idbtprintexcellistctrl).Show(False)
			self.GetControl(self.idtcobservaciones).SetMaxLength(100)
			self.originales = {}
			for v in self.controles_tipo_txt.itervalues():
				self.Bind(wx.EVT_TEXT, self.OnText, self.GetControl(v))
				self.originales[v] = ""
			self.Bind(wx.EVT_TEXT_ENTER, self.OnTextEnter, self.GetControl(self.idtccantidad))
			for v in self.controles_tipo_choice.itervalues():
				self.Bind(wx.EVT_CHOICE, self.OnChoiceControl, self.GetControl(v))
				self.originales[v] = ""
			for v in self.controles_tipo_combo.itervalues():
				self.Bind(wx.EVT_COMBOBOX, self.OnComboBox, self.GetControl(v))
				self.Bind(wx.EVT_TEXT, self.OnText, self.GetControl(v))
				self.originales[v] = ""
			for v in self.DicDatesAndTxt.keys():
				self.Bind(wx.EVT_BUTTON, self.OnFechaButton, id = v )
			self.originales[self.idckestimacion] = ""
			wx.EVT_CHECKBOX(self, self.idckestimacion, self.OnCheckBoxEstimacion)
				
		def ReadOnlyCtrl():
			self.readonlyctrl = ["idcbcentrocosto", "idcbpartida", "idcbsubpartida1", "idcbsubpartida2",
								 "idcbsubpartida3", "idcbsubpartida4", "idcbsubpartida5", "idtcfechamovimiento"]
	
		def StartNoteBook():
			if wx.Platform == '__WXMSW__':
				self.notebook = {self.idnblistctrl:(995,704), self.idnbform:(895,678)}
			else:
				self.notebook = {self.idnblistctrl:(1080,708), self.idnbform:(924,765)}
				
			self.GetControl(self.idlc).Move(wx.Point(5, 93))
			if wx.Platform == '__WXMSW__':
				self.GetControl(self.idlc).SetSize(wx.Size(951, 430))
			else:
				self.GetControl(self.idlc).SetSize(wx.Size(1055, 430))
				self.GetControl(self.idnbform).SetSize(wx.Size(914, 717))
				
			self.ActiveNoteBook(self.idnblistctrl)
			self.GetControl(self.idnbform).Move(wx.Point(-1, 5))
			self.GetControl(self.idnblistctrl).Move(wx.Point(-1, 5))
			self.GetControl(self.idlc).SetFocus()
		
		BuildWindow(); BuildStatusBar(); InitialValues(usuario); UpdateButtons()
		WorkWithListCtrl(); WorkWithForm(); FilterSectionForListCtrl()
		ReadOnlyCtrl(); InitialControlValues(); StartNoteBook(); self.ChecaUsuario()
		self.FillListCtrl()
		
	def OnExitRecord(self, event):
		self.Destroy()
		
	def OnClose(self, event):
		pass
	
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
				
		return dato.strip()
	
	def ChecaUsuario(self):
		if self.usuario in ("JORGE RIOS", "CESAR", "FABIOLA", "JUAN", "ARAMOS", "SERGIO", "ENRIQUE"):
			self.GetControl(self.idbtfondearlistctrl).Enable(False)
			return False
		#elif self.usuario in ("JUAN", "SERGIO"):
			#self.GetControl(self.idbtfondearlistctrl).Enable(False)
		return True
		
	def ObtenerEmpresasFiltro(self):
		control = self.GetControl(self.idchempresafiltro)
		control.Enable(False)
		control.Show(False)
		control.Clear()
		sql = """
		select EmpresaID, Razonsocial from cont_Empresas where activarecfin = 'S' order by RazonSocial
		"""
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(self.GetString(row[1]), int(row[0]))
				
		control.Show(True)
		control.Enable(True)
		control.SetSelection(-1)
		
	def ObtenerConceptosFiltro(self):
		control = self.GetControl(self.idchconceptofiltro)
		control.Enable(False)
		control.Show(False)
		control.Clear()
		sql = """
		select idreferenciaotros, descripcion from gixegresosotros order by descripcion
		"""
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(self.GetString(row[1]), int(row[0]))
				
		control.Show(True)
		control.Enable(True)
		control.SetSelection(-1)
		
	def ObtenerBeneficiariosFiltro(self):
		control = self.GetControl(self.idchbeneficiariofiltro)
		control.Enable(False)
		control.Show(False)
		control.Clear()
		sql = """
		select idbeneficiario, nombre from gixbeneficiarios order by nombre
		"""
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(self.GetString(row[1]), int(row[0]))
				
		control.Show(True)
		control.Enable(True)
		control.SetSelection(-1)
		
	def OnTextEnter(self, event):
		control = self.GetControl(self.idbbguardarpartida)
		if control.IsEnabled():
			control.SetFocus()

	def OnClasificarSolicitud(self, event):
		self.colsort = event.GetColumn()
		if self.lstctrlorder[self.colsort][1] == "desc":
			self.lstctrlsort = "%s asc" % self.lstctrlorder[self.colsort][0]
			self.lstctrlorder[self.colsort] = (self.lstctrlorder[self.colsort][0], "asc", "< ")
		else:
			self.lstctrlsort = "%s desc" % self.lstctrlorder[self.colsort][0]
			self.lstctrlorder[self.colsort] = (self.lstctrlorder[self.colsort][0], "desc", "> ")
		if self.colprev != self.colsort:
			self.lstctrlorder[self.colprev] = (self.lstctrlorder[self.colprev][0], self.lstctrlorder[self.colprev][1], "")
		self.FillListCtrl()
		self.colprev = self.colsort
		event.Skip()
			
	def ElegirEmpresa(self, titulo = "Origen para Fondeo"):
		self.inxempresa = []
		self.choempresa = []
		query = """
		select EmpresaID, Razonsocial + '_                              '
		from cont_Empresas where activarecfin = 'S' order by RazonSocial
		"""
		cu = r_cn.cursor()
		cu.execute(query)
		rows = fetchall(cu)
		cu.close()
		for row in rows:
			self.inxempresa.append(row[0])
			self.choempresa.append(self.GetStringFromField(row[1]))
		self.index = wx.GetSingleChoiceIndex(u"Opciones",  u"Elegir Empresa %s" % titulo,
											 self.choempresa, parent = None)
		if int(self.index) > -1:
			self.razonsocialorigen, trash = self.choempresa[self.index].split("_          ")
			self.origenempresaid = self.inxempresa[self.index]
			return True
		return False
	
	def ElegirBanco(self, titulo = "Origen para Fondeo"):
		self.inxbanco = []
		self.chobanco = []
		query = """
		select idbanco, nombre + '_                                                            '
		from gixbancos where empresaid = %s order by nombre
		""" % self.origenempresaid
		cu = r_cn.cursor()
		cu.execute(query)
		rows = fetchall(cu)
		cu.close()
		for row in rows:
			self.inxbanco.append(row[0])
			self.chobanco.append(self.GetStringFromField(row[1]))
		self.index = wx.GetSingleChoiceIndex(u"Opciones",  u"Elegir Banco y Cuenta %s" % titulo,
		                                     self.chobanco, parent = None)
		if int(self.index) > -1:
			self.bancoctaorigen, trash = self.chobanco[self.index].split("_          ")
			self.origenidbanco = self.inxbanco[self.index]
			return True
		return False
	
	def OnFondear(self, event):
		#if self.saldofinaldisponible < 0:
			#Mensajes().Info(self, u"� Petici�n de fondeo de cheques cancelada !\n\n" \
							#u"No es posible llevar a cabo el fondeo de cheques mientras el\n" \
							#u"saldo final se encuentre en rojo (saldo negativo).", u"Atenci�n")
		#else:
		# lo que sigue va dentro del else. Adaptaci�n para el fondeo inicial
		self.selecteditems.sort()
		if len(self.selecteditems) > 1: char = "s"
		else: char = ""
		if Mensajes().YesNo(self,u"Egreso%s a Aplicar:\n%s\n\n" \
							u"� Desea continuar ?" \
							% (char, self.selecteditems), u"Confirmaci�n"):
			self.Fondear()
		self.GetControl(self.idlc).SetFocus()

	def Fondear(self):
		sql = "select getdate()"
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		defaultvalue = u"Egreso aplicado el %s" % str(row[0])
		dlg = wx.TextEntryDialog(self, u"Descripci�n", u"Aplicaci�n del Egreso", "%s" % defaultvalue)
		while True:
			if dlg.ShowModal() == wx.ID_OK:
				descripcion = dlg.GetValue()
				if descripcion:
					dlg.Destroy()
					if Mensajes().YesNo(self,u"Recuerde que al llevar a cabo la aplicaci�n, se afectar�n " \
					                        u"las partidas y/o subpartidas que se\nincluyan en los egresos " \
					                        u"elegidos a ser aplicados.\n\n" \
					                        u"Tambi�n ser�n generados los movimientos de cargo, los cuales, " \
					                        u"afectar�n directamente\na las cuentas del banco (emisoras del egreso), " \
					                        u"asi como al saldo de las mismas.\n\n" \
					                        u"� Desea realmente llevar a cabo la aplicaci�n del egreso ?", u"Confirmaci�n"):
						biengrabado, idfondeo = self.AgregaFondeo(descripcion)
						if biengrabado:
							self.AplicaFondeo(idfondeo)
							self.FillListCtrl()
							self.GetControl(self.idbtfondearlistctrl).Enable(False)
							self.GetControl(self.idbteditarlistctrl).Enable(False)
							self.GetControl(self.idbtcancelarlistctrl).Enable(False)
							Mensajes().Info(self, u"Aplicaci�n del egreso finalizada", u"Aviso")
						else:
							Mensajes().Info(self, u"� No fu� posible llevar a cabo la aplicaci�n del egreso !", u"Atenci�n")
						self.GetControl(self.idlc).SetFocus()
						break
					else:
						self.GetControl(self.idlc).SetFocus()
						break
				else:
					Mensajes().Info(self, u"Para continuar es necesario que digite\n" \
									u"la descripci�n de la aplicaci�n del egreso.", u"Atenci�n")
					dlg.SetValue(defaultvalue)
			else:
				dlg.Destroy()
				self.GetControl(self.idlc).SetFocus()
				break
			
	def AgregaFondeo(self, descripcion):
		sql = """
		insert into gixfondeos (descripcion, fechacreacion, usuariocreador)
		values ('%s', getdate(), '%s')
		""" % (descripcion, self.usuario)
		biengrabado =  self.QueryUpdateRecord(sql)
		idfondeo = 0
		if biengrabado:
			sql = "select max(idfondeo) from gixfondeos"
			cu = r_cn.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			cu.close()
			if row is not None:
				idfondeo = int(row[0])
			else:
				biengrabado = False
		return biengrabado, int(idfondeo)
	
	def AplicaFondeo(self, idfondeo):
		wx.BeginBusyCursor()
		setListForQuery = "estatus = '%s', idfondeo = %s, cantidadcheque = cantidad" % ("P", idfondeo)
		for idcheque in self.selecteditems:
			sql = """
			update %s set %s where idcheque = %s
			""" % (self.dbtable, setListForQuery, idcheque)
			queTal = self.QueryUpdateRecord(sql)
			if queTal:
				sql = """
				select convert(varchar(10), ch.fechaprogramada, 111), ot.descripcion, ch.cantidad,
				ch.especificaciones, convert(varchar(100), ch.BlogGUID)
				from %s ch join gixegresosotros ot on ot.idreferenciaotros = ch.idreferenciaotros
				where idcheque = %s
				""" % (self.dbtable, idcheque)
				cu = r_cn.cursor()
				cu.execute(str(sql))
				row = fetchone(cu)
				cu.close()
				fechaprogramada = str(row[0]); concepto = str(row[1]); cantidad = float(row[2])
				especificaciones = str(row[3]); blogcheque = str(row[4])
				sql = """
				insert into Blogs
				(BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension, Estatus)
				values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
				""" % (blogcheque, self.usuario, u"Aplicaci�n del Egreso", "", "", "P")
				if not self.QueryUpdateRecord(sql):
					Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
				totalcheque = self.ActualizaPartidas(idcheque, fechaprogramada)
				# (aa).- Lo siguiente genera el movimiento (cargo) afectando la cuenta-banco y el saldo.
				if totalcheque:
					todook, idreferenciamovto = \
						  self.AgregaMovimientoBanco(idcheque, fechaprogramada, cantidad,\
													 especificaciones, referencia = concepto)
					if not todook:
						Mensajes().Info(self, u"� Se detectaron problemas al actualizar bancos !\n\n" \
										u"Egreso: %s, Fecha del Movimiento: %s, Total del Egreso: %s" \
										u", Movimiento de Banco: %s\n\n� Tome nota y revise !" \
										% (idcheque, fechaprogramada, totalcheque, idreferenciamovto), u"Atenci�n")
					elif idreferenciamovto > 0:
						setList = "idreferenciamovto = %s" % (idreferenciamovto)
						sqlQuery = """
						update %s set %s where idcheque = %s
						""" % (self.dbtable, setList, idcheque)
						queTal = self.QueryUpdateRecord(sqlQuery)
						if not queTal:
							Mensajes().Info(self, u"� Se detectaron problemas al empatar bancos y egresos!\n\n" \
											u"Egreso: %s, Fecha del Movimiento: %s, Total del Egreso: %s" \
											u", Movimiento de Banco: %s\n\n� Tome nota y revise !" \
											% (idcheque, fechaprogramada, totalcheque, idreferenciamovto), u"Atenci�n")
					else:
						Mensajes().Info(self, u"� Se detectaron problemas al empatar bancos y egresos!\n\n" \
										u"Egreso: %s, Fecha del Movimiento: %s, Total del Egreso: %s" \
										u", Movimiento de Banco: %s\n\n� Tome nota y revise !" \
										% (idcheque, fechaprogramada, totalcheque, idreferenciamovto), u"Atenci�n")
						
		wx.EndBusyCursor()
	
	def ActualizaPartidas(self, idcheque, fechaprogramada, sumaoresta = 1, totalcheque = 0):
		sql = """
		select partida, subpartida1, subpartida2, subpartida3, subpartida4, subpartida5, cantidad
		from gixegresoschequespartidas where idcheque = %s order by idchequepartida
		""" % idcheque
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				cantidad = float(row[6])
				totalcheque += cantidad
				cantidad *= float(sumaoresta)
				for inx in range(0,6):
					partidaid = int(row[inx])
					if partidaid < 0:
						break
					elif not self.ActualizaSaldoPartida(idcheque, partidaid, fechaprogramada, cantidad):
							Mensajes().Info(self, u"� Se detectaron problemas al actualizar partidas !\n\n" \
											u"Egreso: %s, Partida: %s, Fecha del Movimiento: %s, Cantidad: %s\n\n" \
											u"� Tome nota y revise !" \
											% (idcheque, partidaid, fechaprogramada, cantidad), u"Atenci�n")
		return totalcheque
	
	def ActualizaSaldoPartida(self, idcheque, partidaid, fechaprogramada, cantidad, periodo = "", updateok = True):
		try:
			fecha_ano, fecha_mes, fecha_dia = fechaprogramada.split('/')
			fecha_ano, fecha_mes, fecha_dia = int(fecha_ano), int(fecha_mes), int(fecha_dia)
			periodo = "'%04d/%02d/01'" % (fecha_ano, fecha_mes)
		except:
			Mensajes().Info(self, u"Problemas con la fecha al actualizar saldos.\n" \
							u"Egreso: %s, Partida: %s, Fecha del Movimiento: %s, Periodo: %s\n\n" \
							u"� No fu� afectada la partida, tome nota y revise !" \
							% (idcheque, partidaid, fechaprogramada, periodo), u"Atenci�n")
			return False
		
		sql = """
		select saldoinicial, totalabonos, totalcargos from gixpartidasxperiodo
		where partidaid = %s and periodo = %s
		""" % (partidaid, periodo)
		try:
			cu = r_cn.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			cu.close()
			if not row:
				todobien, saldo = self.ObtenerSaldoInicial(partidaid, fecha_mes, fecha_ano)
				if todobien:
					saldosiguienteperiodo = float(saldo) - float(cantidad)
					sql = """
					insert into gixpartidasxperiodo
					(partidaid, periodo, saldoinicial, totalabonos, totalcargos)
					values (%s, %s, %s, %s, %s)
					""" % (partidaid, periodo, float(saldo), 0, float(cantidad))
					updateok = self.QueryUpdateRecord(sql)
				else:
					return False
			else:
				totalcargos = float(row[2]) + float(cantidad)
				saldosiguienteperiodo = float(row[0]) + float(row[1]) - float(totalcargos)
				sql = """
				update gixpartidasxperiodo set totalcargos = %s
				where partidaid = %s and periodo = %s
				""" % (float(totalcargos), partidaid, periodo)
				updateok = self.QueryUpdateRecord(sql)
		except:
			Mensajes().Info(self, u"Problemas al actualizar saldos\n%s" % sql, u"Atenci�n")
			return False
		
		if updateok:
			updateok = self.ActualizaSaldosIniciales(partidaid, fecha_mes, fecha_ano, saldosiguienteperiodo)
			
		return updateok
	
	def ObtenerSaldoInicial(self, partidaid, fecha_mes, fecha_ano, saldo = 0, todobien = True):
		sql = """
		select min(periodo) from gixpartidasxperiodo where partidaid = %s
		""" % partidaid
		try:
			cu = r_cn.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			cu.close()
			if str(row[0]) != "None":
				limite_periodo = str(row[0])
				limite_ano, limite_mes, limite_dia = limite_periodo.split('-')
			else:
				limite_ano, limite_mes = fecha_ano, fecha_mes
			limite_ano, limite_mes = int(limite_ano), int(limite_mes)
			while True:
				if fecha_mes == 1:
					fecha_mes = 12
					fecha_ano -= 1
				else:
					fecha_mes -= 1
				if fecha_ano < limite_ano:
					break
				if fecha_ano == limite_ano and fecha_mes < limite_mes:
					break
				periodo = "'%04d/%02d/01'" % (fecha_ano, fecha_mes)
				sql = """
				select saldoinicial + totalabonos - totalcargos
				from gixpartidasxperiodo where partidaid = %s and periodo = %s
				""" % (partidaid, periodo)
				try:
					cu = r_cn.cursor()
					cu.execute(str(sql))
					row = fetchone(cu)
					cu.close()
					if row:
						saldo = float(row[0])
						break
				except:
					Mensajes().Info(self, u"Problemas al buscar saldo inicial\n\n%s" % sql, u"Atenci�n")
					todobien = False
					break
		except:
			Mensajes().Info(self, u"Problemas al buscar periodo inicial\n\n%s" % sql, u"Atenci�n")
			todobien = False
			
		return todobien, saldo
	
	def ActualizaSaldosIniciales(self, partidaid, fecha_mes, fecha_ano, saldosiguienteperiodo, todobien = True):
		sql = """
		select max(periodo) from gixpartidasxperiodo where partidaid = %s
		""" % partidaid
		try:
			cu = r_cn.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			cu.close()
			if str(row[0]) != "None":
				limite_periodo = str(row[0])
				limite_ano, limite_mes, limite_dia = limite_periodo.split('-')
			else:
				limite_ano, limite_mes = fecha_ano, fecha_mes
			limite_ano, limite_mes = int(limite_ano), int(limite_mes)
			while True:
				if fecha_mes == 12:
					fecha_mes = 1
					fecha_ano += 1
				else:
					fecha_mes += 1
				if fecha_ano > limite_ano:
					break
				if fecha_ano == limite_ano and fecha_mes > limite_mes:
					break
				periodo = "'%04d/%02d/01'" % (fecha_ano, fecha_mes)
				sql = """
				select saldoinicial, totalabonos, totalcargos
				from gixpartidasxperiodo where partidaid = %s and periodo = %s
				""" % (partidaid, periodo)
				try:
					cu = r_cn.cursor()
					cu.execute(str(sql))
					row = fetchone(cu)
					cu.close()
					if row:
						sql = """
						update gixpartidasxperiodo set saldoinicial = %s
						where partidaid = %s and periodo = %s
						""" % (float(saldosiguienteperiodo), partidaid, periodo)
						saldosiguienteperiodo += float(row[1]) - float(row[2])
						todobien = self.QueryUpdateRecord(sql)
						if not todobien:
							break
				except:
					Mensajes().Info(self, u"Problemas al buscar saldo inicial\n%s" \
							% sql, u"Atenci�n")
					todobien = False
					break
		except:
			Mensajes().Info(self, u"Problemas al buscar �ltimo periodo\n%s" % sql, u"Atenci�n")
			todobien = False
		
		return todobien

	def AgregaMovimientoBanco(self, idcheque, fechaprogramada, cantidad, especificaciones, referencia):
		empresaid = self.empresaid
		idbanco = self.idbancoorigen
		fechamovto = "NULL"
		periodo = ""
		try:
			fecha_ano, fecha_mes, fecha_dia = fechaprogramada.split('/')
			fecha_ano, fecha_mes, fecha_dia = int(fecha_ano), int(fecha_mes), int(fecha_dia)
			fechamovto = "'%04d/%02d/%02d'" % (fecha_ano, fecha_mes, fecha_dia)
			periodo = "'%04d/%02d/01'" % (fecha_ano, fecha_mes)
		except:
			Mensajes().Info(self, u"Problemas con la fecha al agregar movimientos", u"Atenci�n")
			return False, 0
		tipomovto = "C"
		estatus = "F"
		sqlFields = """
		empresaid, idbanco, fechamovto, tipomovto, cantidad, referencia, estatus, clasificado, eliminado, idcheque
		"""
		sqlValues = "%s, %s, %s, '%s', %s, '%s', '%s', '%s', '%s', %s" % \
			(empresaid, idbanco, fechamovto, tipomovto, float(cantidad), referencia,
			 estatus, "S", "N", idcheque)
		sql = "insert into gixbancosmovimientos (%s) values (%s)" % (sqlFields, sqlValues) 
		queTal = self.QueryUpdateRecord(sql)
		numero = 0
		if queTal:
			if not self.ActualizarSaldoBanco(idbanco, periodo, cantidad, fecha_mes, fecha_ano, tipomovto):
				return False, 0
			sqlx = "select max(idreferenciamovto) from gixbancosmovimientos"
			cu = r_cn.cursor()
			cu.execute(str(sqlx))
			row = fetchone(cu)
			cu.close()
			if row is not None:
				numero = int(row[0])
			sqly = """
			select convert(varchar(100), BlogGUID) from gixbancosmovimientos where idreferenciamovto = %s
			""" % numero
			cu = r_cn.cursor()
			cu.execute(str(sqly))
			row = fetchone(cu)
			cu.close()
			if row is not None:
				self.BlogGUID = row[0]
			comentario = u"Aplicaci�n del Egreso No. %s" % idcheque
			sql = """
			insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura,
			ContenidoText, ContenidoBinario, Extension)
			values ('%s', getdate(), '%s', '%s', '%s', '%s')
			""" % (self.BlogGUID, self.usuario, comentario, "", "")
			biengrabado, trash = self.QueryUpdateRecord(sql)
			if not biengrabado:
				Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")

		return queTal, int(numero)
	
	def ActualizarSaldoBanco(self, idbanco, periodo, cantidad, fecha_mes, fecha_ano, tipomovto, updateok = True):
		sql = """
		select saldoinicial, totalabonos, totalcargos from gixbancossaldosxperiodo
		where idbanco = %s and periodo = %s
		""" % (idbanco, periodo)
		try:
			cu = r_cn.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			cu.close()
			if not row:
				todobien, saldo = self.ObtenerSaldoInicialBanco(idbanco, fecha_mes, fecha_ano)
				if todobien:
					if tipomovto == "A":
						saldosiguienteperiodo = float(saldo) + float(cantidad)
						sql = """
						insert into gixbancossaldosxperiodo
						(idbanco, periodo, saldoinicial, totalabonos, totalcargos)
						values (%s, %s, %s, %s, %s)
						""" % (idbanco, periodo, float(saldo), float(cantidad), 0)
					else:
						saldosiguienteperiodo = float(saldo) - float(cantidad)
						sql = """
						insert into gixbancossaldosxperiodo
						(idbanco, periodo, saldoinicial, totalabonos, totalcargos)
						values (%s, %s, %s, %s, %s)
						""" % (idbanco, periodo, float(saldo), 0, float(cantidad))
					updateok = self.QueryUpdateRecord(sql)
				else:
					updateok = False
			else:
				totalabonos = float(row[1])
				totalcargos = float(row[2])
				if tipomovto == "A":
					totalabonos += float(cantidad)
				else:
					totalcargos += float(cantidad)
				saldosiguienteperiodo = float(row[0]) + float(totalabonos) - float(totalcargos)
				sql = """
				update gixbancossaldosxperiodo set totalabonos = %s, totalcargos = %s
				where idbanco = %s and periodo = %s
				""" % (float(totalabonos), float(totalcargos), idbanco, periodo)
				updateok = self.QueryUpdateRecord(sql)
		except:
			Mensajes().Info(self, u"Problemas al actualizar saldos\n%s" % sql, u"Atenci�n")
			updateok = False
			
		updateok = self.ActualizaSaldosInicialesBanco(idbanco, fecha_mes, fecha_ano, saldosiguienteperiodo)
			
		return updateok
	
	def ObtenerSaldoInicialBanco(self, idbanco, fecha_mes, fecha_ano, saldo = 0, todobien = True):
		sql = """
		select min(periodo) from gixbancossaldosxperiodo where idbanco = %s
		""" % idbanco
		try:
			cu = r_cn.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			cu.close()
			if str(row[0]) != "None":
				limite_periodo = str(row[0])
				limite_ano, limite_mes, limite_dia = limite_periodo.split('-')
			else:
				limite_ano, limite_mes = fecha_ano, fecha_mes
			limite_ano, limite_mes = int(limite_ano), int(limite_mes)
			while True:
				if fecha_mes == 1:
					fecha_mes = 12
					fecha_ano -= 1
				else:
					fecha_mes -= 1
				if fecha_ano < limite_ano:
					break
				if fecha_ano == limite_ano and fecha_mes < limite_mes:
					break
				periodo = "'%04d/%02d/01'" % (fecha_ano, fecha_mes)
				sql = """
				select saldoinicial + totalabonos - totalcargos
				from gixbancossaldosxperiodo where idbanco = %s and periodo = %s
				""" % (idbanco, periodo)
				try:
					cu = r_cn.cursor()
					cu.execute(str(sql))
					row = fetchone(cu)
					cu.close()
					if row:
						saldo = float(row[0])
						break
				except:
					Mensajes().Info(self, u"Problemas al buscar saldo inicial\n%s" \
							% sql, u"Atenci�n")
					todobien = False
					break
		except:
			Mensajes().Info(self, u"Problemas al buscar periodo inicial\n%s" % sql, u"Atenci�n")
			todobien = False
			
		return todobien, saldo
	
	def ActualizaSaldosInicialesBanco(self, idbanco, fecha_mes, fecha_ano, saldosiguienteperiodo):
		sql = """
		select max(periodo) from gixbancossaldosxperiodo where idbanco = %s
		""" % idbanco
		try:
			cu = r_cn.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			cu.close()
			if str(row[0]) != "None":
				limite_periodo = str(row[0])
				limite_ano, limite_mes, limite_dia = limite_periodo.split('-')
			else:
				limite_ano, limite_mes = fecha_ano, fecha_mes
				
			limite_ano, limite_mes = int(limite_ano), int(limite_mes)
			todobien = True
			while True:
				if fecha_mes == 12:
					fecha_mes = 1
					fecha_ano += 1
				else:
					fecha_mes += 1
				if fecha_ano > limite_ano:
					break
				if fecha_ano == limite_ano and fecha_mes > limite_mes:
					break
				periodo = "'%04d/%02d/01'" % (fecha_ano, fecha_mes)
				sql = """
				select saldoinicial, totalabonos, totalcargos
				from gixbancossaldosxperiodo where idbanco = %s and periodo = %s
				""" % (idbanco, periodo)
				try:
					cu = r_cn.cursor()
					cu.execute(str(sql))
					row = fetchone(cu)
					cu.close()
					if row:
						sql = """
						update gixbancossaldosxperiodo set saldoinicial = %s
						where idbanco = %s and periodo = %s
						""" % (float(saldosiguienteperiodo), idbanco, periodo)
						saldosiguienteperiodo += float(row[1]) - float(row[2])
						todobien = self.QueryUpdateRecord(sql)
						if not todobien:
							break
				except:
					Mensajes().Info(self, u"Problemas al buscar saldo inicial\n%s" \
							% sql, u"Atenci�n")
					todobien = False
					break
		except:
			Mensajes().Info(self, u"Problemas al buscar �ltimo periodo\n%s" % sql, u"Atenci�n")
			todobien = False
		
		return todobien
	
	def OnChoiceFiltro(self, event):
		id = event.GetId()
		if id == self.idchestatusfiltro:
			estatus = self.GetControl(id).GetStringSelection()
			if estatus == "<Todo>":
				Mensajes().Info(self, u"El estatus <Todo> no incluye lo cancelado.", u"Aviso")
			if estatus in ("<Todo>", "Aplicado", "Cancelado"):
				self.GetControl(self.idbtfondearlistctrl).Enable(False)
			else:
				if self.ChecaUsuario():
					self.GetControl(self.idbtfondearlistctrl).Enable(True)
		self.FillListCtrl()
		
	def OnLimpiarEmpresaFiltro(self, event):
		self.ObtenerEmpresasFiltro()
		self.FillListCtrl()
		
	def OnLimpiarConceptoFiltro(self, event):
		self.ObtenerConceptosFiltro()
		self.FillListCtrl()
		
	def OnLimpiarBeneficiarioFiltro(self, event):
		self.ObtenerBeneficiariosFiltro()
		self.FillListCtrl()
		
	def OnLimpiarFechaCapturaFiltro(self, event):
		self.GetControl(self.idtcfechacapturafiltro).SetValue("")
		self.GetControl(self.idtcfechacapturarango).SetValue("")
		
	def OnLimpiarFechaCapturaRango(self, event):
		self.GetControl(self.idtcfechacapturarango).SetValue("")
		
	def OnLimpiarFechaProgramadaFiltro(self, event):
		self.GetControl(self.idtcfechamovimientofiltro).SetValue("")
		self.GetControl(self.idtcfechamovimientorango).SetValue("")
		
	def OnLimpiarFechaProgramadaRango(self, event):
		self.GetControl(self.idtcfechamovimientorango).SetValue("")
		
	def OnCheckBoxEstimacion(self, event):
		pagoestimacion = 0
		if self.GetControl(self.idckestimacion).IsChecked():
			pagoestimacion = 1
		if pagoestimacion != self.pagoestimacion:
			self.pagoestimacion = pagoestimacion
		self.RevisaCambios()
		
	def OnChoiceControl(self, event):
		id = event.GetId()
		self.ChoiceControl(id)
		self.RevisaCambios()
		
	def ChoiceControl(self, id):
		if not self.FillingARecord:
			if self.GetControl(id).GetStringSelection() <> self.originales[id]:
				self.GetControl(id).SetBackgroundColour(wx.CYAN)
			else:
				self.GetControl(id).SetBackgroundColour(wx.WHITE)
			self.GetControl(id).Refresh()
		if id == self.idchbancoorigen:
			choice = self.GetControl(id)
			index = choice.GetSelection()
			idbancoorigen = choice.GetClientData(index)
			if idbancoorigen != self.idbancoorigen:
				self.idbancoorigen = idbancoorigen
				
	def OnRightClick(self, event):
		self.idregistryblog = self.idcheque
		self.idtitleblog = "Registro"
		if not hasattr(self, "ID_VIEWBLOG"):
			ID_VIEWBLOG = wx.NewId(); ID_ADDBLOG = wx.NewId()
			self.Bind(wx.EVT_MENU, self.OnViewBlog, id = ID_VIEWBLOG)
			self.Bind(wx.EVT_MENU, self.OnAddBlog, id = ID_ADDBLOG)
			self.Bind(wx.EVT_MENU, self.OnAgregarDetalle, id = self.idbtagregarlistctrl)
			self.Bind(wx.EVT_MENU, self.OnEditRecord, id = self.idbteditarlistctrl)
			self.Bind(wx.EVT_MENU, self.OnCancelarRecord, id = self.idbtcancelarlistctrl)
		popup = wx.Menu()
		popup.Append(ID_VIEWBLOG, u"Consultar el Blog del %s %s" % (self.idtitleblog, self.idregistryblog))
		popup.Append(ID_ADDBLOG, u"Participar en el Blog...")
		popup.AppendSeparator()
		popup.Append(self.idbtagregarlistctrl, u"Agregar")
		popup.Append(self.idbteditarlistctrl, u"Editar")
		popup.Append(self.idbtcancelarlistctrl, u"Cancelar")
		if not self.editable:
			popup.Enable(self.idbteditarlistctrl, False)
			popup.Enable(self.idbtcancelarlistctrl, False)
		self.PopupMenu(popup)
		popup.Destroy()
		
	def OnViewBlog(self, event):
		goal = ((90, u"Fecha"), (90, u"Hora"), (100, u"Usuario"), (300, u"Blog"))
		query = """
		select convert(varchar(50), FechaCaptura, 103), convert(varchar(50), FechaCaptura, 108),
		UsuarioCaptura, ContenidoText from Blogs
		where BlogGUID = '%s' order by FechaCaptura desc;
		select count(*) from Blogs where BlogGUID = '%s'
		""" % (self.BlogGUID, self.BlogGUID)
		title = u"Consultando el Blog del %s %s" % (self.idtitleblog, self.idregistryblog)
		table = "Blogs"
		frame = GixFrameCatalogo(self, -1, title, wx.Point(20,20), wx.Size(800,600), 
								 wx.DEFAULT_FRAME_STYLE, None, None, None, table, goal, query,
								 gridsize = [680,350], color = "AQUAMARINE")
		frame.Centre(wx.BOTH)
		frame.Show(True)
		
	def OnAddBlog(self, event):
		blog = wx.TextEntryDialog(self, u"Digite", u"Participando en el Blog del %s %s"
								  % (self.idtitleblog, self.idregistryblog),
								  defaultValue = "", style = wx.OK | wx.TE_MULTILINE)
		blog.SetSize(wx.Size(400,300))
		blog.Centre(wx.BOTH)
		blog.ShowModal()
		comment = blog.GetValue()
		blog.Destroy()
		if comment:
			sql = """
			insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension)
			values ('%s', getdate(), '%s', '%s', '%s', '%s')
			""" % (self.BlogGUID, self.usuario, comment, "", "")
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"� Problemas al actualizar el blog !", u"Atenci�n")
			else:
				self.EnviaMail(comment)
			
	def EnviaMail(self, comment):
		demails = {}
		lusers = [self.usuario, 'ADRIANA']
		for usr in lusers:
			usuarionombre, area, email, aborta = self.ObtenerUsuarioAreaEmail(usr)
			if aborta: return
			else:
				demails[usr] = (usuarionombre, area, email)
		
		if self.estatus == "O": estatus = "SIN APLICAR (OTRO EGRESO)"
		elif self.estatus == "P": estatus = "APLICADO (OTRO EGRESO)"
		elif self.estatus == "N": estatus = "CANCELADO (OTRO EGRESO)"
		else: estatus = "DESCONOCIDO (OTRO EGRESO)"
		lemails = demails.keys()
		nota = u"Actividad en el blog del egreso %s" % self.idregistryblog
		nsubject = "Egreso %s. Actividad en el blog (No Contestar)" % (self.idregistryblog)
		nfromAddr = "gix@grupoiclar.com"
		mensaje = u"""
%s
	
Participante: %s
Estatus del egreso: %s

%s
		""" % (nota, self.usuario.decode("iso8859-1"), estatus.decode("iso8859-1"),
			   comment.decode("iso8859-1"))
		
		nuevomensaje = []
		for letra in mensaje:
			try:
				salida = str(letra)
			except:
				salida = "*"
			nuevomensaje.append(salida)
			
		nmensaje = "".join(nuevomensaje)
		for mail in lemails:
			if not jsonweb:
				pass
				#toAddr = []
				#toAddr.append(mail)
				#sendmail(toAddr, fromAddr = nfromAddr, subject = nsubject, message = nmensaje)
			else:
				values = dict(addr = mail, subject = nsubject, body = nmensaje)
				data = urlencode(values)
				json_string = urlopen("%s?%s" % (URLSMAIL, data)).read()
				foo = json.loads(json_string)
			
	def ObtenerUsuarioAreaEmail(self, usuario):
		sql = """
		select rtrim(ltrim(u.Nombre)), rtrim(ltrim(p.descripcion)), rtrim(ltrim(e.email))
		from Usuarios u join gixempleados e on u.Usuario = e.usuario
		join gixpuestos p on e.idempleado = p.idempleado
		where u.Usuario = '%s'
		""" % usuario
		try:
			cu = r_cn.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			cu.close()
			if row:
				usuarionombre, area, email = map(str, row)
				return usuarionombre, area, email, False
			else:
				aborta = True
		except:
			aborta = True
			
		if aborta:
			Mensajes().Info(self, u"� Su participaci�n en el blog no pudo ser notificada por e-mail !\n\n" \
							u"Usuario: %s\nNombre: %s\nArea: %s\nE-mail: %s\n\n" \
							u"Por favor verifique la informaci�n anterior." \
							% (self.usuario, usuarionombreblog, areablog, emailblog), "Atenci�n")
			return "", "", "", True
		
	def OnAceptarDetalle(self, event):
		id = event.GetId()
		if id == self.idbtaceptarform:
			if self.AceptarDetalle():
				self.FillListCtrl()
				self.SalirDetalle()
		else:
			if self.AceptarDetalle():
				self.modoedicion = True
				self.EditRecord()
				self.modoedicion = False
				self.GetControl(self.idbbagregarpartida).SetFocus()
	
	def CantidadDecimal(self, cantidad):
		decimal.getcontext().prec = 2
		fraccion = Decimal(Decimal(str(cantidad)) - int(Decimal(str(cantidad))))
		decimal.getcontext().prec = 28
		return int(Decimal(str(cantidad))) + fraccion
	
	def AceptarDetalle(self, validacantidad = True, salirdetalle = False):
		if (validacantidad and self.estatus == "P"):
			cantidad = self.totalcheque
			cantidadcheque = self.cantidadcheque
			q1 = self.CantidadDecimal(cantidad)
			q2 = self.CantidadDecimal(cantidadcheque)
			if q1 != q2:
				totalpartidas = str(amount_and_cents_with_commas(cantidad))
				totalcheque = str(amount_and_cents_with_commas(cantidadcheque))
				Mensajes().Info(self, u"� Por favor revise las partidas !\n\n" \
								u"El total de las partidas $ %s no es igual a la cantidad\n" \
								u"con la que se aplic� el egreso $ %s" \
								% (totalpartidas, totalcheque), u"Atenci�n")
				return False
		if salirdetalle:
			return True
		self.NewFlag = False
		self.Text()
		if not self.NewFlag:
			if 1 in (self.partidaafectable, self.subpartida1afectable, self.subpartida2afectable, \
					 self.subpartida3afectable, self.subpartida4afectable, self.subpartida5afectable):
				continua, self.idconcepto = self.RevisaConcepto()
				if continua in (1, 2):
					beneficiario = self.GetControl(self.idcbbeneficiario).GetValue().strip()
					if beneficiario:
						continua, self.idbeneficiario = self.RevisaBeneficiario()
					if continua == 1:
						if self.agregar:
							if Mensajes().YesNo(self, u"Recuerde haber elegido correctamente la Empresa,\n" \
												u"ya que no podra modificarse posteriormente.\n\n" \
												u"� Desea realmente grabar la informaci�n ?", u"Confirmaci�n"):
								self.SaveRecord()
								return True
						else:
							self.SaveRecord()
							return True
					elif continua == 2:
						self.SaveRecord()
						return True
			else:
				Mensajes().Info(self, u"� Por favor revise la partida o subpartida que desea afectar !", u"Atenci�n")
				return False
		
		return False

	def RevisaConcepto(self):
		concepto = self.GetControl(self.idcbconcepto).GetValue().strip()
		try:
			con = concepto.encode("iso8859-1")
		except:
			con = concepto
		sql = """
		select idreferenciaotros from gixegresosotros where descripcion = '%s'
		""" % con
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row:
			return 1, int(row[0])
		else:
			if Mensajes().YesNo(self, u"No se encuentra registrado el concepto:\n%s\n" \
								u"Para continuar es necesario registrarlo.\n\n"
								u"� Desea realmente registrar el nuevo concepto y grabar la informaci�n ?" \
								% concepto, u"Confirmaci�n"):
				sql = "insert into gixegresosotros (descripcion) values ('%s')" % concepto
				sqlmax = "select max(idreferenciaotros) from gixegresosotros"
				queTal, identity =  self.QueryUpdateRecord(sql, sqlmax, True)
				if queTal:
					return 2, identity
				else:
					return 0, 0
			else:
				return 0, 0
			
	def RevisaBeneficiario(self):
		beneficiario = self.GetControl(self.idcbbeneficiario).GetValue().strip()
		if beneficiario:
			try:
				ben = beneficiario.encode("iso8859-1")
			except:
				ben = beneficiario
			sql = """
			select idbeneficiario from gixbeneficiarios where nombre = '%s'
			""" % ben
			cu = r_cn.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			cu.close()
			if row:
				return 1, int(row[0])
			else:
				if Mensajes().YesNo(self, u"No se encuentra registrado el beneficiario:\n%s\n" \
									u"Para continuar es necesario registrarlo.\n\n"
									u"� Desea realmente registrar el nuevo beneficiario y grabar la informaci�n ?" \
									% beneficiario, u"Confirmaci�n"):
					sql = "insert into gixbeneficiarios (nombre) values ('%s')" % beneficiario
					sqlmax = "select max(idbeneficiario) from gixbeneficiarios"
					queTal, identity =  self.QueryUpdateRecord(sql, sqlmax, True)
					if queTal:
						return 2, identity
					else:
						return 0, 0
				else:
					return 0, 0
			
	def OnAgregarDetalle(self, event):
		self.GetControl(self.idtcbeneficiario).SetValue("")
		self.GetControl(self.idtcconcepto).SetValue("")
		self.agregar, self.NewFlag, self.modoedicion = True, True, True
		#self.estoyenobtenerbancobeneficiario = False
		self.GetControl(self.idlcpartidas).ClearAll()
		self.GetControl(self.idtctotalcheque).SetValue("")
		self.GetControl(self.idtctotalcheque).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(self.idtxtotalcheque).SetLabel("")
		for id, tipo in self.controles_de_captura:
			self.GetControl(id).Enable(True)
		self.GetControl(self.idbbelegirfechamovimiento).Enable(True)
		for k, id in self.controles_tipo_txt.iteritems():
			control = self.GetControl(id)
			control.SetValue("")
			if k in self.coloreable:
				control.SetBackgroundColour(wx.GREEN)
			else:
				control.SetBackgroundColour(wx.WHITE)
			control.Refresh()
		for k,id in self.controles_tipo_combo.iteritems():
			control = self.GetControl(id)
			control.Clear()
			control.SetBackgroundColour(wx.WHITE)
			control.Refresh()
		control = self.GetControl(self.idckestimacion)
		control.SetBackgroundColour(wx.WHITE)
		control.SetValue(False)
		control.Refresh()
		usuario, area = self.ObtenerUsuarioArea()
		usuarioarea = u"%s (%s)  -  %s" % (usuario.decode("iso8859-1"), self.usuario.decode("iso8859-1"), \
										   area.decode("iso8859-1"))
		self.GetControl(self.idtcidcheque).SetValue("Nuevo")
		self.GetControl(self.idtxusuarioarea).SetLabel(usuarioarea)
		self.estatus = "O"
		self.GetControl(self.idchbancoorigen).Clear()
		for v in self.controles_tipo_txt.itervalues():
			self.originales[v] = ""
		for v in self.controles_tipo_choice.itervalues():
			self.originales[v] = ""
		for v in self.controles_tipo_combo.itervalues():
			self.originales[v] = ""
		self.originales[self.idckestimacion] = ""
		self.empresaid, self.idconcepto, self.idbeneficiario, self.idbancoorigen, self.conceptodescripcion, self.pagoestimacion = -1,-1,-1,-1,"",0
		self.DeshabilitaCombos()
		self.ObtenerEmpresas()
		self.ObtenerConceptos()
		self.ObtenerBeneficiarios()
		self.CalculaFechaCaptura()
		self.GetControl(self.idlcpartidas).Enable(False)
		self.GetControl(self.idbtaplicarform).Enable(True)
		self.GetControl(self.idbtaceptarform).Enable(True)
		self.GetControl(self.idbbagregarpartida).Enable(False)
		self.GetControl(self.idbbguardarpartida).Enable(False)
		self.GetControl(self.idbbeliminarpartida).Enable(False)
		self.ActiveNoteBook(self.idnbform)
		control = self.GetControl(self.activecontrolafternewrecord)
		control.SetFocus()
		
	def CalculaFechaCaptura(self):
		sql = "select convert(varchar(10), getdate(), 103)"
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		self.GetControl(self.idtcfechacaptura).SetValue(str(row[0]))
		
	def OcultaSubpartidas(self, subpartidas):
		for partida in subpartidas:
			if partida == 0:
				self.centrocostoid = -1
				self.GetControl(self.idsbpartida).Show(False)
				self.partidaafectable = 0
			elif partida == 1:
				self.partida = -1
				self.GetControl(self.idsbpartida).Show(False)
				self.partidaafectable = 0
			elif partida == 2:
				self.subpartida1 = -1
				self.GetControl(self.idsbsubpartida1).Show(False)
				self.subpartida1afectable = 0
			elif partida == 3:
				self.subpartida2 = -1
				self.GetControl(self.idsbsubpartida2).Show(False)
				self.subpartida2afectable = 0
			elif partida == 4:
				self.subpartida3 = -1
				self.GetControl(self.idsbsubpartida3).Show(False)
				self.subpartida3afectable = 0
			elif partida == 5:
				self.subpartida4 = -1
				self.GetControl(self.idsbsubpartida4).Show(False)
				self.subpartida4afectable = 0
			elif partida == 6:
				self.subpartida5 = -1
				self.GetControl(self.idsbsubpartida5).Show(False)
				self.subpartida5afectable = 0
			
	def DeshabilitaCombos(self, iniciolimpia = 1, iniciodeshabilita = 1, indice = 0):
		for orden, idtx, idcb in self.controles_cb_deshabilitados:
			if orden >= iniciolimpia:
				self.GetControl(idcb).Clear()
			if orden >= iniciodeshabilita:
				self.GetControl(idtx).Enable(False)
				self.GetControl(idcb).Enable(False)
		if self.modoedicion:
			if indice == 0:
				self.OcultaSubpartidas(subpartidas = (0,1,2,3,4,5,6))
			elif indice == 1:
				self.OcultaSubpartidas(subpartidas = (1,2,3,4,5,6))
			elif indice == 2:
				self.OcultaSubpartidas(subpartidas = (2,3,4,5,6))
			elif indice == 3:
				self.OcultaSubpartidas(subpartidas = (3,4,5,6))
			elif indice == 4:
				self.OcultaSubpartidas(subpartidas = (4,5,6))
			elif indice == 5:
				self.OcultaSubpartidas(subpartidas = (5,6))
			elif indice == 6:
				self.subpartida5 = -1
				self.GetControl(self.idsbsubpartida5).Show(False)
				self.subpartida5afectable = 0
			
	def OnSalirDetalle(self, event):
		if self.currentitem is not None:
			self.LCtrl()
			self.idcheque = self.GetControl(self.idtcidcheque).GetValue()
			if self.idcheque.strip() != "Nuevo":
				sql = """
				update %s set cantidad = %s where idcheque = %s
				""" % (self.dbtable, float(self.totalcheque), self.idcheque)
				if self.QueryUpdateRecord(sql):
					self.FillListCtrl()
					lctrl = self.GetControl(self.idlc)
					lctrl.SetItemState(self.currentitem, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
				else:
					Mensajes().Info(self, u"Problemas al actualizar el total del cheque", u"Atenci�n")
		self.SalirDetalle()
			
	def SalirDetalle(self):
		if self.AceptarDetalle(salirdetalle = True):
			self.ActiveNoteBook(self.idnblistctrl)
			self.GetControl(self.idlc).SetFocus()
			
		#self.ActiveNoteBook(self.idnblistctrl)
		#self.GetControl(self.idlc).SetFocus()
		
	def DespliegaCombo(self, id, valor):
		combo = self.GetControl(id)
		for inx in range(0, combo.GetCount()):
			if valor == combo.GetClientData(inx):
				combo.SetSelection(inx)
				break
		
	def ObtenerPartida(self, row):
		partida = 0
		for inx in range(3,8):
			if int(row[inx]) < 0:
				partida = int(row[inx-1])
				break
			elif inx == 7:
				partida = int(row[inx])
		if partida > 0:
			sql = """
			select Descripcion, Afectable from gixpartidasegresos where PartidaID = %s
			""" % partida
			cu = r_cn.cursor()
			cu.execute(str(sql))
			fila = fetchone(cu)
			cu.close()
			if fila:
				if int(fila[1]):
					return self.GetString(fila[0])
				else:
					return str("Partida No Afectable")
			else:
				return str("Partida Inexistente")
		else:
			return str("Error")
		
	def OnAgregarPartida(self, event):
		self.nuevapartida = True
		for id in self.controles_cb_partidas:
			control = self.GetControl(id)
			control.Clear()
			control.SetBackgroundColour(wx.WHITE)
			control.Refresh()
			self.originales[id] = ""
		self.GetControl(self.idtccantidad).SetValue("")
		self.GetControl(self.idtccantidad).SetBackgroundColour(wx.WHITE)
		self.originales[self.idtccantidad] = ""
		self.modoedicion = True
		self.DeshabilitaCombos(2, 2, 0)
		self.modoedicion = False
		self.ObtenerCentrosCostos()
		self.GetControl(self.idbtaplicarform).Enable(False)
		self.GetControl(self.idbtaceptarform).Enable(False)
		self.GetControl(self.idbbagregarpartida).Enable(False)
		self.GetControl(self.idbbguardarpartida).Enable(True)
		self.GetControl(self.idcbcentrocosto).SetFocus()
		#self.GetControl(self.idchestatus).Enable(False)
	
	def OnGuardarPartida(self, event):
		if self.AceptarDetalle(validacantidad = False):
			if self.nuevapartida:
				self.AddPartida()
			else:
				self.UpdatePartida()
			self.modoedicion = True
			self.EditRecord()
			self.modoedicion = False
			self.GetControl(self.idbbagregarpartida).SetFocus()
			
	def UpdatePartida(self):
		if self.EliminarPartida(update = True):
			if self.AddPartida(update = True):
				if self.estatus == "P":
					Mensajes().Info(self, u"El egreso se encuentra en estatus de aplicado, por lo tanto,\n" \
									u"se han afectado los saldos de las partidas.", u"Atenci�n")
				contenido = u"Edici�n de la partida %s" % self.idpartida
				sql = """
				insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension)
				values ('%s', getdate(), '%s', '%s', '%s', '%s')
				""" % (self.BlogGUID, self.usuario, contenido, "", "")
				if not self.QueryUpdateRecord(sql):
					Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
	
	def AddPartida(self, update = False):
		partida = int(self.partida); subpartida1 = int(self.subpartida1); subpartida2 = int(self.subpartida2)
		subpartida3 = int(self.subpartida3); subpartida4 = int(self.subpartida4); subpartida5 = int(self.subpartida5)
		cantidad = self.GetControl(self.idtccantidad).GetValue().strip()
		if not update:
			sql = """
			insert into gixegresoschequespartidas
			(idcheque, centrocostoid, partida, subpartida1, subpartida2, subpartida3, subpartida4, subpartida5, cantidad)
			values (%s, %s, %s, %s, %s, %s, %s, %s, %s)
			""" % (int(self.idcheque), int(self.centrocostoid), self.partida, self.subpartida1, self.subpartida2,
				   self.subpartida3, self.subpartida4, self.subpartida5, float(cantidad))
			sqlmax = "select max(idchequepartida) from gixegresoschequespartidas"
			queTal, idchequepartida = self.QueryUpdateRecord(sql, sqlmax, True)
			if not queTal:
				return False
			elif not idchequepartida:
				Mensajes().Info(self, u"Problemas al buscar la nueva partida.\n\n%s" % sql, u"Atenci�n")
				return False
		else:
			sql = """
			update gixegresoschequespartidas set centrocostoid = %s, partida = %s, subpartida1 = %s, subpartida2 = %s,
			subpartida3 = %s, subpartida4 = %s, subpartida5 = %s, cantidad = %s
			where idchequepartida = %s
			""" % (int(self.centrocostoid), self.partida, self.subpartida1, self.subpartida2, self.subpartida3,
				   self.subpartida4, self.subpartida5, float(cantidad), self.idpartida)
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"Problemas al actualizar la partida.", u"Atenci�n")
				return False
		
		if self.estatus == "P":
			try:
				fecha_dia, fecha_mes, fecha_ano = self.fechaprogramada.split('/')
				fecha_ano, fecha_mes, fecha_dia = int(fecha_ano), int(fecha_mes), int(fecha_dia)
				fechaprogramada = "%04d/%02d/%02d" % (fecha_ano, fecha_mes, fecha_dia)
			except:
				Mensajes().Info(self, u"Problemas con la fecha al actualizar saldos.\n\n" \
								u"Egreso: %s, Fecha del Movimiento: %s\n\n" \
								u"� No fu� afectada la partida, tome nota y revise !" \
								% (self.idcheque, self.fechaprogramada), u"Atenci�n")
				return False
			if not update:
				Mensajes().Info(self, u"El egreso se encuentra en estatus de aplicado, por lo tanto,\n" \
								u"se afectar� el saldo de la partida agregada.", u"Atenci�n")
			for partidaid in (partida, subpartida1, subpartida2, subpartida3, subpartida4, subpartida5):
				if partidaid < 0:
					break
				elif not self.ActualizaSaldoPartida(self.idcheque, partidaid, fechaprogramada, cantidad):
						Mensajes().Info(self, u"� Se detectaron problemas al actualizar partidas !\n\n" \
										u"Egreso: %s, Partida: %s, Fecha del Movimiento: %s, Cantidad: %s\n\n" \
										u"� Tome nota y revise !" \
										% (idcheque, partidaid, fechaprogramada, cantidad), u"Atenci�n")
		if not update:
			contenido = u"Se agrega nueva partida %s" % idchequepartida
			sql = """
			insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension)
			values ('%s', getdate(), '%s', '%s', '%s', '%s')
			""" % (self.BlogGUID, self.usuario, contenido, "", "")
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
		
		return True
				
	def OnEliminarPartida(self, event):
		sql = "select count(*) from gixegresoschequespartidas where idcheque = %s" % self.idcheque
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)[0]
		cu.close()
		if int(row) > 1:
			if Mensajes().YesNo(self,u"� Desea realmente eliminar la partida %s ?" % self.idpartida, u"Confirmaci�n"):
				if self.EliminarPartida():
					self.FillListCtrlPartidas()
		elif int(row) == 1:
			Mensajes().Info(self, u"No es posible eliminar la partida, recuerde que el egreso\n" \
							u"debe al menos afectar a una partida.\n" \
							u"Si la partida no es la correcta, entonces modifiquela.", u"Atenci�n")
		else:
			Mensajes().Info(self, u"� No hay partida que afectar !", u"Atenci�n")
			
	def EliminarPartida(self, update = False):
		if self.estatus == "P":
			try:
				fecha_dia, fecha_mes, fecha_ano = self.fechaprogramada.split('/')
				fecha_ano, fecha_mes, fecha_dia = int(fecha_ano), int(fecha_mes), int(fecha_dia)
				fechaprogramada = "%04d/%02d/%02d" % (fecha_ano, fecha_mes, fecha_dia)
			except:
				Mensajes().Info(self, u"Problemas con la fecha al actualizar saldos.\n\n" \
								u"Egreso: %s, Fecha del Movimiento: %s\n\n" \
								u"� No fu� afectada la partida, tome nota y revise !" \
								% (self.idcheque, self.fechaprogramada), u"Atenci�n")
				return False
			sql = """
			select partida, subpartida1, subpartida2, subpartida3, subpartida4, subpartida5, cantidad
			from gixegresoschequespartidas where idchequepartida = %s
			""" % self.idpartida
			cu = r_cn.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			cu.close()
			partida = int(row[0]); subpartida1 = int(row[1]); subpartida2 = int(row[2])
			subpartida3 = int(row[3]); subpartida4 = int(row[4]); subpartida5 = int(row[5])
			cantidad = float(row[6]) * float(-1)
			if not update:
				Mensajes().Info(self, u"El egreso se encuentra en estatus de aplicado, por lo tanto,\n" \
								u"se afectar� el saldo de la partida eliminada.", u"Atenci�n")
			for partidaid in (partida, subpartida1, subpartida2, subpartida3, subpartida4, subpartida5):
				if partidaid < 0:
					break
				elif not self.ActualizaSaldoPartida(self.idcheque, partidaid, fechaprogramada, cantidad):
						Mensajes().Info(self, u"� Se detectaron problemas al actualizar partidas !\n\n" \
										u"Egreso: %s, Partida: %s, Fecha del Movimiento: %s, Cantidad: %s\n\n" \
										u"� Tome nota y revise !" \
										% (self.idcheque, partidaid, fechaprogramada, cantidad), u"Atenci�n")
		if not update:
			try:
				sql = "delete from gixegresoschequespartidas where idchequepartida = %s" % self.idpartida
				cu = r_cn.cursor()
				cu.execute(str(sql))
				cu.close()
				r_cn.commit()
			except:
				r_cn.rollback()
				Mensajes().Info(self, u"Sucedi� algo que impidi� eliminar la partida %s\n\n%s" \
								% (self.idpartida, sql), u"Atenci�n")
				return False
			
			contenido = u"Eliminaci�n de la partida %s" % self.idpartida
			sql = """
			insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText,
			ContenidoBinario, Extension) values ('%s', getdate(), '%s', '%s', '%s', '%s')
			""" % (self.BlogGUID, self.usuario, contenido, "", "")
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
		
		return True
	
	def OnLCtrlPartidas(self, event):
		self.nuevapartida = False
		if not self.modoedicion:
			self.DeshabilitaCombos()
		lctrl = self.GetControl(self.idlcpartidas)
		self.currentitempartidas = event.m_itemIndex
		datointerno = lctrl.GetItem(self.currentitempartidas, 0).GetText()
		self.idpartida = int(datointerno)
		sql = """
		select centrocostoid, partida, subpartida1, subpartida2, subpartida3, subpartida4, subpartida5, cantidad
		from gixegresoschequespartidas where idchequepartida = %s
		""" % self.idpartida
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row:
			self.centrocostoid = int(row[0]); self.partida = int(row[1]); self.subpartida1 = int(row[2])
			self.subpartida2 = int(row[3]); self.subpartida3 = int(row[4])
			self.subpartida4 = int(row[5]); self.subpartida5 = int(row[6])
			self.cantidad = float(row[7])
			if not self.modoedicion:
				self.EditRecord()
				self.RevisaCambios()
		else:
			Mensajes().Info(self, u"No se encontro la partida elegida\n\n%s" % sql, u"Atenci�n")
		event.Skip()

	def FillListCtrlPartidas(self, display = 'first'):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(self.idlcpartidas)
		lctrl.Enable(False)
		lctrl.Show(False)
		lctrl.ClearAll()
		sql = """
		select idchequepartida, cantidad, centrocostoid, partida,
		subpartida1, subpartida2, subpartida3, subpartida4, subpartida5
		from gixegresoschequespartidas where idcheque = %s order by idchequepartida desc
		""" % self.idcheque
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		fila, self.totalcheque = 0, 0
		if rows:
			lctrl.InsertColumn(0, "Id", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, "Cantidad", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(2, "Partida / Subpartida")
			for row in rows:
				if fila %2 != 0: bgcolor = [204,204,255]
				else:            bgcolor = [230,230,255]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, str(amount_and_cents_with_commas(row[1])))
				lctrl.SetStringItem(index, 2, str(self.ObtenerPartida(row)))
				lctrl.SetItemData(index, row[0])
				fila += 1
				self.totalcheque += float(row[1])
			lctrl.SetColumnWidth(0, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(2, wx.LIST_AUTOSIZE)
		else:
			lctrl.InsertColumn(0, "Sin Partidas", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 100)
		control = self.GetControl(self.idtctotalcheque)
		control.SetBackgroundColour(wx.Colour(153,255,153))
		amount = amount_and_cents_with_commas(self.totalcheque)
		control.SetValue(str(amount).rjust(20))
		self.GetControl(self.idtxtotalcheque).SetLabel(str(c2p(self.totalcheque).texto()))
		lctrl.SetItemState(0, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
		lctrl.Show(True)
		lctrl.Enable(True)
		wx.EndBusyCursor()
		
	def OnCancelarRecord(self, event):
		if self.estatus != "N":
			self.modoedicion = True
			self.EditRecord()
			self.modoedicion = False
			if self.estatus == "P":
				if Mensajes().YesNo(self, u"El egreso elegido a ser cancelado ya fu� aplicado, por lo tanto, " \
									u"recuerde\nque al llevar a cabo la cancelaci�n, se afectar�n " \
									u"las partidas y/o\nsubpartidas que se incluyen en el egreso.\n\n" \
									u"Tambi�n ser� eliminado el movimiento de cargo, el cual, " \
									u"afecta directamente\na la cuenta del banco (emisora del egreso), " \
									u"asi como al saldo de la misma.\n\n" \
									u"� Desea realmente llevar a cabo la cancelaci�n del egreso no. %s ?" \
									% self.idcheque, u"Confirmaci�n"):
					wx.BeginBusyCursor()
					querycancelar = ", estatus = 'N', idfondeo = 0, cantidadcheque = 0"
					bienGrabado = self.UpdateRecord(querycancelar)
					wx.EndBusyCursor()
					if not bienGrabado:
						Mensajes().Info(self, u"� No fu� posible cancelar el egreso !", u"Atenci�n")
					self.PreparaSalida()
			else:
				if Mensajes().YesNo(self, u"� Desea realmente llevar a cabo la cancelaci�n del egreso no. %s ?" \
									% self.idcheque, u"Confirmaci�n"):
					wx.BeginBusyCursor()
					querycancelar = ", estatus = 'N'"
					bienGrabado = self.UpdateRecord(querycancelar)
					wx.EndBusyCursor()
					if not bienGrabado:
						Mensajes().Info(self, u"� No fu� posible cancelar el egreso !", u"Atenci�n")
					self.PreparaSalida()
						
			self.SalirDetalle()
			
	def PreparaSalida(self):
		if self.currentitem is not None:
			self.LCtrl()
			self.idcheque = self.GetControl(self.idtcidcheque).GetValue()
			sql = """
			update %s set cantidad = %s where idcheque = %s
			""" % (self.dbtable, float(self.totalcheque), self.idcheque)
			if self.QueryUpdateRecord(sql):
				self.FillListCtrl()
				lctrl = self.GetControl(self.idlc)
				lctrl.SetItemState(self.currentitem, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
			else:
				Mensajes().Info(self, u"Problemas al actualizar el total del cheque", u"Atenci�n")

	def OnEditRecord(self, event):
		self.GetControl(self.idtcbeneficiario).SetValue("")
		self.GetControl(self.idtcconcepto).SetValue("")
		self.modoedicion = True
		self.EditRecord()
		self.modoedicion = False
		
	def EditRecord(self):
		if self.modoedicion:
			for id, tipo in self.controles_de_captura:
				self.GetControl(id).Enable(True)
			self.GetRecord(record = self.datointerno)
			
		self.DeshabilitaCombos()
		if self.modoedicion:
			self.FillListCtrlPartidas()
			self.agregar = False
			self.FillingARecord = True
			for k, id in self.controles_tipo_txt.iteritems():
				control = self.GetControl(id); control.SetValue("")
				if k in self.coloreable:
					control.SetBackgroundColour(wx.GREEN)
				else:
					control.SetBackgroundColour(wx.WHITE)
				control.Refresh()
			for k, id in self.controles_tipo_combo.iteritems():
				control = self.GetControl(id)
				control.Clear()
				control.SetBackgroundColour(wx.WHITE)
				control.Refresh()
			for id in self.controles_tipo_choice.itervalues():
				self.GetControl(id).SetBackgroundColour(wx.WHITE)
				self.GetControl(id).Refresh()
			control = self.GetControl(self.idckestimacion)
			control.SetBackgroundColour(wx.WHITE)
			control.SetValue(False)
			control.Refresh()
			
		self.GetControl(self.idsbpartida).Show(False); self.GetControl(self.idsbsubpartida1).Show(False)
		self.GetControl(self.idsbsubpartida2).Show(False); self.GetControl(self.idsbsubpartida3).Show(False)
		self.GetControl(self.idsbsubpartida4).Show(False); self.GetControl(self.idsbsubpartida5).Show(False)
		self.partidaafectable, self.subpartida1afectable, self.subpartida2afectable = 0,0,0
		self.subpartida3afectable, self.subpartida4afectable, self.subpartida5afectable = 0,0,0
		if self.modoedicion:
			usuario, area = self.ObtenerUsuarioArea()
			usuarioarea = u"%s (%s)  -  %s" % (usuario.decode("iso8859-1"), self.usuariosolicitante.decode("iso8859-1"), \
											   area.decode("iso8859-1"))
			self.GetControl(self.idtxusuarioarea).SetLabel(usuarioarea)
			self.GetControl(self.idtcfechacaptura).SetValue(self.fechacaptura)
			self.GetControl(self.idtcidcheque).SetValue(str(self.idcheque))
			#if self.tipoprogramacion == "N":
				#self.GetControl(self.idchprogramacion).SetSelection(0)
				#self.GetControl(self.idtcfechamovimiento).SetEditable(False)
				#self.GetControl(self.idtcfechamovimiento).SetBackgroundColour(wx.GREEN)
				#self.GetControl(self.idbbelegirfechamovimiento).Enable(False)
			#else:
				#self.GetControl(self.idchprogramacion).SetSelection(1)
				#self.GetControl(self.idtcfechamovimiento).SetEditable(True)
				#self.GetControl(self.idtcfechamovimiento).SetBackgroundColour(wx.WHITE)
				#self.GetControl(self.idbbelegirfechamovimiento).Enable(True)
			self.GetControl(self.idtcfechamovimiento).SetValue(self.fechaprogramada)
			#estatusactual = self.estatus
			#self.GetNextUserStatus(False, estatusactual)
			#self.GetControl(self.idchestatus).SetSelection(0)
			self.ObtenerEmpresas(); self.DespliegaCombo(self.idcbempresa, self.empresaid)
		
		self.ObtenerCentrosCostos(); self.DespliegaCombo(self.idcbcentrocosto, self.centrocostoid)
		self.ObtenerPartidas(); self.DespliegaCombo(self.idcbpartida, self.partida)
		self.partidaafectable = self.ObtenerPartidaAfectable(self.partida)
		if self.partidaafectable:
			self.GetControl(self.idsbpartida).Show(True)
			self.partidaafectable = 1
		elif self.subpartida1 > 0:
			self.ObtenerSubpartidas(self.partida, 1)
			self.DespliegaCombo(self.idcbsubpartida1, self.subpartida1)
			self.partidaafectable = self.ObtenerPartidaAfectable(self.subpartida1)
			if self.partidaafectable:
				self.GetControl(self.idsbsubpartida1).Show(True)
				self.subpartida1afectable = 1
			elif self.subpartida2 > 0:
				self.ObtenerSubpartidas(self.subpartida1, 2)
				self.DespliegaCombo(self.idcbsubpartida2, self.subpartida2)
				self.partidaafectable = self.ObtenerPartidaAfectable(self.subpartida2)
				if self.partidaafectable:
					self.GetControl(self.idsbsubpartida2).Show(True)
					self.subpartida2afectable = 1
				elif self.subpartida3 > 0:
					self.ObtenerSubpartidas(self.subpartida2, 3)
					self.DespliegaCombo(self.idcbsubpartida3, self.subpartida3)
					self.partidaafectable = self.ObtenerPartidaAfectable(self.subpartida3)
					if self.partidaafectable:
						self.GetControl(self.idsbsubpartida3).Show(True)
						self.subpartida3afectable = 1
					elif self.subpartida4 > 0:
						self.ObtenerSubpartidas(self.subpartida3, 4)
						self.DespliegaCombo(self.idcbsubpartida4, self.subpartida4)
						self.partidaafectable = self.ObtenerPartidaAfectable(self.subpartida4)
						if self.partidaafectable:
							self.GetControl(self.idsbsubpartida4).Show(True)
							self.subpartida4afectable = 1
						elif self.subpartida5 > 0:
							self.ObtenerSubpartidas(self.subpartida4, 5)
							self.DespliegaCombo(self.idcbsubpartida5, self.subpartida5)
							self.partidaafectable = self.ObtenerPartidaAfectable(self.subpartida5)
							if self.partidaafectable:
								self.GetControl(self.idsbsubpartida5).Show(True)
								self.subpartida5afectable = 1
								
		self.GetControl(self.idtccantidad).SetValue(str(float(self.cantidad)))
		if self.modoedicion:
			self.ObtenerConceptos(); self.DespliegaCombo(self.idcbconcepto, self.idconcepto)
			self.ObtenerBeneficiarios(); self.DespliegaCombo(self.idcbbeneficiario, self.idbeneficiario)
			#self.GetControl(self.idtcconcepto).SetValue(self.concepto)
			#if self.anexo == "F": anexo = 0
			#elif self.anexo == "C": anexo = 1
			#elif self.anexo == "P": anexo = 2
			#else: anexo = 3
			#self.GetControl(self.idchanexo).SetSelection(int(anexo))
			#self.GetControl(self.idtcanexoadicional).SetValue(self.anexoadicional)
			self.GetControl(self.idtcobservaciones).SetValue(self.observaciones)
			#estatus = self.GetControl(self.idchestatus).GetStringSelection()
			#if self.especificaciones == "N": especificacion = 0
			#elif self.especificaciones == "E": especificacion = 1
			#elif self.especificaciones == "A": especificacion = 2
			#elif self.especificaciones == "D": especificacion = 3
			#elif self.especificaciones == "S": especificacion = 4
			#elif self.especificaciones == "T": especificacion = 5
			#self.GetControl(self.idchespecificaciones).SetSelection(especificacion)
			#if especificacion in (0, 1, 2, 4, 5):
				#self.GetControl(self.idtcbancodestino).SetValue(self.bancodestino)
				#self.GetControl(self.idtcsucursaldestino).SetValue(self.sucursaldestino)
				#self.GetControl(self.idtcplazadestino).SetValue(self.plazadestino)
				#self.GetControl(self.idtcclavebancariadestino).SetValue(self.clavebancariadestino)
				#self.HabilitaTextControl()
				#self.GetControl(self.idbbespecificaciones).Enable(True)
				#self.estoyenobtenerbancobeneficiario = False
			#else:
				#self.DeshabilitaTextControl()
				#self.GetControl(self.idbbespecificaciones).Enable(False)
			pagoestimacion = False
			if self.pagoestimacion == 1:
				pagoestimacion = True
			self.GetControl(self.idckestimacion).SetValue(pagoestimacion)
			self.ObtenerBancosCuentas()
			self.DespliegaCombo(self.idchbancoorigen, self.idbancoorigen)
			#self.GetControl(self.idtcnumerochequeorigen).SetValue(self.numerochequeorigen)
			self.agregar = False
			self.LCtrl()
			self.ActiveNoteBook(self.idnbform)
			#self.GetControl(self.idcbbeneficiario).SetFocus()
			self.GetControl(self.idchbancoorigen).SetFocus()
			for v in self.controles_tipo_txt.itervalues():
				self.originales[v] = self.GetControl(v).GetValue()
			for v in self.controles_tipo_choice.itervalues():
				self.originales[v] = self.GetControl(v).GetStringSelection()
			self.originales[self.idckestimacion] = self.pagoestimacion
				
		if not self.modoedicion:
			control = self.GetControl(self.idtccantidad)
			self.originales[self.idtccantidad] = control.GetValue()
			control.SetBackgroundColour(wx.WHITE)
			control.Refresh()
			for trash1, trash2, idcb in self.controles_cb_deshabilitados:
				control = self.GetControl(idcb)
				self.originales[idcb] = control.GetStringSelection()
				control.SetBackgroundColour(wx.WHITE)
				control.Refresh()
		else:
			for v in self.controles_tipo_combo.itervalues():
				self.originales[v] = self.GetControl(v).GetStringSelection()
			self.FillingARecord = False
			if not self.editable:
				for id, tipo in self.controles_de_captura:
					self.GetControl(id).Enable(False)
					#self.GetControl(self.idbbespecificaciones).Enable(False)
			else:
				if self.estatus in ("P", "N"):
					#self.GetControl(self.idbbespecificaciones).Enable(False)
					for id, tipo in self.controles_de_captura:
						deshabilita = True
						if self.estatus != "N":
							if id == self.idtccantidad:
								deshabilita = False
							else:
								for i, tx, idcb in self.controles_cb_deshabilitados:
									if id == idcb:
										deshabilita = False
										break
						if deshabilita:
							self.GetControl(id).Enable(False)
					#if self.estatus != "B":
						#self.GetControl(self.idchestatus).Enable(True)
			if self.estatus == "N":
				self.GetControl(self.idtxestatus).SetLabel("Estatus: CANCELADO")
				self.GetControl(self.idbbelegirfechamovimiento).Enable(False)
				self.GetControl(self.idlcpartidas).Enable(False)
				self.GetControl(self.idbbagregarpartida).Enable(False)
				self.GetControl(self.idbbguardarpartida).Enable(False)
				self.GetControl(self.idbbeliminarpartida).Enable(False)
			else:
				if self.estatus == "P":
					self.GetControl(self.idtxestatus).SetLabel("Estatus: APLICADO")
					self.GetControl(self.idbbelegirfechamovimiento).Enable(False)
				else:
					self.GetControl(self.idtxestatus).SetLabel("Estatus: NO APLICADO")
					self.GetControl(self.idbbelegirfechamovimiento).Enable(True)
				self.GetControl(self.idlcpartidas).Enable(True)
				self.GetControl(self.idbbagregarpartida).Enable(True)
				self.GetControl(self.idbbguardarpartida).Enable(False)
				self.GetControl(self.idbbeliminarpartida).Enable(True)
			self.GetControl(self.idbtaplicarform).Enable(False)
			self.GetControl(self.idbtaceptarform).Enable(False)
			self.GetControl(self.idcbempresa).Enable(False)
			
	def ObtenerUsuarioArea(self):
		if self.agregar:
			usuario = self.usuario
		else:
			usuario = self.usuariosolicitante
		sql = """
		select rtrim(ltrim(u.Nombre)), p.descripcion
		from Usuarios u join gixempleados e on u.Usuario = e.usuario
		join gixpuestos p on e.idempleado = p.idempleado
		where u.Usuario = '%s'
		""" % usuario
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row:
			return self.GetString(row[0]), self.GetString(row[1])
		return "", ""
		
	def ObtenerEmpresas(self):
		control = self.GetControl(self.idcbempresa)
		control.Clear()
		sql = """
		select EmpresaID, Razonsocial from cont_Empresas where activarecfin = 'S' order by RazonSocial
		"""
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(self.GetString(row[1]), int(row[0]))
		
	def ObtenerCentrosCostos(self):
		self.GetControl(self.idtxcentrocosto).Enable(True)
		control = self.GetControl(self.idcbcentrocosto)
		control.Enable(True)
		control.Clear()
		sql = """
		select CentroCostoID, Descripcion from gixcentroscostos where EmpresaID = %s order by Descripcion
		""" % self.empresaid
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(self.GetString(row[1]), int(row[0]))
		
	def ObtenerPartidas(self):
		self.GetControl(self.idtxpartida).Enable(True)
		control = self.GetControl(self.idcbpartida)
		control.Enable(True)
		control.Clear()
		sql = """
		select PartidaID, Descripcion from gixpartidasegresos
		where EmpresaID = %s and CentroCostoID = %s and HijaDePartidaID is null and naturaleza = 'E'
		order by Descripcion
		""" % (self.empresaid, self.centrocostoid)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(self.GetString(row[1]), int(row[0]))
		
	def ObtenerSubpartidas(self, subpartida, numerosubpartida):
		filtrofinal = ""
		if numerosubpartida == 1:
			idtx = self.idtxsubpartida1
			idcb = self.idcbsubpartida1
		elif numerosubpartida == 2:
			idtx = self.idtxsubpartida2
			idcb = self.idcbsubpartida2
		elif numerosubpartida == 3:
			idtx = self.idtxsubpartida3
			idcb = self.idcbsubpartida3
		elif numerosubpartida == 4:
			idtx = self.idtxsubpartida4
			idcb = self.idcbsubpartida4
		elif numerosubpartida == 5:
			idtx = self.idtxsubpartida5
			idcb = self.idcbsubpartida5
			filtrofinal = "and Afectable =  1"
		self.GetControl(idtx).Enable(True)
		control = self.GetControl(idcb)
		control.Enable(True)
		control.Clear()
		sql = """
		select PartidaID, Descripcion from gixpartidasegresos
		where EmpresaID = %s and CentroCostoID = %s and HijaDePartidaID = %s and naturaleza = 'E' %s
		order by Descripcion
		""" % (self.empresaid, self.centrocostoid, subpartida, filtrofinal)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(self.GetString(row[1]), int(row[0]))
		
	def ObtenerEstatusFiltro(self):
		control = self.GetControl(self.idchestatusfiltro)
		control.Clear()
		if self.ChecaUsuario():
			control.Append(u"<Todo>", 0)
			control.Append(u"No Aplicado", 1)
			control.Append(u"Aplicado", 2)
			control.Append(u"Cancelado", 3)
			self.GetControl(self.idchestatusfiltro).SetSelection(1)
		else:
			control.Append(u"No Aplicado", 0)
			self.GetControl(self.idchestatusfiltro).SetSelection(0)
				
	def ObtenerBancosCuentas(self):
		control = self.GetControl(self.idchbancoorigen)
		control.Clear()
		sql = """
		select idbanco, nombre from gixbancos where empresaid = %s order by nombre
		""" % self.empresaid
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(self.GetString(row[1]), int(row[0]))
				
	def ObtenerConceptos(self):
		control = self.GetControl(self.idcbconcepto)
		control.Enable(False)
		control.Show(False)
		control.Clear()
		sql = """
		select idreferenciaotros, descripcion from gixegresosotros order by descripcion
		"""
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(self.GetString(row[1]), int(row[0]))
				
		control.Show(True)
		control.Enable(True)
				
	def ObtenerBeneficiarios(self):
		control = self.GetControl(self.idcbbeneficiario)
		control.Enable(False)
		control.Show(False)
		control.Clear()
		sql = """
		select idbeneficiario, nombre from gixbeneficiarios order by nombre
		"""
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(self.GetString(row[1]), int(row[0]))
				
		control.Show(True)
		control.Enable(True)
				
	def OnPrintExcel(self, event):
		tabla = self.dbtable
		meta = ((14, "Id Egreso") , (70, u"Captura"), (70,u"Movimiento"), (70,u"Cantidad"),
				(100,"Concepto"), (100,u"Empresa"), (20,"Estatus"), (100,"Registro"))
		query = self.FillListCtrl(printexcel = True)
		titulo = u"Otros Egresos" 
		self.DisplayGrid(tabla, meta, query, titulo)
		
	def FillListCtrl(self, display = 'first', printexcel = False):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(self.idlc)
		lctrl.Enable(False)
		lctrl.Show(False)
		if not printexcel: lctrl.ClearAll()
		countfiltros = 0
		self.fechacapturafiltro = ""
		fechacapturainicial = self.GetControl(self.idtcfechacapturafiltro).GetValue()
		if fechacapturainicial:
			try:
				fecha_dia, fecha_mes, fecha_ano = self.GetControl(self.idtcfechacapturafiltro).GetValue().split('/')
				fechacapturainicial = "'%s/%02d/%02d'" % (fecha_ano, int(fecha_mes), int(fecha_dia))
				fecharango = self.GetControl(self.idtcfechacapturarango).GetValue()
				if fecharango:
					rango_dia, rango_mes, rango_ano = self.GetControl(self.idtcfechacapturarango).GetValue().split('/')
					fechacapturafinal = "'%s/%02d/%02d'" % (rango_ano, int(rango_mes), int(rango_dia))
					if fechacapturainicial > fechacapturafinal:
						control = self.GetControl(self.idtctotalvista)
						control.SetBackgroundColour(wx.Colour(153,255,153))
						control.SetForegroundColour(wx.NamedColour("BLACK"))
						control.SetValue("0.00")
						Mensajes().Info(self, u"� La fecha inicial no debe ser mayor a la fecha final !", \
										u"Atenci�n: Revise el rango de la fecha de captura")
						return
					else:
						self.fechacapturafiltro = "(ch.fechacaptura >= %s and ch.fechacaptura <= %s)" \
										   % (fechacapturainicial, fechacapturafinal)
						countfiltros += 1
				else:
					self.fechacapturafiltro = "ch.fechacaptura = %s" % fechacapturainicial
					countfiltros += 1
			except:
				self.fechacapturafiltro = ""
		self.fechaprogramadafiltro = ""
		fechaprogramadainicial = self.GetControl(self.idtcfechamovimientofiltro).GetValue()
		if fechaprogramadainicial:
			try:
				fecha_dia, fecha_mes, fecha_ano = self.GetControl(self.idtcfechamovimientofiltro).GetValue().split('/')
				fechaprogramadainicial = "'%s/%02d/%02d'" % (fecha_ano, int(fecha_mes), int(fecha_dia))
				fecharango = self.GetControl(self.idtcfechamovimientorango).GetValue()
				if fecharango:
					rango_dia, rango_mes, rango_ano = self.GetControl(self.idtcfechamovimientorango).GetValue().split('/')
					fechaprogramadafinal = "'%s/%02d/%02d'" % (rango_ano, int(rango_mes), int(rango_dia))
					if fechaprogramadainicial > fechaprogramadafinal:
						control = self.GetControl(self.idtctotalvista)
						control.SetBackgroundColour(wx.Colour(153,255,153))
						control.SetForegroundColour(wx.NamedColour("BLACK"))
						control.SetValue("0.00")
						Mensajes().Info(self, u"� La fecha inicial no debe ser mayor a la fecha final !", \
										u"Atenci�n: Revise el rango de la fecha programada")
						return
					else:
						if countfiltros > 0: y = "and"
						else: y = ""
						self.fechaprogramadafiltro = "%s (ch.fechaprogramada >= %s and ch.fechaprogramada <= %s)" \
										   % (y, fechaprogramadainicial, fechaprogramadafinal)
						countfiltros += 1
				else:
					if countfiltros > 0: y = "and"
					else: y = ""
					self.fechaprogramadafiltro = "%s ch.fechaprogramada = %s" % (y, fechaprogramadainicial)
					countfiltros += 1
			except:
				self.fechaprogramadafiltro = ""
				
		self.empresafiltro = ""
		ctrl = self.GetControl(self.idchempresafiltro); index = ctrl.GetSelection()
		if index > -1:
			self.idempresafiltro = ctrl.GetClientData(index)
			if self.idempresafiltro > 0:
				if countfiltros > 0: y = "and"
				else: y = ""
				self.empresafiltro = "%s ch.empresaid = %s" % (y, self.idempresafiltro)
				countfiltros += 1
		
		self.conceptofiltro = ""
		ctrl = self.GetControl(self.idchconceptofiltro); index = ctrl.GetSelection()
		if index > -1:
			self.idconceptofiltro = ctrl.GetClientData(index)
			if self.idconceptofiltro > 0:
				if countfiltros > 0: y = "and"
				else: y = ""
				self.conceptofiltro = "%s ch.idreferenciaotros = %s" % (y, self.idconceptofiltro)
				countfiltros += 1
			
		self.beneficiariofiltro = ""
		ctrl = self.GetControl(self.idchbeneficiariofiltro); index = ctrl.GetSelection()
		if index > -1:
			self.idbeneficiariofiltro = ctrl.GetClientData(index)
			if self.idbeneficiariofiltro > 0:
				if countfiltros > 0: y = "and"
				else: y = ""
				self.beneficiariofiltro = "%s ch.idbeneficiario = %s" % (y, self.idbeneficiariofiltro)
				countfiltros += 1
			
		estatus = self.GetControl(self.idchestatusfiltro).GetStringSelection()
		if estatus == u"<Todo>":
			filtro = "ch.estatus in ('O','P')"
		else:
			if estatus == "No Aplicado": filtro = "ch.estatus = 'O'"
			elif estatus == "Aplicado": filtro = "ch.estatus = 'P'"
			else: filtro = "ch.estatus = 'N'"
		countfiltros += 1
		
		if countfiltros > 1:
			self.estatusfiltro = "and %s" % filtro
		else:
			self.estatusfiltro = filtro
			
		self.usuariofiltro = ""
		if not self.ChecaUsuario():
			self.usuariofiltro = "and ch.usuariosolicitante = '%s'" % self.usuario
		
		if countfiltros > 0: self.donde = "where"
		else: self.donde = ""
		sql = """
		select ch.idcheque, convert(varchar(10), ch.fechacaptura, 103), convert(varchar(10), ch.fechaprogramada, 103),
		ch.cantidad, ot.descripcion, be.nombre, em.RazonSocial, ch.estatus, ch.usuariosolicitante
		from %s ch join cont_Empresas em on ch.empresaid = em.EmpresaID
		join gixegresosotros ot on ch.idreferenciaotros = ot.idreferenciaotros
		join gixbeneficiarios be on ch.idbeneficiario = be.idbeneficiario
		%s %s %s %s %s %s %s %s order by %s
		""" % (self.dbtable, self.donde, self.fechacapturafiltro, self.fechaprogramadafiltro, self.empresafiltro, \
			   self.conceptofiltro, self.beneficiariofiltro, self.estatusfiltro, self.usuariofiltro, self.lstctrlsort)
		if printexcel: return sql
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		fila = 0
		totalvista = 0
		if rows:
			lctrl.InsertColumn(0, u"%sId" % self.lstctrlorder[0][2], wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"%sCaptura" % self.lstctrlorder[1][2], wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(2, u"%sMovimiento" % self.lstctrlorder[2][2], wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(3, u"%sCantidad" % self.lstctrlorder[3][2], wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(4, u"%sConcepto" % self.lstctrlorder[4][2])
			lctrl.InsertColumn(5, u"%sBeneficiario" % self.lstctrlorder[5][2])
			lctrl.InsertColumn(6, u"%sEmpresa" % self.lstctrlorder[6][2])
			lctrl.InsertColumn(7, u"%sEstatus" % self.lstctrlorder[7][2])
			lctrl.InsertColumn(8, u"%sRegistro" % self.lstctrlorder[8][2])
			for row in rows:
				if str(row[7]) == "N":
					if fila %2 != 0: bgcolor = [255,153,153]
					else:            bgcolor = [255,215,215]
				else:
					if fila %2 != 0: bgcolor = [204,204,255]
					else:            bgcolor = [230,230,255]
				estatus = str(row[7])
				if estatus == "O": estatus = "NO APLICADO"
				elif estatus == "P": estatus = "APLICADO"
				else: estatus = "CANCELADO"
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, str(row[1]))
				lctrl.SetStringItem(index, 2, str(row[2]))
				lctrl.SetStringItem(index, 3, str(amount_and_cents_with_commas(row[3])))
				lctrl.SetStringItem(index, 4, self.GetString(row[4]))
				lctrl.SetStringItem(index, 5, self.GetString(row[5]))
				lctrl.SetStringItem(index, 6, self.GetString(row[6]))
				lctrl.SetStringItem(index, 7, estatus)
				lctrl.SetStringItem(index, 8, self.GetString(row[8]))
				lctrl.SetItemData(index, row[0])
				if int(row[0]) == self.idcheque:
					self.ctrlindex = index
				fila += 1
				totalvista += float(row[3])
			lctrl.SetColumnWidth(0, 55)
			lctrl.SetColumnWidth(1, 75)
			lctrl.SetColumnWidth(2, 80)
			lctrl.SetColumnWidth(3, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(4, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(5, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(6, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(7, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(8, 80)
		else:
			lctrl.InsertColumn(0, "       No Existen Registros", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 167)
			
		cu.close()
		control = self.GetControl(self.idtctotalvista)
		control.SetBackgroundColour(wx.Colour(153,255,153))
		amount = amount_and_cents_with_commas(totalvista)
		control.SetValue(str(amount).rjust(20))
		self.GetControl(self.idbtfondearlistctrl).Enable(False)
		self.GetControl(self.idbteditarlistctrl).Enable(False)
		self.GetControl(self.idbtcancelarlistctrl).Enable(False)
		self.currentitemlst = []
		self.selecteditems = []
		lctrl.Show(True)
		lctrl.Enable(True)
		wx.EndBusyCursor()
		if self.currentitem is not None:
			if self.currentitem <= lctrl.GetItemCount():
				lctrl.EnsureVisible(self.currentitem)
		salir = True
		return salir, fila

	def OnItemDeselected(self, event):
		if self.selecteditems:
			lctrl = self.GetControl(self.idlc)
			self.currentitem = event.m_itemIndex
			datointerno = lctrl.GetItem(self.currentitem, 0).GetText()
			datointerno = int(datointerno)
			self.currentitemlst.remove(self.currentitem)
			self.selecteditems.remove(datointerno)
			self.GetControl(self.idbtfondearlistctrl).Enable(False)
			
		event.Skip()
		
	def OnLCtrl(self, event):
		self.FillingARecord = True
		lctrl = self.GetControl(self.idlc)
		self.currentitem = event.m_itemIndex
		datointerno = lctrl.GetItem(self.currentitem, 0).GetText()
		self.datointerno = int(datointerno)
		self.currentitemlst.append(self.currentitem)
		self.selecteditems.append(self.datointerno)
		self.LCtrl()
		self.FillingARecord = False
		estatus = self.GetControl(self.idchestatusfiltro).GetStringSelection()
		if estatus in ("<Todo>", "Aplicado", "Cancelado"):
			self.GetControl(self.idbtfondearlistctrl).Enable(False)
		else:
			if self.ChecaUsuario():
				self.GetControl(self.idbtfondearlistctrl).Enable(True)
		event.Skip()

	def LCtrl(self):
		cambio = False
		if not self.agregar and not self.FillingARecord:
			for id in self.controles_tipo_txt.itervalues():
				if id != self.idtccantidad:
					if self.GetControl(id).GetValue() <> self.originales[id]:
						cambio = True
			if not cambio:
				for id in self.controles_tipo_choice.itervalues():
					if self.GetControl(id).GetStringSelection() <> self.originales[id]:
						cambio = True
				if not cambio:
					for id in self.controles_tipo_combo.itervalues():
						if id not in self.controles_cb_partidas:
							if self.GetControl(id).GetStringSelection() <> self.originales[id]:
								cambio = True
					if not cambio:
						pagoestimacion = 0
						if self.GetControl(self.idckestimacion).IsChecked():
							pagoestimacion = 1
						if pagoestimacion != self.originales[self.idckestimacion]:
							cambio = True
		if cambio:
			self.NewFlag = False
			self.Text(True)
			if not self.NewFlag:
				if Mensajes().YesNo(self,u"Algunos datos han cambiado\n\n� Desea ud. grabarlos ?", \
						    u"Confirmaci�n"):
					self.AceptarDetalle()
					
		if self.datointernoynombre:
			#if self.GetRecord(record = self.datointerno, nombre):
			if self.GetRecord(record = self.datointerno):
				self.GetControl(self.idbteditarlistctrl).Enable(True)
				self.GetControl(self.idbtcancelarlistctrl).Enable(True)
				self.editable = True
			else:
				pass
		elif self.GetRecord(record = self.datointerno):
			self.GetControl(self.idbteditarlistctrl).Enable(True)
			self.GetControl(self.idbtcancelarlistctrl).Enable(True)
			self.editable = True
		else:
			Mensajes().Warn(self, u"Escoja un registro v�lido", u"Atenci�n")
		
	#def GetLFRecord(self, what):
		#lctrl = self.GetControl(self.idlc)
		#sql = """
		#select %s(ch.fechacaptura), ch.idcheque from %s ch %s %s %s %s %s %s %s %s group by ch.idcheque
		#""" % (what, self.dbtable, self.donde, self.fechacapturafiltro, self.fechaprogramadafiltro,
			   #self.beneficiariofiltro, self.estatusfiltro, self.usuariofiltro, self.empresafiltro, self.bancofiltro)
		#idcheque = ""
		#try:
			#cursor = r_cn.cursor()
			#cursor.execute(str(sql))
			#row = fetchone(cursor)
			#if row is not None:
				#idcheque = int(row[1])
			#self.GetRecord(record = idcheque)
			#if not self.ctrlindex:
				#if what == "min":
					#lctrl.SetItemState(0, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
				#else:
					#lctrl.SetItemState(lctrl.GetItemCount() - 1, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
		#finally:
			#cursor.close()
			
	def OnComboBox(self, event):
		id = event.GetId()
		if id == ID_COMBOEGROTROSBENEFICIARIO:
			self.GetControl(self.idtcbeneficiario).SetValue("")
		elif id == ID_COMBOEGROTROSCONCEPTO:
			self.GetControl(self.idtcconcepto).SetValue("")
		self.controlactual = event.GetId()
		modoedicion = self.modoedicion
		self.modoedicion = True
		self.Text(texto = False)
		self.modoedicion = modoedicion
		self.RevisaCambios()
		
	def OnText(self, event):
		ctrls = [self.idcbbeneficiario, self.idcbconcepto, self.idtcobservaciones]
		self.controlactual = event.GetId()
		valor = self.GetControl(self.controlactual).GetValue().encode("iso8859-1")
		if self.controlactual in ctrls:
			valornum = str(valor).replace('.','')
			if valor and not valornum.isdigit():
				if not str(valor).isupper():
					self.GetControl(self.controlactual).SetValue(str(valor).upper())
					lastposition = self.GetControl(self.controlactual).GetLastPosition()
					self.GetControl(self.controlactual).SetInsertionPoint(lastposition)
				
		self.Text()
	
	def Text(self, VengodelaLista = False, texto = True):
		for id in (self.idtcfechamovimiento, self.idcbcentrocosto, self.idcbpartida,
				   self.idcbbeneficiario, self.idcbconcepto, self.idtccantidad):
			control = self.GetControl(id)
			try:
				valor = control.GetValue().strip()
			except:
				try:
					valor = control.GetStringSelection()
				except:
					valor = ""
			if valor == "" and not self.FillingARecord and not self.NewFlag:
				self.NewFlag = True
				if not VengodelaLista:
					if id == self.idcbconcepto:
						self.ValidaConcepto(id, texto)
					elif id == self.idcbbeneficiario:
						self.ValidaBeneficiario(id, texto)
					else:
						Mensajes().Info(self, u"� No debe quedar ning�n dato requerido * en blanco !", u"Atenci�n")
					return
			if id == self.idtccantidad:
				cantidad = control.GetValue().strip()
				if cantidad != "":
					try:
						if str(cantidad)[-1:] != ".":
							if not str(cantidad)[-1:].isdigit():
								Mensajes().Info(self, u"� La cantidad debe ser num�rica !", u"Atenci�n")
								control.SetValue(str(cantidad)[:-1])
								control.SetSelection(-1,-1)
								return
							else:
								self.GetControl(self.idtxcantidad).SetLabel(str(c2p(cantidad).texto()))
					except:
						Mensajes().Info(self, u"� La cantidad debe ser num�rica !", u"Atenci�n")
						control.SetValue("")
						control.SetSelection(-1,-1)
						return
				else:
					self.GetControl(self.idtxcantidad).SetLabel("")
					if not self.FillingARecord and not self.NewFlag:
						self.NewFlag = True
						if not VengodelaLista:
							Mensajes().Info(self, u"� La cantidad no debe quedar en blanco !", u"Atenci�n")
							return
		if not self.FillingARecord:
			id = self.controlactual
			if id in (self.idtcfechacaptura, self.idtcidcheque):
				pass
			else:
				if id in self.readonlyctrl:	self.GetControl(id).SetEditable(True)
				if self.OriginalDistinto(id):
					self.GetControl(id).SetBackgroundColour(wx.CYAN)
					self.GetControl(id).Refresh()
				else:
					self.GetControl(id).SetBackgroundColour(wx.WHITE)
					self.GetControl(id).Refresh()
				if id in self.readonlyctrl: self.GetControl(id).SetEditable(False)
			
			if id == self.idcbempresa:
				combo = self.GetControl(id); index = combo.GetSelection(); empresaid = combo.GetClientData(index)
				if empresaid != self.empresaid:
					self.empresaid = empresaid
					self.ObtenerCentrosCostos(); self.ObtenerBancosCuentas(); self.DeshabilitaCombos(2, 2, 0)
			elif id == self.idcbcentrocosto:
				combo = self.GetControl(id); index = combo.GetSelection(); centrocostoid = combo.GetClientData(index)
				if centrocostoid != self.centrocostoid:
					self.centrocostoid = centrocostoid
					self.ObtenerPartidas(); self.DeshabilitaCombos(3, 3, 1)
			elif id == self.idcbpartida:
				combo = self.GetControl(id); index = combo.GetSelection(); partida = combo.GetClientData(index)
				if partida != self.partida:
					self.partida = partida
					self.partidaafectable = self.ObtenerPartidaAfectable(partida)
					if self.partidaafectable:
						self.GetControl(self.idsbpartida).Show(True)
					else:
						self.GetControl(self.idsbpartida).Show(False)
					self.ObtenerSubpartidas(partida, 1); self.DeshabilitaCombos(4, 4, 2)
			elif id == self.idcbsubpartida1:
				combo = self.GetControl(id); index = combo.GetSelection(); subpartida1 = combo.GetClientData(index)
				if subpartida1 != self.subpartida1:
					self.subpartida1 = subpartida1
					self.subpartida1afectable = self.ObtenerPartidaAfectable(subpartida1)
					if self.subpartida1afectable:
						self.GetControl(self.idsbsubpartida1).Show(True)
					else:
						self.GetControl(self.idsbsubpartida1).Show(False)
					self.ObtenerSubpartidas(subpartida1, 2); self.DeshabilitaCombos(5, 5, 3)
			elif id == self.idcbsubpartida2:
				combo = self.GetControl(id); index = combo.GetSelection(); subpartida2 = combo.GetClientData(index)
				if subpartida2 != self.subpartida2:
					self.subpartida2 = subpartida2
					self.subpartida2afectable = self.ObtenerPartidaAfectable(subpartida2)
					if self.subpartida2afectable:
						self.GetControl(self.idsbsubpartida2).Show(True)
					else:
						self.GetControl(self.idsbsubpartida2).Show(False)
					self.ObtenerSubpartidas(subpartida2, 3); self.DeshabilitaCombos(6, 6, 4)
			elif id == self.idcbsubpartida3:
				combo = self.GetControl(id); index = combo.GetSelection(); subpartida3 = combo.GetClientData(index)
				if subpartida3 != self.subpartida3:
					self.subpartida3 = subpartida3
					self.subpartida3afectable = self.ObtenerPartidaAfectable(subpartida3)
					if self.subpartida3afectable:
						self.GetControl(self.idsbsubpartida3).Show(True)
					else:
						self.GetControl(self.idsbsubpartida3).Show(False)
					self.ObtenerSubpartidas(subpartida3, 4); self.DeshabilitaCombos(7, 7, 5)
			elif id == self.idcbsubpartida4:
				combo = self.GetControl(id); index = combo.GetSelection(); subpartida4 = combo.GetClientData(index)
				if subpartida4 != self.subpartida4:
					self.subpartida4 = subpartida4
					self.subpartida4afectable = self.ObtenerPartidaAfectable(subpartida4)
					if self.subpartida4afectable:
						self.GetControl(self.idsbsubpartida4).Show(True)
					else:
						self.GetControl(self.idsbsubpartida4).Show(False)
					self.ObtenerSubpartidas(subpartida4, 5); self.DeshabilitaCombos(8, 8, 6)
			elif id == self.idcbsubpartida5:
				combo = self.GetControl(id); index = combo.GetSelection(); subpartida5 = combo.GetClientData(index)
				if subpartida5 != self.subpartida5:
					self.subpartida5 = subpartida5
					self.subpartida5afectable = self.ObtenerPartidaAfectable(subpartida5)
					if self.subpartida5afectable:
						self.GetControl(self.idsbsubpartida5).Show(True)
					else:
						self.GetControl(self.idsbsubpartida5).Show(False)
			elif id == self.idcbconcepto:
				self.ValidaConcepto(id, texto)
			elif id == self.idcbbeneficiario:
				self.ValidaBeneficiario(id, texto)

			self.RevisaCambios()
			
	def RevisaCambios(self, cambiosolicitud = False, cambiopartida = False):
		for id, tipo in self.controles_de_captura:
			if id in self.readonlyctrl:	self.GetControl(id).SetEditable(True)
			if tipo in ("ch", "cb"):
				valor = self.GetControl(id).GetStringSelection()
			else:
				valor = self.GetControl(id).GetValue()
			if valor <> self.originales[id]:
				self.GetControl(id).SetBackgroundColour(wx.CYAN)
				self.GetControl(id).Refresh()
				cambiosolicitud = True
			else:
				self.GetControl(id).SetBackgroundColour(wx.WHITE)
				self.GetControl(id).Refresh()
			if id in self.readonlyctrl:	self.GetControl(id).SetEditable(False)
			
		for id in self.controles_tipo_combo.itervalues():
			if self.GetControl(id).GetStringSelection() <> self.originales[id]:
				self.GetControl(id).SetBackgroundColour(wx.CYAN)
				cambiosolicitud = True
			else:
				self.GetControl(id).SetBackgroundColour(wx.WHITE)
			self.GetControl(id).Refresh()
			
		for id in self.controles_tipo_choice.itervalues():
			if self.GetControl(id).GetStringSelection() <> self.originales[id]:
				self.GetControl(id).SetBackgroundColour(wx.CYAN)
				cambiosolicitud = True
			else:
				self.GetControl(id).SetBackgroundColour(wx.WHITE)
			self.GetControl(id).Refresh()

		pagoestimacion = 0
		if self.GetControl(self.idckestimacion).IsChecked():
			pagoestimacion = 1
		if pagoestimacion != self.originales[self.idckestimacion]:
			self.GetControl(self.idckestimacion).SetBackgroundColour(wx.CYAN)
			cambiosolicitud = True
		else:
			self.GetControl(self.idckestimacion).SetBackgroundColour(wx.WHITE)
		self.GetControl(self.idckestimacion).Refresh()

		idcheque = ""
		try:
			idcheque = self.GetControl(self.idtcidcheque).GetValue()
		except:
			pass
		if not idcheque.strip() == "Nuevo":
			if self.GetControl(self.idtccantidad).GetValue() <> self.originales[self.idtccantidad]:
				cambiopartida = True
			else:
				for id in self.controles_cb_partidas:
					if self.GetControl(id).GetStringSelection() <> self.originales[id]:
						cambiopartida = True
						break
			if cambiopartida:
				self.GetControl(self.idbtaplicarform).Enable(False)
				self.GetControl(self.idbtaceptarform).Enable(False)
				self.GetControl(self.idbbagregarpartida).Enable(False)
				self.GetControl(self.idbbguardarpartida).Enable(True)
			else:
				if cambiosolicitud:
					if self.GetControl(self.idbbeliminarpartida).IsEnabled():
						self.GetControl(self.idbbagregarpartida).Enable(True)
						self.GetControl(self.idbbguardarpartida).Enable(False)
						self.GetControl(self.idbtaplicarform).Enable(True)
						self.GetControl(self.idbtaceptarform).Enable(True)
					else:
						self.GetControl(self.idbtaceptarform).Enable(True)
				elif self.GetControl(self.idbbeliminarpartida).IsEnabled():
					self.GetControl(self.idbbagregarpartida).Enable(True)
					self.GetControl(self.idbbguardarpartida).Enable(False)
					self.GetControl(self.idbtaplicarform).Enable(False)
					self.GetControl(self.idbtaceptarform).Enable(False)
				else:
					self.GetControl(self.idbtaceptarform).Enable(False)
				
	def ValidaConcepto(self, id, texto = True):
		if texto:
			if self.valida:
				self.idconcepto = -1
				combo = self.GetControl(id)
				self.conceptodescripcion = combo.GetValue()
				if self.conceptodescripcion:
					self.FiltraComboConcepto()
				else:
					self.ObtenerConceptos()
					self.GetControl(self.idtcconcepto).SetValue("")
					self.GetControl(self.idcbconcepto).SetFocus()
			else:
				self.valida = True
		else:
			self.valida = False
			self.conceptodescripcion = ""
			combo = self.GetControl(id)
			index = combo.GetSelection()
			self.idconcepto = combo.GetClientData(index)
				
	def FiltraComboConcepto(self):
		control = self.GetControl(self.idcbconcepto)
		control.Clear()
		sql = """
		select idreferenciaotros, descripcion from gixegresosotros where descripcion like '%s%%' order by descripcion
		""" % self.conceptodescripcion.encode("iso8859-1")
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			first = True
			for row in rows:
				control.Append(self.GetString(row[1]), int(row[0]))
				if first:
					first = False
					self.GetControl(self.idtcconcepto).SetValue(self.GetString(row[1]))
		else:
			self.GetControl(self.idtcconcepto).SetValue("")
		control.SetValue(self.conceptodescripcion)
		control.SetMark(len(self.conceptodescripcion), -1)

	def ValidaBeneficiario(self, id, texto = True):
		if texto:
			if self.valida:
				self.idbeneficiario = -1
				combo = self.GetControl(id)
				self.beneficiarionombre = combo.GetValue()
				if self.beneficiarionombre:
					self.FiltraComboBeneficiario()
				else:
					self.ObtenerBeneficiarios()
					self.GetControl(self.idtcbeneficiario).SetValue("")
					self.GetControl(self.idcbbeneficiario).SetFocus()
			else:
				self.valida = True
		else:
			self.valida = False
			self.beneficiarionombre = ""
			combo = self.GetControl(id)
			index = combo.GetSelection()
			self.idbeneficiario = combo.GetClientData(index)
				
	def FiltraComboBeneficiario(self):
		control = self.GetControl(self.idcbbeneficiario)
		control.Clear()
		sql = """
		select idbeneficiario, nombre from gixbeneficiarios where nombre like '%s%%' order by nombre
		""" % self.beneficiarionombre.encode("iso8859-1")
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			first = True
			for row in rows:
				control.Append(self.GetString(row[1]), int(row[0]))
				if first:
					first = False
					self.GetControl(self.idtcbeneficiario).SetValue(self.GetString(row[1]))
		else:
			self.GetControl(self.idtcbeneficiario).SetValue("")
		control.SetValue(self.beneficiarionombre)
		control.SetMark(len(self.beneficiarionombre), -1)

	def ObtenerPartidaAfectable(self, partida):
		sql = """
		select Afectable from gixpartidasegresos where PartidaID = %s
		""" % partida
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row:
			return int(row[0])
		return 0
				
	def SaveRecord(self):
		wx.BeginBusyCursor()
		currentitem = self.currentitem
		self.idcheque = self.GetControl(self.idtcidcheque).GetValue()
		if self.idcheque.strip() == "Nuevo":
			bienGrabado, self.idcheque = self.AddRecord()
			if bienGrabado:
				nueva = True
		else:
			bienGrabado = self.UpdateRecord()
			if bienGrabado:
				nueva = False
		wx.EndBusyCursor()
			
		if bienGrabado:
			lctrl = self.GetControl(self.idlc)
			if nueva:
				self.FillListCtrl()
				lctrl.SetItemState(self.ctrlindex, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
				self.GetRecord(record = self.idcheque)
			else:
				try:
					lctrl.SetItemState(currentitem, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
				except:
					pass
		else:
			Mensajes().Info(self, u"� El Registro no fue grabado !", u"Atenci�n")
			
	def UpdateRecord(self, querycancelar = ""):
		f_dia, f_mes, f_ano = self.GetControl(self.idtcfechamovimiento).GetValue().split('/')
		fechaprogramada = "%04d/%02d/%02d" % (int(f_ano), int(f_mes), int(f_dia))
		concepto = self.GetControl(self.idcbconcepto).GetValue().strip()
		if len(concepto) > 50:
			concepto = concepto[0:50]
			self.GetControl(self.idcbconcepto).SetValue(str(concepto))
			Mensajes().Info(self, u"� Intente abreviar !\n\nHa sido recortado el concepto\n\n%s" % concepto, u"Atenci�n")
			return False, 0
		cantidad = self.GetControl(self.idtccantidad).GetValue()
		observaciones = self.GetControl(self.idtcobservaciones).GetValue().strip()
		pagoestimacion = 0
		if self.GetControl(self.idckestimacion).IsChecked():
			pagoestimacion = 1
			
		setListForQuery = """ 
		fechaprogramada = '%s', cantidad = %s, idbancoorigen = %s, observaciones = '%s',
		idbeneficiario = %s, idreferenciaotros = %s, pagoestimacion = %s%s
		""" % (fechaprogramada, float(cantidad), self.idbancoorigen, observaciones,
			   self.idbeneficiario, self.idconcepto, pagoestimacion, querycancelar)
		sql = "update %s set %s where idcheque = %s" % (self.dbtable, setListForQuery, self.idcheque)
		queTal = self.QueryUpdateRecord(sql)
		if queTal:
			if querycancelar:
				estatus = "N"
				contenido = u"Cancelaci�n del Egreso"
				if self.idfondeo > 0:
					todook = self.LiberarRecursos(float(cantidad), fechaprogramada)
					if todook:
						Mensajes().Info(self,u"� Ha cancelado el egreso, por lo tanto, ha liberado recursos !\n\n" \
										u"Fueron afectadas las partidas y/o subpartidas que se incluyen\n" \
										u"en el egreso y eliminado el movimiento de cargo de la cuenta\n" \
										u"origen, afectando por consecuencia, el saldo de la misma.", u"Atenci�n")
			else:
				estatus = ""
				contenido = u"Edici�n del registro"
				
			sql = """
			insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension, Estatus)
			values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
			""" % (self.BlogGUID, self.usuario, contenido, "", "", estatus)
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
		
		return queTal
	
	def LiberarRecursos(self, cantidad, fechaprogramada, tipomovto = "C", todook = True, fechamovto = "NULL",
						periodo = ""):
		todook = True
		cantidad *= -1
		idbanco = self.idbancoorigen
		idcheque = self.idcheque
		try:
			fecha_ano, fecha_mes, fecha_dia = fechaprogramada.split('/')
			fecha_ano, fecha_mes, fecha_dia = int(fecha_ano), int(fecha_mes), int(fecha_dia)
			fechamovto = "'%04d/%02d/%02d'" % (fecha_ano, fecha_mes, fecha_dia)
			periodo = "'%04d/%02d/01'" % (fecha_ano, fecha_mes)
		except:
			Mensajes().Info(self, u"Problemas con la fecha al agregar movimientos", u"Atenci�n")
			return False
		self.ActualizaFondeos()
		totalchequedummy = self.ActualizaPartidas(idcheque, fechaprogramada, sumaoresta = -1)
		sql = "delete from gixbancosmovimientos where idcheque = '%s'" % str(idcheque)
		try:
			cu = r_cn.cursor()
			cu.execute(str(sql))
			cu.close()
			r_cn.commit()
		except:
			r_cn.rollback()
			Mensajes().Info(self,u"Sucedi� algo que impidi� eliminar el movimiento de banco.\n%s" \
							% sql, u"Atenci�n")
		
		todook = self.ActualizarSaldoBanco(idbanco, periodo, cantidad, fecha_mes, fecha_ano, tipomovto)
		if not todook:
			Mensajes().Info(self, u"� Se detectaron problemas al actualizar bancos !\n\n" \
							u"Solicitud: %s, Fecha Programada: %s, Total Cheque: %s" \
							u", Movimiento de Banco: %s\n\n� Tome nota y revise !" \
							% (idcheque, fechaprogramada, totalcheque, idreferenciamovto), u"Atenci�n")
		return todook
	
	def ActualizaFondeos(self):
		sql = "select count(*) from gixegresoscheques where idfondeo = %s" % self.idfondeo
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)[0]
		cu.close()
		if not row:
			sql = "delete from gixfondeos where idfondeo = %s" % self.idfondeo
			try:
				cu = r_cn.cursor()
				cu.execute(str(sql))
				cu.close()
				r_cn.commit()
			except:
				r_cn.rollback()
				Mensajes().Info(self,u"Sucedi� algo que impidi� eliminar el registro de fondeos.\n%s" \
								% sql, u"Atenci�n")
		
	def AddRecord(self):
		f_dia, f_mes, f_ano = self.GetControl(self.idtcfechacaptura).GetValue().split('/')
		fechacaptura = "%04d/%02d/%02d" % (int(f_ano), int(f_mes), int(f_dia))
		tipoprogramacion = "O"
		f_dia, f_mes, f_ano = self.GetControl(self.idtcfechamovimiento).GetValue().split('/')
		fechaprogramada = "%04d/%02d/%02d" % (int(f_ano), int(f_mes), int(f_dia))
		pagoestimacion = 0
		if self.GetControl(self.idckestimacion).IsChecked():
			pagoestimacion = 1
		concepto = self.GetControl(self.idcbconcepto).GetValue().strip()
		if len(concepto) > 50:
			concepto = concepto[0:50]
			self.GetControl(self.idcbconcepto).SetValue(str(concepto))
			Mensajes().Info(self, u"� Intente abreviar !\n\nHa sido recortado el concepto\n\n%s" % concepto, u"Atenci�n")
			return False, 0
		concepto = "OTRO EGRESO"
		cantidad = self.GetControl(self.idtccantidad).GetValue()
		anexo = "O"
		anexoadicional = ""
		especificaciones = "O"
		numerochequeorigen = ""
		bancodestino = ""
		sucursaldestino = ""
		plazadestino = ""
		clavebancariadestino = ""
		observaciones = self.GetControl(self.idtcobservaciones).GetValue().strip()
		sqlFields = """ 
		fechacaptura, tipoprogramacion, fechaprogramada, empresaid, idbeneficiario, concepto, cantidad,
		anexo, anexoadicional, especificaciones, idbancoorigen, numerochequeorigen, bancodestino,
		sucursaldestino, plazadestino, clavebancariadestino, observaciones, estatus, usuariosolicitante,
		idfondeo, cantidadcheque, idreferenciaotros, pagoestimacion
		"""
		sqlValues = "'%s', '%s', '%s', %s, %s, '%s', %s, '%s', '%s', '%s'," \
				  "%s, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', %s, %s, %s, %s" % \
				  (fechacaptura, tipoprogramacion, fechaprogramada, self.empresaid, self.idbeneficiario,
				   concepto, float(cantidad), anexo, anexoadicional, especificaciones, self.idbancoorigen,
				   numerochequeorigen, bancodestino, sucursaldestino, plazadestino, clavebancariadestino,
				   observaciones, "O", self.usuario, 0, 0, self.idconcepto, pagoestimacion)
		sql = """
		insert into %s (%s) values (%s)
		""" % (self.dbtable, sqlFields, sqlValues) 
		sqlmax = "select max(idcheque) from gixegresoscheques"
		queTal, identity =  self.QueryUpdateRecord(sql, sqlmax, True)
		numero = 0
		if queTal:
			if identity is not None:
				numero = identity
			else:
				Mensajes().Info(self, u"Problemas al buscar nueva solicitud.\n\n%s" % sqlx, u"Atenci�n")
			self.GetControl(self.idtcidcheque).SetValue(str(numero))
			sqly = "select convert(varchar(100), BlogGUID) from %s where idcheque = %s" % (self.dbtable, numero)
			cursor = r_cn.cursor()
			cursor.execute(str(sqly))
			row = fetchone(cursor)
			if row is not None:
				self.BlogGUID = row[0]
			cursor.close()
			sql = """
			insert into gixegresoschequespartidas
			(idcheque, centrocostoid, partida, subpartida1, subpartida2, subpartida3, subpartida4, subpartida5, cantidad)
			values (%s, %s, %s, %s, %s, %s, %s, %s, %s)
			""" % (numero, self.centrocostoid, self.partida, self.subpartida1, self.subpartida2,
				   self.subpartida3, self.subpartida4, self.subpartida5, float(cantidad))
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"Problemas al actualizar las partidas.\n\n%s" % sql, u"Atenci�n")
			sql = """
			insert into Blogs 
			(BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension, Estatus)
			values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
			""" % (self.BlogGUID, self.usuario, "Registro del Egreso (Sin Aplicar)", "", "", "O")
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"Problemas al actualizar el blog.\n\n%s" % sql, u"Atenci�n")

		return queTal, int(numero)
	
	def OnDeleteRecord(self, event):
		id = self.GetControl(self.idtcid).GetValue()
		if Mensajes().YesNo(self,u"� Desea realmente eliminar el registro %s ?" % id, u"Confirmaci�n"):
			if self.DeleteRecord():
				sql = """
				insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension)
				values ('%s', getdate(), '%s', '%s', '%s', '%s')
				""" % (self.BlogGUID, self.usuario, u"Eliminaci�n del Registro", "", "")
				if not self.QueryUpdateRecord(sql):
					Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
				self.FillListCtrl()
				self.GetControl(self.saveformbtn).Enable(False)
				self.GetControl(self.addlistctrlbtn).Enable(True)
				self.GetControl(self.editlistctrlbtn).Enable(True)
				self.GetControl(self.deletelistctrlbtn).Enable(True)
		self.GetControl(self.idlc).SetFocus()
				
	def DeleteRecord(self):
		idreferenciadetalle = self.idreferenciadetalle.GetValue().strip()
		if idreferenciadetalle == "":
			Mensajes().Info(self, u"No se ha especificado el Registro a Eliminar", u"Atenci�n")
			return False
		sql = "update %s set eliminado = 'S' where idreferenciadetalle = %s" % (self.dbtable, idreferenciadetalle)
		return self.QueryUpdateRecord(sql)
		
	def GetRecord(self, record):
		try:
			self.idcheque = int(record)
		except:
			return False
		sql = """ 
		select convert(varchar(10), fechacaptura, 103), tipoprogramacion, convert(varchar(10), fechaprogramada, 103),
		empresaid, idbeneficiario, concepto, cantidad, anexo, anexoadicional, especificaciones, idbancoorigen,
		numerochequeorigen, bancodestino, sucursaldestino, plazadestino, clavebancariadestino, observaciones,
		estatus, idfondeo, usuariosolicitante, cantidadcheque, idreferenciaotros, pagoestimacion, convert(varchar(100), BlogGUID)
		from %s where idcheque = %s
		""" % (self.dbtable, self.idcheque)
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		cursor.close()
		self.fechacaptura = str(row[0]); self.tipoprogramacion = str(row[1]); self.fechaprogramada = str(row[2])
		self.empresaid = int(row[3]); self.idbeneficiario = int(row[4]); self.concepto = str(row[5]).strip()
		self.cantidadpartidas = float(row[6]); self.anexo = str(row[7]); self.anexoadicional = str(row[8]).strip()
		self.especificaciones = str(row[9]); self.idbancoorigen = int(row[10]);
		self.numerochequeorigen = str(row[11]).strip(); self.bancodestino = str(row[12]).strip();
		self.sucursaldestino = str(row[13]).strip(); self.plazadestino = str(row[14]).strip();
		self.clavebancariadestino = str(row[15]).strip(); self.observaciones = str(row[16]).strip();
		self.estatus = str(row[17]); self.idfondeo = int(row[18])
		self.usuariosolicitante = str(row[19]).strip(); self.cantidadcheque = float(row[20])
		self.idconcepto = int(row[21]); self.pagoestimacion = int(row[22]); self.BlogGUID = str(row[23])
		return True
	
class GixCatalogoPartidasEgresos(wx.Frame, GixBase):
	NewFlag = False
	ValidarControles = False
	ControlesEspeciales = False
	CuentaNueva = False
	EsCentroDeCosto = False
	VengoDelSelect = False
	VengoDeUpdate = False
	VengoDeDelete = False
	VengoDeAdd = False
	ultimo = 0

	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE,
	             usuario = None):
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		if False:  # Standby
			global SUSCRIPTOR
			SUSCRIPTOR = self
			self.suscriptions = []
		
		self.usuario = usuario
		self.usuariosconsulta = ["ENRIQUE"]
		self.EmpresaID = ''
		
		self.SubpartidasDict = {}    # para no repetir la carga
		
		self.SetMenuBar(ABCMenuBarFuncTree())
		
		#if wx.Platform == '__WXMSW__':
		self.tb = self.CreateToolBar( wx.TB_HORIZONTAL | wx.NO_BORDER | wx.TB_FLAT )  # wx.TB_TEXT incluye texto
		ABCToolBarFuncTree(self.tb)
		
		#
		
		panel = wx.Panel(self,-1)
		CatalogoPartidasEgresos( panel, True, True )
		
		anchos = [-1,380]
		self.CreateStatusBar(2)
		self.SetStatusWidths(anchos)
		self.SetStatusText(u"Partidas Financieras", 0)
		self.SetStatusText(u"Estructura de las Partidas", 1)

		self.tree = self.GetControl(ID_TREECTRL_CATALOGO_PARTIDAS_EGRESOS)
		self.tree.Bind(wx.EVT_TREE_ITEM_EXPANDING, self.OnExpanding)
		self.tree.Bind(wx.EVT_TREE_SEL_CHANGED, self.OnSelChanged)
		
		wx.EVT_CLOSE(self, self.OnSalir)
		wx.EVT_MENU(self, ID_MENUSALIRTREE, self.OnSalir)
		wx.EVT_MENU(self, ID_MENUFIRSTTREE, self.OnMoveFirst)
		wx.EVT_MENU(self, ID_MENUPREVTREE, self.OnMovePrevious)
		wx.EVT_MENU(self, ID_MENUNEXTTREE, self.OnMoveNext)
		wx.EVT_MENU(self, ID_MENULASTTREE, self.OnMoveLast)
		wx.EVT_MENU(self, ID_MENUEXPTREE, self.OnExpand)
		wx.EVT_MENU(self, ID_MENUCOLTREE, self.OnCollapse)
		wx.EVT_MENU(self, ID_MENUREFTREE, self.OnRefrescar)
		wx.EVT_MENU(self, ID_MENUMINTREE, self.OnMin)
		wx.EVT_MENU(self, ID_MENUMAXTREE, self.OnMax)
		wx.EVT_MENU(self, ID_MENUXLSTREE, self.OnXls)
		
		#if wx.Platform == '__WXMSW__':
		wx.EVT_TOOL(self, ID_TOOLFIRSTCATCTACON, self.OnMoveFirst)
		wx.EVT_TOOL(self, ID_TOOLPREVCATCTACON, self.OnMovePrevious)
		wx.EVT_TOOL(self, ID_TOOLNEXTCATCTACON, self.OnMoveNext)
		wx.EVT_TOOL(self, ID_TOOLLASTCATCTACON, self.OnMoveLast)
		wx.EVT_TOOL(self, ID_TOOLEXPCATCTACON, self.OnExpand)
		wx.EVT_TOOL(self, ID_TOOLCOLCATCTACON, self.OnCollapse)
		wx.EVT_TOOL(self, ID_TOOLREFCATCTACON, self.OnRefrescar)
		wx.EVT_TOOL(self, ID_TOOLMINCATCTACON, self.OnMin)
		wx.EVT_TOOL(self, ID_TOOLMAXCATCTACON, self.OnMax)
		wx.EVT_TOOL(self, ID_TOOLXLSCATCTACON, self.OnXls)
		if self.usuario in self.usuariosconsulta:
			self.Bind(wx.EVT_TOOL, self.OnUsuarioConsulta, id = ID_TOOLSAVCATCTACON)
			self.Bind(wx.EVT_TOOL, self.OnUsuarioConsulta, id = ID_TOOLNEWCATCTACON)
			self.Bind(wx.EVT_TOOL, self.OnUsuarioConsulta, id = ID_TOOLDELCATCTACON)
		else:
			self.Bind(wx.EVT_TOOL, self.OnSaveRecord, id = ID_TOOLSAVCATCTACON)
			self.Bind(wx.EVT_TOOL, self.OnNuevoRecord, id = ID_TOOLNEWCATCTACON)
			self.Bind(wx.EVT_TOOL, self.OnDeleteRecord, id = ID_TOOLDELCATCTACON)

		wx.EVT_CHOICE(self, ID_CHOICETOOLNATURALEZACATCTACON, self.OnChoiceFiltro)
		self.GetControl(ID_CHOICETOOLNATURALEZACATCTACON).Enable(True)
		self.GetControl(ID_CHOICETOOLNATURALEZACATCTACON).SetSelection(0)
		
		#
			
		self.filtronaturaleza = ""
		
		if self.usuario in self.usuariosconsulta:
			self.Bind(wx.EVT_MENU, self.OnUsuarioConsulta, id = ID_MENUGRABARTREE)
			self.Bind(wx.EVT_MENU, self.OnUsuarioConsulta, id = ID_MENUNUEVOTREE)
			self.Bind(wx.EVT_MENU, self.OnUsuarioConsulta, id = ID_MENUELIMINARTREE)
		else:
			self.Bind(wx.EVT_MENU, self.OnSaveRecord, id = ID_MENUGRABARTREE)
			self.Bind(wx.EVT_MENU, self.OnNuevoRecord, id = ID_MENUNUEVOTREE)
			self.Bind(wx.EVT_MENU, self.OnDeleteRecord, id = ID_MENUELIMINARTREE)
		
		ctt = ["ID_TEXTCTRLCATPAREGRPARTIDA", "ID_TEXTCTRLCATPAREGRDESCRIPCION", "ID_TEXTCTRLCATPAREGRCENTROCOSTO"]
		self.controles_tipo_txt = dict(zip(ctt,map(eval,ctt)))
		self.originales = {}
		for v in self.controles_tipo_txt.itervalues():
			self.Bind(wx.EVT_TEXT, self.OnText, self.GetControl(v))
			self.originales[v] = ""
			
		self.originales[ID_CHECKBOXCATPAREGRAFECTABLE] = ""
		self.originales[ID_RADIOBUTTONCATPAREGRNATURALEZAINGRESO] = ""
		self.originales[ID_RADIOBUTTONCATPAREGRNATURALEZAEGRESO] = ""

		wx.EVT_CHECKBOX(self, ID_CHECKBOXCATPAREGRAFECTABLE, self.OnAfectable)
		wx.EVT_RADIOBUTTON(self, ID_RADIOBUTTONCATPAREGRNATURALEZAINGRESO, self.OnNaturaleza)
		wx.EVT_RADIOBUTTON(self, ID_RADIOBUTTONCATPAREGRNATURALEZAEGRESO, self.OnNaturaleza)
		
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONCATPAREGRCENTROCOSTO, self.OnElegirCentroCosto)
		wx.EVT_BUTTON(self, ID_BUTTONCATPAREGREMPRESA, self.OnElegirEmpresa)
		
		self.MenuSetter(ID_MENUNUEVOTREE, False)
		self.MenuSetter(ID_MENUELIMINARTREE, False)
		self.MenuSetter(ID_MENUGRABARTREE, False)
		self.MenuSetter(ID_MENUMAXTREE, False)
		
	def OnSalir(self, event):
		
		if False:   # Standby
			SUSCRIPTOR = None
			
		self.Destroy()
		
	def OnUsuarioConsulta(self, event):
		self.UsuarioConsulta()
		
	def UsuarioConsulta(self):
		Mensajes().Error(self, u"� Permiso Denegado !\n\nNo puede alterar el cat�logo de partidas.", u"Atenci�n")
		
	def OnMoveFirst(self, event):

		tree = self.tree
		item = tree.GetFirstVisibleItem()
		if item:
			tree.SelectItem(item)
			
		return
		
	def OnMovePrevious(self, event):

		tree = self.tree
		item = tree.GetPrevVisible(tree.GetSelection())
		if item:
			tree.SelectItem(item)
			
		return
		
	def OnMoveNext(self, event):

		tree = self.tree
		item = tree.GetNextVisible(tree.GetSelection())
		if item:
			tree.SelectItem(item)
			
		return
		
	def OnMoveLast(self, event):

		tree = self.tree
		item = tree.GetLastChild(tree.GetSelection())
		if item:
			tree.SelectItem(item)
			
		return
		
	def OnExpand(self, event):

		tree = self.tree
		item = tree.GetSelection()
		if item:
			tree.Expand(item)
			
		return
		
	def OnCollapse(self, event):

		tree = self.tree
		item = tree.GetSelection()
		if item:
			tree.Collapse(item)
			
		return
	
	def OnRefrescar(self, event):
		
		self.empresa = 0
		self.Refrescar()
		if self.empresa:
			self.tree.ScrollTo(self.empresa)
		
		return
		
	def Refrescar(self):
		
		self.ValidarControles = False
		
		self.SubpartidasDict.clear()
		self.FillTree()
		self.GetControl(ID_NOTEBOOKCATPAREGRTAB1).Enable(False)
		
		self.ValidarControles = True
		
		return
	
	def OnChoiceFiltro(self, event):
		
		choice = self.GetControl(ID_CHOICETOOLNATURALEZACATCTACON).GetSelection()
		if choice == 0:
			self.filtronaturaleza = ""
		elif choice == 1:
			self.filtronaturaleza = "and p.naturaleza = 'I'"
		else:
			self.filtronaturaleza = "and p.naturaleza = 'E'"
			
		self.empresa = 0
		self.Refrescar()
		if self.empresa:
			self.tree.ScrollTo(self.empresa)
		
		return

	def OnMin(self, event):
		
		self.Min()
		
		return
		
	def Min(self):
		
		self.GetControl(ID_NOTEBOOKCATPAREGRTAB1).Show(False)
		self.GetControl(ID_TREECTRL_CATALOGO_PARTIDAS_EGRESOS).Show(False)
		self.SetSize(wx.Size(442,690))
		self.Move(wx.Point(0, -1))
		anchos = [-1,200]
		self.SetStatusWidths(anchos)
		self.tb.EnableTool(ID_TOOLMINCATCTACON, False)
		self.tb.EnableTool(ID_TOOLMAXCATCTACON, True)
		self.MenuSetter(ID_MENUMINTREE, False)
		self.MenuSetter(ID_MENUMAXTREE, True)
		self.GetControl(ID_TREECTRL_CATALOGO_PARTIDAS_EGRESOS).Show()
		
		return
		
	def OnMax(self, event):
		
		self.GetControl(ID_NOTEBOOKCATPAREGRTAB1).Show()
		self.SetSize(wx.Size(870,690))
		self.CentreOnScreen()
		anchos = [-1,380]
		self.SetStatusWidths(anchos)
		self.tb.EnableTool(ID_TOOLMAXCATCTACON, False)
		self.tb.EnableTool(ID_TOOLMINCATCTACON, True)
		self.MenuSetter(ID_MENUMAXTREE, False)
		self.MenuSetter(ID_MENUMINTREE, True)
		
		return
	
	def OnXls(self, event):
		try:
			xle
			self.XlsWithXle()
		except:
			self.Xls()
			
	def Xls(self):
		encoding = "iso8859-1"
		descripcion = self.GetControl(ID_TEXTCTRLCATPAREGRDESCRIPCION).GetValue()
		excel = "%s.xls" % self.GetString(descripcion)
		if wx.Platform == '__WXMSW__':
			key = _winreg.OpenKey(_winreg.HKEY_CURRENT_USER,
			                      "Software\\Microsoft\\Windows\\CurrentVersion\Explorer\\Shell Folders")
			ruta = _winreg.QueryValueEx(key, 'Personal')[0]
			_winreg.CloseKey(key)
		else:
			ruta = os.getenv("HOME")
			
		dlg = wx.FileDialog(self, message="Guardar como...", defaultDir= ruta, defaultFile= excel,
				    wildcard="*.xls", style=wx.SAVE | wx.FD_OVERWRITE_PROMPT) #| wx.CHANGE_DIR))
		
		if dlg.ShowModal() == wx.ID_OK:
			excel = self.GetStringEncode(dlg.GetPath())  #.encode(encoding)
			dlg.Destroy()
			self.SetFocus()
			if Mensajes().YesNo(self, u"El detalle de la partida incluye unicamente movimientos\n" \
			                    u"cobrados, es decir, conciliados.\n\n" \
			                    u"� Desea incluir los movimientos a�n no cobrados (conciliados) ?", u"Confirmaci�n"):
				estatus = "estatus <> 'C'"
			else:
				estatus = "estatus = 'B'"
				
			partidaid = int(self.dataprev[1:])
			sql = """
			select e.idcheque, convert(varchar(10), e.fechaprogramada, 103), isnull(b.nombre, ''), e.concepto,
			d.cantidad, e.numerochequeorigen, e.estatus, e.observaciones, isnull(c.nombre, ''), e.devolucion
			from gixegresoschequespartidas d
			join gixegresoscheques e on d.idcheque = e.idcheque
			left join gixbeneficiarios b on e.idbeneficiario = b.idbeneficiario
			left join CLIENTE c on e.idbeneficiario = c.codigo
			where (d.partida = %s or d.subpartida1 = %s or d.subpartida2 = %s or d.subpartida3 = %s or
			d.subpartida4 = %s or d.subpartida5 = %s) and %s
			order by e.fechaprogramada
			""" % (partidaid, partidaid, partidaid, partidaid, partidaid, partidaid, estatus)
			cu = r_cn.cursor()
			cu.execute(str(sql))
			rows = cu.fetchall()
			cu.close()
			if rows:
				font = "futura hv bt"
				clavepartida = self.GetControl(ID_TEXTCTRLCATPAREGRPARTIDA).GetValue()
				workbook  = xl.Writer(excel)
				worksheet = workbook.add_worksheet()
				worksheet.set_margin_left(0.5)
				worksheet.set_margin_right(0.5)
				worksheet.set_header("REPORTE DE LA PARTIDA %s-%s" %
				                     (self.GetStringEncode(clavepartida), self.GetStringEncode(descripcion)))
				widths = (8,12,35,40,12,7,8,35)
				for ind, width in enumerate(widths):
					worksheet.set_column(ind, width)
				
				heading = workbook.add_format(align = "center", bold = 1, font = font, size = 8)
				elemento = (u"Id", u"Fecha", u"Beneficiario", u"Concepto", u"Cantidad",
				            u"Cheque", u"Estatus", u"Observaciones")
				for col in range(0,8):
					#worksheet.write([0,col], self.GetStringEncode(elemento[col]), heading)
					worksheet.write([0,col], elemento[col], heading)

					
				indice = 0
				for row in rows:
					indice += 1
					for col in range(0,8):
						if col in (0,1,5,6):
							cell_format = workbook.add_format(align = "center", font = font, size = 8)
						elif col in (2,3,7):
							cell_format = workbook.add_format(align = "left", font = font, size = 8)
						else:
							cell_format = workbook.add_format(align = "right", font = font, size = 8)
							
						elemento = row[col]
						if col == 2:
							if str(row[9]) == "S":
								elemento = row[8]
								
						try:
							worksheet.write([indice, col], self.GetStringEncode(elemento), cell_format)
						except:
							try:
								worksheet.write([indice, col], self.GetString(elemento), cell_format)
							except:
								worksheet.write([indice, col], str(elemento), cell_format)
			
				workbook.close()
		else:
			dlg.Destroy()
			self.SetFocus()
			
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
				
		return dato.strip()

	def GetStringEncode(self, valor):
		dato = ""
		try:
			dato = valor.encode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
				
		return dato.strip()
	
	def XlsWithXle(self):
		encoding = "iso8859-1"
		descripcion = self.GetControl(ID_TEXTCTRLCATPAREGRDESCRIPCION).GetValue()
		excel = "%s.xls" % str(descripcion).encode(encoding)
		if wx.Platform == '__WXMSW__':
			key = _winreg.OpenKey(_winreg.HKEY_CURRENT_USER,
			                      "Software\\Microsoft\\Windows\\CurrentVersion\Explorer\\Shell Folders")
			ruta = _winreg.QueryValueEx(key, 'Personal')[0]
			_winreg.CloseKey(key)
		else:
			ruta = os.getenv("HOME")
			
		dlg = wx.FileDialog(self, message="Guardar como XLE...", defaultDir= ruta, defaultFile= excel,
				    wildcard="*.xls", style=wx.SAVE | wx.FD_OVERWRITE_PROMPT) #| wx.CHANGE_DIR))
		
		if dlg.ShowModal() == wx.ID_OK:
			excel = dlg.GetPath().encode(encoding)
			dlg.Destroy()
			self.SetFocus()
			if Mensajes().YesNo(self, u"El detalle de la partida incluye unicamente movimientos\n" \
			                    u"cobrados, es decir, conciliados.\n\n" \
			                    u"� Desea incluir los movimientos a�n no cobrados (conciliados) ?", u"Confirmaci�n"):
				estatus = "estatus <> 'C'"
			else:
				estatus = "estatus = 'B'"
				
			partidaid = int(self.dataprev[1:])
			sql = """
			select e.idcheque, convert(varchar(10), e.fechaprogramada, 103), isnull(b.nombre, ''), e.concepto,
			d.cantidad, e.numerochequeorigen, e.estatus, e.observaciones, isnull(c.nombre, ''), e.devolucion
			from gixegresoschequespartidas d
			join gixegresoscheques e on d.idcheque = e.idcheque
			left join gixbeneficiarios b on e.idbeneficiario = b.idbeneficiario
			left join CLIENTE c on e.idbeneficiario = c.codigo
			where (d.partida = %s or d.subpartida1 = %s or d.subpartida2 = %s or d.subpartida3 = %s or
			d.subpartida4 = %s or d.subpartida5 = %s) and %s
			order by e.fechaprogramada
			""" % (partidaid, partidaid, partidaid, partidaid, partidaid, partidaid, estatus)
			cu = r_cn.cursor()
			cu.execute(str(sql))
			rows = cu.fetchall()
			cu.close()
			if rows:
				wx.BeginBusyCursor()
				self.dlgProgreso = wx.ProgressDialog(u"Generando Archivo de Excel", u"Progreso",
				                                     maximum = len(rows),
				                                     style = wx.PD_AUTO_HIDE | wx.PD_APP_MODAL | wx.PD_SMOOTH | \
				                                     wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_REMAINING_TIME)

				font = "futura hv bt"
				clavepartida = self.GetControl(ID_TEXTCTRLCATPAREGRPARTIDA).GetValue()
				
				workbook = xle.Workbook()
				worksheet = workbook.add_sheet("Partida")
				worksheet.set_header_str("REPORTE DE LA PARTIDA %s-%s" %
				                         (str(clavepartida).encode(encoding), str(descripcion).encode(encoding)))

				columnas = ((2000, u"Id") , (3000, u"Fecha"), (12000, u"Beneficiario"), (15000, u"Concepto"),
				            (3500, u"Cantidad"), (3500, u"Cheque"), (2000, u"Estatus"), (12000, u"Observaciones"))

				for columna, detalle in enumerate(columnas):
					worksheet.col(columna).width = detalle[0]
					worksheet.write(0, columna, detalle[1])
					
				alc = xle.Alignment()
				alc.horz = xle.Alignment.HORZ_CENTER
				alr = xle.Alignment()
				alr.horz = xle.Alignment.HORZ_RIGHT
				fnt = xle.Font()
				fnt.bold = True
				fnt.italic = True
				style = xle.XFStyle()
				style.alignment = alc
				style.font = fnt
				worksheet.row(0).set_style(style)
				
				date_style = xle.XFStyle()
				date_style.alignment = alc
				date_style.num_format_str = "M/D/YY"
		
				num_style = xle.XFStyle()
				num_style.alignment = alc
				num_style.num_format_str = "0"
				
				gral_style = xle.XFStyle()
				gral_style.alignment = alc
				
				float_style = xle.XFStyle()
				float_style.alignment = alr

				progreso = 0
				signo = u"%"
				for fila, row in enumerate(rows):
					progreso += 1
					avance = (progreso * 100) / len(rows)
					mensaje = u"Progreso %s%s" % (avance, signo)
					self.dlgProgreso.Update(progreso, newmsg = mensaje)
					worksheet.write(fila + 1, 0, str(int(row[0])), num_style)
					worksheet.write(fila + 1, 1, str(row[1]), date_style)
					if str(row[9]) == "S":
						worksheet.write(fila + 1, 2, self.GetString(row[8]))
					else:
						worksheet.write(fila + 1, 2, self.GetString(row[2]))

					worksheet.write(fila + 1, 3, self.GetString(row[3]))
					worksheet.write(fila + 1, 4, str(amount_and_cents_with_commas(float(row[4]))), float_style)
					worksheet.write(fila + 1, 5, self.GetString(row[5]), gral_style)
					worksheet.write(fila + 1, 6, self.GetString(row[6]), gral_style)
					worksheet.write(fila + 1, 7, self.GetString(row[7]))
					
				workbook.save(excel)
				self.dlgProgreso.Destroy()
				wx.EndBusyCursor()
				Mensajes().Info(self, u"Envio a Excel finalizado.", u"Aviso")
			else:
				Mensajes().Info(self, u"� No hay nada que enviar a Excel !", u"Atenci�n")
				self.SetFocus()
		else:
			dlg.Destroy()
			self.SetFocus()
	
	def OnNaturaleza(self, event):
		id = event.GetId()
		#self.controlactual = id       # para mantener valor en la variable
		self.controlactual = ID_TEXTCTRLCATPAREGRCENTROCOSTO  # para mantener valor en la variable
		self.EndOfOnTextTree(self.controlactual)      # para forzar checar cambios en valores originales de controles
	
	def OnElegirCentroCosto(self, event):
		
		self.inxcentrocosto = []
		self.chocentrocosto = []
		
		if self.EmpresaID:
			emp = self.EmpresaID
		else:
			emp = self.PartidaEmpresaID
			
		query = """
		select CentroCostoID, Descripcion + ' - ' + convert(varchar(7), CentroCostoID) + '                    '
		from gixcentroscostos where EmpresaID = %s order by Descripcion         
		""" % emp
		cu = r_cn.cursor()
		cu.execute(query)
		rows = fetchall(cu)
		cu.close()
		
		for row in rows:
			self.inxcentrocosto.append(row[0])
			self.chocentrocosto.append(self.GetStringFromField(row[1]))

		self.index = wx.GetSingleChoiceIndex(u"Opciones",  u"Elegir Centro de Costo", self.chocentrocosto, parent = None)
		
		if int(self.index) > -1:
			centrocosto, trash = self.chocentrocosto[self.index].split(' - ')
			self.GetControl(ID_TEXTCTRLCATPAREGRCENTROCOSTO).SetValue(str(self.inxcentrocosto[self.index]))
			self.GetControl(ID_CATPAREGRCENTROCOSTO).SetLabel(self.GetStringFromField(centrocosto))
			
		return

	def OnElegirEmpresa(self, event):
		
		self.inxempresa = []
		self.choempresa = []
		query = """
		select EmpresaID, RazonSocial + ' - ' + convert(varchar(7), EmpresaID) + '                    '
		from cont_Empresas order by RazonSocial
		"""
		cu = r_cn.cursor()
		cu.execute(query)
		rows = fetchall(cu)
		cu.close()
		
		for row in rows:
			self.inxempresa.append(row[0])
			self.choempresa.append(self.GetStringFromField(row[1]))

		self.index = wx.GetSingleChoiceIndex(u"Opciones",  u"Elegir Empresa", self.choempresa, parent = None)
		
		if int(self.index) > -1:
			empresa, trash = self.choempresa[self.index].split(' - ')
			self.EmpresaID = self.inxempresa[self.index]
			self.GetControl(ID_TEXTCATPAREGREMPRESA).SetLabel(self.GetStringFromField(empresa))
		else:
			self.EmpresaID = ''
			self.GetControl(ID_TEXTCATPAREGREMPRESA).SetLabel('')
			
		self.GetControl(ID_TEXTCTRLCATPAREGRCENTROCOSTO).SetValue('')
		self.GetControl(ID_CATPAREGRCENTROCOSTO).SetLabel('')
		
		return

	def OnAfectable(self, event):
		
		self.controlactual = ID_TEXTCTRLCATPAREGRCENTROCOSTO  # para mantener valor en la variable
		self.EndOfOnTextTree(self.controlactual)      # para forzar checar cambios en valores originales de controles
		
		return
	
	def OnText(self, event):
		if self.ValidarControles:
			self.controlactual = event.GetId()
			self.Text()
			
		return
	
	def Text(self, VengodelArbol = False):
		for id in (ID_TEXTCTRLCATPAREGRPARTIDA, ID_TEXTCTRLCATPAREGRDESCRIPCION, ID_TEXTCTRLCATPAREGRCENTROCOSTO):
			valor = self.GetControl(id).GetValue().strip()
			if valor == "" and self.ValidarControles and not self.NewFlag:
				self.NewFlag = True
				if not VengodelArbol:
					Mensajes().Info(self, u"� No debe quedar ning�n dato en blanco !", u"Atenci�n")
					return
					
			if self.controlactual == ID_TEXTCTRLCATPAREGRDESCRIPCION:
				ctrl = self.GetControl(self.controlactual)
				valor = ctrl.GetValue().encode("iso8859-1")
				valornum = str(valor).replace('.','')
				if valor and not valornum.isdigit():
					if valor not in (",", ".", "#", "&", "!", "�", "?", "�", "/", "(", ")", "$", "'"):
						if not str(valor).isupper():
							ctrl.SetValue(str(valor).upper())
							lastposition = ctrl.GetLastPosition()
							ctrl.SetInsertionPoint(lastposition)
					else:
						ctrl.SetValue("")
						
		if self.ValidarControles:
			self.EndOfOnTextTree(self.controlactual)
			
		return
		
	def EndOfOnTextTree(self, id):
		
		self.GetControl(ID_TEXTCTRLCATPAREGRCENTROCOSTO).SetEditable(True)  # revision de controles de texto
		if self.OriginalDistinto(id):
			self.GetControl(id).SetBackgroundColour(wx.CYAN)
			self.GetControl(id).Refresh()
		else:
			self.GetControl(id).SetBackgroundColour(wx.WHITE)
			self.GetControl(id).Refresh()
			
		if self.OriginalesDistintos():
			self.tb.EnableTool( ID_TOOLSAVCATCTACON, True)
			self.MenuSetter(ID_MENUGRABARTREE, True)
		else:
			self.tb.EnableTool( ID_TOOLSAVCATCTACON, False)
			self.MenuSetter(ID_MENUGRABARTREE, False)
		self.GetControl(ID_TEXTCTRLCATPAREGRCENTROCOSTO).SetEditable(False)

		id = self.GetControl(ID_CHECKBOXCATPAREGRAFECTABLE)                  # revisi�n de checkbox
		if id.GetValue() <> self.originales[ID_CHECKBOXCATPAREGRAFECTABLE]:
			id.SetBackgroundColour(wx.CYAN)
			id.Refresh()
			self.tb.EnableTool( ID_TOOLSAVCATCTACON, True)
			self.MenuSetter(ID_MENUGRABARTREE, True)
		else:
			id.SetBackgroundColour(wx.NullColour)
			id.Refresh()
			
		id = self.GetControl(ID_RADIOBUTTONCATPAREGRNATURALEZAINGRESO)       # revisi�n de radiobutton ingreso
		if id.GetValue() <> self.originales[ID_RADIOBUTTONCATPAREGRNATURALEZAINGRESO]:
			id.SetBackgroundColour(wx.CYAN)
			id.Refresh()
			self.tb.EnableTool( ID_TOOLSAVCATCTACON, True)
			self.MenuSetter(ID_MENUGRABARTREE, True)
		else:
			id.SetBackgroundColour(wx.NullColour)
			id.Refresh()
			
			id = self.GetControl(ID_RADIOBUTTONCATPAREGRNATURALEZAEGRESO)       # revisi�n de radiobutton egreso
		if id.GetValue() <> self.originales[ID_RADIOBUTTONCATPAREGRNATURALEZAEGRESO]:
			id.SetBackgroundColour(wx.CYAN)
			id.Refresh()
			self.tb.EnableTool( ID_TOOLSAVCATCTACON, True)
			self.MenuSetter(ID_MENUGRABARTREE, True)
		else:
			id.SetBackgroundColour(wx.NullColour)
			id.Refresh()
			
		return
			
	def OnNuevoRecord(self, event):

		if self.EsEmpresa:
			
			self.NewFlag = True
			self.LimpiaDetalle(True)
			self.GetControl(ID_CHECKBOXCATPAREGRAFECTABLE).SetValue(False)
			self.GetControl(ID_RADIOBUTTONCATPAREGRNATURALEZAINGRESO).SetValue(False)
			self.GetControl(ID_RADIOBUTTONCATPAREGRNATURALEZAEGRESO).SetValue(True)
			self.ValoresOriginales()
			self.LimpiaColores()
			self.GetControl(ID_NOTEBOOKCATPAREGRTAB1).Enable(True)
			self.GetControl(ID_BUTTONCATPAREGREMPRESA).Enable(True)
			self.GetControl(ID_TEXTCTRLCATPAREGRPARTIDA).SetFocus()
		
		elif self.EsCentroDeCosto:
			
			self.NewFlag = True
			self.LimpiaDetalle(True)
			self.GetControl(ID_TEXTCTRLCATPAREGRCENTROCOSTO).SetValue(str(self.CentroCostoID))
			self.GetControl(ID_CATPAREGRCENTROCOSTO).SetLabel(self.GetStringFromField(self.ObtenCentroCosto(self.CentroCostoID)))
			self.GetControl(ID_CHECKBOXCATPAREGRAFECTABLE).SetValue(False)
			self.GetControl(ID_RADIOBUTTONCATPAREGRNATURALEZAINGRESO).SetValue(False)
			self.GetControl(ID_RADIOBUTTONCATPAREGRNATURALEZAEGRESO).SetValue(True)
			self.ValoresOriginales()
			self.LimpiaColores()
			self.GetControl(ID_NOTEBOOKCATPAREGRTAB1).Enable(True)

			self.GetControl(ID_TEXTCTRLCATPAREGRPARTIDA).SetValue(self.CreaClavePartida())
			self.GetControl(ID_TEXTCTRLCATPAREGRPARTIDA).SetBackgroundColour(wx.CYAN)
			self.GetControl(ID_TEXTCTRLCATPAREGRPARTIDA).Refresh()
			self.GetControl(ID_TEXTCTRLCATPAREGRPARTIDA).SetFocus()
			self.GetControl(ID_TEXTCTRLCATPAREGRPARTIDA).SetSelection(-1, -1)
			
		else:

			if self.dicNodeInfo['C'][2]:
				
				Mensajes().Info(self, u"No puede agregar una subpartida a la partida '%s %s'\n" \
								u"ya que esta se afecta directamente."
								% (self.dicNodeInfo['C'][5], self.dicNodeInfo['C'][4]), u"Atenci�n")
				return
			
			else:
				
				self.NewFlag = True
				self.LimpiaDetalle(True)
				
				self.GetControl(ID_TEXTCTRLCATPAREGRCENTROCOSTO).SetValue(str(self.dicNodeInfo['C'][3]))
				
				self.ValoresOriginales()
				self.LimpiaColores()
				
				partida = self.GetStringFromField(self.dicNodeInfo['C'][5])
				self.GetControl(ID_TEXTCTRLCATPAREGRPARTIDA).SetValue(self.CreaClavePartida(partida))
				
				self.GetControl(ID_TEXTCTRLCATPAREGRPARTIDA).SetBackgroundColour(wx.CYAN)
				self.GetControl(ID_TEXTCTRLCATPAREGRPARTIDA).Refresh()
				
				self.GetControl(ID_TEXTCTRLCATPAREGRPARTIDA).SetFocus()
				self.GetControl(ID_TEXTCTRLCATPAREGRPARTIDA).SetSelection(-1, -1)
				
		return

	def CreaClavePartida(self, partida = ""):
		
		cont = 0
		cursor = r_cn.cursor()
		while True:
			cont += 5
			if cont < 10:
				nvapartida = partida + '00%s' % str(cont)
			elif cont < 100:
				nvapartida = partida + '0%s' % str(cont)
			else:
				nvapartida = partida + '%s' % str(cont)
				
			sql = """
			select PartidaID from gixpartidasegresos where ClavePartida = '%s' and EmpresaID = %s
			""" % (nvapartida, self.PartidaEmpresaID)
			cursor.execute(str(sql))
			row = fetchone(cursor)
			if not row:
				cursor.close()
				break
			
		return nvapartida
	
	def OnDeleteRecord(self, event):

		if self.originales[ID_CHECKBOXCATPAREGRAFECTABLE] == True:
			afectable = 1
		else:
			afectable = 0
			
		if not afectable:
			
			Mensajes().Info(self, u"No puede eliminar la partida '%s %s'\n" \
							u"ya que esta no se afecta directamente."
							% (self.dicNodeInfo['C'][5], self.dicNodeInfo['C'][4]), u"Atenci�n")
			return
		
		else:
			
			partidaid = int(self.dataprev[1:])
			
			sqlhija = """
			select count(*) from gixpartidasegresos where HijaDePartidaID = %s
			""" % partidaid
			cursor = r_cn.cursor()
			cursor.execute(str(sqlhija))
			rowscount = fetchone(cursor)[0]
			cursor.close()

			if rowscount:
				
				Mensajes().Info(self, u"No puede eliminar la partida '%s %s'\n" \
								u"ya que esta tiene subpartidas."
								% (self.dicNodeInfo['C'][5], self.dicNodeInfo['C'][4]), u"Atenci�n")
				return
			
			elif Mensajes().YesNo(self,u"� Desea realmente eliminar este registro ?", u"Confirmaci�n"):
			
				sql = "delete from gixpartidasegresos where PartidaID = %s" % partidaid
		
				try:
					cursor = r_cn.cursor()
					cursor.execute(str(sql))
					cursor.close()
				
					r_cn.commit()
					queTal = True
				
				except:
					r_cn.rollback()
					Mensajes().Info(self,u"Sucedi� algo que impidi� eliminar este registro.\n" \
									u"Quiz� se deba a que hay otra informaci�n\nque depende de este registro.\n%s" \
									% sql, u"Atenci�n")
					queTal = False
			else:
				
				return
		
		if queTal:
			
			self.VengoDeDelete = True
			
			tree = self.tree
			item = self.dicNodeInfo['C'][6]
			
			partidamadre = tree.GetItemParent(item)
			valor = tree.GetPyData(partidamadre)
			
			if valor[0] == "T":
				
				sqlcentrocosto = """
				select count(*) from gixpartidasegresos where CentroCostoID = %s
				""" % valor[1:]
				cursor = r_cn.cursor()
				cursor.execute(str(sqlcentrocosto))
				rowscount = fetchone(cursor)[0]
				cursor.close()
				
				tree.Delete(item)
				tree.SelectItem(partidamadre)
				
				if rowscount:
					pass
				else:
					empresa = tree.GetItemParent(partidamadre)
					tree.Delete(partidamadre)
					tree.SelectItem(empresa)
				
			else:
				
				hijadepartida = int(self.dicNodeInfo['C'][7])
				sqlhija = """
				select count(*) from gixpartidasegresos where HijaDePartidaID = %s
				""" % hijadepartida
				cursor = r_cn.cursor()
				cursor.execute(str(sqlhija))
				rowscount = fetchone(cursor)[0]
				cursor.close()
				
				if rowscount:
					tree.Delete(item)
				else:
					tree.Collapse(partidamadre)
					tree.Delete(item)
					tree.SetItemHasChildren(partidamadre, 0)
					tree.SelectItem(partidamadre)
					somekeys = [valor]
					remkeys = self.DictRemove(self.SubpartidasDict, somekeys) # Regresa dict de llaves eliminadas
					
			self.VengoDeDelete = False
			
			#Mensajes().Info(self,u"� Registro Eliminado !",u"Atenci�n")
			
		return

	def SaveRecord(self):
		
		if not self.tb.GetToolEnabled(ID_TOOLNEWCATCTACON):

			bienGrabado = self.AddRecord()
		
		else:

			if self.dataprev:
				
				bienGrabado = self.UpdateRecord()
			
		if bienGrabado:
			
			self.tb.EnableTool( ID_TOOLSAVCATCTACON, False)
			self.tb.EnableTool( ID_TOOLDELCATCTACON, True)
			self.tb.EnableTool( ID_TOOLNEWCATCTACON, True)
			self.MenuSetter(ID_MENUGRABARTREE, False)
			self.MenuSetter(ID_MENUELIMINARTREE, True)
			self.MenuSetter(ID_MENUNUEVOTREE, True)
			self.GetControl(ID_BUTTONCATPAREGREMPRESA).Enable(False)
			self.EmpresaID = ''
			self.GetControl(ID_TEXTCATPAREGREMPRESA).SetLabel('')
			
			self.ValoresOriginales()
			self.LimpiaColores()
			
		else:

			Mensajes().Info(self,u"� El Registro no fue grabado !", u"Atenci�n")
			
		return bienGrabado
	
	def UpdateRecord( self ):
		
		partidaid = int(self.dataprev[1:])
		
		if self.GetControl(ID_CHECKBOXCATPAREGRAFECTABLE).GetValue() == True:
			
			sqlhija = """
			select count(*) from gixpartidasegresos where HijaDePartidaID = %s
			""" % partidaid
			cursor = r_cn.cursor()
			cursor.execute(str(sqlhija))
			rowscount = fetchone(cursor)[0]
			cursor.close()
			
			if rowscount:
				Mensajes().Info(self, u"No puede afectar directamente la partida '%s %s'\n" \
								u"ya que esta tiene subpartidas."
								% (self.dicNodeInfo['C'][5], self.dicNodeInfo['C'][4]), u"Atenci�n")
				self.GetControl(ID_CHECKBOXCATPAREGRAFECTABLE).SetValue(False)
				self.GetControl(ID_CHECKBOXCATPAREGRAFECTABLE).SetBackgroundColour(wx.NullColour)
				self.GetControl(ID_CHECKBOXCATPAREGRAFECTABLE).Refresh()
				afectable = 0
				
			else:
				
				afectable = 1
				
		else:
			
			afectable = 0
			
		self.VengoDeUpdate = True
		
		clavepartida = self.GetControl(ID_TEXTCTRLCATPAREGRPARTIDA).GetValue()
		descripcion = self.GetControl(ID_TEXTCTRLCATPAREGRDESCRIPCION).GetValue()
		
		partidacentrocostoid = self.GetControl(ID_TEXTCTRLCATPAREGRCENTROCOSTO).GetValue()
		
		if self.GetControl(ID_RADIOBUTTONCATPAREGRNATURALEZAINGRESO).GetValue():
			naturaleza = "I"
		else:
			naturaleza = "E"
		
		setListForQuery = """
		ClavePartida = '%s' , Descripcion = '%s' , Afectable = %s , CentroCostoID = %s, naturaleza = '%s'
		""" % (clavepartida, descripcion, afectable, partidacentrocostoid, naturaleza)
		
		sql = "update gixpartidasegresos set %s " \
				"where PartidaID = %s " \
			% (setListForQuery, partidaid)

		queTal = self.QueryUpdateRecord(sql)
		
		if queTal:
			
			refresca = False
			tree = self.tree
			item = self.dicNodeInfo['C'][6]
			
			#lapartida = self.GetStringFromField(clavepartida) + " " + self.GetStringFromField(descripcion)
			lapartida = self.GetStringFromField(descripcion)
			
			tree.SetItemText(item, "%s" % lapartida)
				
			if afectable:
				tree.SetItemImage(item, self.fileidx, wx.TreeItemIcon_Normal)
				#tree.SetItemImage(item, self.filesel, wx.TreeItemIcon_Selected)
			else:
				tree.SetItemImage(item, self.fldridx, wx.TreeItemIcon_Normal)
				tree.SetItemImage(item, self.fldridx, wx.TreeItemIcon_Selected)
				tree.SetItemImage(item, self.fldropenidx, wx.TreeItemIcon_Expanded)
				tree.SetItemImage(item, self.fldropenidx, wx.TreeItemIcon_SelectedExpanded)
				sqlhija = """
				select count(*) from gixpartidasegresos where HijaDePartidaID = %s
				""" % partidaid
				cursor = r_cn.cursor()
				cursor.execute(str(sqlhija))
				rowscount = fetchone(cursor)[0]
				cursor.close()
				id = self.GetControl(ID_TEXTCTRLCATPAREGRCENTROCOSTO)
				id.SetEditable(True)
				if rowscount:
					tree.SetItemHasChildren(item)
					if self.OriginalDistinto(ID_TEXTCTRLCATPAREGRCENTROCOSTO):
						Mensajes().Info(self,u"Ha modificado el centro de costo, por lo tanto,\n" \
										u"se afectar�n todas las subpartidas.", u"Aviso")
						sqlhijas = """
						select PartidaID, ClavePartida, Descripcion from gixpartidasegresos where HijaDePartidaID = %s
						""" % partidaid
						cursor = r_cn.cursor()
						cursor.execute(str(sqlhijas))
						rows = fetchall(cursor)
						cursor.close()
						if rows:
							setListForQuery = "CentroCostoID = %s" % (partidacentrocostoid)
							for row in rows:
								sql = "update gixpartidasegresos set %s where PartidaID = %s" % (setListForQuery, row[0])
								if not self.QueryUpdateRecord(sql):
									Mensajes().Info(self,u"La subpartida '%s - %s'\n" \
													u"no pudo ser modificada en el centro de costo." \
													% (str(row[1]), str(row[2])), u"Atenci�n")
						refresca = True
				else:
					tree.SetItemHasChildren(item, 0)
					if self.OriginalDistinto(ID_TEXTCTRLCATPAREGRCENTROCOSTO):
						refresca = True
					
				id.SetEditable(False)
				
			if refresca:
				self.Refrescar()
				item = tree.GetFirstVisibleItem()
				if item:
					tree.Expand(item)
			else:
				partidamadre = tree.GetItemParent(item)
				tree.SortChildren(partidamadre)
				tree.SelectItem(item)
			
		self.VengoDeUpdate = False

		return queTal
	
	def AddRecord(self):
		
		EsCentroDeCosto = self.EsCentroDeCosto
		EsEmpresa = self.EsEmpresa
		subpartidas = ''
			
		clavepartida = self.GetControl(ID_TEXTCTRLCATPAREGRPARTIDA).GetValue()
		descripcion = self.GetControl(ID_TEXTCTRLCATPAREGRDESCRIPCION).GetValue()
		if self.GetControl(ID_CHECKBOXCATPAREGRAFECTABLE).GetValue() == True:
			afectable = 1
		else:
			afectable = 0
		if self.GetControl(ID_RADIOBUTTONCATPAREGRNATURALEZAINGRESO).GetValue():
			naturaleza = "I"
		else:
			naturaleza = "E"
		partidacentrocostoid = self.GetControl(ID_TEXTCTRLCATPAREGRCENTROCOSTO).GetValue()
		
		if EsEmpresa:
			
			if self.EmpresaID:
				self.PartidaEmpresaID = self.EmpresaID
				
			empresaid = self.PartidaEmpresaID
			hijadepartidaid = "Null"
			partidamadre = self.ItemEmpresa
		
		elif EsCentroDeCosto:
			
			empresaid = self.PartidaEmpresaID
			hijadepartidaid = "Null"
			partidamadre = self.ItemCentroCosto
		
		else:
		
			empresaid = self.dicNodeInfo['C'][1]
			hijadepartidaid = self.dicNodeInfo['C'][0]
			partidamadre = self.dicNodeInfo['C'][6]
		
		sqlFields = """ 
		EmpresaID, ClavePartida, HijaDePartidaID, Descripcion, Afectable, CentroCostoID, naturaleza
		"""
		sqlValues = " %s, '%s', %s, '%s', %s, %s, '%s' " \
			% (empresaid, clavepartida, hijadepartidaid, descripcion, afectable, partidacentrocostoid, naturaleza)
		sql = "insert into gixpartidasegresos (%s) values (%s) " % (sqlFields, sqlValues)
		
		queTal = self.QueryUpdateRecord(sql)
		
		if queTal:
			
			wx.BeginBusyCursor()
			
			sqlx = "select max(PartidaID) from gixpartidasegresos"
			cursor = r_cn.cursor()
			cursor.execute(str(sqlx))
			row = fetchone(cursor)
			cursor.close()
			
			if row is not None:
				self.ultimo = int(row[0])
			else:
				wx.EndBusyCursor()
				return queTal
				
			tree = self.tree
			
			if partidamadre:
					
				clavepartida = self.GetControl(ID_TEXTCTRLCATPAREGRPARTIDA).GetValue()
				descripcion = self.GetControl(ID_TEXTCTRLCATPAREGRDESCRIPCION).GetValue()
				#lapartida = self.GetStringFromField(clavepartida) + " " + self.GetStringFromField(descripcion)
				lapartida = self.GetStringFromField(descripcion)

				if tree.GetChildrenCount(partidamadre) > 0:
					
					tree.Expand(partidamadre)
					
					subpartidas = tree.AppendItem(partidamadre, "%s" % lapartida)
					tree.SetPyData(subpartidas, "S%s" % self.ultimo)
					
					if afectable:
						tree.SetItemImage(subpartidas, self.fileidx, wx.TreeItemIcon_Normal)
						#tree.SetItemImage(subpartidas, self.filesel, wx.TreeItemIcon_Selected)
					else:
						tree.SetItemImage(subpartidas, self.fldridx, wx.TreeItemIcon_Normal)
						tree.SetItemImage(subpartidas, self.fldridx, wx.TreeItemIcon_Selected)
						tree.SetItemImage(subpartidas, self.fldropenidx, wx.TreeItemIcon_Expanded)
						tree.SetItemImage(subpartidas, self.fldropenidx, wx.TreeItemIcon_SelectedExpanded)
						sqlhija = """
						select count(*) from gixpartidasegresos where HijaDePartidaID = %s
						""" % self.ultimo
						cursor = r_cn.cursor()
						cursor.execute(str(sqlhija))
						rowscount = fetchone(cursor)[0]
						cursor.close()
						if rowscount:
							tree.SetItemHasChildren(subpartidas)
						else:
							tree.SetItemHasChildren(subpartidas, 0)
					
					self.Configura(partidamadre)
					if not self.dicNodeInfo or partidamadre == self.dicNodeInfo['C'][6]:
						tree.SelectItem(subpartidas)
						
				self.Configura(partidamadre)
				self.UpdateNodo(partidamadre, EsCentroDeCosto, EsEmpresa)
				
				if EsEmpresa:
					self.Refrescar()
					tree.ScrollTo(self.partidamayor)
					tree.SelectItem(self.partidamayor)
				elif EsCentroDeCosto:
					if subpartidas:
						tree.ScrollTo(subpartidas)
					else:
						self.Refrescar()
					
			wx.EndBusyCursor()
			
		return queTal
	
	def Configura(self, partidamadre):
		
		tree = self.tree
		
		self.tb.EnableTool( ID_TOOLSAVCATCTACON, False)
		self.tb.EnableTool( ID_TOOLDELCATCTACON, True)
		self.tb.EnableTool( ID_TOOLNEWCATCTACON, True)
		self.MenuSetter(ID_MENUGRABARTREE, False)
		self.MenuSetter(ID_MENUELIMINARTREE, True)
		self.MenuSetter(ID_MENUNUEVOTREE, True)
		
		tree.SortChildren(partidamadre)
		
		return
	
	def UpdateNodo(self, item, EsCentroDeCosto, EsEmpresa):
		
		tree = self.tree
		data = tree.GetPyData(item)
		
		if EsEmpresa:
			
			tree.SetItemImage(item, self.fldridx, wx.TreeItemIcon_Normal)
			tree.SetItemImage(item, self.fldropenidx, wx.TreeItemIcon_Expanded)
			sqlhija = """
			select count(*) from gixpartidasegresos where EmpresaID = %s
			""" % int(data[1:])
			cursor = r_cn.cursor()
			cursor.execute(str(sqlhija))
			rowscount = fetchone(cursor)[0]
			cursor.close()
			if rowscount:
				tree.SetItemHasChildren(item)
				tree.Expand(item)
			else:
				tree.SetItemHasChildren(item, 0)
			
		elif EsCentroDeCosto:
			
			tree.SetItemImage(item, self.fldridx, wx.TreeItemIcon_Normal)
			tree.SetItemImage(item, self.fldropenidx, wx.TreeItemIcon_Expanded)
			sqlhija = """
			select count(*) from gixpartidasegresos where CentroCostoID = %s
			""" % int(data[1:])
			cursor = r_cn.cursor()
			cursor.execute(str(sqlhija))
			rowscount = fetchone(cursor)[0]
			cursor.close()
			if rowscount:
				tree.SetItemHasChildren(item)
				tree.Expand(item)
			else:
				tree.SetItemHasChildren(item, 0)
			
		else:
			
			sql = """
			select Afectable from gixpartidasegresos where PartidaID = %s
			""" % int(data[1:])
			
			cursor = r_cn.cursor()
			cursor.execute( str(sql) )
			row = fetchone(cursor)
			cursor.close()
	
			if row[0]:
				tree.SetItemImage(item, self.fileidx, wx.TreeItemIcon_Normal)
				#tree.SetItemImage(item, self.filesel, wx.TreeItemIcon_Selected)
			else:
				tree.SetItemImage(item, self.fldridx, wx.TreeItemIcon_Normal)
				tree.SetItemImage(item, self.fldridx, wx.TreeItemIcon_Selected)
				tree.SetItemImage(item, self.fldropenidx, wx.TreeItemIcon_Expanded)
				tree.SetItemImage(item, self.fldropenidx, wx.TreeItemIcon_SelectedExpanded)
				sqlhija = """
				select count(*) from gixpartidasegresos where HijaDePartidaID = %s
				""" % int(data[1:])
				cursor = r_cn.cursor()
				cursor.execute(str(sqlhija))
				rowscount = fetchone(cursor)[0]
				cursor.close()
				if rowscount:
					tree.SetItemHasChildren(item)
					tree.Expand(item)
				else:
					tree.SetItemHasChildren(item, 0)
					
		return
	
	def ObtenCentroCosto(self, CentroCostoID):
		""" 
		Obtener de la base de datos la descripci�n del centro de costo
		"""
		sql = "select Descripcion from gixcentroscostos where CentroCostoID = '%s'" % CentroCostoID
		
		centrocosto = ""
		
		try:
			cursor = r_cn.cursor()
			cursor.execute(str(sql))
			row = fetchone( cursor )
			
			if row:
				centrocosto = "%s" % ( self.GetStringFromField(row[0]), ) 
				
		finally:
			
			cursor.close()
			
		return centrocosto
	
	def FillTree(self):
		""""Aqui se llenan los nodos de toda la estructura salvo subpartidas.
		Parece ser que los iconos asociados a un TreeItem conforme se van asignando via SetItemImage,
		los descendientes los siguen teniendo iguales a menos que se reasignen otros iconos a su nivel.
		"""
		
		wx.BeginBusyCursor()
		tree = self.tree
		tree.DeleteAllItems()
		
		isz = (16,16)
		il = wx.ImageList(16,16)
		self.fldridx     = il.Add(wx.ArtProvider.GetBitmap(wx.ART_FOLDER,      wx.ART_OTHER, isz))
		self.fldropenidx = il.Add(wx.ArtProvider.GetBitmap(wx.ART_FILE_OPEN,   wx.ART_OTHER, isz))
		self.fileidx     = il.Add(wx.ArtProvider.GetBitmap(wx.ART_NORMAL_FILE, wx.ART_OTHER, isz))
		self.filesel     = il.Add(wx.ArtProvider.GetBitmap(wx.ART_FIND,        wx.ART_OTHER, isz))
		tree.AssignImageList(il)
		root = tree.AddRoot("EMPRESAS")

		tree.SetItemImage(root, self.fldridx, wx.TreeItemIcon_Normal)
		tree.SetItemImage(root, self.fldropenidx, wx.TreeItemIcon_Expanded)
		
		tree.SetPyData(root, None)
		
		sql = """
		select e.EmpresaID, e.RazonSocial, c.CentroCostoID, c.Descripcion, p.PartidaID, p.ClavePartida,
		p.Descripcion, p.HijaDePartidaID, p.Afectable, p.naturaleza from gixpartidasegresos p
		join gixcentroscostos c on p.CentroCostoID = c.CentroCostoID and p.EmpresaID = c.EmpresaID
		join cont_Empresas e on p.EmpresaID = e.EmpresaID where p.HijaDePartidaID is null %s order by 2,4,7
		""" % self.filtronaturaleza
		
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		rows = fetchall(cursor)
		cursor.close()
		
		prevEmpresa = ""
		prevCentroCosto = ""
		
		if rows:
			
			for row in rows:
				
				laempresa = self.GetStringFromField(row[1])
				elcentrocosto = self.GetStringFromField(row[3])
				#lapartida = self.GetStringFromField(row[5]) + " " + self.GetStringFromField(row[6])
				lapartida = self.GetStringFromField(row[6])
				
				if laempresa != prevEmpresa:
					
					empresas = tree.AppendItem( root, "%s" % laempresa)
					#tree.SetItemBold(empresas)
					tree.SetItemTextColour(empresas, wx.BLUE)
					tree.SetPyData(empresas, "E%s" % row[0])
					tree.SetItemImage(empresas, self.fldridx, wx.TreeItemIcon_Normal)
					tree.SetItemImage(empresas, self.fldropenidx, wx.TreeItemIcon_Expanded)
					prevEmpresa = laempresa
					self.empresa = empresas
					
				if elcentrocosto != prevCentroCosto:
					
					centroscostos = tree.AppendItem( empresas, "%s" % elcentrocosto)
					tree.SetPyData(centroscostos, "T%s" % row[2])
					tree.SetItemImage(centroscostos, self.fldridx, wx.TreeItemIcon_Normal)
					tree.SetItemImage(centroscostos, self.fldropenidx, wx.TreeItemIcon_Expanded)
					prevCentroCosto = elcentrocosto
					
				partidas = tree.AppendItem(centroscostos, "%s" % lapartida)
				tree.SetPyData(partidas, "C%s" % str(row[4]))
				if row[4] == self.ultimo:
					self.partidamayor = partidas
				
				if row[8]:
					
					tree.SetItemImage(partidas, self.fileidx, wx.TreeItemIcon_Normal)
					#tree.SetItemImage(partidas, self.filesel, wx.TreeItemIcon_Selected)
					
				else:
					
					tree.SetItemImage(partidas, self.fldridx, wx.TreeItemIcon_Normal)
					tree.SetItemImage(partidas, self.fldridx, wx.TreeItemIcon_Selected)
					tree.SetItemImage(partidas, self.fldropenidx, wx.TreeItemIcon_Expanded)
					tree.SetItemImage(partidas, self.fldropenidx, wx.TreeItemIcon_SelectedExpanded)
					sqlhija = """
					select count(*) from gixpartidasegresos where HijaDePartidaID = %s
					""" % str(int(row[4]))
					cursor = r_cn.cursor()
					cursor.execute(str(sqlhija))
					rowscount = fetchone(cursor)[0]
					cursor.close()
					
					if rowscount:
						
						tree.SetItemHasChildren(partidas)
						
					else:
						
						tree.SetItemHasChildren(partidas, 0)
								
		wx.EndBusyCursor()
		
		item = tree.GetFirstVisibleItem()

		if item:
			tree.SelectItem(item)
			
		return

	def LimpiaColores(self):

		for id in self.controles_tipo_txt.itervalues():
			
			self.GetControl(id).SetBackgroundColour(wx.WHITE)
			self.GetControl(id).Refresh()
			
		self.GetControl(ID_CHECKBOXCATPAREGRAFECTABLE).SetBackgroundColour(wx.NullColour)
		self.GetControl(ID_CHECKBOXCATPAREGRAFECTABLE).Refresh()
		
		self.GetControl(ID_RADIOBUTTONCATPAREGRNATURALEZAINGRESO).SetBackgroundColour(wx.NullColour)
		self.GetControl(ID_RADIOBUTTONCATPAREGRNATURALEZAINGRESO).Refresh()
		self.GetControl(ID_RADIOBUTTONCATPAREGRNATURALEZAEGRESO).SetBackgroundColour(wx.NullColour)
		self.GetControl(ID_RADIOBUTTONCATPAREGRNATURALEZAEGRESO).Refresh()
		
		return
		
	def OnSelChanged(self,event):
		
		self.ValidarControles = False
		
		tree = self.tree
		item = event.GetItem()
		data = tree.GetPyData(item)

		if self.tb.GetToolEnabled(ID_TOOLSAVCATCTACON):
			if not self.VengoDeDelete and not self.VengoDeUpdate and not self.VengoDeAdd:
				self.NewFlag = False
				self.ValidarControles = True
				self.Text()
				self.ValidarControles = False
				if not self.NewFlag:
					if self.usuario in self.usuariosconsulta:
						self.UsuarioConsulta()
					else:
						if Mensajes().YesNo(self,u"Algunos datos han cambiado\n\n� Desea ud. grabarlos ?",u"Confirmaci�n"):
							self.VengoDelSelect = True
							if self.SaveRecord():
								data = self.dataprev
								item = self.dicNodeInfo['C'][6]
								tree.SelectItem(item)
								
							self.VengoDelSelect = False
					
				self.tb.EnableTool( ID_TOOLSAVCATCTACON, False)
				self.MenuSetter(ID_MENUGRABARTREE, False)
				self.GetControl(ID_BUTTONCATPAREGREMPRESA).Enable(False)
				self.EmpresaID = ''
				self.GetControl(ID_TEXTCATPAREGREMPRESA).SetLabel('')
				self.LimpiaColores()
		
		self.dicNodeInfo = {}      # donde se guarda lo seleccionado
		
		if data:

			self.EsCentroDeCosto = False
			self.EsEmpresa = False
			
			if data[0] in ("C", "S"):
			
				self.dataprev = data
				
				partidaid = int(data[1:])
			
				sql = """
				select p.ClavePartida, p.Descripcion, p.CentroCostoID, p.Afectable,
				c.Descripcion, p.EmpresaID, p.HijaDePartidaID, p.naturaleza
				from gixpartidasegresos p 
				join gixcentroscostos c on p.CentroCostoID = c.CentroCostoID and p.EmpresaID = c.EmpresaID
				where p.PartidaID = %s
				""" % partidaid
				
				cursor = r_cn.cursor()
				cursor.execute(str(sql))
				row = fetchone(cursor)
				cursor.close()
				
				if row[3]:
					self.tb.EnableTool(ID_TOOLXLSCATCTACON, True)
					self.MenuSetter(ID_MENUXLSTREE, True)         
					clavepartida = self.GetStringFromField(row[0])
					descripcion = self.GetStringFromField(row[1])
					if False:   # standby
						for metodo in self.suscriptions:
							metodo(cuentaid, clavecuenta, descripcion)
				else:
					self.tb.EnableTool(ID_TOOLXLSCATCTACON, False)
					self.MenuSetter(ID_MENUXLSTREE, False)
			
				self.GetControl(ID_NOTEBOOKCATPAREGRTAB1).Enable(True)
				
				self.GetControl(ID_TEXTCTRLCATPAREGRPARTIDA).SetValue(self.GetStringFromField(row[0]))
				self.GetControl(ID_TEXTCTRLCATPAREGRDESCRIPCION).SetValue(self.GetStringFromField(row[1]))
				self.GetControl(ID_TEXTCTRLCATPAREGRCENTROCOSTO).SetValue(str(row[2]))
				self.GetControl(ID_CATPAREGRCENTROCOSTO).SetLabel(self.GetStringFromField(row[4]))
				self.GetControl(ID_CHECKBOXCATPAREGRAFECTABLE).SetValue(row[3])
				naturaleza = str(row[7])
				if naturaleza == "I":
					self.GetControl(ID_RADIOBUTTONCATPAREGRNATURALEZAINGRESO).SetValue(True)
					self.GetControl(ID_RADIOBUTTONCATPAREGRNATURALEZAEGRESO).SetValue(False)
				else:
					self.GetControl(ID_RADIOBUTTONCATPAREGRNATURALEZAINGRESO).SetValue(False)
					self.GetControl(ID_RADIOBUTTONCATPAREGRNATURALEZAEGRESO).SetValue(True)
				
				self.PartidaEmpresaID = row[5]
				
				self.ValoresOriginales()
				
				self.dicNodeInfo['C'] = [int(data[1:]), row[5], row[3], row[2], row[1], row[0], item, row[6]]
				
				sql = """
				select top 1 saldoInicial + totalabonos - totalcargos
				from gixpartidasxperiodo where partidaid = %s order by partidaid, periodo desc
				""" % partidaid
				try:
					control = self.GetControl(ID_TEXTCTRLCATPAREGREGRESO)
					ctrltxt = self.GetControl(ID_TEXTCATPAREGREGRESO)
					cursor = r_cn.cursor()
					cursor.execute(str(sql))
					row = fetchone(cursor)
					cursor.close()
					if row:
						egreso = float(row[0])
						if naturaleza == "E":
							egreso *= -1
						if egreso < 0:
							amount = egreso * -1
							control.SetBackgroundColour(wx.Colour(255,0,0))
							control.SetForegroundColour(wx.Colour(255,255,255))
							control.SetValue(str(amount_and_cents_with_commas(amount).rjust(20)))
							ctrltxt.SetBackgroundColour(wx.Colour(255,0,0))
							ctrltxt.SetForegroundColour(wx.Colour(255,255,255))
							ctrltxt.SetLabel("(%s)" % str(c2p(amount).texto()))
						else:
							control.SetBackgroundColour(wx.Colour(153,255,153))
							control.SetForegroundColour(wx.Colour(0,0,0))
							control.SetValue(str(amount_and_cents_with_commas(egreso).rjust(20)))
							ctrltxt.SetBackgroundColour(wx.Colour(153,255,153))
							ctrltxt.SetForegroundColour(wx.Colour(0,0,0))
							ctrltxt.SetLabel("(%s)" % str(c2p(egreso).texto()))
					else:
						control.SetBackgroundColour(wx.Colour(153,255,153))
						control.SetForegroundColour(wx.Colour(0,0,0))
						ctrltxt.SetBackgroundColour(wx.Colour(153,255,153))
						ctrltxt.SetForegroundColour(wx.Colour(0,0,0))
						control.SetValue("")
						ctrltxt.SetLabel("")
				except:
					control.SetValue("")
					ctrltxt.SetLabel("")
				
				self.tb.EnableTool(ID_TOOLSAVCATCTACON, False)
				self.tb.EnableTool(ID_TOOLDELCATCTACON, True)
				self.tb.EnableTool(ID_TOOLNEWCATCTACON, True)
				self.MenuSetter(ID_MENUGRABARTREE, False)
				self.MenuSetter(ID_MENUELIMINARTREE, True)
				self.MenuSetter(ID_MENUNUEVOTREE, True)         

			elif data[0] in ("T"):
		
				self.tb.EnableTool(ID_TOOLXLSCATCTACON, False)
				self.MenuSetter(ID_MENUXLSTREE, False)
				self.EsCentroDeCosto = True
				self.CentroCostoID = int(data[1:])
				self.ItemCentroCosto = item
				self.tb.EnableTool(ID_TOOLNEWCATCTACON, True)
				self.MenuSetter(ID_MENUNUEVOTREE, True)         
				partidamadre = tree.GetItemParent(item)
				valor = tree.GetPyData(partidamadre)
				self.PartidaEmpresaID = int(valor[1:])
				self.LimpiaDetalle()
				
			else:
				
				self.tb.EnableTool(ID_TOOLXLSCATCTACON, False)
				self.MenuSetter(ID_MENUXLSTREE, False)
				self.EsEmpresa = True
				self.PartidaEmpresaID = int(data[1:])
				self.ItemEmpresa = item
				self.tb.EnableTool(ID_TOOLNEWCATCTACON, True)
				self.MenuSetter(ID_MENUNUEVOTREE, True)         
				self.LimpiaDetalle()
				
		else:
			
			self.tb.EnableTool(ID_TOOLXLSCATCTACON, False)
			self.MenuSetter(ID_MENUXLSTREE, False)
			self.tb.EnableTool(ID_TOOLNEWCATCTACON, False)
			self.MenuSetter(ID_MENUNUEVOTREE, False)                
			self.LimpiaDetalle()
			
		self.ValidarControles = True
		
		return
	
	def ValoresOriginales(self):

		self.originales[ID_TEXTCTRLCATPAREGRPARTIDA] = self.GetControl(ID_TEXTCTRLCATPAREGRPARTIDA).GetValue()
		self.originales[ID_TEXTCTRLCATPAREGRDESCRIPCION] = self.GetControl(ID_TEXTCTRLCATPAREGRDESCRIPCION).GetValue()
		self.originales[ID_TEXTCTRLCATPAREGRCENTROCOSTO] = self.GetControl(ID_TEXTCTRLCATPAREGRCENTROCOSTO).GetValue()
		self.originales[ID_CHECKBOXCATPAREGRAFECTABLE] = self.GetControl(ID_CHECKBOXCATPAREGRAFECTABLE).GetValue()
		self.originales[ID_RADIOBUTTONCATPAREGRNATURALEZAINGRESO] = self.GetControl(ID_RADIOBUTTONCATPAREGRNATURALEZAINGRESO).GetValue()
		self.originales[ID_RADIOBUTTONCATPAREGRNATURALEZAEGRESO] = self.GetControl(ID_RADIOBUTTONCATPAREGRNATURALEZAEGRESO).GetValue()
		
		return
		
	def LimpiaDetalle(self, NuevoRegistro = False):
		
		self.GetControl(ID_TEXTCTRLCATPAREGRPARTIDA).SetValue("")
		self.GetControl(ID_TEXTCTRLCATPAREGRDESCRIPCION).SetValue("")
		self.GetControl(ID_TEXTCTRLCATPAREGREGRESO).SetValue("")
		self.GetControl(ID_TEXTCATPAREGREGRESO).SetLabel("")
		self.GetControl(ID_TEXTCTRLCATPAREGRCENTROCOSTO).SetValue("")
		self.GetControl(ID_CHECKBOXCATPAREGRAFECTABLE).SetValue(True)
		self.GetControl(ID_RADIOBUTTONCATPAREGRNATURALEZAINGRESO).SetValue(False)
		self.GetControl(ID_RADIOBUTTONCATPAREGRNATURALEZAEGRESO).SetValue(True)
		
		self.tb.EnableTool(ID_TOOLDELCATCTACON, False)
		self.MenuSetter(ID_MENUELIMINARTREE, False)
			
		if NuevoRegistro:
			
			self.tb.EnableTool(ID_TOOLSAVCATCTACON, True)
			self.tb.EnableTool(ID_TOOLNEWCATCTACON, False)
			self.MenuSetter(ID_MENUGRABARTREE, True)
			self.MenuSetter(ID_MENUNUEVOTREE, False)                
			
		else:
			
			self.GetControl(ID_CATPAREGRCENTROCOSTO).SetLabel("")
			self.tb.EnableTool(ID_TOOLSAVCATCTACON, False)
			self.MenuSetter(ID_MENUGRABARTREE, False)
			self.GetControl(ID_NOTEBOOKCATPAREGRTAB1).Enable(False)
			
		return
	
	def OnExpanding(self,event):
		
		tree = self.tree
		item = event.GetItem()
		valor = tree.GetPyData(item)
		
		if valor:
			
			if valor[0] in ("C", "S"):
				
				if not self.SubpartidasDict.has_key(str(valor)):
					
					self.CargaDict(item, valor)
					
			elif valor[0] in ("T"):
				
				self.CentroCostoID = int(valor[1:])
				
			else:
				
				self.PartidaEmpresaID = int(valor[1:])

		return
	
	def CargaDict(self, item, valor):
		
		wx.BeginBusyCursor()
		
		tree = self.tree
		self.SubpartidasDict[str(valor)] = True
		
		sql = """
		select PartidaID, ClavePartida, Descripcion, HijaDePartidaID, Afectable
		from gixpartidasegresos where HijaDePartidaID = %s order by 3
		""" % int(valor[1:])
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		rows = fetchall(cursor)
		cursor.close()
		
		if rows:
			
			for row in rows:
				
				#lapartida = self.GetStringFromField(row[1]) + " " + self.GetStringFromField(row[2])
				lapartida = self.GetStringFromField(row[2])
				
				subpartidas = tree.AppendItem(item, "%s" % lapartida)
				tree.SetPyData(subpartidas, "S%s" % row[0])
				if not self.VengoDelSelect:
					tree.SelectItem(subpartidas)
				
				if row[4]:
					tree.SetItemImage(subpartidas, self.fileidx, wx.TreeItemIcon_Normal)
					#tree.SetItemImage(subcuentas, self.filesel, wx.TreeItemIcon_Selected)
				else:
					tree.SetItemImage(subpartidas, self.fldridx, wx.TreeItemIcon_Normal)
					tree.SetItemImage(subpartidas, self.fldridx, wx.TreeItemIcon_Selected)
					tree.SetItemImage(subpartidas, self.fldropenidx, wx.TreeItemIcon_Expanded)
					tree.SetItemImage(subpartidas, self.fldropenidx, wx.TreeItemIcon_SelectedExpanded)
					sqlhija = """
					select count(*) from gixpartidasegresos where HijaDePartidaID = %s
					""" % str(int(row[0]))
					cursor = r_cn.cursor()
					cursor.execute(str(sqlhija))
					rowscount = fetchone(cursor)[0]
					cursor.close()
					if rowscount:
						tree.SetItemHasChildren(subpartidas)
					else:
						tree.SetItemHasChildren(subpartidas, 0)
						
		wx.EndBusyCursor()
		
		return

	def Suscribe(self, metodo, unsuscribe = False):

		try:

			if unsuscribe:
				
				self.suscriptions.remove(metodo)
				
			else:
				
				self.suscriptions.append(metodo)
				
		except:
			
			pass
		
		return
	
class GixProductos(wx.Frame, GixBase):
	
	coloreable = "ID_TEXTCTRLPRODUCTOSPRODUCTO"
	coloreableeditable = True
	
	ctt = [coloreable, "ID_TEXTCTRLPRODUCTOSDESCRIPCION", "ID_TEXTCTRLPRODUCTOSCATEGORIA", "ID_TEXTCTRLPRODUCTOSMARCA",
		"ID_TEXTCTRLPRODUCTOSMODELO", "ID_TEXTCTRLPRODUCTOSUNIDAD", "ID_TEXTCTRLPRODUCTOSBARRA", "ID_TEXTCTRLPRODUCTOSEXISTENCIA"]
	activecontrolafternewrecord = ID_TEXTCTRLPRODUCTOSPRODUCTO
	listbox = ID_LISTBOXPRODUCTOS
	dbtable  = "gixproductos" #esto permite probar con tablas alternas iguales ( mismos campos distinto nombre )
	
	controles_tipo_txt = dict(zip(ctt,map(eval,ctt)))
	FiltroCategoria = None
	
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize, style = wx.DEFAULT_FRAME_STYLE ):
		
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		
		# Se agrego este bloque para permitir seleccionar optativamente una categoria y no tener que ver todos los productos
		if Mensajes().YesNo(self,u"� Desea trabajar con una sola categor�a ?", u"Atenci�n"):
			lCatNombres = []
			lCats = []
			sql = """
			select idcategoria, idcategoria + ' - ' + descripcion_ampliada from gixcategorias
			where idcategoria in ( select distinct categoria from gixproductos)
			order by descripcion_ampliada
			"""
			cursor = r_cn.cursor()
			cursor.execute( sql )
			while True:
				row = fetchone(cursor)
				if row is None:
					break
				lCats.append(str(row[0]))
				lCatNombres.append(self.GetStringFromField(row[1]) + "                                        ")
			cursor.close()
			if len(lCats) > 0:
				cual = wx.GetSingleChoiceIndex( "Elija", u"Categor�a", lCatNombres)
				if cual > -1:
					self.FiltroCategoria = lCats[cual]

		self.InitialFlags()
		self.InitialStuff(self, ProductosFuncion)       
		self.InitialBindings()
		
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONPRODUCTOSBUSCAR,self.OnBuscarCategoria)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONPRODUCTOSBUSCARUNIDAD,self.OnBuscarUnidad)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONPRODUCTOSCALCULAREXISTENCIA,self.OnCalcularExistencia)
			
		return
	
	#@logger
	def OnBuscarCategoria(self,event):
		
		query = "select idcategoria, idcategoria + ' - ' + descripcion_ampliada from gixcategorias order by descripcion_ampliada" 
		self.RelatedFieldSearch(u"B�squeda de Categor�a", query, ID_TEXTCTRLPRODUCTOSCATEGORIA)
		
	def OnBuscarUnidad(self,event):
		
		query = "select idunidad, idunidad + '   ' from gixunidades order by idunidad" 
		self.RelatedFieldSearch(u"B�squeda de Unidad de Compra", query, ID_TEXTCTRLPRODUCTOSUNIDAD)
		
	def OnCalcularExistencia(self, event):
		
		if Mensajes().YesNo(self,u"� Desea realmente calcular la existencia del producto ?", u"Confirmaci�n") :
			
			wx.BeginBusyCursor()
			producto = self.GetControl(ID_TEXTCTRLPRODUCTOSPRODUCTO).GetValue()
			existencia = 0
			
			sql = """
			select cantidad from gixentradasinvdet where id_producto = '%s'
			""" %  producto
			
			cu = r_cn.cursor()
			cu.execute(str(sql))
			rows = fetchall(cu)
			
			if rows:
				for row in rows:
					existencia = float(existencia) + float(str(row[0]))
				
			self.GetControl(ID_TEXTCTRLPRODUCTOSEXISTENCIA).SetValue(str(existencia))
				
			sql = """
			select idrequisicion, cantidad, unidad from gixrequisiciones
			where id_producto = '%s' and fecha_alta > '2012/04/17'
			""" % producto
			
			cu.execute(str(sql))
			rows = fetchall(cu)
			
			if rows:
				for row in rows:
					idrequisicion, cantidad, unidad = row
				
					sql = """
					select id_movto from gixmovimientos_estatus where idrequisicion = %s and idestatus = '14'
					""" % idrequisicion
		
					cu.execute(str(sql))
					row = fetchone(cu)
					
					if row is None:
						cu.close()
						self.SaveRecord()
						wx.EndBusyCursor()      
						Mensajes().Info(self, u"� El calculo de la existencia a finalizado !", u"Aviso")
						return
					
					sql = """
					select factorconversion from gixunidadesfactores where id_producto = '%s' and unidadrequisicion = '%s'
					""" % (producto, unidad)
					
					cu.execute(str(sql))
					row = fetchone(cu)
					
					if row is None:
						cu.close()
						wx.EndBusyCursor()      
						Mensajes().Info(self, u" Se ha presentado una inconsistencia:\n%s\nNo existe el factor de conversi�n de la unidad del producto." % sql, u"Aviso")
						return
					
					factorconversion = row[0]
					
					existencia = existencia - (float(cantidad) / float(factorconversion))
					
					self.GetControl(ID_TEXTCTRLPRODUCTOSEXISTENCIA).SetValue(str(existencia))

			cu.close()
			self.SaveRecord()
			wx.EndBusyCursor()      
			Mensajes().Info(self, u"� El calculo de la existencia a finalizado !", u"Aviso")
		
	def FillListBox(self, display = 'first'):
		
		wx.BeginBusyCursor()
		lbox = self.GetControl(self.listbox)
		lbox.Clear()
		if self.FiltroCategoria:
			sql = "SELECT id_producto FROM %s where categoria = '%s' order by id_producto" % (self.dbtable, self.FiltroCategoria) 
		else:
			
			sql = "SELECT id_producto FROM %s order by id_producto" % self.dbtable 
		
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		
		for row in rows:
			dato = str(row[0])
			lbox.Append(dato,row[0])

		cu.close()
		if display == 'first':
			self.GetLFRecord("min")
		elif display == 'last':
			self.GetLFRecord("max")
			
		wx.EndBusyCursor()      
		
	def OnPrint(self,event):
		tabla = self.dbtable
		meta = (( 14, u"Id Producto") , (100, u"Descripci�n"), (100,u"Categor�a"), (100,u"Marca"), (100,u"M�delo"), (100,u"Unidad"), (100,u"Existencia"))
		
		if self.FiltroCategoria:
			query = """
			select id_producto, descripcion, categoria, marca, modelo, unidad, existencia
			from gixproductos where categoria = '%s' order by id_producto
			""" % self.FiltroCategoria
		else:
			query = """
			select id_producto, descripcion, categoria, marca, modelo, unidad, existencia
			from gixproductos order by id_producto
			"""
			
		titulo = u"Consulta de Productos" 
		self.DisplayGrid(tabla, meta, query, titulo)
		
	def OnSearch(self, event):
		pass
		
	def GetLFRecord(self, what):

		lbox = self.GetControl(self.listbox)
		if self.FiltroCategoria:
			sql = "SELECT %s(id_producto) from %s where categoria = '%s'" % (what, self.dbtable, self.FiltroCategoria) 
		else:
			sql = "SELECT %s(id_producto) from %s" % (what, self.dbtable) 
	
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		producto = ""
		row = fetchone(cursor)
		if row is not None:
		
			producto = row[0]
					
		cursor.close()
		self.GetRecord(producto)

		self.ListBoxReposition(what)
		
	def OnText(self,event):
		
		self.controlactual = event.GetId()
		self.Text()
	
	def Text(self, VengodelaLista = False):

		for id in ( ID_TEXTCTRLPRODUCTOSPRODUCTO, ID_TEXTCTRLPRODUCTOSDESCRIPCION, ID_TEXTCTRLPRODUCTOSCATEGORIA, ID_TEXTCTRLPRODUCTOSMARCA,
				ID_TEXTCTRLPRODUCTOSMODELO, ID_TEXTCTRLPRODUCTOSUNIDAD, ID_TEXTCTRLPRODUCTOSBARRA):
			control = self.GetControl(id)
			valor = control.GetValue().strip()
			if valor == "" and not self.FillingARecord and not self.NewFlag:
				self.NewFlag = True
				if not VengodelaLista:
					Mensajes().Info(self, u"� No debe quedar ning�n dato en blanco !", u"Atenci�n")
					return
		
		self.EndOfOnText(self.controlactual)    
		
	def SaveRecord(self):
		
		producto = self.GetControl(ID_TEXTCTRLPRODUCTOSPRODUCTO).GetValue()
		
		if not self.tb.GetToolEnabled(ID_TOOLNEW):

			bienGrabado = self.AddRecord()
			lbx = self.GetControl(ID_LISTBOXPRODUCTOS)
			lbx.Clear()
			
			self.FillListBox("last") # se va al final de la lista aunque la alta haya sido de un puesto intermedio
			producto = self.GetControl(ID_TEXTCTRLPRODUCTOSPRODUCTO).GetValue()
		
		else:

			bienGrabado = self.UpdateRecord()
			
		if bienGrabado:
			
			self.tb.EnableTool( ID_TOOLSAV, False)
			self.tb.EnableTool( ID_TOOLDEL, True)
			self.tb.EnableTool( ID_TOOLNEW, True)
			
			self.MenuSetter(ID_MENUGRABAR, False)
			self.MenuSetter(ID_MENUELIMINAR, True)
			self.MenuSetter(ID_MENUNUEVO, True)
			
			self.GetRecord("%s" % ( producto ))
			
			
		else:

			Mensajes().Info(self,u"� El Registro no fue grabado !", u"Atenci�n")
	
	def UpdateRecord( self ):
		
		producto = self.GetControl(ID_TEXTCTRLPRODUCTOSPRODUCTO).GetValue()
		descripcion = self.GetControl(ID_TEXTCTRLPRODUCTOSDESCRIPCION).GetValue()
		categoria = self.GetControl(ID_TEXTCTRLPRODUCTOSCATEGORIA).GetValue()
		marca = self.GetControl(ID_TEXTCTRLPRODUCTOSMARCA).GetValue()
		modelo = self.GetControl(ID_TEXTCTRLPRODUCTOSMODELO).GetValue()
		unidad = self.GetControl(ID_TEXTCTRLPRODUCTOSUNIDAD).GetValue()
		barra = self.GetControl(ID_TEXTCTRLPRODUCTOSBARRA).GetValue()
		existencia = self.GetControl(ID_TEXTCTRLPRODUCTOSEXISTENCIA).GetValue()
		
		setListForQuery = """
		descripcion = '%s' , categoria = '%s' , marca = '%s' , modelo = '%s' , unidad = '%s' , barra = '%s' , existencia = %s
		""" % ( descripcion, categoria, marca, modelo, unidad, barra, existencia)
		
		sql = "update %s set  %s " \
				"where id_producto = '%s' " \
			% ( self.dbtable, setListForQuery, producto )
		
		

		return  self.QueryUpdateRecord(sql)
	
	def AddRecord(self):
		
		producto = self.GetControl(ID_TEXTCTRLPRODUCTOSPRODUCTO).GetValue()
		descripcion = self.GetControl(ID_TEXTCTRLPRODUCTOSDESCRIPCION).GetValue()
		categoria = self.GetControl(ID_TEXTCTRLPRODUCTOSCATEGORIA).GetValue()
		marca = self.GetControl(ID_TEXTCTRLPRODUCTOSMARCA).GetValue()
		modelo = self.GetControl(ID_TEXTCTRLPRODUCTOSMODELO).GetValue()
		unidad = self.GetControl(ID_TEXTCTRLPRODUCTOSUNIDAD).GetValue()
		barra = self.GetControl(ID_TEXTCTRLPRODUCTOSBARRA).GetValue()
		#existencia = self.GetControl(ID_TEXTCTRLPRODUCTOSEXISTENCIA).GetValue()
		existencia = 0
		
		sqlFields = """ 
		id_producto, descripcion, categoria, marca, modelo, unidad, barra, existencia
		"""
		sqlValues = "'%s','%s','%s','%s','%s','%s','%s',%s" % \
			( producto, descripcion, categoria, marca, modelo, unidad, barra, float(existencia) )
		
		sql = "insert into %s ( %s ) values ( %s ) " % ( self.dbtable, sqlFields, sqlValues ) 
		
		#return self.QueryAddRecord(sql)

		queTal =  self.QueryUpdateRecord(sql)
		
		return queTal
	
	def DeleteRecord(self):
		producto = self.GetControl(ID_TEXTCTRLPRODUCTOSPRODUCTO).GetValue().strip()

		if producto  == "":
			
			Mensajes().Info(self, u"No se ha especificado el producto", u"Atenci�n")
			return False
		
		
		
		sql = "delete from %s where id_producto = '%s'" % ( self.dbtable, producto ) 

		try:
			cursor = r_cn.cursor()
			cursor.execute( str(sql) )
			cursor.close()
		
			r_cn.commit()
			return True
		
		except:
			r_cn.rollback()
			Mensajes().Info(self,u"Sucedi� algo que impidi� eliminar este registro.\nQuiz� se deba a que hay otra informaci�n\nque depende de este registro\n%s" % sql, u"Atenci�n")
			return False
	
	def GetAnotherRecord(self, comparison):

		if comparison == "<":
			asc_or_desc = "DESC"
		else:
			asc_or_desc = "ASC"
		
		lbox = self.GetControl(self.listbox)
		lboxIndex = lbox.GetSelection()
		producto = lbox.GetClientData(lboxIndex)
		if self.FiltroCategoria:
			sql = """
			select top 1 id_producto from %s where id_producto %s '%s' and categoria = '%s' order by id_producto %s
			""" % (self.dbtable, comparison,producto,self.FiltroCategoria, asc_or_desc)
		else:
			sql = "select top 1 id_producto from %s where id_producto %s '%s' order by id_producto %s" % (self.dbtable, comparison,producto,asc_or_desc)
	
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		prod = ""
		if row is not None:
			prod = str(row[0])
					
		cursor.close()
		if prod <> "":
		
			if comparison == ">":
				newlboxIndex = lboxIndex + 1
			else:
				newlboxIndex = lboxIndex - 1
				
			
			lbox.SetSelection( newlboxIndex, True)
			self.GetRecord(prod)
		
		return prod
	
	def GetRecord(self, record):
		
		lbox = self.GetControl(self.listbox)
		
		
		self.FillingARecord = True
		self.LimpiaControles()
		self.SetColoreable(False)

		for v in self.controles_tipo_txt.itervalues():
			
			self.originales[ v ] = None
		
		producto = str(record)
		self.GetControl(ID_TEXTCTRLPRODUCTOSPRODUCTO).SetValue( producto )
		
		
		
		sql = "select descripcion, categoria, marca, modelo, unidad, barra, existencia from %s where id_producto = '%s'" % ( self.dbtable, producto )
		
		
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone( cursor )
		
		self.GetControl( ID_TEXTCTRLPRODUCTOSDESCRIPCION).SetValue(self.GetStringFromField(row[0]))
		self.GetControl( ID_TEXTCTRLPRODUCTOSCATEGORIA).SetValue(self.GetStringFromField(row[1]))
		self.GetControl( ID_TEXTCTRLPRODUCTOSMARCA).SetValue(self.GetStringFromField(row[2]))
		self.GetControl( ID_TEXTCTRLPRODUCTOSMODELO).SetValue(self.GetStringFromField(row[3]))
		self.GetControl( ID_TEXTCTRLPRODUCTOSUNIDAD).SetValue(self.GetStringFromField(row[4]))
		self.GetControl( ID_TEXTCTRLPRODUCTOSBARRA).SetValue(self.GetStringFromField(row[5]))
		self.GetControl( ID_TEXTCTRLPRODUCTOSEXISTENCIA).SetValue(str(row[6]))
		
				
				
		self.originales[ID_TEXTCTRLPRODUCTOSDESCRIPCION] = self.GetControl(ID_TEXTCTRLPRODUCTOSDESCRIPCION).GetValue()  
		self.originales[ID_TEXTCTRLPRODUCTOSCATEGORIA] = self.GetControl(ID_TEXTCTRLPRODUCTOSCATEGORIA).GetValue()      
		self.originales[ID_TEXTCTRLPRODUCTOSMARCA] = self.GetControl(ID_TEXTCTRLPRODUCTOSMARCA).GetValue()      
		self.originales[ID_TEXTCTRLPRODUCTOSMODELO] = self.GetControl(ID_TEXTCTRLPRODUCTOSMODELO).GetValue()    
		self.originales[ID_TEXTCTRLPRODUCTOSUNIDAD] = self.GetControl(ID_TEXTCTRLPRODUCTOSUNIDAD).GetValue()    
		self.originales[ID_TEXTCTRLPRODUCTOSBARRA] = self.GetControl(ID_TEXTCTRLPRODUCTOSBARRA).GetValue()      
		self.originales[ID_TEXTCTRLPRODUCTOSEXISTENCIA] = self.GetControl(ID_TEXTCTRLPRODUCTOSEXISTENCIA).GetValue()
		
		
		
		self.FillingARecord = False
		cursor.close()
		
		
		self.tb.EnableTool(ID_TOOLSAV,False)
		self.tb.EnableTool(ID_TOOLDEL, True)
		self.tb.EnableTool(ID_TOOLNEW,True)
		self.MenuSetter(ID_MENUGRABAR, False)
		self.MenuSetter(ID_MENUELIMINAR, True)
		self.MenuSetter(ID_MENUNUEVO, True)             
		
		return True

class GixUnidadesFactores(wx.Frame, GixBase):
	
	coloreable = "ID_TEXTCTRLFACTORPRODUCTO"
	coloreableeditable = True
	
	ctt = [coloreable,"ID_TEXTCTRLFACTORUNIDAD","ID_TEXTCTRLFACTORCONVERSION"]
	activecontrolafternewrecord = ID_TEXTCTRLFACTORPRODUCTO
	listbox = ID_LISTBOXFACTORCONVERSION
	dbtable  = "gixunidadesfactores" #esto permite probar con tablas alternas iguales ( mismos campos distinto nombre )
	
	controles_tipo_txt = dict(zip(ctt,map(eval,ctt)))
	
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize, style = wx.DEFAULT_FRAME_STYLE ):
		
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		
		self.InitialFlags(datointernoynombre = True)
		self.InitialStuff(self, UnidadesFactoresFunc)   
		self.InitialBindings()

		wx.EVT_BUTTON(self, ID_FACTORBUSCARPRODUCTO,self.BuscarProducto)
		wx.EVT_BUTTON(self, ID_FACTORBUSCARUNIDAD,self.BuscarUnidad)
		
	def BuscarProducto(self,event):
		
		query = "select id_producto, id_producto + ' - ' + descripcion from gixproductos order by descripcion" 
		self.RelatedFieldSearch(u"B�squeda del Producto", query, ID_TEXTCTRLFACTORPRODUCTO)
		
	def BuscarUnidad(self,event):
		
		query = "select idunidad, idunidad from gixunidades order by idunidad" 
		self.RelatedFieldSearch(u"B�squeda de Unidad para Requisici�n", query, ID_TEXTCTRLFACTORUNIDAD)
		
	def FillListBox(self, display = 'first'):
		
		wx.BeginBusyCursor()
		lbox = self.GetControl(ID_LISTBOXFACTORCONVERSION)
		lbox.Clear()
		sql = "SELECT id_producto, unidadrequisicion FROM %s order by id_producto" % self.dbtable 
		
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		
		for row in rows:
			dato = str(row[0]) + '---' + str(row[1])
			lbox.Append(dato, row[0])

		cu.close()
		if display == 'first':
			self.GetLFRecord("min")
		elif display == 'last':
			self.GetLFRecord("max")
			
		wx.EndBusyCursor()
		
	def OnPrint(self,event):
		
		tabla = self.dbtable
		meta = (( 200, "Id Producto") , (200, u"Unidad para Requisici�n"), (150,u"Factor de conversi�n"))
		query = "select id_producto, unidadrequisicion, factorconversion from gixunidadesfactores order by id_producto"
		
		titulo = u"Consulta de Factores de Conversi�n para Requisiciones " 
		self.DisplayGrid(tabla, meta, query, titulo)
		
	def OnSearch(self, event):
		
		pass

	def GetLFRecord(self, what):

		lbox = self.GetControl(self.listbox)
		
		sql = "SELECT %s(id_producto + '---' + unidadrequisicion) from %s" % (what, self.dbtable) 
	
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		nombre = ""
		row = fetchone(cursor)
		if row is not None:
		
			nombre = row[0]
					
		cursor.close()
		
		producto, unidad = str(nombre).split('---')
		self.GetRecord(producto, nombre)
		
		self.ListBoxReposition(what)
		
	def OnText(self, event):

		self.controlactual = event.GetId()
		self.Text()

	def Text(self, VengodelaLista = False):

		for id in (ID_TEXTCTRLFACTORPRODUCTO, ID_TEXTCTRLFACTORUNIDAD, ID_TEXTCTRLFACTORCONVERSION):
			
			control = self.GetControl(id)
		
			if id == ID_TEXTCTRLFACTORPRODUCTO:
				producto = control.GetValue().strip()
				if producto == "" and not self.FillingARecord and not self.NewFlag:
					self.NewFlag = True
					if not VengodelaLista:
						Mensajes().Info(self, u"� El producto no debe quedar en blanco !", u"Atenci�n")
						return
				elif producto !="":
					descripcion, unidad = self.ObtenDescripcion(producto)
					if descripcion == "":
						Mensajes().Info(self, u"� El producto no existe !", u"Atenci�n")
						return
					if unidad == "":
						Mensajes().Info(self, u"� La unidad de compra no existe !", u"Atenci�n")
						return
					self.GetControl(ID_FACTORPRODUCTODESCRIPCION).SetLabel(descripcion)
					self.GetControl(ID_FACTORPRODUCTOUNIDAD).SetLabel("Unidad de compra: " + unidad)
				
			if id == ID_TEXTCTRLFACTORUNIDAD:
				unidadreq = control.GetValue().strip()
				if unidadreq != "":
					unidadfactor = self.ObtenUnidad(unidadreq)
					if unidadfactor == "":
						Mensajes().Info(self, u"� La unidad para requisici�n no existe !", u"Atenci�n")
						return
				elif not self.FillingARecord and not self.NewFlag:
					self.NewFlag = True
					if not VengodelaLista:
						Mensajes().Info(self, u"�  La unidad para requisici�n no debe quedar en blanco !", u"Atenci�n")
						return
				
			if id == ID_TEXTCTRLFACTORCONVERSION:
				factorconversion = control.GetValue().strip()
				if factorconversion != "":
					if not factorconversion.isdigit():
						Mensajes().Info(self, u"� El factor de conversi�n debe ser num�rico !", u"Atenci�n")
						return
				elif not self.FillingARecord and not self.NewFlag:
					self.NewFlag = True
					if not VengodelaLista:
						Mensajes().Info(self, u"� El factor de conversi�n no debe quedar en blanco !", u"Atenci�n")
						return
		
		self.EndOfOnText(self.controlactual)            

	def ObtenDescripcion(self, producto):
		
		cursor = r_cn.cursor()
		sql = """
		select descripcion, unidad from gixproductos where id_producto = '%s'
		""" % producto
		descripcion = ""
		unidad = ""
		cursor.execute(str(sql))
		row = fetchone(cursor)
		if row:
			descripcion= self.GetStringFromField(row[0])
			unidad = self.GetStringFromField(row[1])
		cursor.close()
		return (descripcion, unidad)
		
	def ObtenUnidad(self, unidad):
		
		cursor = r_cn.cursor()
		sql = """
		select idunidad from gixunidades where idunidad = '%s'
		""" % unidad
		unidad = ""
		cursor.execute(str(sql))
		row = fetchone(cursor)
		if row:
			unidad = self.GetStringFromField(row[0])
		cursor.close()
		return unidad
	
	def SaveRecord(self):
		
		producto = self.GetControl(ID_TEXTCTRLFACTORPRODUCTO).GetValue()
		nombre = producto + '---' + self.GetControl(ID_TEXTCTRLFACTORUNIDAD).GetValue()

		if not self.tb.GetToolEnabled(ID_TOOLNEW):

			bienGrabado = self.AddRecord()
			lbx = self.GetControl(ID_LISTBOXFACTORCONVERSION)
			lbx.Clear()
			
			self.FillListBox("last") # se va al final de la lista aunque la alta haya sido de un puesto intermedio
			producto = self.GetControl(ID_TEXTCTRLFACTORPRODUCTO).GetValue()
			nombre = producto + '---' + self.GetControl(ID_TEXTCTRLFACTORUNIDAD).GetValue()
		
		else:

			bienGrabado = self.UpdateRecord()
			lbox = self.GetControl(self.listbox)
			lboxIndex = lbox.GetSelection()
			self.FillListBox()
			lbox.SetSelection( lboxIndex, True)
			
		if bienGrabado:
			
			self.tb.EnableTool( ID_TOOLSAV, False)
			self.tb.EnableTool( ID_TOOLDEL, True)
			self.tb.EnableTool( ID_TOOLNEW, True)
			
			self.MenuSetter(ID_MENUGRABAR, False)
			self.MenuSetter(ID_MENUELIMINAR, True)
			self.MenuSetter(ID_MENUNUEVO, True)
			
			self.GetRecord(producto, nombre)
			#self.GetRecord("%s, %s" % ( producto, nombre ))
			
		else:

			Mensajes().Info(self,u"� El Registro no fue grabado !", u"Atenci�n")

	def UpdateRecord( self ):
		
		producto = self.GetControl( ID_TEXTCTRLFACTORPRODUCTO).GetValue()
		unidadrequisicion = self.GetControl( ID_TEXTCTRLFACTORUNIDAD).GetValue()
		factorconversion = self.GetControl( ID_TEXTCTRLFACTORCONVERSION).GetValue()
		unidadanterior = self.originales[ID_TEXTCTRLFACTORUNIDAD]
		
		setListForQuery = """
		id_producto = '%s' , unidadrequisicion = '%s' , factorconversion = %s
		""" % ( producto, unidadrequisicion, factorconversion )
		
		sql = "update %s set  %s " \
				"where id_producto = '%s' and unidadrequisicion = '%s'" \
			% ( self.dbtable, setListForQuery, producto, unidadanterior )
		
		return self.QueryUpdateRecord(sql)
			
	def AddRecord( self ):
		
		producto = self.GetControl( ID_TEXTCTRLFACTORPRODUCTO).GetValue()
		unidadrequisicion = self.GetControl( ID_TEXTCTRLFACTORUNIDAD).GetValue()
		factorconversion = self.GetControl( ID_TEXTCTRLFACTORCONVERSION).GetValue()
		
		sqlFields = """ 
		id_producto, unidadrequisicion, factorconversion
		"""
		sqlValues = "'%s', '%s', %s" % \
					(  producto, unidadrequisicion, factorconversion )
		
		sql = "insert into %s ( %s ) values ( %s ) " % ( self.dbtable, sqlFields, sqlValues ) 
		
		#return self.QueryAddRecord(sql)
		return self.QueryUpdateRecord(sql)
	
	def OnDeleteRecord( self, event):

		if Mensajes().YesNo(self,u"� Desea realmente eliminar este registro ?", u"Confirmaci�n") :

			if self.DeleteRecord():

				lbx = self.GetControl(ID_LISTBOXFACTORCONVERSION)
				pos = lbx.GetSelection()
				
				self.MoveOneStep("PREVIOUS")
				lbx.Delete(pos)
				Mensajes().Info(self,u"� Registro Eliminado !",u"Atenci�n")
				#self.LimpiaControles()
				self.tb.EnableTool( ID_TOOLSAV, False)
				self.tb.EnableTool( ID_TOOLDEL, True)
				self.tb.EnableTool( ID_TOOLNEW, True)
				self.MenuSetter(ID_MENUGRABAR, False)
				self.MenuSetter(ID_MENUELIMINAR, True)
				self.MenuSetter(ID_MENUNUEVO, True)
				
	def DeleteRecord(self):

		producto = self.GetControl(ID_TEXTCTRLFACTORPRODUCTO).GetValue().strip()
		unidad = self.GetControl(ID_TEXTCTRLFACTORUNIDAD).GetValue().strip()
		
		if producto  == "":
			Mensajes().Info(self, u"No se ha especificado el producto", u"Atenci�n")
			return False
		
		if unidad  == "":
			Mensajes().Info(self, u"No se ha especificado la unidad", u"Atenci�n")
			return False
		
		sql = "delete from %s where id_producto = '%s' and unidadrequisicion = '%s'" % ( self.dbtable, producto, unidad ) 

		try:
			cursor = r_cn.cursor()
			cursor.execute( str(sql) )
			cursor.close()
		
			r_cn.commit()
			return True
		
		except:
			r_cn.rollback()
			Mensajes().Info(self,u"Sucedi� algo que impidi� eliminar este registro.\nQuiz� se deba a que hay otra informaci�n\nque depende de este registro\n%s" % sql, u"Atenci�n")
			return False
		
	def GetAnotherRecord(self, comparison):

		if comparison == "<":
			asc_or_desc = "DESC"
		else:
			asc_or_desc = "ASC"
		
		lbox = self.GetControl(self.listbox)
		nombre = lbox.GetStringSelection()
		nombre = nombre.decode("iso8859-1")
		lboxIndex = lbox.GetSelection()
		#producto = lbox.GetClientData(lboxIndex)
		
		sql = """
		select top 1 id_producto from %s where id_producto+'---'+unidadrequisicion %s '%s' order by id_producto %s
		""" % (self.dbtable, comparison, nombre, asc_or_desc)
	
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		prod = ""
		if row is not None:
			prod = str(row[0])
					
		cursor.close()
		if prod <> "":
		
			if comparison == ">":
				newlboxIndex = lboxIndex + 1
			else:
				newlboxIndex = lboxIndex - 1
			
			if str(prod) <> str(lbox.GetClientData( newlboxIndex)):
				Mensajes().Warn(self,"A futuro refrescar el Listbox....","Epale")
			else:
				lbox.SetSelection( newlboxIndex, True)
				nombre = lbox.GetStringSelection()
				nombre = nombre.decode("iso8859-1")
				
				self.GetRecord(prod, nombre)
		
		return prod
		
	def GetRecord(self, record, nombre):
		
		lbox = self.GetControl(self.listbox)
				
		self.FillingARecord = True
		self.LimpiaControles()

		for v in self.controles_tipo_txt.itervalues():
			
			self.originales[ v ] = None

		producto = str(record)
		self.GetControl(ID_TEXTCTRLFACTORPRODUCTO).SetValue( producto )
		
		prod, unidad = str(nombre).split('---')
		self.GetControl(ID_TEXTCTRLFACTORUNIDAD).SetValue( unidad )
			
		sql = """
		select factorconversion from %s where id_producto = '%s' and unidadrequisicion = '%s'
		""" % ( self.dbtable, producto, unidad )
		
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone( cursor )
		#self.GetControl( ID_TEXTCTRLFACTORUNIDAD).SetValue(self.GetStringFromField(row[0]))
		self.GetControl( ID_TEXTCTRLFACTORCONVERSION).SetValue(str(int(row[0])))
		
		self.originales[ID_TEXTCTRLFACTORUNIDAD] = self.GetControl(ID_TEXTCTRLFACTORUNIDAD).GetValue()  
		self.originales[ID_TEXTCTRLFACTORCONVERSION] = self.GetControl(ID_TEXTCTRLFACTORCONVERSION).GetValue()  
		
		self.FillingARecord = False
		cursor.close()
		# Ahora los labels que se traen de la base de datos
		
		descripcion, unidad = self.ObtenDescripcion(producto)
		
		self.GetControl( ID_FACTORPRODUCTODESCRIPCION ).SetLabel(descripcion)
		self.GetControl( ID_FACTORPRODUCTOUNIDAD).SetLabel("Unidad de compra: " + unidad)
		
		self.tb.EnableTool(ID_TOOLSAV,False)
		self.tb.EnableTool(ID_TOOLDEL, True)
		self.tb.EnableTool(ID_TOOLNEW,True)
		self.MenuSetter(ID_MENUGRABAR, False)
		self.MenuSetter(ID_MENUELIMINAR, True)
		self.MenuSetter(ID_MENUNUEVO, True)             
		
		return True
	
class GixCategorias(wx.Frame, GixBase):
	
	coloreable = "ID_TEXTCTRLCATEGORIASCATEGORIA"
	coloreableeditable = True
	
	ctt = [coloreable, "ID_TEXTCTRLCATEGORIASDESCRIPCION", 
		"ID_TEXTCTRLCATEGORIASDESCRIPCIONAMPLIADA",
		"ID_TEXTCTRLCATEGORIASAUTORIZADOR","ID_TEXTCTRLCATEGORIASPASSWORDAUTORIZADOR",
		"ID_TEXTCTRLCATEGORIASSURTIDOR", "ID_TEXTCTRLCATEGORIASPASSWORDSURTIDOR"]
	activecontrolafternewrecord = ID_TEXTCTRLCATEGORIASCATEGORIA
	listbox = ID_LISTBOXCATEGORIAS
	dbtable  = "gixcategorias" #esto permite probar con tablas alternas iguales ( nismos campos distinto nombre )
	
	controles_tipo_txt = dict(zip(ctt,map(eval,ctt)))
	
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize, style = wx.DEFAULT_FRAME_STYLE ):
		
		wx.Frame.__init__(self, parent, id, title, pos, size, style)

		self.InitialFlags()
		self.InitialStuff(self, CategoriasFuncion)      
		self.AdditionalStuff()
		self.InitialBindings()
		
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONCATEGORIASAUTORIZADOR,self.OnBuscarAutorizador)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONCATEGORIASSURTIDOR,self.OnBuscarSurtidor)
		
	def OnBuscarAutorizador(self,event):
		
		query = """select idpuesto, descripcion + ' - ' + convert(varchar(7), idpuesto)
		from gixpuestos order by descripcion
		"""
		self.RelatedFieldSearch(u"B�squeda de Autorizador", query, ID_TEXTCTRLCATEGORIASAUTORIZADOR)
		
	def OnBuscarSurtidor(self,event):
		
		query = """select idpuesto, descripcion + ' - ' + convert(varchar(7), idpuesto)
		from gixpuestos order by descripcion
		"""
		self.RelatedFieldSearch(u"B�squeda de Surtidor", query, ID_TEXTCTRLCATEGORIASSURTIDOR)
		
	def AdditionalStuff(self):
		
		self.GetControl(ID_TEXTCTRLCATEGORIASAUTORIZADOR).SetValidator(MyValidator(DIGIT_ONLY))
		self.GetControl(ID_TEXTCTRLCATEGORIASSURTIDOR).SetValidator(MyValidator(DIGIT_ONLY))
		
	def FillListBox(self, display = 'first'):
		
		wx.BeginBusyCursor()
		lbox = self.GetControl(self.listbox)
		lbox.Clear()
		sql = "SELECT idcategoria FROM %s order by idcategoria" % self.dbtable 
		
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		
		for row in rows:
			dato = str(row[0])
			lbox.Append(dato,row[0])

		cu.close()
		if display == 'first':
			self.GetLFRecord("min")
		elif display == 'last':
			self.GetLFRecord("max")
			
		wx.EndBusyCursor()
		
	def OnPrint(self,event):
		tabla = self.dbtable
		meta = (( 14, "Id Categor�a") , (100, u"Descripci�n"), (200,u"Descripci�n Ampliada"),(20,u"Autorizador"),
			(60,u"Password Autorizador"), (20,"Surtidor"),(60,u"Password Surtidor"))
		
		query = """
		select idcategoria, descripcion, descripcion_ampliada, autorizador_puesto, autorizador_password,
		surtidor_puesto, surtidor_password
		from gixcategorias order by idcategoria
		"""
		titulo = u"Consulta de Categor�as " 
		self.DisplayGrid(tabla, meta, query, titulo)
		
	def OnSearch(self, event):
		pass
		
	def GetLFRecord(self, what):

		lbox = self.GetControl(self.listbox)
		
		sql = "SELECT %s(idcategoria) from %s" % (what, self.dbtable) 
	
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		categoria = ""
		row = fetchone(cursor)
		if row is not None:
		
			categoria = row[0]
					
		cursor.close()
		self.GetRecord(categoria)
		
		self.ListBoxReposition(what)
		
	def ObtenPuesto( self, puesto ):
		
		try:
			if not puesto.isdigit():
				return ""
		except:
			return ""
		
		sql = "select descripcion from gixpuestos where idpuesto = %s" % puesto
		
		nombre = ""
		
		try:
			cursor = r_cn.cursor()
			cursor.execute(str(sql))
			row = fetchone( cursor )
			if row:
				nombre = str(row[0])
		finally:
			cursor.close()
			
		return nombre
		
	def OnText(self,event):
		
		self.controlactual = event.GetId()
		self.Text()
	
	def Text(self, VengodelaLista = False):

		for id in ( ID_TEXTCTRLCATEGORIASDESCRIPCION, ID_TEXTCTRLCATEGORIASDESCRIPCIONAMPLIADA,
				ID_TEXTCTRLCATEGORIASAUTORIZADOR, ID_TEXTCTRLCATEGORIASPASSWORDAUTORIZADOR,
				ID_TEXTCTRLCATEGORIASSURTIDOR, ID_TEXTCTRLCATEGORIASPASSWORDSURTIDOR):
			
			control = self.GetControl(id)
			
			if id not in (ID_TEXTCTRLCATEGORIASAUTORIZADOR, ID_TEXTCTRLCATEGORIASSURTIDOR):
				valor = control.GetValue().strip()
				if valor == "" and not self.FillingARecord and not self.NewFlag:
					self.NewFlag = True
					if not VengodelaLista:
						Mensajes().Info(self, u"� No debe quedar ning�n dato en blanco !", u"Atenci�n")
						return
				
			if id == ID_TEXTCTRLCATEGORIASAUTORIZADOR:
				puesto = control.GetValue().strip()
				if puesto != "":
					if not puesto.isdigit():
						Mensajes().Info(self, u"� El autorizador debe ser num�rico !", u"Atenci�n")
						return
					nombre = self.ObtenPuesto(puesto)
					if nombre == "":
						Mensajes().Info(self, u"� El autorizador no existe !", u"Atenci�n")
						return
					self.GetControl(ID_CATEGORIASAUTORIZADOR).SetLabel(nombre)
				elif not self.FillingARecord and not self.NewFlag:
					self.NewFlag = True
					if not VengodelaLista:
						Mensajes().Info(self, u"�  El autorizador no debe quedar en blanco !", u"Atenci�n")
						return
					
			if id == ID_TEXTCTRLCATEGORIASSURTIDOR:
				puesto = control.GetValue().strip()
				if puesto != "":
					if not puesto.isdigit():
						Mensajes().Info(self, u"� El surtidor debe ser num�rico !", u"Atenci�n")
						return
					nombre = self.ObtenPuesto(puesto)
					if nombre == "":
						Mensajes().Info(self, u"� El surtidor no existe !", u"Atenci�n")
						return
					self.GetControl(ID_CATEGORIASSURTIDOR).SetLabel(nombre)
				elif not self.FillingARecord and not self.NewFlag:
					self.NewFlag = True
					if not VengodelaLista:
						Mensajes().Info(self, u"�  El surtidor no debe quedar en blanco !", u"Atenci�n")
						return
		
		self.EndOfOnText(self.controlactual)    

	#def OnText(self,event):

		#id = event.GetId()
		
		#control = self.GetControl(id)
		
		#if id in ( ID_TEXTCTRLCATEGORIASDESCRIPCION, ID_TEXTCTRLCATEGORIASDESCRIPCIONAMPLIADA,
				#ID_TEXTCTRLCATEGORIASAUTORIZADOR, ID_TEXTCTRLCATEGORIASPASSWORDAUTORIZADOR,
				#ID_TEXTCTRLCATEGORIASSURTIDOR, ID_TEXTCTRLCATEGORIASPASSWORDSURTIDOR):
			#valor = control.GetValue().strip()
			#if valor == "" and not self.FillingARecord and not self.NewFlag:
				#Mensajes().Info(self, u"� No debe quedar en blanco !", u"Atenci�n")
				#return
			
			
			
		#self.NewFlag = False # bandera para evitar validaciones al agregar .... ver arriba
		
		#self.EndOfOnText(id)
		#event.Skip()
		
	def SaveRecord(self):
		
		categoria = self.GetControl(ID_TEXTCTRLCATEGORIASCATEGORIA).GetValue()
		

		#if categoria.strip() == "" :
		if not self.tb.GetToolEnabled(ID_TOOLNEW):

			bienGrabado = self.AddRecord()
			lbx = self.GetControl(ID_LISTBOXCATEGORIAS)
			lbx.Clear()
			
			self.FillListBox("last") # se va al final de la lista aunque la alta haya sido de un puesto intermedio
			categoria = self.GetControl(ID_TEXTCTRLCATEGORIASCATEGORIA).GetValue()
		
		else:

			bienGrabado = self.UpdateRecord()
			
		if bienGrabado:
			
			self.tb.EnableTool( ID_TOOLSAV, False)
			self.tb.EnableTool( ID_TOOLDEL, True)
			self.tb.EnableTool( ID_TOOLNEW, True)
			
			self.MenuSetter(ID_MENUGRABAR, False)
			self.MenuSetter(ID_MENUELIMINAR, True)
			self.MenuSetter(ID_MENUNUEVO, True)
			
			self.GetRecord("%s" % ( categoria ))
			
			
		else:

			Mensajes().Info(self,u"� El Registro no fue grabado !", u"Atenci�n")
			
		
			
	def UpdateRecord( self ):
		
		
		categoria = self.GetControl(ID_TEXTCTRLCATEGORIASCATEGORIA).GetValue()
		descripcion = self.GetControl(ID_TEXTCTRLCATEGORIASDESCRIPCION).GetValue()
		descripcionampliada = self.GetControl(ID_TEXTCTRLCATEGORIASDESCRIPCIONAMPLIADA).GetValue()
		autorizador = self.GetControl(ID_TEXTCTRLCATEGORIASAUTORIZADOR).GetValue()
		passwordautorizador = self.GetControl(ID_TEXTCTRLCATEGORIASPASSWORDAUTORIZADOR).GetValue()
		surtidor = self.GetControl(ID_TEXTCTRLCATEGORIASSURTIDOR).GetValue()
		passwordsurtidor = self.GetControl(ID_TEXTCTRLCATEGORIASPASSWORDSURTIDOR).GetValue()
		setListForQuery = """
		descripcion = '%s' , descripcion_ampliada = '%s' , 
		autorizador_puesto = %s, autorizador_password = '%s', 
		surtidor_puesto = %s, surtidor_password = '%s'
		""" % ( descripcion, descripcionampliada, autorizador, passwordautorizador, surtidor,  passwordsurtidor)
		
		sql = "update %s set  %s " \
				"where idcategoria = '%s' " \
			% ( self.dbtable, setListForQuery, categoria )
		
		return  self.QueryUpdateRecord(sql)
		
	
	def AddRecord(self):
		
		categoria = self.GetControl(ID_TEXTCTRLCATEGORIASCATEGORIA).GetValue()
		descripcion = self.GetControl(ID_TEXTCTRLCATEGORIASDESCRIPCION).GetValue()
		descripcionampliada = self.GetControl(ID_TEXTCTRLCATEGORIASDESCRIPCIONAMPLIADA).GetValue()
		autorizador = self.GetControl(ID_TEXTCTRLCATEGORIASAUTORIZADOR).GetValue()
		passwordautorizador = self.GetControl(ID_TEXTCTRLCATEGORIASPASSWORDAUTORIZADOR).GetValue()
		surtidor = self.GetControl(ID_TEXTCTRLCATEGORIASSURTIDOR).GetValue()
		passwordsurtidor = self.GetControl(ID_TEXTCTRLCATEGORIASPASSWORDSURTIDOR).GetValue()
		
		
		sqlFields = """ 
		idcategoria, descripcion, descripcion_ampliada,
		autorizador_puesto, autorizador_password, surtidor_puesto, surtidor_password
		"""
		sqlValues = "'%s','%s', '%s', %s,'%s', %s,'%s'" % \
			( categoria, descripcion, descripcionampliada, autorizador,
			  passwordautorizador, surtidor, passwordsurtidor )
		
		sql = "insert into %s ( %s ) values ( %s ) " % ( self.dbtable, sqlFields, sqlValues ) 
		
		#return self.QueryAddRecord(sql)

		queTal =  self.QueryUpdateRecord(sql)
		
		return queTal
	
	def OnDeleteRecord( self, event):

		if Mensajes().YesNo(self,u"� Desea realmente eliminar este registro ?", u"Confirmaci�n") :

			if self.DeleteRecord():

				lbx = self.GetControl(ID_LISTBOXCATEGORIAS)
				pos = lbx.GetSelection()
				
				self.MoveOneStep("PREVIOUS")
				lbx.Delete(pos)
				Mensajes().Info(self,u"� Registro Eliminado !",u"Atenci�n")
				#self.LimpiaControles()
				self.tb.EnableTool( ID_TOOLSAV, False)
				self.tb.EnableTool( ID_TOOLDEL, True)
				self.tb.EnableTool( ID_TOOLNEW, True)
				self.MenuSetter(ID_MENUGRABAR, False)
				self.MenuSetter(ID_MENUELIMINAR, True)
				self.MenuSetter(ID_MENUNUEVO, True)
				
	def DeleteRecord(self):
		categoria = self.GetControl(ID_TEXTCTRLCATEGORIASCATEGORIA).GetValue().strip()

		if categoria  == "":
			
			Mensajes().Info(self, u"No se ha especificado la categor�a", u"Atenci�n")
			return False

		sql = "delete from %s where idcategoria = '%s'" % ( self.dbtable, categoria ) 

		try:
			cursor = r_cn.cursor()
			cursor.execute( str(sql) )
			cursor.close()
		
			r_cn.commit()
			return True
		
		except:
			r_cn.rollback()
			Mensajes().Info(self,u"Sucedi� algo que impidi� eliminar este registro.\nQuiz� se deba a que hay otra informaci�n\nque depende de este registro\n%s" % sql, u"Atenci�n")
			return False
	
	def GetAnotherRecord(self, comparison):

		if comparison == "<":
			asc_or_desc = "DESC"
		else:
			asc_or_desc = "ASC"
		
		lbox = self.GetControl(self.listbox)
		lboxIndex = lbox.GetSelection()
		categoria = lbox.GetClientData(lboxIndex)
		sql = "select top 1 idcategoria from %s where idcategoria %s '%s' order by idcategoria %s" % (self.dbtable, comparison,categoria,asc_or_desc)
	
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		lacat = ""
		if row is not None:
			lacat = str(row[0])
					
		cursor.close()
		if lacat <> "":
		
			if comparison == ">":
				newlboxIndex = lboxIndex + 1
			else:
				newlboxIndex = lboxIndex - 1
				
			
			lbox.SetSelection( newlboxIndex, True)
			self.GetRecord(lacat)
		
		return lacat
	
	
	def GetRecord(self, record):
		
		lbox = self.GetControl(self.listbox)
		
		self.FillingARecord = True
		self.LimpiaControles()
		self.SetColoreable(False)

		for v in self.controles_tipo_txt.itervalues():
			
			self.originales[ v ] = None
		
		categoria = str(record)
		self.GetControl(ID_TEXTCTRLCATEGORIASCATEGORIA).SetValue( categoria )
		
		sql = "select descripcion, descripcion_ampliada, autorizador_puesto, autorizador_password, surtidor_puesto, surtidor_password from %s where idcategoria = '%s'" % ( self.dbtable, categoria )
		
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone( cursor )
		
		self.GetControl( ID_TEXTCTRLCATEGORIASDESCRIPCION).SetValue(self.GetStringFromField(row[0]))
		self.GetControl( ID_TEXTCTRLCATEGORIASDESCRIPCIONAMPLIADA).SetValue(self.GetStringFromField(row[1]))
		self.GetControl( ID_TEXTCTRLCATEGORIASAUTORIZADOR).SetValue(str(row[2]))
		self.GetControl( ID_TEXTCTRLCATEGORIASPASSWORDAUTORIZADOR).SetValue(self.GetStringFromField(row[3]))

		self.GetControl( ID_TEXTCTRLCATEGORIASSURTIDOR).SetValue(str(row[4]))
		self.GetControl( ID_TEXTCTRLCATEGORIASPASSWORDSURTIDOR).SetValue(self.GetStringFromField(row[5]))
				
		self.originales[ID_TEXTCTRLCATEGORIASDESCRIPCION] = self.GetControl(ID_TEXTCTRLCATEGORIASDESCRIPCION).GetValue()        
		self.originales[ID_TEXTCTRLCATEGORIASDESCRIPCIONAMPLIADA] = self.GetControl(ID_TEXTCTRLCATEGORIASDESCRIPCIONAMPLIADA).GetValue()        
		self.originales[ID_TEXTCTRLCATEGORIASAUTORIZADOR] = self.GetControl(ID_TEXTCTRLCATEGORIASAUTORIZADOR).GetValue()        
		self.originales[ID_TEXTCTRLCATEGORIASPASSWORDAUTORIZADOR] = self.GetControl(ID_TEXTCTRLCATEGORIASPASSWORDAUTORIZADOR).GetValue()        
		self.originales[ID_TEXTCTRLCATEGORIASSURTIDOR] = self.GetControl(ID_TEXTCTRLCATEGORIASSURTIDOR).GetValue()      
		self.originales[ID_TEXTCTRLCATEGORIASPASSWORDSURTIDOR] = self.GetControl(ID_TEXTCTRLCATEGORIASPASSWORDSURTIDOR).GetValue()      
		
		self.FillingARecord = False

		autorizador = str(int(row[2]))
		surtidor = str(int(row[4]))
					
		self.GetControl( ID_CATEGORIASAUTORIZADOR ).SetLabel(self.ObtenPuesto(autorizador))
		self.GetControl( ID_CATEGORIASSURTIDOR).SetLabel(self.ObtenPuesto(surtidor))
		
		cursor.close()
		
		self.tb.EnableTool(ID_TOOLSAV,False)
		self.tb.EnableTool(ID_TOOLDEL, True)
		self.tb.EnableTool(ID_TOOLNEW,True)
		self.MenuSetter(ID_MENUGRABAR, False)
		self.MenuSetter(ID_MENUELIMINAR, True)
		self.MenuSetter(ID_MENUNUEVO, True)             
		
		return True

class GixEmpleados(wx.Frame,GixBase):
	
	#JIS = Jefe inmediato superior
	
	coloreable = "ID_TEXTCTRLEMPLEADOSEMPLEADO"
	coloreableeditable = False
	
	ctt = [coloreable,"ID_TEXTCTRLEMPLEADOSNOMBRE", "ID_TEXTCTRLEMPLEADOSAPELLIDOPATERNO", "ID_TEXTCTRLEMPLEADOSAPELLIDOMATERNO",
		"ID_TEXTCTRLEMPLEADOSUSUARIO", "ID_TEXTCTRLEMPLEADOSEMAIL", "ID_TEXTCTRLEMPLEADOSTELEFONO",
		"ID_TEXTCTRLEMPLEADOSFECHANACIMIENTO","ID_TEXTCTRLEMPLEADOSFECHAINICIOVACACIONES", "ID_TEXTCTRLEMPLEADOSFECHAFINVACACIONES"]
	activecontrolafternewrecord = ID_TEXTCTRLEMPLEADOSNOMBRE
	listbox = ID_LISTBOXEMPLEADOS
	dbtable  = "gixempleados" #esto permite probar con tablas alternas iguales ( nismos campos distinto nombre )
	
	controles_tipo_txt = dict(zip(ctt,map(eval,ctt)))
	
	DicDatesAndTxt = { ID_BUTTONEMPLEADOSFECHANACIMIENTO : ID_TEXTCTRLEMPLEADOSFECHANACIMIENTO, 
				ID_BUTTONEMPLEADOSFECHAINICIOVACACIONES : ID_TEXTCTRLEMPLEADOSFECHAINICIOVACACIONES,
				ID_BUTTONEMPLEADOSFECHAFINVACACIONES: ID_TEXTCTRLEMPLEADOSFECHAFINVACACIONES}
	
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize, style = wx.DEFAULT_FRAME_STYLE ):
		
		wx.Frame.__init__(self, parent, id, title, pos, size, style)

		self.InitialFlags()
		self.InitialStuff(self, EmpleadosFuncion)       
		self.InitialBindings()
		
	def FillListBox(self, display = 'first'):
		
		wx.BeginBusyCursor()
		lbox = self.GetControl(ID_LISTBOXEMPLEADOS)
		lbox.Clear()
		sql = "SELECT idempleado FROM %s order by idempleado" % self.dbtable 
		
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		
		for row in rows:
			dato = str(row[0]).rjust(9)
			lbox.Append(dato,row[0])

		cu.close()
		if display == 'first':
			self.GetLFRecord("min")
		elif display == 'last':
			self.GetLFRecord("max")
			
		wx.EndBusyCursor()
		
	def OnPrint(self,event):
		tabla = self.dbtable
		meta = (( 14, "Id Empleado") , (100, u"Nombre"), (100,u"Apellido Paterno"),(100,u"Apellido Materno"),
			(50,u"Usuario"), (100,"Email"),(20,u"Tel�fono"),
			(30,u"Fecha Nacimiento"), (30,"Fecha In. Vacaciones"),(30,"Fecha Fin. Vacaciones"))
		query = """
		select idempleado, nombre, apellido_paterno, apellido_materno, usuario, email, telefono,
		fecha_nacimiento, fecha_inicio_vacaciones, fecha_fin_vacaciones
		from gixempleados order by apellido_paterno, apellido_materno, nombre
		"""
		titulo = u"Consulta de Empleados " 
		self.DisplayGrid(tabla, meta, query, titulo)
		
	def OnSearch(self, event):
		pass
		
	def GetLFRecord(self, what):

		lbox = self.GetControl(self.listbox)
		
		sql = "SELECT %s(idempleado) from %s" % (what, self.dbtable) 
	
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		numero = ""
		row = fetchone(cursor)
		if row is not None:
		
			numero = int(row[0])
					
		cursor.close()
		self.GetRecord(numero)
		
		self.ListBoxReposition(what)
		
		
	def OnText(self,event):
		
		self.controlactual = event.GetId()
		self.Text()
	
	def Text(self, VengodelaLista = False):

		for id in ( ID_TEXTCTRLEMPLEADOSNOMBRE, ID_TEXTCTRLEMPLEADOSAPELLIDOPATERNO):
			control = self.GetControl(id)
			valor = control.GetValue().strip()
			if valor == "" and not self.FillingARecord and not self.NewFlag:
				self.NewFlag = True
				if not VengodelaLista:
					Mensajes().Info(self, u"No deben quedar en blanco:\nEl nombre y apellido paterno del empleado", u"Atenci�n")
					return
		
		self.EndOfOnText(self.controlactual)    
		
	def SaveRecord(self):
		
		empleado = self.GetControl(ID_TEXTCTRLEMPLEADOSEMPLEADO).GetValue()
		

		if empleado.strip() == "" :

			bienGrabado = self.AddRecord()
			lbx = self.GetControl(ID_LISTBOXEMPLEADOS)
			lbx.Clear()
			
			self.FillListBox("last") # se va al final de la lista aunque la alta haya sido de un puesto intermedio
			puesto = self.GetControl(ID_TEXTCTRLEMPLEADOSEMPLEADO).GetValue()
		
		else:

			bienGrabado = self.UpdateRecord()
			
		if bienGrabado:
			
			self.tb.EnableTool( ID_TOOLSAV, False)
			self.tb.EnableTool( ID_TOOLDEL, True)
			self.tb.EnableTool( ID_TOOLNEW, True)
			
			self.MenuSetter(ID_MENUGRABAR, False)
			self.MenuSetter(ID_MENUELIMINAR, True)
			self.MenuSetter(ID_MENUNUEVO, True)
			
			self.GetRecord("%s" % ( empleado ))
			
			
		else:

			Mensajes().Info(self,u"� El Registro no fue grabado !", u"Atenci�n")
			
	def UpdateRecord( self ):
		
		empleado = self.GetControl(ID_TEXTCTRLEMPLEADOSEMPLEADO).GetValue()
		nombre = self.GetControl(ID_TEXTCTRLEMPLEADOSNOMBRE).GetValue()
		apepat = self.GetControl(ID_TEXTCTRLEMPLEADOSAPELLIDOPATERNO).GetValue()
		apemat = self.GetControl(ID_TEXTCTRLEMPLEADOSAPELLIDOMATERNO).GetValue()
		usuario = self.GetControl(ID_TEXTCTRLEMPLEADOSUSUARIO).GetValue()
		email = self.GetControl(ID_TEXTCTRLEMPLEADOSEMAIL).GetValue()
		telefono = self.GetControl(ID_TEXTCTRLEMPLEADOSTELEFONO).GetValue()
		fnac, fiva, ffva = "NULL", "NULL", "NULL"
		try:
			fnac_dia, fnac_mes, fnac_ano = self.GetControl(ID_TEXTCTRLEMPLEADOSFECHANACIMIENTO).GetValue().split('/')
			fnac = "'%s/%02d/%02d'" % (fnac_ano, int(fnac_mes), int(fnac_dia))
		except:
			pass
		try:
			fiva_dia, fiva_mes, fiva_ano = self.GetControl(ID_TEXTCTRLEMPLEADOSFECHAINICIOVACACIONES).GetValue().split('/')
			fiva = "'%s/%02d/%02d'" % (fiva_ano, int(fiva_mes), int(fiva_dia))
		except:
			pass
		try:
			ffva_dia, ffva_mes, ffva_ano = self.GetControl(ID_TEXTCTRLEMPLEADOSFECHAFINVACACIONES).GetValue().split('/')
			ffva = "'%s/%02d/%02d'" % ( ffva_ano, int(ffva_mes), int(ffva_dia)) 
		except:
			pass
		
		setListForQuery = """
		nombre = '%s' , apellido_paterno = '%s' , apellido_materno = '%s' , usuario = '%s', email = '%s', 
		telefono = '%s', fecha_nacimiento = %s, fecha_inicio_vacaciones = %s, fecha_fin_vacaciones = %s
		""" % ( nombre, apepat, apemat, usuario, email, telefono, fnac, fiva, ffva )
		
		sql = "update %s set  %s " \
				"where idempleado = %s " \
			% ( self.dbtable, setListForQuery, empleado )
		
		return  self.QueryUpdateRecord(sql)
		
	
	def AddRecord(self):
		
		nombre = self.GetControl(ID_TEXTCTRLEMPLEADOSNOMBRE).GetValue()
		apepat = self.GetControl(ID_TEXTCTRLEMPLEADOSAPELLIDOPATERNO).GetValue()
		apemat = self.GetControl(ID_TEXTCTRLEMPLEADOSAPELLIDOMATERNO).GetValue()
		usuario = self.GetControl(ID_TEXTCTRLEMPLEADOSUSUARIO).GetValue()
		email = self.GetControl(ID_TEXTCTRLEMPLEADOSEMAIL).GetValue()
		telefono = self.GetControl(ID_TEXTCTRLEMPLEADOSTELEFONO).GetValue()
		fnac, fiva, ffva = "NULL", "NULL", "NULL"
		try:
			fnac_dia, fnac_mes, fnac_ano = self.GetControl(ID_TEXTCTRLEMPLEADOSFECHANACIMIENTO).GetValue().split('/')
			fnac = "'%s/%02d/%02d'" % (fnac_ano, int(fnac_mes), int(fnac_dia))
		except:
			pass
		try:
			fiva_dia, fiva_mes, fiva_ano = self.GetControl(ID_TEXTCTRLEMPLEADOSFECHAINICIOVACACIONES).GetValue().split('/')
			fiva = "'%s/%02d/%02d'" % (fiva_ano, int(fiva_mes), int(fiva_dia))
		except:
			pass
		try:
			ffva_dia, ffva_mes, ffva_ano = self.GetControl(ID_TEXTCTRLEMPLEADOSFECHAFINVACACIONES).GetValue().split('/')
			ffva = "'%s/%02d/%02d'" % ( ffva_ano, int(ffva_mes), int(ffva_dia)) 
		except:
			pass
		
		
		sqlFields = """ 
		nombre, apellido_paterno, apellido_materno, usuario, email, telefono, fecha_nacimiento, fecha_inicio_vacaciones, fecha_fin_vacaciones
		"""
		sqlValues = "'%s', '%s', '%s', '%s', '%s', '%s', %s,%s, %s" % \
			( nombre, apepat, apemat, usuario, email, telefono, fnac, fiva, ffva )
		
		sql = "insert into %s ( %s ) values ( %s ) " % ( self.dbtable, sqlFields, sqlValues ) 
		
		#return self.QueryAddRecord(sql)

		queTal =  self.QueryUpdateRecord(sql)
		if queTal:
			
			sqlx = "select max(idempleado) from gixempleados"
			cursor = r_cn.cursor()
			cursor.execute(str(sqlx))
			row = fetchone(cursor)
			numero = ""
			
			if row is not None:
				numero = str(int(row[0]))
					
			cursor.close()
			self.GetControl(ID_TEXTCTRLEMPLEADOSEMPLEADO).SetValue(numero)

		return queTal
	
	def OnDeleteRecord( self, event):

		if Mensajes().YesNo(self,u"� Desea realmente eliminar este registro ?", u"Confirmaci�n") :

			if self.DeleteRecord():

				lbx = self.GetControl(ID_LISTBOXEMPLEADOS)
				pos = lbx.GetSelection()
				
				self.MoveOneStep("PREVIOUS")
				lbx.Delete(pos)
				Mensajes().Info(self,u"� Registro Eliminado !",u"Atenci�n")
				#self.LimpiaControles()
				self.tb.EnableTool( ID_TOOLSAV, False)
				self.tb.EnableTool( ID_TOOLDEL, True)
				self.tb.EnableTool( ID_TOOLNEW, True)
				self.MenuSetter(ID_MENUGRABAR, False)
				self.MenuSetter(ID_MENUELIMINAR, True)
				self.MenuSetter(ID_MENUNUEVO, True)
				
	def DeleteRecord(self):
		empleado = self.GetControl(ID_TEXTCTRLEMPLEADOSEMPLEADO).GetValue().strip()

		if empleado  == "":
			
			Mensajes().Info(self, u"No se ha especificado el empleado", u"Atenci�n")
			return False
		
		sql = "delete from %s where idempleado = %s" % ( self.dbtable, empleado ) 

		try:
			cursor = r_cn.cursor()
			cursor.execute( str(sql) )
			cursor.close()
		
			r_cn.commit()
			return True
		
		except:
			r_cn.rollback()
			Mensajes().Info(self,u"Sucedi� algo que impidi� eliminar este registro.\nQuiz� se deba a que hay otra informaci�n\nque depende de este registro\n%s" % sql, u"Atenci�n")
			return False
	
	def GetAnotherRecord(self, comparison):

		if comparison == "<":
			asc_or_desc = "DESC"
		else:
			asc_or_desc = "ASC"
		
		lbox = self.GetControl(self.listbox)
		lboxIndex = lbox.GetSelection()
		empleado = lbox.GetClientData(lboxIndex)
		sql = "select top 1 idempleado from %s where idempleado %s '%s' order by idempleado %s" % (self.dbtable, comparison,empleado,asc_or_desc)
	
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		numero = ""
		if row is not None:
			numero = str(int(row[0]))
					
		cursor.close()
		if numero <> "":
		
			if comparison == ">":
				newlboxIndex = lboxIndex + 1
			else:
				newlboxIndex = lboxIndex - 1
				
			if str(numero) <> str(lbox.GetClientData( newlboxIndex)):
				Mensajes().Warn(self,"A futuro refrescar el Listbox....","Epale")
			else:
				lbox.SetSelection( newlboxIndex, True)
				self.GetRecord(numero)
		
		return numero
	
	
	def GetRecord(self, record):
		
		lbox = self.GetControl(self.listbox)
		
		try:
			a = int(record)
		except:
			return False
		
		self.FillingARecord = True
		self.LimpiaControles()
		self.SetColoreable(False)

		for v in self.controles_tipo_txt.itervalues():
			
			self.originales[ v ] = None
		
		empleado = str(int(record))
		self.GetControl(ID_TEXTCTRLEMPLEADOSEMPLEADO).SetValue( empleado )
		
		sql = """
		select nombre, apellido_paterno, apellido_materno, usuario, email, telefono,
		case when fecha_nacimiento is null then '' else convert(varchar(10),fecha_nacimiento,103) end as fnac,
		case when fecha_inicio_vacaciones is null then '' else convert(varchar(10),fecha_inicio_vacaciones,103) end as finivac,
		case when fecha_fin_vacaciones is null then '' else convert(varchar(10),fecha_fin_vacaciones,103) end as ffinvac
		from %s where idempleado = %s 
		""" % ( self.dbtable, empleado )
		
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone( cursor )
		
		self.GetControl( ID_TEXTCTRLEMPLEADOSNOMBRE).SetValue(self.GetStringFromField(row[0]))
		self.GetControl( ID_TEXTCTRLEMPLEADOSAPELLIDOPATERNO).SetValue(self.GetStringFromField(row[1]))
		self.GetControl( ID_TEXTCTRLEMPLEADOSAPELLIDOMATERNO).SetValue(self.GetStringFromField(row[2]))
		self.GetControl( ID_TEXTCTRLEMPLEADOSUSUARIO).SetValue(self.GetStringFromField(row[3]))
		self.GetControl( ID_TEXTCTRLEMPLEADOSEMAIL).SetValue(self.GetStringFromField(row[4]))
		self.GetControl( ID_TEXTCTRLEMPLEADOSTELEFONO).SetValue(self.GetStringFromField(row[5]))
		self.GetControl( ID_TEXTCTRLEMPLEADOSFECHANACIMIENTO).SetValue(self.GetStringFromField(row[6]))
		self.GetControl( ID_TEXTCTRLEMPLEADOSFECHAINICIOVACACIONES).SetValue(self.GetStringFromField(row[7]))
		self.GetControl( ID_TEXTCTRLEMPLEADOSFECHAFINVACACIONES).SetValue(self.GetStringFromField(row[8]))
		
		for x in "NOMBRE,APELLIDOPATERNO,APELLIDOMATERNO,USUARIO,EMAIL,TELEFONO,FECHANACIMIENTO,FECHAINICIOVACACIONES,FECHAFINVACACIONES".split(","):
			key = eval("ID_TEXTCTRLEMPLEADOS%s" % x )
			self.originales[key] = self.GetControl(key).GetValue()
		
		self.FillingARecord = False
		cursor.close()
		
		
		self.tb.EnableTool(ID_TOOLSAV,False)
		self.tb.EnableTool(ID_TOOLDEL, True)
		self.tb.EnableTool(ID_TOOLNEW,True)
		self.MenuSetter(ID_MENUGRABAR, False)
		self.MenuSetter(ID_MENUELIMINAR, True)
		self.MenuSetter(ID_MENUNUEVO, True)             
		
		return True

class GixProveedores(wx.Frame,GixBase):
	
	coloreable = "ID_TEXTCTRLPROVEEDORESPROVEEDOR"
	coloreableeditable = False
	
	ctt = [coloreable,"ID_TEXTCTRLPROVEEDORESRAZONSOCIAL", "ID_TEXTCTRLPROVEEDORESDIRECCION", "ID_TEXTCTRLPROVEEDORESTELEFONO",
		"ID_TEXTCTRLPROVEEDORESEMAIL", "ID_TEXTCTRLPROVEEDORESRFC", "ID_TEXTCTRLPROVEEDORESCONTACTONOMBRE",
		"ID_TEXTCTRLPROVEEDORESCONTACTOTELEFONO","ID_TEXTCTRLPROVEEDORESCONTACTOEMAIL"]
	activecontrolafternewrecord = ID_TEXTCTRLPROVEEDORESRAZONSOCIAL
	listbox = ID_LISTBOXPROVEEDORES
	dbtable  = "gixproveedores" #esto permite probar con tablas alternas iguales ( nismos campos distinto nombre )
	
	controles_tipo_txt = dict(zip(ctt,map(eval,ctt)))
	
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize, style = wx.DEFAULT_FRAME_STYLE ):
		
		wx.Frame.__init__(self, parent, id, title, pos, size, style)

		self.InitialFlags()
		self.InitialStuff(self, ProveedoresFuncion)     
		self.InitialBindings()
		
	def FillListBox(self, display = 'first'):
		
		wx.BeginBusyCursor()
		lbox = self.GetControl(ID_LISTBOXPROVEEDORES)
		lbox.Clear()
		sql = "SELECT idproveedor FROM %s order by idproveedor" % self.dbtable 
		
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		
		for row in rows:
			dato = str(row[0]).rjust(9)
			lbox.Append(dato,row[0])

		cu.close()
		if display == 'first':
			self.GetLFRecord("min")
		elif display == 'last':
			self.GetLFRecord("max")
			
		wx.EndBusyCursor()
		
	def OnPrint(self,event):
		tabla = self.dbtable
		meta = (( 14, "Id Proveedor") , (300, u"Raz�n Social"), (100,u"Email"),(20,u"Tel�fono"),
			(100,u"Nombre del Contacto"), (100,"Email del Contacto"),(20,u"Tel�fono del Contacto"))
		query = """
		select idproveedor, razonsocial, email, telefono, contactonombre, contactoemail, contactotelefono
		from gixproveedores order by razonsocial
		"""
		titulo = u"Consulta de Proveedores " 
		self.DisplayGrid(tabla, meta, query, titulo)
		
	def OnSearch(self, event):
		pass
		
	def GetLFRecord(self, what):

		lbox = self.GetControl(self.listbox)
		
		sql = "SELECT %s(idproveedor) from %s" % (what, self.dbtable) 
	
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		numero = ""
		row = fetchone(cursor)
		if row is not None:
		
			numero = int(row[0])
					
		cursor.close()
		self.GetRecord(numero)
		
		self.ListBoxReposition(what)
		
		
	def OnText(self,event):
		
		self.controlactual = event.GetId()
		self.Text()
	
	def Text(self, VengodelaLista = False):

		for  id in( ID_TEXTCTRLPROVEEDORESRAZONSOCIAL, ID_TEXTCTRLPROVEEDORESCONTACTONOMBRE):
			control = self.GetControl(id)
			valor = control.GetValue().strip()
			if valor == "" and not self.FillingARecord and not self.NewFlag:
				self.NewFlag = True
				if not VengodelaLista:
					Mensajes().Info(self, u"No deben quedar en blanco la raz�n social y el nombre del contacto", u"Atenci�n")
					return
		
		self.EndOfOnText(self.controlactual)    
		
	def SaveRecord(self):
		
		proveedor = self.GetControl(ID_TEXTCTRLPROVEEDORESPROVEEDOR).GetValue()
		

		if proveedor.strip() == "" :

			bienGrabado = self.AddRecord()
			lbx = self.GetControl(ID_LISTBOXPROVEEDORES)
			lbx.Clear()
			
			self.FillListBox("last") # se va al final de la lista aunque la alta haya sido de un puesto intermedio
			puesto = self.GetControl(ID_TEXTCTRLPROVEEDORESPROVEEDOR).GetValue()
		
		else:

			bienGrabado = self.UpdateRecord()
			
		if bienGrabado:
			
			self.tb.EnableTool( ID_TOOLSAV, False)
			self.tb.EnableTool( ID_TOOLDEL, True)
			self.tb.EnableTool( ID_TOOLNEW, True)
			
			self.MenuSetter(ID_MENUGRABAR, False)
			self.MenuSetter(ID_MENUELIMINAR, True)
			self.MenuSetter(ID_MENUNUEVO, True)
			
			self.GetRecord("%s" % ( proveedor ))
			
			
		else:

			Mensajes().Info(self,u"� El Registro no fue grabado !", u"Atenci�n")
			
	def UpdateRecord( self ):
		
		proveedor = self.GetControl(ID_TEXTCTRLPROVEEDORESPROVEEDOR).GetValue()
		razonsocial = self.GetControl(ID_TEXTCTRLPROVEEDORESRAZONSOCIAL).GetValue()
		direccion = self.GetControl(ID_TEXTCTRLPROVEEDORESDIRECCION).GetValue()
		telefono = self.GetControl(ID_TEXTCTRLPROVEEDORESTELEFONO).GetValue()
		email = self.GetControl(ID_TEXTCTRLPROVEEDORESEMAIL).GetValue()
		rfc = self.GetControl(ID_TEXTCTRLPROVEEDORESRFC).GetValue()
		contactonombre = self.GetControl(ID_TEXTCTRLPROVEEDORESCONTACTONOMBRE).GetValue()
		contactotelefono = self.GetControl(ID_TEXTCTRLPROVEEDORESCONTACTOTELEFONO).GetValue()
		contactoemail = self.GetControl(ID_TEXTCTRLPROVEEDORESCONTACTOEMAIL).GetValue()
		
		setListForQuery = """
		razonsocial = '%s' , direccion = '%s' , telefono = '%s' , email = '%s', rfc = '%s', 
		contactonombre = '%s', contactotelefono = '%s', contactoemail = '%s'
		""" % ( razonsocial, direccion, telefono, email, rfc, contactonombre, contactotelefono, contactoemail )
		
		sql = "update %s set  %s " \
				"where idproveedor = %s " \
			% ( self.dbtable, setListForQuery, proveedor )
		
		return  self.QueryUpdateRecord(sql)
		
	
	def AddRecord(self):
		
		proveedor = self.GetControl(ID_TEXTCTRLPROVEEDORESPROVEEDOR).GetValue()
		razonsocial = self.GetControl(ID_TEXTCTRLPROVEEDORESRAZONSOCIAL).GetValue()
		direccion = self.GetControl(ID_TEXTCTRLPROVEEDORESDIRECCION).GetValue()
		telefono = self.GetControl(ID_TEXTCTRLPROVEEDORESTELEFONO).GetValue()
		email = self.GetControl(ID_TEXTCTRLPROVEEDORESEMAIL).GetValue()
		rfc = self.GetControl(ID_TEXTCTRLPROVEEDORESRFC).GetValue()
		contactonombre = self.GetControl(ID_TEXTCTRLPROVEEDORESCONTACTONOMBRE).GetValue()
		contactotelefono = self.GetControl(ID_TEXTCTRLPROVEEDORESCONTACTOTELEFONO).GetValue()
		contactoemail = self.GetControl(ID_TEXTCTRLPROVEEDORESCONTACTOEMAIL).GetValue()
		
		sqlFields = """ 
		razonsocial, direccion, telefono, email, rfc, contactonombre, contactotelefono, contactoemail
		"""
		sqlValues = "'%s', '%s', '%s', '%s', '%s', '%s', '%s','%s'" % \
			( razonsocial, direccion, telefono, email, rfc, contactonombre, contactotelefono, contactoemail )
		
		sql = "insert into %s ( %s ) values ( %s ) " % ( self.dbtable, sqlFields, sqlValues ) 
		
		#return self.QueryAddRecord(sql)

		queTal =  self.QueryUpdateRecord(sql)
		if queTal:
			
			sqlx = "select max(idproveedor) from gixproveedores"
			cursor = r_cn.cursor()
			cursor.execute(str(sqlx))
			row = fetchone(cursor)
			numero = ""
			
			if row is not None:
				numero = str(int(row[0]))
					
			cursor.close()
			self.GetControl(ID_TEXTCTRLPROVEEDORESPROVEEDOR).SetValue(numero)

		return queTal
	
	def OnDeleteRecord( self, event):

		if Mensajes().YesNo(self,u"� Desea realmente eliminar este registro ?", u"Confirmaci�n") :

			if self.DeleteRecord():

				lbx = self.GetControl(ID_LISTBOXPROVEEDORES)
				pos = lbx.GetSelection()
				
				self.MoveOneStep("PREVIOUS")
				lbx.Delete(pos)
				Mensajes().Info(self,u"� Registro Eliminado !",u"Atenci�n")
				#self.LimpiaControles()
				self.tb.EnableTool( ID_TOOLSAV, False)
				self.tb.EnableTool( ID_TOOLDEL, True)
				self.tb.EnableTool( ID_TOOLNEW, True)
				self.MenuSetter(ID_MENUGRABAR, False)
				self.MenuSetter(ID_MENUELIMINAR, True)
				self.MenuSetter(ID_MENUNUEVO, True)
				
	def DeleteRecord(self):
		proveedor = self.GetControl(ID_TEXTCTRLPROVEEDORESPROVEEDOR).GetValue().strip()

		if proveedor  == "":
			
			Mensajes().Info(self, u"No se ha especificado el proveedor", u"Atenci�n")
			return False
		
		sql = "delete from %s where idproveedor = %s" % ( self.dbtable, proveedor ) 

		try:
			cursor = r_cn.cursor()
			cursor.execute( str(sql) )
			cursor.close()
		
			r_cn.commit()
			return True
		
		except:
			r_cn.rollback()
			Mensajes().Info(self,u"Sucedi� algo que impidi� eliminar este registro.\nQuiz� se deba a que hay otra informaci�n\nque depende de este registro\n%s" % sql, u"Atenci�n")
			return False
	
	def GetAnotherRecord(self, comparison):

		if comparison == "<":
			asc_or_desc = "DESC"
		else:
			asc_or_desc = "ASC"
		
		lbox = self.GetControl(self.listbox)
		lboxIndex = lbox.GetSelection()
		proveedor = lbox.GetClientData(lboxIndex)
		sql = "select top 1 idproveedor from %s where idproveedor %s '%s' order by idproveedor %s" % (self.dbtable, comparison, proveedor, asc_or_desc)
	
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		numero = ""
		if row is not None:
			numero = str(int(row[0]))
					
		cursor.close()
		if numero <> "":
		
			if comparison == ">":
				newlboxIndex = lboxIndex + 1
			else:
				newlboxIndex = lboxIndex - 1
				
			if str(numero) <> str(lbox.GetClientData( newlboxIndex)):
				Mensajes().Warn(self,"A futuro refrescar el Listbox....","Epale")
			else:
				lbox.SetSelection( newlboxIndex, True)
				self.GetRecord(numero)
		
		return numero
	
	
	def GetRecord(self, record):
		
		lbox = self.GetControl(self.listbox)
		
		try:
			a = int(record)
		except:
			return False
		
		self.FillingARecord = True
		self.LimpiaControles()
		self.SetColoreable(False)

		for v in self.controles_tipo_txt.itervalues():
			
			self.originales[ v ] = None
		
		proveedor = str(int(record))
		self.GetControl(ID_TEXTCTRLPROVEEDORESPROVEEDOR).SetValue( proveedor )
		
		sql = "select razonsocial, direccion, telefono, email, rfc, contactonombre, contactotelefono, contactoemail from %s where idproveedor = %s" % ( self.dbtable, proveedor )
		
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone( cursor )

		self.GetControl(ID_TEXTCTRLPROVEEDORESRAZONSOCIAL).SetValue(self.GetStringFromField(row[0]))
		self.GetControl(ID_TEXTCTRLPROVEEDORESDIRECCION).SetValue(self.GetStringFromField(row[1]))
		self.GetControl(ID_TEXTCTRLPROVEEDORESTELEFONO).SetValue(self.GetStringFromField(row[2]))
		self.GetControl(ID_TEXTCTRLPROVEEDORESEMAIL).SetValue(self.GetStringFromField(row[3]))
		self.GetControl(ID_TEXTCTRLPROVEEDORESRFC).SetValue(self.GetStringFromField(row[4]))
		self.GetControl(ID_TEXTCTRLPROVEEDORESCONTACTONOMBRE).SetValue(self.GetStringFromField(row[5]))
		self.GetControl(ID_TEXTCTRLPROVEEDORESCONTACTOTELEFONO).SetValue(self.GetStringFromField(row[6]))
		self.GetControl(ID_TEXTCTRLPROVEEDORESCONTACTOEMAIL).SetValue(self.GetStringFromField(row[7]))
		
		for x in "RAZONSOCIAL,DIRECCION,TELEFONO,EMAIL,RFC,CONTACTONOMBRE,CONTACTOTELEFONO,CONTACTOEMAIL".split(","):
			key = eval("ID_TEXTCTRLPROVEEDORES%s" % x )
			self.originales[key] = self.GetControl(key).GetValue()
		
		self.FillingARecord = False
		cursor.close()
		
		
		self.tb.EnableTool(ID_TOOLSAV,False)
		self.tb.EnableTool(ID_TOOLDEL, True)
		self.tb.EnableTool(ID_TOOLNEW,True)
		self.MenuSetter(ID_MENUGRABAR, False)
		self.MenuSetter(ID_MENUELIMINAR, True)
		self.MenuSetter(ID_MENUNUEVO, True)             
		
		return True

class GixReporteRecibosElaborados(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Recibos Elaborados", pos = wx.DefaultPosition,
	             size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE, usuario = None):
		
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.lstctrlorder = {0:("r.codigo","desc",""), 1:("r.fechacaptura","desc","> "), 2:("r.fechaemision","desc",""),
				3:("r.abonocapital","desc",""), 4:("r.interesmoratorio","desc",""), 5:("r.totalrecibo","desc",""),
				6:("e.nombre","desc",""), 7:("i.iden1","desc",""), 8:("i.iden2","desc",""),
				9:("t.descripcion","desc",""), 10:("s.descripcion","desc",""), 11:("r.status","desc","")}
		self.DicDatesAndTxt = {ID_BITMAPBUTTONRECIBOSELABORADOSELEGIRFECHAINICIAL : ID_TEXTCTRLRECIBOSELABORADOSFECHAINICIAL,
				       ID_BITMAPBUTTONRECIBOSELABORADOSELEGIRFECHAFINAL: ID_TEXTCTRLRECIBOSELABORADOSFECHAFINAL,
				       ID_BITMAPBUTTONRECIBOSELABORADOSELEGIRFECHAINICIALCAPTURA : ID_TEXTCTRLRECIBOSELABORADOSFECHAINICIALCAPTURA,
				       ID_BITMAPBUTTONRECIBOSELABORADOSELEGIRFECHAFINALCAPTURA : ID_TEXTCTRLRECIBOSELABORADOSFECHAFINALCAPTURA}
		self.usuario = usuario
		self.specialuser = ["ADRIANA", "MARTHA", "GLEON"]
		self.referenciatup = ("NINGUNA", "NIGUNA", "Ninguna")
		self.Fill = True
		self.cliente, self.etapa, self.desarrollo = "","",""
		self.currentitem, self.recibo, self.nombrecliente, self.estatus = 0, 0, "", ""
		ReporteRecibosElaboradosFuncion(self, True)
		self.GetControl(ID_TEXTCTRLRECIBOSELABORADOSFECHAINICIALCAPTURA).SetValue(self.GetTodayDate())
		self.colprev, self.colsort = 1, 1
		self.lstctrlsort = "r.fechacaptura desc"
		self.choicefiltroestatus = {0:"", 1:" and r.status = 'A' ", 2:" and r.status = 'C' "}
		self.choiceinxestatus = 1
		self.GetControl(ID_CHOICERECIBOSELABORADOSESTATUS).SetSelection(self.choiceinxestatus)
		self.GetControl(ID_FOREIGNRECIBOSELABORADOSFILTROCLIENTE).ShowCancelButton(True)
		self.GetControl(ID_FOREIGNRECIBOSELABORADOSFILTROETAPA).ShowCancelButton(True)
		self.GetControl(ID_FOREIGNRECIBOSELABORADOSFILTRODESARROLLO).ShowCancelButton(True)
		for v in self.DicDatesAndTxt.keys():
			self.Bind(wx.EVT_BUTTON, self.OnFechaButton, id = v )
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONRECIBOSELABORADOSLIMPIARFECHAINICIAL, self.OnLimpiaFecha)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONRECIBOSELABORADOSLIMPIARFECHAFINAL, self.OnLimpiaFecha)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLRECIBOSELABORADOSFECHAINICIAL)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLRECIBOSELABORADOSFECHAFINAL)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONRECIBOSELABORADOSLIMPIARFECHAINICIALCAPTURA, self.OnLimpiaFecha)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONRECIBOSELABORADOSLIMPIARFECHAFINALCAPTURA, self.OnLimpiaFecha)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLRECIBOSELABORADOSFECHAINICIALCAPTURA)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLRECIBOSELABORADOSFECHAFINALCAPTURA)
		self.Bind(wx.EVT_CHOICE, self.OnChoiceCtrlEstatus, id = ID_CHOICERECIBOSELABORADOSESTATUS)
		wx.EVT_BUTTON(self, ID_BUTTONRECIBOSELABORADOSIMPRESION, self.OnPrintExcel)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchCliente, id = ID_FOREIGNRECIBOSELABORADOSFILTROCLIENTE)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanCliente, id = ID_FOREIGNRECIBOSELABORADOSFILTROCLIENTE)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchCliente, id = ID_FOREIGNRECIBOSELABORADOSFILTROCLIENTE)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchEtapa, id = ID_FOREIGNRECIBOSELABORADOSFILTROETAPA)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanEtapa, id = ID_FOREIGNRECIBOSELABORADOSFILTROETAPA)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchEtapa, id = ID_FOREIGNRECIBOSELABORADOSFILTROETAPA)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchDesarrollo, id = ID_FOREIGNRECIBOSELABORADOSFILTRODESARROLLO)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanDesarrollo, id = ID_FOREIGNRECIBOSELABORADOSFILTRODESARROLLO)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchDesarrollo, id = ID_FOREIGNRECIBOSELABORADOSFILTRODESARROLLO)
		self.Bind(wx.EVT_LIST_COL_CLICK, self.OnSortListCtrl, id = ID_LISTCTRLRECIBOSELABORADOS)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelected, id = ID_LISTCTRLRECIBOSELABORADOS)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselected, id = ID_LISTCTRLRECIBOSELABORADOS)
		self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnImprimeRecibo, id = ID_LISTCTRLRECIBOSELABORADOS)
		wx.EVT_BUTTON(self, ID_BUTTONRECIBOSELABORADOSIMPRIMIR, self.OnImprimeRecibo)
		wx.EVT_BUTTON(self, ID_BUTTONRECIBOSELABORADOSCANCELAR, self.OnCancelarRecibo)
		wx.EVT_BUTTON(self, ID_BUTTONRECIBOSELABORADOSSALIR, self.OnClose)
		wx.EVT_CLOSE(self, self.OnClose)
		self.GetControl(ID_LISTCTRLRECIBOSELABORADOS).SetFocus()
		self.FillListCtrl()
		
	def GetTodayDate(self):
		sql = "select convert(varchar(10), getdate(), 103)"
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		return str(row[0])
		
	def OnClose(self, evt):
		self.Destroy()
		
	def OnChoiceCtrlEstatus(self, evt):
		self.choiceinxestatus = self.GetControl(ID_CHOICERECIBOSELABORADOSESTATUS).GetSelection()
		self.FillListCtrl()
		self.GetControl(ID_LISTCTRLRECIBOSELABORADOS).SetFocus()
		
	def OnText(self, evt):
		if self.Fill:
			id = evt.GetId()
			if id == ID_TEXTCTRLRECIBOSELABORADOSFECHAINICIAL:
				self.Habilita(False)
			elif id == ID_TEXTCTRLRECIBOSELABORADOSFECHAINICIALCAPTURA:
				self.Habilita(False)
			self.FillListCtrl()
		
	def OnLimpiaFecha(self, evt):
		self.Fill = False
		id = evt.GetId()
		if id == ID_BITMAPBUTTONRECIBOSELABORADOSLIMPIARFECHAINICIAL:
			self.GetControl(ID_TEXTCTRLRECIBOSELABORADOSFECHAINICIAL).SetValue("")
			self.GetControl(ID_TEXTCTRLRECIBOSELABORADOSFECHAFINAL).SetValue("")
			self.Habilita(False)
		elif id == ID_BITMAPBUTTONRECIBOSELABORADOSLIMPIARFECHAFINAL:
			self.GetControl(ID_TEXTCTRLRECIBOSELABORADOSFECHAFINAL).SetValue("")
		elif id == ID_BITMAPBUTTONRECIBOSELABORADOSLIMPIARFECHAINICIALCAPTURA:
			self.GetControl(ID_TEXTCTRLRECIBOSELABORADOSFECHAINICIALCAPTURA).SetValue("")
			self.GetControl(ID_TEXTCTRLRECIBOSELABORADOSFECHAFINALCAPTURA).SetValue("")
			self.Habilita(False)
		else:
			self.GetControl(ID_TEXTCTRLRECIBOSELABORADOSFECHAFINALCAPTURA).SetValue("")
		self.Fill = True
		self.FillListCtrl()
		
	def OnSelected(self, evt):
		self.currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLRECIBOSELABORADOS).GetItem(self.currentitem, 0).GetText()
		self.recibo = int(datointerno)
		self.nombrecliente = self.GetControl(ID_LISTCTRLRECIBOSELABORADOS).GetItem(self.currentitem, 6).GetText()
		self.estatus = self.GetControl(ID_LISTCTRLRECIBOSELABORADOS).GetItem(self.currentitem, 11).GetText()
		if self.estatus == "A":
			if self.usuario in self.specialuser:
				self.GetControl(ID_BUTTONRECIBOSELABORADOSIMPRIMIR).Enable(True)
				self.GetControl(ID_BUTTONRECIBOSELABORADOSCANCELAR).Enable(True)
		else:
			self.GetControl(ID_BUTTONRECIBOSELABORADOSIMPRIMIR).Enable(False)
			self.GetControl(ID_BUTTONRECIBOSELABORADOSCANCELAR).Enable(False)
		
	def OnDeselected(self, evt):
		self.currentitem, self.recibo, self.nombrecliente = 0, 0, ""
		self.GetControl(ID_BUTTONRECIBOSELABORADOSIMPRIMIR).Enable(False)
		self.GetControl(ID_BUTTONRECIBOSELABORADOSCANCELAR).Enable(False)
	
	def OnSortListCtrl(self, evt):
		self.colsort = evt.GetColumn()
		if self.lstctrlorder[self.colsort][1] == "desc":
			self.lstctrlsort = "%s asc" % self.lstctrlorder[self.colsort][0]
			self.lstctrlorder[self.colsort] = (self.lstctrlorder[self.colsort][0], "asc", "< ")
		else:
			self.lstctrlsort = "%s desc" % self.lstctrlorder[self.colsort][0]
			self.lstctrlorder[self.colsort] = (self.lstctrlorder[self.colsort][0], "desc", "> ")
		if self.colprev != self.colsort:
			self.lstctrlorder[self.colprev] = (self.lstctrlorder[self.colprev][0], self.lstctrlorder[self.colprev][1], "")
		self.FillListCtrl()
		self.colprev = self.colsort
		evt.Skip()
		
	def OnDoSearchCliente(self, evt):
		self.cliente =  self.GetControl(ID_FOREIGNRECIBOSELABORADOSFILTROCLIENTE).GetValue()
		self.FillListCtrl()

	def OnCleanCliente(self, evt):
		self.GetControl(ID_FOREIGNRECIBOSELABORADOSFILTROCLIENTE).SetValue("")
		self.cliente = ""
		self.FillListCtrl()

	def OnDoSearchEtapa(self, evt):
		self.etapa =  self.GetControl(ID_FOREIGNRECIBOSELABORADOSFILTROETAPA).GetValue()
		self.FillListCtrl()

	def OnCleanEtapa(self, evt):
		self.GetControl(ID_FOREIGNRECIBOSELABORADOSFILTROETAPA).SetValue("")
		self.etapa = ""
		self.FillListCtrl()

	def OnDoSearchDesarrollo(self, evt):
		self.desarrollo =  self.GetControl(ID_FOREIGNRECIBOSELABORADOSFILTRODESARROLLO).GetValue()
		self.FillListCtrl()

	def OnCleanDesarrollo(self, evt):
		self.GetControl(ID_FOREIGNRECIBOSELABORADOSFILTRODESARROLLO).SetValue("")
		self.desarrollo = ""
		self.FillListCtrl()

	def OnPrintExcel(self, event):
		tabla = "RECIBO"
		meta = ((14,"Recibo") , (70,u"Captura"), (70,u"Emisi�n"), (20,u"Abono"), (20,u"Interes"),
				(20, "Total"), (100, "Nombre"), (70,u"Lote"), (70,u"Manzana"), (100,u"Etapa"), (100,u"Desarrollo"))
		query = self.FillListCtrl(printexcel = True)
		titulo = u"Reporte de Recibos Elaborados"
		self.DisplayGrid(tabla, meta, query, titulo)

	def FillListCtrl(self, printexcel = False):
		if not self.Fill:
			return
		fechafiltro = self.GetControl(ID_TEXTCTRLRECIBOSELABORADOSFECHAINICIALCAPTURA).GetValue()
		fechacaptura = ""
		if fechafiltro:
			try:
				fecha_dia, fecha_mes, fecha_ano = \
						 self.GetControl(ID_TEXTCTRLRECIBOSELABORADOSFECHAINICIALCAPTURA).GetValue().split('/')
				fechainicial = "'%s/%02d/%02d'" % (fecha_ano, int(fecha_mes), int(fecha_dia))
				fecharango = self.GetControl(ID_TEXTCTRLRECIBOSELABORADOSFECHAFINALCAPTURA).GetValue()
				if fecharango:
					rango_dia, rango_mes, rango_ano = \
							 self.GetControl(ID_TEXTCTRLRECIBOSELABORADOSFECHAFINALCAPTURA).GetValue().split('/')
					fechafinal = "'%s/%02d/%02d'" % (rango_ano, int(rango_mes), int(rango_dia))
					if fechainicial > fechafinal:
						Mensajes().Info(self, u"La Fecha Inicial de Captura no debe ser mayor a la Fecha Final.\n\n" \
										u"Se tomar� en cuenta unicamente la fecha inicial.", u"Atenci�n")
						self.GetControl(ID_TEXTCTRLRECIBOSELABORADOSFECHAFINALCAPTURA).SetValue("")
						return
					else:
						fechacaptura = """
						and (convert(varchar(10), r.fechacaptura, 111) >= %s
						and convert(varchar(10), r.fechacaptura, 111) <= %s)
						""" % (fechainicial, fechafinal)
				else:
					fechacaptura = " and convert(varchar(10), r.fechacaptura, 111) = %s " % fechainicial
			except:
				fechacaptura = ""
		fechafiltro = self.GetControl(ID_TEXTCTRLRECIBOSELABORADOSFECHAINICIAL).GetValue()
		fechamovto = ""
		if fechafiltro:
			try:
				fecha_dia, fecha_mes, fecha_ano = \
						 self.GetControl(ID_TEXTCTRLRECIBOSELABORADOSFECHAINICIAL).GetValue().split('/')
				fechainicial = "'%s/%02d/%02d'" % (fecha_ano, int(fecha_mes), int(fecha_dia))
				fecharango = self.GetControl(ID_TEXTCTRLRECIBOSELABORADOSFECHAFINAL).GetValue()
				if fecharango:
					rango_dia, rango_mes, rango_ano = \
							 self.GetControl(ID_TEXTCTRLRECIBOSELABORADOSFECHAFINAL).GetValue().split('/')
					fechafinal = "'%s/%02d/%02d'" % (rango_ano, int(rango_mes), int(rango_dia))
					if fechainicial > fechafinal:
						Mensajes().Info(self, u"La Fecha Inicial de Emisi�n no debe ser mayor a la Fecha Final.\n\n" \
										u"Se tomar� en cuenta unicamente la fecha inicial.", u"Atenci�n")
						self.GetControl(ID_TEXTCTRLRECIBOSELABORADOSFECHAFINAL).SetValue("")
						return
					else:
						fechamovto = """
						and (convert(varchar(10), r.fechaemision, 111) >= %s
						and convert(varchar(10), r.fechaemision, 111) <= %s)
						""" % (fechainicial, fechafinal)
				else:
					fechamovto = " and convert(varchar(10), r.fechaemision, 111) = %s " % fechainicial
			except:
				fechamovto = ""
		if printexcel:
			query = """
			select distinct r.codigo, convert(varchar(10), r.fechacaptura, 103), convert(varchar(10), r.fechaemision, 103),
			r.abonocapital, r.interesmoratorio, r.totalrecibo, isnull(rtrim(ltrim(e.nombre)), ''),
			isnull(i.iden1, ''), isnull(i.iden2, ''), isnull(rtrim(ltrim(t.descripcion)), ''),
			isnull(rtrim(ltrim(s.descripcion)), '')
			from RECIBO r left join MOVIMIENTO m on r.codigo = m.numrecibo
			left join DOCUMENTO d on m.fk_documento = d.codigo
			left join CUENTA c on d.fk_cuenta = c.codigo
			left join CLIENTE e on c.fk_cliente = e.codigo
			left join DESARROLLO s on r.fk_desarrollo = s.codigo
			left join INMUEBLE i on c.fk_inmueble = i.codigo
			left join ETAPA t on i.fk_etapa = t.codigo
			where (e.nombre like '%s' or e.nombre is null) and
			(t.descripcion like '%s' or t.descripcion is null) and
			(s.descripcion like '%s' or s.descripcion is null) """ + \
				  str(self.choicefiltroestatus[self.choiceinxestatus]) + fechacaptura + fechamovto
			cliente, etapa, desarrollo = '%%', '%%', '%%'
			if self.cliente:
				cliente = '%s%s%s' % ("%%", self.cliente, "%%")
			if self.etapa:
				etapa = '%s%s%s' % ("%%", self.etapa, "%%")
			if self.desarrollo:
				desarrollo = '%s%s%s' % ("%%", self.desarrollo, "%%")
			sql = (query % (cliente, etapa, desarrollo))
			sqlx = sql.replace('\t', ' ')
			sql = sqlx.replace('\n', ' ')
			return str(sql)
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLRECIBOSELABORADOS)
		lctrl.Enable(False)
		lctrl.Show(False)
		lctrl.ClearAll()
		query = """
		select r.codigo, convert(varchar(10), r.fechacaptura, 103), convert(varchar(10), r.fechaemision, 103),
		r.abonocapital, r.interesmoratorio, r.totalrecibo, isnull(rtrim(ltrim(e.nombre)), ''),
		isnull(i.iden1, ''), isnull(i.iden2, ''), isnull(rtrim(ltrim(t.descripcion)), ''),
		isnull(rtrim(ltrim(s.descripcion)), ''), r.status
		from RECIBO r left join MOVIMIENTO m on r.codigo = m.numrecibo
		left join DOCUMENTO d on m.fk_documento = d.codigo
		left join CUENTA c on d.fk_cuenta = c.codigo
		left join CLIENTE e on c.fk_cliente = e.codigo
		left join DESARROLLO s on r.fk_desarrollo = s.codigo
		left join INMUEBLE i on c.fk_inmueble = i.codigo
		left join ETAPA t on i.fk_etapa = t.codigo
		where (e.nombre like '%s' or e.nombre is null) and
		(t.descripcion like '%s' or t.descripcion is null) and
		(s.descripcion like '%s' or s.descripcion is null) """ + \
			  str(self.choicefiltroestatus[self.choiceinxestatus]) + fechacaptura + fechamovto + """
		order by """ + self.lstctrlsort
		cliente, etapa, desarrollo = '%%', '%%', '%%'
		if self.cliente:
			cliente = '%s%s%s' % ("%%", self.cliente, "%%")
		if self.etapa:
			etapa = '%s%s%s' % ("%%", self.etapa, "%%")
		if self.desarrollo:
			desarrollo = '%s%s%s' % ("%%", self.desarrollo, "%%")
		sql = (query % (cliente, etapa, desarrollo))
		sqlx = sql.replace('\t', ' ')
		sql = sqlx.replace('\n', ' ')
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		recibo = []
		fila = 0
		abono, interes, total = 0,0,0
		if rows:
			lctrl.InsertColumn(0, u"%sRecibo" % self.lstctrlorder[0][2], wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"%sCaptura" % self.lstctrlorder[1][2], wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(2, u"%sEmisi�n" % self.lstctrlorder[2][2], wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(3, u"%sAbono" % self.lstctrlorder[3][2], wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(4, u"%sInteres" % self.lstctrlorder[4][2], wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(5, u"%sTotal" % self.lstctrlorder[5][2], wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(6, u"%sCliente" % self.lstctrlorder[6][2])
			lctrl.InsertColumn(7, u"%sLote" % self.lstctrlorder[7][2], wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(8, u"%sManzana" % self.lstctrlorder[8][2], wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(9, u"%sEtapa" % self.lstctrlorder[9][2])
			lctrl.InsertColumn(10, u"%sDesarrollo" % self.lstctrlorder[10][2])
			lctrl.InsertColumn(11, u"%sEstatus" % self.lstctrlorder[11][2], wx.LIST_FORMAT_CENTER)
			for row in rows:
				if int(row[0]) not in recibo:
					recibo.append(int(row[0]))
					if str(row[11]) == "A":
						if fila %2 != 0: bgcolor = [204,204,255]
						else:            bgcolor = [230,230,255]
					else:
						if fila %2 != 0: bgcolor = [255,153,153]
						else:            bgcolor = [255,215,215]
					index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
					lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
					nombre = str(row[6].strip())
					etapa = str(row[9].strip())
					desarrollo = str(row[10].strip())
					lctrl.SetStringItem(index, 0, str(row[0]))
					lctrl.SetStringItem(index, 1, str(row[1]))
					lctrl.SetStringItem(index, 2, str(row[2]))
					lctrl.SetStringItem(index, 3, str(amount_and_cents_with_commas(row[3])))
					lctrl.SetStringItem(index, 4, str(amount_and_cents_with_commas(row[4])))
					lctrl.SetStringItem(index, 5, str(amount_and_cents_with_commas(row[5])))
					lctrl.SetStringItem(index, 6, nombre.decode("iso8859-1"))
					lctrl.SetStringItem(index, 7, str(row[7]))
					lctrl.SetStringItem(index, 8, str(row[8]))
					lctrl.SetStringItem(index, 9, etapa.decode("iso8859-1"))
					lctrl.SetStringItem(index, 10, desarrollo.decode("iso8859-1"))
					lctrl.SetStringItem(index, 11, str(row[11]))
					lctrl.SetItemData(index, row[0])
					fila += 1
					abono += float(row[3])
					interes += float(row[4])
					total += float(row[5])
			lctrl.SetColumnWidth(0, 50)
			lctrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(2, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(3, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(4, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(5, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(6, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(7, 60)
			lctrl.SetColumnWidth(8, 68)
			lctrl.SetColumnWidth(9, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(10, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(11, 60)
			self.Habilita()
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Recibos", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 200)
			self.Habilita(True, False)
		cu.close()
		lctrl.Enable(True)
		lctrl.Show(True)
		self.GetControl(ID_TEXTCTRLRECIBOSELABORADOSTOTALABONO).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLRECIBOSELABORADOSTOTALINTERES).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLRECIBOSELABORADOSTOTALTOTAL).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLRECIBOSELABORADOSALAVISTA).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLRECIBOSELABORADOSTOTALABONO).SetValue(str(amount_and_cents_with_commas(abono)))
		self.GetControl(ID_TEXTCTRLRECIBOSELABORADOSTOTALINTERES).SetValue(str(amount_and_cents_with_commas(interes)))
		self.GetControl(ID_TEXTCTRLRECIBOSELABORADOSTOTALTOTAL).SetValue(str(amount_and_cents_with_commas(total)))
		self.GetControl(ID_TEXTCTRLRECIBOSELABORADOSALAVISTA).SetValue(str(fila))
		self.GetControl(ID_BUTTONRECIBOSELABORADOSIMPRIMIR).Enable(False)
		self.GetControl(ID_BUTTONRECIBOSELABORADOSCANCELAR).Enable(False)
		self.currentitem, self.recibo, self.nombrecliente = 0, 0, ""
		wx.EndBusyCursor()
		
	def Habilita(self, excel = True, excelbool = True):
		bool = False
		if self.GetControl(ID_TEXTCTRLRECIBOSELABORADOSFECHAINICIAL).GetValue():
			bool = True
		self.GetControl(ID_TEXTRECIBOSELABORADOSFECHAFINAL).Enable(bool)
		self.GetControl(ID_TEXTCTRLRECIBOSELABORADOSFECHAFINAL).Enable(bool)
		self.GetControl(ID_BITMAPBUTTONRECIBOSELABORADOSELEGIRFECHAFINAL).Enable(bool)
		self.GetControl(ID_BITMAPBUTTONRECIBOSELABORADOSLIMPIARFECHAFINAL).Enable(bool)
		bool = False
		if self.GetControl(ID_TEXTCTRLRECIBOSELABORADOSFECHAINICIALCAPTURA).GetValue():
			bool = True
		self.GetControl(ID_TEXTRECIBOSELABORADOSFECHAFINALCAPTURA).Enable(bool)
		self.GetControl(ID_TEXTCTRLRECIBOSELABORADOSFECHAFINALCAPTURA).Enable(bool)
		self.GetControl(ID_BITMAPBUTTONRECIBOSELABORADOSELEGIRFECHAFINALCAPTURA).Enable(bool)
		self.GetControl(ID_BITMAPBUTTONRECIBOSELABORADOSLIMPIARFECHAFINALCAPTURA).Enable(bool)
		if excel:
			self.GetControl(ID_BUTTONRECIBOSELABORADOSIMPRESION).Enable(excelbool)
			
	def OnImprimeRecibo(self, evt):
		if self.estatus == "A":
			if self.usuario in self.specialuser:
				if Mensajes().YesNo(self, u"� Desea imprimir el recibo %s ?\n\n%s" % (self.recibo, self.nombrecliente),
					            u"Confirmaci�n de Impresi�n"):
					self.ImprimeRecibo(codigorecibo = self.recibo)
					
	def ImprimeRecibo(self, codigorecibo):
		try:
			pisa
		except:
			Mensajes().Info(self, u"� Por favor instale el m�dulo pisa !", u"Aviso")
			return
		wx.BeginBusyCursor()
		try:
			gridcontenthtml = self.GetHtmlReciboFromGrid(consecutivorecibo = codigorecibo)
			if gridcontenthtml:
				archivo = self.GetPdfFileName("reciboiclar")
				gridcontenthtml = gridcontenthtml.encode("utf-8")
				pdf = pisa.CreatePDF(cStringIO.StringIO(gridcontenthtml), file(archivo, "wb"))
				if not pdf.err:
					try:
						pdf.dest.close()
					except:
						warnings.warn("<<pdf.dest.close() no se pudo.>>")
					try:
						os.startfile(str(archivo))
					except:
						os.system("open %s" % archivo)
						
						#commmand_line = "open %s" % archivo
						#p = subprocess.Popen(commmand_line, shell = True)
						#pid, sts = os.waitpid(p.pid, 0)						
						
			else:
				Mensajes().Info(self, u"� No se encontr� informaci�n referente al recibo !", u"Atenci�n")
		except:
			Mensajes().Info(self, u"� Se presento un problema al generar el recibo !", u"Atenci�n")
			
		wx.EndBusyCursor()
		
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
				
		return dato.strip()
		
	def GetHtmlReciboFromGrid(self, consecutivorecibo = 0):
		sql = """
		select convert(varchar(10), r.fechaemision, 103), r.abonocapital, r.interesmoratorio, r.totalrecibo, r.referencia,
		r.consdesarrollo, convert(varchar(10), r.fechacaptura, 103), c.codigo, c.fk_inmueble, c.fk_cliente, c.saldo,
		isnull(i.iden1, ''), isnull(i.iden2, ''), e.nombre, t.descripcion, o.descripcion
		from RECIBO r
		join MOVIMIENTO m on m.numrecibo = r.codigo
		join DOCUMENTO d on d.codigo = m.fk_documento
		join CUENTA c on c.codigo = d.fk_cuenta
		left join INMUEBLE i on i.codigo = c.fk_inmueble
		join CLIENTE e on e.codigo = c.fk_cliente
		join ETAPA t on t.codigo = c.fk_etapa
		join DESARROLLO o on o.codigo = t.fk_desarrollo
		where r.codigo = %s
		""" % consecutivorecibo
		sql = (sql.replace('\n', ' ')).replace('\t', ' ')
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row is not None:
			a = u"�"; e = u"�"; i = u"�"; o = u"�"; u = u"�"
			meses = ("", "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto",
			         "Septiembre", "Octubre", "Noviembre", "Diciembre")
			dia, mes, ano = row[0].split("/")
			fechaemision = "%s %s, %s" % (meses[int(mes)], dia, ano)
			abonocapital = float(row[1]); interesmoratorio = float(row[2]); totalrecibo = float(row[3])
			referencia = self.GetString(row[4]); consdesarrollo = int(row[5])
			fechaaplicacion = "X"
			if row[6]:
				dia, mes, ano = row[6].split("/")
				fechaaplicacion = "%s %s, %s" % (meses[int(mes)], dia, ano)
			cuenta = int(row[7]); inmueble = int(row[8]); cliente = int(row[9]); saldo = float(row[10])
			idinmueble = "%s %s - %s" % (self.GetString(row[11]), self.GetString(row[12]), self.GetString(row[14]))
			nombrecliente = self.GetString(row[13])
			desarrollo = self.GetString(row[15])
			aux = saldo + abonocapital
			saldoactual = "X"
			saldoposterior = "X"
			#saldoactual = str(amount_and_cents_with_commas(aux))
			#saldoposterior = str(amount_and_cents_with_commas(saldo))
			abonocapital = str(amount_and_cents_with_commas(abonocapital))
			interesmoratorio = str(amount_and_cents_with_commas(interesmoratorio))
			totalrecibo = str(amount_and_cents_with_commas(totalrecibo))
			
			header = """
			<table
			 style="width: 993px; height: 200px; text-align: left; margin-left: auto; margin-right: auto;"
			 border="0" cellpadding="2" cellspacing="2">
			  <tbody>
			    <tr>
			      <td style="text-align: center;">
			      <IMG SRC="images/LogoIclar.jpg" NAME="Logo" ALIGN=LEFT WIDTH=160 HEIGHT=160 BORDER=0>
			      </td>
			      <td style="text-align: center;"><big><big><span
			 style="font-weight: bold;"><big>Desarrolladora Urbana Integral,</big></span><br>
			      <span style="font-weight: bold;"><big>S.A. de C.V.</big></span><br><br>
			      </big><big style="font-weight: bold;"><big><small>""" + desarrollo + """</small></big></big></big></td>
			    </tr>
			  </tbody>
			</table>
			<div style="text-align: right;"><big><big>&nbsp;<span
			 style="font-weight: bold;">RECIBO:&nbsp;""" + str(consdesarrollo) + """</span></big></big><br>
			</div>
			<hr style="width: 100%; height: 2px;">
			<table style="text-align: left; width: 985px; height: 82px; margin-left: auto; margin-right: auto;"
			border="0" cellpadding="2" cellspacing="2">
			  <tbody>
			    <tr>
			      <td></td>
			      <td style="text-align: right; width: 190px;"><big>Cuenta:</big></td>
			      <td style="text-align: left; font-weight: bold; width: 183px;"><big>""" + str(cuenta) + """</big></td>
			      <td style="text-align: right; width: 219px;"><big>Fecha de Aplicaci""" + o + """n:</big></td>
			      <td style="font-weight: bold; width: 357px;"><big>""" + fechaaplicacion + """</big></td>
			      <td></td>
			    </tr>
			    <tr>
			      <td></td>
			      <td style="text-align: right; width: 190px;"><big>Inmueble:</big></td>
			      <td style="text-align: left; font-weight: bold; width: 183px;"><big>""" + str(inmueble) + """</big></td>
			      <td style="text-align: right; width: 219px;"><big>Id. del Inmueble:</big></td>
			      <td style="font-weight: bold; width: 357px"><big>""" + idinmueble + """</big></td>
			      <td></td>
			    </tr>
			    <tr>
			      <td></td>
			      <td style="text-align: right; width: 190px;"><big>Cliente:</big></td>
			      <td style="text-align: left; font-weight: bold; width: 183px;"><big>""" + str(cliente) + """</big></td>
			      <td style="text-align: right; width: 219px;"><big>Fecha de Pago:</big></td>
			      <td style="font-weight: bold; width: 357px"><big>""" + fechaemision + """</big></td>
			      <td></td>
			    </tr>
			  </tbody>
			</table>
			<br>
			<big>Nombre del Cliente: <span style="font-weight: bold;">""" + nombrecliente + """</span></big><br>
			<br>
			<div style="text-align: center;"><big>Saldo Actual:<span style="font-weight: bold;"> $""" + saldoactual + """</span>
			&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Saldo
			Posterior al Pago:<span style="font-weight: bold;">
			$""" + saldoposterior + """</span></big><br>
			</div>
			<hr style="height: 1px; width: 100%;" noshade="noshade">
			<div style="text-align: right;"><span
			 style="font-weight: bold; font-style: italic;"></span><span
			 style="font-weight: bold; font-style: italic;"></span><span
			 style="font-style: italic;"><span
			 style="font-weight: bold;">Movimiento&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp; &nbsp;&nbsp;&nbsp; Importe</span></span>&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp; <span
			 style="font-style: italic;"><span
			 style="font-weight: bold;">Mensualidad&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Mes a
			Pagar&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;</span></span>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span
			 style="font-style: italic;"><span
			 style="font-weight: bold;">&nbsp;&nbsp;&nbsp;&nbsp;
			Documento</span></span><br>
			<span style="font-style: italic;"><span
			 style="font-weight: bold;"></span></span></div>
			<span style="font-style: italic;"><span
			 style="font-weight: bold;"></span></span>
			<hr style="width: 100%; height: 2px;">
			"""
			
			sql = """
			select codigo, cantidad, relaciondepago, convert(varchar(10), fechavencimientodoc, 103), fk_documento
			from MOVIMIENTO
			where cargoabono = 'A' and fk_tipo = 4 and numrecibo = %s
			order by fechavencimientodoc
			""" % consecutivorecibo
			sql = (sql.replace('\n', ' ')).replace('\t', ' ')
			cu = r_cn.cursor()
			cu.execute(str(sql))
			rows = fetchall(cu)
			cu.close()
			detail = ""; detaillines = 12; cont = 0
			if rows:
				for cont, row in enumerate(rows):
					movimiento = str(row[0])
					importe = str(amount_and_cents_with_commas(row[1]))
					mensualidad = self.GetString(row[2])
					mesapagar = str(row[3])
					documento = str(row[4])
					line = """
					<table
					 style="text-align: left; margin-left: auto; margin-right: auto; width: 990px; height: 20px;"
					 border="0" cellpadding="2" cellspacing="2">
					  <tbody>
					    <tr>
					      <td style="width: 200px; text-align: right;"><big>""" + movimiento + """</big></td>
					      <td style="text-align: right;"><big>""" + importe + """</big></td>
					      <td style="text-align: center;"><big>""" + mensualidad + """</big></td>
					      <td style="text-align: center;"><big>""" + mesapagar + """</big></td>
					      <td style="text-align: right;"><big>""" + documento + """</big></td>
					    </tr>
					  </tbody>
					</table>
					"""
					detail += line
					
			if cont > 7: detaillines -= 1
			for aux in range(cont, detaillines):
				detail += "<br>"

			footer = """
			<big><br>
			</big><big>
			</big><big></big>
			<table
			 style="width: 981px; height: 76px; text-align: left; margin-left: auto; margin-right: 0px;"
			 border="0" cellpadding="2" cellspacing="2">
			  <tbody>
			    <tr>
			      <td></td>
			      <td></td>
			      <td></td>
			      <td style="text-align: right;"><big>Pago a Capital:</big></td>
			      <td style="text-align: right;"><big><span
			 style="font-weight: bold;">$""" + abonocapital + """</span></big></td>
			    </tr>
			    <tr>
			      <td></td>
			      <td></td>
			      <td></td>
			      <td style="text-align: right;"><big>Intereses Moratorios:</big></td>
			      <td style="text-align: right;"><big><span
			 style="font-weight: bold;">""" + interesmoratorio + """</span></big></td>
			    </tr>
			    <tr>
			      <td></td>
			      <td></td>
			      <td></td>
			      <td style="text-align: right;"><big>Total a Pagar:</big></td>
			      <td style="text-align: right;"><big><span
			 style="font-weight: bold;">$""" + totalrecibo + """</span></big></td>
			    </tr>
			  </tbody>
			</table>
			<big><span style="font-weight: bold;">
			</span></big>
			<hr style="width: 100%; height: 2px;"><big>Referencia:
			<span style="font-weight: bold;">""" + referencia + """</span><br>
			</big>
			<div style="text-align: right;"><big>Id. del Recibo:
			<span style="font-weight: bold;">""" + str(consecutivorecibo) + """</span></big><br>
			</div>
			<span style="font-style: italic;"><span
			 style="font-weight: bold;"><big>&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;</big>Firma del Cajero</span></span><br>
			<hr style="width: 100%; height: 2px;"><span
			 style="font-weight: bold;">Observaciones:</span><br>
			1) El pago deber""" + a + """ hacerse con deposito bancario seg""" + u + """n la referencia que
			le corresponda a su vivienda.<br>
			2) El horario de oficina es de 9:00 a 19:30 horas de Lunes a Sabado.<br>
			3) Si el d""" + i + """a de vencimiento es inh""" + a + """bil bancario, el pago deber""" + a + """ hacerse
			el d""" + i + """a h""" + a + """bil inmediato anterior.<br>
			4) Los intereses moratorios se calculan a la fecha de corte de """ + e + """ste
			estado de cuenta.<br>
			5)
			Favor de pagar con cheque cruzado a nombre de Desarrolladora Urbana Integral,
			S.A. de C.V. y """ + e + """ste recibo causar""" + a + """ efecto salvo buen cobro del cheque.<br>
			<hr style="width: 100%; height: 2px;">&nbsp;<span
			 style="font-style: italic; font-weight: bold;"></span><span
			 style="font-style: italic; font-weight: bold;"></span>
			"""

			bgnd = """
			<style>
			@page {
			  size: letter;
			  margin: 1cm;
			}
			</style>
			"""
			html = '<html>' + bgnd + '<head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /></head><body>' + \
			     header + detail + footer + '</body></html>'
			return html
		else:
			return ""
		
	def OnCancelarRecibo(self, evt):
		if self.usuario in self.specialuser:
			if Mensajes().YesNo(self, u"� Desea realmente cancelar el recibo %s ?\n\n%s" % (self.recibo, self.nombrecliente),
			                    u"Confirmaci�n de Cancelaci�n"):
				self.ImprimeCancelacion(codigorecibo = self.recibo)
				if Mensajes().YesNo(self, u"� Se imprimio correctamente el documento ?", u"Confirmaci�n"):
					self.CancelaRecibo(codigorecibo = self.recibo)
					self.FillListCtrl()
				else:
					Mensajes().Info(self, u"� No se cancelo el recibo !\n\n" \
					                u"Para cancelar es necesario imprimir correctamente el recibo.", u"Atenci�n")
					
	def CancelaRecibo(self, codigorecibo):
		try:
			cu = r_cn.cursor()
			sql = """
			select fk_documento, cantidad, convert(varchar(10), fechavencimientodoc, 111)
			from MOVIMIENTO where numrecibo = %s
			""" % codigorecibo
			sql = (sql.replace('\n', ' ')).replace('\t', ' ')
			cu.execute(sql)
			rows = fetchall(cu)
			if rows:
				for row in rows:
					fk_documento = int(row[0]); cantidad = float(row[1]); fechavencimientodoc = row[2]
					sql = """
					select d.cargo, d.abono, c.codigo, c.saldo
					from DOCUMENTO d join CUENTA c on d.fk_cuenta = c.codigo where d.codigo = %s
					""" % fk_documento
					sql = (sql.replace('\n', ' ')).replace('\t', ' ')
					cu.execute(str(sql))
					dato = fetchone(cu)
					abono = float(dato[1]) - cantidad; saldo = float(dato[0]) - abono
					cuenta = int(dato[2]); saldocuenta = float(dato[3]) + cantidad
					fechadevencimientovar = fechavencimientodoc
					sql = """
					update DOCUMENTO set saldo = %s, abono = %s, fechadevencimientovar = '%s' where codigo = %s
					""" % (saldo, abono, fechadevencimientovar, fk_documento)
					sql = (sql.replace('\n', ' ')).replace('\t', ' ')
					cu.execute(str(sql))
					sql = "update CUENTA set saldo = %s where codigo = %s" % (saldocuenta, cuenta)
					cu.execute(str(sql))
					
				sql = "delete from MOVIMIENTO where numrecibo = %s" % codigorecibo
				cu.execute(str(sql))
				sql = "update RECIBO set status = 'C' where codigo = %s" % codigorecibo
				cu.execute(str(sql))
				cu.close()
				r_cn.commit()
				Mensajes().Info(self, u"� El recibo %s ha sido cancelado !" % codigorecibo, u"Atenci�n")
			else:
				Mensajes().Info(self, u"� No se cancelo el recibo !\n\n" \
				                u"No se encontraron movimientos del recibo", u"Atenci�n")
				cu.close()
		except:
			r_cn.rollback()
			Mensajes().Info(self, u"� No se cancelo el recibo !\n\n" \
		                        u"Se experimentaron problemas con el coordinador central.", u"Atenci�n")
			
	def ImprimeCancelacion(self, codigorecibo):
		try:
			pisa
		except:
			Mensajes().Info(self, u"� Por favor instale el m�dulo pisa !", u"Aviso")
			return
		wx.BeginBusyCursor()
		try:
			gridcontenthtml = self.GetHtmlCancelacionFromGrid(consecutivorecibo = codigorecibo)
			if gridcontenthtml:
				archivo = self.GetPdfFileName("cancelreciboiclar")
				gridcontenthtml = gridcontenthtml.encode("utf-8")
				pdf = pisa.CreatePDF(cStringIO.StringIO(gridcontenthtml), file(archivo, "wb"))
				if not pdf.err:
					try:
						pdf.dest.close()
					except:
						warnings.warn("<<pdf.dest.close() no se pudo.>>")
					try:
						os.startfile(str(archivo))
					except:
						os.system("open %s" % archivo)
						
						#commmand_line = "open %s" % archivo
						#p = subprocess.Popen(commmand_line, shell = True)
						#pid, sts = os.waitpid(p.pid, 0)						
						
			else:
				Mensajes().Info(self, u"� No se encontr� informaci�n referente al recibo !", u"Atenci�n")
		except:
			Mensajes().Info(self, u"� Se presento un problema al generar la cancelaci�n !", u"Atenci�n")
			
		wx.EndBusyCursor()
		
	def GetHtmlCancelacionFromGrid(self, consecutivorecibo = 0):
		sql = """
		select convert(varchar(10), r.fechaemision, 103), r.abonocapital, r.interesmoratorio, r.totalrecibo, r.referencia,
		r.consdesarrollo, convert(varchar(10), r.fechacaptura, 103), c.codigo, c.fk_inmueble, c.fk_cliente, c.saldo,
		isnull(i.iden1, ''), isnull(i.iden2, ''), e.nombre, t.descripcion, o.descripcion,
		convert(varchar(10), getdate(), 103)
		from RECIBO r
		join MOVIMIENTO m on m.numrecibo = r.codigo
		join DOCUMENTO d on d.codigo = m.fk_documento
		join CUENTA c on c.codigo = d.fk_cuenta
		left join INMUEBLE i on i.codigo = c.fk_inmueble
		join CLIENTE e on e.codigo = c.fk_cliente
		join ETAPA t on t.codigo = c.fk_etapa
		join DESARROLLO o on o.codigo = t.fk_desarrollo
		where r.codigo = %s
		""" % consecutivorecibo
		sql = (sql.replace('\n', ' ')).replace('\t', ' ')
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row is not None:
			a = u"�"; e = u"�"; i = u"�"; o = u"�"; u = u"�"
			meses = ("", "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto",
			         "Septiembre", "Octubre", "Noviembre", "Diciembre")
			dia, mes, ano = row[0].split("/")
			fechaemision = "%s %s, %s" % (meses[int(mes)], dia, ano)
			abonocapital = float(row[1]); interesmoratorio = float(row[2]); totalrecibo = float(row[3])
			referencia = self.GetString(row[4]); consdesarrollo = int(row[5])
			fechaaplicacion = "X"
			if row[6]:
				dia, mes, ano = row[6].split("/")
				fechaaplicacion = "%s %s, %s" % (meses[int(mes)], dia, ano)
			cuenta = int(row[7]); inmueble = int(row[8]); cliente = int(row[9]); saldo = float(row[10])
			idinmueble = "%s %s - %s" % (self.GetString(row[11]), self.GetString(row[12]), self.GetString(row[14]))
			nombrecliente = self.GetString(row[13])
			desarrollo = self.GetString(row[15])
			dia, mes, ano = row[16].split("/")
			fechacancelacion = "%s %s, %s" % (meses[int(mes)], dia, ano)
			aux = saldo + abonocapital
			saldoactual = "X"
			saldoposterior = "X"
			#saldoactual = str(amount_and_cents_with_commas(aux))
			#saldoposterior = str(amount_and_cents_with_commas(saldo))
			abonocapital = str(amount_and_cents_with_commas(abonocapital))
			interesmoratorio = str(amount_and_cents_with_commas(interesmoratorio))
			totalrecibo = str(amount_and_cents_with_commas(totalrecibo))
			
			header = """
			<table
			 style="width: 993px; height: 200px; text-align: left; margin-left: auto; margin-right: auto;"
			 border="0" cellpadding="2" cellspacing="2">
			  <tbody>
			    <tr>
			      <td style="text-align: center;">
			      <IMG SRC="images/LogoIclar.jpg" NAME="Logo" ALIGN=LEFT WIDTH=160 HEIGHT=160 BORDER=0>
			      </td>
			      <td style="text-align: center;"><big><big><span
			 style="font-weight: bold;">Desarrolladora Urbana Integral, S.A. de C.V.</span><br>
			      <span style="font-weight: bold;"><big></big></span><br>
			      </big><big style="font-weight: bold;"><small>""" + desarrollo + """</small></big></big></td>
			    </tr>
			  </tbody>
			</table>
			<div style="text-align: right;"><big><big>&nbsp;<span
			 style="font-weight: bold;">CANCELACION DEL RECIBO:&nbsp;""" + str(consdesarrollo) + """</span></big></big><br>
			</div>
			<hr style="width: 100%; height: 2px;">
			<table style="text-align: left; width: 985px; height: 82px; margin-left: auto; margin-right: auto;"
			border="0" cellpadding="2" cellspacing="2">
			  <tbody>
			    <tr>
			      <td></td>
			      <td style="text-align: right; width: 190px;"><big>Cuenta:</big></td>
			      <td style="text-align: left; font-weight: bold; width: 183px;"><big>""" + str(cuenta) + """</big></td>
			      <td style="text-align: right; width: 219px;"><big>Fecha de Aplicaci""" + o + """n:</big></td>
			      <td style="font-weight: bold; width: 357px;"><big>""" + fechaaplicacion + """</big></td>
			      <td></td>
			    </tr>
			    <tr>
			      <td></td>
			      <td style="text-align: right; width: 190px;"><big>Inmueble:</big></td>
			      <td style="text-align: left; font-weight: bold; width: 183px;"><big>""" + str(inmueble) + """</big></td>
			      <td style="text-align: right; width: 219px;"><big>Id. del Inmueble:</big></td>
			      <td style="font-weight: bold; width: 357px"><big>""" + idinmueble + """</big></td>
			      <td></td>
			    </tr>
			    <tr>
			      <td></td>
			      <td style="text-align: right; width: 190px;"><big>Cliente:</big></td>
			      <td style="text-align: left; font-weight: bold; width: 183px;"><big>""" + str(cliente) + """</big></td>
			      <td style="text-align: right; width: 219px;"><big>Fecha de Pago:</big></td>
			      <td style="font-weight: bold; width: 357px"><big>""" + fechaemision + """</big></td>
			      <td></td>
			    </tr>
			  </tbody>
			</table>
			<br>
			<big>Nombre del Cliente: <span style="font-weight: bold;">""" + nombrecliente + """</span></big><br>
			<br>
			<div style="text-align: right;"><big>Fecha de Cancelaci""" + o + """n:<span style="font-weight: bold;"> """ + fechacancelacion + """</span>
			</big><br>
			</div>
			<hr style="height: 1px; width: 100%;" noshade="noshade">
			<div style="text-align: right;"><span
			 style="font-weight: bold; font-style: italic;"></span><span
			 style="font-weight: bold; font-style: italic;"></span><span
			 style="font-style: italic;"><span
			 style="font-weight: bold;">Movimiento&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp; &nbsp;&nbsp;&nbsp; Importe</span></span>&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp; <span
			 style="font-style: italic;"><span
			 style="font-weight: bold;">Mensualidad&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Mes Pagado
			&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;</span></span>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span
			 style="font-style: italic;"><span
			 style="font-weight: bold;">&nbsp;&nbsp;&nbsp;&nbsp;
			Documento</span></span><br>
			<span style="font-style: italic;"><span
			 style="font-weight: bold;"></span></span></div>
			<span style="font-style: italic;"><span
			 style="font-weight: bold;"></span></span>
			<hr style="width: 100%; height: 2px;">
			"""
			
			sql = """
			select codigo, cantidad, relaciondepago, convert(varchar(10), fechavencimientodoc, 103), fk_documento
			from MOVIMIENTO
			where cargoabono = 'A' and fk_tipo = 4 and numrecibo = %s
			order by fechavencimientodoc
			""" % consecutivorecibo
			sql = (sql.replace('\n', ' ')).replace('\t', ' ')
			cu = r_cn.cursor()
			cu.execute(str(sql))
			rows = fetchall(cu)
			cu.close()
			detail = ""; detaillines = 15; cont = 0
			if rows:
				for cont, row in enumerate(rows):
					movimiento = str(row[0])
					importe = str(amount_and_cents_with_commas(row[1]))
					mensualidad = self.GetString(row[2])
					mesapagar = str(row[3])
					documento = str(row[4])
					line = """
					<table
					 style="text-align: left; margin-left: auto; margin-right: auto; width: 990px; height: 20px;"
					 border="0" cellpadding="2" cellspacing="2">
					  <tbody>
					    <tr>
					      <td style="width: 200px; text-align: right;"><big>""" + movimiento + """</big></td>
					      <td style="text-align: right;"><big>""" + importe + """</big></td>
					      <td style="text-align: center;"><big>""" + mensualidad + """</big></td>
					      <td style="text-align: center;"><big>""" + mesapagar + """</big></td>
					      <td style="text-align: right;"><big>""" + documento + """</big></td>
					    </tr>
					  </tbody>
					</table>
					"""
					detail += line
					
			if cont > 7: detaillines -= 1
			for aux in range(cont, detaillines):
				detail += "<br>"

			footer = """
			<big><br>
			</big><big>
			</big><big></big>
			<table
			 style="width: 981px; height: 76px; text-align: left; margin-left: auto; margin-right: 0px;"
			 border="0" cellpadding="2" cellspacing="2">
			  <tbody>
			    <tr>
			      <td></td>
			      <td></td>
			      <td></td>
			      <td style="text-align: right;"><big>Pagado a Capital:</big></td>
			      <td style="text-align: right;"><big><span
			 style="font-weight: bold;">$""" + abonocapital + """</span></big></td>
			    </tr>
			    <tr>
			      <td></td>
			      <td></td>
			      <td></td>
			      <td style="text-align: right;"><big>Intereses Moratorios:</big></td>
			      <td style="text-align: right;"><big><span
			 style="font-weight: bold;">""" + interesmoratorio + """</span></big></td>
			    </tr>
			    <tr>
			      <td></td>
			      <td></td>
			      <td></td>
			      <td style="text-align: right;"><big>Total Cancelado:</big></td>
			      <td style="text-align: right;"><big><span
			 style="font-weight: bold;">$""" + totalrecibo + """</span></big></td>
			    </tr>
			  </tbody>
			</table>
			<big><span style="font-weight: bold;">
			</span></big>
			<hr style="width: 100%; height: 2px;"><big>Referencia:
			<span style="font-weight: bold;">""" + referencia + """</span><br>
			</big>
			<div style="text-align: right;"><big>Id. del Recibo:
			<span style="font-weight: bold;">""" + str(consecutivorecibo) + """</span></big><br><br><br><br><br><br><br>
			</div>
			<span style="font-style: italic;"><span
			 style="font-weight: bold;"><big>&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;
			Elaboro Cancelaci""" + o + """n</big></span></span><br>
			<hr style="width: 100%; height: 2px;">
			"""
			
			bgnd = """
			<style>
			@page {
			  size: letter;
			  margin: 1cm;
			  background-image: url(images/Cancelado.pdf);
			}
			</style>
			"""
			html = '<html>' + bgnd + '<head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /></head><body>' + \
			     header + detail + footer + '</body></html>'
			return html
		else:
			return ""
				
class GixReporteRecibosPinares(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Recibos Elaborados - Pinares Tapalpa", pos = wx.DefaultPosition,
				 size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE, usuario = None):
		
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.lstctrlorder = {0:("r.codigo","desc",""), 1:("r.fechaaplicacion","desc","> "), 2:("r.fechaemision","desc",""),
				3:("r.abonocapital","desc",""), 4:("r.interesmoratorio","desc",""), 5:("r.totalrecibo","desc",""),
				6:("i.iden1","desc",""), 7:("i.iden2","desc",""), 8:("e.nombre","desc",""),
				9:("t.descripcion","desc",""), 10:("s.descripcion","desc","")}
		self.DicDatesAndTxt = {ID_BITMAPBUTTONRECIBOSPINARESELEGIRFECHAINICIAL : ID_TEXTCTRLRECIBOSPINARESFECHAINICIAL,
				       ID_BITMAPBUTTONRECIBOSPINARESELEGIRFECHAFINAL: ID_TEXTCTRLRECIBOSPINARESFECHAFINAL,
				       ID_BITMAPBUTTONRECIBOSPINARESELEGIRFECHAINICIALCAPTURA : ID_TEXTCTRLRECIBOSPINARESFECHAINICIALCAPTURA,
				       ID_BITMAPBUTTONRECIBOSPINARESELEGIRFECHAFINALCAPTURA : ID_TEXTCTRLRECIBOSPINARESFECHAFINALCAPTURA}
		self.referenciatup = ("NINGUNA", "NIGUNA", "Ninguna")
		self.Fill = True
		self.cliente, self.etapa, self.desarrollo = "","",""
		self.currentitem, self.recibo = 0, 0
		ReporteRecibosElaboradosPinares(self, True)
		self.GetControl(ID_TEXTCTRLRECIBOSPINARESFECHAINICIALCAPTURA).SetValue(self.GetTodayDate())
		self.colprev, self.colsort = 1, 1
		self.lstctrlsort = "r.fechaaplicacion desc"
		self.choicefiltroestatus = {0:"", 1:" and r.status = 'A' ", 2:" and r.status = 'C' "}
		self.choiceinxestatus = 1
		self.GetControl(ID_CHOICERECIBOSPINARESESTATUS).SetSelection(self.choiceinxestatus)
		self.GetControl(ID_FOREIGNRECIBOSPINARESFILTROCLIENTE).ShowCancelButton(True)
		self.GetControl(ID_FOREIGNRECIBOSPINARESFILTROETAPA).ShowCancelButton(True)
		self.GetControl(ID_FOREIGNRECIBOSPINARESFILTRODESARROLLO).ShowCancelButton(True)
		for v in self.DicDatesAndTxt.keys():
			self.Bind(wx.EVT_BUTTON, self.OnFechaButton, id = v )
			
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONRECIBOSPINARESLIMPIARFECHAINICIAL, self.OnLimpiaFecha)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONRECIBOSPINARESLIMPIARFECHAFINAL, self.OnLimpiaFecha)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLRECIBOSPINARESFECHAINICIAL)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLRECIBOSPINARESFECHAFINAL)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONRECIBOSPINARESLIMPIARFECHAINICIALCAPTURA, self.OnLimpiaFecha)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONRECIBOSPINARESLIMPIARFECHAFINALCAPTURA, self.OnLimpiaFecha)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLRECIBOSPINARESFECHAINICIALCAPTURA)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLRECIBOSPINARESFECHAFINALCAPTURA)
		self.Bind(wx.EVT_CHOICE, self.OnChoiceCtrlEstatus, id = ID_CHOICERECIBOSPINARESESTATUS)
		wx.EVT_BUTTON(self, ID_BUTTONRECIBOSPINARESDETALLE, self.OnImprimirRecibo)
		wx.EVT_BUTTON(self, ID_BUTTONRECIBOSPINARESIMPRESION, self.OnExcel)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchCliente, id = ID_FOREIGNRECIBOSPINARESFILTROCLIENTE)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanCliente, id = ID_FOREIGNRECIBOSPINARESFILTROCLIENTE)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchCliente, id = ID_FOREIGNRECIBOSPINARESFILTROCLIENTE)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchEtapa, id = ID_FOREIGNRECIBOSPINARESFILTROETAPA)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanEtapa, id = ID_FOREIGNRECIBOSPINARESFILTROETAPA)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchEtapa, id = ID_FOREIGNRECIBOSPINARESFILTROETAPA)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchDesarrollo, id = ID_FOREIGNRECIBOSPINARESFILTRODESARROLLO)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanDesarrollo, id = ID_FOREIGNRECIBOSPINARESFILTRODESARROLLO)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchDesarrollo, id = ID_FOREIGNRECIBOSPINARESFILTRODESARROLLO)
		self.Bind(wx.EVT_LIST_COL_CLICK, self.OnSortListCtrl, id = ID_LISTCTRLRECIBOSPINARES)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelected, id = ID_LISTCTRLRECIBOSPINARES)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselected, id = ID_LISTCTRLRECIBOSPINARES)
		self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnImprimirRecibo, id = ID_LISTCTRLRECIBOSPINARES)
		wx.EVT_BUTTON(self, ID_BUTTONRECIBOSPINARESSALIR, self.OnClose)
		wx.EVT_CLOSE(self, self.OnClose)
		self.GetControl(ID_LISTCTRLRECIBOSPINARES).SetFocus()
		self.FillListCtrl()
		
	def GetTodayDate(self):
		sql = "select convert(varchar(10), getdate(), 103)"
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		return str(row[0])
		
	def OnClose(self, evt):
	        self.EndModal(1)
		self.Destroy()
		
	def OnChoiceCtrlEstatus(self, evt):
		self.choiceinxestatus = self.GetControl(ID_CHOICERECIBOSPINARESESTATUS).GetSelection()
		self.FillListCtrl()
		self.GetControl(ID_LISTCTRLRECIBOSPINARES).SetFocus()
		
	def OnText(self, evt):
		if self.Fill:
			id = evt.GetId()
			if id == ID_TEXTCTRLRECIBOSPINARESFECHAINICIAL:
				self.Habilita(False)
			elif id == ID_TEXTCTRLRECIBOSPINARESFECHAINICIALCAPTURA:
				self.Habilita(False)
			self.FillListCtrl()
		
	def OnLimpiaFecha(self, evt):
		self.Fill = False
		id = evt.GetId()
		if id == ID_BITMAPBUTTONRECIBOSPINARESLIMPIARFECHAINICIAL:
			self.GetControl(ID_TEXTCTRLRECIBOSPINARESFECHAINICIAL).SetValue("")
			self.GetControl(ID_TEXTCTRLRECIBOSPINARESFECHAFINAL).SetValue("")
			self.Habilita(False)
		elif id == ID_BITMAPBUTTONRECIBOSPINARESLIMPIARFECHAFINAL:
			self.GetControl(ID_TEXTCTRLRECIBOSPINARESFECHAFINAL).SetValue("")
		elif id == ID_BITMAPBUTTONRECIBOSPINARESLIMPIARFECHAINICIALCAPTURA:
			self.GetControl(ID_TEXTCTRLRECIBOSPINARESFECHAINICIALCAPTURA).SetValue("")
			self.GetControl(ID_TEXTCTRLRECIBOSPINARESFECHAFINALCAPTURA).SetValue("")
			self.Habilita(False)
		else:
			self.GetControl(ID_TEXTCTRLRECIBOSPINARESFECHAFINALCAPTURA).SetValue("")
		self.Fill = True
		self.FillListCtrl()
		
	def OnSelected(self, evt):
		self.currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLRECIBOSPINARES).GetItem(self.currentitem, 0).GetText()
		self.consecutivorecibo = int(datointerno)
		self.GetControl(ID_BUTTONRECIBOSPINARESDETALLE).Enable(True)
		
	def OnDeselected(self, evt):
		self.currentitem, self.consecutivorecibo = 0, 0
		self.GetControl(ID_BUTTONRECIBOSPINARESDETALLE).Enable(False)
	
	def OnActivated(self, evt):
		pass
		
	def OnSortListCtrl(self, evt):
		self.colsort = evt.GetColumn()
		if self.lstctrlorder[self.colsort][1] == "desc":
			self.lstctrlsort = "%s asc" % self.lstctrlorder[self.colsort][0]
			self.lstctrlorder[self.colsort] = (self.lstctrlorder[self.colsort][0], "asc", "< ")
		else:
			self.lstctrlsort = "%s desc" % self.lstctrlorder[self.colsort][0]
			self.lstctrlorder[self.colsort] = (self.lstctrlorder[self.colsort][0], "desc", "> ")
		if self.colprev != self.colsort:
			self.lstctrlorder[self.colprev] = (self.lstctrlorder[self.colprev][0], self.lstctrlorder[self.colprev][1], "")
		self.FillListCtrl()
		self.colprev = self.colsort
		evt.Skip()
		
	def OnDoSearchCliente(self, evt):
		self.cliente =  self.GetControl(ID_FOREIGNRECIBOSPINARESFILTROCLIENTE).GetValue()
		self.FillListCtrl()

	def OnCleanCliente(self, evt):
		self.GetControl(ID_FOREIGNRECIBOSPINARESFILTROCLIENTE).SetValue("")
		self.cliente = ""
		self.FillListCtrl()

	def OnDoSearchEtapa(self, evt):
		self.etapa =  self.GetControl(ID_FOREIGNRECIBOSPINARESFILTROETAPA).GetValue()
		self.FillListCtrl()

	def OnCleanEtapa(self, evt):
		self.GetControl(ID_FOREIGNRECIBOSPINARESFILTROETAPA).SetValue("")
		self.etapa = ""
		self.FillListCtrl()

	def OnDoSearchDesarrollo(self, evt):
		self.desarrollo =  self.GetControl(ID_FOREIGNRECIBOSPINARESFILTRODESARROLLO).GetValue()
		self.FillListCtrl()

	def OnCleanDesarrollo(self, evt):
		self.GetControl(ID_FOREIGNRECIBOSPINARESFILTRODESARROLLO).SetValue("")
		self.desarrollo = ""
		self.FillListCtrl()

	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
				
		return dato.strip()
		
	def OnPrintExcel(self, event):
		tabla = "RECIBO"
		meta = ((14,"Recibo") , (70,u"Aplicaci�n"), (70,u"Emisi�n"), (20,u"Abono"), (20,u"Interes"),
				(20, "Total"), (70,u"Lote"), (70,u"Manzana"), (100, "Nombre"), (100,u"Etapa"), (100,u"Desarrollo"))
		query = self.FillListCtrl(printexcel = True)
		titulo = u"Reporte de Recibos Elaborados - Pinares Tapalpa"
		cu = r_cngcmex.cursor()
		self.DisplayGrid(tabla, meta, query, titulo, cu)
		cu.close()
		
		#tabla = "CLIENTE"   # reporte clientes pinares
		#meta = ((14,u"C�digo") , (70,u"Nombre"), (70,u"Domicilio"), (20,u"Colonia"), (20,u"C�digo Postal"),
		        #(20, "Ciudad"), (70,u"Estado"), (70,u"Tel�fono Casa"), (100, u"Tel�fono Trabajo"))
		#query = """
		#select codigo, nombre, domicilio, colonia, cp, ciudad, estado, telefonocasa, telefonotrabajo
		#from CLIENTE order by nombre
		#"""
		#titulo = u"Reporte de Clientes - Pinares Tapalpa"
		#cu = r_cngcmex.cursor()
		#self.DisplayGrid(tabla, meta, query, titulo, cu)
		#cu.close()
		
	def SetExcelWorkbook(self, excel = "aexcel.xls"):
		todobien = True
		self.excel = excel
		if wx.Platform == '__WXMSW__':
			key = _winreg.OpenKey( _winreg.HKEY_CURRENT_USER,
			                       "Software\\Microsoft\\Windows\\CurrentVersion\Explorer\\Shell Folders")
			ruta = _winreg.QueryValueEx( key, 'Personal')[0]
			_winreg.CloseKey( key )
		else:
			ruta = os.getenv("HOME")
			
		dlg = wx.FileDialog(None, message = "Guardar como...", defaultDir = ruta, defaultFile = self.excel,
		                    wildcard ="*.xls", style = wx.SAVE | wx.FD_OVERWRITE_PROMPT) #| wx.CHANGE_DIR)
		
		if dlg.ShowModal() == wx.ID_OK:
			self.excel = dlg.GetPath().encode("iso8859-1")
		else:
			todobien = False
			
		dlg.Destroy()
		
		return todobien

	def GenerateExcelWithXle(self, rows = None):
		columnas = ((2000, u"Recibo") , (3000, u"Aplicaci�n"), (3000, u"Emisi�n"), (3500, u"Abono"), (3500, u"Interes"),
		            (3500, u"Total"), (2000, u"Lote"), (2000, u"Manzana"), (12000, u"Nombre"), (5000, u"Etapa"),
		            (5000, u"Desarrollo"))

		workbook = xle.Workbook()
		worksheet = workbook.add_sheet("Recibos")
		worksheet.set_header_str("Recibos Elaborados - Pinares Tapalpa")
		for columna, detalle in enumerate(columnas):
			worksheet.col(columna).width = detalle[0]
			worksheet.write(0, columna, detalle[1])
			
		alc = xle.Alignment()
		alc.horz = xle.Alignment.HORZ_CENTER
		alr = xle.Alignment()
		alr.horz = xle.Alignment.HORZ_RIGHT
		fnt = xle.Font()
		fnt.bold = True
		fnt.italic = True
		style = xle.XFStyle()
		style.alignment = alc
		style.font = fnt
		worksheet.row(0).set_style(style)
		
		date_style = xle.XFStyle()
		date_style.alignment = alc
		date_style.num_format_str = "M/D/YY"

		num_style = xle.XFStyle()
		num_style.alignment = alc
		num_style.num_format_str = "0"
		
		gral_style = xle.XFStyle()
		gral_style.alignment = alc
		
		float_style = xle.XFStyle()
		float_style.alignment = alr
		#float_style.num_format_str = "0.00"
		
		progreso = 0
		signo = u"%"
		for fila, row in enumerate(rows):
			progreso += 1
			avance = (progreso * 100) / len(rows)
			mensaje = u"Progreso %s%s" % (avance, signo)
			self.dlgProgreso.Update(progreso, newmsg = mensaje)
			worksheet.write(fila + 1, 0, str(int(row[0])), num_style)
			worksheet.write(fila + 1, 1, str(row[1]), date_style)
			worksheet.write(fila + 1, 2, str(row[2]), date_style)
			worksheet.write(fila + 1, 3, str(amount_and_cents_with_commas(float(row[3]))), float_style)
			worksheet.write(fila + 1, 4, str(amount_and_cents_with_commas(float(row[4]))), float_style)
			worksheet.write(fila + 1, 5, str(amount_and_cents_with_commas(float(row[5]))), float_style)
			worksheet.write(fila + 1, 6, self.GetString(row[6]), gral_style)
			worksheet.write(fila + 1, 7, self.GetString(row[7]), gral_style)
			worksheet.write(fila + 1, 8, self.GetString(row[8]))
			worksheet.write(fila + 1, 9, self.GetString(row[9]))
			worksheet.write(fila + 1, 10, self.GetString(row[10]))
				
		workbook.save(self.excel)

	def OnExcel(self, evt):
		rows = self.FillListCtrl(printexcel = True)
		if rows:
			if self.SetExcelWorkbook("gixreport.xls"):
				continua = True
				try:
					xle
				except:
					continua = False
					Mensajes().Info(self, u"Por favor instale el m�dulo pyExcelerator", u"Atenci�n")
					
				if continua:
					wx.BeginBusyCursor()
					self.dlgProgreso = wx.ProgressDialog(u"Generando Archivo de Excel", u"Progreso",
						                        maximum = len(rows),
						                        style = wx.PD_AUTO_HIDE | wx.PD_APP_MODAL | wx.PD_SMOOTH | \
						                        wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_REMAINING_TIME)
					self.GenerateExcelWithXle(rows)
					self.dlgProgreso.Destroy()
					wx.EndBusyCursor()
		else:
			Mensajes().Info(self, u"No hay nada que enviar a Excel", u"Atenci�n")
			
	def FillListCtrl(self, printexcel = False):
		if not self.Fill:
			return
		fechafiltro = self.GetControl(ID_TEXTCTRLRECIBOSPINARESFECHAINICIALCAPTURA).GetValue()
		fechacaptura = ""
		if fechafiltro:
			try:
				fecha_dia, fecha_mes, fecha_ano = \
						 self.GetControl(ID_TEXTCTRLRECIBOSPINARESFECHAINICIALCAPTURA).GetValue().split('/')
				fechainicial = "'%s/%02d/%02d'" % (fecha_ano, int(fecha_mes), int(fecha_dia))
				fecharango = self.GetControl(ID_TEXTCTRLRECIBOSPINARESFECHAFINALCAPTURA).GetValue()
				if fecharango:
					rango_dia, rango_mes, rango_ano = \
							 self.GetControl(ID_TEXTCTRLRECIBOSPINARESFECHAFINALCAPTURA).GetValue().split('/')
					fechafinal = "'%s/%02d/%02d'" % (rango_ano, int(rango_mes), int(rango_dia))
					if fechainicial > fechafinal:
						Mensajes().Info(self, u"La Fecha Inicial de Captura no debe ser mayor a la Fecha Final.\n\n" \
										u"Se tomar� en cuenta unicamente la fecha inicial.", u"Atenci�n")
						self.GetControl(ID_TEXTCTRLRECIBOSPINARESFECHAFINALCAPTURA).SetValue("")
						return
					else:
						fechacaptura = """
						and (convert(varchar(10), r.fechaaplicacion, 111) >= %s
						and convert(varchar(10), r.fechaaplicacion, 111) <= %s)
						""" % (fechainicial, fechafinal)
				else:
					fechacaptura = " and convert(varchar(10), r.fechaaplicacion, 111) = %s " % fechainicial
			except:
				fechacaptura = ""
		fechafiltro = self.GetControl(ID_TEXTCTRLRECIBOSPINARESFECHAINICIAL).GetValue()
		fechamovto = ""
		if fechafiltro:
			try:
				fecha_dia, fecha_mes, fecha_ano = \
						 self.GetControl(ID_TEXTCTRLRECIBOSPINARESFECHAINICIAL).GetValue().split('/')
				fechainicial = "'%s/%02d/%02d'" % (fecha_ano, int(fecha_mes), int(fecha_dia))
				fecharango = self.GetControl(ID_TEXTCTRLRECIBOSPINARESFECHAFINAL).GetValue()
				if fecharango:
					rango_dia, rango_mes, rango_ano = \
							 self.GetControl(ID_TEXTCTRLRECIBOSPINARESFECHAFINAL).GetValue().split('/')
					fechafinal = "'%s/%02d/%02d'" % (rango_ano, int(rango_mes), int(rango_dia))
					if fechainicial > fechafinal:
						Mensajes().Info(self, u"La Fecha Inicial de Emisi�n no debe ser mayor a la Fecha Final.\n\n" \
										u"Se tomar� en cuenta unicamente la fecha inicial.", u"Atenci�n")
						self.GetControl(ID_TEXTCTRLRECIBOSPINARESFECHAFINAL).SetValue("")
						return
					else:
						fechamovto = """
						and (convert(varchar(10), r.fechaemision, 111) >= %s
						and convert(varchar(10), r.fechaemision, 111) <= %s)
						""" % (fechainicial, fechafinal)
				else:
					fechamovto = " and convert(varchar(10), r.fechaemision, 111) = %s " % fechainicial
			except:
				fechamovto = ""
		if printexcel:
			query = """
			select distinct r.codigo, convert(varchar(10), r.fechaaplicacion, 103), convert(varchar(10), r.fechaemision, 103),
			r.abonocapital, r.interesmoratorio, r.totalrecibo, isnull(i.iden1, ''), isnull(i.iden2, ''),
			isnull(rtrim(ltrim(e.nombre)), ''), isnull(rtrim(ltrim(t.descripcion)), ''),
			isnull(rtrim(ltrim(s.descripcion)), '')
			from RECIBO r left join MOVIMIENTO m on r.codigo = m.numrecibo
			left join DOCUMENTO d on m.fk_documento = d.codigo
			left join CUENTA c on d.fk_cuenta = c.codigo
			left join CLIENTE e on c.fk_cliente = e.codigo
			left join DESARROLLO s on r.fk_desarrollo = s.codigo
			left join INMUEBLE i on c.fk_inmueble = i.codigo
			left join ETAPA t on i.fk_etapa = t.codigo
			where (e.nombre like '%s' or e.nombre is null) and
			(t.descripcion like '%s' or t.descripcion is null) and
			(s.descripcion like '%s' or s.descripcion is null) """ + \
				  str(self.choicefiltroestatus[self.choiceinxestatus]) + fechacaptura + fechamovto
			cliente, etapa, desarrollo = '%%', '%%', '%%'
			if self.cliente:
				cliente = '%s%s%s' % ("%%", self.cliente, "%%")
			if self.etapa:
				etapa = '%s%s%s' % ("%%", self.etapa, "%%")
			if self.desarrollo:
				desarrollo = '%s%s%s' % ("%%", self.desarrollo, "%%")
			sql = (query % (cliente, etapa, desarrollo))
			sqlx = sql.replace('\t', ' ')
			sql = sqlx.replace('\n', ' ')
			cu = r_cngcmex.cursor()
			cu.execute(str(sql))
			rows = fetchall(cu)
			cu.close()
			return rows
		
		warnings.warn("<<fecha captura %s>>" % fechacaptura)
		lctrl = self.GetControl(ID_LISTCTRLRECIBOSPINARES)
		#lctrl.Enable(False)
		#lctrl.Show(False)
		lctrl.ClearAll()
		query = """
		select r.codigo, convert(varchar(10), r.fechaaplicacion, 103), convert(varchar(10), r.fechaemision, 103),
		r.abonocapital, r.interesmoratorio, r.totalrecibo, isnull(i.iden1, ''), isnull(i.iden2, ''),
		isnull(rtrim(ltrim(e.nombre)), ''), isnull(rtrim(ltrim(t.descripcion)), ''),
		isnull(rtrim(ltrim(s.descripcion)), ''), r.status
		from RECIBO r left join MOVIMIENTO m on r.codigo = m.numrecibo
		left join DOCUMENTO d on m.fk_documento = d.codigo
		left join CUENTA c on d.fk_cuenta = c.codigo
		left join CLIENTE e on c.fk_cliente = e.codigo
		left join DESARROLLO s on r.fk_desarrollo = s.codigo
		left join INMUEBLE i on c.fk_inmueble = i.codigo
		left join ETAPA t on i.fk_etapa = t.codigo
		where (e.nombre like '%s' or e.nombre is null) and
		(t.descripcion like '%s' or t.descripcion is null) and
		(s.descripcion like '%s' or s.descripcion is null) """ + \
			  str(self.choicefiltroestatus[self.choiceinxestatus]) + fechacaptura + fechamovto + """
		order by """ + self.lstctrlsort
		cliente, etapa, desarrollo = '%%', '%%', '%%'
		if self.cliente:
			cliente = '%s%s%s' % ("%%", self.cliente, "%%")
		if self.etapa:
			etapa = '%s%s%s' % ("%%", self.etapa, "%%")
		if self.desarrollo:
			desarrollo = '%s%s%s' % ("%%", self.desarrollo, "%%")
		sql = (query % (cliente, etapa, desarrollo))
		sqlx = sql.replace('\t', ' ')
		sql = sqlx.replace('\n', ' ')
		cu = r_cngcmex.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		recibo = []
		fila = 0
		abono, interes, total = 0,0,0
		if rows:
			wx.BeginBusyCursor()
			lctrl.InsertColumn(0, u"%sRecibo" % self.lstctrlorder[0][2], wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"%sCaptura" % self.lstctrlorder[1][2], wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(2, u"%sEmisi�n" % self.lstctrlorder[2][2], wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(3, u"%sAbono" % self.lstctrlorder[3][2], wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(4, u"%sInteres" % self.lstctrlorder[4][2], wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(5, u"%sTotal" % self.lstctrlorder[5][2], wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(6, u"%sLote" % self.lstctrlorder[6][2], wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(7, u"%sManzana" % self.lstctrlorder[7][2], wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(8, u"%sCliente" % self.lstctrlorder[8][2])
			lctrl.InsertColumn(9, u"%sEtapa" % self.lstctrlorder[9][2])
			lctrl.InsertColumn(10, u"%sDesarrollo" % self.lstctrlorder[10][2])
			for row in rows:
				if int(row[0]) not in recibo:
					recibo.append(int(row[0]))
					if str(row[11]) == "A":
						if fila %2 != 0: bgcolor = [204,204,255]
						else:            bgcolor = [230,230,255]
					else:
						if fila %2 != 0: bgcolor = [255,153,153]
						else:            bgcolor = [255,215,215]
						
					index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
					#lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
					lctrl.SetItemBackgroundColour(index, wx.Colour(*bgcolor))
					lctrl.SetStringItem(index, 0, str(row[0]))
					lctrl.SetStringItem(index, 1, str(row[1]))
					lctrl.SetStringItem(index, 2, str(row[2]))
					lctrl.SetStringItem(index, 3, str(amount_and_cents_with_commas(row[3])))
					lctrl.SetStringItem(index, 4, str(amount_and_cents_with_commas(row[4])))
					lctrl.SetStringItem(index, 5, str(amount_and_cents_with_commas(row[5])))
					lctrl.SetStringItem(index, 6, self.GetString(row[6]))
					lctrl.SetStringItem(index, 7, str(row[7]))
					lctrl.SetStringItem(index, 8, self.GetString(row[8]))
					lctrl.SetStringItem(index, 9, self.GetString(row[9]))
					lctrl.SetStringItem(index, 10, self.GetString(row[10]))
					lctrl.SetItemData(index, row[0])
					fila += 1
					abono += float(row[3])
					interes += float(row[4])
					total += float(row[5])
					
			lctrl.SetColumnWidth(0, 50)
			lctrl.SetColumnWidth(1, 90)
			lctrl.SetColumnWidth(2, 90)
			lctrl.SetColumnWidth(3, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(4, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(5, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(6, 60)
			lctrl.SetColumnWidth(7, 68)
			lctrl.SetColumnWidth(8, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(9, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(10, wx.LIST_AUTOSIZE)
			wx.EndBusyCursor()
			self.Habilita()
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Recibos", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 200)
			self.Habilita(True, False)
			
		#cu.close()
		#lctrl.Enable(True)
		#lctrl.Show(True)
		self.GetControl(ID_TEXTCTRLRECIBOSPINARESTOTALABONO).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLRECIBOSPINARESTOTALINTERES).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLRECIBOSPINARESTOTALTOTAL).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLRECIBOSPINARESALAVISTA).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLRECIBOSPINARESTOTALABONO).SetValue(str(amount_and_cents_with_commas(abono)))
		self.GetControl(ID_TEXTCTRLRECIBOSPINARESTOTALINTERES).SetValue(str(amount_and_cents_with_commas(interes)))
		self.GetControl(ID_TEXTCTRLRECIBOSPINARESTOTALTOTAL).SetValue(str(amount_and_cents_with_commas(total)))
		self.GetControl(ID_TEXTCTRLRECIBOSPINARESALAVISTA).SetValue(str(fila))
		self.currentitem, self.consecutivorecibo = 0, 0
		self.GetControl(ID_BUTTONRECIBOSPINARESDETALLE).Enable(False)
		
	def Habilita(self, excel = True, excelbool = True):
		bool = False
		if self.GetControl(ID_TEXTCTRLRECIBOSPINARESFECHAINICIAL).GetValue():
			bool = True
		self.GetControl(ID_TEXTRECIBOSPINARESFECHAFINAL).Enable(bool)
		self.GetControl(ID_TEXTCTRLRECIBOSPINARESFECHAFINAL).Enable(bool)
		self.GetControl(ID_BITMAPBUTTONRECIBOSPINARESELEGIRFECHAFINAL).Enable(bool)
		self.GetControl(ID_BITMAPBUTTONRECIBOSPINARESLIMPIARFECHAFINAL).Enable(bool)
		bool = False
		if self.GetControl(ID_TEXTCTRLRECIBOSPINARESFECHAINICIALCAPTURA).GetValue():
			bool = True
		self.GetControl(ID_TEXTRECIBOSPINARESFECHAFINALCAPTURA).Enable(bool)
		self.GetControl(ID_TEXTCTRLRECIBOSPINARESFECHAFINALCAPTURA).Enable(bool)
		self.GetControl(ID_BITMAPBUTTONRECIBOSPINARESELEGIRFECHAFINALCAPTURA).Enable(bool)
		self.GetControl(ID_BITMAPBUTTONRECIBOSPINARESLIMPIARFECHAFINALCAPTURA).Enable(bool)
		if excel:
			self.GetControl(ID_BUTTONRECIBOSPINARESIMPRESION).Enable(excelbool)
	
	def OnImprimirRecibo(self, evt):
		if Mensajes().YesNo(self, u"� Desea realmente imprimir el recibo no. %s ?" % self.consecutivorecibo, u"Confirmaci�n"):
			self.ImprimeRecibo()
			
	def ImprimeRecibo(self):
		try:
			pisa
		except:
			Mensajes().Info(self, u"� Por favor instale el m�dulo pisa !", u"Aviso")
			return
		try:
			gridcontenthtml = self.GetHtmlReciboFromGrid(consecutivorecibo = self.consecutivorecibo)
			if gridcontenthtml:
				wx.BeginBusyCursor()
				archivo = self.GetPdfFileName("recibo")
				gridcontenthtml = gridcontenthtml.encode("utf-8")
				pdf = pisa.CreatePDF(cStringIO.StringIO(gridcontenthtml), file(archivo, "wb"))
				if not pdf.err:
					try:
						pdf.dest.close()
					except:
						warnings.warn("<<pdf.dest.close() no se pudo.>>")
					try:
						os.startfile(str(archivo))
					except:
						os.system("open %s" % archivo)
						
						#commmand_line = "open %s" % archivo
						#p = subprocess.Popen(commmand_line, shell = True)
						#pid, sts = os.waitpid(p.pid, 0)						
						
				wx.EndBusyCursor()
			else:
				Mensajes().Info(self, u"� No se encontr� informaci�n referente al recibo !", u"Atenci�n")
		except:
			wx.EndBusyCursor()
			Mensajes().Info(self, u"� Se presento un problema al generar el recibo !", u"Atenci�n")

	def GetHtmlReciboFromGrid(self, consecutivorecibo = 0):
		sql = """
		select convert(varchar(10), r.fechaemision, 103), r.abonocapital, r.interesmoratorio, r.totalrecibo, r.referencia,
		r.consdesarrollo, convert(varchar(10), r.fechaaplicacion, 103), c.codigo, c.fk_inmueble, c.fk_cliente, c.saldo,
		i.iden1, i.iden2, e.nombre, t.descripcion
		from RECIBO r
		join MOVIMIENTO m on m.numrecibo = r.codigo
		join DOCUMENTO d on d.codigo = m.fk_documento
		join CUENTA c on c.codigo = d.fk_cuenta
		join INMUEBLE i on i.codigo = c.fk_inmueble
		join CLIENTE e on e.codigo = c.fk_cliente
		join ETAPA t on t.codigo = i.fk_etapa
		where r.codigo = %s
		""" % consecutivorecibo
		cu = r_cngcmex.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row is not None:
			a = u"�"; e = u"�"; i = u"�"; o = u"�"; u = u"�"
			meses = ("", "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto",
			         "Septiembre", "Octubre", "Noviembre", "Diciembre")
			dia, mes, ano = row[0].split("/")
			fechaemision = "%s %s, %s" % (meses[int(mes)], dia, ano)
			abonocapital = float(row[1]); interesmoratorio = float(row[2]); totalrecibo = float(row[3])
			referencia = self.GetString(row[4]); consdesarrollo = int(row[5])
			fechaaplicacion = "X"
			if row[6]:
				dia, mes, ano = row[6].split("/")
				fechaaplicacion = "%s %s, %s" % (meses[int(mes)], dia, ano)
			cuenta = int(row[7]); inmueble = int(row[8]); cliente = int(row[9]); saldo = float(row[10])
			idinmueble = "%s %s - %s" % (self.GetString(row[11]), self.GetString(row[12]), self.GetString(row[14]))
			nombrecliente = self.GetString(row[13])
			aux = saldo + abonocapital
			saldoactual = "X"
			saldoposterior = "X"
			abonocapital = str(amount_and_cents_with_commas(abonocapital))
			interesmoratorio = str(amount_and_cents_with_commas(interesmoratorio))
			totalrecibo = str(amount_and_cents_with_commas(totalrecibo))
			
			header = """
			<table
			 style="width: 993px; height: 200px; text-align: left; margin-left: auto; margin-right: auto;"
			 border="0" cellpadding="2" cellspacing="2">
			  <tbody>
			    <tr>
			      <td style="text-align: center;">
			      <IMG SRC="images/LogoPinares2009.jpg" NAME="Logo" ALIGN=LEFT WIDTH=213 HEIGHT=160 BORDER=0>
			      </td>
			      <td style="text-align: center;"><big><big><span
			 style="font-weight: bold;"><big>Arcadia Promotora, S. de R.L. de C.V.</big></span><br>
			      </big><big style="font-weight: bold;"><big><small><small>R.F.C.
			APR-910816-FJ3</small></small></big></big></big></td>
			    </tr>
			  </tbody>
			</table>
			<div style="text-align: right;"><big><big>&nbsp;<span
			 style="font-weight: bold;">RECIBO:&nbsp;""" + str(consdesarrollo) + """</span></big></big><br>
			</div>
			<hr style="width: 100%; height: 2px;">
			<table style="text-align: left; width: 985px; height: 82px; margin-left: auto; margin-right: auto;"
			border="0" cellpadding="2" cellspacing="2">
			  <tbody>
			    <tr>
			      <td></td>
			      <td style="text-align: right; width: 190px;"><big>Cuenta:</big></td>
			      <td style="text-align: left; font-weight: bold; width: 183px;"><big>""" + str(cuenta) + """</big></td>
			      <td style="text-align: right; width: 219px;"><big>Fecha de Aplicaci""" + o + """n:</big></td>
			      <td style="font-weight: bold; width: 357px;"><big>""" + fechaaplicacion + """</big></td>
			      <td></td>
			    </tr>
			    <tr>
			      <td></td>
			      <td style="text-align: right; width: 190px;"><big>Inmueble:</big></td>
			      <td style="text-align: left; font-weight: bold; width: 183px;"><big>""" + str(inmueble) + """</big></td>
			      <td style="text-align: right; width: 219px;"><big>Id. del Inmueble:</big></td>
			      <td style="font-weight: bold; width: 357px"><big>""" + idinmueble + """</big></td>
			      <td></td>
			    </tr>
			    <tr>
			      <td></td>
			      <td style="text-align: right; width: 190px;"><big>Cliente:</big></td>
			      <td style="text-align: left; font-weight: bold; width: 183px;"><big>""" + str(cliente) + """</big></td>
			      <td style="text-align: right; width: 219px;"><big>Fecha de Pago:</big></td>
			      <td style="font-weight: bold; width: 357px"><big>""" + fechaemision + """</big></td>
			      <td></td>
			    </tr>
			  </tbody>
			</table>
			<br>
			<big>Nombre del Cliente: <span style="font-weight: bold;">""" + nombrecliente + """</span></big><br>
			<br>
			<div style="text-align: center;"><big>Saldo Actual:<span style="font-weight: bold;"> $""" + saldoactual + """</span>
			&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Saldo
			Posterior al Pago:<span style="font-weight: bold;">
			$""" + saldoposterior + """</span></big><br>
			</div>
			<hr style="height: 1px; width: 100%;" noshade="noshade">
			<div style="text-align: right;"><span
			 style="font-weight: bold; font-style: italic;"></span><span
			 style="font-weight: bold; font-style: italic;"></span><span
			 style="font-style: italic;"><span
			 style="font-weight: bold;">Movimiento&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp; &nbsp;&nbsp;&nbsp; Importe</span></span>&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp; <span
			 style="font-style: italic;"><span
			 style="font-weight: bold;">Mensualidad&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Mes a
			Pagar&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;</span></span>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span
			 style="font-style: italic;"><span
			 style="font-weight: bold;">&nbsp;&nbsp;&nbsp;&nbsp;
			Documento</span></span><br>
			<span style="font-style: italic;"><span
			 style="font-weight: bold;"></span></span></div>
			<span style="font-style: italic;"><span
			 style="font-weight: bold;"></span></span>
			<hr style="width: 100%; height: 2px;">
			"""
			
			sql = """
			select codigo, cantidad, relaciondepago, convert(varchar(10), fechavencimientodoc, 103), fk_documento
			from MOVIMIENTO
			where cargoabono = 'A' and fk_tipo = 4 and numrecibo = %s
			order by fechavencimientodoc
			""" % consecutivorecibo
			cu = r_cngcmex.cursor()
			cu.execute(str(sql))
			rows = fetchall(cu)
			cu.close()
			detail = ""; detaillines = 15; cont = 0
			if rows:
				for cont, row in enumerate(rows):
					movimiento = str(row[0])
					importe = str(amount_and_cents_with_commas(row[1]))
					mensualidad = self.GetString(row[2])
					mesapagar = str(row[3])
					documento = str(row[4])
					line = """
					<table
					 style="text-align: left; margin-left: auto; margin-right: auto; width: 990px; height: 20px;"
					 border="0" cellpadding="2" cellspacing="2">
					  <tbody>
					    <tr>
					      <td style="width: 200px; text-align: right;"><big>""" + movimiento + """</big></td>
					      <td style="text-align: right;"><big>""" + importe + """</big></td>
					      <td style="text-align: center;"><big>""" + mensualidad + """</big></td>
					      <td style="text-align: center;"><big>""" + mesapagar + """</big></td>
					      <td style="text-align: right;"><big>""" + documento + """</big></td>
					    </tr>
					  </tbody>
					</table>
					"""
					detail += line
					
			if cont > 7: detaillines -= 1
			for aux in range(cont, detaillines):
				detail += "<br>"

			footer = """
			<big><br>
			</big><big>
			</big><big></big>
			<table
			 style="width: 981px; height: 76px; text-align: left; margin-left: auto; margin-right: 0px;"
			 border="0" cellpadding="2" cellspacing="2">
			  <tbody>
			    <tr>
			      <td></td>
			      <td></td>
			      <td></td>
			      <td style="text-align: right;"><big>Pago a Capital:</big></td>
			      <td style="text-align: right;"><big><span
			 style="font-weight: bold;">$""" + abonocapital + """</span></big></td>
			    </tr>
			    <tr>
			      <td></td>
			      <td></td>
			      <td></td>
			      <td style="text-align: right;"><big>Intereses Moratorios:</big></td>
			      <td style="text-align: right;"><big><span
			 style="font-weight: bold;">""" + interesmoratorio + """</span></big></td>
			    </tr>
			    <tr>
			      <td></td>
			      <td></td>
			      <td></td>
			      <td style="text-align: right;"><big>Total a Pagar:</big></td>
			      <td style="text-align: right;"><big><span
			 style="font-weight: bold;">$""" + totalrecibo + """</span></big></td>
			    </tr>
			  </tbody>
			</table>
			<big><span style="font-weight: bold;">
			</span></big>
			<hr style="width: 100%; height: 2px;"><big>Referencia:
			<span style="font-weight: bold;">""" + referencia + """</span><br>
			</big>
			<div style="text-align: right;"><big>Id. del Recibo:
			<span style="font-weight: bold;">""" + str(consecutivorecibo) + """</span></big><br>
			</div>
			<span style="font-style: italic;"><span
			 style="font-weight: bold;"><big>&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;</big>Firma del Cajero</span></span><br>
			<hr style="width: 100%; height: 2px;"><span
			 style="font-weight: bold;">Observaciones:</span><br>
			1) El pago deber""" + a + """ hacerse con deposito bancario seg""" + u + """n la referencia que
			le corresponda a su terreno.<br>
			2) El horario de oficina es de 9:00 a 14:00 y de 16:00 a 18:30 horas de
			Lunes a Viernes.<br>
			3) Si el d""" + i + """a de vencimiento es inh""" + a + """bil bancario, el pago deber""" + a + """ hacerse
			el d""" + i + """a h""" + a + """bil inmediato anterior.<br>
			4) Los intereses moratorios se calculan a la fecha de corte de """ + e + """ste
			estado de cuenta.<br>
			5) El presente estado de cuenta solo ser""" + a + """ valido como recibo si
			presenta la firma del cajero.<br>
			6)
			Favor de pagar con cheque cruzado a nombre de Arcadia Promotora, S. de
			R.L. de C.V. y """ + e + """ste recibo causar""" + a + """ efecto salvo buen cobro del cheque.<br>
			<hr style="width: 100%; height: 2px;">&nbsp;<span
			 style="font-style: italic; font-weight: bold;"></span><span
			 style="font-style: italic; font-weight: bold;"></span>
			"""
			
			html = '<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /></head><body>' + \
			     header + detail + footer + '</body></html>'
			return html
		else:
			return ""

class GixReporteHijosClientes(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Edades de Hijos de Clientes", pos = wx.DefaultPosition,
	             size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE, usuario = None):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.lstctrlorder = {0:("o.Oferta","desc",""), 1:("c.codigo","desc",""), 2:("c.fecha","desc","> "),
		                     3:("h.anios","desc",""), 4:("h.anios","desc",""), 5:("h.sexo","desc",""),
		                     6:("e.nombre","desc",""), 7:("t.descripcion","desc",""), 8:("s.descripcion","desc","")}
		self.DicDatesAndTxt = {ID_BITMAPBUTTONHIJOSCLIENTESELEGIRFECHAINICIALCUENTA : ID_TEXTCTRLHIJOSCLIENTESFECHAINICIALCUENTA,
				       ID_BITMAPBUTTONHIJOSCLIENTESELEGIRFECHAFINALCUENTA: ID_TEXTCTRLHIJOSCLIENTESFECHAFINALCUENTA}
		self.Fill = True
		self.cliente, self.etapa, self.desarrollo = "","",""
		self.currentitem, self.oferta = 0, 0
		ReporteHijosClientes(self, True)
		self.GetControl(ID_TEXTCTRLHIJOSCLIENTESFECHAINICIALCUENTA).SetValue(self.GetTodayDate())
		self.colprev, self.colsort = 2, 2
		self.lstctrlsort = "c.fecha desc"
		self.GetControl(ID_FOREIGNHIJOSCLIENTESFILTROCLIENTE).ShowCancelButton(True)
		self.GetControl(ID_FOREIGNHIJOSCLIENTESFILTROETAPA).ShowCancelButton(True)
		self.GetControl(ID_FOREIGNHIJOSCLIENTESFILTRODESARROLLO).ShowCancelButton(True)
		for v in self.DicDatesAndTxt.keys():
			self.Bind(wx.EVT_BUTTON, self.OnFechaButton, id = v )
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONHIJOSCLIENTESLIMPIARFECHAINICIALCUENTA, self.OnLimpia)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONHIJOSCLIENTESLIMPIARFECHAFINALCUENTA, self.OnLimpia)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLHIJOSCLIENTESFECHAINICIALCUENTA)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLHIJOSCLIENTESFECHAFINALCUENTA)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONHIJOSCLIENTESLIMPIAREDADINICIAL, self.OnLimpia)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONHIJOSCLIENTESLIMPIAREDADFINAL, self.OnLimpia)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLHIJOSCLIENTESEDADINICIAL)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLHIJOSCLIENTESEDADFINAL)
		wx.EVT_BUTTON(self, ID_BUTTONHIJOSCLIENTESREFRESCARFILTROS, self.OnRefrescarFiltros)
		wx.EVT_BUTTON(self, ID_BUTTONHIJOSCLIENTESEXCEL, self.OnPrintExcel)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchCliente, id = ID_FOREIGNHIJOSCLIENTESFILTROCLIENTE)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanCliente, id = ID_FOREIGNHIJOSCLIENTESFILTROCLIENTE)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchCliente, id = ID_FOREIGNHIJOSCLIENTESFILTROCLIENTE)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchEtapa, id = ID_FOREIGNHIJOSCLIENTESFILTROETAPA)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanEtapa, id = ID_FOREIGNHIJOSCLIENTESFILTROETAPA)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchEtapa, id = ID_FOREIGNHIJOSCLIENTESFILTROETAPA)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchDesarrollo, id = ID_FOREIGNHIJOSCLIENTESFILTRODESARROLLO)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanDesarrollo, id = ID_FOREIGNHIJOSCLIENTESFILTRODESARROLLO)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchDesarrollo, id = ID_FOREIGNHIJOSCLIENTESFILTRODESARROLLO)
		self.Bind(wx.EVT_LIST_COL_CLICK, self.OnSortListCtrl, id = ID_LISTCTRLHIJOSCLIENTES)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelected, id = ID_LISTCTRLHIJOSCLIENTES)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselected, id = ID_LISTCTRLHIJOSCLIENTES)
		wx.EVT_BUTTON(self, ID_BUTTONHIJOSCLIENTESSALIR, self.OnClose)
		wx.EVT_CLOSE(self, self.OnClose)
		self.GetControl(ID_LISTCTRLHIJOSCLIENTES).SetFocus()
		self.FillListCtrl()
		
	def GetTodayDate(self):
		sql = "select convert(varchar(10), getdate(), 103)"
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		return str(row[0])
		
	def OnClose(self, evt):
		self.EndModal(1)
		self.Destroy()
		
	def OnText(self, evt):
		if self.Fill:
			id = evt.GetId()
			if id == ID_TEXTCTRLHIJOSCLIENTESFECHAINICIALCUENTA:
				self.Habilita(False)
			elif id == ID_TEXTCTRLHIJOSCLIENTESEDADINICIAL:
				self.Habilita(False)
		
	def OnLimpia(self, evt):
		self.Fill = False
		id = evt.GetId()
		if id == ID_BITMAPBUTTONHIJOSCLIENTESLIMPIARFECHAINICIALCUENTA:
			self.GetControl(ID_TEXTCTRLHIJOSCLIENTESFECHAINICIALCUENTA).SetValue("")
			self.GetControl(ID_TEXTCTRLHIJOSCLIENTESFECHAFINALCUENTA).SetValue("")
			self.Habilita(False)
		elif id == ID_BITMAPBUTTONHIJOSCLIENTESLIMPIARFECHAFINALCUENTA:
			self.GetControl(ID_TEXTCTRLHIJOSCLIENTESFECHAFINALCUENTA).SetValue("")
		elif id == ID_BITMAPBUTTONHIJOSCLIENTESLIMPIAREDADINICIAL:
			self.GetControl(ID_TEXTCTRLHIJOSCLIENTESEDADINICIAL).SetValue("")
			self.GetControl(ID_TEXTCTRLHIJOSCLIENTESEDADFINAL).SetValue("")
			self.Habilita(False)
		else:
			self.GetControl(ID_TEXTCTRLHIJOSCLIENTESEDADFINAL).SetValue("")
		self.Fill = True
		
	def OnSelected(self, evt):
		self.currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLHIJOSCLIENTES).GetItem(self.currentitem, 0).GetText()
		self.oferta = int(datointerno)
		
	def OnDeselected(self, evt):
		self.currentitem, self.oferta = 0, 0
	
	def OnActivated(self, evt):
		pass
		
	def OnSortListCtrl(self, evt):
		self.colsort = evt.GetColumn()
		if self.lstctrlorder[self.colsort][1] == "desc":
			self.lstctrlsort = "%s asc" % self.lstctrlorder[self.colsort][0]
			self.lstctrlorder[self.colsort] = (self.lstctrlorder[self.colsort][0], "asc", "< ")
		else:
			self.lstctrlsort = "%s desc" % self.lstctrlorder[self.colsort][0]
			self.lstctrlorder[self.colsort] = (self.lstctrlorder[self.colsort][0], "desc", "> ")
		if self.colprev != self.colsort:
			self.lstctrlorder[self.colprev] = (self.lstctrlorder[self.colprev][0], self.lstctrlorder[self.colprev][1], "")
		self.FillListCtrl()
		self.colprev = self.colsort
		evt.Skip()
		
	def OnDoSearchCliente(self, evt):
		self.cliente =  self.GetControl(ID_FOREIGNHIJOSCLIENTESFILTROCLIENTE).GetValue()
		self.FillListCtrl()

	def OnCleanCliente(self, evt):
		self.GetControl(ID_FOREIGNHIJOSCLIENTESFILTROCLIENTE).SetValue("")
		self.cliente = ""
		self.FillListCtrl()

	def OnDoSearchEtapa(self, evt):
		self.etapa =  self.GetControl(ID_FOREIGNHIJOSCLIENTESFILTROETAPA).GetValue()
		self.FillListCtrl()

	def OnCleanEtapa(self, evt):
		self.GetControl(ID_FOREIGNHIJOSCLIENTESFILTROETAPA).SetValue("")
		self.etapa = ""
		self.FillListCtrl()

	def OnDoSearchDesarrollo(self, evt):
		self.desarrollo =  self.GetControl(ID_FOREIGNHIJOSCLIENTESFILTRODESARROLLO).GetValue()
		self.FillListCtrl()

	def OnCleanDesarrollo(self, evt):
		self.GetControl(ID_FOREIGNHIJOSCLIENTESFILTRODESARROLLO).SetValue("")
		self.desarrollo = ""
		self.FillListCtrl()
		
	def OnRefrescarFiltros(self, evt):
		self.FillListCtrl()

	def Habilita(self, excel = True, excelbool = True):
		bool = False
		if self.GetControl(ID_TEXTCTRLHIJOSCLIENTESFECHAINICIALCUENTA).GetValue():
			bool = True
		self.GetControl(ID_TEXTHIJOSCLIENTESFECHAFINALCUENTA).Enable(bool)
		self.GetControl(ID_TEXTCTRLHIJOSCLIENTESFECHAFINALCUENTA).Enable(bool)
		self.GetControl(ID_BITMAPBUTTONHIJOSCLIENTESELEGIRFECHAFINALCUENTA).Enable(bool)
		self.GetControl(ID_BITMAPBUTTONHIJOSCLIENTESLIMPIARFECHAFINALCUENTA).Enable(bool)
		bool = False
		if self.GetControl(ID_TEXTCTRLHIJOSCLIENTESEDADINICIAL).GetValue():
			bool = True
		self.GetControl(ID_TEXTHIJOSCLIENTESEDADFINAL).Enable(bool)
		self.GetControl(ID_TEXTCTRLHIJOSCLIENTESEDADFINAL).Enable(bool)
		self.GetControl(ID_BITMAPBUTTONHIJOSCLIENTESLIMPIAREDADFINAL).Enable(bool)
		if excel:
			self.GetControl(ID_BUTTONHIJOSCLIENTESEXCEL).Enable(excelbool)
	
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
		return dato.strip()
		
	def OnPrintExcel(self, event):
		tabla = "hijos"
		meta = ((14,"Oferta"), (14,"Cuenta"), (70,u"Fecha"), (70,u"A�os"), (70,u"Meses"), (70,u"Sexo"),
		        (100,u"Cliente"), (100,u"Etapa"), (100,u"Desarrollo"))
		query = self.FillListCtrl(printexcel = True)
		titulo = u"Hijos de Clientes"
		cu = r_cn.cursor()
		self.DisplayGrid(tabla, meta, query, titulo, cu)
		cu.close()

	def FillListCtrl(self, printexcel = False):
		if not self.Fill:
			return
		fechafiltro = self.GetControl(ID_TEXTCTRLHIJOSCLIENTESFECHAINICIALCUENTA).GetValue()
		fechacuenta = ""
		if fechafiltro:
			try:
				fecha_dia, fecha_mes, fecha_ano = \
						 self.GetControl(ID_TEXTCTRLHIJOSCLIENTESFECHAINICIALCUENTA).GetValue().split('/')
				fechainicial = "'%s/%02d/%02d'" % (fecha_ano, int(fecha_mes), int(fecha_dia))
				fecharango = self.GetControl(ID_TEXTCTRLHIJOSCLIENTESFECHAFINALCUENTA).GetValue()
				if fecharango:
					rango_dia, rango_mes, rango_ano = \
							 self.GetControl(ID_TEXTCTRLHIJOSCLIENTESFECHAFINALCUENTA).GetValue().split('/')
					fechafinal = "'%s/%02d/%02d'" % (rango_ano, int(rango_mes), int(rango_dia))
					if fechainicial > fechafinal:
						Mensajes().Info(self, u"La Fecha Inicial de no debe ser mayor a la Fecha Final.\n\n" \
						                u"Se tomar� en cuenta unicamente la fecha inicial.", u"Atenci�n")
						self.GetControl(ID_TEXTCTRLHIJOSCLIENTESFECHAFINALCUENTA).SetValue("")
						return
					else:
						fechacuenta = """
						and (convert(varchar(10), c.fecha, 111) >= %s
						and convert(varchar(10), c.fecha, 111) <= %s)
						""" % (fechainicial, fechafinal)
				else:
					fechacuenta = " and convert(varchar(10), c.fecha, 111) = %s " % fechainicial
			except:
				fechacuenta = ""
		edadfiltro = self.GetControl(ID_TEXTCTRLHIJOSCLIENTESEDADINICIAL).GetValue()
		edadhijos = ""
		if edadfiltro:
			try:
				edadaux = self.GetControl(ID_TEXTCTRLHIJOSCLIENTESEDADINICIAL).GetValue()
				edadinicial = "%s" % int(edadaux)
				edadrango = self.GetControl(ID_TEXTCTRLHIJOSCLIENTESEDADFINAL).GetValue()
				if edadrango:
					edadaux = self.GetControl(ID_TEXTCTRLHIJOSCLIENTESEDADFINAL).GetValue()
					edadfinal = "%s" % int(edadaux)
					if edadinicial > edadfinal:
						Mensajes().Info(self, u"La Edad Inicial no debe ser mayor a la Edad Final.\n\n" \
						                u"Se tomar� en cuenta unicamente la edad inicial.", u"Atenci�n")
						self.GetControl(ID_TEXTCTRLHIJOSCLIENTESEDADFINAL).SetValue("")
						return
					else:
						edadhijos = """
						and (h.anios >= %s and h.anios <= %s)
						""" % (edadinicial, edadfinal)
				else:
					edadhijos = " and h.anios = %s " % edadinicial
			except:
				edadhijos = ""
		if printexcel:
			query = """
			select o.Oferta, c.codigo, convert(varchar(10), c.fecha, 103), h.anios, h.meses, h.sexo,
			isnull(rtrim(ltrim(e.nombre)), ''), isnull(rtrim(ltrim(t.descripcion)), ''),
			isnull(rtrim(ltrim(s.descripcion)), '')
			from Ofertas_Compra o
			left join CUENTA c on o.Cuenta = c.codigo
			left join CLIENTE e on c.fk_cliente = e.codigo
			left join hijos h on e.codigo = h.fk_cliente
			left join ETAPA t on c.fk_etapa = t.codigo
			left join DESARROLLO s on t.fk_desarrollo = s.codigo
			where o.Cancelada <> 1 and
			(e.nombre like '%s' or e.nombre is null) and
			(t.descripcion like '%s' or t.descripcion is null) and
			(s.descripcion like '%s' or s.descripcion is null) """ + fechacuenta + edadhijos + """
			order by """ + self.lstctrlsort
			cliente, etapa, desarrollo = '%%', '%%', '%%'
			if self.cliente:
				cliente = '%s%s%s' % ("%%", self.cliente, "%%")
			if self.etapa:
				etapa = '%s%s%s' % ("%%", self.etapa, "%%")
			if self.desarrollo:
				desarrollo = '%s%s%s' % ("%%", self.desarrollo, "%%")
			sql = (query % (cliente, etapa, desarrollo))
			sqlx = sql.replace('\t', ' ')
			sql = sqlx.replace('\n', ' ')
			return str(sql)
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLHIJOSCLIENTES)
		lctrl.Enable(False)
		lctrl.Show(False)
		lctrl.ClearAll()
		query = """
		select o.Oferta, c.codigo, convert(varchar(10), c.fecha, 103), h.anios, h.meses, h.sexo,
		isnull(rtrim(ltrim(e.nombre)), ''), isnull(rtrim(ltrim(t.descripcion)), ''),
		isnull(rtrim(ltrim(s.descripcion)), '')
		from Ofertas_Compra o
		left join CUENTA c on o.Cuenta = c.codigo
		left join CLIENTE e on c.fk_cliente = e.codigo
		left join hijos h on e.codigo = h.fk_cliente
		left join ETAPA t on c.fk_etapa = t.codigo
		left join DESARROLLO s on t.fk_desarrollo = s.codigo
		where o.Cancelada <> 1 and
		(e.nombre like '%s' or e.nombre is null) and
		(t.descripcion like '%s' or t.descripcion is null) and
		(s.descripcion like '%s' or s.descripcion is null) """ + fechacuenta + edadhijos + """
		order by """ + self.lstctrlsort
		cliente, etapa, desarrollo = '%%', '%%', '%%'
		if self.cliente:
			cliente = '%s%s%s' % ("%%", self.cliente, "%%")
		if self.etapa:
			etapa = '%s%s%s' % ("%%", self.etapa, "%%")
		if self.desarrollo:
			desarrollo = '%s%s%s' % ("%%", self.desarrollo, "%%")
		sql = (query % (cliente, etapa, desarrollo))
		sqlx = sql.replace('\t', ' ')
		sql = sqlx.replace('\n', ' ')
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		fila = 0
		totmasculino, totfemenino, total = 0,0,0
		if rows:
			lctrl.InsertColumn(0, u"%sOferta" % self.lstctrlorder[0][2], wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(1, u"%sCuenta" % self.lstctrlorder[1][2], wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(2, u"%sFecha" % self.lstctrlorder[2][2], wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(3, u"%sA�os" % self.lstctrlorder[3][2], wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(4, u"%sMeses" % self.lstctrlorder[4][2], wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(5, u"%sSexo" % self.lstctrlorder[5][2], wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(6, u"%sCliente" % self.lstctrlorder[6][2])
			lctrl.InsertColumn(7, u"%sEtapa" % self.lstctrlorder[7][2])
			lctrl.InsertColumn(8, u"%sDesarrollo" % self.lstctrlorder[8][2])
			for row in rows:
				if fila %2 != 0: bgcolor = [204,204,255]
				else:            bgcolor = [230,230,255]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				anios = row[3]; meses = row[4]
				if str(row[5]) == "M":
					totmasculino += 1; sexo = "M"
				elif str(row[5]) == "F":
					totfemenino += 1; sexo = "F"
				else:
					sexo, anios, meses = "-", "-", "-"
				cliente = str(row[6].strip())
				etapa = str(row[7].strip())
				desarrollo = str(row[8].strip())
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, str(row[1]))
				lctrl.SetStringItem(index, 2, str(row[2]))
				lctrl.SetStringItem(index, 3, str(anios))
				lctrl.SetStringItem(index, 4, str(meses))
				lctrl.SetStringItem(index, 5, str(sexo))
				lctrl.SetStringItem(index, 6, cliente.decode("iso8859-1"))
				lctrl.SetStringItem(index, 7, etapa.decode("iso8859-1"))
				lctrl.SetStringItem(index, 8, desarrollo.decode("iso8859-1"))
				lctrl.SetItemData(index, row[0])
				fila += 1
			total = totmasculino + totfemenino
			lctrl.SetColumnWidth(0, 70)
			lctrl.SetColumnWidth(1, 70)
			lctrl.SetColumnWidth(2, 90)
			lctrl.SetColumnWidth(3, 50)
			lctrl.SetColumnWidth(4, 50)
			lctrl.SetColumnWidth(5, 50)
			lctrl.SetColumnWidth(6, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(7, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(8, wx.LIST_AUTOSIZE)
			self.Habilita()
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Hijos", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 200)
			self.Habilita(True, False)
		cu.close()
		lctrl.Enable(True)
		lctrl.Show(True)
		self.GetControl(ID_TEXTCTRLHIJOSCLIENTESTOTALMASCULINO).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLHIJOSCLIENTESTOTALFEMENINO).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLHIJOSCLIENTESTOTALTOTAL).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLHIJOSCLIENTESALAVISTA).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLHIJOSCLIENTESTOTALMASCULINO).SetValue(str(totmasculino))
		self.GetControl(ID_TEXTCTRLHIJOSCLIENTESTOTALFEMENINO).SetValue(str(totfemenino))
		self.GetControl(ID_TEXTCTRLHIJOSCLIENTESTOTALTOTAL).SetValue(str(total))
		self.GetControl(ID_TEXTCTRLHIJOSCLIENTESALAVISTA).SetValue(str(fila))
		self.currentitem, self.oferta = 0, 0
		wx.EndBusyCursor()
		
class GixReporteGuardiasAsignadas(wx.Dialog, GixBase):

	def __init__(self, parent, id = -1, title = u"Guardias Asignadas", pos = wx.DefaultPosition,
				 size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE, usuario = None):
		
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.lstctrlorder = {0:("r.idguardiaroll","desc", ""), 1:("r.fecha","desc","> "), 2:("g.horainicial","desc",""),
				     3:("g.horafinal","desc",""), 4:("g.descripcion","desc",""), 5:("g.recurrencia","desc","")}
		self.recurrenciadict = {0:"TODOS LOS DIAS", 1:"ENTRE SEMANA", 2:"LOS FINES DE SEMANA", 3:"LOS LUNES", 4:"LOS MARTES",
					5:"LOS MIERCOLES", 6:"LOS JUEVES", 7:"LOS VIERNES", 8:"LOS SABADOS", 9:"LOS DOMINGOS"}
		self.choicefiltrorecurrencia = {0:"", 1:" g.recurrencia = 0 ", 2:" g.recurrencia = 1 ", 3:" g.recurrencia = 2 ",
						4:" g.recurrencia = 3 ", 5:" g.recurrencia = 4 ", 6:" g.recurrencia = 5 ",
						7:" g.recurrencia = 6 ", 8:" g.recurrencia = 7 ", 9:" g.recurrencia = 8 ",
						10:"  g.recurrencia = 9 "}
		self.DicDatesAndTxt = {ID_BITMAPBUTTONGUARDIAASIGNADAFILTROELEGIRFECHAINICIAL : ID_TEXTCTRLGUARDIAASIGNADAFILTROFECHAINICIAL,
				       ID_BITMAPBUTTONGUARDIAASIGNADAFILTROELEGIRFECHAFINAL: ID_TEXTCTRLGUARDIAASIGNADAFILTROFECHAFINAL}
		self.usuario = usuario
		self.Fill = True
		self.vendedor = ""
		self.currentitem, self.guardia, self.currentitemvendedor, self.guardiavendedor = 0, 0, 0, 0
		ReporteGuardiasAsignadasFuncion(self, True)
		self.GetControl(ID_TEXTCTRLGUARDIAASIGNADAFILTROFECHAINICIAL).SetValue(self.GetTodayDate())
		self.colprev, self.colsort = 0, 0
		self.lstctrlsort = "r.fecha desc"
		self.choiceinxrecurrencia = 0
		self.GetControl(ID_CHOICEGUARDIAASIGNADAFILTRORECURRENCIA).SetSelection(self.choiceinxrecurrencia)
		self.ObtenerGuardiasFiltro()
		self.choiceinxdescripcion = -1
		self.GetControl(ID_CHOICEGUARDIAASIGNADAFILTRODESCRIPCION).SetSelection(self.choiceinxdescripcion)
		self.GetControl(ID_FOREIGNGUARDIAASIGNADAFILTROVENDEDOR).ShowCancelButton(True)
		for v in self.DicDatesAndTxt.keys():
			self.Bind(wx.EVT_BUTTON, self.OnFechaButton, id = v )
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONGUARDIAASIGNADAFILTROLIMPIARFECHAINICIAL, self.OnLimpiar)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONGUARDIAASIGNADAFILTROLIMPIARFECHAFINAL, self.OnLimpiar)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLGUARDIAASIGNADAFILTROFECHAINICIAL)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLGUARDIAASIGNADAFILTROFECHAFINAL)
		self.Bind(wx.EVT_CHOICE, self.OnChoiceFiltro, id = ID_CHOICEGUARDIAASIGNADAFILTRORECURRENCIA)
		self.Bind(wx.EVT_CHOICE, self.OnChoiceFiltro, id = ID_CHOICEGUARDIAASIGNADAFILTRODESCRIPCION)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONGUARDIAASIGNADAFILTROLIMPIARDESCRIPCION, self.OnLimpiar)
		wx.EVT_BUTTON(self, ID_BUTTONGUARDIAASIGNADAIMPRESION, self.OnPrintExcel)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchVendedor, id = ID_FOREIGNGUARDIAASIGNADAFILTROVENDEDOR)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanVendedor, id = ID_FOREIGNGUARDIAASIGNADAFILTROVENDEDOR)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchVendedor, id = ID_FOREIGNGUARDIAASIGNADAFILTROVENDEDOR)
		self.Bind(wx.EVT_LIST_COL_CLICK, self.OnSortListCtrl, id = ID_LISTCTRLGUARDIAASIGNADA)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelected, id = ID_LISTCTRLGUARDIAASIGNADA)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselected, id = ID_LISTCTRLGUARDIAASIGNADA)
		self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnActivated, id = ID_LISTCTRLGUARDIAASIGNADA)
		self.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.OnRightClick, id = ID_LISTCTRLGUARDIAASIGNADA)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelectedVendedor, id = ID_LISTCTRLGUARDIAASIGNADAVENDEDOR)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselectedVendedor, id = ID_LISTCTRLGUARDIAASIGNADAVENDEDOR)
		self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnActivatedVendedor, id = ID_LISTCTRLGUARDIAASIGNADAVENDEDOR)
		self.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.OnRightClick, id = ID_LISTCTRLGUARDIAASIGNADAVENDEDOR)
		wx.EVT_CLOSE(self, self.OnClose)
		self.GetControl(ID_LISTCTRLGUARDIAASIGNADA).SetFocus()
		self.FillListCtrl()
		
	def GetTodayDate(self):
		sql = "select convert(varchar(10), getdate(), 103)"
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		return str(row[0])
		
	def OnClose(self, evt):
		self.Destroy()
		
	def ObtenerGuardiasFiltro(self):
		control = self.GetControl(ID_CHOICEGUARDIAASIGNADAFILTRODESCRIPCION)
		control.Enable(False)
		control.Show(False)
		control.Clear()
		sql = """
		select idguardia, descripcion + ' ' + convert(varchar(10), fechainicial, 103) + ' AL ' +
		convert(varchar(10), fechafinal, 103) + ' ' + horainicial + ' A ' + horafinal, recurrencia
		from gixguardias order by descripcion
		"""
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				descripcion = str(row[1]) + " " + str(self.recurrenciadict[int(row[2])])
				control.Append(str(descripcion).decode("iso8859-1"), int(row[0]))
		control.Show(True)
		control.Enable(True)
		
	def OnChoiceFiltro(self, evt):
		id = evt.GetId()
		if id == ID_CHOICEGUARDIAASIGNADAFILTRORECURRENCIA:
			self.choiceinxrecurrencia = self.GetControl(ID_CHOICEGUARDIAASIGNADAFILTRORECURRENCIA).GetSelection()
		else:
			self.choiceinxdescripcion = self.GetControl(ID_CHOICEGUARDIAASIGNADAFILTRODESCRIPCION).GetSelection()
		self.FillListCtrl()
		self.GetControl(ID_LISTCTRLGUARDIAASIGNADA).SetFocus()
		
	def OnText(self, evt):
		if self.Fill:
			id = evt.GetId()
			if id == ID_TEXTCTRLGUARDIAASIGNADAFILTROFECHAINICIAL:
				self.Habilita(False)
			self.FillListCtrl()
		
	def OnLimpiar(self, evt):
		self.Fill = False
		id = evt.GetId()
		if id == ID_BITMAPBUTTONGUARDIAASIGNADAFILTROLIMPIARFECHAINICIAL:
			self.GetControl(ID_TEXTCTRLGUARDIAASIGNADAFILTROFECHAINICIAL).SetValue("")
			self.GetControl(ID_TEXTCTRLGUARDIAASIGNADAFILTROFECHAFINAL).SetValue("")
			self.Habilita(False)
		elif id == ID_BITMAPBUTTONGUARDIAASIGNADAFILTROLIMPIARFECHAFINAL:
			self.GetControl(ID_TEXTCTRLGUARDIAASIGNADAFILTROFECHAFINAL).SetValue("")
		else:
			self.GetControl(ID_CHOICEGUARDIAASIGNADAFILTRODESCRIPCION).SetSelection(SetChoiceIndex())
		self.Fill = True
		self.FillListCtrl()
		
	def OnSelected(self, evt):
		self.currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLGUARDIAASIGNADA).GetItem(self.currentitem, 0).GetText()
		self.guardia = int(datointerno)
		self.FillListCtrlVendedores()
		
	def OnDeselected(self, evt):
		self.currentitem, self.guardia = 0, 0
		self.GetControl(ID_LISTCTRLGUARDIAASIGNADAVENDEDOR).ClearAll()
	
	def OnActivated(self, evt):
		pass
		
	def OnSelectedVendedor(self, evt):
		self.currentitemvendedor = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLGUARDIAASIGNADAVENDEDOR).GetItem(self.currentitemvendedor, 0).GetText()
		self.guardiavendedor = int(datointerno)
		
	def OnDeselectedVendedor(self, evt):
		self.currentitemvendedor, self.guardiavendedor = 0, 0
	
	def OnActivatedVendedor(self, evt):
		pass
		
	def OnSortListCtrl(self, evt):
		self.colsort = evt.GetColumn()
		if self.colsort in (0,1,2,3,4,5):
			if self.lstctrlorder[self.colsort][1] == "desc":
				self.lstctrlsort = "%s asc" % self.lstctrlorder[self.colsort][0]
				self.lstctrlorder[self.colsort] = (self.lstctrlorder[self.colsort][0], "asc", "< ")
			else:
				self.lstctrlsort = "%s desc" % self.lstctrlorder[self.colsort][0]
				self.lstctrlorder[self.colsort] = (self.lstctrlorder[self.colsort][0], "desc", "> ")
			if self.colprev != self.colsort:
				self.lstctrlorder[self.colprev] = (self.lstctrlorder[self.colprev][0], self.lstctrlorder[self.colprev][1], "")
			self.FillListCtrl()
			self.colprev = self.colsort
		evt.Skip()
		
	def OnDoSearchVendedor(self, evt):
		self.vendedor =  self.GetControl(ID_FOREIGNGUARDIAASIGNADAFILTROVENDEDOR).GetValue()
		self.FillListCtrl()

	def OnCleanVendedor(self, evt):
		self.GetControl(ID_FOREIGNGUARDIAASIGNADAFILTROVENDEDOR).SetValue("")
		self.vendedor = ""
		self.FillListCtrl()

	def OnPrintExcel(self, event):
		tabla = "gixguardiasrolldetalle"
		meta = ((14,"Guardia"), (100,"Vendedor"), (70,u"Fecha"), (70,u"De"), (70,u"A"), (100,u"Descripci�n / Ubicaci�n"))
		query = self.FillListCtrl(printexcel = True)
		titulo = u"Reporte de Guardias Asignadas"
		self.DisplayGrid(tabla, meta, query, titulo)

	def FillListCtrl(self, printexcel = False):
		if not self.Fill:
			return
		filtro = False
		recurrenciafiltro = ""
		if self.choiceinxrecurrencia > 0:
			filtro = True
			if printexcel or self.vendedor:
				recurrenciafiltro = " and " + str(self.choicefiltrorecurrencia[self.choiceinxrecurrencia])
			else:
				recurrenciafiltro = " where " + str(self.choicefiltrorecurrencia[self.choiceinxrecurrencia])
		fechafiltro = self.GetControl(ID_TEXTCTRLGUARDIAASIGNADAFILTROFECHAINICIAL).GetValue()
		fechaguardia = ""
		if fechafiltro:
			try:
				fecha_dia, fecha_mes, fecha_ano = \
						 self.GetControl(ID_TEXTCTRLGUARDIAASIGNADAFILTROFECHAINICIAL).GetValue().split('/')
				fechainicial = "'%s/%02d/%02d'" % (fecha_ano, int(fecha_mes), int(fecha_dia))
				fecharango = self.GetControl(ID_TEXTCTRLGUARDIAASIGNADAFILTROFECHAFINAL).GetValue()
				if fecharango:
					rango_dia, rango_mes, rango_ano = \
							 self.GetControl(ID_TEXTCTRLGUARDIAASIGNADAFILTROFECHAFINAL).GetValue().split('/')
					fechafinal = "'%s/%02d/%02d'" % (rango_ano, int(rango_mes), int(rango_dia))
					if fechainicial > fechafinal:
						Mensajes().Info(self, u"La Fecha Inicial de la Guardia no debe ser mayor a la Fecha Final.\n\n" \
										u"Se tomar� en cuenta unicamente la fecha inicial.", u"Atenci�n")
						self.GetControl(ID_TEXTCTRLGUARDIAASIGNADAFILTROFECHAFINAL).SetValue("")
						return
					else:
						fechaguardia = """
						(convert(varchar(10), r.fecha, 111) >= %s
						and convert(varchar(10), r.fecha, 111) <= %s)
						""" % (fechainicial, fechafinal)
				else:
					fechaguardia = " convert(varchar(10), r.fecha, 111) = %s " % fechainicial
			except:
				fechaguardia = ""
		if fechaguardia:
			if filtro or printexcel or self.vendedor:
				fechaguardia = " and " + fechaguardia
			else:
				fechaguardia = " where " + fechaguardia
				filtro = True
		descripcionguardia = ""
		ctrl = self.GetControl(ID_CHOICEGUARDIAASIGNADAFILTRODESCRIPCION); index = ctrl.GetSelection()
		if index > -1:
			idguardia = ctrl.GetClientData(index)
			if idguardia > 0:
				if filtro or printexcel or self.vendedor:
					descripcionguardia = " and g.idguardia = %s " % int(idguardia)
				else:
					descripcionguardia = " where g.idguardia = %s " % int(idguardia)
				
		if printexcel:
			query = """
			select d.idguardiaroll, v.nombre, convert(varchar(10), r.fecha, 103), g.horainicial, g.horafinal, g.descripcion
			from gixguardiasrolldetalle d
			join gixguardiasroll r on d.idguardiaroll = r.idguardiaroll
			join gixguardias g on r.idguardia = g.idguardia
			join VENDEDOR v on d.vendedor = v.codigo
			where v.nombre like '%s' """ + \
			recurrenciafiltro + fechaguardia + descripcionguardia + """
			order by v.nombre, r.fecha
			"""
			vendedor = '%%'
			if self.vendedor:
				vendedor = '%s%s%s' % ("%%", self.vendedor.encode("iso8859-1"), "%%")
			sql = (query % (vendedor))
			return sql
			
		wx.BeginBusyCursor()
		self.GetControl(ID_LISTCTRLGUARDIAASIGNADAVENDEDOR).ClearAll()
		lctrl = self.GetControl(ID_LISTCTRLGUARDIAASIGNADA)
		lctrl.Enable(False)
		lctrl.Show(False)
		lctrl.ClearAll()
		if self.vendedor:
			query = """
			select d.idguardiaroll, convert(varchar(10), r.fecha, 103), g.horainicial, g.horafinal,
			g.descripcion, g.recurrencia, v.nombre
			from gixguardiasrolldetalle d
			join gixguardiasroll r on d.idguardiaroll = r.idguardiaroll
			join gixguardias g on r.idguardia = g.idguardia
			join VENDEDOR v on d.vendedor = v.codigo
			where v.nombre like '%s' """ + \
			recurrenciafiltro + fechaguardia + descripcionguardia + """
			order by v.nombre
			"""
			vendedor = '%s%s%s' % ("%%", self.vendedor.encode("iso8859-1"), "%%")
			sql = (query % (vendedor))
		else:
			sql = """
			select r.idguardiaroll, convert(varchar(10), r.fecha, 103), g.horainicial, g.horafinal,
			g.descripcion, g.recurrencia
			from gixguardiasroll r
			join gixguardias g on r.idguardia = g.idguardia %s %s %s
			order by %s
			""" % (recurrenciafiltro, fechaguardia, descripcionguardia, self.lstctrlsort)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		fila = 0
		if rows:
			lctrl.InsertColumn(0, u"%sId" % self.lstctrlorder[0][2], wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(1, u"%sFecha" % self.lstctrlorder[1][2], wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(2, u"%sDe" % self.lstctrlorder[2][2], wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(3, u"%sA" % self.lstctrlorder[3][2], wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(4, u"%sDescripci�n / Ubicaci�n" % self.lstctrlorder[4][2])
			lctrl.InsertColumn(5, u"%sRecurrencia" % self.lstctrlorder[5][2])
			if self.vendedor:
				lctrl.InsertColumn(6, u"Vendedor")
			for row in rows:
				if fila %2 != 0: bgcolor = [204,204,255]
				else:            bgcolor = [230,230,255]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				descripcion = str(row[4].strip())
				recurrencia = self.recurrenciadict[int(row[5])]
				if self.vendedor:
					vendedor = str(row[6].strip())
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, str(row[1]))
				lctrl.SetStringItem(index, 2, str(row[2]))
				lctrl.SetStringItem(index, 3, str(row[3]))
				lctrl.SetStringItem(index, 4, descripcion.decode("iso8859-1"))
				lctrl.SetStringItem(index, 5, recurrencia)
				if self.vendedor:
					lctrl.SetStringItem(index, 6, vendedor)
				lctrl.SetItemData(index, row[0])
				fila += 1
			lctrl.SetColumnWidth(0, 40)
			lctrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(2, 50)
			lctrl.SetColumnWidth(3, 50)
			lctrl.SetColumnWidth(4, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(5, wx.LIST_AUTOSIZE)
			if self.vendedor:
				lctrl.SetColumnWidth(6, wx.LIST_AUTOSIZE)
			self.Habilita()
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Guardias", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 200)
			self.Habilita(True, False)
		cu.close()
		lctrl.Enable(True)
		lctrl.Show(True)
		wx.EndBusyCursor()
		
	def Habilita(self, excel = True, excelbool = True):
		bool = False
		if self.GetControl(ID_TEXTCTRLGUARDIAASIGNADAFILTROFECHAINICIAL).GetValue():
			bool = True
		self.GetControl(ID_TEXTGUARDIAASIGNADAFILTROFECHAFINAL).Enable(bool)
		self.GetControl(ID_TEXTCTRLGUARDIAASIGNADAFILTROFECHAFINAL).Enable(bool)
		self.GetControl(ID_BITMAPBUTTONGUARDIAASIGNADAFILTROELEGIRFECHAFINAL).Enable(bool)
		self.GetControl(ID_BITMAPBUTTONGUARDIAASIGNADAFILTROLIMPIARFECHAFINAL).Enable(bool)
		if excel:
			self.GetControl(ID_BUTTONGUARDIAASIGNADAIMPRESION).Enable(excelbool)
	
	def FillListCtrlVendedores(self):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLGUARDIAASIGNADAVENDEDOR)
		lctrl.ClearAll()
		sql = """
		select d.idguardiarolldetalle, v.nombre from gixguardiasrolldetalle d
		join VENDEDOR v on d.vendedor = v.codigo
		where d.idguardiaroll = %s order by v.nombre
		""" % int(self.guardia)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		fila = 0
		if rows:
			lctrl.InsertColumn(0, u"Id", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(1, u"Integrante(s) de la Guardia")
			for row in rows:
				if fila %2 != 0: bgcolor = [255,255,150]
				else:            bgcolor = [255,255,200]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				vendedor = str(row[1].strip())
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, vendedor.decode("iso8859-1"))
				lctrl.SetItemData(index, row[0])
				fila += 1
			lctrl.SetColumnWidth(0, 40)
			lctrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Vendedores", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 200)
		cu.close()
		wx.EndBusyCursor()
		
	def OnRightClick(self, event):
		id = event.GetId()
		if id == ID_LISTCTRLGUARDIAASIGNADA:
			self.idtitleblog = "de la Guardia"
			sql = """
			select convert(varchar(100), BlogGUID) from gixguardiasroll where idguardiaroll = %s
			""" % self.guardia
		else:
			self.idtitleblog = "del Vendedor en la Guardia"
			sql = """
			select convert(varchar(100), BlogGUID) from gixguardiasrolldetalle where idguardiarolldetalle = %s
			""" % self.guardiavendedor
		
		cu = r_cn.cursor()
		cu.execute(str(sql))
		self.BlogGUID = fetchone(cu)[0]
		cu.close()
		self.idregistryblog = self.guardia
		if not hasattr(self, "ID_VIEWBLOG"):
			ID_VIEWBLOG = wx.NewId(); ID_ADDBLOG = wx.NewId()
			self.Bind(wx.EVT_MENU, self.OnViewBlog, id = ID_VIEWBLOG)
			self.Bind(wx.EVT_MENU, self.OnAddBlog, id = ID_ADDBLOG)
		popup = wx.Menu()
		popup.Append(ID_VIEWBLOG, u"Consultar el Blog %s %s" % (self.idtitleblog, self.idregistryblog))
		popup.Append(ID_ADDBLOG, u"Participar en el Blog...")
		self.PopupMenu(popup)
		popup.Destroy()
		
	def OnViewBlog(self, event):
		goal = ((90, u"Fecha"), (90, u"Hora"), (100, u"Usuario"), (300, u"Blog"))
		query = """
		select convert(varchar(50), FechaCaptura, 103), convert(varchar(50), FechaCaptura, 108),
		UsuarioCaptura, ContenidoText from Blogs
		where BlogGUID = '%s' order by FechaCaptura desc;
		select count(*) from Blogs where BlogGUID = '%s'
		""" % (self.BlogGUID, self.BlogGUID)
		title = u"Consultando el Blog %s %s" % (self.idtitleblog, self.idregistryblog)
		table = "Blogs"
		frame = GixFrameCatalogo(self, -1, title, wx.Point(20,20), wx.Size(800,600), 
								 wx.DEFAULT_FRAME_STYLE, None, None, None, table, goal, query,
								 gridsize = [680,350], color = "AQUAMARINE")
		frame.Centre(wx.BOTH)
		frame.Show(True)
		
	def OnAddBlog(self, event):
		blog = wx.TextEntryDialog(self, u"Digite", u"Participando en el Blog %s %s"
								  % (self.idtitleblog, self.idregistryblog),
								  defaultValue = "", style = wx.OK | wx.TE_MULTILINE)
		blog.SetSize(wx.Size(400,300))
		blog.Centre(wx.BOTH)
		blog.ShowModal()
		comment = blog.GetValue()
		blog.Destroy()
		if comment:
			sql = """
			insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension)
			values ('%s', getdate(), '%s', '%s', '%s', '%s')
			""" % (self.BlogGUID, self.usuario, comment, "", "")
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"� Problemas al actualizar el blog !", u"Atenci�n")
			
class GixMediosPublicitarios(wx.Frame, GixBase):
	dbtable = "gixmediospublicitarios"
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize, style = wx.DEFAULT_FRAME_STYLE,
				 usuario = None):
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		self.parent = parent
		self.usuario = usuario
		self.textevent = True
		self.datointerno = ""
		self.NewFlag = False
		
		self.mb = MEDPUBMenuBarFunc()
		self.SetMenuBar(self.mb)
		self.tb = self.CreateToolBar(wx.TB_HORIZONTAL | wx.NO_BORDER | wx.TB_FLAT) # | wx.TB_TEXT )
		MEDPUBToolBarFunc(self.tb)
		panel = wx.Panel(self, -1)
		MediosPublicitariosFuncion(panel, True, True)
		
		self.Bind(wx.EVT_MENU, self.OnAgregar, id = ID_MENUMEDIOSPUBLICITARIOSARCHIVOAGREGAR)
		self.Bind(wx.EVT_MENU, self.OnEliminar, id = ID_MENUMEDIOSPUBLICITARIOSARCHIVOELIMINAR)
		self.Bind(wx.EVT_MENU, self.OnGuardar, id = ID_MENUMEDIOSPUBLICITARIOSARCHIVOGUARDAR)
		self.Bind(wx.EVT_MENU, self.OnSalir, id = ID_MENUMEDIOSPUBLICITARIOSSALIR)
		self.Bind(wx.EVT_TOOL, self.OnAgregar, id = ID_TOOLMEDIOSPUBLICITARIOSAGREGAR)
		self.Bind(wx.EVT_TOOL, self.OnEliminar, id = ID_TOOLMEDIOSPUBLICITARIOSELIMINAR)
		self.Bind(wx.EVT_TOOL, self.OnGuardar, id = ID_TOOLMEDIOSPUBLICITARIOSGUARDAR)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnLCtrl, id = ID_LISTCTRLMEDIOSPUBLICITARIOS)
		self.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.OnRightClick, id = ID_LISTCTRLMEDIOSPUBLICITARIOS)
		wx.EVT_CLOSE(self, self.OnSalir)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLMEDIOSPUBLICITARIOSDESCRIPCION)
		self.GetControl(ID_TEXTCTRLMEDIOSPUBLICITARIOSDESCRIPCION).SetMaxLength(50)
		wx.EVT_RADIOBOX(self, ID_RADIOBOXMEDIOSPUBLICITARIOSESTATUS, self.OnEstatus)
		
		anchos = [-1, 70, 140]
		self.CreateStatusBar(3)
		self.SetStatusWidths(anchos)
		self.SetStatusText(u"Ventas", 1)
		self.SetStatusText(u"Medios Publicitarios", 2)
		
		if wx.Platform == '__WXMSW__':
			self.GetControl(ID_LISTCTRLMEDIOSPUBLICITARIOS).SetSize(wx.Size(350, 300))
			self.GetControl(ID_NOTEBOOKMEDIOSPUBLICITARIOS).SetSize(wx.Size(400, 300))
		else:
			self.GetControl(ID_LISTCTRLMEDIOSPUBLICITARIOS).SetSize(wx.Size(350, 350))
			self.GetControl(ID_NOTEBOOKMEDIOSPUBLICITARIOS).SetSize(wx.Size(400, 350))
		
		self.currentitem, self.originaldescripcion, self.originalestatus = "","",""
		self.idmediopublicitario, self.agregar = 0,0
		self.FillListCtrl()
		
	def OnSalir(self, event):
		self.Destroy()
		
	def OnRightClick(self, event):
		pass
	
	def OnAgregar(self, event):
		self.agregar, self.NewFlag, self.FillingARecord = True, True, True
		self.GetControl(ID_TEXTCTRLMEDIOSPUBLICITARIOSID).SetValue("")
		self.GetControl(ID_TEXTCTRLMEDIOSPUBLICITARIOSID).Enable(True)
		self.GetControl(ID_TEXTCTRLMEDIOSPUBLICITARIOSDESCRIPCION).SetValue("")
		self.GetControl(ID_TEXTCTRLMEDIOSPUBLICITARIOSDESCRIPCION).SetBackgroundColour(wx.WHITE)
		self.GetControl(ID_TEXTCTRLMEDIOSPUBLICITARIOSDESCRIPCION).Enable(True)
		self.GetControl(ID_TEXTCTRLMEDIOSPUBLICITARIOSDESCRIPCION).Refresh()
		self.GetControl(ID_RADIOBOXMEDIOSPUBLICITARIOSESTATUS).SetStringSelection("Activado")
		self.GetControl(ID_RADIOBOXMEDIOSPUBLICITARIOSESTATUS).SetOwnBackgroundColour(wx.NullColour)
		self.GetControl(ID_RADIOBOXMEDIOSPUBLICITARIOSESTATUS).Enable(True)
		self.GetControl(ID_RADIOBOXMEDIOSPUBLICITARIOSESTATUS).Refresh()
		self.MenuSetter(ID_MENUMEDIOSPUBLICITARIOSARCHIVOAGREGAR, False)
		self.MenuSetter(ID_MENUMEDIOSPUBLICITARIOSARCHIVOELIMINAR, False)
		self.MenuSetter(ID_MENUMEDIOSPUBLICITARIOSARCHIVOGUARDAR, True)
		self.tb.EnableTool(ID_TOOLMEDIOSPUBLICITARIOSAGREGAR, False)
		self.tb.EnableTool(ID_TOOLMEDIOSPUBLICITARIOSELIMINAR, False)
		self.tb.EnableTool(ID_TOOLMEDIOSPUBLICITARIOSGUARDAR, True)
		self.FillingARecord = False
		self.originaldescripcion, self.originalestatus = "", ""
		self.GetControl(ID_TEXTCTRLMEDIOSPUBLICITARIOSDESCRIPCION).SetFocus()
		
	def OnEliminar(self, event):
		if self.idmediopublicitario == "":
			Mensajes().Info(self, u"No se ha especificado el Registro a Eliminar", u"Atenci�n")
			return
		sql = "select count(*) from gixprospectos where idmediopublicitario = %s" % self.idmediopublicitario
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if int(row[0]) > 0:
			Mensajes().Info(self,u"Sucedi� algo que impidi� eliminar este registro.\n\n" \
							u"Esto se debe a que hay %s prospectos que\ndependen de este medio publicitario."
							% int(row[0]), u"Atenci�n")
		else:
			if Mensajes().YesNo(self,u"� Desea realmente eliminar el registro %s ?"
								% self.idmediopublicitario, u"Confirmaci�n"):
				if self.DeleteRecord():
					self.FillListCtrl()
					self.FillingARecord = True
					self.GetControl(ID_TEXTCTRLMEDIOSPUBLICITARIOSID).SetValue("")
					self.GetControl(ID_TEXTCTRLMEDIOSPUBLICITARIOSDESCRIPCION).SetValue("")
					self.GetControl(ID_RADIOBOXMEDIOSPUBLICITARIOSESTATUS).SetStringSelection("Activado")
					self.FillingARecord = False
					#sql = """
					#insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension)
					#values ('%s', getdate(), '%s', '%s', '%s', '%s')
					#""" % (self.BlogGUID, self.usuario, u"Eliminaci�n del Registro", "", "")
					#if not self.QueryUpdateRecord(sql):
						#Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
					
		event.Skip()
				
	def DeleteRecord(self):
		sql = "delete from %s where idmediopublicitario = %s" % (self.dbtable, self.idmediopublicitario) 
		try:
			cursor = r_cn.cursor()
			cursor.execute(str(sql))
			cursor.close()
			r_cn.commit()
			return True
		except:
			r_cn.rollback()
			Mensajes().Info(self,u"Sucedi� algo que impidi� eliminar este registro.\n" \
							u"Quiz� se deba a que hay otra informaci�n\nque depende de este registro.\n%s"
							% sql, u"Atenci�n")
			return False
		
	def OnText(self, event):
		self.ctrlactual = event.GetId()
		valor = self.GetControl(self.ctrlactual).GetValue().encode("iso8859-1")
		valornum = str(valor).replace('.','')
		if valor and not valornum.isdigit():
			if not str(valor).isupper():
				if self.textevent:
					self.textevent = False
					self.GetControl(self.ctrlactual).SetValue(str(valor).upper())
				lastposition = self.GetControl(self.ctrlactual).GetLastPosition()
				self.GetControl(self.ctrlactual).SetInsertionPoint(lastposition)
				
		self.Text()
	
	def Text(self, VengodelaLista = False, texto = True):
		self.textevent = True
		control = self.GetControl(ID_TEXTCTRLMEDIOSPUBLICITARIOSDESCRIPCION)
		valor = control.GetValue().strip()
		if valor == "" and not self.FillingARecord and not self.NewFlag:
			self.NewFlag = True
			if not VengodelaLista:
				Mensajes().Info(self, u"� No debe quedar la descripci�n en blanco !", u"Atenci�n")
				return False
			
		if not self.FillingARecord:
			self.RevisaCambios()
			
		return True
			
	def RevisaCambios(self, cambiomedio = False, cambiopartida = False):
		control = self.GetControl(ID_TEXTCTRLMEDIOSPUBLICITARIOSDESCRIPCION)
		if control.GetValue() <> self.originaldescripcion:
			control.SetBackgroundColour(wx.CYAN)
			cambiomedio = True
		else:
			control.SetBackgroundColour(wx.WHITE)
		control.Refresh()
		
		control = self.GetControl(ID_RADIOBOXMEDIOSPUBLICITARIOSESTATUS)
		if control.GetStringSelection() <> self.originalestatus:
			control.SetOwnBackgroundColour(wx.CYAN)
			cambiomedio = True
		else:
			control.SetOwnBackgroundColour(wx.NullColour)
		control.Refresh()
		
		if cambiomedio:
			self.MenuSetter(ID_MENUMEDIOSPUBLICITARIOSARCHIVOAGREGAR, False)
			self.MenuSetter(ID_MENUMEDIOSPUBLICITARIOSARCHIVOELIMINAR, False)
			self.MenuSetter(ID_MENUMEDIOSPUBLICITARIOSARCHIVOGUARDAR, True)
			self.tb.EnableTool(ID_TOOLMEDIOSPUBLICITARIOSAGREGAR, False)
			self.tb.EnableTool(ID_TOOLMEDIOSPUBLICITARIOSELIMINAR, False)
			self.tb.EnableTool(ID_TOOLMEDIOSPUBLICITARIOSGUARDAR, True)
		else:
			self.MenuSetter(ID_MENUMEDIOSPUBLICITARIOSARCHIVOAGREGAR, True)
			self.MenuSetter(ID_MENUMEDIOSPUBLICITARIOSARCHIVOELIMINAR, True)
			self.MenuSetter(ID_MENUMEDIOSPUBLICITARIOSARCHIVOGUARDAR, False)
			self.tb.EnableTool(ID_TOOLMEDIOSPUBLICITARIOSAGREGAR, True)
			self.tb.EnableTool(ID_TOOLMEDIOSPUBLICITARIOSELIMINAR, True)
			self.tb.EnableTool(ID_TOOLMEDIOSPUBLICITARIOSGUARDAR, False)
	
	def OnEstatus(self, event):
		if not self.FillingARecord:
			self.RevisaCambios()
	
	def OnLCtrl(self, event):
		self.agregar = False
		self.FillingARecord = True
		lctrl = self.GetControl(ID_LISTCTRLMEDIOSPUBLICITARIOS)
		self.currentitem = event.m_itemIndex
		datointerno = lctrl.GetItem(self.currentitem, 0).GetText()
		self.datointerno = int(datointerno)
		self.LCtrl()
		self.FillingARecord = False
		event.Skip()

	def LCtrl(self, onguardar = False):
		cambio = False
		if self.tb.GetToolEnabled(ID_TOOLMEDIOSPUBLICITARIOSGUARDAR):
			if self.GetControl(ID_TEXTCTRLMEDIOSPUBLICITARIOSDESCRIPCION).GetValue() <> self.originaldescripcion:
				cambio = True
			elif self.GetControl(ID_RADIOBOXMEDIOSPUBLICITARIOSESTATUS).GetStringSelection() <> self.originalestatus:
				cambio =True
				
		if cambio:
			self.NewFlag = False
			self.Text(True)
			if not self.NewFlag:
				if onguardar:
					if Mensajes().YesNo(self,u"� Desea realmente grabar la informaci�n ?", u"Confirmaci�n"):
						self.GuardarDetalle(onguardar)
				else:
					if Mensajes().YesNo(self,u"Algunos datos han cambiado\n\n� Desea ud. grabarlos ?", u"Confirmaci�n"):
						self.GuardarDetalle()
					
				self.GetControl(ID_TEXTCTRLMEDIOSPUBLICITARIOSDESCRIPCION).SetBackgroundColour(wx.WHITE)
				self.GetControl(ID_TEXTCTRLMEDIOSPUBLICITARIOSDESCRIPCION).Refresh()
				self.GetControl(ID_RADIOBOXMEDIOSPUBLICITARIOSESTATUS).SetOwnBackgroundColour(wx.NullColour)
				self.GetControl(ID_RADIOBOXMEDIOSPUBLICITARIOSESTATUS).Refresh()
		
		if self.GetRecord(record = self.datointerno):
			self.MenuSetter(ID_MENUMEDIOSPUBLICITARIOSARCHIVOAGREGAR, True)
			self.MenuSetter(ID_MENUMEDIOSPUBLICITARIOSARCHIVOELIMINAR, True)
			self.MenuSetter(ID_MENUMEDIOSPUBLICITARIOSARCHIVOGUARDAR, False)
			self.tb.EnableTool(ID_TOOLMEDIOSPUBLICITARIOSAGREGAR, True)
			self.tb.EnableTool(ID_TOOLMEDIOSPUBLICITARIOSELIMINAR, True)
			self.tb.EnableTool(ID_TOOLMEDIOSPUBLICITARIOSGUARDAR, False)
			self.GetControl(ID_TEXTCTRLMEDIOSPUBLICITARIOSID).Enable(True)
			self.GetControl(ID_TEXTCTRLMEDIOSPUBLICITARIOSDESCRIPCION).Enable(True)
			self.GetControl(ID_RADIOBOXMEDIOSPUBLICITARIOSESTATUS).Enable(True)
			self.editable = True
		else:
			Mensajes().Warn(self, u"Escoja un registro v�lido", u"Atenci�n")
					
	def GetRecord(self, record):
		try:
			self.idmediopublicitario = int(record)
		except:
			return False
		sql = """
		select descripcion, estatus from %s where idmediopublicitario = %s
		""" % (self.dbtable, self.idmediopublicitario)
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		cursor.close()
		self.descripcion = str(row[0])
		if str(row[1]) == "A":
			self.estatus = "Activado"
		else:
			self.estatus = "Desactivado"
		self.GetControl(ID_TEXTCTRLMEDIOSPUBLICITARIOSID).SetValue(str(self.idmediopublicitario))
		self.GetControl(ID_TEXTCTRLMEDIOSPUBLICITARIOSDESCRIPCION).SetValue(self.descripcion)
		self.GetControl(ID_RADIOBOXMEDIOSPUBLICITARIOSESTATUS).SetStringSelection(self.estatus)
		self.originaldescripcion = str(row[0])
		if str(row[1]) == "A":
			self.originalestatus = "Activado"
		else:
			self.originalestatus = "Desactivado"
		return True
	
	def GuardarDetalle(self, onguardar = False):
		self.SaveRecord(onguardar)
		self.GetControl(ID_TEXTCTRLMEDIOSPUBLICITARIOSID).Enable(False)
		self.GetControl(ID_TEXTCTRLMEDIOSPUBLICITARIOSDESCRIPCION).Enable(False)
		self.GetControl(ID_RADIOBOXMEDIOSPUBLICITARIOSESTATUS).Enable(False)
	
	def OnGuardar(self, event):
		F, N = self.FillingARecord, self.NewFlag
		self.FillingARecord, self.NewFlag = False, False
		todobien = self.Text()
		self.FillingARecord, self.NewFlag = F, N
		if todobien:
			self.FillingARecord = True
			self.LCtrl(True)
			self.FillingARecord = False
		event.Skip()
		
	def SaveRecord(self, onguardar = False):
		wx.BeginBusyCursor()
		if self.agregar:
			bienGrabado, self.idmediopublicitario = self.AddRecord()
		else:
			bienGrabado = self.UpdateRecord()
		wx.EndBusyCursor()
			
		if bienGrabado:
			lctrl = self.GetControl(ID_LISTCTRLMEDIOSPUBLICITARIOS)
			if self.agregar:
				self.FillListCtrl()
				lctrl.SetItemState(self.ctrlindex, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
				self.GetRecord(record = self.idmediopublicitario)
			else:
				if onguardar:
					self.FillListCtrl()
					lctrl.SetItemState(self.ctrlindex, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
					self.GetRecord(record = self.idmediopublicitario)
				else:
					try:
						self.idmediopublicitario = self.datointerno
						self.FillListCtrl()
						lctrl.SetItemState(self.ctrlindex, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
						self.GetRecord(record = self.idmediopublicitario)
					except:
						pass
		else:
			Mensajes().Info(self, u"� El Registro no fue grabado !", u"Atenci�n")
			
	def UpdateRecord(self, querycancelar = ""):
		descripcion = self.GetControl(ID_TEXTCTRLMEDIOSPUBLICITARIOSDESCRIPCION).GetValue()
		status = self.GetControl(ID_RADIOBOXMEDIOSPUBLICITARIOSESTATUS).GetStringSelection()
		if status == "Activado":
			estatus = "A"
		else:
			estatus = "D"
		setListForQuery = "descripcion = '%s', estatus = '%s'" % (descripcion, estatus)
		sql = "update %s set %s where idmediopublicitario = %s" % (self.dbtable, setListForQuery, self.idmediopublicitario)
		queTal = self.QueryUpdateRecord(sql)
		if queTal:
			contenido = u"Edici�n del registro"
			#sql = """
			#insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension, Estatus)
			#values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
			#""" % (self.BlogGUID, self.usuario, contenido, "", "", "")
			#if not self.QueryUpdateRecord(sql):
				#Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
		
		return queTal
	
	def AddRecord(self):
		descripcion = self.GetControl(ID_TEXTCTRLMEDIOSPUBLICITARIOSDESCRIPCION).GetValue()
		status = self.GetControl(ID_RADIOBOXMEDIOSPUBLICITARIOSESTATUS).GetStringSelection()
		if status == "Activado":
			estatus = "A"
		else:
			estatus = "D"
		sqlFields = "descripcion, estatus"
		sqlValues = "'%s', '%s'" % (descripcion, estatus)
		sql = """
		insert into %s (%s) values (%s)
		""" % (self.dbtable, sqlFields, sqlValues) 
		sqlmax = "select max(idmediopublicitario) from %s" % self.dbtable
		queTal, identity =  self.QueryUpdateRecord(sql, sqlmax, True)
		numero = 0
		if queTal:
			if identity is not None:
				numero = identity
			else:
				Mensajes().Info(self, u"Problemas al buscar nuevo medio publicitario.\n\n%s" % sqlmax, u"Atenci�n")
			#self.GetControl(self.idtcidcheque).SetValue(str(numero))
			#sqly = "select convert(varchar(100), BlogGUID) from %s where idmediopublicitario = %s" % (self.dbtable, numero)
			#cursor = r_cn.cursor()
			#cursor.execute(str(sqly))
			#row = fetchone(cursor)
			#if row is not None:
				#self.BlogGUID = row[0]
			#cursor.close()
			#sql = """
			#insert into Blogs 
			#(BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension, Estatus)
			#values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
			#""" % (self.BlogGUID, self.usuario, "Alta del Medio Publicitario", "", "", "A")
			#if not self.QueryUpdateRecord(sql):
				#Mensajes().Info(self, u"Problemas al actualizar el blog.\n\n%s" % sql, u"Atenci�n")

		return queTal, int(numero)
	
	def FillListCtrl(self):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLMEDIOSPUBLICITARIOS)
		lctrl.Enable(False); lctrl.Show(False); lctrl.ClearAll()
		sql = """
		select idmediopublicitario, descripcion, estatus from %s order by 2
		""" % self.dbtable
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		fila = 0
		if rows:
			lctrl.InsertColumn(0, u"Id", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"Descripci�n")
			for row in rows:
				if str(row[2]) == "D":
					bgcolor = [255,153,153]
					#if fila %2 != 0: bgcolor = [255,153,153]
					#else:            bgcolor = [255,215,215]
				else:
					if fila %2 != 0: bgcolor = [204,204,255]
					else:            bgcolor = [230,230,255]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, str(row[1]))
				lctrl.SetItemData(index, row[0])
				if int(row[0]) == self.idmediopublicitario:
					self.ctrlindex = index
				fila += 1
			lctrl.SetColumnWidth(0, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(1, 500)
		else:
			lctrl.InsertColumn(0, "       No Existen Registros", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 167)
		cu.close()
		self.MenuSetter(ID_MENUMEDIOSPUBLICITARIOSARCHIVOAGREGAR, True)
		self.MenuSetter(ID_MENUMEDIOSPUBLICITARIOSARCHIVOELIMINAR, False)
		self.MenuSetter(ID_MENUMEDIOSPUBLICITARIOSARCHIVOGUARDAR, False)
		self.tb.EnableTool(ID_TOOLMEDIOSPUBLICITARIOSAGREGAR, True)
		self.tb.EnableTool(ID_TOOLMEDIOSPUBLICITARIOSELIMINAR, False)
		self.tb.EnableTool(ID_TOOLMEDIOSPUBLICITARIOSGUARDAR, False)
		self.GetControl(ID_TEXTCTRLMEDIOSPUBLICITARIOSID).Enable(False)
		self.GetControl(ID_TEXTCTRLMEDIOSPUBLICITARIOSDESCRIPCION).Enable(False)
		self.GetControl(ID_RADIOBOXMEDIOSPUBLICITARIOSESTATUS).Enable(False)
		lctrl.Show(True); lctrl.Enable(True)
		self.currentitemlst = []
		self.selecteditems = []
		wx.EndBusyCursor()
		if self.currentitem:
			lctrl.EnsureVisible(self.currentitem)
		salir = True
		return salir, fila
		
class GixConceptosEstimacion(wx.Frame, GixBase):
	dbtable = "gixconceptosestimacion"
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize, style = wx.DEFAULT_FRAME_STYLE,
				 usuario = None):
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		self.parent = parent
		self.usuario = usuario
		self.textevent = True
		self.datointerno = ""
		self.NewFlag = False
		self.ctrlindex = 0
		
		self.mb = CONESTMenuBarFunc()
		self.SetMenuBar(self.mb)
		self.tb = self.CreateToolBar(wx.TB_HORIZONTAL | wx.NO_BORDER | wx.TB_FLAT) # | wx.TB_TEXT )
		CONESTToolBarFunc(self.tb)
		panel = wx.Panel(self, -1)
		ConceptosEstimacionFuncion(panel, True, True)
		
		self.Bind(wx.EVT_MENU, self.OnAgregar, id = ID_MENUCONCEPTOESTIMACIONARCHIVOAGREGAR)
		self.Bind(wx.EVT_MENU, self.OnEliminar, id = ID_MENUCONCEPTOESTIMACIONARCHIVOELIMINAR)
		self.Bind(wx.EVT_MENU, self.OnGuardar, id = ID_MENUCONCEPTOESTIMACIONARCHIVOGUARDAR)
		self.Bind(wx.EVT_MENU, self.OnSalir, id = ID_MENUCONCEPTOESTIMACIONSALIR)
		self.Bind(wx.EVT_TOOL, self.OnAgregar, id = ID_TOOLCONCEPTOESTIMACIONAGREGAR)
		self.Bind(wx.EVT_TOOL, self.OnEliminar, id = ID_TOOLCONCEPTOESTIMACIONELIMINAR)
		self.Bind(wx.EVT_TOOL, self.OnGuardar, id = ID_TOOLCONCEPTOESTIMACIONGUARDAR)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnLCtrl, id = ID_LISTCTRLCONCEPTOESTIMACION)
		self.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.OnRightClick, id = ID_LISTCTRLCONCEPTOESTIMACION)
		wx.EVT_CLOSE(self, self.OnSalir)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLCONCEPTOESTIMACIONDESCRIPCION)
		self.GetControl(ID_TEXTCTRLCONCEPTOESTIMACIONDESCRIPCION).SetMaxLength(50)
		wx.EVT_RADIOBOX(self, ID_RADIOBOXCONCEPTOESTIMACIONESTATUS, self.OnEstatus)
		
		anchos = [-1, 80, 200]
		self.CreateStatusBar(3)
		self.SetStatusWidths(anchos)
		self.SetStatusText(u"Conceptos", 1)
		self.SetStatusText(u"Control de Proveedores de Obra", 2)
		
		if wx.Platform == '__WXMSW__':
			self.GetControl(ID_LISTCTRLCONCEPTOESTIMACION).SetSize(wx.Size(350, 300))
			self.GetControl(ID_NOTEBOOKCONCEPTOESTIMACION).SetSize(wx.Size(400, 300))
		else:
			self.GetControl(ID_LISTCTRLCONCEPTOESTIMACION).SetSize(wx.Size(350, 350))
			self.GetControl(ID_NOTEBOOKCONCEPTOESTIMACION).SetSize(wx.Size(400, 350))
		
		self.currentitem, self.originaldescripcion, self.originalestatus = "","",""
		self.idconceptoestimacion, self.agregar = 0,0
		self.FillListCtrl()
		
	def OnSalir(self, event):
		self.Destroy()
		
	def OnRightClick(self, event):
		self.idregistryblog = self.idconceptoestimacion
		self.idtitleblog = "Registro"
		if not hasattr(self, "ID_VIEWBLOG"):
			ID_VIEWBLOG = wx.NewId(); ID_ADDBLOG = wx.NewId()
			self.Bind(wx.EVT_MENU, self.OnViewBlog, id = ID_VIEWBLOG)
			self.Bind(wx.EVT_MENU, self.OnAddBlog, id = ID_ADDBLOG)
		popup = wx.Menu()
		popup.Append(ID_VIEWBLOG, u"Consultar el Blog del %s %s" % (self.idtitleblog, self.idregistryblog))
		popup.Append(ID_ADDBLOG, u"Participar en el Blog...")
		self.PopupMenu(popup)
		popup.Destroy()

	def OnViewBlog(self, event):
		goal = ((90, u"Fecha"), (90, u"Hora"), (100, u"Usuario"), (300, u"Blog"))
		query = """
		select convert(varchar(50), FechaCaptura, 103), convert(varchar(50), FechaCaptura, 108),
		UsuarioCaptura, ContenidoText from Blogs
		where BlogGUID = '%s' order by FechaCaptura desc;
		select count(*) from Blogs where BlogGUID = '%s'
		""" % (self.BlogGUID, self.BlogGUID)
		title = u"Consultando el Blog %s %s" % (self.idtitleblog, self.idregistryblog)
		table = "Blogs"
		frame = GixFrameCatalogo(self, -1, title, wx.Point(20,20), wx.Size(800,600), 
								 wx.DEFAULT_FRAME_STYLE, None, None, None, table, goal, query,
								 gridsize = [680,350], color = "AQUAMARINE")
		frame.Centre(wx.BOTH)
		frame.Show(True)
		
	def OnAddBlog(self, event):
		blog = wx.TextEntryDialog(self, u"Digite", u"Participando en el Blog %s %s"
								  % (self.idtitleblog, self.idregistryblog),
								  defaultValue = "", style = wx.OK | wx.TE_MULTILINE)
		blog.SetSize(wx.Size(400,300))
		blog.Centre(wx.BOTH)
		blog.ShowModal()
		comment = blog.GetValue()
		blog.Destroy()
		if comment:
			sql = """
			insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension)
			values ('%s', getdate(), '%s', '%s', '%s', '%s')
			""" % (self.BlogGUID, self.usuario, comment, "", "")
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"� Problemas al actualizar el blog !", u"Atenci�n")
	
	def OnAgregar(self, event):
		self.agregar, self.NewFlag, self.FillingARecord = True, True, True
		self.GetControl(ID_TEXTCTRLCONCEPTOESTIMACIONID).SetValue("")
		self.GetControl(ID_TEXTCTRLCONCEPTOESTIMACIONID).Enable(True)
		self.GetControl(ID_TEXTCTRLCONCEPTOESTIMACIONDESCRIPCION).SetValue("")
		self.GetControl(ID_TEXTCTRLCONCEPTOESTIMACIONDESCRIPCION).SetBackgroundColour(wx.WHITE)
		self.GetControl(ID_TEXTCTRLCONCEPTOESTIMACIONDESCRIPCION).Enable(True)
		self.GetControl(ID_TEXTCTRLCONCEPTOESTIMACIONDESCRIPCION).Refresh()
		self.GetControl(ID_RADIOBOXCONCEPTOESTIMACIONESTATUS).SetStringSelection("Activado")
		self.GetControl(ID_RADIOBOXCONCEPTOESTIMACIONESTATUS).SetOwnBackgroundColour(wx.NullColour)
		self.GetControl(ID_RADIOBOXCONCEPTOESTIMACIONESTATUS).Enable(True)
		self.GetControl(ID_RADIOBOXCONCEPTOESTIMACIONESTATUS).Refresh()
		self.MenuSetter(ID_MENUCONCEPTOESTIMACIONARCHIVOAGREGAR, False)
		self.MenuSetter(ID_MENUCONCEPTOESTIMACIONARCHIVOELIMINAR, False)
		self.MenuSetter(ID_MENUCONCEPTOESTIMACIONARCHIVOGUARDAR, True)
		self.tb.EnableTool(ID_TOOLCONCEPTOESTIMACIONAGREGAR, False)
		self.tb.EnableTool(ID_TOOLCONCEPTOESTIMACIONELIMINAR, False)
		self.tb.EnableTool(ID_TOOLCONCEPTOESTIMACIONGUARDAR, True)
		self.FillingARecord = False
		self.originaldescripcion, self.originalestatus = "", ""
		self.GetControl(ID_TEXTCTRLCONCEPTOESTIMACIONDESCRIPCION).SetFocus()
		
	def OnEliminar(self, event):
		if self.idconceptoestimacion == "":
			Mensajes().Info(self, u"No se ha especificado el Registro a Eliminar", u"Atenci�n")
			return
		
		# Lo siguiente se usar� para la relacion con estimaciones (Detalle de Facturaci�n)
		#sql = "select count(*) from gixprospectos where idmediopublicitario = %s" % self.idmediopublicitario
		#cu = r_cn.cursor()
		#cu.execute(str(sql))
		#row = fetchone(cu)
		#cu.close()
		#if int(row[0]) > 0:
			#Mensajes().Info(self,u"Sucedi� algo que impidi� eliminar este registro.\n\n" \
							#u"Esto se debe a que hay %s prospectos que\ndependen de este medio publicitario."
							#% int(row[0]), u"Atenci�n")
		#else:
		#
		# Lo que sigue va dentro del anterior else
		
		if Mensajes().YesNo(self,u"� Desea realmente eliminar el registro %s ?"
							% self.idconceptoestimacion, u"Confirmaci�n"):
			if self.DeleteRecord():
				self.FillListCtrl()
				self.FillingARecord = True
				self.GetControl(ID_TEXTCTRLCONCEPTOESTIMACIONID).SetValue("")
				self.GetControl(ID_TEXTCTRLCONCEPTOESTIMACIONDESCRIPCION).SetValue("")
				self.GetControl(ID_RADIOBOXCONCEPTOESTIMACIONESTATUS).SetStringSelection("Activado")
				self.FillingARecord = False
				#sql = """
				#insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension)
				#values ('%s', getdate(), '%s', '%s', '%s', '%s')
				#""" % (self.BlogGUID, self.usuario, u"Eliminaci�n del Registro", "", "")
				#if not self.QueryUpdateRecord(sql):
					#Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
					
		event.Skip()
				
	def DeleteRecord(self):
		sql = "delete from %s where idconceptoestimacion = %s" % (self.dbtable, self.idconceptoestimacion) 
		try:
			cursor = r_cn.cursor()
			cursor.execute(str(sql))
			cursor.close()
			r_cn.commit()
			return True
		except:
			r_cn.rollback()
			Mensajes().Info(self,u"Sucedi� algo que impidi� eliminar este registro.\n" \
							u"Quiz� se deba a que hay otra informaci�n\nque depende de este registro.\n%s"
							% sql, u"Atenci�n")
			return False
		
	def OnText(self, event):
		self.ctrlactual = event.GetId()
		valor = self.GetControl(self.ctrlactual).GetValue().encode("iso8859-1")
		valornum = str(valor).replace('.','')
		if valor and not valornum.isdigit():
			if not str(valor).isupper():
				if self.textevent:
					self.textevent = False
					self.GetControl(self.ctrlactual).SetValue(str(valor).upper())
				lastposition = self.GetControl(self.ctrlactual).GetLastPosition()
				self.GetControl(self.ctrlactual).SetInsertionPoint(lastposition)
				
		self.Text()
	
	def Text(self, VengodelaLista = False, texto = True):
		self.textevent = True
		control = self.GetControl(ID_TEXTCTRLCONCEPTOESTIMACIONDESCRIPCION)
		valor = control.GetValue().strip()
		if valor == "" and not self.FillingARecord and not self.NewFlag:
			self.NewFlag = True
			if not VengodelaLista:
				Mensajes().Info(self, u"� No debe quedar la descripci�n en blanco !", u"Atenci�n")
				return False
			
		if not self.FillingARecord:
			self.RevisaCambios()
			
		return True
			
	def RevisaCambios(self, cambiomedio = False, cambiopartida = False):
		control = self.GetControl(ID_TEXTCTRLCONCEPTOESTIMACIONDESCRIPCION)
		if control.GetValue() <> self.originaldescripcion:
			control.SetBackgroundColour(wx.CYAN)
			cambiomedio = True
		else:
			control.SetBackgroundColour(wx.WHITE)
		control.Refresh()
		
		control = self.GetControl(ID_RADIOBOXCONCEPTOESTIMACIONESTATUS)
		if control.GetStringSelection() <> self.originalestatus:
			control.SetOwnBackgroundColour(wx.CYAN)
			cambiomedio = True
		else:
			control.SetOwnBackgroundColour(wx.NullColour)
		control.Refresh()
		
		if cambiomedio:
			self.MenuSetter(ID_MENUCONCEPTOESTIMACIONARCHIVOAGREGAR, False)
			self.MenuSetter(ID_MENUCONCEPTOESTIMACIONARCHIVOELIMINAR, False)
			self.MenuSetter(ID_MENUCONCEPTOESTIMACIONARCHIVOGUARDAR, True)
			self.tb.EnableTool(ID_TOOLCONCEPTOESTIMACIONAGREGAR, False)
			self.tb.EnableTool(ID_TOOLCONCEPTOESTIMACIONELIMINAR, False)
			self.tb.EnableTool(ID_TOOLCONCEPTOESTIMACIONGUARDAR, True)
		else:
			self.MenuSetter(ID_MENUCONCEPTOESTIMACIONARCHIVOAGREGAR, True)
			self.MenuSetter(ID_MENUCONCEPTOESTIMACIONARCHIVOELIMINAR, True)
			self.MenuSetter(ID_MENUCONCEPTOESTIMACIONARCHIVOGUARDAR, False)
			self.tb.EnableTool(ID_TOOLCONCEPTOESTIMACIONAGREGAR, True)
			self.tb.EnableTool(ID_TOOLCONCEPTOESTIMACIONELIMINAR, True)
			self.tb.EnableTool(ID_TOOLCONCEPTOESTIMACIONGUARDAR, False)
	
	def OnEstatus(self, event):
		if not self.FillingARecord:
			self.RevisaCambios()
	
	def OnLCtrl(self, event):
		self.agregar = False
		self.FillingARecord = True
		lctrl = self.GetControl(ID_LISTCTRLCONCEPTOESTIMACION)
		self.currentitem = event.m_itemIndex
		datointerno = lctrl.GetItem(self.currentitem, 0).GetText()
		self.datointerno = int(datointerno)
		self.LCtrl()
		self.FillingARecord = False
		event.Skip()

	def LCtrl(self, onguardar = False):
		cambio = False
		if self.tb.GetToolEnabled(ID_TOOLCONCEPTOESTIMACIONGUARDAR):
			if self.GetControl(ID_TEXTCTRLCONCEPTOESTIMACIONDESCRIPCION).GetValue() <> self.originaldescripcion:
				cambio = True
			elif self.GetControl(ID_RADIOBOXCONCEPTOESTIMACIONESTATUS).GetStringSelection() <> self.originalestatus:
				cambio =True
				
		if cambio:
			self.NewFlag = False
			self.Text(True)
			if not self.NewFlag:
				if onguardar:
					if Mensajes().YesNo(self,u"� Desea realmente grabar la informaci�n ?", u"Confirmaci�n"):
						self.GuardarDetalle(onguardar)
				else:
					if Mensajes().YesNo(self,u"Algunos datos han cambiado\n\n� Desea ud. grabarlos ?", u"Confirmaci�n"):
						self.GuardarDetalle()
					
				self.GetControl(ID_TEXTCTRLCONCEPTOESTIMACIONDESCRIPCION).SetBackgroundColour(wx.WHITE)
				self.GetControl(ID_TEXTCTRLCONCEPTOESTIMACIONDESCRIPCION).Refresh()
				self.GetControl(ID_RADIOBOXCONCEPTOESTIMACIONESTATUS).SetOwnBackgroundColour(wx.NullColour)
				self.GetControl(ID_RADIOBOXCONCEPTOESTIMACIONESTATUS).Refresh()
		
		if self.GetRecord(record = self.datointerno):
			self.MenuSetter(ID_MENUCONCEPTOESTIMACIONARCHIVOAGREGAR, True)
			self.MenuSetter(ID_MENUCONCEPTOESTIMACIONARCHIVOELIMINAR, True)
			self.MenuSetter(ID_MENUCONCEPTOESTIMACIONARCHIVOGUARDAR, False)
			self.tb.EnableTool(ID_TOOLCONCEPTOESTIMACIONAGREGAR, True)
			self.tb.EnableTool(ID_TOOLCONCEPTOESTIMACIONELIMINAR, True)
			self.tb.EnableTool(ID_TOOLCONCEPTOESTIMACIONGUARDAR, False)
			self.GetControl(ID_TEXTCTRLCONCEPTOESTIMACIONID).Enable(True)
			self.GetControl(ID_TEXTCTRLCONCEPTOESTIMACIONDESCRIPCION).Enable(True)
			self.GetControl(ID_RADIOBOXCONCEPTOESTIMACIONESTATUS).Enable(True)
			self.editable = True
		else:
			Mensajes().Warn(self, u"Escoja un registro v�lido", u"Atenci�n")
					
	def GetRecord(self, record):
		try:
			self.idconceptoestimacion = int(record)
		except:
			return False
		sql = """
		select descripcion, estatus from %s where idconceptoestimacion = %s
		""" % (self.dbtable, self.idconceptoestimacion)
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		cursor.close()
		self.descripcion = str(row[0])
		if str(row[1]) == "A":
			self.estatus = "Activado"
		else:
			self.estatus = "Desactivado"
		self.GetControl(ID_TEXTCTRLCONCEPTOESTIMACIONID).SetValue(str(self.idconceptoestimacion))
		self.GetControl(ID_TEXTCTRLCONCEPTOESTIMACIONDESCRIPCION).SetValue(self.descripcion)
		self.GetControl(ID_RADIOBOXCONCEPTOESTIMACIONESTATUS).SetStringSelection(self.estatus)
		self.originaldescripcion = str(row[0])
		if str(row[1]) == "A":
			self.originalestatus = "Activado"
		else:
			self.originalestatus = "Desactivado"
		return True
	
	def GuardarDetalle(self, onguardar = False):
		self.SaveRecord(onguardar)
		self.GetControl(ID_TEXTCTRLCONCEPTOESTIMACIONID).Enable(False)
		self.GetControl(ID_TEXTCTRLCONCEPTOESTIMACIONDESCRIPCION).Enable(False)
		self.GetControl(ID_RADIOBOXCONCEPTOESTIMACIONESTATUS).Enable(False)
	
	def OnGuardar(self, event):
		F, N = self.FillingARecord, self.NewFlag
		self.FillingARecord, self.NewFlag = False, False
		todobien = self.Text()
		self.FillingARecord, self.NewFlag = F, N
		if todobien:
			self.FillingARecord = True
			self.LCtrl(True)
			self.FillingARecord = False
		event.Skip()
		
	def SaveRecord(self, onguardar = False):
		wx.BeginBusyCursor()
		if self.agregar:
			bienGrabado, self.idmediopublicitario = self.AddRecord()
		else:
			bienGrabado = self.UpdateRecord()
		wx.EndBusyCursor()
			
		if bienGrabado:
			lctrl = self.GetControl(ID_LISTCTRLCONCEPTOESTIMACION)
			if self.agregar:
				self.FillListCtrl()
				lctrl.SetItemState(self.ctrlindex, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
				self.GetRecord(record = self.idconceptoestimacion)
			else:
				if onguardar:
					self.FillListCtrl()
					lctrl.SetItemState(self.ctrlindex, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
					self.GetRecord(record = self.idconceptoestimacion)
				else:
					try:
						self.idconceptoestimacion = self.datointerno
						self.FillListCtrl()
						lctrl.SetItemState(self.ctrlindex, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
						self.GetRecord(record = self.idconceptoestimacion)
					except:
						pass
		else:
			Mensajes().Info(self, u"� El Registro no fue grabado !", u"Atenci�n")
			
	def UpdateRecord(self, querycancelar = ""):
		descripcion = self.GetControl(ID_TEXTCTRLCONCEPTOESTIMACIONDESCRIPCION).GetValue()
		status = self.GetControl(ID_RADIOBOXCONCEPTOESTIMACIONESTATUS).GetStringSelection()
		if status == "Activado":
			estatus = "A"
		else:
			estatus = "D"
		setListForQuery = "descripcion = '%s', estatus = '%s'" % (descripcion, estatus)
		sql = "update %s set %s where idconceptoestimacion = %s" % (self.dbtable, setListForQuery, self.idconceptoestimacion)
		queTal = self.QueryUpdateRecord(sql)
		if queTal:
			contenido = u"Edici�n del registro"
			sql = """
			insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension, Estatus)
			values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
			""" % (self.BlogGUID, self.usuario, contenido, "", "", "")
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
		
		return queTal
	
	def AddRecord(self):
		descripcion = self.GetControl(ID_TEXTCTRLCONCEPTOESTIMACIONDESCRIPCION).GetValue()
		status = self.GetControl(ID_RADIOBOXCONCEPTOESTIMACIONESTATUS).GetStringSelection()
		if status == "Activado":
			estatus = "A"
		else:
			estatus = "D"
		sqlFields = "descripcion, estatus"
		sqlValues = "'%s', '%s'" % (descripcion, estatus)
		sql = """
		insert into %s (%s) values (%s)
		""" % (self.dbtable, sqlFields, sqlValues) 
		sqlmax = "select max(idconceptoestimacion) from %s" % self.dbtable
		queTal, identity =  self.QueryUpdateRecord(sql, sqlmax, True)
		numero = 0
		if queTal:
			if identity is not None:
				numero = identity
			else:
				Mensajes().Info(self, u"Problemas al buscar nuevo concepto de estimaci�n.\n\n%s" % sqlmax, u"Atenci�n")
			self.GetControl(ID_TEXTCTRLCONCEPTOESTIMACIONID).SetValue(str(numero))
			sqly = "select convert(varchar(100), BlogGUID) from %s where idconceptoestimacion = %s" % (self.dbtable, numero)
			cursor = r_cn.cursor()
			cursor.execute(str(sqly))
			row = fetchone(cursor)
			if row is not None:
				self.BlogGUID = row[0]
			cursor.close()
			sql = """
			insert into Blogs 
			(BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension, Estatus)
			values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
			""" % (self.BlogGUID, self.usuario, u"Alta del Concepto de Estimaci�n", "", "", "")
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"Problemas al actualizar el blog.\n\n%s" % sql, u"Atenci�n")

		return queTal, int(numero)
	
	def FillListCtrl(self):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLCONCEPTOESTIMACION)
		lctrl.Enable(False); lctrl.Show(False); lctrl.ClearAll()
		sql = """
		select idconceptoestimacion, descripcion, estatus from %s order by 2
		""" % self.dbtable
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		fila = 0
		if rows:
			lctrl.InsertColumn(0, u"Id", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"Descripci�n")
			for row in rows:
				if str(row[2]) == "D":
					if fila %2 != 0: bgcolor = [255,153,153]
					else:            bgcolor = [255,215,215]
				else:
					if fila %2 != 0: bgcolor = [204,204,255]
					else:            bgcolor = [230,230,255]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, str(row[1]))
				lctrl.SetItemData(index, row[0])
				if int(row[0]) == self.idconceptoestimacion:
					self.ctrlindex = index
				fila += 1
			lctrl.SetColumnWidth(0, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(1, 500)
		else:
			lctrl.InsertColumn(0, "       No Existen Registros", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 167)
		cu.close()
		self.MenuSetter(ID_MENUCONCEPTOESTIMACIONARCHIVOAGREGAR, True)
		self.MenuSetter(ID_MENUCONCEPTOESTIMACIONARCHIVOELIMINAR, False)
		self.MenuSetter(ID_MENUCONCEPTOESTIMACIONARCHIVOGUARDAR, False)
		self.tb.EnableTool(ID_TOOLCONCEPTOESTIMACIONAGREGAR, True)
		self.tb.EnableTool(ID_TOOLCONCEPTOESTIMACIONELIMINAR, False)
		self.tb.EnableTool(ID_TOOLCONCEPTOESTIMACIONGUARDAR, False)
		self.GetControl(ID_TEXTCTRLCONCEPTOESTIMACIONID).Enable(False)
		self.GetControl(ID_TEXTCTRLCONCEPTOESTIMACIONDESCRIPCION).Enable(False)
		self.GetControl(ID_RADIOBOXCONCEPTOESTIMACIONESTATUS).Enable(False)
		lctrl.Show(True); lctrl.Enable(True)
		self.currentitemlst = []
		self.selecteditems = []
		wx.EndBusyCursor()
		if self.currentitem:
			lctrl.EnsureVisible(self.currentitem)
		salir = True
		return salir, fila
		
class GixPreciosSustentables(wx.Frame, GixBase):
	dbtable = "gixpreciosustentable"
	campos = {ID_CHOICEPRECIOSUSTENTABLEETAPA:"ch", ID_TEXTCTRLPRECIOSUSTENTABLEPRECIO:"tc"}
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize, style = wx.DEFAULT_FRAME_STYLE,
				 usuario = None):
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		self.parent = parent
		self.usuario = usuario
		self.textevent = True
		self.datointerno = ""
		self.NewFlag = False
		self.ctrlindex = 0
		
		self.mb = PRECIOSUSTENTABLEMenuBarFunc()
		self.SetMenuBar(self.mb)
		self.tb = self.CreateToolBar(wx.TB_HORIZONTAL | wx.NO_BORDER | wx.TB_FLAT) # | wx.TB_TEXT )
		PRECIOSUSTENTABLEToolBarFunc(self.tb)
		panel = wx.Panel(self, -1)
		PrecioSustentableFuncion(panel, True, True)
		
		wx.EVT_CLOSE(self, lambda _: self.Destroy())
		self.Bind(wx.EVT_MENU, self.OnAgregar, id = ID_MENUPRECIOSUSTENTABLEARCHIVOAGREGAR)
		self.Bind(wx.EVT_MENU, self.OnEliminar, id = ID_MENUPRECIOSUSTENTABLEARCHIVOELIMINAR)
		self.Bind(wx.EVT_MENU, self.OnGuardar, id = ID_MENUPRECIOSUSTENTABLEARCHIVOGUARDAR)
		self.Bind(wx.EVT_MENU, lambda _: self.Destroy(), id = ID_MENUPRECIOSUSTENTABLESALIR)
		self.Bind(wx.EVT_TOOL, self.OnAgregar, id = ID_TOOLPRECIOSUSTENTABLEAGREGAR)
		self.Bind(wx.EVT_TOOL, self.OnEliminar, id = ID_TOOLPRECIOSUSTENTABLEELIMINAR)
		self.Bind(wx.EVT_TOOL, self.OnGuardar, id = ID_TOOLPRECIOSUSTENTABLEGUARDAR)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnLCtrl, id = ID_LISTCTRLPRECIOSUSTENTABLE)
		self.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.OnRightClick, id = ID_LISTCTRLPRECIOSUSTENTABLE)
		self.Bind(wx.EVT_CHOICE, self.OnChoice, id = ID_CHOICEPRECIOSUSTENTABLEETAPA)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLPRECIOSUSTENTABLEPRECIO)
		
		anchos = [-1, 55, 310]
		self.CreateStatusBar(3)
		self.SetStatusWidths(anchos)
		self.SetStatusText(u"Ventas", 1)
		self.SetStatusText(u"Precios Sustentables por Etapa para Ofertas de Compra", 2)
		
		if wx.Platform == '__WXMSW__':
			self.GetControl(ID_LISTCTRLPRECIOSUSTENTABLE).SetSize(wx.Size(350, 300))
			self.GetControl(ID_NOTEBOOKPRECIOSUSTENTABLE).SetSize(wx.Size(400, 300))
		else:
			self.GetControl(ID_LISTCTRLPRECIOSUSTENTABLE).SetSize(wx.Size(350, 350))
			self.GetControl(ID_NOTEBOOKPRECIOSUSTENTABLE).SetSize(wx.Size(400, 350))
		
		self.originaletapa = -1
		self.currentitem, self.originalprecio = "",""
		self.fketapa, self.agregar = 0,0
		
		self.ObtenerEtapas()
		self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLELETRA).SetBackgroundColour(wx.Colour(153,255,153))
		self.FillListCtrl()
		
	def OnRightClick(self, event):
		self.idregistryblog = self.fketapa
		self.idtitleblog = "Registro"
		if not hasattr(self, "ID_VIEWBLOG"):
			ID_VIEWBLOG = wx.NewId(); ID_ADDBLOG = wx.NewId()
			self.Bind(wx.EVT_MENU, self.OnViewBlog, id = ID_VIEWBLOG)
			self.Bind(wx.EVT_MENU, self.OnAddBlog, id = ID_ADDBLOG)
		popup = wx.Menu()
		popup.Append(ID_VIEWBLOG, u"Consultar el Blog del %s %s" % (self.idtitleblog, self.idregistryblog))
		popup.Append(ID_ADDBLOG, u"Participar en el Blog...")
		self.PopupMenu(popup)
		popup.Destroy()

	def OnViewBlog(self, event):
		goal = ((90, u"Fecha"), (90, u"Hora"), (100, u"Usuario"), (300, u"Blog"))
		query = """
		select convert(varchar(50), FechaCaptura, 103), convert(varchar(50), FechaCaptura, 108),
		UsuarioCaptura, ContenidoText from Blogs
		where BlogGUID = '%s' order by FechaCaptura desc;
		select count(*) from Blogs where BlogGUID = '%s'
		""" % (self.BlogGUID, self.BlogGUID)
		title = u"Consultando el Blog %s %s" % (self.idtitleblog, self.idregistryblog)
		table = "Blogs"
		frame = GixFrameCatalogo(self, -1, title, wx.Point(20,20), wx.Size(800,600), 
								 wx.DEFAULT_FRAME_STYLE, None, None, None, table, goal, query,
								 gridsize = [680,350], color = "AQUAMARINE")
		frame.Centre(wx.BOTH)
		frame.Show(True)
		
	def OnAddBlog(self, event):
		blog = wx.TextEntryDialog(self, u"Digite", u"Participando en el Blog %s %s"
								  % (self.idtitleblog, self.idregistryblog),
								  defaultValue = "", style = wx.OK | wx.TE_MULTILINE)
		blog.SetSize(wx.Size(400,300))
		blog.Centre(wx.BOTH)
		blog.ShowModal()
		comment = blog.GetValue()
		blog.Destroy()
		if comment:
			sql = """
			insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension)
			values ('%s', getdate(), '%s', '%s', '%s', '%s')
			""" % (self.BlogGUID, self.usuario, comment, "", "")
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"� Problemas al actualizar el blog !", u"Atenci�n")
	
	def ObtenerEtapas(self):
		control = self.GetControl(ID_CHOICEPRECIOSUSTENTABLEETAPA); control.Clear()
		sql = """
		select codigo, descripcion from ETAPA order by descripcion
		"""
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(self.GetString(row[1]), int(row[0]))
				
	def OnAgregar(self, event):
		self.agregar, self.NewFlag, self.FillingARecord = True, True, True
		self.GetControl(ID_CHOICEPRECIOSUSTENTABLEETAPA).SetSelection(SetChoiceIndex())
		self.GetControl(ID_CHOICEPRECIOSUSTENTABLEETAPA).SetBackgroundColour(wx.WHITE)
		self.GetControl(ID_CHOICEPRECIOSUSTENTABLEETAPA).Enable(True)
		self.GetControl(ID_CHOICEPRECIOSUSTENTABLEETAPA).Refresh()
		self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLEPRECIO).SetValue("")
		self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLEPRECIO).SetBackgroundColour(wx.WHITE)
		self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLEPRECIO).Enable(True)
		self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLEPRECIO).Refresh()
		self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLELETRA).SetValue("")
		self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLELETRA).Enable(True)
		self.MenuSetter(ID_MENUPRECIOSUSTENTABLEARCHIVOAGREGAR, False)
		self.MenuSetter(ID_MENUPRECIOSUSTENTABLEARCHIVOELIMINAR, False)
		self.MenuSetter(ID_MENUPRECIOSUSTENTABLEARCHIVOGUARDAR, True)
		self.tb.EnableTool(ID_TOOLPRECIOSUSTENTABLEAGREGAR, False)
		self.tb.EnableTool(ID_TOOLPRECIOSUSTENTABLEELIMINAR, False)
		self.tb.EnableTool(ID_TOOLPRECIOSUSTENTABLEGUARDAR, True)
		self.FillingARecord = False
		self.originaletapa = -1; self.originalprecio = ""
		self.GetControl(ID_CHOICEPRECIOSUSTENTABLEETAPA).SetFocus()
		
	def OnEliminar(self, event):
		if self.fketapa == "":
			Mensajes().Info(self, u"No se ha especificado el Registro a Eliminar", u"Atenci�n")
		elif Mensajes().YesNo(self,u"� Desea realmente eliminar el registro %s ?"
							  % self.fketapa, u"Confirmaci�n"):
			if self.DeleteRecord():
				self.FillListCtrl()
				self.FillingARecord = True
				self.GetControl(ID_CHOICEPRECIOSUSTENTABLEETAPA).SetSelection(SetChoiceIndex())
				self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLEPRECIO).SetValue("")
				self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLELETRA).SetValue("")
				self.FillingARecord = False
				#sql = """
				#insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension)
				#values ('%s', getdate(), '%s', '%s', '%s', '%s')
				#""" % (self.BlogGUID, self.usuario, u"Eliminaci�n del Registro", "", "")
				#if not self.QueryUpdateRecord(sql):
					#Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
					
		event.Skip()
				
	def DeleteRecord(self):
		sql = "delete from %s where fk_etapa = %s" % (self.dbtable, self.fketapa) 
		sqlblog = "delete from Blogs where BlogGUID = '%s'" % self.BlogGUID
		try:
			cursor = r_cn.cursor()
			cursor.execute(str(sql))
			cursor.execute(str(sqlblog))
			cursor.close()
			r_cn.commit()
			return True
		except:
			r_cn.rollback()
			Mensajes().Info(self,u"Sucedi� algo que impidi� eliminar este registro.\n" \
							u"Quiz� se deba a que hay otra informaci�n\nque depende de este registro.\n%s"
							% sql, u"Atenci�n")
			return False
		
	def OnChoice(self, event):
		self.Text()
		
	def OnText(self, event):
		self.ctrlactual = event.GetId()
		valor = self.GetControl(self.ctrlactual).GetValue().encode("iso8859-1")
		valornum = str(valor).replace('.','')
		if valor and not valornum.isdigit():
			if not str(valor).isupper():
				if self.textevent:
					self.textevent = False
					self.GetControl(self.ctrlactual).SetValue(str(valor).upper())
				lastposition = self.GetControl(self.ctrlactual).GetLastPosition()
				self.GetControl(self.ctrlactual).SetInsertionPoint(lastposition)
				
		self.Text()
	
	def Text(self, VengodelaLista = False, texto = True):
		self.textevent = True
		for id, tipo in self.campos.iteritems():
			control = self.GetControl(id)
			if tipo == "tc":
				valor = control.GetValue().strip()
			elif tipo == "ch":
				valor = control.GetSelection()
				if valor < 0:
					valor = ""
			if valor == "" and not self.FillingARecord and not self.NewFlag:
				self.NewFlag = True
				if not VengodelaLista:
					Mensajes().Info(self, u"� No debe quedar ning�n dato en blanco !", u"Atenci�n")
					return False
			
		if not self.FillingARecord:
			self.RevisaCambios()
	
		return True
			
	def RevisaCambios(self, cambiomedio = False, cambiopartida = False):
		for id, tipo in self.campos.iteritems():
			control = self.GetControl(id)
			if tipo == "tc":
				valor = control.GetValue()
				if valor:
					try:
						valor = float(valor)
						self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLELETRA).SetValue(str(c2p(valor).texto()))
					except:
						valor = ""
						control.SetValue("")
						self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLELETRA).SetValue("")
				else:
					self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLELETRA).SetValue("")
				if valor != self.originalprecio:
					control.SetBackgroundColour(wx.CYAN)
					cambiomedio = True
				else:
					control.SetBackgroundColour(wx.WHITE)
			elif tipo == "ch":
				index = control.GetSelection()
				if index < 0:
					control.SetBackgroundColour(wx.WHITE)
				else:
					valor = control.GetClientData(index)
					if valor != self.originaletapa:
						control.SetBackgroundColour(wx.CYAN)
						cambiomedio = True
					else:
						control.SetBackgroundColour(wx.WHITE)
			control.Refresh()
		
		if cambiomedio:
			self.MenuSetter(ID_MENUPRECIOSUSTENTABLEARCHIVOAGREGAR, False)
			self.MenuSetter(ID_MENUPRECIOSUSTENTABLEARCHIVOELIMINAR, False)
			self.MenuSetter(ID_MENUPRECIOSUSTENTABLEARCHIVOGUARDAR, True)
			self.tb.EnableTool(ID_TOOLPRECIOSUSTENTABLEAGREGAR, False)
			self.tb.EnableTool(ID_TOOLPRECIOSUSTENTABLEELIMINAR, False)
			self.tb.EnableTool(ID_TOOLPRECIOSUSTENTABLEGUARDAR, True)
		else:
			self.MenuSetter(ID_MENUPRECIOSUSTENTABLEARCHIVOAGREGAR, True)
			self.MenuSetter(ID_MENUPRECIOSUSTENTABLEARCHIVOELIMINAR, True)
			self.MenuSetter(ID_MENUPRECIOSUSTENTABLEARCHIVOGUARDAR, False)
			self.tb.EnableTool(ID_TOOLPRECIOSUSTENTABLEAGREGAR, True)
			self.tb.EnableTool(ID_TOOLPRECIOSUSTENTABLEELIMINAR, True)
			self.tb.EnableTool(ID_TOOLPRECIOSUSTENTABLEGUARDAR, False)
	
	def OnLCtrl(self, event):
		self.agregar = False
		self.FillingARecord = True
		lctrl = self.GetControl(ID_LISTCTRLPRECIOSUSTENTABLE)
		self.currentitem = event.m_itemIndex
		datointerno = lctrl.GetItem(self.currentitem, 0).GetText()
		self.datointerno = int(datointerno)
		self.LCtrl()
		self.FillingARecord = False
		event.Skip()

	def LCtrl(self, onguardar = False):
		cambio = False
		if self.tb.GetToolEnabled(ID_TOOLPRECIOSUSTENTABLEGUARDAR):
			if self.GetControl(ID_CHOICEPRECIOSUSTENTABLEETAPA).GetSelection() <> self.originaletapa:
				cambio = True
			elif self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLEPRECIO).GetValue() <> self.originalprecio:
				cambio =True
				
		if cambio:
			self.NewFlag = False
			self.Text(True)
			if not self.NewFlag:
				if onguardar:
					if Mensajes().YesNo(self,u"� Desea realmente grabar la informaci�n ?", u"Confirmaci�n"):
						self.GuardarDetalle(onguardar)
				else:
					if Mensajes().YesNo(self,u"Algunos datos han cambiado\n\n� Desea ud. grabarlos ?", u"Confirmaci�n"):
						self.GuardarDetalle()
					
				self.GetControl(ID_CHOICEPRECIOSUSTENTABLEETAPA).SetBackgroundColour(wx.WHITE)
				self.GetControl(ID_CHOICEPRECIOSUSTENTABLEETAPA).Refresh()
				self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLEPRECIO).SetBackgroundColour(wx.WHITE)
				self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLEPRECIO).Refresh()
		
		if self.GetRecord(record = self.datointerno):
			self.MenuSetter(ID_MENUPRECIOSUSTENTABLEARCHIVOAGREGAR, True)
			self.MenuSetter(ID_MENUPRECIOSUSTENTABLEARCHIVOELIMINAR, True)
			self.MenuSetter(ID_MENUPRECIOSUSTENTABLEARCHIVOGUARDAR, False)
			self.tb.EnableTool(ID_TOOLPRECIOSUSTENTABLEAGREGAR, True)
			self.tb.EnableTool(ID_TOOLPRECIOSUSTENTABLEELIMINAR, True)
			self.tb.EnableTool(ID_TOOLPRECIOSUSTENTABLEGUARDAR, False)
			self.GetControl(ID_CHOICEPRECIOSUSTENTABLEETAPA).Enable(True)
			self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLEPRECIO).Enable(True)
			self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLELETRA).Enable(True)
			self.editable = True
		else:
			Mensajes().Warn(self, u"Escoja un registro v�lido", u"Atenci�n")
					
	def DespliegaChoice(self, id, valor):
		choice = self.GetControl(id)
		for inx in range(0, choice.GetCount()):
			if valor == choice.GetClientData(inx):
				choice.SetSelection(inx)
				break
		
	def GetRecord(self, record):
		try:
			self.fketapa = int(record)
		except:
			return False
		sql = """
		select precio, convert(varchar(100), BlogGUID) from %s where fk_etapa = %s
		""" % (self.dbtable, self.fketapa)
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		cursor.close()
		self.precio = float(row[0])
		self.BlogGUID = str(row[1])
		self.GetControl(ID_CHOICEPRECIOSUSTENTABLEETAPA).SetSelection(SetChoiceIndex())
		self.DespliegaChoice(ID_CHOICEPRECIOSUSTENTABLEETAPA, valor = int(self.fketapa))
		self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLEPRECIO).SetValue(str(self.precio))
		self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLELETRA).SetValue(str(c2p(self.precio).texto()))
		self.originaletapa = self.fketapa
		self.originalprecio = float(row[0])
		return True
	
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
		return dato
	
	def GuardarDetalle(self, onguardar = False):
		self.SaveRecord(onguardar)
		self.GetControl(ID_CHOICEPRECIOSUSTENTABLEETAPA).Enable(False)
		self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLEPRECIO).Enable(False)
		self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLELETRA).Enable(False)
	
	def OnGuardar(self, event):
		F, N = self.FillingARecord, self.NewFlag
		self.FillingARecord, self.NewFlag = False, False
		todobien = self.Text()
		self.FillingARecord, self.NewFlag = F, N
		if todobien:
			self.FillingARecord = True
			self.LCtrl(True)
			self.FillingARecord = False
		event.Skip()
		
	def SaveRecord(self, onguardar = False):
		wx.BeginBusyCursor()
		if self.agregar:
			bienGrabado, self.fketapa = self.AddRecord()
		else:
			bienGrabado = self.UpdateRecord()
		wx.EndBusyCursor()
			
		if bienGrabado:
			lctrl = self.GetControl(ID_LISTCTRLPRECIOSUSTENTABLE)
			if self.agregar:
				self.FillListCtrl()
				lctrl.SetItemState(self.ctrlindex, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
				self.GetRecord(record = self.fketapa)
			else:
				if onguardar:
					self.FillListCtrl()
					lctrl.SetItemState(self.ctrlindex, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
					self.GetRecord(record = self.fketapa)
				else:
					try:
						self.fketapa = self.datointerno
						self.FillListCtrl()
						lctrl.SetItemState(self.ctrlindex, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
						self.GetRecord(record = self.fketapa)
					except:
						pass
		else:
			Mensajes().Info(self, u"� El Registro no fue grabado !", u"Atenci�n")
			
	def UpdateRecord(self, querycancelar = ""):
		queTal = False
		inx = self.GetControl(ID_CHOICEPRECIOSUSTENTABLEETAPA).GetSelection()
		fketapa = self.GetControl(ID_CHOICEPRECIOSUSTENTABLEETAPA).GetClientData(inx)
		if self.VerificarEtapa(fketapa, situacion = "modificar"):
			precio = self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLEPRECIO).GetValue()
			setListForQuery = "fk_etapa = %s, precio = %s" % (int(fketapa), float(precio))
			sql = "update %s set %s where fk_etapa = %s" % (self.dbtable, setListForQuery, self.fketapa)
			queTal = self.QueryUpdateRecord(sql)
			if queTal:
				contenido = u"Edici�n del registro"
				sql = """
				insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension, Estatus)
				values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
				""" % (self.BlogGUID, self.usuario, contenido, "", "", "")
				if not self.QueryUpdateRecord(sql):
					Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
		
		return queTal
	
	def VerificarEtapa(self, fketapa, situacion = "agregar"):
		sql = "select count(*) from %s where fk_etapa = %s" % (self.dbtable, int(fketapa))
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if int(row[0]) > 0 and situacion == "agregar":
			sql = "select descripcion from ETAPA where codigo = %s" % int(fketapa)
			cu = r_cn.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			cu.close()
			Mensajes().Info(self,u"� Sucedi� algo que impidi� %s este registro !\n\n" \
			                u"Ya existe el precio sustentable para la etapa %s:\n%s"
			                % (situacion, int(fketapa), self.GetString(row[0])), u"Atenci�n")
			return False
		
		return True
	
	def AddRecord(self):
		queTal = False; numero = 0
		inx = self.GetControl(ID_CHOICEPRECIOSUSTENTABLEETAPA).GetSelection()
		fketapa = self.GetControl(ID_CHOICEPRECIOSUSTENTABLEETAPA).GetClientData(inx)
		if self.VerificarEtapa(fketapa):
			precio = self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLEPRECIO).GetValue()
			sqlFields = "fk_etapa, precio"
			sqlValues = "%s, %s" % (int(fketapa), float(precio))
			sql = """
			insert into %s (%s) values (%s)
			""" % (self.dbtable, sqlFields, sqlValues) 
			queTal, trash =  self.QueryUpdateRecord(sql)
			numero = fketapa
			if queTal:
				sqly = "select convert(varchar(100), BlogGUID) from %s where fk_etapa = %s" % (self.dbtable, int(numero))
				cursor = r_cn.cursor()
				cursor.execute(str(sqly))
				row = fetchone(cursor)
				if row is not None:
					self.BlogGUID = row[0]
				cursor.close()
				sql = """
				insert into Blogs 
				(BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension, Estatus)
				values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
				""" % (self.BlogGUID, self.usuario, u"Alta de Precio Sustentable", "", "", "")
				if not self.QueryUpdateRecord(sql):
					Mensajes().Info(self, u"Problemas al actualizar el blog.\n\n%s" % sql, u"Atenci�n")

		return queTal, int(numero)
	
	def FillListCtrl(self):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLPRECIOSUSTENTABLE)
		lctrl.Enable(False); lctrl.Show(False); lctrl.ClearAll()
		sql = """
		select p.fk_etapa, e.descripcion, p.precio
		from %s p join ETAPA e on p.fk_etapa = e.codigo order by 2
		""" % self.dbtable
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		fila = 0
		if rows:
			lctrl.InsertColumn(0, u"Id", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"Etapa")
			lctrl.InsertColumn(2, u"Precio Sustentable", wx.LIST_FORMAT_RIGHT)
			for row in rows:
				if fila %2 != 0: bgcolor = [204,204,255]
				else:            bgcolor = [230,230,255]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, self.GetString(row[1]))
				lctrl.SetStringItem(index, 2, self.GetString(amount_and_cents_with_commas(row[2])))
				lctrl.SetItemData(index, row[0])
				if int(row[0]) == self.fketapa:
					self.ctrlindex = index
				fila += 1
			lctrl.SetColumnWidth(0, 30)
			lctrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(2, 105)
		else:
			lctrl.InsertColumn(0, "       No Existen Registros", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 167)
		cu.close()
		self.MenuSetter(ID_MENUPRECIOSUSTENTABLEARCHIVOAGREGAR, True)
		self.MenuSetter(ID_MENUPRECIOSUSTENTABLEARCHIVOELIMINAR, False)
		self.MenuSetter(ID_MENUPRECIOSUSTENTABLEARCHIVOGUARDAR, False)
		self.tb.EnableTool(ID_TOOLPRECIOSUSTENTABLEAGREGAR, True)
		self.tb.EnableTool(ID_TOOLPRECIOSUSTENTABLEELIMINAR, False)
		self.tb.EnableTool(ID_TOOLPRECIOSUSTENTABLEGUARDAR, False)
		self.GetControl(ID_CHOICEPRECIOSUSTENTABLEETAPA).Enable(False)
		self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLEPRECIO).Enable(False)
		self.GetControl(ID_TEXTCTRLPRECIOSUSTENTABLELETRA).Enable(False)
		lctrl.Show(True); lctrl.Enable(True)
		self.currentitemlst = []
		self.selecteditems = []
		wx.EndBusyCursor()
		if self.currentitem:
			lctrl.EnsureVisible(self.currentitem)
		salir = True
		return salir, fila
	
class GixTablasAmortizacionFunc2(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Elegir Cliente", pos = wx.DefaultPosition, size = wx.DefaultSize,
	             style = wx.DEFAULT_DIALOG_STYLE, clienteelegido = None):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.ClienteElegido = clienteelegido
		self.codigocliente, self.nombrecliente, self.idclientefiltro, self.clientefiltro = 0, "", "", ""
		TablasAmortizacionFunc2(self, True)
		self.GetControl(ID_SEARCHCTRLAMORFUNC2BUSCARIDCLIENTE).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchIdCliente, id = ID_SEARCHCTRLAMORFUNC2BUSCARIDCLIENTE)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanIdCliente, id = ID_SEARCHCTRLAMORFUNC2BUSCARIDCLIENTE)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchIdCliente, id = ID_SEARCHCTRLAMORFUNC2BUSCARIDCLIENTE)
		self.GetControl(ID_SEARCHCTRLAMORFUNC2BUSCARCLIENTE).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchCliente, id = ID_SEARCHCTRLAMORFUNC2BUSCARCLIENTE)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanCliente, id = ID_SEARCHCTRLAMORFUNC2BUSCARCLIENTE)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchCliente, id = ID_SEARCHCTRLAMORFUNC2BUSCARCLIENTE)
		self.Bind(wx.EVT_CHOICE, self.OnChoiceClientes, id = ID_CHOICEAMORFUNC2FILTROCUENTA)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelected, id = ID_LISTCTRLAMORFUNC2)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselected, id = ID_LISTCTRLAMORFUNC2)
		self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnActivated, id = ID_LISTCTRLAMORFUNC2)
		self.Bind(wx.EVT_BUTTON, self.OnRefrescar, id = ID_BUTTONAMORFUNC2REFRESCAR)
		self.Bind(wx.EVT_BUTTON, self.OnClose, id = ID_BUTTONAMORFUNC2CANCELAR)
		self.Bind(wx.EVT_BUTTON, self.OnActivated, id = ID_BUTTONAMORFUNC2ELEGIR)
		self.Bind(wx.EVT_BUTTON, self.OnAgregar, id = ID_BUTTONAMORFUNC2AGREGAR)
		self.Bind(wx.EVT_BUTTON, self.OnEditar, id = ID_BUTTONAMORFUNC2EDITAR)
		wx.EVT_CLOSE(self, self.OnClose)
		self.GetControl(ID_CHOICEAMORFUNC2FILTROCUENTA).SetSelection(0)
		self.FillListCtrl()
		self.GetControl(ID_SEARCHCTRLAMORFUNC2BUSCARIDCLIENTE).SetFocus()
		
	def OnClose(self, evt):
	        self.EndModal(1)
		self.Destroy()
		
	def GetEncode(self, valor):
		dato = ""
		try:
			dato = valor.encode("iso8859-1")
		except:
			dato = valor
			
		return dato.strip()

	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
				
		return dato.strip()

	def OnDoSearchIdCliente(self, evt):
		self.idclientefiltro =  self.GetControl(ID_SEARCHCTRLAMORFUNC2BUSCARIDCLIENTE).GetValue()
		self.FillListCtrl()

	def OnCleanIdCliente(self, evt):
		self.GetControl(ID_SEARCHCTRLAMORFUNC2BUSCARIDCLIENTE).SetValue("")
		self.idclientefiltro = ""
		self.FillListCtrl()
		
	def OnDoSearchCliente(self, evt):
		cliente =  self.GetControl(ID_SEARCHCTRLAMORFUNC2BUSCARCLIENTE).GetValue()
		self.clientefiltro = self.GetEncode(cliente)
		self.FillListCtrl()

	def OnCleanCliente(self, evt):
		self.GetControl(ID_SEARCHCTRLAMORFUNC2BUSCARCLIENTE).SetValue("")
		self.clientefiltro = ""
		self.FillListCtrl()
		
	def OnChoiceClientes(self, evt):
		self.FillListCtrl()

	def OnSelected(self, evt):
		currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLAMORFUNC2).GetItem(currentitem, 0).GetText()
		self.codigocliente = int(datointerno)
		self.nombrecliente = self.GetControl(ID_LISTCTRLAMORFUNC2).GetItem(currentitem, 1).GetText()
		self.GetControl(ID_BUTTONAMORFUNC2ELEGIR).Enable(True)
		self.GetControl(ID_BUTTONAMORFUNC2EDITAR).Enable(True)
		evt.Skip()
		
	def OnDeselected(self, evt):
		self.codigocliente, self.nombrecliente = 0, ""
		self.GetControl(ID_BUTTONAMORFUNC2ELEGIR).Enable(False)
		self.GetControl(ID_BUTTONAMORFUNC2EDITAR).Enable(False)
		evt.Skip()
	
	def OnActivated(self, evt):
		self.ClienteElegido(codigocliente = self.codigocliente, nombrecliente = self.nombrecliente)
	        self.EndModal(1)
		self.Destroy()
		
	def OnAgregar(self, evt):
		dlg = GixClientesVentasPinaresFunc2(self, title = u"Arcadia (Pinares Tapalpa) - Agregando Cliente", filllistctrl = self.FillListCtrl)
		dlg.CenterOnParent()
		dlg.ShowModal()
		
	def OnEditar(self, evt):
		print("aquiiiii xxx")
		dlg = GixClientesVentasPinaresFunc2(self, codigocliente = self.codigocliente, filllistctrl = self.FillListCtrl)
		dlg.CenterOnParent()
		dlg.ShowModal()
		
	def OnRefrescar(self, evt):
		self.FillListCtrl()
		
	def FillListCtrl(self):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLAMORFUNC2)
		if lctrl.GetItemCount() > 0 or lctrl.GetColumnCount() > 0:
			lctrl.ClearAll()

		listctrlfiltro = ""
		if self.idclientefiltro:
			listctrlfiltro = "where codigo = %s" % self.idclientefiltro
			
		if self.clientefiltro:
			if listctrlfiltro:
				listctrlfiltro = "%s and nombre like '%s%s%s'" % (listctrlfiltro, "%%", self.clientefiltro, "%%")
			else:
				listctrlfiltro = "where nombre like '%s%s%s'" % ("%%", self.clientefiltro, "%%")
				
		filtroclientes = self.GetControl(ID_CHOICEAMORFUNC2FILTROCUENTA).GetSelection()
		if filtroclientes == 1:
			if listctrlfiltro:
				listctrlfiltro = "%s %s" % (listctrlfiltro, "and codigo not in (select distinct fk_cliente from cuenta)")
			else:
				listctrlfiltro = "where codigo not in (select distinct fk_cliente from cuenta)"
		elif filtroclientes == 2:
			if listctrlfiltro:
				listctrlfiltro = "%s %s" % (listctrlfiltro, "and codigo in (select distinct fk_cliente from cuenta)")
			else:
				listctrlfiltro = "where codigo in (select distinct fk_cliente from cuenta)"
				
		cu = r_cngcmex.cursor()
		cu.execute(str("select codigo, nombre from CLIENTE %s order by nombre" % listctrlfiltro))
		rows = fetchall(cu)
		cu.close()
		if rows:
			lctrl.InsertColumn(0, u"C�digo", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(1, u"Nombre")
			for fila, row in enumerate(rows):
				if fila %2 != 0: bgcolor = [150,204,150]
				else:            bgcolor = [200,230,200]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, self.GetString(row[1]))
				lctrl.SetItemData(index, row[0])
				
			lctrl.SetColumnWidth(0, 70)
			lctrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Clientes", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 200)
			
		self.GetControl(ID_BUTTONAMORFUNC2ELEGIR).Enable(False)
		self.GetControl(ID_BUTTONAMORFUNC2EDITAR).Enable(False)
		wx.EndBusyCursor()
	
class GixTablasAmortizacionFunc2Ant(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Elegir Cliente", pos = wx.DefaultPosition, size = wx.DefaultSize,
	             style = wx.DEFAULT_DIALOG_STYLE, clienteelegido = None):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.ClienteElegido = clienteelegido
		self.codigocliente, self.nombrecliente, self.clientefiltro = 0, "", ""
		TablasAmortizacionFunc2(self, True)
		self.GetControl(ID_SEARCHCTRLAMORFUNC2BUSCARCLIENTE).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchCliente, id = ID_SEARCHCTRLAMORFUNC2BUSCARCLIENTE)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanCliente, id = ID_SEARCHCTRLAMORFUNC2BUSCARCLIENTE)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchCliente, id = ID_SEARCHCTRLAMORFUNC2BUSCARCLIENTE)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelected, id = ID_LISTCTRLAMORFUNC2)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselected, id = ID_LISTCTRLAMORFUNC2)
		self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnActivated, id = ID_LISTCTRLAMORFUNC2)
		self.Bind(wx.EVT_BUTTON, self.OnClose, id = ID_BUTTONAMORFUNC2CANCELAR)
		self.Bind(wx.EVT_BUTTON, self.OnActivated, id = ID_BUTTONAMORFUNC2ELEGIR)
		wx.EVT_CLOSE(self, self.OnClose)
		self.FillListCtrl()
		self.SetFocus()
		
	def OnClose(self, evt):
	        self.EndModal(1)
		self.Destroy()
	
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
		return dato.strip()

	def OnDoSearchCliente(self, evt):
		self.clientefiltro =  self.GetControl(ID_SEARCHCTRLAMORFUNC2BUSCARCLIENTE).GetValue()
		self.FillListCtrl()

	def OnCleanCliente(self, evt):
		self.GetControl(ID_SEARCHCTRLAMORFUNC2BUSCARCLIENTE).SetValue("")
		self.clientefiltro = ""
		self.FillListCtrl()

	def OnSelected(self, evt):
		currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLAMORFUNC2).GetItem(currentitem, 0).GetText()
		self.codigocliente = int(datointerno)
		self.nombrecliente = self.GetControl(ID_LISTCTRLAMORFUNC2).GetItem(currentitem, 1).GetText()
		self.GetControl(ID_BUTTONAMORFUNC2ELEGIR).Enable(True)
		evt.Skip()
		
	def OnDeselected(self, evt):
		self.codigocliente, self.nombrecliente = 0, ""
		self.GetControl(ID_BUTTONAMORFUNC2ELEGIR).Enable(False)
		evt.Skip()
	
	def OnActivated(self, evt):
		self.ClienteElegido(codigocliente = self.codigocliente, nombrecliente = self.nombrecliente)
		self.EndModal(1)
		self.Destroy()
		
	def FillListCtrl(self):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLAMORFUNC2)
		lctrl.Enable(False); lctrl.Show(False); lctrl.ClearAll()
		listctrlfiltro = ""
		if self.clientefiltro:
			listctrlfiltro = "where nombre like '%s%s%s'" % ("%%", str(self.clientefiltro), "%%")
		cu = r_cngcmex.cursor()
		cu.execute(str("select codigo, nombre from CLIENTE %s order by nombre" % listctrlfiltro))
		rows = fetchall(cu)
		cu.close()
		if rows:
			lctrl.InsertColumn(0, u"C�digo", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(1, u"Nombre")
			for fila, row in enumerate(rows):
				rfc = self.GetString(row[1])
				if rfc == "None": rfc = ""
				if fila %2 != 0: bgcolor = [150,204,150]
				else:            bgcolor = [200,230,200]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, self.GetString(row[1]))
				lctrl.SetItemData(index, row[0])
			lctrl.SetColumnWidth(0, 70)
			lctrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
			lctrl.SetItemState(0, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
			lctrl.EnsureVisible(0)
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Clientes", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 200)
			self.GetControl(ID_BUTTONAMORFUNC2ELEGIR).Enable(False)
		lctrl.Enable(True)
		lctrl.Show(True)
		lctrl.SetFocus()
		wx.EndBusyCursor()

class GixTablasAmortizacionFunc3(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Elegir Vendedor", pos = wx.DefaultPosition, size = wx.DefaultSize,
	             style = wx.DEFAULT_DIALOG_STYLE, vendedorelegido = None):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.VendedorElegido = vendedorelegido
		self.codigovendedor, self.nombrevendedor, self.vendedorfiltro = 0, "", ""
		TablasAmortizacionFunc3(self, True)
		self.GetControl(ID_SEARCHCTRLAMORFUNC3BUSCARVENDEDOR).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchVendedor, id = ID_SEARCHCTRLAMORFUNC3BUSCARVENDEDOR)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanVendedor, id = ID_SEARCHCTRLAMORFUNC3BUSCARVENDEDOR)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchVendedor, id = ID_SEARCHCTRLAMORFUNC3BUSCARVENDEDOR)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelected, id = ID_LISTCTRLAMORFUNC3)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselected, id = ID_LISTCTRLAMORFUNC3)
		self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnActivated, id = ID_LISTCTRLAMORFUNC3)
		self.Bind(wx.EVT_BUTTON, self.OnClose, id = ID_BUTTONAMORFUNC3CANCELAR)
		self.Bind(wx.EVT_BUTTON, self.OnActivated, id = ID_BUTTONAMORFUNC3ELEGIR)
		wx.EVT_CLOSE(self, self.OnClose)
		self.FillListCtrl()
		self.SetFocus()
		
	def OnClose(self, evt):
	        self.EndModal(1)
		self.Destroy()
	
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
		return dato.strip()

	def OnDoSearchVendedor(self, evt):
		self.vendedorfiltro =  self.GetControl(ID_SEARCHCTRLAMORFUNC3BUSCARVENDEDOR).GetValue()
		self.FillListCtrl()

	def OnCleanVendedor(self, evt):
		self.GetControl(ID_SEARCHCTRLAMORFUNC3BUSCARVENDEDOR).SetValue("")
		self.vendedorfiltro = ""
		self.FillListCtrl()

	def OnSelected(self, evt):
		currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLAMORFUNC3).GetItem(currentitem, 0).GetText()
		self.codigovendedor = int(datointerno)
		self.nombrevendedor = self.GetControl(ID_LISTCTRLAMORFUNC3).GetItem(currentitem, 1).GetText()
		self.GetControl(ID_BUTTONAMORFUNC3ELEGIR).Enable(True)
		evt.Skip()
		
	def OnDeselected(self, evt):
		self.codigovendedor, self.nombrevendedor = 0, ""
		self.GetControl(ID_BUTTONAMORFUNC3ELEGIR).Enable(False)
		evt.Skip()
	
	def OnActivated(self, evt):
		self.VendedorElegido(codigovendedor = self.codigovendedor, nombrevendedor = self.nombrevendedor)
		self.EndModal(1)
		self.Destroy()
		
	def FillListCtrl(self):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLAMORFUNC3)
		lctrl.Enable(False); lctrl.Show(False); lctrl.ClearAll()
		listctrlfiltro = ""
		if self.vendedorfiltro:
			listctrlfiltro = "and nombre like '%s%s%s'" % ("%%", str(self.vendedorfiltro), "%%")
		cu = r_cngcmex.cursor()
		cu.execute(str("select codigo, nombre from VENDEDOR where activo = 1 %s order by nombre" % listctrlfiltro))
		rows = fetchall(cu)
		cu.close()
		if rows:
			lctrl.InsertColumn(0, u"C�digo", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(1, u"Nombre")
			for fila, row in enumerate(rows):
				rfc = self.GetString(row[1])
				if rfc == "None": rfc = ""
				if fila %2 != 0: bgcolor = [150,204,150]
				else:            bgcolor = [200,230,200]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, self.GetString(row[1]))
				lctrl.SetItemData(index, row[0])
			lctrl.SetColumnWidth(0, 70)
			lctrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
			lctrl.SetItemState(0, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
			lctrl.EnsureVisible(0)
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Vendedores", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 200)
			self.GetControl(ID_BUTTONAMORFUNC3ELEGIR).Enable(False)
		lctrl.Enable(True)
		lctrl.Show(True)
		lctrl.SetFocus()
		wx.EndBusyCursor()

class GixTablasAmortizacionFunc4(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Elegir Lote", pos = wx.DefaultPosition, size = wx.DefaultSize,
	             style = wx.DEFAULT_DIALOG_STYLE, loteelegido = None, etapa = -1):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.LoteElegido, self.etapa = loteelegido, etapa
		self.codigolote = 0
		TablasAmortizacionFunc4(self, True)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelected, id = ID_LISTCTRLAMORFUNC4)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselected, id = ID_LISTCTRLAMORFUNC4)
		self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnActivated, id = ID_LISTCTRLAMORFUNC4)
		self.Bind(wx.EVT_BUTTON, self.OnClose, id = ID_BUTTONAMORFUNC4CANCELAR)
		self.Bind(wx.EVT_BUTTON, self.OnActivated, id = ID_BUTTONAMORFUNC4ELEGIR)
		wx.EVT_CLOSE(self, self.OnClose)
		self.FillListCtrl()
		self.SetFocus()
		
	def OnClose(self, evt):
	        self.EndModal(1)
		self.Destroy()
	
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
		return dato.strip()

	def OnSelected(self, evt):
		currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLAMORFUNC4).GetItem(currentitem, 0).GetText()
		self.codigolote = int(datointerno)
		self.GetControl(ID_BUTTONAMORFUNC4ELEGIR).Enable(True)
		evt.Skip()
		
	def OnDeselected(self, evt):
		self.codigolote = 0
		self.GetControl(ID_BUTTONAMORFUNC4ELEGIR).Enable(False)
		evt.Skip()
	
	def OnActivated(self, evt):
		self.LoteElegido(codigolote = self.codigolote, notifica = True)
		self.EndModal(1)
		self.Destroy()
		
	def FillListCtrl(self):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLAMORFUNC4)
		lctrl.Enable(False); lctrl.Show(False); lctrl.ClearAll()
		campos = "codigo, rtrim(ltrim(iden2)) + '-' + rtrim(ltrim(iden1)), superficie, preciopormetro"
		filtro = ""
		if self.etapa > 0:
			filtro = "and fk_etapa = %s" % self.etapa
		cu = r_cngcmex.cursor()
		cu.execute(str("select %s from INMUEBLE where fechadeventa is null %s order by iden2, iden1" % (campos, filtro)))
		rows = fetchall(cu)
		cu.close()
		if rows:
			lctrl.InsertColumn(0, u"C�digo", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"Lote", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(2, u"Superficie", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(3, u"Precio M2", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(4, u"Precio Contado", wx.LIST_FORMAT_RIGHT)
			for fila, row in enumerate(rows):
				preciocontado = float(row[2]) * float(row[3])
				if preciocontado < .1:
					continue
				if fila %2 != 0: bgcolor = [150,204,150]
				else:            bgcolor = [200,230,200]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, str(row[1]))
				lctrl.SetStringItem(index, 2, str(amount_and_cents_with_commas(row[2])))
				lctrl.SetStringItem(index, 3, str(amount_and_cents_with_commas(row[3])))
				lctrl.SetStringItem(index, 4, str(amount_and_cents_with_commas(preciocontado)))
				lctrl.SetItemData(index, row[0])
				
			lctrl.SetColumnWidth(0, 80)
			lctrl.SetColumnWidth(1, 80)
			lctrl.SetColumnWidth(2, 100)
			lctrl.SetColumnWidth(3, 110)
			lctrl.SetColumnWidth(4, 110)
			lctrl.SetItemState(0, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
			lctrl.EnsureVisible(0)
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Lotes", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 200)
			self.GetControl(ID_BUTTONAMORFUNC4ELEGIR).Enable(False)
			
		lctrl.Enable(True)
		lctrl.Show(True)
		lctrl.SetFocus()
		wx.EndBusyCursor()
		
class GixTablasAmortizacionFunc5(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = "", pos = wx.DefaultPosition, size = wx.DefaultSize,
	             style = wx.DEFAULT_DIALOG_STYLE, msg = "", modulo = None):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.Modulo = modulo
		TablasAmortizacionFunc5(self, True)
		self.GetControl(ID_TEXTAMORFUNC5VALOR).SetLabel(msg)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnAceptar, self.GetControl(ID_TEXTCTRLAMORFUNC5VALOR))
		wx.EVT_TOGGLEBUTTON(self, ID_TOGGLEBUTTONAMORFUNC5PC, self.OnPorcentajeCantidad)
		self.Bind(wx.EVT_BUTTON, self.OnAceptar, id = ID_BUTTONAMORFUNC5OK)
		wx.EVT_CLOSE(self, self.OnClose)
		self.SetFocus()
		
	def OnClose(self, evt):
	        self.EndModal(1)
		self.Destroy()
		
	def OnPorcentajeCantidad(self, evt):
		if self.GetControl(ID_TOGGLEBUTTONAMORFUNC5PC).GetValue():
			self.GetControl(ID_TOGGLEBUTTONAMORFUNC5PC).SetLabel("$")
			self.GetControl(ID_TOGGLEBUTTONAMORFUNC5PC).SetToolTip(wx.ToolTip("Cambiar a Porcentaje (%)"))
		else:
			self.GetControl(ID_TOGGLEBUTTONAMORFUNC5PC).SetLabel("%")
			self.GetControl(ID_TOGGLEBUTTONAMORFUNC5PC).SetToolTip(wx.ToolTip("Cambiar a Cantidad ($)"))
	
	def OnAceptar(self, evt):
		valor = self.GetControl(ID_TEXTCTRLAMORFUNC5VALOR).GetValue()
		pc = self.GetControl(ID_TOGGLEBUTTONAMORFUNC5PC).GetValue()
		try:
			if valor:
				valor = float(valor)
				self.Modulo(valor, pc)
				
			self.EndModal(1)
			self.Destroy()
		except:
			Mensajes().Error(self, u"� Valor mal introducido !")
			self.GetControl(ID_TEXTCTRLAMORFUNC5VALOR).SetValue("")
			
class GixTablasAmortizacionFunc6(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Valores Predeterminados", pos = wx.DefaultPosition,
	             size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.txtlst = [(0, ID_TEXTCTRLAMORFUNC6INTERESANUAL, "Interes anual"),
		               (1, ID_TEXTCTRLAMORFUNC6PLAZOMESES, "Plazo en meses"),
		               (1, ID_TEXTCTRLAMORFUNC6CONTADOMESES, "Limite de meses contado"),
		               (0, ID_TEXTCTRLAMORFUNC6CONTADODESCUENTO, "Descuento por pago de contado"),
		               (0, ID_TEXTCTRLAMORFUNC6ENGANCHE, "Enganche")]
		TablasAmortizacionFunc6(self, True)
		for x, idctrl, y in self.txtlst:
			self.Bind(wx.EVT_TEXT_ENTER, self.OnAceptar, self.GetControl(idctrl))
		self.Bind(wx.EVT_BUTTON, self.OnAceptar, id = ID_BUTTONAMORFUNC6ACEPTAR)
		self.Bind(wx.EVT_BUTTON, self.OnClose, id = ID_BUTTONAMORFUNC6CANCELAR)
		wx.EVT_CLOSE(self, self.OnClose)
		self.ObtenerValoresPredeterminados()
		self.SetFocus()
		
	def OnClose(self, evt):
	        self.EndModal(1)
		self.Destroy()
		
	def PreparaQuery(self, sql):
		sqlx = sql.replace('\t', ' '); sql = sqlx.replace('\n', ' ')
		return sql
		
	def ObtenerValoresPredeterminados(self):
		cu = r_cngcmex.cursor()
		sql = """
		select tasainteresanual, plazomeses, contadomeses, contadodescuento, enganche
		from gixamortizaciondefaults where pkamortizaciondefault = 1
		"""
		sql = self.PreparaQuery(sql)
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row is not None:
			self.GetControl(ID_TEXTCTRLAMORFUNC6INTERESANUAL).SetValue(str(amount_and_cents_with_commas(float(row[0]))))
			self.GetControl(ID_TEXTCTRLAMORFUNC6PLAZOMESES).SetValue(str(int(row[1])))
			self.GetControl(ID_TEXTCTRLAMORFUNC6CONTADOMESES).SetValue(str(int(row[2])))
			self.GetControl(ID_TEXTCTRLAMORFUNC6CONTADODESCUENTO).SetValue(str(float(row[3])))
			self.GetControl(ID_TEXTCTRLAMORFUNC6ENGANCHE).SetValue(str(amount_and_cents_with_commas(float(row[4]))))
			
	def ValidacionOk(self):
		todook = True
		for entero, idctrl, dato in self.txtlst:
			valor = self.GetControl(idctrl).GetValue()
			try:
				if valor:
					if entero:
						valor = int(valor)
					else:
						valor = float(valor)
				else:
					self.GetControl(idctrl).SetValue("0")
			except:
				Mensajes().Error(self, u"� %s mal introducido !" % dato)
				self.GetControl(idctrl).SetValue("")
				self.GetControl(idctrl).SetFocus()
				todook = False
				break
			
		return todook

	def OnAceptar(self, evt):
		if self.ValidacionOk():
			ta = self.GetControl(ID_TEXTCTRLAMORFUNC6INTERESANUAL).GetValue()
			pm = self.GetControl(ID_TEXTCTRLAMORFUNC6PLAZOMESES).GetValue()
			cm = self.GetControl(ID_TEXTCTRLAMORFUNC6CONTADOMESES).GetValue()
			cd = self.GetControl(ID_TEXTCTRLAMORFUNC6CONTADODESCUENTO).GetValue()
			en = self.GetControl(ID_TEXTCTRLAMORFUNC6ENGANCHE).GetValue()
			sql = """
			update gixamortizaciondefaults
			set tasainteresanual = %s, plazomeses = %s, contadomeses = %s, contadodescuento = %s, enganche = %s
			where pkamortizaciondefault = 1
			""" % (float(ta), int(pm), int(cm), float(cd), float(en))
			sql = self.PreparaQuery(sql)
			todook, trash = self.QueryUpdateRecord(sql, conexion = r_cngcmex)
			if not todook:
				Mensajes().Info(self, u"� No se actualizaron los valores predeterminados !", u"Atenci�n")
				
			self.EndModal(1)
			self.Destroy()

class GixTablasAmortizacionFunc7(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = "", pos = wx.DefaultPosition, size = wx.DefaultSize,
	             style = wx.DEFAULT_DIALOG_STYLE, codigoinmueble = 0):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.titulo1, self.lindero1 = "", ""; self.titulo2, self.lindero2 = "", ""
		self.titulo3, self.lindero3 = "", ""; self.titulo4, self.lindero4 = "", ""
		self.condominio = ""
		if codigoinmueble:
			self.ObtenerLinderos(codigoinmueble)
		TablasAmortizacionFunc7(self, True)
		self.PoblarTitulos()
		self.Bind(EVT_ETC_LAYOUT_NEEDED, lambda _ :self.Fit(), FOREIGNAMORFUNC7LINDERO1)
		self.Bind(EVT_ETC_LAYOUT_NEEDED, lambda _ :self.Fit(), FOREIGNAMORFUNC7LINDERO2)
		self.Bind(EVT_ETC_LAYOUT_NEEDED, lambda _ :self.Fit(), FOREIGNAMORFUNC7LINDERO3)
		self.Bind(EVT_ETC_LAYOUT_NEEDED, lambda _ :self.Fit(), FOREIGNAMORFUNC7LINDERO4)
		self.Bind(wx.EVT_BUTTON, self.OnClose, id = ID_BUTTONAMORFUNC7CERRAR)
		wx.EVT_CLOSE(self, self.OnClose)
		self.Fit()
		self.GetControl(ID_BUTTONAMORFUNC7CERRAR).SetFocus()
		
	def OnClose(self, evt):
	        self.EndModal(1)
		self.Destroy()
		
	def GetString(self, valor):
		dato = ""
		if valor is not None:
			try:
				dato = valor.decode("iso8859-1")
			except:
				try:
					dato = str(valor)
				except:
					dato = valor
		return dato.strip()
	
	def ObtenerLinderos(self, codigoinmueble):
		cu = r_cngcmex.cursor()
		campos = "titulo1, lindero1, titulo2, lindero2, titulo3, lindero3, titulo4, lindero4, condominio"
		cu.execute(str("select %s from INMUEBLE where codigo = %s" % (campos, codigoinmueble)))
		row = fetchone(cu)
		cu.close()
		self.titulo1 = self.GetString(row[0]); self.lindero1 = self.GetString(row[1])
		self.titulo2 = self.GetString(row[2]); self.lindero2 = self.GetString(row[3])
		self.titulo3 = self.GetString(row[4]); self.lindero3 = self.GetString(row[5])
		self.titulo4 = self.GetString(row[6]); self.lindero4 = self.GetString(row[7])
		self.condominio = self.GetString(row[8])
		
	def PoblarTitulos(self):
		for lindero in range(1, 5):
			self.GetControl(eval("ID_TEXTAMORFUNC7TITULO%s" % lindero)).SetLabel(eval("self.titulo%s" % lindero))
			
		self.GetControl(ID_TEXTAMORFUNC7CONDOMINIO).SetLabel(self.condominio)
		
	def GetLindero(self, lindero):
		return eval("self.lindero%s" % lindero)

class GixTablasAmortizacionFunc8(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Elegir Tabla de Amortizaci�n", pos = wx.DefaultPosition, size = wx.DefaultSize,
	             style = wx.DEFAULT_DIALOG_STYLE, tablaamortizacionelegida = None):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.TablaAmortizacionElegida = tablaamortizacionelegida
		self.pkamortizacion, self.clientefiltro = 0, ""
		TablasAmortizacionFunc8(self, True)
		self.GetControl(ID_SEARCHCTRLAMORFUNC8BUSCARCLIENTE).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchCliente, id = ID_SEARCHCTRLAMORFUNC8BUSCARCLIENTE)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanCliente, id = ID_SEARCHCTRLAMORFUNC8BUSCARCLIENTE)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchCliente, id = ID_SEARCHCTRLAMORFUNC8BUSCARCLIENTE)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelected, id = ID_LISTCTRLAMORFUNC8)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselected, id = ID_LISTCTRLAMORFUNC8)
		self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnActivated, id = ID_LISTCTRLAMORFUNC8)
		self.Bind(wx.EVT_BUTTON, self.OnClose, id = ID_BUTTONAMORFUNC8CANCELAR)
		self.Bind(wx.EVT_BUTTON, self.OnActivated, id = ID_BUTTONAMORFUNC8ELEGIR)
		wx.EVT_CLOSE(self, self.OnClose)
		self.FillListCtrl()
		self.SetFocus()
		
	def OnClose(self, evt):
	        self.EndModal(1)
		self.Destroy()
	
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
		return dato.strip()

	def OnDoSearchCliente(self, evt):
		self.clientefiltro =  self.GetControl(ID_SEARCHCTRLAMORFUNC8BUSCARCLIENTE).GetValue()
		self.FillListCtrl()

	def OnCleanCliente(self, evt):
		self.GetControl(ID_SEARCHCTRLAMORFUNC8BUSCARCLIENTE).SetValue("")
		self.clientefiltro = ""
		self.FillListCtrl()

	def OnSelected(self, evt):
		currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLAMORFUNC8).GetItem(currentitem, 0).GetText()
		self.pkamortizacion = int(datointerno)
		self.GetControl(ID_BUTTONAMORFUNC8ELEGIR).Enable(True)
		evt.Skip()
		
	def OnDeselected(self, evt):
		self.codigocliente = 0
		self.GetControl(ID_BUTTONAMORFUNC8ELEGIR).Enable(False)
		evt.Skip()
	
	def OnActivated(self, evt):
		self.TablaAmortizacionElegida(pkamortizacion = self.pkamortizacion)
		self.EndModal(1)
		self.Destroy()
		
	def FillListCtrl(self):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLAMORFUNC8)
		lctrl.Enable(False); lctrl.Show(False); lctrl.ClearAll()
		listctrlfiltro = ""
		if self.clientefiltro:
			listctrlfiltro = "where nombre like '%s%s%s'" % ("%%", str(self.clientefiltro), "%%")
		cu = r_cngcmex.cursor()
		query =""
		if os.environ["POSTGRES"]:
			query = """
			select a.pkamortizacion, convert(varchar(10), a.fechaelaboracion, 103),
			rtrim(ltrim(i.iden2)) + '-' + rtrim(ltrim(i.iden1)), rtrim(ltrim(e.descripcion)), isnull(c.nombre, '')
			from gixamortizacion a
			join INMUEBLE i on a.fkinmueble = i.codigo
			join ETAPA e on a.fketapa = e.codigo
			left join CLIENTE c on a.fkcliente = c.codigo
			%s order by a.fechaelaboracion desc, a.pkamortizacion desc
			""" % listctrlfiltro
		else:
			query = """
			select a.pkamortizacion, convert(varchar(10), a.fechaelaboracion, 103),
			rtrim(ltrim(i.iden2)) + '-' + rtrim(ltrim(i.iden1)), rtrim(ltrim(e.descripcion)), isnull(c.nombre, '')
			from gixamortizacion a
			join INMUEBLE i on a.fkinmueble = i.codigo
			join ETAPA e on a.fketapa = e.codigo
			left join CLIENTE c on a.fkcliente = c.codigo
			%s order by a.fechaelaboracion desc, a.pkamortizacion desc
			""" % listctrlfiltro
		sql = (query.replace('\n',' ')).replace('\t',' ')
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			lctrl.InsertColumn(0, u"Id", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(1, u"Elaboraci�n", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(2, u"Lote", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(3, u"Etapa")
			lctrl.InsertColumn(4, u"Cliente")
			for fila, row in enumerate(rows):
				if fila %2 != 0: bgcolor = [150,204,150]
				else:            bgcolor = [200,230,200]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, str(row[1]))
				lctrl.SetStringItem(index, 2, self.GetString(row[2]))
				lctrl.SetStringItem(index, 3, self.GetString(row[3]))
				lctrl.SetStringItem(index, 4, self.GetString(row[4]))
				lctrl.SetItemData(index, row[0])
			lctrl.SetColumnWidth(0, 70)
			lctrl.SetColumnWidth(1, 100)
			lctrl.SetColumnWidth(2, 90)
			lctrl.SetColumnWidth(3, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(4, wx.LIST_AUTOSIZE)
			lctrl.SetItemState(0, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
			lctrl.EnsureVisible(0)
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Tablas de Amortizaci�n", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 200)
			self.GetControl(ID_BUTTONAMORFUNC8ELEGIR).Enable(False)
		lctrl.Enable(True)
		lctrl.Show(True)
		lctrl.SetFocus()
		wx.EndBusyCursor()
		
class GixTablasAmortizacionFunc9(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Agregando Pago", pos = wx.DefaultPosition,
	             size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE, popupinsertar = None):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.PopupInsertar = popupinsertar
		self.DicDatesAndTxt = {ID_BITMAPBUTTONAMORFUNC9ELEGIRFECHAPAGO : ID_TEXTCTRLAMORFUNC9FECHAPAGO}
		self.txtlst = [(0, ID_TEXTCTRLAMORFUNC9ABONOCAPITAL, "Abono a capital"),
		               (0, ID_TEXTCTRLAMORFUNC9INTERES, "Interes")]
		TablasAmortizacionFunc9(self, True)
		for v in self.DicDatesAndTxt.keys():
			self.Bind(wx.EVT_BUTTON, self.OnFechaButton, id = v )
		for x, idctrl, y in self.txtlst:
			self.Bind(wx.EVT_TEXT_ENTER, self.OnAceptar, self.GetControl(idctrl))
		self.Bind(wx.EVT_BUTTON, self.OnAceptar, id = ID_BUTTONAMORFUNC9ACEPTAR)
		self.Bind(wx.EVT_BUTTON, self.OnClose, id = ID_BUTTONAMORFUNC9CANCELAR)
		wx.EVT_CLOSE(self, self.OnClose)
		self.ObtenerFechaDelDia()
		self.SetFocus()
		
	def OnClose(self, evt):
	        self.EndModal(1)
		self.Destroy()
		
	def ObtenerFechaDelDia(self):
		cu = r_cngcmex.cursor()
		cu.execute(str("select convert(varchar(10), getdate(), 103)"))
		row = fetchone(cu)
		cu.close()
		self.GetControl(ID_TEXTCTRLAMORFUNC9FECHAPAGO).SetValue(str(row[0]))
		
	def ValidacionOk(self):
		todook = True
		for entero, idctrl, dato in self.txtlst:
			valor = self.GetControl(idctrl).GetValue()
			valor = valor.replace(",","")
			try:
				if valor:
					if entero:
						valor = int(valor)
					else:
						valor = float(valor)
				else:
					self.GetControl(idctrl).SetValue("0.00")
			except:
				Mensajes().Error(self, u"� %s mal introducido !" % dato)
				self.GetControl(idctrl).SetValue("")
				self.GetControl(idctrl).SetFocus()
				todook = False
				break
			
		return todook

	def OnAceptar(self, evt):
		if self.ValidacionOk():
			d, m, a =  self.GetControl(ID_TEXTCTRLAMORFUNC9FECHAPAGO).GetValue().split("/")
			fecha = "%04d/%02d/%02d" % (int(a), int(m), int(d))
			capital = self.GetControl(ID_TEXTCTRLAMORFUNC9ABONOCAPITAL).GetValue()
			interes = self.GetControl(ID_TEXTCTRLAMORFUNC9INTERES).GetValue()
			capital = float(capital.replace(",","")); interes = float(interes.replace(",",""))
			pago = capital + interes
			if fecha and pago > 0:
				self.PopupInsertar(fecha, pago, capital, interes)
				self.EndModal(1)
				self.Destroy()
			else:
				Mensajes().Info(self, u"� Datos insuficientes para insertar el pago !", u"Atenci�n")
				self.GetControl(ID_TEXTCTRLAMORFUNC9ABONOCAPITAL).SetValue("")
				self.GetControl(ID_TEXTCTRLAMORFUNC9INTERES).SetValue("")
				
class GixTablasAmortizacionFunc10(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Editando Pago", pos = wx.DefaultPosition,
	             size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE, pkamortizaciondetalle = 0, popupeditar = None):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.pkamortizaciondetalle = pkamortizaciondetalle
		self.PopupEditar = popupeditar
		self.DicDatesAndTxt = {ID_BITMAPBUTTONAMORFUNC9ELEGIRFECHAPAGO : ID_TEXTCTRLAMORFUNC9FECHAPAGO}
		self.txtlst = [(0, ID_TEXTCTRLAMORFUNC9ABONOCAPITAL, "Abono a capital"),
		               (0, ID_TEXTCTRLAMORFUNC9INTERES, "Interes")]
		TablasAmortizacionFunc9(self, True)
		for v in self.DicDatesAndTxt.keys():
			self.Bind(wx.EVT_BUTTON, self.OnFechaButton, id = v )
		for x, idctrl, y in self.txtlst:
			self.Bind(wx.EVT_TEXT_ENTER, self.OnAceptar, self.GetControl(idctrl))
		self.Bind(wx.EVT_BUTTON, self.OnAceptar, id = ID_BUTTONAMORFUNC9ACEPTAR)
		self.Bind(wx.EVT_BUTTON, self.OnClose, id = ID_BUTTONAMORFUNC9CANCELAR)
		wx.EVT_CLOSE(self, self.OnClose)
		self.ObtenerDetallePago()
		self.SetFocus()
		
	def OnClose(self, evt):
	        self.EndModal(1)
		self.Destroy()
		
	def ObtenerDetallePago(self):
		cu = r_cngcmex.cursor()
		query = """
		select convert(varchar(10), fechadepago, 103), abonocapital, interes
		from gixamortizaciondetalle where pkamortizaciondetalle = %s
		""" % self.pkamortizaciondetalle
		sql = (query.replace('\n',' ')).replace('\t',' ')
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		self.GetControl(ID_TEXTCTRLAMORFUNC9FECHAPAGO).SetValue(str(row[0]))
		self.GetControl(ID_TEXTCTRLAMORFUNC9ABONOCAPITAL).SetValue(amount_and_cents_with_commas(float(row[1])))
		self.GetControl(ID_TEXTCTRLAMORFUNC9INTERES).SetValue(amount_and_cents_with_commas(float(row[2])))
		
	def ValidacionOk(self):
		todook = True
		for entero, idctrl, dato in self.txtlst:
			valor = self.GetControl(idctrl).GetValue()
			valor = valor.replace(",","")
			try:
				if valor:
					if entero:
						valor = int(valor)
					else:
						valor = float(valor)
				else:
					self.GetControl(idctrl).SetValue("0.00")
			except:
				Mensajes().Error(self, u"¡ %s mal introducido !" % dato)
				self.GetControl(idctrl).SetValue("")
				self.GetControl(idctrl).SetFocus()
				todook = False
				break
			
		return todook

	def OnAceptar(self, evt):
		if self.ValidacionOk():
			d, m, a =  self.GetControl(ID_TEXTCTRLAMORFUNC9FECHAPAGO).GetValue().split("/")
			fecha = "%04d/%02d/%02d" % (int(a), int(m), int(d))
			capital = self.GetControl(ID_TEXTCTRLAMORFUNC9ABONOCAPITAL).GetValue()
			interes = self.GetControl(ID_TEXTCTRLAMORFUNC9INTERES).GetValue()
			capital = float(capital.replace(",","")); interes = float(interes.replace(",",""))
			pago = capital + interes
			if fecha and pago > 0:
				self.PopupEditar(fecha, pago, capital, interes)
				self.EndModal(1)
				self.Destroy()
			else:
				Mensajes().Info(self, u"¡ Datos insuficientes para grabar el pago !", u"Atención")
				self.GetControl(ID_TEXTCTRLAMORFUNC9ABONOCAPITAL).SetValue("")
				self.GetControl(ID_TEXTCTRLAMORFUNC9INTERES).SetValue("")

class GixTablasAmortizacionFunc11(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Primer Pago", pos = wx.DefaultPosition,
	             size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE, fechaprimerpago = None, elegirfechaprimerpago = None):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.fechaprimerpago = fechaprimerpago
		self.ElegirFechaPrimerPago = elegirfechaprimerpago
		TablasAmortizacionFunc10(self, True)
		self.Bind(wx.EVT_BUTTON, self.OnAceptar, id = ID_BUTTONAMORFUNC10ACEPTAR)
		wx.EVT_CLOSE(self, self.OnClose)
		self.ObtenerFechaDelDia()
		self.SetFocus()
		
	def OnClose(self, evt):
	        self.EndModal(1)
		self.Destroy()
		
	def ObtenerFechaDelDia(self):
		md = {"01":"ENERO", "02":"FEBRERO", "03":"MARZO", "04":"ABRIL", "05":"MAYO", "06":"JUNIO", "07":"JULIO",
		      "08":"AGOSTO", "09":"SEPTIEMBRE", "10":"OCTUBRE", "11":"NOVIEMBRE", "12":"DICIEMBRE"}
		d, m, a = self.fechaprimerpago.split("/")
		self.GetControl(ID_CHOICEAMORFUNC10DIA).SetStringSelection(d)
		self.GetControl(ID_CHOICEAMORFUNC10MES).SetStringSelection(md[m])
		self.GetControl(ID_CHOICEAMORFUNC10ANIO).SetStringSelection(a)
		
	def OnAceptar(self, evt):
		md = {"ENERO":"01", "FEBRERO":"02", "MARZO":"03", "ABRIL":"04", "MAYO":"05", "JUNIO":"06", "JULIO":"07",
		      "AGOSTO":"08", "SEPTIEMBRE":"09", "OCTUBRE":"10", "NOVIEMBRE":"11", "DICIEMBRE":"12"}
		d = self.GetControl(ID_CHOICEAMORFUNC10DIA).GetStringSelection()
		m = self.GetControl(ID_CHOICEAMORFUNC10MES).GetStringSelection()
		a = self.GetControl(ID_CHOICEAMORFUNC10ANIO).GetStringSelection()
		self.ElegirFechaPrimerPago(int(a), int(md[m]), int(d), datoini = self.fechaprimerpago)
		self.EndModal(1)
		self.Destroy()
		
class GixTablasAmortizacionFunc12(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = "Editando Preferencias", pos = wx.DefaultPosition,
	             size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		panel = wx.Panel(self, -1)
		TablasAmortizacionFunc11(panel)
		wx.EVT_CLOSE(self, self.OnClose)
		self.grid = self.GetControl(ID_GRIDAMORFUNC11)
		self.grid.SetColLabelSize(20)
		self.grid.SetRowLabelSize(40)
		self.grid.Bind(gridlib.EVT_GRID_CELL_CHANGE, self.OnGridCellChange)
		self.Bind(wx.EVT_BUTTON, self.OnAgregar, id = ID_BUTTONAMORFUNC11AGREGAR)
		self.Bind(wx.EVT_BUTTON, self.OnEliminar, id = ID_BUTTONAMORFUNC11ELIMINAR)
		self.Bind(wx.EVT_BUTTON, self.OnRefrescar, id = ID_BITMAPBUTTONAMORFUNC11REFRESCAR)
		
		if wx.Platform == '__WXMSW__':
			self.SetSize(wx.Size(420, 330))
		else:
			self.SetSize(wx.Size(420, 330))
		
		self.FillGridCtrl()
		
	def OnClose(self, evt):
	        self.EndModal(1)
		self.Destroy()
		
	def OnAgregar(self, evt):
		query = """
	        insert into gixamortizaciondefaults (desde, hasta, tasa, descuento, enganche)
		values (0, 0, 0.00, 0.00, 0.00)
	        """
		sql = (query.replace('\n',' ')).replace('\t',' ')
		todook, trash = self.QueryUpdateRecord(sql, conexion = r_cngcmex)
		if not todook:
			Mensajes().Info(self, u"� No se grab� la informaci�n !", u"Atenci�n")
			
		self.FillGridCtrl("desde, hasta, tasa, descuento, enganche")
		
	def OnEliminar(self, evt):
		fila = self.grid.GetGridCursorRow()
		pkamortizaciondefault = int(self.grid.GetCellValue(fila, 0))
		desde = int(self.grid.GetCellValue(fila, 1))
		hasta = int(self.grid.GetCellValue(fila, 2))
		if Mensajes().YesNo(self, u"� Desea realmente eliminar el plazo de %s a %s meses ?" % (desde, hasta), u"Confirmaci�n"):
			cu = r_cngcmex.cursor()
			cu.execute("delete from gixamortizaciondefaults where pkamortizaciondefault = %s" % pkamortizaciondefault)
			cu.close()
			try:
				r_cngcmex.commit()
			except:
				r_cngcmex.rollback()
				Mensajes().Info(self, u"� No se elimin� la informaci�n !", u"Atenci�n")
	
			self.FillGridCtrl()
		
	def OnRefrescar(self, evt):
		self.FillGridCtrl()
		
	def ValidaInt(self, dato, fila, col):
		try:
			dato = int(dato)
		except:
			dato = 0
			
		self.grid.SetCellValue(fila, col, str(dato))
		
		return dato
		
	def ValidaFloat(self, dato, fila, col):
		try:
			dato = float(dato)
		except:
			dato = 0.00
			
		self.grid.SetCellValue(fila, col, str(amount_and_cents_with_commas(dato)))
		
		return dato
	
	def OnGridCellChange(self, evt):
		#fila = self.grid.GetGridCursorRow()
		fila = evt.GetRow()
		pkamortizaciondefault = int(self.grid.GetCellValue(fila, 0))
		desde = self.ValidaInt(self.grid.GetCellValue(fila, 1), fila, 1)
		hasta = self.ValidaInt(self.grid.GetCellValue(fila, 2), fila, 2)
		tasa = self.ValidaFloat(self.grid.GetCellValue(fila, 3), fila, 3)
		descuento = self.ValidaFloat(self.grid.GetCellValue(fila, 4), fila, 4)
		enganche = self.ValidaFloat(self.grid.GetCellValue(fila, 5), fila, 5)
		if pkamortizaciondefault > 0:
			query = """
		        update gixamortizaciondefaults
			set desde = %s, hasta = %s, tasa = %s, descuento = %s, enganche = %s
			where pkamortizaciondefault = %s
		        """ % (desde, hasta, tasa, descuento, enganche, pkamortizaciondefault)
			sql = (query.replace('\n',' ')).replace('\t',' ')
			todook, trash = self.QueryUpdateRecord(sql, conexion = r_cngcmex)
			if not todook:
				Mensajes().Info(self, u"� No se grab� la informaci�n !", u"Atenci�n")
				
	def FillGridCtrl(self, orden = "desde, hasta"):
		metapiece = ((10, u"", wx.ALIGN_RIGHT), (70, u"Desde\nMeses", wx.ALIGN_RIGHT),
		             (70, u"Hasta\nMeses", wx.ALIGN_RIGHT), (80, u"Tasa\n(%)", wx.ALIGN_RIGHT),
		             (80, u"Descuento\n(%)", wx.ALIGN_RIGHT), (80, u"Enganche\n(%)", wx.ALIGN_RIGHT))
		elements = len(metapiece)
		filas = self.grid.GetNumberRows()
		cols = self.grid.GetNumberCols()
		if filas:
			self.grid.DeleteRows(0, filas)
			
		if cols:
			self.grid.DeleteCols(0, cols)
			
		query = """
		select pkamortizaciondefault, desde, hasta, tasa, descuento, enganche
		from gixamortizaciondefaults order by %s
		""" % orden
		sql = (query.replace('\n',' ')).replace('\t',' ')
		cu = r_cngcmex.cursor()
		cu.execute(sql)
		rows = fetchall(cu)
		cu.close()
		if rows:
			self.grid.SetRowLabelSize(0)
			self.grid.SetColLabelSize(50)
			self.grid.InsertRows(0, 1)
			self.grid.InsertCols(0, elements)
			for colindex, metacols in enumerate(metapiece):
				self.grid.SetColSize(colindex, metacols[0])
				self.grid.SetColLabelValue(colindex, metacols[1])
				
			self.grid.ForceRefresh()
			if len(rows) > 1:
				self.grid.AppendRows(len(rows) - 1)
				
			wx.BeginBusyCursor()
			for fila, row in enumerate(rows):
				for col in range(0, colindex + 1):
					if fila % 2 == 0:
						self.grid.SetCellBackgroundColour(fila, col, wx.NamedColour("LIGHT BLUE"))
						
					if col == 0:
						self.grid.SetReadOnly(fila, 0, True)
						self.grid.SetCellRenderer(fila, 0, NullGridRenderer())
					
					col_selected = metapiece[col]
					hAlignmnt = col_selected[2]
					self.grid.SetCellAlignment(fila, col, hAlignmnt, wx.ALIGN_CENTER)
						
					if col in (0, 1, 2):
						self.grid.SetCellValue(fila, col, str(int(row[col])))
					else:
						self.grid.SetCellValue(fila, col, str(amount_and_cents_with_commas(float(row[col]))))
						
			wx.EndBusyCursor()
			self.grid.SetFocus()
			self.grid.AutoSizeColumns()
			self.grid.SetGridCursor(0, 1)
			self.grid.MakeCellVisible(0, 1)
			
class GixTablasAmortizacionFunc13(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = "", pos = wx.DefaultPosition, size = wx.DefaultSize,
	             style = wx.DEFAULT_DIALOG_STYLE, fechaenganche = "", pkamortizacion = 0, modulo = None):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.fechaenganche = fechaenganche
		self.pkamortizacion = pkamortizacion
		self.Modulo = modulo
		self.DicDatesAndTxt = {ID_BITMAPBUTTONAMORFUNC12ELEGIRFECHAENGANCHE : ID_TEXTCTRLAMORFUNC12FECHAENGANCHE}
		TablasAmortizacionFunc12(self, True)
		self.GetControl(ID_TEXTCTRLAMORFUNC12FECHAENGANCHE).SetValue(fechaenganche)
		for v in self.DicDatesAndTxt.keys():
			self.Bind(wx.EVT_BUTTON, self.OnFechaButton, id = v)
			
		self.Bind(wx.EVT_BUTTON, self.OnAceptar, id = ID_BUTTONAMORFUNC12ACEPTAR)
		self.Bind(wx.EVT_BUTTON, self.OnClose, id = ID_BUTTONAMORFUNC12CANCELAR)
		wx.EVT_CLOSE(self, self.OnClose)
		self.SetFocus()
		
	def OnClose(self, evt):
	        self.EndModal(1)
		self.Destroy()
		
	def OnAceptar(self, evt):
		fecha = self.GetControl(ID_TEXTCTRLAMORFUNC12FECHAENGANCHE).GetValue()
		if fecha:
			self.Modulo(self.pkamortizacion, fecha)
			self.EndModal(1)
			self.Destroy()
		else:
			Mensajes().Info(self, u"� Debe elegir la fecha del enganche !", u"Atenci�n")

class GixTablasAmortizacionFunc1(wx.Frame, GixBase):
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize, style = wx.DEFAULT_FRAME_STYLE, usuario = None):
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		self.usuarioautorizado = ("CESAR", "ENRIQUE", "MALR")
		self.usuario = usuario
		self.currentitem, self.fkamortizacion, self.numerodepago, self.pkamortizaciondetalle = -1, 0, 0, 0
		self.DicDatesAndTxt = {ID_BITMAPBUTTONAMORFUNC1ELEGIRFECHAELABORACION : ID_TEXTCTRLAMORFUNC1FECHAELABORACION}
		self.tb = self.CreateToolBar(wx.TB_HORIZONTAL | wx.NO_BORDER | wx.TB_FLAT | wx.TB_TEXT)
		if wx.Platform == '__WXMSW__':
			TABLASAMORTIZACIONPINARESToolBarFuncWin(self.tb)
		else:
			TABLASAMORTIZACIONPINARESToolBarFuncMac(self.tb)
		
		panel = wx.Panel(self, -1)
		TablasAmortizacionFunc1(panel)
		for v in self.DicDatesAndTxt.keys():
			self.Bind(wx.EVT_BUTTON, self.OnFecha, id = v)
						
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONAMORFUNC1ELEGIRCLIENTE, self.OnElegirCliente)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONAMORFUNC1LIMPIARCLIENTE, self.OnLimpiarCliente)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONAMORFUNC1ELEGIRVENDEDOR, self.OnElegirVendedor)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONAMORFUNC1LIMPIARVENDEDOR, self.OnLimpiarVendedor)
		self.Bind(wx.EVT_CHOICE, self.OnCambiarFormaDePago, id = ID_CHOICEAMORFUNC1FORMADEPAGO)
		self.Bind(wx.EVT_CHOICE, self.OnLimpiarLote, id = ID_CHOICEAMORFUNC1ETAPA)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONAMORFUNC1ELEGIRLOTE, self.OnElegirLote)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONAMORFUNC1LIMPIARLOTE, self.OnLimpiarLote)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONAMORFUNC1CONSULTARLINDEROS, self.OnConsultarLinderos)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONAMORFUNC1CAMBIARTASAANUAL, self.OnCambiarTasaInteres)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONAMORFUNC1CAMBIARPLAZO, self.OnCambiarPlazo)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONAMORFUNC1ELEGIRFECHAPRIMERPAGO, self.OnElegirFechaPrimerPago)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONAMORFUNC1CAMBIARDESCUENTO, self.OnCambiarDescuento)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONAMORFUNC1CAMBIARENGANCHE, self.OnCambiarEnganche)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONAMORFUNC1CAMBIARPAGOFIJO, self.OnCambiarPagoFijo)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONAMORFUNC1IMPRIMIRENGANCHE, self.OnImprimirPagareEnganche)
		self.Bind(wx.EVT_TOOL, self.OnNuevaTabla, id = ID_TOOLAMORFUNC1NUEVA)
		self.Bind(wx.EVT_TOOL, self.OnAbrir, id = ID_TOOLAMORFUNC1ABRIR)
		self.Bind(wx.EVT_TOOL, self.OnGuardar, id = ID_TOOLAMORFUNC1GUARDAR)
		self.Bind(wx.EVT_TOOL, self.OnEliminar, id = ID_TOOLAMORFUNC1ELIMINAR)
		self.Bind(wx.EVT_TOOL, self.OnEditarPredeterminados, id = ID_TOOLAMORFUNC1EDITARPREDETERMINADOS)
		self.Bind(wx.EVT_TOOL, self.OnAplicarPredeterminados, id = ID_TOOLAMORFUNC1APLICARPREDETERMINADOS)
		self.Bind(wx.EVT_TOOL, self.OnGenerarTabla, id = ID_TOOLAMORFUNC1GENERARTABLA)
		self.Bind(wx.EVT_TOOL, self.OnImprimirTabla, id = ID_TOOLAMORFUNC1IMPRIMIR)
		self.Bind(wx.EVT_TOOL, self.OnImprimirPagarePagos, id = ID_TOOLAMORFUNC1PAGARE)
		self.Bind(wx.EVT_TOOL, self.OnImprimirContrato, id = ID_TOOLAMORFUNC1CONTRATO)
		self.Bind(wx.EVT_TOOL, self.OnGenerarCuenta, id = ID_TOOLAMORFUNC1CUENTA)
		self.Bind(wx.EVT_CHOICE, self.OnVistaTabla, id = ID_CHOICEAMORFUNC1VISTA)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelected, id = ID_LISTCTRLAMORFUNC1)
		self.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.OnRightClick, id = ID_LISTCTRLAMORFUNC1)
		wx.EVT_CLOSE(self, self.OnSalir)
		anchos = [190, -1, 300]
		self.CreateStatusBar(3)
		self.SetStatusWidths(anchos)
		self.SetStatusText(u"          Arcadia - Pinares Tapalpa", 1)
		self.SetStatusText(u"Tabla de Pagos/Amortizaci�n, Contratos y Cuentas", 2)
		if wx.Platform == '__WXMSW__':
			self.GetControl(ID_LISTCTRLAMORFUNC1).SetSize(wx.Size(950, 340))
		else:
			self.GetControl(ID_LISTCTRLAMORFUNC1).SetSize(wx.Size(952, 340)) #(952,420)
			
		self.NuevaTabla()
		
	def OnSalir(self, event):
		if self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOINMUEBLE).GetValue():
			if self.cambio:
				if Mensajes().YesNo(self, u"� Desea guardar la informaci�n ?", u"Confirmaci�n"):
					self.Guardar()
		self.Destroy()
		
	def GetDefaultsPlazo(self):
		formadepago = self.GetControl(ID_CHOICEAMORFUNC1FORMADEPAGO).GetSelection()
		aux = self.GetControl(ID_TEXTCTRLAMORFUNC1PLAZOMESES).GetValue()
		if aux:
			plazo = int(aux)
		else:
			if formadepago:
				plazo = 0
			else:
				plazo = 36
			
		query = """
		select pkamortizaciondefault, desde, hasta, tasa, descuento, enganche
		from gixamortizaciondefaults where %s >= desde and %s <= hasta
		""" % (plazo, plazo)
		cu = r_cngcmex.cursor()
		cu.execute(self.PreparaQuery(query))
		row = fetchone(cu)
		cu.close()
		defaults = []
		if row is not None:
			defaults = [int(row[0]), int(row[1]), int(row[2]), float(row[3]), float(row[4]), float(row[5]), plazo]
		else:
			Mensajes().Error(self, u"� No hay plazo a %s meses !" % plazo, u"Atenci�n")
			
		return defaults
		
	def ObtenerEtapas(self, desarrollo):
		self.etapa = 0
		control = self.GetControl(ID_CHOICEAMORFUNC1ETAPA)
		control.Enable(False); control.Show(False); control.Clear()
		cu = r_cngcmex.cursor()
		cu.execute(str("select codigo, descripcion from ETAPA where fk_desarrollo = %s order by codigo" % desarrollo))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(self.GetString(row[1]), int(row[0]))
				
		control.Show(True)
		control.Enable(True)

	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
				
		if dato != "None":
			return dato.strip()
		else:
			return ""
		
	def PreparaQuery(self, sql):
		sqlx = sql.replace('\t', ' '); sql = sqlx.replace('\n', ' ')
		return sql
		
	def ObtenerFechaDelDia(self, primerpago = False):
		cu = r_cngcmex.cursor()
		query = ""
		if os.environ["POSTGRES"]:
			query= "SELECT TO_CHAR(NOW() :: DATE, 'dd/mm/yyyy')"
		else:
			query = "select convert(varchar(10), getdate(), 103)"
		cu.execute(query)
		row = fetchone(cu)
		cu.close()
		fecha = str(row[0])
		if primerpago:
			d, m, a = fecha.split("/")
			a = int(a); m = int(m); d = int(d)
			dd = 3
			if d > 3:
				dd = 18
				if d > 18:
					dd = 3
					if m == 12:
						m = 1
						a += 1
					else:
						m += 1
				
			fecha = "%02d/%02d/%04d" % (dd, m, a)
			
		return fecha

	def AparicionTotales(self, sino):
		self.GetControl(ID_TEXTCTRLAMORFUNC1TOTALABONADO).SetValue("")
		self.GetControl(ID_TEXTCTRLAMORFUNC1TOTALINTERES).SetValue("")
		self.GetControl(ID_TEXTCTRLAMORFUNC1TOTALENGANCHE).SetValue("")
		self.GetControl(ID_TEXTCTRLAMORFUNC1TOTALPAGADO).SetValue("")
		
		self.GetControl(ID_TEXTAMORFUNC1TOTALABONADO).Enable(sino)
		self.GetControl(ID_TEXTCTRLAMORFUNC1TOTALABONADO).Enable(sino)
		self.GetControl(ID_TEXTAMORFUNC1TOTALINTERES).Enable(sino)
		self.GetControl(ID_TEXTCTRLAMORFUNC1TOTALINTERES).Enable(sino)
		self.GetControl(ID_TEXTAMORFUNC1TOTALENGANCHE).Enable(sino)
		self.GetControl(ID_TEXTCTRLAMORFUNC1TOTALENGANCHE).Enable(sino)
		self.GetControl(ID_TEXTAMORFUNC1TOTALPAGADO).Enable(sino)
		self.GetControl(ID_TEXTCTRLAMORFUNC1TOTALPAGADO).Enable(sino)
		
		self.GetControl(ID_LINEAMORFUNC1TOTALLINEA).Show(sino)
		self.GetControl(ID_TEXTAMORFUNC1TOTALABONADO).Show(sino)
		self.GetControl(ID_TEXTCTRLAMORFUNC1TOTALABONADO).Show(sino)
		self.GetControl(ID_TEXTAMORFUNC1TOTALINTERES).Show(sino)
		self.GetControl(ID_TEXTCTRLAMORFUNC1TOTALINTERES).Show(sino)
		self.GetControl(ID_TEXTAMORFUNC1TOTALENGANCHE).Show(sino)
		self.GetControl(ID_TEXTCTRLAMORFUNC1TOTALENGANCHE).Show(sino)
		self.GetControl(ID_TEXTAMORFUNC1TOTALPAGADO).Show(sino)
		self.GetControl(ID_TEXTCTRLAMORFUNC1TOTALPAGADO).Show(sino)
		
	def AparicionListCtrl(self, sino):
		lctrl = self.GetControl(ID_LISTCTRLAMORFUNC1)
		lctrl.ClearAll(); lctrl.Enable(sino); lctrl.Show(sino)
		self.GetControl(ID_LINEAMORFUNC1TOTALLINEA).Enable(sino)
	
	def ReduceFrame(self):
		self.AparicionListCtrl(False)
		self.AparicionTotales(False)
		self.SetSize(wx.Size(970, 335))
		self.CenterOnParent()
		
	def CreceFrame(self):
		self.SetSize(wx.Size(970, 740))
		self.CenterOnParent()
		self.AparicionListCtrl(True)
		self.AparicionTotales(True)
		
	def ValidaCambio(self, datoini, datofin):
		if datoini != datofin:
			self.cambio = True
			
	def ObtenerCuenta(self):
		pkamortizacion = self.GetIdentity()
		if pkamortizacion:
			cu = r_cngcmex.cursor()
			cu.execute("select contrato, cuenta from gixamortizacion where pkamortizacion = %s" % int(pkamortizacion))
			row = fetchone(cu)
			cu.close()
			return int(row[0]), int(row[1])
		else:
			return 0, 0
		
	def SetControls(self, setbool = True):
		self.GetControl(ID_BITMAPBUTTONAMORFUNC1ELEGIRFECHAELABORACION).Enable(setbool)
		self.GetControl(ID_BITMAPBUTTONAMORFUNC1ELEGIRCLIENTE).Enable(setbool)
		self.GetControl(ID_BITMAPBUTTONAMORFUNC1LIMPIARCLIENTE).Enable(setbool)
		self.GetControl(ID_BITMAPBUTTONAMORFUNC1ELEGIRVENDEDOR).Enable(setbool)
		self.GetControl(ID_BITMAPBUTTONAMORFUNC1LIMPIARVENDEDOR).Enable(setbool)
		self.GetControl(ID_BITMAPBUTTONAMORFUNC1ELEGIRLOTE).Enable(setbool)
		self.GetControl(ID_BITMAPBUTTONAMORFUNC1LIMPIARLOTE).Enable(setbool)
		self.GetControl(ID_BITMAPBUTTONAMORFUNC1CAMBIARTASAANUAL).Enable(setbool)
		self.GetControl(ID_BITMAPBUTTONAMORFUNC1CAMBIARPLAZO).Enable(setbool)
		self.GetControl(ID_BITMAPBUTTONAMORFUNC1ELEGIRFECHAPRIMERPAGO).Enable(setbool)
		self.GetControl(ID_BITMAPBUTTONAMORFUNC1CAMBIARDESCUENTO).Enable(setbool)
		self.GetControl(ID_BITMAPBUTTONAMORFUNC1CAMBIARENGANCHE).Enable(setbool)
		self.GetControl(ID_CHOICEAMORFUNC1FORMADEPAGO).Enable(setbool)
		self.GetControl(ID_CHOICEAMORFUNC1ETAPA).Enable(setbool)
		if setbool:
			if self.usuario not in self.usuarioautorizado:
				self.GetControl(ID_BITMAPBUTTONAMORFUNC1CAMBIARTASAANUAL).Enable(False)
				self.GetControl(ID_BITMAPBUTTONAMORFUNC1CAMBIARDESCUENTO).Enable(False)
				#self.GetControl(ID_BITMAPBUTTONAMORFUNC1CAMBIARENGANCHE).Enable(False)
	
	def ValidaToolBar(self):
		if self.usuario in self.usuarioautorizado:
			self.tb.EnableTool(ID_TOOLAMORFUNC1EDITARPREDETERMINADOS, True)
		else:
			self.tb.EnableTool(ID_TOOLAMORFUNC1EDITARPREDETERMINADOS, False)

		valor = False
		if not self.GetControl(ID_TEXTCTRLAMORFUNC1ID).GetValue():
			if self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOINMUEBLE).GetValue():
				valor = True
				
			self.tb.EnableTool(ID_TOOLAMORFUNC1ELIMINAR, False)
			self.tb.EnableTool(ID_TOOLAMORFUNC1IMPRIMIR, False)
			self.tb.EnableTool(ID_TOOLAMORFUNC1PAGARE, False)
			self.tb.EnableTool(ID_TOOLAMORFUNC1CONTRATO, False)
			self.tb.EnableTool(ID_TOOLAMORFUNC1CUENTA, False)
			self.tb.EnableTool(ID_TOOLAMORFUNC1GUARDAR, valor)
			self.tb.EnableTool(ID_TOOLAMORFUNC1APLICARPREDETERMINADOS, valor)
			if self.GetControl(ID_CHOICEAMORFUNC1FORMADEPAGO).GetSelection() == 0:
				self.tb.EnableTool(ID_TOOLAMORFUNC1GENERARTABLA, valor)
			else:
				self.tb.EnableTool(ID_TOOLAMORFUNC1GENERARTABLA, False)
				
			self.SetControls(True)
		else:
			if self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOINMUEBLE).GetValue():
				valor = True
				
			self.tb.EnableTool(ID_TOOLAMORFUNC1CONTRATO, valor)
			
			contrato, cuenta = self.ObtenerCuenta()
			cuentabool = False
			if not cuenta:
				cuentabool = True
				
			self.SetControls(cuentabool)
			self.tb.EnableTool(ID_TOOLAMORFUNC1ELIMINAR, cuentabool)
			self.tb.EnableTool(ID_TOOLAMORFUNC1GUARDAR, cuentabool)
			self.tb.EnableTool(ID_TOOLAMORFUNC1APLICARPREDETERMINADOS, cuentabool)
			if self.GetControl(ID_CHOICEAMORFUNC1FORMADEPAGO).GetSelection() == 0:
				self.tb.EnableTool(ID_TOOLAMORFUNC1IMPRIMIR, valor)
				self.tb.EnableTool(ID_TOOLAMORFUNC1PAGARE, valor)
				self.tb.EnableTool(ID_TOOLAMORFUNC1GENERARTABLA, cuentabool)
			else:
				self.tb.EnableTool(ID_TOOLAMORFUNC1IMPRIMIR, False)
				self.tb.EnableTool(ID_TOOLAMORFUNC1PAGARE, False)
				self.tb.EnableTool(ID_TOOLAMORFUNC1GENERARTABLA, False)

			cuentabool = False
			if valor:
				if self.usuario in self.usuarioautorizado:
					if not cuenta and contrato:
						cuentabool = True
			
			self.tb.EnableTool(ID_TOOLAMORFUNC1CUENTA, cuentabool)
			
	def OnVistaTabla(self, evt):
		self.VistaTabla()
		
	def VistaTabla(self):
		if self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOINMUEBLE).GetValue():
			if self.cambio:
				if Mensajes().YesNo(self, u"� Desea guardar la informaci�n ?", u"Confirmaci�n"):
					self.Guardar()

		self.ObtenerFkamortizacion()
		if self.fkamortizacion:
			self.vistatabla = ""
			vista = self.GetControl(ID_CHOICEAMORFUNC1VISTA).GetSelection()
			if vista == 0:
				self.vistatabla = "and eliminado = 0"
			elif vista == 1:
				self.vistatabla = "and eliminado = 0 and pagofijo <> pagoaplicado"
			elif vista == 2:
				self.vistatabla = "and insertado = 1"
			elif vista == 3:
				self.vistatabla = "and pagado = 1"
			elif vista == 4:
				self.vistatabla = "and eliminado = 1"
			
			self.RefrescaTablaAmortizacion(self.fkamortizacion)
		else:
			self.GetControl(ID_CHOICEAMORFUNC1VISTA).SetSelection(0)

	def OnFecha(self, evt):
		id = evt.GetId()
		datoini = self.GetControl(self.DicDatesAndTxt[id]).GetValue()
		mes = dict(Ene=1, Feb=2, Mar=3, Abr=4, May=5, Jun=6, Jul=7, Ago=8, Sep=9, Oct=10, Nov=11, Dic=12)
		try:
			xdia = int(self.GetControl(self.DicDatesAndTxt[id]).GetValue().strip().split('/')[0])
		except:
			xdia = None
		
		try:
			xmes = int(self.GetControl(self.DicDatesAndTxt[id]).GetValue().strip().split('/')[1])
		except:
			xmes = None
			
		try:
			xano = int(self.GetControl(self.DicDatesAndTxt[id]).GetValue().strip().split('/')[2])
		except:
			xano = None
		
		if None in (xdia, xmes, xano):
			dlg = CalenDlg(self)
		else:
			try:
				lafecha = date(xano, xmes, xdia)
			except:
				lafecha = date.today()
				xdia = lafecha.day
				xmes = lafecha.month
				xano = lafecha.year
				Mensajes().Info(self, u"Fecha mal usar� la de hoy", u"Atenci�n")
				
			dlg = CalenDlg(self, xmes, xdia, xano)
			
		dlg.Centre()
		dlg.SetTitle("Calendario GIX")
			
		if dlg.ShowModal() == wx.ID_OK:
			try:
				result = dlg.result
				self.GetControl(self.DicDatesAndTxt[id]).SetValue(result[1] + '/' +  "%s" % (mes[result[2]]) + '/' + result[3])
				self.ValidaGenerarTabla()
				datofin = self.GetControl(self.DicDatesAndTxt[id]).GetValue()
				self.ValidaCambio(datoini, datofin)
			except:
				Mensajes().Warn(self, "Escoja una fecha", u"Atenci�n")
				
	def OnNuevaTabla(self, evt):
		index = self.GetControl(ID_CHOICEAMORFUNC1ETAPA).GetSelection()
		if index < 0:
			self.NuevaTabla()
		else:
			codigolote = self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOINMUEBLE).GetValue()
			if codigolote:
				if self.cambio:
					if Mensajes().YesNo(self, u"� Desea guardar la informaci�n ?", u"Confirmaci�n"):
						self.Guardar()
					
				self.NuevaTabla()
			else:
				self.NuevaTabla()
				
	def NuevaTabla(self):
		self.GetControl(ID_TEXTAMORFUNC1TOTALAPAGAR).SetLabel("Total a Pagar")
		self.GetControl(ID_TEXTCTRLAMORFUNC1ID).SetBackgroundColour(wx.NamedColour("MEDIUM GOLDENROD"))
		self.GetControl(ID_TEXTCTRLAMORFUNC1ID).SetForegroundColour(wx.NamedColour("BLACK"))
		self.GetControl(ID_TEXTCTRLAMORFUNC1FECHACAPTURA).SetBackgroundColour(wx.NamedColour("MEDIUM GOLDENROD"))
		self.GetControl(ID_TEXTCTRLAMORFUNC1FECHACAPTURA).SetForegroundColour(wx.NamedColour("BLACK"))
		self.GetControl(ID_TEXTCTRLAMORFUNC1CONTRATO).SetBackgroundColour(wx.NamedColour("GOLDENROD"))
		self.GetControl(ID_TEXTCTRLAMORFUNC1CONTRATO).SetForegroundColour(wx.NamedColour("BLACK"))
		self.GetControl(ID_TEXTCTRLAMORFUNC1CONTRATO).Show(False)
		self.GetControl(ID_TEXTCTRLAMORFUNC1CUENTA).SetBackgroundColour(wx.NamedColour("GOLDENROD"))
		self.GetControl(ID_TEXTCTRLAMORFUNC1CUENTA).SetForegroundColour(wx.NamedColour("BLACK"))
		self.GetControl(ID_TEXTCTRLAMORFUNC1CUENTA).Show(False)
		self.GetControl(ID_TEXTCTRLAMORFUNC1SPACER1).Show(False)
		self.GetControl(ID_TEXTCTRLAMORFUNC1SPACER2).Show(False)
		self.GetControl(ID_TEXTCTRLAMORFUNC1TOTALABONADO).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLAMORFUNC1TOTALINTERES).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLAMORFUNC1TOTALENGANCHE).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLAMORFUNC1TOTALPAGADO).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLAMORFUNC1FECHACAPTURA).SetValue(" Captura %s" % self.ObtenerFechaDelDia())
		self.GetControl(ID_TEXTCTRLAMORFUNC1ID).SetValue("")
		self.GetControl(ID_TEXTCTRLAMORFUNC1FECHAELABORACION).SetValue(self.ObtenerFechaDelDia())
		self.GetControl(ID_CHOICEAMORFUNC1FORMADEPAGO).SetSelection(1)
		self.ObtenerEtapas(5)
		self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOCLIENTE).SetValue("")
		self.GetControl(ID_TEXTCTRLAMORFUNC1NOMBRECLIENTE).SetValue("")
		self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOVENDEDOR).SetValue("")
		self.GetControl(ID_TEXTCTRLAMORFUNC1NOMBREVENDEDOR).SetValue("")
		self.GetControl(ID_CHOICEAMORFUNC1ETAPA).SetSelection(SetChoiceIndex())
		self.LimpiarLote()
		self.ReduceFrame()
		self.ValidaToolBar()
		self.vistatabla = "and eliminado = 0"
		self.GetControl(ID_CHOICEAMORFUNC1VISTA).SetSelection(0)
		self.cambio = False
		self.GetControl(ID_TEXTCTRLAMORFUNC1FECHAELABORACION).SetFocus()
		
	def OnAbrir(self, evt):
		if self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOINMUEBLE).GetValue():
			if self.cambio:
				if Mensajes().YesNo(self, u"� Desea guardar la informaci�n ?", u"Confirmaci�n"):
					self.Guardar()
				
		cu = r_cngcmex.cursor()
		cu.execute(str("select count(*) from gixamortizacion"))
		row = fetchone(cu)
		cu.close()
		if int(row[0]) > 0:
			dlg = GixTablasAmortizacionFunc8(self, tablaamortizacionelegida = self.TablaAmortizacionElegida)
			dlg.CenterOnParent()
			dlg.ShowModal()
		else:
			Mensajes().Info(self, u"� No se encontraron tablas de amortizaci�n !", u"Atenci�n")
			
	def TablaAmortizacionElegida(self, pkamortizacion):
		wx.BeginBusyCursor()
		self.NuevaTabla()
		query = """
		select convert(varchar(10), a.fechacaptura, 103), convert(varchar(10), a.fechaelaboracion, 103), a.formapago,
		a.fkcliente, isnull(rtrim(ltrim(c.nombre)), ''), a.fkvendedor, isnull(rtrim(ltrim(v.nombre)), ''), a.fketapa,
		a.fkinmueble, rtrim(ltrim(i.iden2)) + '-' + rtrim(ltrim(i.iden1)), i.tipo, i.superficie, i.preciopormetro,
		a.tasainteresanual, a.plazomeses, convert(varchar(10), a.fechaprimerpago, 103), a.preciocontado,
		a.descuentop, a.descuentoc, a.enganchep, a.enganchec, a.saldoafinanciar, a.pagomensualfijo,
		a.contrato, a.cuenta
		from gixamortizacion a
		left join CLIENTE c on a.fkcliente = c.codigo
		left join VENDEDOR v on a.fkvendedor = v.codigo
		join INMUEBLE i on a.fkinmueble = i.codigo
		where a.pkamortizacion = %s
		""" % pkamortizacion
		sql = (query.replace('\n',' ')).replace('\t',' ')
		cu = r_cngcmex.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		self.tasainteresanual = float(row[13]); self.plazomeses = int(row[14])
		#join gixamortizaciondefaults d on 1 = d.pkamortizaciondefault
		#self.contadomeses = int(row[23]); self.contadodescuento = float(row[24])
		self.engancheporcentaje = float(row[19]); self.idlote = self.GetString(row[9])
		self.tipo = self.GetString(row[10]); self.superficiem2 = float(row[11]); self.preciom2 = float(row[12])
		self.preciocontado = float(row[16]); self.porcentajedescuento = float(row[17]); self.descuento = float(row[18])
		self.enganche = float(row[20]); self.saldofinanciar = float(row[21]); self.pagomensualfijo = float(row[22])
		self.preciodescuento = self.preciocontado - self.descuento
		self.totalapagar = (self.pagomensualfijo * self.plazomeses) + self.enganche
		self.GetControl(ID_TEXTCTRLAMORFUNC1FECHACAPTURA).SetValue(" Captura %s" % str(row[0]))
		self.GetControl(ID_TEXTCTRLAMORFUNC1ID).SetValue(" Id %s" % str(pkamortizacion))
		self.GetControl(ID_TEXTCTRLAMORFUNC1FECHAELABORACION).SetValue(str(row[1]))
		if int(row[23]) > 0:
			self.DisplayContrato(int(row[23]))
			
		if int(row[24]) > 0:
			self.DisplayCuenta(int(row[24]))
			
		inx = 0
		if str(row[2]) == "C":
			inx = 1
		self.GetControl(ID_CHOICEAMORFUNC1FORMADEPAGO).SetSelection(inx)
		fkcliente = ""
		if int(row[3]):
			fkcliente = int(row[3])
		self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOCLIENTE).SetValue(str(fkcliente))
		self.GetControl(ID_TEXTCTRLAMORFUNC1NOMBRECLIENTE).SetValue(self.GetString(row[4]))
		fkvendedor = ""
		if int(row[5]):
			fkvendedor = int(row[5])
		self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOVENDEDOR).SetValue(str(fkvendedor))
		self.GetControl(ID_TEXTCTRLAMORFUNC1NOMBREVENDEDOR).SetValue(self.GetString(row[6]))
		ctrl = self.GetControl(ID_CHOICEAMORFUNC1ETAPA)
		for inx in range(0, ctrl.GetCount()):
			if int(row[7]) == ctrl.GetClientData(inx):
				ctrl.SetSelection(inx)
				break
			
		self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOINMUEBLE).SetValue(str(row[8]))
		self.GetControl(ID_TEXTCTRLAMORFUNC1LOTE).SetValue(str(row[9]))
		self.GetControl(ID_TEXTCTRLAMORFUNC1TIPO).SetValue(self.GetString(row[10]))
		self.GetControl(ID_TEXTCTRLAMORFUNC1SUPERFICIEM2).SetValue(str(amount_and_cents_with_commas(float(row[11]))))
		self.GetControl(ID_TEXTCTRLAMORFUNC1PRECIOM2).SetValue(str(amount_and_cents_with_commas(float(row[12]))))
		self.GetControl(ID_TEXTCTRLAMORFUNC1TASAANUAL).SetValue(str(amount_and_cents_with_commas(float(row[13]))))
		self.GetControl(ID_TEXTCTRLAMORFUNC1PLAZOMESES).SetValue(str(int(row[14])))
		self.GetControl(ID_TEXTCTRLAMORFUNC1FECHAPRIMERPAGO).SetValue(str(row[15]))
		self.GetControl(ID_TEXTCTRLAMORFUNC1PRECIOCONTADO).SetValue(str(amount_and_cents_with_commas(float(row[16]))))
		if self.porcentajedescuento:
			self.GetControl(ID_TEXTAMORFUNC1DESCUENTO).SetLabel("Descuento %.2f %s" % (self.porcentajedescuento, "%"))
		else:
			self.GetControl(ID_TEXTAMORFUNC1DESCUENTO).SetLabel("Descuento")
			
		self.GetControl(ID_TEXTCTRLAMORFUNC1DESCUENTO).SetValue(str(amount_and_cents_with_commas(float(row[18]))))
		self.GetControl(ID_TEXTCTRLAMORFUNC1PRECIODESCUENTO).SetValue(str(amount_and_cents_with_commas(float(self.preciodescuento))))
		self.GetControl(ID_TEXTAMORFUNC1ENGANCHE).SetLabel("Enganche %.2f %s" % (float(row[19]), "%"))
		self.GetControl(ID_TEXTCTRLAMORFUNC1ENGANCHE).SetValue(str(amount_and_cents_with_commas(float(row[20]))))
		self.GetControl(ID_TEXTCTRLAMORFUNC1SALDOFINANCIAR).SetValue(str(amount_and_cents_with_commas(float(row[21]))))
		self.GetControl(ID_TEXTCTRLAMORFUNC1PAGOMENSUAL).SetValue(str(amount_and_cents_with_commas(float(row[22]))))
		self.GetControl(ID_TEXTCTRLAMORFUNC1TOTALAPAGAR).SetValue(str(amount_and_cents_with_commas(float(self.totalapagar))))
		wx.EndBusyCursor()
		self.RefrescaTablaAmortizacion(pkamortizacion)
		self.ValidaToolBar()

	def RefrescaTablaAmortizacion(self, pkamortizacion):
		wx.BeginBusyCursor()
		query = """
		select pkamortizaciondetalle, numerodepago, convert(varchar(10), fechadepago, 103),
		saldoinicial, pagofijo, abonocapital, interes, saldofinal, pagado, insertado, eliminado,
		pagoaplicado, (pagofijo - pagoaplicado)
		from gixamortizaciondetalle
		where fkamortizacion = %s %s order by fechadepago, numerodepago
		""" % (pkamortizacion, self.vistatabla)
		sql = (query.replace('\n',' ')).replace('\t',' ')
		cu = r_cngcmex.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			self.GetControl(ID_TEXTAMORFUNC1TOTALAPAGAR).SetLabel("Cantidad Total")
			vista = self.GetControl(ID_CHOICEAMORFUNC1VISTA).GetSelection()
			self.GetControl(ID_TEXTAMORFUNC1TOTALPAGADO).SetLabel("Total")
			self.CreceFrame()
			lctrl = self.GetControl(ID_LISTCTRLAMORFUNC1)
			lctrl.InsertColumn(0, u"", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"No. Pago", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(2, u"Fecha de Pago", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(3, u"Saldo Inicial", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(4, u"Pago Fijo", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(5, u"Abono a Capital", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(6, u"Intereses", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(7, u"Saldo Final", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(8, u"", wx.LIST_FORMAT_CENTER)
			if vista == 0:
				self.GetControl(ID_TEXTAMORFUNC1TOTALPAGADO).SetLabel("Total a Pagar")
			elif vista == 1:
				lctrl.InsertColumn(9, u"Saldo", wx.LIST_FORMAT_CENTER)
				self.GetControl(ID_TEXTAMORFUNC1TOTALPAGADO).SetLabel("Saldo")
			elif vista == 3:
				lctrl.InsertColumn(9, u"Pagado", wx.LIST_FORMAT_CENTER)
				self.GetControl(ID_TEXTAMORFUNC1TOTALPAGADO).SetLabel("Pagado")
				
			totalabono, totalinteres, totalapagar, totalaplicado, totalsaldo = 0.00, 0.00, 0.00, 0.00, 0.00
			fila = 0
			for row in rows:
				if row[10]:
					if "1" in self.vistatabla:
						if fila %2 != 0: bgcolor = [255,153,153]
						else:            bgcolor = [255,215,215]
					else:
						bgcolor = [255,153,153]
				elif row[8]:
					if float(row[4]) == float(row[11]):
						bgcolor = [248,181,68]
					else:
						bgcolor = [251,212,146]
				elif row[9]:
					if "1" in self.vistatabla:
						if fila %2 != 0: bgcolor = [150,204,150]
						else:            bgcolor = [200,230,200]
					else:
						bgcolor = [150,204,150]
				else:
					if fila %2 != 0: bgcolor = [204,204,255]
					else:            bgcolor = [230,230,255]
				switches = "0"
				if row[8]:
					switches = "1"
				if row[9]:
					switches += "1"
				else:
					switches += "0"
				if row[10]:
					switches += "1"
				else:
					switches += "0"
				index = lctrl.InsertStringItem(sys.maxint, str(int(row[0])))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(int(row[0])))
				lctrl.SetStringItem(index, 1, str(int(row[1])))
				lctrl.SetStringItem(index, 2, str(str(row[2])))
				lctrl.SetStringItem(index, 3, str(amount_and_cents_with_commas(float(row[3]))))
				lctrl.SetStringItem(index, 4, str(amount_and_cents_with_commas(float(row[4]))))
				lctrl.SetStringItem(index, 5, str(amount_and_cents_with_commas(float(row[5]))))
				lctrl.SetStringItem(index, 6, str(amount_and_cents_with_commas(float(row[6]))))
				lctrl.SetStringItem(index, 7, str(amount_and_cents_with_commas(float(row[7]))))
				lctrl.SetStringItem(index, 8, str(switches))
				if vista == 1:
					lctrl.SetStringItem(index, 9, str(amount_and_cents_with_commas(float(row[12]))))
				elif vista == 3:
					lctrl.SetStringItem(index, 9, str(amount_and_cents_with_commas(float(row[11]))))
				lctrl.SetItemData(index, row[0])
				totalabono += float(row[5])
				totalinteres += float(row[6])
				totalaplicado += float(row[11])
				totalsaldo += float(row[12])
				fila += 1
				
			aux = self.GetControl(ID_TEXTCTRLAMORFUNC1ENGANCHE).GetValue()
			totalenganche = float(aux.replace(',',''))
			totalapagar = totalabono + totalinteres + totalenganche
			self.GetControl(ID_TEXTCTRLAMORFUNC1TOTALABONADO).SetValue(str(amount_and_cents_with_commas(totalabono)))
			self.GetControl(ID_TEXTCTRLAMORFUNC1TOTALINTERES).SetValue(str(amount_and_cents_with_commas(totalinteres)))
			self.GetControl(ID_TEXTCTRLAMORFUNC1TOTALENGANCHE).SetValue(str(amount_and_cents_with_commas(totalenganche)))
			aux = totalapagar
			if vista == 1:
				aux = totalsaldo
			elif vista == 3:
				aux = totalaplicado
				
			self.GetControl(ID_TEXTCTRLAMORFUNC1TOTALPAGADO).SetValue(str(amount_and_cents_with_commas(aux)))
				
			lctrl.SetColumnWidth(0, 0)
			lctrl.SetColumnWidth(1, 70)
			lctrl.SetColumnWidth(2, 130)
			lctrl.SetColumnWidth(3, 130)
			lctrl.SetColumnWidth(4, 130)
			lctrl.SetColumnWidth(5, 130)
			lctrl.SetColumnWidth(6, 130)
			lctrl.SetColumnWidth(7, 130)
			lctrl.SetColumnWidth(8, 0)
			if vista in (1, 3):
				lctrl.SetColumnWidth(9, 130)
			lctrl.SetItemState(0, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
			lctrl.EnsureVisible(0)
			lctrl.SetFocus()
		else:
			self.GetControl(ID_TEXTAMORFUNC1TOTALAPAGAR).SetLabel("Total a Pagar")
			self.ReduceFrame()

		wx.EndBusyCursor()
		
	def OnGuardar(self, evt):
		index = self.GetControl(ID_CHOICEAMORFUNC1ETAPA).GetSelection()
		if index < 0:
			Mensajes().Info(self, u"� No hay nada que guardar !", u"Atenci�n")
		else:
			codigolote = self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOINMUEBLE).GetValue()
			if codigolote:
				self.Guardar()
				self.ValidaToolBar()
			else:
				Mensajes().Info(self, u"� No hay nada que guardar !", u"Atenci�n")
				
	def Guardar(self):
		wx.BeginBusyCursor()
		d, m, a = self.GetControl(ID_TEXTCTRLAMORFUNC1FECHAELABORACION).GetValue().split("/")
		fechaelaboracion = "%04d/%02d/%02d" % (int(a), int(m), int(d))
		formapago = "R"
		inx = self.GetControl(ID_CHOICEAMORFUNC1FORMADEPAGO).GetSelection()
		if inx:
			formapago = "C"
		aux = self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOCLIENTE).GetValue()
		try:
			fkcliente = int(aux)
		except:
			fkcliente = 0
		aux = self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOVENDEDOR).GetValue()
		try:
			fkvendedor = int(aux)
		except:
			fkvendedor = 0
		inx = self.GetControl(ID_CHOICEAMORFUNC1ETAPA).GetSelection()
		fketapa = self.GetControl(ID_CHOICEAMORFUNC1ETAPA).GetClientData(inx)
		aux = self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOINMUEBLE).GetValue()
		fkinmueble = int(aux)
		aux = self.GetControl(ID_TEXTCTRLAMORFUNC1TASAANUAL).GetValue()
		tasainteresanual = float(aux.replace(',',''))
		aux = self.GetControl(ID_TEXTCTRLAMORFUNC1PLAZOMESES).GetValue()
		plazomeses = int(aux)
		d, m, a = self.GetControl(ID_TEXTCTRLAMORFUNC1FECHAPRIMERPAGO).GetValue().split("/")
		fechaprimerpago = "%04d/%02d/%02d" % (int(a), int(m), int(d))
		aux = self.GetControl(ID_TEXTCTRLAMORFUNC1PRECIOCONTADO).GetValue()
		preciocontado = float(aux.replace(',',''))
		aux = self.GetControl(ID_TEXTAMORFUNC1DESCUENTO).GetLabel()
		try:
			descuentop = float((aux.replace('Descuento ','')).replace(' %',''))
		except:
			descuentop = 0.00
		aux = self.GetControl(ID_TEXTCTRLAMORFUNC1DESCUENTO).GetValue()
		descuentoc = float(aux.replace(',',''))
		aux = self.GetControl(ID_TEXTAMORFUNC1ENGANCHE).GetLabel()
		try:
			enganchep = float((aux.replace('Enganche ','')).replace(' %',''))
		except:
			enganchep = 0.00
		aux = self.GetControl(ID_TEXTCTRLAMORFUNC1ENGANCHE).GetValue()
		enganchec = float(aux.replace(',',''))
		aux = self.GetControl(ID_TEXTCTRLAMORFUNC1SALDOFINANCIAR).GetValue()
		saldoafinanciar = float(aux.replace(',',''))
		aux = self.GetControl(ID_TEXTCTRLAMORFUNC1PAGOMENSUAL).GetValue()
		pagomensualfijo = float(aux.replace(',',''))
		identity = self.GetControl(ID_TEXTCTRLAMORFUNC1ID).GetValue()
		identity = (identity.replace('Id','')).replace(' ','')
		if identity:
			query = """
			update gixamortizacion set fechaelaboracion = '%s', formapago = '%s', fkcliente = %s, fkvendedor = %s,
			fketapa = %s, fkinmueble = %s, tasainteresanual = %s, plazomeses = %s, fechaprimerpago = '%s',
			preciocontado = %s, descuentop = %s, descuentoc = %s, enganchep = %s, enganchec = %s,
			saldoafinanciar = %s, pagomensualfijo = %s
			where pkamortizacion = %s
			""" % (fechaelaboracion, formapago, fkcliente, fkvendedor, fketapa, fkinmueble, tasainteresanual, plazomeses,
			       fechaprimerpago, preciocontado, descuentop, descuentoc, enganchep, enganchec, saldoafinanciar,
			       pagomensualfijo, int(identity))
			sql = (query.replace('\n',' ')).replace('\t',' ')
			todook, trash = self.QueryUpdateRecord(sql, conexion = r_cngcmex)
			if not todook:
				Mensajes().Info(self, u"� No se grab� la informaci�n !", u"Atenci�n")
		else:
			query = """
			insert into gixamortizacion
			(fechaelaboracion, formapago, fkcliente, fkvendedor, fketapa, fkinmueble, tasainteresanual, plazomeses,
			fechaprimerpago, preciocontado, descuentop, descuentoc, enganchep, enganchec, fechaenganche,
			saldoafinanciar, pagomensualfijo)
			values
			('%s', '%s', %s, %s, %s, %s, %s, %s, '%s', %s, %s, %s, %s, %s, '%s', %s, %s)
			""" % (fechaelaboracion, formapago, fkcliente, fkvendedor, fketapa, fkinmueble, tasainteresanual, plazomeses,
			       fechaprimerpago, preciocontado, descuentop, descuentoc, enganchep, enganchec, fechaprimerpago,
			       saldoafinanciar, pagomensualfijo)
			sql = (query.replace('\n',' ')).replace('\t',' ')
			todook, identity = self.QueryUpdateRecord(sql, insert = True, conexion = r_cngcmex)
			if todook:
				self.GetControl(ID_TEXTCTRLAMORFUNC1ID).SetValue(" Id %s" % str(identity))
			else:
				Mensajes().Info(self, u"� No se grab� la informaci�n !", u"Atenci�n")
				
		sql = """
		delete from gixamortizaciondetalle where fkamortizacion = %s and pagado = 0 and insertado = 0 and eliminado = 0
		""" % identity
		try:
			cursor = r_cngcmex.cursor()
			cursor.execute(str(sql))
			cursor.close()
			r_cngcmex.commit()
		except:
			r_cngcmex.rollback()

		detallecount = self.GetControl(ID_LISTCTRLAMORFUNC1).GetItemCount()
		if detallecount > 0:
			for row in range(0, detallecount):
				datointerno = self.GetControl(ID_LISTCTRLAMORFUNC1).GetItem(row, 1).GetText()
				numerodepago = int(datointerno)
				d, m, a = self.GetControl(ID_LISTCTRLAMORFUNC1).GetItem(row, 2).GetText().split("/")
				fechadepago = "%04d/%02d/%02d" % (int(a), int(m), int(d))
				datointerno = self.GetControl(ID_LISTCTRLAMORFUNC1).GetItem(row, 3).GetText()
				saldoinicial = float(datointerno.replace(',',''))
				datointerno = self.GetControl(ID_LISTCTRLAMORFUNC1).GetItem(row, 4).GetText()
				pagofijo = float(datointerno.replace(',',''))
				datointerno = self.GetControl(ID_LISTCTRLAMORFUNC1).GetItem(row, 5).GetText()
				abonocapital = float(datointerno.replace(',',''))
				datointerno = self.GetControl(ID_LISTCTRLAMORFUNC1).GetItem(row, 6).GetText()
				interes = float(datointerno.replace(',',''))
				datointerno = self.GetControl(ID_LISTCTRLAMORFUNC1).GetItem(row, 7).GetText()
				saldofinal = float(datointerno.replace(',',''))
				switches = map(int, self.GetControl(ID_LISTCTRLAMORFUNC1).GetItem(row, 8).GetText())
				if not switches[0] and not switches[1] and not switches[2]:
					query = """
					insert into gixamortizaciondetalle
					(fkamortizacion, numerodepago, fechadepago, saldoinicial, pagofijo, abonocapital, interes, saldofinal)
					values (%s, %s, '%s', %s, %s, %s, %s, %s)
					""" % (identity, numerodepago, fechadepago, saldoinicial, pagofijo, abonocapital, interes, saldofinal)
					sql = (query.replace('\n',' ')).replace('\t',' ')
					todook, trash = self.QueryUpdateRecord(sql, conexion = r_cngcmex)
					if not todook:
						Mensajes().Info(self, u"� No se grab� la tabla de amortizaci�n !", u"Atenci�n")
				
		#self.RefrescaTablaAmortizacion(identity)
		self.cambio = False
		wx.EndBusyCursor()
		self.TablaAmortizacionElegida(identity)
					
	def OnEliminar(self, evt):
		index = self.GetControl(ID_CHOICEAMORFUNC1ETAPA).GetSelection()
		if index < 0:
			Mensajes().Info(self, u"� No hay nada que eliminar !", u"Atenci�n")
		else:
			codigolote = self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOINMUEBLE).GetValue()
			if codigolote or self.GetControl(ID_TEXTCTRLAMORFUNC1ID).GetValue():
				if Mensajes().YesNo(self, u"� Desea realmente eliminar la informaci�n ?", u"Confirmaci�n"):
					identity = self.GetIdentity()
					if identity:
						self.Eliminar(identity)
						self.NuevaTabla()
					else:
						self.NuevaTabla()
			else:
				Mensajes().Info(self, u"� No hay nada que eliminar !", u"Atenci�n")
				
	def Eliminar(self, identity):
		try:
			cu = r_cngcmex.cursor()
			cu.execute(str("delete from gixamortizaciondetalle where fkamortizacion = %s" % identity))
			cu.execute(str("delete from gixamortizacion where pkamortizacion = %s" % identity))
			cu.close()
			r_cngcmex.commit()
		except:
			r_cngcmex.rollback()
			Mensajes().Info(self, u"Sucedi� algo que impidi� eliminar este registro.\n" \
			                u"Quiz� se deba a que hay otra informaci�n\nque depende de este registro.", u"Atenci�n")
				
	def OnEditarPredeterminados(self, evt):
		dlg = GixTablasAmortizacionFunc12(self)
		dlg.CenterOnParent()
		dlg.ShowModal()
		
	def OnAplicarPredeterminados(self, evt):
		index = self.GetControl(ID_CHOICEAMORFUNC1ETAPA).GetSelection()
		if index < 0:
			Mensajes().Info(self, u"� Por favor elija la etapa !", u"Atenci�n")
		else:
			codigolote = self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOINMUEBLE).GetValue()
			if codigolote:
				if Mensajes().YesNo(self, u"� Desea realmente aplicar los valores predeterminados ?", u"Confirmaci�n"):
					self.LoteElegido(codigolote = int(codigolote))
			else:
				Mensajes().Info(self, u"� Por favor elija el lote !", u"Atenci�n")
				
	def OnGenerarTabla(self, evt):
		index = self.GetControl(ID_CHOICEAMORFUNC1ETAPA).GetSelection()
		if index < 0:
			Mensajes().Info(self, u"� Por favor elija la etapa !", u"Atenci�n")
		else:
			codigolote = self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOINMUEBLE).GetValue()
			if codigolote:
				if self.saldofinanciar > 0:
					if self.plazomeses > 0:
						self.CreceFrame()
						self.GenerarTabla(True)
					else:
						Mensajes().Info(self, u"� No hay plazo en meses !", u"Atenci�n")
				else:
					Mensajes().Info(self, u"� No hay saldo a financiar !", u"Atenci�n")
			else:
				Mensajes().Info(self, u"� Por favor elija el lote !", u"Atenci�n")
			
	def GenerarTabla(self, evento = False):
		if self.plazomeses:
			saldofinal = self.saldofinanciar
			sigue = True
			fkamortizacion = self.GetIdentity()
			if fkamortizacion:
				query = """
				select pkamortizaciondetalle from gixamortizaciondetalle
				where pagado = 1 and fkamortizacion = %s order by numerodepago, pkamortizaciondetalle
				""" % int(fkamortizacion)
				sql = (query.replace('\n',' ')).replace('\t',' ')
				cu = r_cngcmex.cursor()
				cu.execute(str(sql))
				rows = fetchall(cu)
				cu.close()
				if rows:
					if len(rows) < self.plazomeses:
						if evento:
							msg1 = u"Se detecto un pago aplicado, este"
							msg2 = u"permanecer� en la tabla."
							if len(rows) > 1:
								msg1 = u"Se han detectado pagos aplicados, estos"
								msg2 = u"permanecer�n en la tabla."
								
							sigue = False
							if Mensajes().YesNo(self, u"%s\n%s\n\n" \
								            u"� Desea realmente generar la tabla ?" % (msg1, msg2),
							                    u"Confirmaci�n"):
								sigue = True
							else:
								self.RefrescaTablaAmortizacion(fkamortizacion)
							
						if sigue:
							cu = r_cngcmex.cursor()
							for numerodepago, row in enumerate(rows):
								query = """
								update gixamortizaciondetalle set numerodepago = %s
								where pkamortizaciondetalle = %s
								""" % (numerodepago + 1, int(row[0]))
								sql = (query.replace('\n',' ')).replace('\t',' ')
								cu.execute(str(sql))
							cu.close()
						
			if sigue:
				wx.BeginBusyCursor()
				lctrl = self.GetControl(ID_LISTCTRLAMORFUNC1)
				lctrl.Enable(False); lctrl.Show(False); lctrl.ClearAll()
				lctrl.InsertColumn(0, u"", wx.LIST_FORMAT_CENTER)
				lctrl.InsertColumn(1, u"No. Pago", wx.LIST_FORMAT_CENTER)
				lctrl.InsertColumn(2, u"Fecha de Pago", wx.LIST_FORMAT_CENTER)
				lctrl.InsertColumn(3, u"Saldo Inicial", wx.LIST_FORMAT_RIGHT)
				lctrl.InsertColumn(4, u"Pago Fijo", wx.LIST_FORMAT_RIGHT)
				lctrl.InsertColumn(5, u"Abono a Capital", wx.LIST_FORMAT_RIGHT)
				lctrl.InsertColumn(6, u"Intereses", wx.LIST_FORMAT_RIGHT)
				lctrl.InsertColumn(7, u"Saldo Final", wx.LIST_FORMAT_RIGHT)
				lctrl.InsertColumn(8, u"", wx.LIST_FORMAT_CENTER)
				fila = 0
				d, m, a = self.GetControl(ID_TEXTCTRLAMORFUNC1FECHAPRIMERPAGO).GetValue().split("/")
				d = int(d); m = int(m) - 1; a = int(a)
				totalabono, totalinteres, totalapagar = 0.00, 0.00, 0.00
				for pago in range(1, self.plazomeses + 1):
					m += 1
					if m > 12:
						m = 1; a += 1
					dx = d
					if int(m) == 2 and int(d) > 28:
						dx = 28
					elif int(m) in (2,4,6,9,11) and int(d) > 30:
						dx = 30
					fecha = "%02d/%02d/%04d" % (dx, m, a)
					saldoinicial = saldofinal
					intereses = 0.00
					if self.tasainteresanual > 0:
						intereses = round((self.tasainteresanual / 1200) * saldoinicial, 2)
					abonocapital = self.pagomensualfijo - intereses
					saldofinal = saldoinicial - abonocapital
					if fila %2 != 0: bgcolor = [204,204,255]
					else:            bgcolor = [230,230,255]
					index = lctrl.InsertStringItem(sys.maxint, str(pago))
					lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
					lctrl.SetStringItem(index, 0, str("0"))
					lctrl.SetStringItem(index, 1, str(pago))
					lctrl.SetStringItem(index, 2, str(fecha))
					lctrl.SetStringItem(index, 3, str(amount_and_cents_with_commas(float(saldoinicial))))
					lctrl.SetStringItem(index, 4, str(amount_and_cents_with_commas(float(self.pagomensualfijo))))
					lctrl.SetStringItem(index, 5, str(amount_and_cents_with_commas(float(abonocapital))))
					lctrl.SetStringItem(index, 6, str(amount_and_cents_with_commas(float(intereses))))
					lctrl.SetStringItem(index, 7, str(amount_and_cents_with_commas(float(saldofinal))))
					lctrl.SetStringItem(index, 8, str("000"))
					lctrl.SetItemData(index, pago)
					totalabono += abonocapital
					totalinteres += intereses
					fila += 1
					
				aux = self.GetControl(ID_TEXTCTRLAMORFUNC1ENGANCHE).GetValue()
				totalenganche = float(aux.replace(',',''))
				totalapagar = totalabono + totalinteres + totalenganche
				self.GetControl(ID_TEXTCTRLAMORFUNC1TOTALABONADO).SetValue(str(amount_and_cents_with_commas(totalabono)))
				self.GetControl(ID_TEXTCTRLAMORFUNC1TOTALINTERES).SetValue(str(amount_and_cents_with_commas(totalinteres)))
				self.GetControl(ID_TEXTCTRLAMORFUNC1TOTALENGANCHE).SetValue(str(amount_and_cents_with_commas(totalenganche)))
				self.GetControl(ID_TEXTCTRLAMORFUNC1TOTALPAGADO).SetValue(str(amount_and_cents_with_commas(totalapagar)))
				lctrl.SetColumnWidth(0, 0)
				lctrl.SetColumnWidth(1, 70)
				lctrl.SetColumnWidth(2, 130)
				lctrl.SetColumnWidth(3, 130)
				lctrl.SetColumnWidth(4, 130)
				lctrl.SetColumnWidth(5, 130)
				lctrl.SetColumnWidth(6, 130)
				lctrl.SetColumnWidth(7, 130)
				lctrl.SetColumnWidth(8, 0)
				lctrl.SetItemState(0, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
				lctrl.EnsureVisible(0)
				lctrl.Enable(True)
				lctrl.Show(True)
				lctrl.SetFocus()
				wx.EndBusyCursor()
				self.ValidaCambio(1, 2)
		else:
			self.ReduceFrame()
			
	def GetIdentity(self):
		identity = self.GetControl(ID_TEXTCTRLAMORFUNC1ID).GetValue()
		return (identity.replace('Id','')).replace(' ','')
	
	def GetDate(self):
		cu = r_cn.cursor()
		query = ""
		if os.environ["POSTGRES"]:
			query = "SELECT TO_CHAR(NOW() :: DATE, 'dd/mm/yyyy')"
		else:
			query = "select convert(varchar(10), getdate(), 103)"
		cu.execute(query)
		row = fetchone(cu)
		cu.close()
		return str(row[0])

	def GetTime(self):
		cu = r_cn.cursor()
		query = ""
		if os.environ["POSTGRES"]:
			query = "select current_time(2)"
		else:
			query = "select convert(varchar(8), getdate(), 108)"
		cu.execute(query)
		row = fetchone(cu)
		cu.close()
		return str(row[0])
	
	def DisplayContrato(self, contrato):
		self.GetControl(ID_TEXTCTRLAMORFUNC1CONTRATO).SetValue((" Contrato %s" % contrato))
		self.GetControl(ID_TEXTCTRLAMORFUNC1CONTRATO).Show(True)
		self.GetControl(ID_TEXTCTRLAMORFUNC1FECHAELABORACION).SetFocus()

	def DisplayCuenta(self, cuenta):
		self.GetControl(ID_TEXTCTRLAMORFUNC1CUENTA).SetValue((" Cuenta %s" % cuenta))
		self.GetControl(ID_TEXTCTRLAMORFUNC1CUENTA).Show(True)
		self.GetControl(ID_TEXTCTRLAMORFUNC1FECHAELABORACION).SetFocus()

	def OnGenerarCuenta(self, evt):
		if self.cambio:
			Mensajes().Info(self, u"� Antes de generar la cuenta guarde la informaci�n !", u"Atenci�n")
		else:
			aux = self.GetIdentity()
			pkamortizacion = int(aux)
			query = """
			select convert(varchar(10), fechaenganche, 111) from gixamortizacion where pkamortizacion = %s
			""" % pkamortizacion
			cu = r_cngcmex.cursor()
			cu.execute(self.PreparaQuery(query))
			dato = fetchone(cu)
			fechaenganche = str(dato[0])
			query = """
		        select convert(varchar(10), fechadepago, 111), numerodepago, pagofijo
		        from gixamortizaciondetalle
		        where fkamortizacion = %s and eliminado <> 1 and pagado <> 1
		        order by fechadepago, numerodepago
		        """ % pkamortizacion
			cu.execute(self.PreparaQuery(query))
			rows = fetchall(cu)
			cu.close()
			aux = self.GetControl(ID_TEXTCTRLAMORFUNC1PLAZOMESES).GetValue()
			plazo = int(aux)
			continua = True
			if self.GetControl(ID_CHOICEAMORFUNC1FORMADEPAGO).GetSelection() == 0:
				if not rows:
					Mensajes().Info(self, u"Si la forma de pago es a cr�dito genere la tabla\n" \
					                u"de pagos/amortizaci�n.\n\nSi es de contado cambie la forma de pago.",
					                u"Verifique la forma de pago")
					continua = False
					
				if plazo < 1:
					Mensajes().Info(self, u"Si la forma de pago es a cr�dito revise el plazo.\n" \
					                u"Si es de contado cambie la forma de pago.",
					                u"Verifique la forma de pago")
					continua = False
			else:
				if rows:
					Mensajes().Info(self, u"Si la forma de pago es de contado elimine la tabla\n" \
					                u"de pagos/amortizaci�n.\n\nSi es a cr�dito cambie la forma de pago.",
					                u"Verifique la forma de pago")
					continua = False
				
				if plazo > 0:
					Mensajes().Info(self, u"Si la forma de pago es de contado revise el plazo.\n" \
					                u"Si es a cr�dito cambie la forma de pago.",
					                u"Verifique la forma de pago")
					continua = False

			if continua:
				if Mensajes().YesNo(self, u"� Desea realmente generar la cuenta del cliente ?", u"Confirmaci�n"):
					d, m, a = self.GetControl(ID_TEXTCTRLAMORFUNC1FECHAELABORACION).GetValue().split("/")
					fechadeelaboracion = "%04d/%02d/%02d" % (int(a), int(m), int(d))
					if rows:
						aux = self.GetControl(ID_TEXTCTRLAMORFUNC1TOTALPAGADO).GetValue()
					else:
						aux = self.GetControl(ID_TEXTCTRLAMORFUNC1TOTALAPAGAR).GetValue()
						
					saldo = float(aux.replace(",", ""))
					aux = self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOCLIENTE).GetValue()
					codigocliente = int(aux)
					aux = self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOINMUEBLE).GetValue()
					codigoinmueble = int(aux)
					cu = r_cngcmex.cursor()
					cu.execute("select max(codigo) + 1 from cuenta")
					row = fetchone(cu)
					cu.close()
					cuenta = int(row[0])
					query = """
					insert into cuenta
					(codigo, fecha, saldo, fk_cliente, fk_inmueble, fk_tipo_cuenta)
					values (%s, '%s', %s, %s, %s, 1)
					""" % (cuenta, fechadeelaboracion, saldo, codigocliente, codigoinmueble)
					todook, trash = self.QueryUpdateRecord(self.PreparaQuery(query), conexion = r_cngcmex)
					if not todook:
						Mensajes().Info(self, u"� No se gener� la cuenta %s !" % cuenta, u"Notifique a Sistemas")
					else:
						query = "update gixamortizacion set cuenta = %s where pkamortizacion = %s" % (cuenta, pkamortizacion)
						todook, trash = self.QueryUpdateRecord(query, conexion = r_cngcmex)
						if not todook:
							Mensajes().Info(self, u"� No se actualizo la cuenta (A) %s !" % cuenta, u"Atenci�n")
						else:
							self.DisplayCuenta(cuenta)
							d, m, a = self.GetControl(ID_TEXTCTRLAMORFUNC1FECHAPRIMERPAGO).GetValue().split("/")
							fechaprimerpago = "%04d/%02d/%02d" % (int(a), int(m), int(d))
							aux = self.GetControl(ID_TEXTCTRLAMORFUNC1ENGANCHE).GetValue()
							enganche = float(aux.replace(",", ""))
							cu = r_cngcmex.cursor()
							cu.execute("select max(codigo) + 1 from documento")
							row = fetchone(cu)
							cu.close()
							documento = int(row[0])
							query = """
							insert into documento
							(codigo, fechadeelaboracion, fechadevencimiento, fechadevencimientovar, saldo, cargo, abono,
							fk_cuenta, fk_tipo)
							values (%s, '%s', '%s', '%s', %s, %s, 0.00, %s, 1)
							""" % (documento, fechadeelaboracion, fechaenganche, fechaenganche, enganche, enganche, cuenta)
							todook, trash = self.QueryUpdateRecord(self.PreparaQuery(query), conexion = r_cngcmex)
							if not todook:
								Mensajes().Info(self, u"� No se gener� el documento (E) %s -> cuenta %s !" % (documento, cuenta),
									        u"Notifique a Sistemas")
							else:
								cu = r_cngcmex.cursor()
								cu.execute("select max(codigo) + 1 from movimiento")
								row = fetchone(cu)
								cu.close()
								movimiento = int(row[0])
								query = """
								insert into movimiento
								(codigo, cantidad, fecha, cargoabono, fk_documento, fk_tipo)
								values (%s, %s, '%s', 'C', %s, 1)
								""" % (movimiento, enganche, fechadeelaboracion, documento)
								todook, trash = self.QueryUpdateRecord(self.PreparaQuery(query), conexion = r_cngcmex)
								if not todook:
									Mensajes().Info(self, u"� No se gener� el movimiento (E) %s -> cuenta %s !"
										        % (movimiento, cuenta), u"Notifique a Sistemas")
								else:
									aux = self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOVENDEDOR).GetValue()
									codigovendedor = int(aux)
									aux = self.GetControl(ID_TEXTCTRLAMORFUNC1PRECIOCONTADO).GetValue()
									cantidad = float(aux.replace(",", ""))
									iva = cantidad * 0.16
									total = cantidad + iva
									cu = r_cngcmex.cursor()
									cu.execute("select max(codigo) + 1 from comision")
									row = fetchone(cu)
									cu.close()
									comision = int(row[0])
									query = """
									insert into comision
									(codigo, cantidad, saldo_cantidad, iva, saldo_iva, total, saldo_total,
									aplicar, fk_inmueble, fk_vendedor)
									values (%s, %s, %s, %s, %s, %s, %s, 'N', %s, %s)
									""" % (comision, cantidad, cantidad, iva, iva, total, total,
									       codigoinmueble, codigovendedor)
									todook, trash = self.QueryUpdateRecord(self.PreparaQuery(query), conexion = r_cngcmex)
									if not todook:
										Mensajes().Info(self, u"� No se gener� la comisi�n %s -> cuenta %s !"
											        % (comision, cuenta), u"Notifique a Sistemas")
									else:
										query = """
										update inmueble set precio = %s, fechadeventa = '%s'
										where codigo = %s
										""" % (cantidad, fechadeelaboracion, codigoinmueble)
										todook, trash = self.QueryUpdateRecord(self.PreparaQuery(query), conexion = r_cngcmex)
										if not todook:
											Mensajes().Info(self, u"� No se actualiz� el inmueble %s -> cuenta %s !"
												        % (codigoinmueble, cuenta), u"Notifique a Sistemas")
									
										elif self.GetControl(ID_CHOICEAMORFUNC1FORMADEPAGO).GetSelection() == 0:
											inconsistencia = False
											totaldepagos = len(rows)
											for row in rows:
												fechadepago = row[0]
												numerodepago = int(row[1])
												pagofijo = float(row[2])
												cu = r_cngcmex.cursor()
												cu.execute("select max(codigo) + 1 from documento")
												doc = fetchone(cu)
												cu.close()
												documento = int(doc[0])
												query = """
												insert into documento
												(codigo, fechadeelaboracion, fechadevencimiento,
												fechadevencimientovar, saldo, cargo, abono,
												fk_cuenta, fk_tipo)
												values (%s, '%s', '%s', '%s', %s, %s, 0.00, %s, 2)
												""" % (documento, fechadeelaboracion, fechadepago,
												       fechadepago, pagofijo, pagofijo, cuenta)
												todook, trash = self.QueryUpdateRecord(self.PreparaQuery(query), conexion = r_cngcmex)
												if not todook:
													inconsistencia = True
													Mensajes().Info(self, u"� No se gener� el documento (M) %s -> cuenta %s !"
														        % (documento, cuenta), u"Notifique a Sistemas")
												else:
													cu = r_cngcmex.cursor()
													cu.execute("select max(codigo) + 1 from movimiento")
													mov = fetchone(cu)
													cu.close()
													movimiento = int(mov[0])
													query = """
													insert into movimiento
													(codigo, cantidad, fecha, relaciondepago, cargoabono,
													fk_documento, fk_tipo)
													values (%s, %s, '%s', '%s/%s', 'C', %s, 2)
													""" % (movimiento, pagofijo, fechadeelaboracion,
													       numerodepago, totaldepagos, documento)
													todook, trash = self.QueryUpdateRecord(self.PreparaQuery(query), conexion = r_cngcmex)
													if not todook:
														inconsistencia = True
														Mensajes().Info(self, u"� No se gener� el movimiento (M) %s -> cuenta %s !"
															        % (movimiento, cuenta), u"Notifique a Sistemas")
													
											if inconsistencia:
												Mensajes().Error(self, u"La generaci�n de la cuenta %s\n" \
													         u"presento inconsistencias.\n\n" \
													         u"� Notifiquelo a sistemas !" % cuenta,
													         u"Atenci�n")
											else:
												Mensajes().Info(self, u"� Generaci�n de cuenta exitosa !", u"Aviso")
												
											self.ValidaToolBar()
										else:
											Mensajes().Info(self, u"� Generaci�n de cuenta exitosa !", u"Aviso")
											self.ValidaToolBar()
											
	def OnImprimirPagareEnganche(self, evt):
		pkamortizacion = self.GetIdentity()
		self.fechaenganche = ""
		if pkamortizacion:
			query = """
			select convert(varchar(10), fechaenganche, 103), cuenta from gixamortizacion where pkamortizacion = %s
			""" % pkamortizacion
			cu = r_cngcmex.cursor()
			cu.execute(self.PreparaQuery(query))
			row = fetchone(cu)
			cu.close()
			if int(row[1]) > 0:
				self.ImprimirPagareEngancheValida()
			else:
				fechaenganche = ""
				if str(row[0]) != "None":
					fechaenganche = str(row[0])
					
				title = u"Fecha del enganche"
				dlg = GixTablasAmortizacionFunc13(self, title = title, fechaenganche = fechaenganche,
					                          pkamortizacion = pkamortizacion, modulo = self.ObtenerFechaEnganche)
				dlg.CenterOnParent()
				dlg.ShowModal()
				if self.fechaenganche:
					if Mensajes().YesNo(self, u"� Desea imprimir el pagar� del enganche ?", u"Confirmaci�n"):
						self.ImprimirPagareEngancheValida()
		else:
			Mensajes().Info(self, u"� Guarde la informaci�n antes de imprimir el pagar� !", u"Atenci�n")
			
	def ObtenerFechaEnganche(self, pkamortizacion, fechaenganche = ""):
		self.fechaenganche = fechaenganche
		if self.fechaenganche:
			d, m, a = self.fechaenganche.split("/")
			fecha = "%04d/%02d/%02d" % (int(a), int(m), int(d))
			sql = "update gixamortizacion set fechaenganche = '%s' where pkamortizacion = %s" % (fecha, pkamortizacion)
			todook, trash = self.QueryUpdateRecord(sql, conexion = r_cngcmex)
			if not todook:
				self.fechaenganche = ""
				Mensajes().Info(self, u"� Problemas al actualizar la fecha del enganche !", u"Atenci�n")
		
	def ImprimirPagareEngancheValida(self):
		self.pkamortizacion = self.GetIdentity()
		if self.pkamortizacion:
			if self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOINMUEBLE).GetValue():
				if self.cambio:
					if Mensajes().YesNo(self, u"Para imprimir es necesario guardar la informaci�n.\n\n" \
					                    u"� Desea guardar la informaci�n ahora ?", u"Confirmaci�n"):
						self.Guardar()
						self.ImprimirPagareEnganche()
				else:
					self.ImprimirPagareEnganche()
			else:
				Mensajes().Info(self, u"� Asigne un inmueble !", u"Atenci�n")
		else:
			index = self.GetControl(ID_CHOICEAMORFUNC1ETAPA).GetSelection()
			if index < 0:
				Mensajes().Info(self, u"� No hay nada que imprimir !", u"Atenci�n")
			else:
				codigolote = self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOINMUEBLE).GetValue()
				if codigolote:
					if Mensajes().YesNo(self, u"Para imprimir es necesario guardar la informaci�n.\n\n" \
						            u"� Desea guardar la informaci�n ahora ?", u"Confirmaci�n"):
						self.Guardar()
						self.pkamortizacion = self.GetIdentity()
						self.ImprimirPagareEnganche()
				else:
					Mensajes().Info(self, u"� No hay nada que imprimir !", u"Atenci�n")
					
	def ImprimirPagareEnganche(self):
		try:
			pisa
		except:
			Mensajes().Info(self, u"� Por favor instale el m�dulo xhtml2pdf (pisa) !", u"Aviso")
			return
		try:
			aux = self.GetIdentity()
			pkamortizacion = int(aux)
			query = """
		        select convert(varchar(10), fechadepago, 111), numerodepago, pagofijo
		        from gixamortizaciondetalle
		        where fkamortizacion = %s and eliminado <> 1 and pagado <> 1
		        order by fechadepago, numerodepago
		        """ % pkamortizacion
			cu = r_cngcmex.cursor()
			cu.execute(self.PreparaQuery(query))
			rows = fetchall(cu)
			cu.close()
			aux = self.GetControl(ID_TEXTCTRLAMORFUNC1PLAZOMESES).GetValue()
			plazo = int(aux)
			continua = True
			if self.GetControl(ID_CHOICEAMORFUNC1FORMADEPAGO).GetSelection() == 0:
				if not rows:
					Mensajes().Info(self, u"Si la forma de pago es a cr�dito genere la tabla\n" \
					                u"de pagos/amortizaci�n.\n\nSi es de contado cambie la forma de pago.",
					                u"Verifique la forma de pago")
					return
					
				if plazo < 1:
					Mensajes().Info(self, u"Si la forma de pago es a cr�dito revise el plazo.\n" \
					                u"Si es de contado cambie la forma de pago.",
					                u"Verifique la forma de pago")
					return
			else:
				if rows:
					Mensajes().Info(self, u"Si la forma de pago es de contado elimine la tabla\n" \
					                u"de pagos/amortizaci�n.\n\nSi es a cr�dito cambie la forma de pago.",
					                u"Verifique la forma de pago")
					return
				
				if plazo > 0:
					Mensajes().Info(self, u"Si la forma de pago es de contado revise el plazo.\n" \
					                u"Si es a cr�dito cambie la forma de pago.",
					                u"Verifique la forma de pago")
					return

			wx.BeginBusyCursor()
			gridcontenthtml = self.GetHtmlPagareEnganche()
			if gridcontenthtml:
				self.ValidaToolBar()
				archivo = "PagareEnganche%s.pdf" % self.pkamortizacion
				gridcontenthtml = gridcontenthtml.encode("utf-8")
				pdf = pisa.CreatePDF(cStringIO.StringIO(gridcontenthtml), file(archivo, "wb"))
				if not pdf.err:
					try:
						pdf.dest.close()
					except:
						warnings.warn("<<pdf.dest.close() no se pudo.>>")
					try:
						os.startfile(str(archivo))
					except:
						commmand_line = "open %s" % archivo
						p = subprocess.Popen(commmand_line, shell = True)
						pid, sts = os.waitpid(p.pid, 0)
						#os.system("open %s" % archivo)
						
				wx.EndBusyCursor()
			else:
				wx.EndBusyCursor()
				Mensajes().Info(self, u"� No hay nada que imprimir !", u"Atenci�n")
		except:
			wx.EndBusyCursor()
			Mensajes().Info(self, u"� Se presento un problema al imprimir el pagar� !", u"Atenci�n")
			
	def GetHtmlPagareEnganche(self):
		mes = {1:"Enero", 2:"Febrero", 3:"Marzo", 4:"Abril", 5:"Mayo", 6:"Junio", 7:"Julio",
		       8:"Agosto", 9:"Septiembre", 10:"Octubre", 11:"Noviembre", 12:"Diciembre"}
		query = """
	        select a.enganchec, convert(varchar(10), a.fechaenganche, 103), c.nombre, c.domicilio, c.colonia,
	        c.telefonocasa, ltrim(rtrim(c.ciudad + ', ' + c.estado + ' ' + c.cp)),
		convert(varchar(10), fechaelaboracion, 103) from gixamortizacion a
	        join cliente c on a.fkcliente = c.codigo
	        where a.pkamortizacion = %s
	        """ % self.pkamortizacion
		cu = r_cngcmex.cursor()
		cu.execute(self.PreparaQuery(query))
		row = fetchone(cu)
		cu.close()
		if float(row[0]) <= 0:
			return ""
		
		enganche = str(amount_and_cents_with_commas(float(row[0])))
		enganchel = str(c2p(float(row[0])).texto())
		d, m, a = str(row[1]).split("/")
		fechaenganche = "%s de %s del %s" % (int(d), mes[int(m)], int(a))
		nombre = self.GetString(row[2])
		domicilio = self.GetString(row[3])
		if self.GetString(row[4]):
			domicilio += " Col. %s" % self.GetString(row[4])
			
		telefono = self.GetString(row[5])
		ciudadestadocp = self.GetString(row[6])
		de, m, ae = str(row[7]).split("/")
		me = mes[int(m)]
		
		header = u"""
		<body>
		<div style="text-align: center;"><big><big><big><big><span
		style="font-family: Arial; font-weight: bold;"><br>
		PAGARE</span></big></big></big></big><br>
		<div style="text-align: left;"><br>
		<br>
		<br>
		<br>
		<big><big><big><span style="font-family: Arial;">IMPORTE: <span
		style="font-weight: bold;">${$IMPORTE}</span></span></big></big></big><br>
		<br>
		<br>
		<br>
		<div style="text-align: justify;"><big><big><span
		style="font-family: Arial;">Por
		medio de este pagar\xe9 reconozco(emos) deber y me(nos) obligo(amos) a
		pagar incondicionalmente a la orden de Arcadia Promotora S. de R.L. de
		C.V., la cantidad total de <span style="font-weight: bold;">${$IMPORTE}
		({$IMPORTEL})</span>, en el domicilio de Av. Hidalgo 1443 Piso 9 al
		d\xeda <span style="font-weight: bold;">{$FECHAPAGO}</span>.</span><br>
		<br>
		<span style="font-family: Arial;">En caso de mora en el principal, la
		suma de que se trate causar\xe1 intereses moratorios iguales al
		25 por ciento anual.<br>
		<br>
		<span style="font-family: Arial;">Este pagar\xe9 queda relevado de
		protesto.<br>
		<br>
		Para todo lo relacionado con este pagar\xe9, incluyendo su interpretaci\xf3n
		y cumplimiento, me someto expresamente a las leyes y tribunales
		vigentes y competentes en la ciudad de Guadalajara, Jalisco,
		renunciando al fuero que por cualquier otra causa pudiera corresponder.<br>
		<br>
		Suscribo el presente pagar\xe9 en la ciudad de Guadalajara, Jalisco a los <span
		style="font-weight: bold;">{$DIA} d\xedas del mes de {$MES} del {$ANIO}.</span><br>
		<br>
		<br>
		<small>Nombre del Suscriptor:</small><br>
		<span style="font-weight: bold;">{$NOMBRE}<small><br>
		</small></span><small>Domicilio:</small><br>
		<span style="font-weight: bold;">{$DOMICILIO}</span><br>
		<small>Tel\xe9fono:</small><br>
		<span style="font-weight: bold;">{$TELEFONO}</span><br>
		<small>Ciudad y Estado:</small><br>
		<span style="font-weight: bold;">{$CDEDO}</span></span></span></big></big><br>
		<div style="text-align: center;">
		<div style="text-align: left;"><big><big><span
		style="font-family: Arial;"><span style="font-family: Arial;"></span></span></big></big><br>
		<br>
		<br>
		<br>
		<br>
		<br>
		<br>
		<div style="text-align: left;"><big><big><span
		style="font-family: Arial;">ACEPTO(AMOS)</span></big></big>______________________________________________________________________<br>
		</div>
		</div>
		<big><big><span style="font-family: Arial;"><span
		style="font-family: Arial;"></span></span></big></big></div>
		</div>
		</div>
		</div>
		</body>
		"""
			
		h = (header.replace('\n',' ')).replace('\t',' ')
		h = ((h.replace('{$IMPORTE}',enganche)).replace('{$IMPORTEL}',enganchel)).replace('{$FECHAPAGO}',fechaenganche)
		h = ((h.replace('{$DIA}',de)).replace('{$MES}',me)).replace('{$ANIO}',ae)
		h = (h.replace('{$NOMBRE}',nombre)).replace('{$DOMICILIO}',domicilio)
		h = (h.replace('{$TELEFONO}',telefono)).replace('{$CDEDO}',ciudadestadocp)

		jump = '<style>@media print {h1 {page-break-before:always}}</style>'
		
		html = '<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" />' + jump + \
	             '</head><body>' + h + '</body></html>'
		
		return html
	
	def OnImprimirPagarePagos(self, evt):
		self.pkamortizacion = self.GetIdentity()
		if self.pkamortizacion:
			if self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOINMUEBLE).GetValue():
				if self.cambio:
					if Mensajes().YesNo(self, u"Para imprimir es necesario guardar la informaci�n.\n\n" \
					                    u"� Desea guardar la informaci�n ahora ?", u"Confirmaci�n"):
						self.Guardar()
						self.ImprimirPagarePagos()
				else:
					self.ImprimirPagarePagos()
			else:
				Mensajes().Info(self, u"� Asigne un inmueble !", u"Atenci�n")
		else:
			index = self.GetControl(ID_CHOICEAMORFUNC1ETAPA).GetSelection()
			if index < 0:
				Mensajes().Info(self, u"� No hay nada que imprimir !", u"Atenci�n")
			else:
				codigolote = self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOINMUEBLE).GetValue()
				if codigolote:
					if Mensajes().YesNo(self, u"Para imprimir es necesario guardar la informaci�n.\n\n" \
						            u"� Desea guardar la informaci�n ahora ?", u"Confirmaci�n"):
						self.Guardar()
						self.pkamortizacion = self.GetIdentity()
						self.ImprimirPagarePagos()
				else:
					Mensajes().Info(self, u"� No hay nada que imprimir !", u"Atenci�n")
					
	def ImprimirPagarePagos(self):
		try:
			pisa
		except:
			Mensajes().Info(self, u"� Por favor instale el m�dulo xhtml2pdf (pisa) !", u"Aviso")
			return
		try:
			aux = self.GetIdentity()
			pkamortizacion = int(aux)
			query = """
		        select convert(varchar(10), fechadepago, 111), numerodepago, pagofijo
		        from gixamortizaciondetalle
		        where fkamortizacion = %s and eliminado <> 1
		        order by fechadepago, numerodepago
		        """ % pkamortizacion
			cu = r_cngcmex.cursor()
			cu.execute(self.PreparaQuery(query))
			rows = fetchall(cu)
			cu.close()
			aux = self.GetControl(ID_TEXTCTRLAMORFUNC1PLAZOMESES).GetValue()
			plazo = int(aux)
			continua = True
			if self.GetControl(ID_CHOICEAMORFUNC1FORMADEPAGO).GetSelection() == 0:
				if not rows:
					Mensajes().Info(self, u"Si la forma de pago es a cr�dito genere la tabla\n" \
					                u"de pagos/amortizaci�n.\n\nSi es de contado cambie la forma de pago.",
					                u"Verifique la forma de pago")
					return
					
				if plazo < 1:
					Mensajes().Info(self, u"Si la forma de pago es a cr�dito revise el plazo.\n" \
					                u"Si es de contado cambie la forma de pago.",
					                u"Verifique la forma de pago")
					return
			else:
				if rows:
					Mensajes().Info(self, u"Si la forma de pago es de contado elimine la tabla\n" \
					                u"de pagos/amortizaci�n.\n\nSi es a cr�dito cambie la forma de pago.",
					                u"Verifique la forma de pago")
					return
				
				if plazo > 0:
					Mensajes().Info(self, u"Si la forma de pago es de contado revise el plazo.\n" \
					                u"Si es a cr�dito cambie la forma de pago.",
					                u"Verifique la forma de pago")
					return
				
			query = """
			select count(*) from gixamortizaciondetalle
			where fkamortizacion = %s and eliminado = 0 and insertado <> 0
			""" % pkamortizacion
			sql = (query.replace('\n',' ')).replace('\t',' ')
			cu = r_cngcmex.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			cu.close()
			pagoextra = False
			if row is not None:
				if int(row[0]) > 0:
					pagoextra = True

			wx.BeginBusyCursor()
			if pagoextra:
				gridcontenthtml = self.GetHtmlPagarePagosExtras()
			else:
				gridcontenthtml = self.GetHtmlPagarePagos()

			if gridcontenthtml:
				self.ValidaToolBar()
				archivo = "PagarePagos%s.pdf" % self.pkamortizacion
				gridcontenthtml = gridcontenthtml.encode("utf-8")
				pdf = pisa.CreatePDF(cStringIO.StringIO(gridcontenthtml), file(archivo, "wb"))
				if not pdf.err:
					try:
						pdf.dest.close()
					except:
						warnings.warn("<<pdf.dest.close() no se pudo.>>")
					try:
						os.startfile(str(archivo))
					except:
						commmand_line = "open %s" % archivo
						p = subprocess.Popen(commmand_line, shell = True)
						pid, sts = os.waitpid(p.pid, 0)
						#os.system("open %s" % archivo)
						
				wx.EndBusyCursor()
			else:
				wx.EndBusyCursor()
				Mensajes().Info(self, u"� No hay nada que imprimir !", u"Atenci�n")
		except:
			wx.EndBusyCursor()
			Mensajes().Info(self, u"� Se presento un problema al imprimir el pagar� !", u"Atenci�n")
			
	def GetHtmlPagarePagos(self):
		mes = {1:"Enero", 2:"Febrero", 3:"Marzo", 4:"Abril", 5:"Mayo", 6:"Junio", 7:"Julio",
		       8:"Agosto", 9:"Septiembre", 10:"Octubre", 11:"Noviembre", 12:"Diciembre"}
		
		query = """
		select convert(varchar(10), fechadepago, 103) from gixamortizaciondetalle
		where fkamortizacion = %s and eliminado = 0 order by fechadepago
		""" % int(self.pkamortizacion)
		sql = (query.replace('\n',' ')).replace('\t',' ')
		cu = r_cngcmex.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			if not self.GetControl(ID_CHOICEAMORFUNC1FORMADEPAGO).GetSelection() == 0:
				Mensajes().Info(self, u"No puede imprimir el pagar� si la forma de pago es de contado", u"Atenci�n")
				return ""
			
			plazotabla = len(rows)
			di, mi, ai = str(rows[0][0]).split("/")
			df, mf, af = str(rows[len(rows) - 1][0]).split("/")
			query = """
			select sum(pagofijo) from gixamortizaciondetalle where fkamortizacion = %s and eliminado = 0
			""" % int(self.pkamortizacion)
			sql = (query.replace('\n',' ')).replace('\t',' ')
			cu = r_cngcmex.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			cu.close()
			totaltabla = float(row[0])
			if totaltabla <= 0:
				return ""
		else:
			return ""
			
		cu = r_cngcmex.cursor()
		cu.execute("select pagomensualfijo from gixamortizacion where pkamortizacion = %s" % self.pkamortizacion)
		row = fetchone(cu)
		cu.close()
		if row is None:
			return ""
		else:
			pagofijo = float(row[0])
			if pagofijo <= 0:
				return ""
			
		query = """
	        select c.nombre, c.domicilio, c.colonia,
	        c.telefonocasa, ltrim(rtrim(c.ciudad + ', ' + c.estado + ' ' + c.cp)),
		convert(varchar(10), a.fechaelaboracion, 103) from gixamortizacion a
	        join cliente c on a.fkcliente = c.codigo
	        where a.pkamortizacion = %s
	        """ % self.pkamortizacion
		cu = r_cngcmex.cursor()
		cu.execute(self.PreparaQuery(query))
		row = fetchone(cu)
		cu.close()
		totaltablac = str(amount_and_cents_with_commas(float(totaltabla)))
		totaltablal = str(c2p(float(totaltabla)).texto())
		fechainicial = "%s de %s de %s" % (int(di), mes[int(mi)], int(ai))
		fechafinal = "%s de %s de %s" % (int(df), mes[int(mf)], int(af))
		pagofijoc = str(amount_and_cents_with_commas(pagofijo))
		pagofijol = str(c2p(pagofijo).texto())
		nombre = self.GetString(row[0])
		domicilio = self.GetString(row[1])
		if self.GetString(row[2]):
			domicilio += " Col. %s" % self.GetString(row[2])
			
		telefono = self.GetString(row[3])
		ciudadestadocp = self.GetString(row[4])
		de, m, ae = str(row[5]).split("/")
		me = mes[int(m)]
		
		header = u"""
		<body>
		<div style="text-align: center;"><big><big><big><big><span
		style="font-family: Arial; font-weight: bold;"><br>
		PAGARE</span></big></big></big></big><br>
		<div style="text-align: left;"><br>
		<br>
		<br>
		<big><big><big><span style="font-family: Arial;">IMPORTE: <span
		style="font-weight: bold;">${$TOTALTABLAC}</span></span></big></big></big><br>
		<br>
		<br>
		<div style="text-align: justify;"><big><big><span
		style="font-family: Arial;">Por
		medio de este pagar\xe9 reconozco(emos) deber y me(nos) obligo(amos) a
		pagar incondicionalmente a la orden de Arcadia Promotora S. de R.L. de
		C.V., la cantidad total de 
		<span style="font-weight: bold;">${$TOTALTABLAC}
		({$TOTALTABLAL})</span>, en el domicilio de Av. Hidalgo 1443 Piso 9,
		mediante 
		<span style="font-weight: bold;">{$PLAZOTABLA}</span> pagos
		mensuales consecutivos sin intereses del d\xeda <span
		style="font-weight: bold;">{$FECHAINICIAL}</span><span
		style="font-weight: bold;"></span><span style="font-weight: bold;"></span>
		al <span style="font-weight: bold;">{$FECHAFINAL}</span><span
		style="font-weight: bold;"></span><span style="font-weight: bold;"></span>,
		cada una por la cantidad de <span style="font-weight: bold;">${$PAGOFIJOC}
		({$PAGOFIJOL})</span>.</span><br>
		<br>
		<span style="font-family: Arial;">En caso de mora en el principal, la
		suma de que se trate causar\xe1 intereses moratorios del 
		25 por ciento anual.<br>
		<br>
		<span style="font-family: Arial;">La falta de pago oportuno del capital
		de por los menos dos mensualidades, traer\xe1 como consecuencia que sea
		exigible en su totalidad el saldo insoluto de la cantidad que ampara el
		presente pagar\xe9, a\xfan cuando las mensualidades que sucedan a dicha
		mensualidad, no se encuentren vencidas.<br>
		<br>
		Este pagare queda relevado de protesto.<br>
		<br>
		Para todo lo relacionado con este pagar\xe9, incluyendo su interpretaci\xf3n
		y cumplimiento, me someto expresamente a las leyes y tribunales
		vigentes y competentes en la ciudad de Guadalajara, Jalisco,
		renunciando al fuero que por cualquier otra causa pudiera corresponder.<br>
		<br>
		Suscribo el presente pagar\xe9 en la ciudad de Guadalajara, Jalisco a los <span
		style="font-weight: bold;">{$DIA} d\xedas del mes de {$MES} del {$ANIO}.</span><br>
		<br>
		<br>
		<small>Nombre del Suscriptor:</small><br>
		<span style="font-weight: bold;">{$NOMBRE}<small><br>
		</small></span><small>Domicilio:</small><br>
		<span style="font-weight: bold;">{$DOMICILIO}</span><br>
		<small>Tel\xe9fono:</small><br>
		<span style="font-weight: bold;">{$TELEFONO}</span><br>
		<small>Ciudad y Estado:</small><br>
		<span style="font-weight: bold;">{$CDEDO}</span></span></span></big></big><br>
		<div style="text-align: center;">
		<div style="text-align: left;"><big><big><span
		style="font-family: Arial;"><span style="font-family: Arial;"></span></span></big></big><br>
		<br>
		<br>
		<br>
		<br>
		<br>
		<div style="text-align: left;"><big><big><span
		style="font-family: Arial;">ACEPTO(AMOS)</span></big></big>______________________________________________________________________<br>
		</div>
		</div>
		<big><big><span style="font-family: Arial;"><span
		style="font-family: Arial;"></span></span></big></big></div>
		</div>
		</div>
		</div>
		</body>
		"""
			
		h = (header.replace('\n',' ')).replace('\t',' ')
		h = ((h.replace('{$TOTALTABLAC}',totaltablac)).replace('{$TOTALTABLAL}',totaltablal)).replace('{$PLAZOTABLA}',str(plazotabla))
		h = (h.replace('{$FECHAINICIAL}',fechainicial)).replace('{$FECHAFINAL}',fechafinal)
		h = (h.replace('{$PAGOFIJOC}',pagofijoc)).replace('{$PAGOFIJOL}',pagofijol)
		h = ((h.replace('{$DIA}',de)).replace('{$MES}',me)).replace('{$ANIO}',ae)
		h = (h.replace('{$NOMBRE}',nombre)).replace('{$DOMICILIO}',domicilio)
		h = (h.replace('{$TELEFONO}',telefono)).replace('{$CDEDO}',ciudadestadocp)

		jump = '<style>@media print {h1 {page-break-before:always}}</style>'
		
		html = '<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" />' + jump + \
	             '</head><body>' + h + '</body></html>'
		
		return html
			
	def GetHtmlPagarePagosExtras(self):
		mes = {1:"Enero", 2:"Febrero", 3:"Marzo", 4:"Abril", 5:"Mayo", 6:"Junio", 7:"Julio",
		       8:"Agosto", 9:"Septiembre", 10:"Octubre", 11:"Noviembre", 12:"Diciembre"}
		messmall = {1:"Ene", 2:"Feb", 3:"Mar", 4:"Abr", 5:"May", 6:"Jun", 7:"Jul",
		            8:"Ago", 9:"Sep", 10:"Oct", 11:"Nov", 12:"Dic"}
		
		query = """
		select convert(varchar(10), fechadepago, 103) from gixamortizaciondetalle
		where fkamortizacion = %s and eliminado = 0 order by fechadepago
		""" % int(self.pkamortizacion)
		sql = (query.replace('\n',' ')).replace('\t',' ')
		cu = r_cngcmex.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			if not self.GetControl(ID_CHOICEAMORFUNC1FORMADEPAGO).GetSelection() == 0:
				Mensajes().Info(self, u"No puede imprimir el pagar� si la forma de pago es de contado", u"Atenci�n")
				return ""
			
			plazotabla = len(rows)
			query = """
			select sum(pagofijo) from gixamortizaciondetalle where fkamortizacion = %s and eliminado = 0
			""" % int(self.pkamortizacion)
			sql = (query.replace('\n',' ')).replace('\t',' ')
			cu = r_cngcmex.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			cu.close()
			totaltabla = float(row[0])
			if totaltabla <= 0:
				return ""
		else:
			return ""
			
		query = """
	        select c.nombre, c.domicilio, c.colonia,
	        c.telefonocasa, ltrim(rtrim(c.ciudad + ', ' + c.estado + ' ' + c.cp)),
		convert(varchar(10), a.fechaelaboracion, 103) from gixamortizacion a
	        join cliente c on a.fkcliente = c.codigo
	        where a.pkamortizacion = %s
	        """ % self.pkamortizacion
		cu = r_cngcmex.cursor()
		cu.execute(self.PreparaQuery(query))
		row = fetchone(cu)
		cu.close()
		totaltablac = str(amount_and_cents_with_commas(float(totaltabla)))
		totaltablal = str(c2p(float(totaltabla)).texto())
		nombre = self.GetString(row[0])
		domicilio = self.GetString(row[1])
		if self.GetString(row[2]):
			domicilio += " Col. %s" % self.GetString(row[2])
			
		telefono = self.GetString(row[3])
		ciudadestadocp = self.GetString(row[4])
		de, m, ae = str(row[5]).split("/")
		me = mes[int(m)]
		
		query = """
	        select numerodepago, convert(varchar(10), fechadepago, 103), pagofijo
	        from gixamortizaciondetalle
	        where fkamortizacion = %s and eliminado = 0 order by fechadepago, numerodepago
	        """ % self.pkamortizacion
		sql = (query.replace('\n',' ')).replace('\t',' ')
		cu = r_cngcmex.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		
		h1 = u"""
		<body>
		<div style="text-align: center;"><big><big><big><big><span
		style="font-family: Arial; font-weight: bold;"><br>
		PAGARE</span></big></big></big></big><br>
		<div style="text-align: left;"><br>
		<br>
		<br>
		<big><big><big><span style="font-family: Arial;">IMPORTE: <span
		style="font-weight: bold;">${$TOTALTABLAC}</span></span></big></big></big><br>
		<br>
		<br>
		<div style="text-align: justify;"><big><big><span
		style="font-family: Arial;">Por
		medio de este pagar\xe9 reconozco(emos) deber y me(nos) obligo(amos) a
		pagar incondicionalmente a la orden de Arcadia Promotora S. de R.L. de
		C.V., la cantidad total de <span style="font-weight: bold;">${$TOTALTABLAC}
		({$TOTALTABLAL})</span>, en el domicilio de Av. Hidalgo 1443 Piso 9,
		mediante <span style="font-weight: bold;">{$PLAZOTABLA}</span> pagos
		de la siguiente forma:<span style="font-weight: bold;"></span><span
		style="font-weight: bold;"></span><span style="font-weight: bold;"></span><span
		style="font-weight: bold;"></span><span style="font-weight: bold;"></span><span
		style="font-weight: bold;"></span><span style="font-weight: bold;"></span></span><br>
		<br>
		"""
		
		tableheader = u"""
	        <div style="text-align: right;">
	         <span style="font-weight: bold; font-style: italic;">
	         <small>No. de Pago</small>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	         <small>Fecha de Pago</small>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	         <small>Saldo Inicial</small>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	         <small>Pago</small>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	         <small>Saldo Final</small>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	         </span></div>
	         """
		h1 += tableheader
		lines = 18
		sini = float(totaltabla)
		for row in rows:
			numerodepago = str(int(row[0]))
			d, m, a = row[1].split("/")
			fechadepago = "%02d/%s/%04d" % (int(d), messmall[int(m)], int(a))
			saldoinicial = str(amount_and_cents_with_commas(sini))
			pagofijo = str(amount_and_cents_with_commas(float(row[2])))
			sfin = sini - float(row[2])
			if sfin < 0:
				sfin = 0.00
			saldofinal = str(amount_and_cents_with_commas(sfin))
			sini = sfin
			tag = ''
			#lines += 1
			#if lines > 27:
				#tag = '<div><h1></div><br><br><br><br><br><br><br><br><br><br>'
				#lines = 0
				
			line = u"""
		        <table
		         style="text-align: left; margin-left: auto; margin-right: auto; width: 990px; height: 10px;"
		         border="0" cellpadding="2" cellspacing="2">
		          <tbody>
		            <tr>
		              <td style="width: 100px; height: 10px; text-align: right;"><small>""" + numerodepago + """</small></td>
		              <td style="width: 165px; height: 10px; text-align: right;"><small>""" + fechadepago + """</small></td>
		              <td style="width: 140px; height: 10px; text-align: right;"><small>""" + saldoinicial + """</small></td>
		              <td style="width: 100px; height: 10px; text-align: right;"><small>""" + pagofijo + """</small></td>
		              <td style="width: 110px; height: 10px; text-align: right;"><small>""" + saldofinal + """</small></td>
		            </tr>
		          </tbody>
		        </table>
		        """
			h1 += line + tag
			if tag:
				h1 += tableheader
		
		h2 = u"""
		<br>
		<span style="font-family: Arial;">En caso de mora en el principal, la
		suma de que se trate causar\xe1 intereses moratorios por todo el tiempo que se mantenga insoluto dicho pago a una tasa del 25 % anual.<br>
		<br>
		<span style="font-family: Arial;">La falta de pago oportuno del capital
		de por los menos dos mensualidades, traer\xe1 como consecuencia que sea
		exigible en su totalidad el saldo insoluto de la cantidad que ampara el
		presente pagar\xe9, a\xfan cuando las mensualidades que sucedan a dicha
		mensualidad, no se encuentren vencidas.<br>
		<br>
		Este pagar\xe9 queda relevado de protesto.<br>
		<br>
		Para todo lo relacionado con este pagar\xe9, incluyendo su interpretaci\xf3n
		y cumplimiento, me someto expresamente a las leyes y tribunales
		vigentes y competentes en la ciudad de Guadalajara, Jalisco,
		renunciando al fuero que por cualquier otra causa pudiera corresponder.<br>
		<br>
		Suscribo el presente pagar\xe9 en la ciudad de Guadalajara, Jalisco a los <span
		style="font-weight: bold;">{$DIA} d\xedas del mes de {$MES} del {$ANIO}.</span><br>
		<br>
		<br>
		<small>Nombre del Suscriptor:</small><br>
		<span style="font-weight: bold;">{$NOMBRE}<small><br>
		</small></span><small>Domicilio:</small><br>
		<span style="font-weight: bold;">{$DOMICILIO}</span><br>
		<small>Tel\xe9fono:</small><br>
		<span style="font-weight: bold;">{$TELEFONO}</span><br>
		<small>Ciudad y Estado:</small><br>
		<span style="font-weight: bold;">{$CDEDO}</span></span></span></big></big><br>
		<div style="text-align: center;">
		<div style="text-align: left;"><big><big><span
		style="font-family: Arial;"><span style="font-family: Arial;"></span></span></big></big><br>
		<br>
		<br>
		<br>
		<br>
		<br>
		<div style="text-align: left;"><big><big><span
		style="font-family: Arial;">ACEPTO(AMOS)</span></big></big>______________________________________________________________________<br>
		</div>
		</div>
		<big><big><span style="font-family: Arial;"><span
		style="font-family: Arial;"></span></span></big></big></div>
		</div>
		</div>
		</div>
		</body>
		"""
			
		h = h1 + h2
		h = (h.replace('\n',' ')).replace('\t',' ')
		h = (h.replace('{$TOTALTABLAC}',totaltablac)).replace('{$TOTALTABLAL}',totaltablal)
		h = h.replace('{$PLAZOTABLA}',str(plazotabla))
		h = ((h.replace('{$DIA}',de)).replace('{$MES}',me)).replace('{$ANIO}',ae)
		h = (h.replace('{$NOMBRE}',nombre)).replace('{$DOMICILIO}',domicilio)
		h = (h.replace('{$TELEFONO}',telefono)).replace('{$CDEDO}',ciudadestadocp)

		jump = '<style>@media print {h1 {page-break-before:always}}</style>'
		
		html = '<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" />' + jump + \
	             '</head><body>' + h + '</body></html>'
		
		return html

	def OnImprimirContrato(self, evt):
		self.pkamortizacion = self.GetIdentity()
		if self.pkamortizacion:
			if self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOINMUEBLE).GetValue():
				if self.cambio:
					if Mensajes().YesNo(self, u"Para imprimir es necesario guardar la informaci�n.\n\n" \
					                    u"� Desea guardar la informaci�n ahora ?", u"Confirmaci�n"):
						self.Guardar()
						self.ImprimirContrato()
				else:
					self.ImprimirContrato()
			else:
				Mensajes().Info(self, u"� Asigne un inmueble !", u"Atenci�n")
		else:
			index = self.GetControl(ID_CHOICEAMORFUNC1ETAPA).GetSelection()
			if index < 0:
				Mensajes().Info(self, u"� No hay nada que imprimir !", u"Atenci�n")
			else:
				codigolote = self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOINMUEBLE).GetValue()
				if codigolote:
					if Mensajes().YesNo(self, u"Para imprimir es necesario guardar la informaci�n.\n\n" \
						            u"� Desea guardar la informaci�n ahora ?", u"Confirmaci�n"):
						self.Guardar()
						self.pkamortizacion = self.GetIdentity()
						self.ImprimirContrato()
				else:
					Mensajes().Info(self, u"� No hay nada que imprimir !", u"Atenci�n")
					
	def ImprimirContrato(self):
		try:
			pisa
		except:
			Mensajes().Info(self, u"� Por favor instale el m�dulo xhtml2pdf (pisa) !", u"Aviso")
			return
		try:
			aux = self.GetIdentity()
			pkamortizacion = int(aux)
			query = """
		        select convert(varchar(10), fechadepago, 111), numerodepago, pagofijo
		        from gixamortizaciondetalle
		        where fkamortizacion = %s and eliminado <> 1 and pagado <> 1
		        order by fechadepago, numerodepago
		        """ % pkamortizacion
			cu = r_cngcmex.cursor()
			cu.execute(self.PreparaQuery(query))
			rows = fetchall(cu)
			cu.close()
			aux = self.GetControl(ID_TEXTCTRLAMORFUNC1PLAZOMESES).GetValue()
			plazo = int(aux)
			continua = True
			if self.GetControl(ID_CHOICEAMORFUNC1FORMADEPAGO).GetSelection() == 0:
				if not rows:
					Mensajes().Info(self, u"Si la forma de pago es a cr�dito genere la tabla\n" \
					                u"de pagos/amortizaci�n.\n\nSi es de contado cambie la forma de pago.",
					                u"Verifique la forma de pago")
					return
					
				if plazo < 1:
					Mensajes().Info(self, u"Si la forma de pago es a cr�dito revise el plazo.\n" \
					                u"Si es de contado cambie la forma de pago.",
					                u"Verifique la forma de pago")
					return
			else:
				if rows:
					Mensajes().Info(self, u"Si la forma de pago es de contado elimine la tabla\n" \
					                u"de pagos/amortizaci�n.\n\nSi es a cr�dito cambie la forma de pago.",
					                u"Verifique la forma de pago")
					return
				
				if plazo > 0:
					Mensajes().Info(self, u"Si la forma de pago es de contado revise el plazo.\n" \
					                u"Si es a cr�dito cambie la forma de pago.",
					                u"Verifique la forma de pago")
					return

			wx.BeginBusyCursor()
			gridcontenthtml, contrato = self.GetHtmlContrato()
			if gridcontenthtml:
				self.ValidaToolBar()
				archivo = "Contrato%s_%s.pdf" % (contrato, self.pkamortizacion)
				archivo_vicente = "vicente_%s.html" % self.pkamortizacion
				gridcontenthtml = gridcontenthtml.encode("utf-8")
				if True:
					f = open(archivo_vicente , "w") 
					f.write(gridcontenthtml)
					f.close()
				pdf = pisa.CreatePDF(cStringIO.StringIO(gridcontenthtml), file(archivo, "wb"))
				if not pdf.err:
					try:
						pdf.dest.close()
					except:
						warnings.warn("<<pdf.dest.close() no se pudo.>>")
					try:
						os.startfile(str(archivo))
					except:
						os.system("open %s" % archivo)
						
						#commmand_line = "open %s" % archivo
						#p = subprocess.Popen(commmand_line, shell = True)
						#pid, sts = os.waitpid(p.pid, 0)						
						
				wx.EndBusyCursor()
				
			elif contrato:
				archivo = "Contrato%s_%s.pdf" % (contrato, self.pkamortizacion)
				try:
					os.startfile(str(archivo))
				except:
					os.system("open %s" % archivo)
					
				wx.EndBusyCursor()
			else:
				wx.EndBusyCursor()
				Mensajes().Info(self, u"� Verifique la forma de pago y el plazo (tabla) !", u"Atenci�n")
		except:
			wx.EndBusyCursor()
			Mensajes().Info(self, u"� Se presento un problema al imprimir el contrato !", u"Atenci�n")
			
	def GetHtmlContrato(self):
		cu = r_cngcmex.cursor()
		cu.execute("select razonsocial, representantelegal, ciudad, estado, domicilio, colonia from empresa where codigo = 1")
		row = fetchone(cu)
		razonsocial = self.GetString(row[0]); representantelegal = self.GetString(row[1])
		eciudad = self.GetString(row[2]); eestado = self.GetString(row[3])
		edomicilio = self.GetString(row[4])
		if row[5]:
			edomicilio += " Col. " + self.GetString(row[5])
		
		query = """
		select convert(varchar(10), fechadepago, 103) from gixamortizaciondetalle
		where fkamortizacion = %s and eliminado = 0 order by fechadepago
		""" % int(self.pkamortizacion)

		sql = (query.replace('\n',' ')).replace('\t',' ')
		cu.execute(str(sql))
		rows = fetchall(cu)
		if rows:
			if not self.GetControl(ID_CHOICEAMORFUNC1FORMADEPAGO).GetSelection() == 0:
				return "", 0
			
			plazotabla = len(rows)
			di, mi, ai = str(rows[0][0]).split("/")
			df, mf, af = str(rows[len(rows) - 1][0]).split("/")
			query = """
			select sum(pagofijo) from gixamortizaciondetalle where fkamortizacion = %s and eliminado = 0
			""" % int(self.pkamortizacion)
			sql = (query.replace('\n',' ')).replace('\t',' ')
			cu.execute(str(sql))
			row = fetchone(cu)
			totaltabla = float(row[0])

		else:
			if not self.GetControl(ID_CHOICEAMORFUNC1FORMADEPAGO).GetSelection() == 1:
				return "", 0
			
			plazotabla, totaltabla = 0, 0
			di, mi, ai, df, mf, af = 0, 0, 0, 0, 0, 0
			
		query = """
		select count(*) from gixamortizaciondetalle
		where fkamortizacion = %s and eliminado = 0 and insertado <> 0
		""" % int(self.pkamortizacion)
		sql = (query.replace('\n',' ')).replace('\t',' ')
		cu.execute(str(sql))
		row = fetchone(cu)
		pagoextra = False
		if row is not None:
			if int(row[0]) > 0:
				pagoextra = True
			else:
				plazotabla, totaltabla = 0, 0
		
		query = """
		select rtrim(ltrim(i.iden1)), rtrim(ltrim(i.iden2)), a.enganchec, i.superficie, a.saldoafinanciar, i.preciopormetro,
		case a.plazomeses when 0 then (a.saldoafinanciar + a.enganchec) else ((a.pagomensualfijo * a.plazomeses) + a.enganchec) end,
		i.titulo1, i.lindero1, i.titulo2, i.lindero2, i.titulo3, i.lindero3, i.titulo4, i.lindero4,
		case a.plazomeses when 0 then a.saldoafinanciar else (a.pagomensualfijo * a.plazomeses) end,
		a.plazomeses, a.pagomensualfijo, convert(varchar(10), a.fechaelaboracion, 103), a.fkcliente, a.fkvendedor,
		a.contrato, a.cuenta, convert(varchar(10), a.fechaprimerpago, 103), convert(varchar(10), a.fechaenganche, 103)
		from gixamortizacion a
		join INMUEBLE i on a.fkinmueble = i.codigo
		where a.pkamortizacion = %s
		""" % int(self.pkamortizacion)
		sql = (query.replace('\n',' ')).replace('\t',' ')
		cu.execute(str(sql))
		row = fetchone(cu)
		if row is not None:
			cu.execute("select nombre, domicilio, colonia, ciudad, estado, rfc from cliente where codigo = %s" % int(row[19]))
			cte = fetchone(cu)
			nombrecliente = self.GetString(cte[0])
			domiciliocliente = self.GetString(cte[1])
			if cte[2]:
				domiciliocliente += " Col. " + self.GetString(cte[2])
				
			ciudadcliente = self.GetString(cte[3])
			estadocliente = self.GetString(cte[4])
			rfccliente = self.GetString(cte[5])

			cu.execute("select nombre from vendedor where codigo = %s" % int(row[20]))
			ven = fetchone(cu)
			nombrevendedor = self.GetString(ven[0])

			cu.execute("select contrato, descripcion, ciudad, estado from desarrollo where codigo = 5")
			des = fetchone(cu)
			contrato = int(des[0]); desarrollo = self.GetString(des[1])
			dciudad = self.GetString(des[2]); destado = self.GetString(des[3])
			cu.close()
			
			if int(row[21]) > 0:
				contrato = int(row[21])
				if int(row[22]) > 0:
					archivo = "Contrato%s_%s.pdf" % (contrato, self.pkamortizacion)
					try:
						f = open(archivo, 'r')
						f.close()
						return "", contrato
					except:
						pass
			else:
				sql = "update desarrollo set contrato = %s where codigo = 5" % (contrato + 1)
				todook, trash = self.QueryUpdateRecord(sql, conexion = r_cngcmex)
				if not todook:
					Mensajes().Info(self, u"� Problemas al actualizar el contrato (1) !", u"Atenci�n")
					return ""
			
				sql = "update gixamortizacion set contrato = %s where pkamortizacion = %s" % (contrato, self.pkamortizacion)
				todook, trash = self.QueryUpdateRecord(sql, conexion = r_cngcmex)
				if not todook:
					Mensajes().Info(self, u"� Problemas al actualizar el contrato (2) !", u"Atenci�n")
					return ""
				
				self.DisplayContrato(contrato)
				
			mes = ("", "Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic")
			meses = ("", "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto",
			         "Septiembre", "Octubre", "Noviembre", "Diciembre")
			letra = self.GetString(row[0]); modulo = self.GetString(row[1])
			engancheq = str(amount_and_cents_with_commas(float(row[2])))
			enganchel = (str(c2p(float(row[2])).texto()))
			superficie = str(amount_and_cents_with_commas(float(row[3])))
			saldoafinanciar = str(amount_and_cents_with_commas(float(row[4])))
			preciom2 = str(amount_and_cents_with_commas(float(row[5])))
			if totaltabla > 0:
				totalapagarq = str(amount_and_cents_with_commas(float(totaltabla) + float(row[2])))
				totalapagarl = (str(c2p(float(totaltabla) + float(row[2])).texto()))
				restoq = str(amount_and_cents_with_commas(float(totaltabla)))
				restol = (str(c2p(float(totaltabla)).texto()))
			else:
				totalapagarq = str(amount_and_cents_with_commas(float(row[6])))
				totalapagarl = (str(c2p(float(row[6])).texto()))
				restoq = str(amount_and_cents_with_commas(float(row[15])))
				restol = (str(c2p(float(row[15])).texto()))
				
			titulo1 = self.GetString(row[7]); lindero1 = self.GetString(row[8])
			titulo2 = self.GetString(row[9]); lindero2 = self.GetString(row[10])
			titulo3 = self.GetString(row[11]); lindero3 = self.GetString(row[12])
			titulo4 = self.GetString(row[13]); lindero4 = self.GetString(row[14])
			profeco = "N&uacute;mero de Autorizaci&oacute;n de la Profeco: PFC.B.E.7/007544-2015"
			
			if plazotabla > 0:
				plazomeses = plazotabla
			else:
				plazomeses = int(row[16])
				
			pagomensualq = str(amount_and_cents_with_commas(float(row[17])))
			pagomensuall = (str(c2p(float(row[17])).texto()))
			fechadia, fechames, fechaano = str(row[18]).split("/")
			if self.GetControl(ID_CHOICEAMORFUNC1FORMADEPAGO).GetSelection() == 0:
				if pagoextra:
					jump1 = ""
					jump2 = "<div><h1></div><br><br><br><br><br><br><br><br><br><br>"
					jump3 = ""
					query = """
					select numerodepago, convert(varchar(10), fechadepago, 103), pagofijo
					from gixamortizaciondetalle
					where fkamortizacion = %s and eliminado = 0 order by fechadepago, numerodepago
					""" % int(self.pkamortizacion)
					sql = (query.replace('\n',' ')).replace('\t',' ')
					cu = r_cngcmex.cursor()
					cu.execute(str(sql))
					rows = fetchall(cu)
					cu.close()

					c2p1 = u"""
					<div style="text-align: justify;"><br>1.- La cantidad de $%s,
					(%s), que manifiesta "LA PROMITENTE VENDEDORA" recibir en
					este acto a su entera satisfacci\xf3n, sirviendo el presente contrato de
					formal recibo por la entrega de dicha cantidad.<br>
					</div>
					<div style="text-align: justify;"><br>2.- El resto de la contraprestaci\xf3n o
					sea la cantidad de $%s, (%s) la deber\xe1 pagar
					"EL(LOS) PROMITENTE(S) COMPRADOR(ES)" mediante %s amortizaciones
					de la siguiente forma:<br><br>
					</div>
					""" % (engancheq, enganchel, restoq, restol, plazomeses)
						
					tableheader = u"""
				        <div style="text-align: right;">
					<span style="font-weight: bold; font-style: italic;">
					No. de Pago&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
					Fecha de Pago&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
					Saldo Inicial&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
					Pago&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
					Saldo Final&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
					</span></div>
					"""
					c2p1 += tableheader
					lines = 3
					sini = float(totaltabla)
					for row in rows:
						numerodepago = str(int(row[0]))
						d, m, a = row[1].split("/")
						fechadepago = "%02d/%s/%04d" % (int(d), mes[int(m)], int(a))
						saldoinicial = str(amount_and_cents_with_commas(sini))
						pagofijo = str(amount_and_cents_with_commas(float(row[2])))
						sfin = sini - float(row[2])
						if sfin < 0:
							sfin = 0.00
							
						saldofinal = str(amount_and_cents_with_commas(sfin))
						sini = sfin
						tag = ''; lines += 1
						if lines > 35:
							tag = '<div><h1></div><br><br><br><br><br><br><br><br><br><br>'
							lines = 0
							
						line = u"""
					        <table
					         style="text-align: left; margin-left: auto; margin-right: auto; width: 990px; height: 10px;"
					         border="0" cellpadding="2" cellspacing="2">
					          <tbody>
					            <tr>
					              <td style="width: 100px; height: 10px; text-align: right;">""" + numerodepago + """</td>
					              <td style="width: 165px; height: 10px; text-align: right;">""" + fechadepago + """</td>
					              <td style="width: 140px; height: 10px; text-align: right;">""" + saldoinicial + """</td>
					              <td style="width: 100px; height: 10px; text-align: right;">""" + pagofijo + """</td>
					              <td style="width: 110px; height: 10px; text-align: right;">""" + saldofinal + """</td>
					            </tr>
					          </tbody>
					        </table>
					        """
						c2p1 += line + tag
						if tag:
							c2p1 += tableheader

					c2p1 += u"""
					<div style="text-align: justify;"><br>3.- Las amortizaciones a
					que se refiere el punto No. 2 de la presente cl\xe1usula se documentan
					mediante pagar\xe9(s) que en este acto suscribe "EL(LOS) PROMITENTE(S)
					COMPRADOR(ES)" quien(es) est\xe1(n) de acuerdo en que dicho(s) t\xedtulo(s)
					de cr\xe9dito sea(n) descontado(s) con terceras personas f\xedsicas o morales
					a elecci\xf3n de "LA PROMITENTE VENDEDORA".<br>
					</div>
					<div style="text-align: justify;"><br>4.- En caso de que "EL(LOS)
					PROMITENTE(S) COMPRADOR(ES)" incurra(n) en mora en el pago de las
					amortizaciones se causar\xe1n intereses moratorios por todo el tiempo que
					se mantenga insoluto dicho pago a una tasa igual al 25 %% anual.<br>
					</div>
					<div style="text-align: justify;"><br>
					Si "LA PROMITENTE VENDEDORA" incurre
					en gastos judiciales o extrajudiciales para realizar la cobranza de los
					pagos vencidos en su caso, "EL(LOS) PROMITENTE(S) COMPRADOR(ES)"
					estar\xe1(n) obligado(s) a reembolsarle \xe9stos gastos a "LA PROMITENTE
					VENDEDORA".<br>
					</div>
					<div style="text-align: justify;"><br>TERCERA.- La falta de pago puntual de
					dos de las amortizaciones mensuales, se considerar\xe1 como incumplimiento
					por parte de "EL(LOS) PROMITENTE(S) COMPRADOR(ES)" al presente
					contrato, por lo que "LA PROMITENTE VENDEDORA" tendr\xe1 la opci\xf3n de
					rescindirlo en los t\xe9rminos que se establecen en la
					cl\xe1usula s\xe9ptima del mismo.<br>
					</div>
					<div style="text-align: justify;"><br>"EL(LOS) PROMITENTE(S)
					COMPRADOR(ES)", se obliga(n) a contribuir con los gastos generales, que
					se originen en la conservaci\xf3n y buen funcionamiento de las \xe1reas de
					uso com\xfan, en la proporci\xf3n que le corresponda, tal como lo establece
					el reglamento del desarrollo. Dicha obligaci\xf3n la adquiere(n) a partir de
					la firma del presente documento. La falta de pago puntual de por lo
					menos dos de los pagos mensuales que anteriormente se detallan, se
					considerar\xe1 como incumplimiento por parte de "EL(LOS) PROMITENTE(S)
					COMPRADOR(ES)", y por lo tanto, "LA PROMITENTE VENDEDORA", tendr\xe1 la
					opci\xf3n de rescindir el presente contrato en los t\xe9rminos que se
					establecen en la cl\xe1usula septima de este contrato.<br><br><br>
					</div><div style="text-align:justify;><span style="font-weight: bold;">CUARTA.- PRECIO PACTADO<br></div>
					
					
					<div style="text-align: justify;"><br>"LAS PARTES" manifiestan que
					el precio pactado en esta operaci\xf3n, es justo y v\xe1lido, por lo tanto en
					este contrato no existe error, ni enriquecimiento ileg\xedtimo de alguna
					de las partes.<br>
					</div>
					"""
				else:
					jump1 = "<div><h1></div><br><br><br><br><br><br><br><br><br><br>"
					jump2 = ""
					jump3 = ""
					c2p1 = u"""
					<div style="text-align: justify;"><br>1.- La cantidad de $%s,
					(%s), manifiesta "LA PROMITENTE VENDEDORA" quien la recibe en
					este acto a su entera satisfacci\xf3n, sirviendo el presente contrato de
					formal recibo por la entrega de dicha cantidad.<br>
					</div>
					<div style="text-align: justify;"><br>2.- El resto de la contraprestaci\xf3n o
					sea la cantidad de $%s, (%s) la deber\xe1(n) pagar
					"EL(LOS) PROMITENTE(S) COMPRADOR(ES)" mediante %s amortizaciones
					mensuales, consecutivas sin intereses del d\xeda %s de
					%s de %s al d\xeda %s de %s de
					%s, cada una por la cantidad de $%s,
					(%s).<br>
					</div>
					<div style="text-align: justify;"><br>3.- Las amortizaciones mensuales a
					que se refiere el punto anterior, se documentan mediante pagar\xe1(s) que en 
					este acto suscribe "EL(LOS) PROMITENTE(S)
					COMPRADOR(ES)" quien(es) est\xe1(n) de acuerdo en que dicho(s) t\xedtulo(s)
					de cr\xe9dito sea(n) descontado(s) con terceras personas f\xedsicas o morales
					a elecci\xf3n de "LA PROMITENTE VENDEDORA".<br>
					</div>
					<div style="text-align: justify;"><br>4.- En caso de que "EL(LOS)
					PROMITENTE(S) COMPRADOR(ES)" incurra(n) en mora en el pago de las
					amortizaciones se causar\xe1n intereses moratorios por todo el tiempo que
					se mantenga insoluto dicho pago a una tasa del 25 %% anual.<br>
					</div>
					
					<div style="text-align: justify;">
					Si "LA PROMITENTE VENDEDORA" incurre
					en gastos judiciales o extrajudiciales para realizar la cobranza de los
					pagos vencidos en su caso, "EL(LOS) PROMITENTE(S) COMPRADOR(ES)"
					estar\xe1(n) obligado(s) a reembolsarle \xe9stos gastos a "LA PROMITENTE
					VENDEDORA".<br><br><br>
					</div>
					<div style="text-align:justify;><span style="font-weight: bold;">TERCERA.- INCUMPLIMIENTO.<br></div>
					<div style="text-align: justify;">La falta de pago puntual de
					dos de las amortizaciones mensuales, se considerar\xe1 como incumplimiento
					por parte de "EL(LOS) PROMITENTE(S) COMPRADOR(ES)" al presente
					contrato, por lo que "LA PROMITENTE VENDEDORA" tendr\xe1 la opci\xf3n de
					rescindirlo en los t\xe9rminos que se establecen en la
					cl\xe1usula s\xe9ptima del mismo.<br>
					</div>
					<div style="text-align: justify;"><br>"EL(LOS) PROMITENTE(S)
					COMPRADOR(ES)", se obliga(n) a contribuir con los gastos generales, que
					se originen en la conservaci\xf3n y buen funcionamiento de las \xe1reas de
					uso com\xfan, en la proporci\xf3n que le corresponda, tal como lo establece
					el reglamento del desarrollo. Dicha obligaci\xf3n la adquiere a partir de
					la firma del presente documento. La falta de pago puntual de por lo
					menos dos de los pagos mensuales que anteriormente se detallan, se
					considerar\xe1 como incumplimiento por parte de "EL(LOS) PROMITENTE(S)
					COMPRADOR(ES)", y por lo tanto, "LA PROMITENTE VENDEDORA", tendr\xe1 la
					opci\xf3n de rescindir el presente contrato en los t\xe9rminos que se
					establecen en la cl\xe1usula s\xe9ptima de este contrato.<br>
					</div>
					<div style="text-align:justify;><span style="font-weight: bold;">CUARTA.- PRECIO PACTADO.<br></div>
					<div style="text-align: justify;">Las partes manifiestan que
					el precio pactado en esta operaci\xf3n, es justo y v\xe1lido, por lo tanto en
					este contrato no existe error, ni enriquecimiento ileg\xedtimo de alguna
					de las partes.<br>
					</div>
					""" % (engancheq, enganchel, restoq, restol, plazomeses, int(di), meses[int(mi)], int(ai),
					       int(df), meses[int(mf)], int(af), pagomensualq, pagomensuall)
			else:
				jump1 = ""
				jump2 = ""
				jump3 = "<div><h1></div><br><br><br><br><br><br><br><br><br><br>"
				d, m, a = str(row[24]).split("/")
				fechaenganche = "%s de %s de %s" % (int(d), meses[int(m)], int(a))
				c2p1 = u"""
				<div><h1></div>
				<br><br><br><br><br><br><br><br><br><br>
				<div style="text-align: justify;"><br>1.- La cantidad de $%s,
				(%s), la deber\xe1 pagar "EL(LOS) PROMITENTE(S) COMPRADOR(ES)"
				mediante un pago \xfanico el d\xeda %s.<br>
				</div>
				<div style="text-align: justify;"><br>TERCERA.- "EL(LOS) PROMITENTE(S)
				COMPRADOR(ES)", se obliga(n) a contribuir con los gastos generales, que
				se originen en la conservaci\xf3n y buen funcionamiento de las \xe1reas de
				uso com\xfan, en la proporci\xf3n que le corresponda, tal como lo establece
				el reglamento del desarrollo. Dicha obligaci\xf3n la adquiere a partir de
				la firma del presente documento. La falta de pago puntual de por lo
				menos dos de los pagos mensuales que anteriormente se detallan, se
				considerar\xe1 como incumplimiento por parte de "EL(LOS) PROMITENTE(S)
				COMPRADOR(ES)", y por lo tanto, "LA PROMITENTE VENDEDORA", tendr\xe1 la
				opci\xf3n de rescindir el presente contrato en los t\xe9rminos que se
				establecen en la cl\xe1usula s\xe9ptima de este contrato.<br><br>
				</div>
				<div style="text-align: justify;"><br>CUARTA.- Las partes manifiestan que
				el precio pactado en esta operaci\xf3n, es justo y v\xe1lido, por lo tanto en
				este contrato no existe error, ni enriquecimiento ileg\xedtimo de alguna
				de las partes.<br>
				</div>
				""" % (engancheq, enganchel, fechaenganche)

			#<div style="font-size:12px;"><span style="font-family: Arial;">
			header = u"""
			<body>
			
			<div style="text-align: right;">
			NUMERO&nbsp; %s A<br>
			</div>
			<div style="text-align: justify;">
			CONTRATO DE PROMESA DE COMPRA VENTA
			QUE CELEBRAN POR UNA PARTE %s REPRESENTADA EN ESTE ACTO POR EL SE\xd1OR
			%s, A QUIEN EN LO SUCESIVO SE LE
			DENOMINAR\xc1 "LA PROMITENTE VENDEDORA", Y POR OTRA PARTE, EL(LOS) SE\xd1OR(ES)
			%s, POR SU PROPIO DERECHO, A QUIEN(ES) EN LO SUCESIVO SE LE(S) DENOMINAR\xc1 "EL(LOS) PROMITENTE(S)
			COMPRADOR(ES)", A AMBOS EN SU CONJUNTO SE LES DENOMINAR\xc1 "LAS PARTES",
			EL CUAL SUJETAN AL CONTENIDO DE LAS SIGUIENTES DECLARACIONES Y CL\xc1USULAS:
			<br>
			</div>
			<div style="text-align: center;"><span style="font-weight: bold;"><br>DECLARACIONES:</span><br>
			</div>
			<br>
			I.- Declara el representante de "LA PROMITENTE VENDEDORA", por conducto de su representante:<br>
			<div style="text-align: justify;">a) Que su representada es una sociedad
			mercantil legalmente constituida mediante escritura p\xfablica n\xfamero
			43,065, otorgada el d\xeda 16 de agosto de 1991, ante la f\xe9 del Licenciado
			Felipe Ignacio V\xe1zquez Aldana Sauza, Notario P\xfablico Suplente Adscrito
			y Asociado n\xfamero 2 de Tlaquepaque, Jalisco, la cual se registr\xf3 bajo
			inscripci\xf3n 311-312 del tomo 410 del Libro Primero del Registro P\xfablico
			de Comercio de Guadalajara, Jalisco.<br>
			</div>
			<div style="text-align: justify;"><br>b)Que su representante cuenta con las facultades
			juridicas necesarias para contratar y obligarla en los terminos de este contrato,
			manifestando bajo protesta de decir verdad, que dichas facultades no le han sido revocadas,
			limitadas, o modificadas en forma alguna.<br>
			</div>
			<div style="text-align: justify;"><br>c) Que su representada se encuentra inscrita
			en el Registro Federal de Contribuyentes bajo la Clave: APR910816FJ3.<br>
			</div>
			<div style="text-align: justify;"><br>d) Que tiene inter\xe9s en vender a "EL(LOS) PROMITENTE(S) COMPRADOR(ES)", 
			el inmueble que acontinuaci\xf3n se describe:<br>
			</div>
			<div style="text-align: justify;"><br>Lote marcado con la Letra %s del
			M\xf3dulo %s, perteneciente al Desarrollo Campestre Recreativo
			conocido como "%s", ubicado en el municipio de %s,
			%s, dicho inmueble tiene una Superficie de %s m2.
			y las siguientes medidas y linderos:<br>
			</div>
			<br>
			%s :&nbsp;&nbsp;&nbsp; %s<br>
			%s :&nbsp;&nbsp;&nbsp; %s<br>
			%s :&nbsp;&nbsp;&nbsp; %s<br>
			%s :&nbsp;&nbsp;&nbsp; %s<br>
			(en lo sucesivo "EL INMUEBLE").<br>
			<div style="text-align: justify;">
			<br>
			e) Que "EL INMUEBLE" se encuentra libre de todo gravamen, limitacion
			de dominio y de cualquier responsabilidad, al corriente en el pago del impuesto predial y demas
			contribuciones que le corresponden, as\xed como de los servicios con que cuentan.<br>
			</div>
			<div style="text-align: justify;"><br>f) Que ha ofrecido en venta "EL INMUEBLE", y que "EL(LOS)
			PROMITENTE(S) COMPRADOR(ES)" ha(n) tomado y aceptado en todos sus t\xe9rminos, la oferta realizada
			de conformidad con los dispuesto en el presente Contrato.
			<br></div>			
			AQUIESTABA
			<div style="text-align: justify;"><br>II.- Declara "El(LOS) RPOMINENTE(S) COMPRADOR(ES)":
			</div>
			<div style="text-align:justify;">a) Ser persona(s), f\xedsica(s), de nacionalidad mexicana, mayor(es) de edad,
			y que cuenta(n) con la capacidad jur\xeddica para contratarse en t\xe9rminos del presente instrumento.
			<br></div>
			<div style="text-align:justify;"><br>b) Que se encuentra(n) inscrito(s) en el Registro Federal de Contribuyentes
			bajo Clave(s) %s:
			</div>
			JUMP3
			JUMP3
			<div style="text-align:justify;"><br>c) Que en su deseo de adquirir de "LA PROMITENTE VENDEDORA" "EL INMUEBLE",
			bajo los t\xe9rminos y condiciones que m\xe1s adelante se establecen.
			<br></div>
			<div style="text-align:justify;"><br>III.- Declaran "LAS PARTES", la primera por conducto de su representante:
			<br></div>
			<div style="text-align: justify;">a) Que reconocen como ciertas las Declaraciones anteriores.
			</div>
			<div style="text-align: justify;"><br>b) Que se reconocen la personalidad con la que comparecen a la firma de este Contrato.
			</div>
			<div style="text-align: justify;"><br>c) Que comparecen en este acto al otorgar su consentimiento,
			manifestando conocer plenamente el sentido del presente Contrato, no existiendo dolo, mala fe, enriquecimiento ilegitimo,
			lesi\xf3n o error que pudiera invalidarlo.
			<br></div>
			<div style="text-align: justify;"><br>En base a las Declaraciones que anteceden, "LAS PARTES" convienen en celebrar el presente
			CONTRATO de Promesa de Compraventa, de conformidad con las siguientes,
			<br></div>
			<br>
			<div style="text-align: center;"><span style="font-weight: bold;">CL\xc1USULAS:<br></span>
			</div>
			<div style="text-align:justify;><span style="font-weight: bold;">PRIMERA.-OBJETO<br></div>
			<div style="text-align:justify;">Por virtud del presente Instrumento "LA PROMITENTE VENDEDORA" promete vender "EL INMUEBLE" "ad corpus" a
			"EL(LOS) PROMITENTE(S) COMPRADOR(ES)" quien(es) se obliga(n) a comprarlo, y pagar el precio acordado por "LAS PARTES", bajo los t\xe9rminos
			y condiciones que m\xe1s adelante se establecen. 
			<br></div>
			<div style="text-align:justify;><span style="font-weight: bold;">SEGUNDA.- PRECIO Y FORMA DE PAGO<br></div>
			
			<div style="text-align: justify;">El precio que "LAS PARTES"
			han pactado por concepto de contraprestaci\xf3n asciende a la cantidad de
			$%s, (%s), el cual se establece por todo
			el "INMUEBLE" materia de Contrato, ya que la presente operaci\xf3n se
			realiza "ad corpus", por lo que en el supuesto de que al verificarse la
			medici\xf3n del mismo, \xe9ste resulte de mayor o menor superficie, el
			precio no sufrir\xe1 alteraci\xf3n, tal como disponen los art\xedculos 1858 y
			1860 del C\xf3digo Civil para el estado de Jalisco. "LAS PARTES" convienen en que el precio ser\xe1 pagado de la siguiente forma:<br>
			</div>
			
			    %s
			    
			
			<div><br><br></div>
			<div style="text-align:justify;><span style="font-weight: bold;">QUINTA.- ESCRITURACI\xd3N<br></div>
			<div style="text-align: justify;">"LA PROMITENTE VENDEDORA" se obliga a escriturar a "EL(LOS) PROMITENTE(S) COMPRADOR(ES)"
			"EL INMUEBLE", una vez que este(os) haya(n) liquidado
			la totalidad del precio de venta, y ser\xe1n a cargo de "EL(LOS) PROMITENTE(S) COMPRADOR(ES)" 
			todos los gastos que genera dicha transmisi\xf3n de propiedad,
			tanto en el otorgamiento del presente Contrato como en la escritura
			p\xfablica correspondiente, como son Impuesto Sobre Transmisi\xf3n
			Patrimonial, derechos del Registro P\xfablico de la Propiedad, Aval\xfao y
			honorarios notariales o cualquier otro gasto, impuesto o derecho que se
			cause con la propia escritura, siendo \xfanicamente a cargo de "LA PROMITENTE
			VENDEDORA" &nbsp;el impuesto &nbsp;sobre la &nbsp;Renta &nbsp;que &nbsp;
			se &nbsp;llegase &nbsp;a causar por la
			venta &nbsp;de &nbsp;"EL INMUEBLE"; &nbsp;asimismo "EL(LOS) PROMITENTE(S) COMPRADOR((ES)",
			en su caso,deber\xe1(n) estar al
			corriente en las cuotas condominales y se obliga(n) a entregar toda la
			documentaci\xf3n que sea necesaria al Fedatario P\xfablico correspondiente
			para el otorgamiento de la referida escritura.<br></div>
			<div style="text-align: justify;"><br>"LA PROMITENTE VENDEDORA"
			girar\xe1 instrucci\xf3n al Notario P\xfablico de su elecci\xf3n 30 (treinta) d\xedas
			naturales despu\xe9s de liquidado el precio de operaci\xf3n, misma que tendr\xe1
			una vigencia de 45 (cuarenta y cinco) d\xedas naturales para que "EL(LOS) PROMITENTE(S)
			COMPRADOR(ES) acuda(n) ante Dicho Notario, presente(n) su documentaci\xf3n y firme(n)
			la escritura correspondiente.&nbsp; En caso de no formalizar la
			escritura p\xfablica de que se trata en el plazo de la vigencia de la
			instrucci\xf3n, "LA PROMITENTE VENDEDORA" podr\xe1 girar nueva instrucci\xf3n con un
			costo administrativo a cargo de "EL(LOS) PROMITENTE(S) COMPRADOR(ES)" de $ 100.00 ( CIEN
			PESOS 00/100 M.N.) por cada d\xeda transcurrido desde la fecha de
			caducidad de la primera instrucci\xf3n y hasta la fecha de la nueva
			instrucci\xf3n.<br><br>
			</div>			
			JUMP1
			<div style="text-align:justify;><span style="font-weight: bold;">SEXTA.- ENTREGA DE LA POSESI\xd3N DE "EL INMUEBLE".<br></div>
			<div style="text-align: justify;">La posesi\xf3n material de "EL
			INMUEBLE", la entrega en este acto "LA PROMITENTE VENDEDORA" a "EL(LOS) PROMITENTE(S)
			COMPRADOR(ES)", a su entera satisfacci\xf3n. En caso de rescisi\xf3n del
			presente contrato "EL(LOS) PROMITENTE(S) COMPRADOR(ES)", deber\xe1(n)
			restituir la posesi\xf3n de dicho inmueble a "LA PROMITENTE VENDEDORA",
			dentro de un plazo no mayor a 5 d\xedas contados a partir de la fecha en
			que ocurra la rescisi\xf3n. "LAS PARTES" convienen expresamente que en caso
			de incumplimiento de "EL(LOS) PROMITENTE(S) COMPRADOR(ES)" en cuanto a
			la restituci\xf3n de la posesi\xf3n dentro del plazo convenido, pagar\xe1(n) a
			"LA PROMITENTE VENDEDORA" por concepto de pena convencional una
			cantidad equivalente a 9 veces el salario m\xednimo vigente en esta
			ciudad de Guadalajara, Jalisco, por cada d\xeda de retraso en la entrega de dicha posesi\xf3n.<br><br><br><br>
			</div>
			JUMP2
			<div style="text-align:justify;><span style="font-weight: bold;">SEPTIMA.- PENA CONVENCIONAL.<br></div>
			<div style="textrm-align: justify;">En caso de incumplimiento
			de alguna de las obligaciones que asumen "LAS PARTES" en el presente
			Contrato, la parte que incumpla pagar\xe1 a la otra por concepto de pena
			convencional una cantidad equivalente al 25%s calculado sobre el monto
			total del precio pactado. En caso de que el incumplimiento fuere por
			parte de "EL(LOS) PROMITENTE(S) COMPRADOR(ES)", "LA PROMITENTE
			VENDEDORA" podr\xe1 optar por rescindir el presente contrato sin necesidad
			de declaraci\xf3n judicial previa, mediante simple notificaci\xf3n hecha por
			escrito.<br><br><br><br>
			</div>
			JUMP3
			<div style="text-align:justify;><span style="font-weight: bold;">OCTAVA.- CESI\xd3N.<br></div>
			<div style="text-align: justify;">En caso de que "EL(LOS)
			PROMITENTE(S) COMPRADOR(ES)", quisiere(n) ceder los derechos del
			presente contrato, deber\xe1 de notificarlo por escrito a "LA PROMITENTE
			VENDEDORA" y adem\xe1s se obliga(n) a pagarle a esta, una cantidad
			equivalente al 5%s sobre el valor total de la correspondiente cesi\xf3n de
			derechos. Sin el consentimiento expreso por escrito de "LA PROMITENTE
			VENDEDORA", la cesi\xf3n de derechos no surtir\xe1 efecto legal alguno.<br><br><br><br>
			</div>
			<div style="text-align:justify;><span style="font-weight: bold;">NOVENA.- IMPUESTOS PREDIAL DE "EL INMUEBLE".<br></div>
			<div style="text-align: justify;">"EL(LOS) PROMITENTE(S)
			COMPRADOR(ES)" se obliga(n) a pagar a partir de esta fecha el impuesto
			predial correspondiente a "EL INMUEBLE" y "LA PROMITENTE VENDEDORA" se obliga a entregar al
			corriente el saldo del impuesto.<br><br><br><br>
			</div>
			<div style="text-align:justify;><span style="font-weight: bold;">DECIMA.- CONSTRUCCION DE "EL INMUEBLE".<br></div>
			<div style="text-align: justify;">"EL(LOS) PROMITENTE(S)
			COMPRADOR(ES)", se obliga(n) a acatar las caracter\xedsticas de obra que
			se\xf1ale la Direcci\xf3n de Obras P\xfablicas del
			H. Ayuntamiento respectivo,
			as\xed como las limitaciones que se\xf1ala el
			reglamento del Desarrollo,
			respecto a la construcci\xf3n que edifiquen sobre "EL INMUEBLE" misma que
			deber\xe1 ser recreativa campestres.<br><br><br><br><br><br>
			</div>
			<div style="text-align:justify;><span style="font-weight: bold;">DECIMO PRIMERA.- REGIMEN DE PROPIEDAD EN CONDOMINIO.<br></div>
			<div style="text-align: justify;">"LAS PARTES" convienen
			en que "LA PROMITENTE VENDEDORA" podr\xe1, sin requerir el consentimiento
			de "EL(LOS) PROMITENTE(S) COMPRADOR(ES)", sujetar "EL INMUEBLE" al Regimen de Propiedad y Condominio.
			En caso de que "EL INMUEBLE" se afecte al R\xe9gimen de Propiedad y Condominio "LA
			PROMITENTE VENDEDORA", se obliga a transmitir a "EL(LOS) PROMITENTE(S)
			COMPRADOR(ES)", el mismo conjuntamente con la acci\xf3n de dominio
			indivisa sobre las \xe1reas comunes que corresponda al lote condominal.
			&nbsp; por su cuenta "EL(LOS) PROMITENTE(S) COMPRADOR(ES)" se obliga(n) a cumplir y acatar
			en todos sus t\xe9rminos el
			reglamento de administraci\xf3n del condominio.
			"El inmueble" deber\xe1 estar libre de gravamen, al corriente de sus
			obligaciones fiscales y "LA PROMITENTE VENDEDORA" se obligar\xe1 al
			saneamiento para el caso de evicci\xf3n en los t\xe9rminos de Ley.<br><br><br>
			</div>
			<div style="text-align:justify;><span style="font-weight: bold;">DECIMA SEGUNDA.- GASTOS.<br></div>
			<div style="text-align: justify;">Los gastos
			ocasionados por el presente contrato, as\xed como los gastos, impuestos,
			derechos y honorarios ocasionados por la escritura de compra venta
			definitiva ser\xe1n a cargo de "EL(LOS) PROMITENTE(S) COMPRADOR(ES)". El
			impuesto sobre la renta ser\xe1 pagado por "LA PROMITENTE VENDEDORA".<br><br><br>
			</div>
			<div style="text-align:justify;><span style="font-weight: bold;">DECIMA TERCERA.- TRIBUNALES COMPETENTES<br></div>
			<div style="text-align: justify;">Para la
			interpretaci\xf3n y cumplimiento del presente contrato "LAS PARTES" se
			someten expresamente a los Tribunales de esta ciudad de Guadalajara,
			Jalisco, renunciando al fuero presente o futuro que por cualquier causa
			pudiere corresponderles.<br><br><br><br><br>
			</div>
			<div style="text-align:justify;><span style="font-weight: bold;">D\xc9CIMA CUARTA.- DEPOSITARIO DE "EL INMUEBLE".<br></div>
			<div style="text-align: justify;">En el caso de que "LA
			PROMITENTE VENDEDORA" exigiere judicialmente, el cumplimiento de las
			obligaciones a cargo de "EL(LOS) PROMITENTE(S) COMPRADOR(ES)", \xe9ste(os)
			conviene(n) en que no ser\xe1(n) depositario(s) de "EL INMUEBLE" objeto de este
			contrato, y por lo tanto se obliga a entregar a "LA PROMITENTE
			VENDEDORA" al depositario que \xe9sta nombre dicho inmueble; siendo
			responsable(s) de cualquier da\xf1o o perjuicio que el inmueble sufra
			mientras el depositario no tome posesi\xf3n de su cargo.<br>
			</div>
			JUMP1
			<div style="text-align: justify;"><br>Todas las prestaciones derivadas de
			este contrato, deber\xe1 pagarlas y cumplirlas "EL(LOS) PROMITENTE(S)
			COMPRADOR(ES)" en la Ciudad de %s, %s, en las oficinas de
			la empresa ubicadas en %s, o en las que designe con
			posterioridad, mediante aviso dado por escrito a "EL(LOS) PROMITENTE(S)
			COMPRADOR(ES)". El cambio de domicilio, los emplazamientos y dem\xe1s diligencias judiciales o extrajudiciales
			, se practicar\xe1n en el domicilio se\xf1alado en la presente cl\xe1usula<br><br><br><br><br>
			</div>
			<br>
			JUMP1
			<div style="text-align:justify;><span style="font-weight: bold;">DECIMA QUINTA.- <br></div>
			<div style="text-align: justify;">Para todos los efectos judiciales relativos al presente contrato, el acreditado
			se\xf1ala como su domicilio %s en la Ciudad de %s, %s.  Mientras 
			"EL(LOS) PROMINENTES COMPRADOR(ES)" no notifiquen por escrito a la "PROMINENTE VENDEDORA" el cambio de domicilio, 
			los emplazamientos y demas diligencias judiciales o extrajudiciales, se practicar\xe1n en el domicilio se\xf1alado en la presente cl\xe1usula.
			<br><br>
			</div>
			JUMP2
			JUMP3
			
			<div style="text-align: justify;"><br>
			Enteradas "LAS PARTES" del valor,
			alcances y consecuencias legales del presente contrato, lo ratifican y
			firman por duplicado en la Ciudad de Guadalajara, Jalisco, a los
			%s d\xedas del mes de %s de %s.<br><br><br>
			</div>
			<div style="text-align: center;"><br>"LA PROMITENTE VENDEDORA"<br>
			<br><br>
			_______________________________________________<br>
			%s<br>
			REPRESENTADA POR EL %s<br>
			<br><br><br>
			"EL(LOS) PROMITENTE(S) COMPRADOR(ES)"<br>
			<br><br>
			_______________________________________________<br>
			%s<br>
			<br><br><br>
			</div>n 
			<table
			style="text-align: left; width: 100px; margin-left: auto; margin-right: auto;"
			border="0" cellpadding="2" cellspacing="2">
			<tbody>
			<tr>
			<td style="vertical-align: top; text-align: center;">TESTIGO<br>
			<br><br>
			__________________________________________<br>
			Gerente de Ventas <br>
			Juan Pablo Lares Monraz
			</td>
			<td style="vertical-align: top; text-align: center; width: 100px;"><br>
			</td>
			<td style="vertical-align: top; text-align: center;">TESTIGO<br>
			<br><br>
			__________________________________________<br>
			%s
			</td>
			</tr>
			</tbody>
			</table>
			** N&uacute;mero de Autorizaci&oacute;n de la Profeco: PFC.B.E.7/007544-2015 **
			</body>
			""" % (contrato, razonsocial, representantelegal, nombrecliente, letra, modulo, desarrollo, dciudad, destado,
			       superficie, titulo1, lindero1, titulo2, lindero2, titulo3, lindero3, titulo4, lindero4, rfccliente, totalapagarq,
			       totalapagarl, c2p1, "%", "%", eciudad, eestado,
			       edomicilio,  domiciliocliente, ciudadcliente, estadocliente, int(fechadia), meses[int(fechames)],
			       int(fechaano), razonsocial, representantelegal, nombrecliente, nombrevendedor)
			
			jump1 = ""
			jump2 = ""
			jump3 = ""
			
			h = (((((header.replace('\n',' ')).replace('\t',' ')).replace('JUMP1', jump1)).replace('JUMP2', jump2).replace('JUMP3', jump3))).replace('AQUIESTABA', '')
			
			backgnd = ""
			membretada = True
			if not membretada:
				backgnd = "background-image: url(images/ContratoPinares.pdf);"
				
			bgnd = """
			<style>
			@page {
			  size: letter;
			  margin: 2cm;
			  %s
			}
			</style>
			""" % backgnd

			#jump = '<style>@media print {h1 {page-break-before:always}}</style>'
			jump = '<style>@media print {h1 {page-break-before:always}} @page { margin-top: 7cm; margin-left: 2cm; margin-right: 2cm; margin-bottom: 2cm;}</style>'
			#profeco = "N&uacute;mero de Autorizaci&oacute;n de la Profeco: PFC.B.E.7/007544-2015"
			html = '<html>' + bgnd + '<head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" />' + jump + \
			     '</head><body>' + h + '</body></html>'
			return html, contrato
		else:
			cu.close()
			return "", 0
	    
	def OnImprimirTabla(self, evt):
		self.pkamortizacion = self.GetIdentity()
		if self.pkamortizacion:
			if self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOINMUEBLE).GetValue():
				if self.cambio:
					if Mensajes().YesNo(self, u"Para imprimir es necesario guardar la informaci�n.\n\n" \
					                    u"� Desea guardar la informaci�n ahora ?", u"Confirmaci�n"):
						self.Guardar()
						self.ImprimirTabla()
				else:
					self.ImprimirTabla()
			else:
				Mensajes().Info(self, u"� Asigne un inmueble !", u"Atenci�n")
		else:
			index = self.GetControl(ID_CHOICEAMORFUNC1ETAPA).GetSelection()
			if index < 0:
				Mensajes().Info(self, u"� No hay nada que imprimir !", u"Atenci�n")
			else:
				codigolote = self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOINMUEBLE).GetValue()
				if codigolote:
					if Mensajes().YesNo(self, u"Para imprimir es necesario guardar la informaci�n.\n\n" \
						            u"� Desea guardar la informaci�n ahora ?", u"Confirmaci�n"):
						self.Guardar()
						self.pkamortizacion = self.GetIdentity()
						self.ImprimirTabla()
				else:
					Mensajes().Info(self, u"� No hay nada que imprimir !", u"Atenci�n")

	def ImprimirTabla(self):
		try:
			pisa
		except:
			Mensajes().Info(self, u"� Por favor instale el m�dulo xhtml2pdf (pisa) !", u"Aviso")
			return
		try:
			aux = self.GetIdentity()
			pkamortizacion = int(aux)
			query = """
		        select convert(varchar(10), fechadepago, 111), numerodepago, pagofijo
		        from gixamortizaciondetalle
		        where fkamortizacion = %s and eliminado <> 1 and pagado <> 1
		        order by fechadepago, numerodepago
		        """ % pkamortizacion
			cu = r_cngcmex.cursor()
			cu.execute(self.PreparaQuery(query))
			rows = fetchall(cu)
			cu.close()
			aux = self.GetControl(ID_TEXTCTRLAMORFUNC1PLAZOMESES).GetValue()
			plazo = int(aux)
			continua = True
			if self.GetControl(ID_CHOICEAMORFUNC1FORMADEPAGO).GetSelection() == 0:
				if not rows:
					Mensajes().Info(self, u"Si la forma de pago es a cr�dito genere la tabla\n" \
					                u"de pagos/amortizaci�n.\n\nSi es de contado cambie la forma de pago.",
					                u"Verifique la forma de pago")
					return
					
				if plazo < 1:
					Mensajes().Info(self, u"Si la forma de pago es a cr�dito revise el plazo.\n" \
					                u"Si es de contado cambie la forma de pago.",
					                u"Verifique la forma de pago")
					return
			else:
				if rows:
					Mensajes().Info(self, u"Si la forma de pago es de contado elimine la tabla\n" \
					                u"de pagos/amortizaci�n.\n\nSi es a cr�dito cambie la forma de pago.",
					                u"Verifique la forma de pago")
					return
				
				if plazo > 0:
					Mensajes().Info(self, u"Si la forma de pago es de contado revise el plazo.\n" \
					                u"Si es a cr�dito cambie la forma de pago.",
					                u"Verifique la forma de pago")
					return
				
				Mensajes().Info(self, u"No puede imprimir una tabla de pagos/amortizaci�n\n" \
				                u"cuando la forma de pago es de contado.\n\n"
			                        u"Si es a cr�dito cambie la forma de pago.",
			                        u"Verifique la forma de pago")
				return
			
			wx.BeginBusyCursor()
			gridcontenthtml, cuenta = self.GetHtmlTabla()
			if gridcontenthtml:
				archivo = "Tabla%s.pdf" % self.pkamortizacion
				gridcontenthtml = gridcontenthtml.encode("utf-8")
				pdf = pisa.CreatePDF(cStringIO.StringIO(gridcontenthtml), file(archivo, "wb"))
				if not pdf.err:
					try:
						pdf.dest.close()
					except:
						warnings.warn("<<pdf.dest.close() no se pudo.>>")
					try:
						os.startfile(str(archivo))
					except:
						commmand_line = "open %s" % archivo
						p = subprocess.Popen(commmand_line, shell = True)
						pid, sts = os.waitpid(p.pid, 0)						
						#os.system("open %s" % archivo)
						
				wx.EndBusyCursor()
				
			elif cuenta:
				archivo = "Tabla%s.pdf" % self.pkamortizacion
				try:
					os.startfile(str(archivo))
				except:
					commmand_line = "open %s" % archivo
					p = subprocess.Popen(commmand_line, shell = True)
					pid, sts = os.waitpid(p.pid, 0)						
					#os.system("open %s" % archivo)
					
				wx.EndBusyCursor()
			else:
				wx.EndBusyCursor()
				Mensajes().Info(self, u"� No hay tabla de pagos/amortizaci�n !", u"Atenci�n")
				
		except:
			wx.EndBusyCursor()
			Mensajes().Info(self, u"� Se presento un problema al imprimir la tabla !", u"Atenci�n")

	def GetHtmlTabla(self):
		query = """
		select sum(abonocapital) + sum(interes) from gixamortizaciondetalle where fkamortizacion = %s and eliminado = 0
		""" % int(self.pkamortizacion)
		sql = (query.replace('\n',' ')).replace('\t',' ')
		cu = r_cngcmex.cursor()
		cu.execute(str(sql))
		dato = fetchone(cu)
		cu.close()
		abonointeres = 0
		if dato is not None:
			abonointeres = float(dato[0])
		
		query = """
		select rtrim(ltrim(i.iden2)) + '-' + rtrim(ltrim(i.iden1)), a.enganchec, i.superficie, a.saldoafinanciar, i.preciopormetro,
		case a.plazomeses when 0 then (a.saldoafinanciar + a.enganchec) else ((a.pagomensualfijo * a.plazomeses) + a.enganchec) end,
		a.cuenta
		from gixamortizacion a
		join INMUEBLE i on a.fkinmueble = i.codigo
		where a.pkamortizacion = %s
		""" % int(self.pkamortizacion)
		sql = (query.replace('\n',' ')).replace('\t',' ')
		cu = r_cngcmex.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row is not None:
			a = u"�"; e = u"�"; i = u"�"; o = u"�"; u = u"�"
			meses = ("", "Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic")
			lote = self.GetString(row[0]); enganche = str(amount_and_cents_with_commas(float(row[1])))
			superficie = str(amount_and_cents_with_commas(float(row[2])))
			saldoafinanciar = str(amount_and_cents_with_commas(float(row[3])))
			preciom2 = str(amount_and_cents_with_commas(float(row[4])))
			if abonointeres:
				totalapagar = str(amount_and_cents_with_commas(abonointeres + float(row[1])))
			else:
				totalapagar = str(amount_and_cents_with_commas(float(row[5])))
				
			cuenta = int(row[6])
			#if cuenta:
				#return "", cuenta
			
			header = """
			<table
			 style="width: 993px; height: 200px; text-align: left; margin-left: auto; margin-right: auto;"
			 border="0" cellpadding="2" cellspacing="2">
			  <tbody>
			    <tr>
			      <td style="text-align: center;">
			      <IMG SRC="images/LogoPinares2009.jpg" NAME="Logo" ALIGN=LEFT WIDTH=213 HEIGHT=160 BORDER=0>
			      </td>
			    </tr>
			  </tbody>
			</table>
			<div style="text-align: right;"><big><big>&nbsp;<span
			 style="font-weight: bold;">Id de la Tabla:&nbsp;""" + str(self.pkamortizacion) + """</big></big>
			 <br>%date%&nbsp;%time%&nbsp;&nbsp;(%page%)</span><br>
			</div>
			<hr style="width: 100%; height: 2px;">
			<table style="text-align: left; width: 985px; height: 82px; margin-left: auto; margin-right: auto;"
			border="0" cellpadding="2" cellspacing="2">
			  <tbody>
			    <tr>
			      <td></td>
			      <td style="text-align: right; width: 190px;"><big>Lote:</big></td>
			      <td style="text-align: left; font-weight: bold; width: 183px;"><big>""" + str(lote) + """</big></td>
			      <td style="text-align: right; width: 219px;"><big>Enganche:</big></td>
			      <td style="font-weight: bold; width: 357px;"><big>""" + str(enganche) + """</big></td>
			      <td></td>
			    </tr>
			    <tr>
			      <td></td>
			      <td style="text-align: right; width: 190px;"><big>Superficie:</big></td>
			      <td style="text-align: left; font-weight: bold; width: 183px;"><big>""" + str(superficie) + """</big></td>
			      <td style="text-align: right; width: 219px;"><big>Saldo a Financiar:</big></td>
			      <td style="font-weight: bold; width: 357px"><big>""" + str(saldoafinanciar) + """</big></td>
			      <td></td>
			    </tr>
			    <tr>
			      <td></td>
			      <td style="text-align: right; width: 190px;"><big>Precio M2:</big></td>
			      <td style="text-align: left; font-weight: bold; width: 183px;"><big>""" + str(preciom2) + """</big></td>
			      <td style="text-align: right; width: 219px;"><big>Total a Pagar:</big></td>
			      <td style="font-weight: bold; width: 357px"><big>""" + str(totalapagar) + """</big></td>
			      <td></td>
			    </tr>
			  </tbody>
			</table>
			<hr style="width: 100%; height: 1px;" noshade="noshade">
			"""
			header = header.replace('%date%',self.GetDate())
			header = header.replace('%time%',self.GetTime())
			
			query = """
			select numerodepago, convert(varchar(10), fechadepago, 103), saldoinicial, pagofijo, abonocapital, interes, saldofinal
			from gixamortizaciondetalle where fkamortizacion = %s and eliminado = 0 order by fechadepago, numerodepago
			""" % int(self.pkamortizacion)
			sql = (query.replace('\n',' ')).replace('\t',' ')
			cu = r_cngcmex.cursor()
			cu.execute(str(sql))
			rows = fetchall(cu)
			cu.close()
			detail, footer = "", ""
			lines, page, pages = 0, 1, 1
			if rows:
				header = header + """
				<div style="text-align: right;">
				 <span style="font-weight: bold; font-style: italic;">
				 No. de Pago&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
				 Fecha de Pago&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
				 Saldo Inicial&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
				 Pago&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
				 Abono a Capital&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
				 Intereses&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
				 Saldo Final&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
				 </span></div>
				 """
				aux = len(rows) / 35.0
				pages = int(aux)
				if (aux - int(aux)) > 0:
					pages += 1
					
				for row in rows:
					numerodepago = str(int(row[0]))
					d, m, a = row[1].split("/")
					fechadepago = "%02d/%s/%04d" % (int(d), meses[int(m)], int(a))
					saldoinicial = str(amount_and_cents_with_commas(float(row[2])))
					pagofijo = str(amount_and_cents_with_commas(float(row[3])))
					abonocapital = str(amount_and_cents_with_commas(float(row[4])))
					interes = str(amount_and_cents_with_commas(float(row[5])))
					saldofinal = str(amount_and_cents_with_commas(float(row[6])))
					tag = ''; lines += 1
					if lines > 34:
						tag = '<div><h1></div>'
						lines = 0
						page += 1
						
					line = """
					<table
					 style="text-align: left; margin-left: auto; margin-right: auto; width: 990px; height: 10px;"
					 border="0" cellpadding="2" cellspacing="2">
					  <tbody>
					    <tr>
					      <td style="width: 50px; height: 10px; text-align: right;">""" + numerodepago + """</td>
					      <td style="width: 140px; height: 10px; text-align: right;">""" + fechadepago + """</td>
					      <td style="width: 110px; height: 10px; text-align: right;">""" + saldoinicial + """</td>
					      <td style="width: 80px; height: 10px; text-align: right;">""" + pagofijo + """</td>
					      <td style="width: 100px; height: 10px; text-align: right;">""" + abonocapital + """</td>
					      <td style="width: 100px; height: 10px; text-align: right;">""" + interes + """</td>
					      <td style="width: 100px; height: 10px; text-align: right;">""" + saldofinal + """</td>
					    </tr>
					  </tbody>
					</table>
					"""
					detail += line + tag
					if tag:
						detail += header.replace('%page%',str(page) + ' de ' + str(pages))
					
				footer = ""
			else:
				return "", 0
			
			h = ((header.replace('\n',' ')).replace('\t',' ')).replace('%page%','1 de %s' % pages)
			d = (detail.replace('\n',' ')).replace('\t',' ')
			f = (footer.replace('\n',' ')).replace('\t',' ')
			
			jump = '<style>@media print {h1 {page-break-before:always}}</style>'
			
			html = '<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" />' + jump + \
			     '</head><body>' + h + d + f + '</body></html>'
			return html, 0
		else:
			return "", 0
		
	#def OnElegirCliente(self, evt):   # para hacer reestructuras
		#cu = r_cngcmex.cursor()
		#cu.execute(str("select codigo from cuenta order by codigo"))
		#rows = fetchall(cu)
		#cu.close()
		#for row in rows:
			#query = """
			#update cuenta set saldo = (select sum(saldo) from documento where fk_cuenta = %s)
			#where codigo = %s
			#""" % (int(row[0]), int(row[0]))
			#sql = (query.replace('\n',' ')).replace('\t',' ')
			#todook, trash = self.QueryUpdateRecord(sql, conexion = r_cngcmex)
			#if not todook:
				#Mensajes().Info(self, u"� No se grab� la informaci�n !", u"Cuenta")
		
		
		#d, m, a = 3, 6, 2012; cuenta = 2173; relacion = 0; pagos = 48; cantidad = 2387.48
		#cu = r_cngcmex.cursor()
		#cu.execute(str("select max(codigo) from documento"))
		#row = fetchone(cu)
		#documento = int(row[0])
		#cu.execute(str("select max(codigo) from movimiento"))
		#row = fetchone(cu)
		#movimiento = int(row[0])
		#cu.close()
		#for ciclo in range(1, pagos + 1):
			#documento += 1
			#if m == 12:
				#m = 1; a += 1
			#else:
				#m += 1
				
			#fecha = "%04d/%02d/%02d" % (int(a), int(m), int(d))
			#query = """
			#insert into documento
			#(codigo, fechadeelaboracion, fechadevencimiento, fechadevencimientovar, saldo, cargo, abono, fk_cuenta, fk_tipo)
			#values (%s, convert(varchar(10), getdate(), 111), '%s', '%s', %s, %s, 0.00, %s, 2)
			#""" % (documento, fecha, fecha, cantidad, cantidad, cuenta)
			#sql = (query.replace('\n',' ')).replace('\t',' ')
			#todook, trash = self.QueryUpdateRecord(sql, conexion = r_cngcmex)
			#if not todook:
				#Mensajes().Info(self, u"� No se grab� la informaci�n !", u"Documentos")

			#movimiento += 1; relacion += 1
			#relaciondepago = "%s/%s" % (relacion, pagos)
			#query = """
			#insert into movimiento
			#(codigo, cantidad, fecha, relaciondepago, cargoabono, fk_documento, fk_tipo)
			#values (%s, %s, convert(varchar(10), getdate(), 111), '%s', 'C', %s, 2)
			#""" % (movimiento, cantidad, relaciondepago, documento)
			#sql = (query.replace('\n',' ')).replace('\t',' ')
			#todook, trash = self.QueryUpdateRecord(sql, conexion = r_cngcmex)
			#if not todook:
				#Mensajes().Info(self, u"� No se grab� la informaci�n !", u"Atenci�n")

	def OnElegirCliente(self, evt):
		cu = r_cngcmex.cursor()
		cu.execute(str("select codigo, nombre from CLIENTE order by nombre"))
		rows = fetchall(cu)
		cu.close()
		if rows:
			dlg = GixTablasAmortizacionFunc2(self, clienteelegido = self.ClienteElegido)
			dlg.CenterOnParent()
			dlg.ShowModal()
		else:
			Mensajes().Info(self, u"� No se encontraron clientes !", u"Atenci�n")
			
	def ClienteElegido(self, codigocliente, nombrecliente):
		datoini = self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOCLIENTE).GetValue()
		self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOCLIENTE).SetValue(str(codigocliente))
		self.GetControl(ID_TEXTCTRLAMORFUNC1NOMBRECLIENTE).SetValue(nombrecliente)
		datofin = self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOCLIENTE).GetValue()
		self.ValidaCambio(datoini, datofin)
		
	def OnLimpiarCliente(self, evt):
		datoini = self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOCLIENTE).GetValue()
		self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOCLIENTE).SetValue("")
		self.GetControl(ID_TEXTCTRLAMORFUNC1NOMBRECLIENTE).SetValue("")
		datofin = self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOCLIENTE).GetValue()
		self.ValidaCambio(datoini, datofin)

	def OnElegirVendedor(self, evt):
		cu = r_cngcmex.cursor()
		cu.execute(str("select codigo, nombre from VENDEDOR where activo = 1 order by nombre"))
		rows = fetchall(cu)
		cu.close()
		if rows:
			dlg = GixTablasAmortizacionFunc3(self, vendedorelegido = self.VendedorElegido)
			dlg.CenterOnParent()
			dlg.ShowModal()
		else:
			Mensajes().Info(self, u"� No se encontraron vendedores !", u"Atenci�n")
			
	def VendedorElegido(self, codigovendedor, nombrevendedor):
		datoini = self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOVENDEDOR).GetValue()
		self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOVENDEDOR).SetValue(str(codigovendedor))
		self.GetControl(ID_TEXTCTRLAMORFUNC1NOMBREVENDEDOR).SetValue(nombrevendedor)
		datofin = self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOVENDEDOR).GetValue()
		self.ValidaCambio(datoini, datofin)
		
	def OnLimpiarVendedor(self, evt):
		datoini = self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOVENDEDOR).GetValue()
		self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOVENDEDOR).SetValue("")
		self.GetControl(ID_TEXTCTRLAMORFUNC1NOMBREVENDEDOR).SetValue("")
		datofin = self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOVENDEDOR).GetValue()
		self.ValidaCambio(datoini, datofin)
		
	def OnCambiarFormaDePago(self, evt):
		pagos = {0:u"cr�dito", 1:u"contado"}
		formadepago = self.GetControl(ID_CHOICEAMORFUNC1FORMADEPAGO).GetSelection()
		if self.GetControl(ID_CHOICEAMORFUNC1ETAPA).GetSelection() > -1:
			codigolote = self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOINMUEBLE).GetValue()
			if codigolote:
				if Mensajes().YesNo(self, u"� Desea aplicar los valores predeterminados de %s ?" \
				                    % pagos[formadepago], u"Confirmaci�n"):
					self.GetControl(ID_TEXTCTRLAMORFUNC1PLAZOMESES).SetValue("")
					self.LoteElegido(codigolote = int(codigolote))
					
		self.ValidaCambio(1, 2)

	def EtapaSeleccionada(self, validalote = False):
		index = self.GetControl(ID_CHOICEAMORFUNC1ETAPA).GetSelection()
		if index < 0:
			Mensajes().Info(self, u"� Por favor elija la etapa !", u"Atenci�n")
		elif not validalote:
			lote = self.GetControl(ID_TEXTCTRLAMORFUNC1LOTE).GetValue()
			if lote == "":
				index = -1
				Mensajes().Info(self, u"� Por favor elija el lote !", u"Atenci�n")
			
		return index
	
	def Descuento(self, boolenganche = True):
		self.preciodescuento = self.preciocontado - self.descuento
		if boolenganche:
			self.enganche = self.preciodescuento * (self.engancheporcentaje / 100)
			
		self.saldofinanciar = self.preciodescuento - self.enganche
		if self.porcentajedescuento:
			self.GetControl(ID_TEXTAMORFUNC1DESCUENTO).SetLabel("Descuento %.2f %s" % (self.porcentajedescuento, "%"))
		else:
			self.GetControl(ID_TEXTAMORFUNC1DESCUENTO).SetLabel("Descuento")
			
		self.GetControl(ID_TEXTCTRLAMORFUNC1DESCUENTO).SetValue(str(amount_and_cents_with_commas(self.descuento)))
		self.GetControl(ID_TEXTCTRLAMORFUNC1PRECIODESCUENTO).SetValue(str(amount_and_cents_with_commas(self.preciodescuento)))
		self.GetControl(ID_TEXTAMORFUNC1ENGANCHE).SetLabel("Enganche %.2f %s" % (self.engancheporcentaje, "%"))
		self.GetControl(ID_TEXTCTRLAMORFUNC1ENGANCHE).SetValue(str(amount_and_cents_with_commas(self.enganche)))
		self.GetControl(ID_TEXTCTRLAMORFUNC1SALDOFINANCIAR).SetValue(str(amount_and_cents_with_commas(self.saldofinanciar)))
	
	def TasaInteresAnual(self):
		if self.plazomeses:
			if self.tasainteresanual:
				self.pagomensualfijo = (self.saldofinanciar*((self.tasainteresanual/1200)/(1-((1+(self.tasainteresanual/1200))**-self.plazomeses))))
			else:
				self.pagomensualfijo = self.saldofinanciar / self.plazomeses
				
			self.totalapagar = (self.pagomensualfijo * self.plazomeses) + self.enganche
		else:
			self.pagomensualfijo = self.saldofinanciar
			self.totalapagar = self.pagomensualfijo + self.enganche
			
		self.GetControl(ID_TEXTCTRLAMORFUNC1PAGOMENSUAL).SetValue(str(amount_and_cents_with_commas(self.pagomensualfijo)))
		self.GetControl(ID_TEXTCTRLAMORFUNC1TOTALAPAGAR).SetValue(str(amount_and_cents_with_commas(self.totalapagar)))
	
	def OnElegirLote(self, evt):
		index = self.EtapaSeleccionada(True)
		if index >= 0:
			etapa = self.GetControl(ID_CHOICEAMORFUNC1ETAPA).GetClientData(index)
			Mensajes().Info(self,u"Index es %s. La etapa es %s" % (index,etapa),u"Atenci�n")
			cu = r_cngcmex.cursor()
			cu.execute(str("select * from INMUEBLE where fk_etapa = %s and fechadeventa is null" % etapa))
			rows = fetchall(cu)
			cu.close()
			#if rows:
			if True:
				dlg = GixTablasAmortizacionFunc4(self, loteelegido = self.LoteElegido, etapa = etapa)
				dlg.CenterOnParent()
				dlg.ShowModal()
			else:
				Mensajes().Info(self, u"� No se encontraron lotes !", u"Atenci�n")
			
	def LoteElegido(self, codigolote, notifica = False):
		datoini = self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOINMUEBLE).GetValue()
		cambio = False
		if notifica:
			if self.GetControl(ID_TEXTCTRLAMORFUNC1TOTALAPAGAR).GetValue():
				cambio = True
				
		cu = r_cngcmex.cursor()
		campos = "rtrim(ltrim(iden2)) + '-' + rtrim(ltrim(iden1)), tipo, superficie, preciopormetro"
		cu.execute(str("select %s from INMUEBLE where codigo = %s" % (campos, codigolote)))
		row = fetchone(cu)
		cu.close()
		self.idlote = self.GetString(row[0]); self.tipo = self.GetString(row[1])
		self.superficiem2 = float(row[2]); self.preciom2 = float(row[3])
		self.preciocontado = self.superficiem2 * self.preciom2
		self.formadepago = self.GetControl(ID_CHOICEAMORFUNC1FORMADEPAGO).GetSelection()
		
		#campos = "tasainteresanual, plazomeses, contadomeses, contadodescuento, enganche"
		#cu.execute(str("select %s from gixamortizaciondefaults where pkamortizaciondefault = 1" % campos))
		#row = fetchone(cu)
		#self.contadomeses = int(row[2]); self.contadodescuento = float(row[3]); self.engancheporcentaje = float(row[4])
		#self.porcentajedescuento = float(0); self.descuento = float(0)
		
		#if self.formadepago:
			#self.tasainteresanual = float(0); self.plazomeses = int(row[2])
			#self.porcentajedescuento = self.contadodescuento
			#if self.porcentajedescuento > 0:
				#self.descuento = self.preciocontado * (self.porcentajedescuento / 100)
		#else:
			#self.tasainteresanual = float(row[0]); self.plazomeses = int(row[1])
				
		defaults = self.GetDefaultsPlazo()
		self.contadomeses = 18; self.contadodescuento = defaults[4]; self.engancheporcentaje = defaults[5]
		self.tasainteresanual = defaults[3]; self.plazomeses = defaults[6]
		self.descuento = float(0)
		self.porcentajedescuento = self.contadodescuento
		if self.porcentajedescuento > 0:
			self.descuento = self.preciocontado * (self.porcentajedescuento / 100)
		
		self.Descuento()
		self.TasaInteresAnual()
		self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOINMUEBLE).SetValue(str(codigolote))
		self.GetControl(ID_TEXTCTRLAMORFUNC1LOTE).SetValue(self.idlote)
		self.GetControl(ID_TEXTCTRLAMORFUNC1TIPO).SetValue(self.tipo)
		self.GetControl(ID_TEXTCTRLAMORFUNC1SUPERFICIEM2).SetValue(str(amount_and_cents_with_commas(self.superficiem2)))
		self.GetControl(ID_TEXTCTRLAMORFUNC1PRECIOM2).SetValue(str(amount_and_cents_with_commas(self.preciom2)))
		#self.GetControl(ID_TEXTCTRLAMORFUNC1TASAANUAL).SetValue(str(amount_and_cents_with_commas(self.tasainteresanual)))
		self.GetControl(ID_TEXTCTRLAMORFUNC1TASAANUAL).SetValue(str(amount_and_cents_with_commas(defaults[3])))
		#self.GetControl(ID_TEXTCTRLAMORFUNC1PLAZOMESES).SetValue(str(self.plazomeses))
		self.GetControl(ID_TEXTCTRLAMORFUNC1PLAZOMESES).SetValue(str(defaults[6]))
		self.GetControl(ID_TEXTCTRLAMORFUNC1FECHAPRIMERPAGO).SetValue(self.ObtenerFechaDelDia(True))
		self.GetControl(ID_TEXTCTRLAMORFUNC1PRECIOCONTADO).SetValue(str(amount_and_cents_with_commas(self.preciocontado)))
		self.ValidaGenerarTabla()
		if cambio:
			Mensajes().Info(self, u"� Se han aplicado los valores predeterminados al lote elegido !", u"Atenci�n")
			
		self.ValidaToolBar()
		datofin = self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOINMUEBLE).GetValue()
		self.ValidaCambio(datoini, datofin)

	def OnLimpiarLote(self, evt):
		if self.EtapaSeleccionada(True) >= 0:
			self.LimpiarLote()
			self.ReduceFrame()
			self.ValidaToolBar()
			self.ValidaCambio(1, 2)
		
	def LimpiarLote(self):
		self.tasainteresanual = 0.0; self.plazomeses = 0
		self.contadomeses = 0; self.contadodescuento = 0.0; self.engancheporcentaje = 0.0
		self.idlote = ""; self.tipo = ""
		self.superficiem2 = 0.0; self.preciom2 = 0.0
		self.preciocontado = 0.0; self.porcentajedescuento = 0.0; self.descuento = 0.0
		self.preciodescuento = 0.0; self.enganche = 0.0
		self.saldofinanciar = 0.0; self.pagomensualfijo = 0.0; self.totalapagar = 0.0
		self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOINMUEBLE).SetValue("")
		self.GetControl(ID_TEXTCTRLAMORFUNC1LOTE).SetValue("")
		self.GetControl(ID_TEXTCTRLAMORFUNC1TIPO).SetValue("")
		self.GetControl(ID_TEXTCTRLAMORFUNC1SUPERFICIEM2).SetValue("")
		self.GetControl(ID_TEXTCTRLAMORFUNC1PRECIOM2).SetValue("")
		self.GetControl(ID_TEXTCTRLAMORFUNC1TASAANUAL).SetValue("")
		self.GetControl(ID_TEXTCTRLAMORFUNC1PLAZOMESES).SetValue("")
		self.GetControl(ID_TEXTCTRLAMORFUNC1FECHAPRIMERPAGO).SetValue("")
		self.GetControl(ID_TEXTCTRLAMORFUNC1PRECIOCONTADO).SetValue("")
		self.GetControl(ID_TEXTAMORFUNC1DESCUENTO).SetLabel("Descuento")
		self.GetControl(ID_TEXTCTRLAMORFUNC1DESCUENTO).SetValue("")
		self.GetControl(ID_TEXTCTRLAMORFUNC1PRECIODESCUENTO).SetValue("")
		self.GetControl(ID_TEXTAMORFUNC1ENGANCHE).SetLabel("Enganche")
		self.GetControl(ID_TEXTCTRLAMORFUNC1ENGANCHE).SetValue("")
		self.GetControl(ID_TEXTCTRLAMORFUNC1SALDOFINANCIAR).SetValue("")
		self.GetControl(ID_TEXTCTRLAMORFUNC1PAGOMENSUAL).SetValue("")
		self.GetControl(ID_TEXTCTRLAMORFUNC1TOTALAPAGAR).SetValue("")
			
	def GetEntryValue(self, txtid = "", msg = "Digite el valor", tit = "Modificando Valor", entero = False, valor = ""):
		while True:
			dlg = wx.TextEntryDialog(self, msg, tit, defaultValue = "%s" % valor, style = wx.OK)
			dlg.Centre(wx.BOTTOM); dlg.ShowModal()
			self.valor = dlg.GetValue()
			dlg.Destroy()
			if self.valor:
				try:
					x = float(self.valor) * 1
					if x >= 0:
						if txtid:
							if entero:
								self.GetControl(txtid).SetValue(str(int(self.valor)))
							else:
								self.GetControl(txtid).SetValue(str(amount_and_cents_with_commas(float(self.valor))))
							
						break
					else:
						Mensajes().Info(self, u"� No puede introducir cantidades en negativo !", u"Atenci�n")
				except:
					Mensajes().Error(self, u"� Cantidad mal introducida >> %s !" % self.valor, u"Error")
			else:
				break
			
	def OnConsultarLinderos(self, evt):
		if self.EtapaSeleccionada() >= 0:
			codigoinmueble = self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOINMUEBLE).GetValue()
			lote = self.GetControl(ID_TEXTCTRLAMORFUNC1LOTE).GetValue()
			tit = u"Linderos del Lote %s" % lote
			dlg = GixTablasAmortizacionFunc7(self, title = tit, codigoinmueble = int(codigoinmueble))
			dlg.CenterOnParent()
			dlg.ShowModal()
			
	def ValidaGenerarTabla(self):
		if self.GetControl(ID_LISTCTRLAMORFUNC1).GetItemCount() > 0:
			self.GenerarTabla()
			
	def OnCambiarTasaInteres(self, evt):
		if self.EtapaSeleccionada() >= 0:
			datoini = self.GetControl(ID_TEXTCTRLAMORFUNC1TASAANUAL).GetValue()
			msg = u"Digite la tasa de interes anual (%)"; tit = u"Modificando la tasa de interes anual"
			self.GetEntryValue(txtid = ID_TEXTCTRLAMORFUNC1TASAANUAL, msg = msg, tit = tit)
			if self.valor:
				datofin = self.GetControl(ID_TEXTCTRLAMORFUNC1TASAANUAL).GetValue()
				self.tasainteresanual = float(datofin.replace(',',''))
				self.TasaInteresAnual()
				self.ValidaGenerarTabla()
				self.ValidaCambio(datoini, datofin)
		
	def OnCambiarPlazo(self, evt):
		if self.EtapaSeleccionada() >= 0:
			datoini = self.GetControl(ID_TEXTCTRLAMORFUNC1PLAZOMESES).GetValue()
			msg = u"Digite el plazo en meses"; tit = u"Modificando el plazo en meses"
			self.GetEntryValue(txtid = ID_TEXTCTRLAMORFUNC1PLAZOMESES, msg = msg, tit = tit, entero = True)
			if self.valor:
				datofin = self.GetControl(ID_TEXTCTRLAMORFUNC1PLAZOMESES).GetValue()
				#self.plazomeses = int(datofin.replace(',',''))
				#self.TasaInteresAnual()
				#self.ValidaGenerarTabla()
				#self.ValidaCambio(datoini, datofin)
				
				defaults = self.GetDefaultsPlazo()
				if defaults:
					self.contadomeses = 18; self.contadodescuento = defaults[4]; self.engancheporcentaje = defaults[5]
					self.tasainteresanual = defaults[3]; self.plazomeses = defaults[6]
					self.descuento = float(0)
					self.porcentajedescuento = self.contadodescuento
					if self.porcentajedescuento > 0:
						self.descuento = self.preciocontado * (self.porcentajedescuento / 100)
					
					self.Descuento()
					self.TasaInteresAnual()
					self.GetControl(ID_TEXTCTRLAMORFUNC1TASAANUAL).SetValue(str(amount_and_cents_with_commas(self.tasainteresanual)))
					self.GetControl(ID_TEXTCTRLAMORFUNC1PLAZOMESES).SetValue(str(self.plazomeses))
					self.ValidaGenerarTabla()
					Mensajes().Info(self, u"� Se han aplicado los valores predeterminados al lote elegido !", u"Atenci�n")
					self.ValidaToolBar()
					datofin = self.GetControl(ID_TEXTCTRLAMORFUNC1CODIGOINMUEBLE).GetValue()
					self.ValidaCambio(datoini, datofin)
				else:
					self.GetControl(ID_TEXTCTRLAMORFUNC1PLAZOMESES).SetValue(datoini)

	def OnElegirFechaPrimerPago(self, evt):
		if self.EtapaSeleccionada() >= 0:
			fecha = self.GetControl(ID_TEXTCTRLAMORFUNC1FECHAPRIMERPAGO).GetValue()
			dlg = GixTablasAmortizacionFunc11(self, fechaprimerpago = fecha, elegirfechaprimerpago = self.ElegirFechaPrimerPago)
			dlg.CenterOnParent()
			dlg.ShowModal()
			
	def ElegirFechaPrimerPago(self, a, m, d, datoini):
		datofin = "%02d/%02d/%04d" % (d, m, a)
		self.GetControl(ID_TEXTCTRLAMORFUNC1FECHAPRIMERPAGO).SetValue(datofin)
		self.ValidaCambio(datoini, datofin)
			
	def OnCambiarDescuento(self, evt):
		if self.EtapaSeleccionada() >= 0:
			msg = u"Digite el descuento"; tit = u"Modificando el descuento"
			dlg = GixTablasAmortizacionFunc5(self, title = tit, msg = msg, modulo = self.DescuentoElegido)
			dlg.CenterOnParent()
			dlg.ShowModal()
			
	def DescuentoElegido(self, valor, pc):
		try:
			datoini = self.GetControl(ID_TEXTCTRLAMORFUNC1DESCUENTO).GetValue()
			preciocontado = self.GetControl(ID_TEXTCTRLAMORFUNC1PRECIOCONTADO).GetValue()
			preciocontado = float(preciocontado.replace(',',''))
			if preciocontado:
				if pc:
					c = valor
					p = round(((c * 100) / preciocontado), 2)
				else:
					p = valor
					c = round(((p / 100) * preciocontado), 2)
					
				self.GetControl(ID_TEXTAMORFUNC1DESCUENTO).SetLabel(u"Descuento %.2f %s" % (p, "%"))
				self.GetControl(ID_TEXTCTRLAMORFUNC1DESCUENTO).SetValue(str(amount_and_cents_with_commas(c)))
				self.descuento = c; self.porcentajedescuento = p
				self.Descuento(); self.TasaInteresAnual(); self.ValidaGenerarTabla()
				datofin = self.GetControl(ID_TEXTCTRLAMORFUNC1DESCUENTO).GetValue()
				self.ValidaCambio(datoini, datofin)
			else:
				Mensajes().Info(self, u"� No hay precio de contado para aplicar el descuento !")
		except:
			Mensajes().Info(self, u"� Revise el precio de contado !")
		
	def OnCambiarEnganche(self, evt):
		if self.EtapaSeleccionada() >= 0:
			msg = u"Digite el enganche"; tit = u"Modificando el enganche"
			dlg = GixTablasAmortizacionFunc5(self, title = tit, msg = msg, modulo = self.EngancheElegido)
			dlg.CenterOnParent()
			dlg.ShowModal()
			
	def EngancheElegido(self, valor, pc):
		try:
			datoini = self.GetControl(ID_TEXTCTRLAMORFUNC1ENGANCHE).GetValue()
			preciodescuento = self.GetControl(ID_TEXTCTRLAMORFUNC1PRECIODESCUENTO).GetValue()
			preciodescuento = float(preciodescuento.replace(',',''))
			if preciodescuento:
				if pc:
					c = valor
					p = round(((c * 100) / preciodescuento), 2)
					boolenganche = False
				else:
					p = valor
					c = round(((p / 100) * preciodescuento), 2)
					boolenganche = True
					
				self.GetControl(ID_TEXTAMORFUNC1ENGANCHE).SetLabel(u"Enganche %.2f %s" % (p, "%"))
				self.GetControl(ID_TEXTCTRLAMORFUNC1ENGANCHE).SetValue(str(amount_and_cents_with_commas(c)))
				self.enganche = c; self.engancheporcentaje = p
				self.Descuento(boolenganche); self.TasaInteresAnual(); self.ValidaGenerarTabla()
				datofin = self.GetControl(ID_TEXTCTRLAMORFUNC1ENGANCHE).GetValue()
				self.ValidaCambio(datoini, datofin)
			else:
				Mensajes().Info(self, u"� No hay precio para aplicar el enganche !")
		except:
			Mensajes().Info(self, u"� Revise el precio menos descuento !")
			
	def OnCambiarPagoFijo(self, evt):
		if self.EtapaSeleccionada() >= 0:
			datoini = self.GetControl(ID_TEXTCTRLAMORFUNC1PAGOMENSUAL).GetValue()
			msg = u"Digite el pago fijo"; tit = u"Modificando el pago fijo"
			self.GetEntryValue(txtid = ID_TEXTCTRLAMORFUNC1PAGOMENSUAL, msg = msg, tit = tit, entero = False)
			if self.valor:
				datofin = self.GetControl(ID_TEXTCTRLAMORFUNC1PAGOMENSUAL).GetValue()
				self.ValidaCambio(datoini, datofin)
				
	def OnSelected(self, evt):
		self.currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLAMORFUNC1).GetItem(self.currentitem, 0).GetText()
		self.pkamortizaciondetalle = int(datointerno)
		datointerno = self.GetControl(ID_LISTCTRLAMORFUNC1).GetItem(self.currentitem, 1).GetText()
		self.numerodepago = int(datointerno)
		self.ObtenerFkamortizacion()
		evt.Skip()
		
	def ObtenerFkamortizacion(self):
		datointerno = self.GetControl(ID_TEXTCTRLAMORFUNC1ID).GetValue()
		datointerno = (datointerno.replace('Id','')).replace(' ','')
		self.fkamortizacion = 0
		if datointerno:
			self.fkamortizacion = int(datointerno)
			
	def OnRightClick(self, evt):
		query = """
		select pagado, insertado from gixamortizaciondetalle where pkamortizaciondetalle = %s
		""" % self.pkamortizaciondetalle
		sql = (query.replace('\n',' ')).replace('\t',' ')
		cu = r_cngcmex.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row is None:
			if Mensajes().YesNo(self, u"La tabla de amortizaci�n a�n no ha sido registrada.\n\n" \
			                    u"� Desea guardarla en este momento ?", u"Confirmaci�n"):
				self.Guardar()
				self.ValidaToolBar()
				self.ObtenerFkamortizacion()
		else:
			if self.GetControl(ID_CHOICEAMORFUNC1VISTA).GetSelection() != 0:
				Mensajes().Info(self, u"Para alterar la tabla es necesario que cambie a vista normal.", u"Atenci�n")
			else:
				contrato, cuenta = self.ObtenerCuenta()
				if cuenta:
					Mensajes().Info(self, u"Recuerde que una vez generada la cuenta\n" \
					                u"del cliente no puede alterar la tabla\n" \
					                u"de pagos/amortizaci�n.", u"Atenci�n")
				else:
					if not hasattr(self, "ID_POPUPINSERTAR"):
						self.ID_POPUPINSERTAR = wx.NewId(); self.ID_POPUPEDITAR = wx.NewId()
						self.ID_POPUPELIMINAR = wx.NewId(); self.ID_POPUPRENUMERAR = wx.NewId()
						self.ID_POPUPRECALCULARSALDOS = wx.NewId()
						self.Bind(wx.EVT_MENU, self.OnPopupInsertar, id = self.ID_POPUPINSERTAR)
						self.Bind(wx.EVT_MENU, self.OnPopupEditar, id = self.ID_POPUPEDITAR)
						self.Bind(wx.EVT_MENU, self.OnPopupEliminar, id = self.ID_POPUPELIMINAR)
						self.Bind(wx.EVT_MENU, self.OnPopupRenumerar, id = self.ID_POPUPRENUMERAR)
						self.Bind(wx.EVT_MENU, self.OnPopupRecalcularSaldos, id = self.ID_POPUPRECALCULARSALDOS)
						
					popup = wx.Menu()
					popup.Append(self.ID_POPUPINSERTAR, u"Insertar Pago")
					if row[1] and not row[0]:
						popup.Append(self.ID_POPUPEDITAR, u"Editar Pago No. %s" % self.numerodepago)
						popup.AppendSeparator()
						popup.Append(self.ID_POPUPELIMINAR, u"Eliminar Pago No. %s" % self.numerodepago)
					#if not row[0]:
						#popup.AppendSeparator()
						#popup.Append(self.ID_POPUPELIMINAR, u"Eliminar Pago No. %s" % self.numerodepago)
						
					popup.AppendSeparator()
					popup.Append(self.ID_POPUPRENUMERAR, u"Renumerar Tabla")
					popup.AppendSeparator()
					popup.Append(self.ID_POPUPRECALCULARSALDOS, u"Recalcular Saldos")
					self.PopupMenu(popup)
					popup.Destroy()
		
	def OnPopupInsertar(self, evt):
		dlg = GixTablasAmortizacionFunc9(self, popupinsertar = self.PopupInsertar)
		dlg.CenterOnParent()
		dlg.ShowModal()
		
	def PopupInsertar(self, fecha, pago, capital, interes):
		fkamortizacion = int(self.GetIdentity())
		query = """
	        insert into gixamortizaciondetalle
	        (fkamortizacion, numerodepago, fechadepago, saldoinicial, pagofijo, abonocapital, interes, saldofinal, insertado)
	        values (%s, %s, '%s', %s, %s, %s, %s, %s, %s)
	        """ % (fkamortizacion, 0, fecha, 0, pago, capital, interes, 0, 1)
		sql = (query.replace('\n',' ')).replace('\t',' ')
		todook, trash = self.QueryUpdateRecord(sql, conexion = r_cngcmex)
		if not todook:
			Mensajes().Info(self, u"� No se grab� el pago !", u"Atenci�n")
		else:
			self.PopupRenumerar()

	def OnPopupEditar(self, evt):
		titulo = "Editando Pago No. %s" % self.numerodepago
		dlg = GixTablasAmortizacionFunc10(self, title = titulo, pkamortizaciondetalle = self.pkamortizaciondetalle,
		                                  popupeditar = self.PopupEditar)
		dlg.CenterOnParent()
		dlg.ShowModal()
	
	def PopupEditar(self, fecha, pago, capital, interes):
		fkamortizacion = int(self.GetIdentity())
		query = """
		update gixamortizaciondetalle set fechadepago = '%s', pagofijo = %s, abonocapital = %s, interes = %s
		where pkamortizaciondetalle = %s
		""" % (fecha, pago, capital, interes, self.pkamortizaciondetalle)
		sql = (query.replace('\n',' ')).replace('\t',' ')
		todook, trash = self.QueryUpdateRecord(sql, conexion = r_cngcmex)
		if not todook:
			Mensajes().Info(self, u"� No se grab� el pago !", u"Atenci�n")
		else:
			self.RefrescaTablaAmortizacion(fkamortizacion)

	def OnPopupEliminar(self, evt):
		query = """
		select pagado from gixamortizaciondetalle where pkamortizaciondetalle = %s
		""" % self.pkamortizaciondetalle
		sql = (query.replace('\n',' ')).replace('\t',' ')
		cu = r_cngcmex.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row is not None:
			if row[0]:
				Mensajes().Info(self, u"� No puede eliminar el pago No. %s !\n\n" \
				                u"El pago ya afecto la cuenta del cliente." % self.numerodepago, u"Atenci�n")
			else:
				if Mensajes().YesNo(self, u"Recuerde que el pago quedar� permanentemente eliminado.\n\n" \
				                    u"� Desea realmente eliminar el pago No. %s ?" % self.numerodepago, u"Confirmaci�n"):
					query = """
					update gixamortizaciondetalle set eliminado = 1 where pkamortizaciondetalle = %s
					""" % self.pkamortizaciondetalle
					sql = (query.replace('\n',' ')).replace('\t',' ')
					todook, trash = self.QueryUpdateRecord(sql, conexion = r_cngcmex)
					if todook:
						self.RenumeraPagos()
						self.RefrescaTablaAmortizacion(self.fkamortizacion)
					else:
						Mensajes().Info(self, u"� No se grab� la informaci�n !", u"Atenci�n")
		else:
			Mensajes().Info(self, u"Sucedio algo que impide eliminar el pago No. %s\n\n" \
			                u"� Quiz� ya fu� eliminado !" % self.numerodepago, u"Atenci�n")
			
	def RenumeraPagos(self):
		query = """
	        select pkamortizaciondetalle from gixamortizaciondetalle
	        where fkamortizacion = %s and eliminado = 0 and pagado = 0 order by fechadepago, numerodepago
	        """ % self.fkamortizacion
		cu = r_cngcmex.cursor()
		cu.execute(str("select count(*) from gixamortizaciondetalle where fkamortizacion = %s and pagado = 1" % self.fkamortizacion))
		pagos = fetchone(cu)
		if int(pagos[0]) > 0:
			if Mensajes().YesNo(self, u"� Desea incluir los pagos en la renumeraci�n de la tabla ?", u"Confirmaci�n"):
				query = """
				select pkamortizaciondetalle from gixamortizaciondetalle
				where fkamortizacion = %s and eliminado = 0 order by fechadepago, numerodepago
				""" % self.fkamortizacion
				
		sql = (query.replace('\n',' ')).replace('\t',' ')
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for secuencia, row in enumerate(rows):
				query = """
			        update gixamortizaciondetalle set numerodepago = %s where pkamortizaciondetalle = %s
			        """ % ((secuencia + 1), int(row[0]))
				sql = (query.replace('\n',' ')).replace('\t',' ')
				todook, trash = self.QueryUpdateRecord(sql, conexion = r_cngcmex)
				if not todook:
					Mensajes().Info(self, u"� Problemas al regenerar secuencia de pagos !\n\n" \
					                u"%s" % sql, u"Atenci�n")
					
	def OnPopupRenumerar(self, evt):
		self.PopupRenumerar()
	
	def PopupRenumerar(self):
		self.ObtenerFkamortizacion()
		if self.fkamortizacion:
			self.RenumeraPagos()
			self.RefrescaTablaAmortizacion(self.fkamortizacion)
			
	def OnPopupRecalcularSaldos(self, evt):
		if Mensajes().YesNo(self, u"No ser�n tomados en cuenta los pagos ya aplicados.\n\n" \
		                    u"� Desea realmente recalcular los saldos ?", u"Confirmaci�n"):
			self.PopupRecalcularSaldos()
		
	def PopupRecalcularSaldos(self):
		try:
			aux = self.GetControl(ID_TEXTCTRLAMORFUNC1SALDOFINANCIAR).GetValue()
			saldoinicial = float(aux.replace(",",""))
			msg = u"Saldo inicial"; tit = u"Recalcular saldos"
			self.GetEntryValue(txtid = "", msg = msg, tit = tit, entero = False, valor = saldoinicial)
			if self.valor:
				saldoinicial = float(self.valor)
			else:
				saldoinicial = 0.00
		except:
			saldoinicial = 0.00
			
		if not saldoinicial:
			Mensajes().Info(self, u"� No hay saldo a financiar !", u"Atenci�n")
		else:
			fkamortizacion = int(self.GetIdentity())
			query = """
		        select pkamortizaciondetalle, abonocapital, interes from gixamortizaciondetalle
		        where fkamortizacion = %s and eliminado = 0 and pagado = 0 order by fechadepago, numerodepago
		        """ % fkamortizacion
			sql = (query.replace('\n',' ')).replace('\t',' ')
			cu = r_cngcmex.cursor()
			cu.execute(str(sql))
			rows = fetchall(cu)
			cu.close()
			if not rows:
				Mensajes().Info(self, u"� No existen pagos sin aplicar !", u"Atenci�n")
			else:
				for row in rows:
					if saldoinicial > 0:
						abonocapital = float(row[1])
						saldofinal = round(saldoinicial, 2) - round(abonocapital, 2)
						if saldofinal < 0:
							abonocapital = saldoinicial
							saldofinal = 0.00
							
						pagofijo = abonocapital + float(row[2])
						query = """
					        update gixamortizaciondetalle
					        set saldoinicial = %s, pagofijo = %s, abonocapital = %s, saldofinal = %s
					        where pkamortizaciondetalle = %s
					        """ % (saldoinicial, pagofijo, abonocapital, saldofinal, int(row[0]))
						sql = (query.replace('\n',' ')).replace('\t',' ')
						todook, trash = self.QueryUpdateRecord(sql, conexion = r_cngcmex)
						if not todook:
							Mensajes().Info(self, u"� Problemas al recalcular saldos (1) !\n\n" \
						                        u"%s" % sql, u"Atenci�n")
						saldoinicial = saldofinal
					else:
						query = """
					        update gixamortizaciondetalle set eliminado = 1 where pkamortizaciondetalle = %s
					        """ % int(row[0])
						sql = (query.replace('\n',' ')).replace('\t',' ')
						todook, trash = self.QueryUpdateRecord(sql, conexion = r_cngcmex)
						if not todook:
							Mensajes().Info(self, u"� Problemas al recalcular saldos (2) !\n\n" \
						                        u"%s" % sql, u"Atenci�n")
					
				self.RefrescaTablaAmortizacion(fkamortizacion)
				
class GixInstruccionEscrituraFunc2(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Impresi�n de Instrucci�n de Escritura", pos = wx.DefaultPosition,
	             size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE, inmueble = 0):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.inmueble = inmueble
		self.codigonotario, self.nombrenotario, self.numeronotaria = 0, "", ""
		self.DicDatesAndTxt = {ID_BITMAPBUTTONESCRITURAFUNC2ELEGIRFECHAINSTRUCCION : ID_TEXTCTRLESCRITURAFUNC2FECHAINSTRUCCION}
		
		InstruccionEscrituraFunc2(self)
		self.GetControl(ID_TEXTCTRLESCRITURAFUNC2ID).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLESCRITURAFUNC2LOTE).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLESCRITURAFUNC2CLIENTE).SetBackgroundColour(wx.Colour(153,255,153))
		for v in self.DicDatesAndTxt.keys():
			self.Bind(wx.EVT_BUTTON, self.OnFechaButton, id = v )

		wx.EVT_BUTTON(self, ID_BITMAPBUTTONESCRITURAFUNC2LIMPIARFECHAINSTRUCCION, self.OnLimpiarFechaInstruccion)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONESCRITURAFUNC2ELEGIRNOTARIOINSTRUCCION, self.OnElegirNotario)
		self.Bind(wx.EVT_BUTTON, self.OnClose, id = ID_BUTTONESCRITURAFUNC2CANCELAR)
		self.Bind(wx.EVT_BUTTON, self.OnAceptar, id = ID_BUTTONESCRITURAFUNC2ACEPTAR)
		self.Bind(wx.EVT_BUTTON, self.OnImprimirInstruccion, id = ID_BUTTONESCRITURAFUNC2IMPRIMIR)
		wx.EVT_CLOSE(self, self.OnClose)
		self.ObtenerDatos()
		self.SetFocus()
		
	def OnClose(self, evt):
	        self.EndModal(1)
		self.Destroy()
		
	def OnLimpiarFechaInstruccion(self, evt):
		self.GetControl(ID_TEXTCTRLESCRITURAFUNC2FECHAINSTRUCCION).SetValue("")
		
	def OnElegirNotario(self, evt):
		query = """
		select rtrim(ltrim(nombre_notario)), rtrim(ltrim(numero_notaria)), codigo
		from notaria order by nombre_notario
		"""
		sql = (query.replace('\n',' ')).replace('\t',' ')
		cu = r_cngcmex.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			codigolst = []; nombrenotariolst = []; numeronotarialst = []
			for row in rows:
				codigolst.append(int(row[2]))
				nombrenotariolst.append(self.GetString(row[0].upper()))
				numeronotarialst.append(self.GetString(row[1]))
				
			index = wx.GetSingleChoiceIndex(u"Elija el Notario",  u"Notarios", nombrenotariolst, parent = None)
			if int(index) > -1:
				self.codigonotario = codigolst[index]
   				self.nombrenotario = nombrenotariolst[index]
				self.numeronotaria = numeronotarialst[index]
				self.GetControl(ID_TEXTCTRLESCRITURAFUNC2IDNOTARIA).SetValue(str(self.codigonotario))
				self.GetControl(ID_TEXTCTRLESCRITURAFUNC2NOTARIO).SetValue(self.nombrenotario)
				self.GetControl(ID_TEXTCTRLESCRITURAFUNC2NOTARIA).\
				    SetValue(u"NOTARIA PUBLICA NUMERO %s" % self.numeronotaria)
		else:
			Mensajes().Info(self, u"� No hay notarios registrados !", u"Atenci�n")
		
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
				
		return dato.strip()
		
	def ObtenerDatos(self):
		query = """
		select rtrim(ltrim(i.iden2)) + rtrim(ltrim(i.iden1)) + ' - ' + rtrim(ltrim(e.descripcion)), rtrim(ltrim(c.nombre)),
		isnull(i.fechaescriturado, ''), isnull(i.fk_notario, 0),
		isnull('NOTARIA PUBLICA NUMERO ' + n.numero_notaria, ''), isnull(n.nombre_notario, '')
		from inmueble i
		join etapa e on i.fk_etapa = e.codigo
		join cuenta t on i.codigo = t.fk_inmueble
		join cliente c on t.fk_cliente = c.codigo
		left join notaria n on i.fk_notario = n.codigo
		where i.codigo = %s
		""" % self.inmueble
		sql = (query.replace('\n',' ')).replace('\t',' ')
		cu = r_cngcmex.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		notaria = ""
		if int(row[3]) > 0:
			notaria = int(row[3])
			
		self.GetControl(ID_TEXTCTRLESCRITURAFUNC2ID).SetValue(str(self.inmueble))
		self.GetControl(ID_TEXTCTRLESCRITURAFUNC2LOTE).SetValue(self.GetString(row[0]))
		self.GetControl(ID_TEXTCTRLESCRITURAFUNC2CLIENTE).SetValue(self.GetString(row[1]))
		self.GetControl(ID_TEXTCTRLESCRITURAFUNC2FECHAINSTRUCCION).SetValue(str(row[2]))
		self.GetControl(ID_TEXTCTRLESCRITURAFUNC2IDNOTARIA).SetValue(str(notaria))
		self.GetControl(ID_TEXTCTRLESCRITURAFUNC2NOTARIA).SetValue(self.GetString(row[4]))
		self.GetControl(ID_TEXTCTRLESCRITURAFUNC2NOTARIO).SetValue(self.GetString(row[5].upper()))
		
	def GrabaInstruccionEscritura(self, fechainstruccion, fknotaria):
		escriturado = "N"
		fk_notario = "fk_notario = null"
		fechaescriturado = "fechaescriturado = null"
		if fechainstruccion:
			if fknotaria:
				escriturado = "S"
				fk_notario = "fk_notario = %s" % fknotaria
				fechaescriturado = "fechaescriturado = '%s'" % fechainstruccion
			else:
				if not Mensajes().YesNo(self, u"Al omitir al notario, el inmueble quedar� como no escriturado.\n\n" \
					                u"� Desea continuar ?\n", u"Atenci�n"):
					return False
		else:
			if not Mensajes().YesNo(self, u"Al omitir la fecha, el inmueble quedar� como no escriturado.\n\n" \
			                        u"� Desea continuar ?\n", u"Atenci�n"):
				return False

		query = """
		update inmueble set escriturado = '%s', %s, %s where codigo = %s
		""" % (escriturado, fk_notario, fechaescriturado, self.inmueble)
		sql = (query.replace('\t', ' ')).replace('\n', ' ')
		todook, trash = self.QueryUpdateRecord(sql, conexion = r_cngcmex)
		if not todook:
			Mensajes().Info(self, u"� No se actualiz� la instrucci�n de escritura !", u"Atenci�n")
			
		return todook
		
	def ValidaOk(self):
		fecha =  self.GetControl(ID_TEXTCTRLESCRITURAFUNC2FECHAINSTRUCCION).GetValue()
		fechainstruccion = ""
		if fecha:
			d, m, a = fecha.split("/")
			if len(a) < 3:
				a = "20%02d" % int(a)
				
			fechainstruccion = "%02d/%02d/%04d" % (int(d), int(m), int(a))
			
		aux = self.GetControl(ID_TEXTCTRLESCRITURAFUNC2IDNOTARIA).GetValue()
		fknotaria = 0
		if aux:
			if int(aux) > 0:
				fknotaria = int(aux)
					
		if self.GrabaInstruccionEscritura(fechainstruccion, fknotaria):
			return True
		else:
			return False

	def OnAceptar(self, evt):
		if self.ValidaOk():
			self.EndModal(1)
			self.Destroy()
					
	def GetHtmlInstruccion(self, consecutivorecibo = 0):
		query = """
		select i.fechaescriturado, 'NOTARIA PUBLICA NUMERO ' + n.numero_notaria, n.nombre_notario, rtrim(ltrim(e.descripcion)),
		isnull(rtrim(ltrim(c.nombre)), ''), isnull(rtrim(ltrim(c.nacionalidad)), ''), isnull(c.estadocivil, ''),
		isnull(c.regimen, ''), isnull(rtrim(ltrim(c.lugardenacimiento)), ''),
		isnull(convert(varchar(10), c.fechadenacimiento, 103), ''), isnull(c.ocupacion, ''), isnull(c.domicilio, ''),
		isnull(c.colonia, ''), isnull(c.ciudad, ''), isnull(c.estado, ''), isnull(c.cp, ''), isnull(c.telefonocasa, ''),
		isnull(c.telefonotrabajo, ''), isnull(c.conyugenombre, ''), rtrim(ltrim(i.iden2)), rtrim(ltrim(i.iden1)),
		i.superficie, t.codigo
		from inmueble i
		join etapa e on i.fk_etapa = e.codigo
		join cuenta t on i.codigo = t.fk_inmueble
		join cliente c on t.fk_cliente = c.codigo
		join notaria n on i.fk_notario = n.codigo
		where i.codigo = %s
		""" % self.inmueble
		sql = (query.replace('\n',' ')).replace('\t',' ')
		cu = r_cngcmex.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		sql = "select sum(cargo) from documento where fk_cuenta = %s" % int(row[22])
		cu.execute(sql)
		cargos = fetchone(cu)
		floatcargos = float(cargos[0])
		cu.close()

		if row is not None:
			ec = {0:"Soltero", 1:"Casado", 2:"Viudo", 3:"Divorciado"}
			rm = {0:"", 1:"Sociedad Legal", 2:"Sociedad Conyugal", 3:u"Separaci�n de Bienes"}
			oc = {0:"", 1:"Empleado", 2:"Profesionista", 3:"Otro"}
			meses = ("", "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto",
			         "Septiembre", "Octubre", "Noviembre", "Diciembre")
			dia, mes, ano = row[0].split("/")
			fechaescriturado = "Guadalajara, Jalisco, a %s de %s del %s." % (dia, meses[int(mes)], ano)
			notaria = self.GetString(row[1]); notario = self.GetString(row[2].upper())
			etapa = self.GetString(row[3].upper()); cliente = self.GetString(row[4])
			nacionalidad = self.GetString(row[5])
			estadocivil, regimen, lugarnacimiento, ocupacion, domicilio, cdedo, telefono = "", "", "", "", "", "", ""
			conyuge, modulo, lote, superficie, operacion = "", "", "", "", ""
			if row[6]:
				estadocivil = ec[int(row[6])]
				
			if row[7]:
				regimen = rm[int(row[7])]
				
			if row[8]:
				lugarnacimiento = self.GetString(row[8])
				
			if row[9]:
				if lugarnacimiento:
					lugarnacimiento += " " + str(row[9])
				else:
					lugarnacimiento = str(row[9])
				
			if row[10]:
				ocupacion = oc[int(row[10])]
				
			if row[11]:
				domicilio = self.GetString(row[11])
				if row[12]:
					domicilio += " " + self.GetString(row[12])
					
			if row[13]:
				cdedo = self.GetString(row[13])
				if row[14]:
					cdedo += ", " + self.GetString(row[14])
					if row[15]:
						cdedo += " " + self.GetString(row[15])
						
			if row[16]:
				telefono = self.GetString(row[16])
				
			if row[17]:
				if telefono:
					telefono += " / " + self.GetString(row[17])
				else:
					telefono = self.GetString(row[17])
					
			if row[18]:
				conyuge = self.GetString(row[18])
				
			if row[19]:
				modulo = self.GetString(row[19])
				
			if row[20]:
				lote = self.GetString(row[20])
				
			superficie = "%s mt2." % amount_and_cents_with_commas(float(row[21]))
			operacion = "$%s" % amount_and_cents_with_commas(floatcargos)
			
			#br = ""
			#if wx.Platform == '__WXMSW__':
			        #br = "<br>"
			
			body = u"""
			<br>
			<br>
			<div style="text-align: left;"><big style="font-family: Arial;"><br>
			{$FECHA}</big><br>
			</div>
			<br>
			<br>
			<big style="font-family: Arial;"><span style="font-weight: bold;">{$NOTARIA}</span><br
			style="font-weight: bold;">
			<span style="font-weight: bold;">{$NOTARIO}</span><br
			style="font-weight: bold;">
			<span style="font-weight: bold;">P R E S E N T E</span><br>
			<br>
			<br>
			</big>
			<div style="text-align: justify;"><big style="font-family: Arial;">Favor
			de tirar Escritura de compra venta, respecto de un lote comprendido
			dentro del Condominio PINARES TAPALPA {$ETAPA}, para lo cual
			proporcionamos los siguientes datos:</big><br>
			<br>
			<br>
			<table style="text-align: left; width: 284px; height: 68px;" border="0"
			cellpadding="2" cellspacing="2">
			<tbody>
			<tr>
			<td style="text-align: right; width: 250px;"><big><span
			style="font-family: Arial;">COMPRADOR</span></big><br>
			</td>
			<td style="font-weight: bold;"><big><span
			style="font-family: Arial;">{$CLIENTE}</span></big><br>
			</td>
			</tr>
			<tr>
			<td style="font-family: Arial; text-align: right;"><big>NACIONALIDAD<br>
			</big></td>
			<td style="font-family: Arial; font-weight: bold;"><big>{$NACIONALIDAD}<br>
			</big></td>
			</tr>
			<tr>
			<td style="font-family: Arial; text-align: right;"><big>ESTADO
			CIVIL<br>
			</big></td>
			<td style="font-family: Arial; font-weight: bold;"><big>{$ESTADOCIVIL}<br>
			</big></td>
			</tr>
			<tr>
			<td style="font-family: Arial; text-align: right;"><big>REGIMEN
			MATRIMONIAL</big><br>
			</td>
			<td style="font-family: Arial; font-weight: bold;"><big>{$REGIMEN}</big><br>
			</td>
			</tr>
			<tr>
			<td style="font-family: Arial; text-align: right;"><big>LUGAR Y
			FECHA DE NACIMIENTO</big><br>
			</td>
			<td style="font-family: Arial; font-weight: bold;"><big>{$NACIMIENTO}<br>
			</big></td>
			</tr>
			<tr>
			<td style="font-family: Arial; text-align: right;"><big>OCUPACION</big><br>
			</td>
			<td style="font-family: Arial; font-weight: bold;"><big>{$OCUPACION}<br>
			</big></td>
			</tr>
			<tr>
			<td style="font-family: Arial; text-align: right;"><big>DOMICILIO<br>
			</big></td>
			<td style="font-family: Arial; font-weight: bold;"><big>{$DOMICILIO}<br>
			</big></td>
			</tr>
			<tr>
			<td style="vertical-align: middle; text-align: right;"><big><span
			style="font-family: Arial;">CIUDAD Y ESTADO</span><br>
			</big></td>
			<td style="vertical-align: middle; font-weight: bold;"><big><span
			style="font-family: Arial;">{$CDEDO}</span><br>
			</big></td>
			</tr>
			<tr>
			<td style="font-family: Arial; text-align: right;"><big>TELEFONO<br>
			</big></td>
			<td style="font-family: Arial; font-weight: bold;"><big>{$TELEFONO}<br>
			</big></td>
			</tr>
			<tr>
			<td style="font-family: Arial; text-align: right;"><big>CONYUGE<br>
			</big></td>
			<td style="font-family: Arial; font-weight: bold;"><big>{$CONYUGE}<br>
			</big></td>
			</tr>
			</tbody>
			</table>
			<br>
			<br>
			<br>
			<div style="text-align: center;"><big
			style="font-style: italic; text-decoration: underline;"><span
			style="font-family: Arial; font-weight: bold;">INMUEBLE A ESCRITURAR</span></big><br>
			<br>
			<br>
			<table
			style="text-align: left; width: 100px; margin-left: auto; margin-right: auto;"
			border="0" cellpadding="2" cellspacing="2">
			<tbody>
			<tr>
			<td style="vertical-align: top;"><br>
			</td>
			<td
			style="vertical-align: middle; font-family: Arial; text-align: right;"><big>MODULO<br>
			</big></td>
			<td style="font-family: Arial; text-align: left;"><big><span
			style="font-weight: bold;">{$MODULO}</span><br>
			</big></td>
			<td style="font-family: Arial; text-align: right;"><big>LOTE<br>
			</big></td>
			<td style="font-family: Arial; text-align: left;"><big><span
			style="font-weight: bold;">{$LOTE}</span><br>
			</big></td>
			<td style="font-family: Arial; text-align: right;"><big>SUPERFICIE<br>
			</big></td>
			<td style="font-family: Arial; text-align: left;"><big><span
			style="font-weight: bold;">{$SUPERFICIE}</span><br>
			</big></td>
			<td style="vertical-align: top;"><br>
			</td>
			</tr>
			</tbody>
			</table>
			<br>
			<br>
			<div style="text-align: justify;"><big><span style="font-family: Arial;">LINDEROS.-
			<span style="font-weight: bold;">Los que se consignan en Escritura de
			Constituci\xf3n de R\xe9gimen de Condominio PINARES TAPALPA {$ETAPA}.</span></span></big><br>
			<br>
			<br>
			<table
			style="text-align: left; width: 284px; height: 68px; margin-left: auto; margin-right: auto;"
			border="0" cellpadding="2" cellspacing="2">
			<tbody>
			<tr>
			<td style="text-align: right; font-family: Arial;"><big>PRECIO
			DE OPERACION<br>
			</big></td>
			<td style="vertical-align: middle; font-family: Arial;"><big><span
			style="font-weight: bold;">{$OPERACION}</span><br>
			</big></td>
			</tr>
			<tr>
			<td
			style="vertical-align: middle; text-align: right; font-family: Arial;"><big>CONDICIONES<br>
			</big></td>
			<td style="vertical-align: middle; font-family: Arial;"><big><span
			style="font-weight: bold;">Lisa y Llana</span><br>
			</big></td>
			</tr>
			</tbody>
			</table>
			<br>
			<br>
			<br>
			<br>
			<br>
			<br>
			<br>
			<br>
			<br>
			<br>
			<br>
			<br>
			<br>
			<div style="text-align: center;"><big><span
			style="font-family: Arial; font-weight: bold;">LAE MIGUEL ANGEL LARES
			ROJAS</span><br style="font-family: Arial; font-weight: bold;">
			<span style="font-family: Arial; font-weight: bold;">REPRESENTANTE
			LEGAL ARCADIA PROMOTORA</span></big>
			<br>
			</div>
			</div>
			</div>
			</div>
			"""
			
			b = ((body.replace("{$FECHA}", fechaescriturado)).replace("{$NOTARIA}", notaria)).replace("{$NOTARIO}", notario)
			b = ((b.replace("{$ETAPA}", etapa)).replace("{$CLIENTE}", cliente)).replace("{$NACIONALIDAD}", nacionalidad)
			b = ((b.replace("{$ESTADOCIVIL}", estadocivil)).replace("{$REGIMEN}", regimen)).replace("{$NACIMIENTO}", lugarnacimiento)
			b = ((b.replace("{$OCUPACION}", ocupacion)).replace("{$DOMICILIO}", domicilio)).replace("{$CDEDO}", cdedo)
			b = ((b.replace("{$TELEFONO}", telefono)).replace("{$CONYUGE}", conyuge)).replace("{$MODULO}", modulo)
			b = ((b.replace("{$LOTE}", lote)).replace("{$SUPERFICIE}", superficie)).replace("{$OPERACION}", operacion)
			
			html = '<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /></head><body>' + \
			     b + '</body></html>'
			
			return html
		else:
			return ""
			
	def ImprimeInstruccion(self):
		try:
			pisa
		except:
			Mensajes().Info(self, u"� Por favor instale el m�dulo pisa !", u"Aviso")
			return
		try:
			gridcontenthtml = self.GetHtmlInstruccion()
			if gridcontenthtml:
				wx.BeginBusyCursor()
				archivo = self.GetPdfFileName("instruccion")
				gridcontenthtml = gridcontenthtml.encode("utf-8")
				pdf = pisa.CreatePDF(cStringIO.StringIO(gridcontenthtml), file(archivo, "wb"))
				if not pdf.err:
					try:
						pdf.dest.close()
					except:
						warnings.warn("<<pdf.dest.close() no se pudo.>>")
					try:
						os.startfile(str(archivo))
					except:
						os.system("open %s" % archivo)
						
				wx.EndBusyCursor()
			else:
				Mensajes().Info(self, u"� No se encontr� informaci�n referente a la instrucci�n !", u"Atenci�n")
		except:
			wx.EndBusyCursor()
			Mensajes().Info(self, u"� Se presento un problema al generar la instrucci�n !", u"Atenci�n")
		
	def OnImprimirInstruccion(self, evt):
		fecha =  self.GetControl(ID_TEXTCTRLESCRITURAFUNC2FECHAINSTRUCCION).GetValue()
		notario = self.GetControl(ID_TEXTCTRLESCRITURAFUNC2IDNOTARIA).GetValue()
		if fecha:
			if notario:
				if int(notario) > 0:
					if self.ValidaOk():
						self.ImprimeInstruccion()
				else:
					Mensajes().Info(self, u"� Por favor revise al notario !", u"Atenci�n")
			else:
				Mensajes().Info(self, u"� Por favor revise al notario !", u"Atenci�n")
		else:
			Mensajes().Info(self, u"� Por favor revise la fecha !", u"Atenci�n")
				
class GixInstruccionEscrituraFunc1(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Impresi�n de Instrucci�n de Escritura", pos = wx.DefaultPosition,
	             size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.inmueble, self.clientefiltro = 0, ""
		self.desarrollo, self.etapa = 5, 0
		self.choicefiltroinmueble = {0:"", 1:"i.escriturado = 'S'", 2:"i.escriturado = 'N'"}
		self.choiceinxinmueble = 0
		InstruccionEscrituraFunc1(self, True)
		self.ObtenerEtapas()
		self.Bind(wx.EVT_CHOICE, self.OnChoiceCtrlEtapa, id = ID_CHOICEESCRITURAFUNC1FILTROETAPA)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONESCRITURAFUNC1LIMPIARETAPA, self.OnLimpiarEtapaFiltro)
		self.GetControl(ID_CHOICEESCRITURAFUNC1FILTROINMUEBLE).SetSelection(self.choiceinxinmueble)
		self.Bind(wx.EVT_CHOICE, self.OnChoiceCtrlInmueble, id = ID_CHOICEESCRITURAFUNC1FILTROINMUEBLE)
		self.GetControl(ID_SEARCHCTRLESCRITURAFUNC1BUSCARCLIENTE).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchCliente, id = ID_SEARCHCTRLESCRITURAFUNC1BUSCARCLIENTE)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanCliente, id = ID_SEARCHCTRLESCRITURAFUNC1BUSCARCLIENTE)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchCliente, id = ID_SEARCHCTRLESCRITURAFUNC1BUSCARCLIENTE)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelected, id = ID_LISTCTRLESCRITURAFUNC1)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselected, id = ID_LISTCTRLESCRITURAFUNC1)
		self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnActivated, id = ID_LISTCTRLESCRITURAFUNC1)
		self.Bind(wx.EVT_BUTTON, self.OnClose, id = ID_BUTTONESCRITURAFUNC1CERRAR)
		self.Bind(wx.EVT_BUTTON, self.OnActivated, id = ID_BUTTONESCRITURAFUNC1ELEGIR)
		wx.EVT_CLOSE(self, self.OnClose)
		self.FillListCtrl()
		self.SetFocus()
		
	def OnClose(self, evt):
	        self.EndModal(1)
		self.Destroy()
		
	def ObtenerEtapas(self):
		control = self.GetControl(ID_CHOICEESCRITURAFUNC1FILTROETAPA)
		control.Clear()
		query = """
		select codigo, descripcion from ETAPA
		where fk_desarrollo = %s order by codigo
		""" % self.desarrollo
		sql = (query.replace('\n',' ')).replace('\t',' ')
		cu = r_cngcmex.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(str(row[1]).decode("iso8859-1"), int(row[0]))
				
		control.SetSelection(-1)
	
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
				
		return dato.strip()
	
	def OnChoiceCtrlInmueble(self, evt):
		self.choiceinxinmueble = self.GetControl(ID_CHOICEESCRITURAFUNC1FILTROINMUEBLE).GetSelection()
		self.FillListCtrl()
		self.GetControl(ID_LISTCTRLESCRITURAFUNC1).SetFocus()
		
	def OnChoiceCtrlEtapa(self, evt):
		choiceinxetapa = self.GetControl(ID_CHOICEESCRITURAFUNC1FILTROETAPA).GetSelection()
		self.etapa = self.GetControl(ID_CHOICEESCRITURAFUNC1FILTROETAPA).GetClientData(choiceinxetapa)
		self.FillListCtrl()
		self.GetControl(ID_LISTCTRLESCRITURAFUNC1).SetFocus()
		
	def OnLimpiarEtapaFiltro(self, evt):
		self.GetControl(ID_CHOICEESCRITURAFUNC1FILTROETAPA).SetSelection(-1)
		self.etapa = 0
		self.FillListCtrl()
		self.GetControl(ID_LISTCTRLESCRITURAFUNC1).SetFocus()

	def OnDoSearchCliente(self, evt):
		self.clientefiltro =  self.GetControl(ID_SEARCHCTRLESCRITURAFUNC1BUSCARCLIENTE).GetValue()
		self.FillListCtrl()

	def OnCleanCliente(self, evt):
		self.GetControl(ID_SEARCHCTRLESCRITURAFUNC1BUSCARCLIENTE).SetValue("")
		self.clientefiltro = ""
		self.FillListCtrl()

	def OnSelected(self, evt):
		currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLESCRITURAFUNC1).GetItem(currentitem, 0).GetText()
		self.inmueble = int(datointerno)
		self.GetControl(ID_BUTTONESCRITURAFUNC1ELEGIR).Enable(True)
		evt.Skip()
		
	def OnDeselected(self, evt):
		self.inmueble = 0
		self.GetControl(ID_BUTTONESCRITURAFUNC1ELEGIR).Enable(False)
		evt.Skip()
	
	def OnActivated(self, evt):
		dlg = GixInstruccionEscrituraFunc2(self, inmueble = self.inmueble)
		dlg.CenterOnParent()
		dlg.ShowModal()

	def FillListCtrl(self):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLESCRITURAFUNC1)
		lctrl.ClearAll()
		listctrlfiltro = ""
		if self.clientefiltro:
			listctrlfiltro = "and c.nombre like '%s%s%s'" % ("%%", str(self.clientefiltro), "%%")
			
		if self.choiceinxinmueble > 0:
			listctrlfiltro += " and %s" % str(self.choicefiltroinmueble[self.choiceinxinmueble])
			
		if self.etapa:
			listctrlfiltro += " and e.codigo = %s" % int(self.etapa)
			
		query = """
		select i.codigo, t.codigo, rtrim(ltrim(i.iden2)) + '-' + rtrim(ltrim(i.iden1)),
		rtrim(ltrim(e.descripcion)), rtrim(ltrim(c.nombre)), i.escriturado
		from INMUEBLE i
		join CUENTA t on i.codigo = t.fk_inmueble
		join ETAPA e on i.fk_etapa = e.codigo
		join CLIENTE c on t.fk_cliente = c.codigo
		where e.fk_desarrollo = 5 %s order by e.codigo, i.iden2, i.iden1
		""" % listctrlfiltro
		sql = (query.replace('\n',' ')).replace('\t',' ')
		cu = r_cngcmex.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		escriturado, noescriturado, total = 0, 0, 0
		if rows:
			lctrl.InsertColumn(0, u"Id", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(1, u"Cuenta", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(2, u"Lote", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(3, u"Etapa")
			lctrl.InsertColumn(4, u"Cliente")
			for fila, row in enumerate(rows):
				if str(row[5]) == "S":
					if fila %2 != 0: bgcolor = [150,204,150]
					else:            bgcolor = [200,230,200]
					escriturado += 1
				else:
					if fila %2 != 0: bgcolor = [230,230,255]
					else:            bgcolor = [204,204,255]
					noescriturado += 1

				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, str(row[1]))
				lctrl.SetStringItem(index, 2, self.GetString(row[2]))
				lctrl.SetStringItem(index, 3, self.GetString(row[3]))
				lctrl.SetStringItem(index, 4, self.GetString(row[4]))
				lctrl.SetItemData(index, row[0])

			total = escriturado + noescriturado
			lctrl.SetColumnWidth(0, 70)
			lctrl.SetColumnWidth(1, 70)
			lctrl.SetColumnWidth(2, 90)
			lctrl.SetColumnWidth(3, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(4, wx.LIST_AUTOSIZE)
			lctrl.SetItemState(0, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
			lctrl.EnsureVisible(0)
		else:
			lctrl.InsertColumn(0, "       No se Encontr� Informaci�n", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 200)
			self.GetControl(ID_BUTTONESCRITURAFUNC1ELEGIR).Enable(False)

		self.GetControl(ID_TEXTCTRLESCRITURAFUNC1ESCRITURADO).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLESCRITURAFUNC1NOESCRITURADO).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLESCRITURAFUNC1TOTALINMUEBLES).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLESCRITURAFUNC1ESCRITURADO).SetValue(str(escriturado))
		self.GetControl(ID_TEXTCTRLESCRITURAFUNC1NOESCRITURADO).SetValue(str(noescriturado))
		self.GetControl(ID_TEXTCTRLESCRITURAFUNC1TOTALINMUEBLES).SetValue(str(total))
		
		lctrl.SetFocus()
		wx.EndBusyCursor()
				
class GixEstadoCuentaPinaresFunc2(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = "", pos = wx.DefaultPosition, size = wx.DefaultSize,
	             style = wx.DEFAULT_DIALOG_STYLE, usuario = None, cuenta = None):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.parent = parent
		self.usuario = usuario
		self.cuenta = cuenta
		self.currentdocumento, self.documento, self.currentrecibo, self.consecutivorecibo = 0, 0, 0, 0
		#panel = wx.Panel(self, -1)
		EstadoCuentaPinaresFunc2(self)
		self.DicDatesAndTxt = {ID_BITMAPBUTTONESTADOCUENTAPINARESFUNC2ELEGIRFECHAHASTA : ID_TEXTCTRLESTADOCUENTAPINARESFUNC2FECHAHASTA}
		self.ObtenerEncabezado()
		self.GetControl(ID_TEXTCTRLESTADOCUENTAPINARESFUNC2FECHAHASTA).SetValue(self.GetDate())
		for v in self.DicDatesAndTxt.keys():
			self.Bind(wx.EVT_BUTTON, self.OnFechaButton, id = v )

		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelectedDocumento, id = ID_LISTCTRLESTADOCUENTAPINARESFUNC2)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselectedDocumento, id = ID_LISTCTRLESTADOCUENTAPINARESFUNC2)
		self.Bind(wx.EVT_TEXT, self.OnRefrescar, id = ID_TEXTCTRLESTADOCUENTAPINARESFUNC2FECHAHASTA)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONESTADOCUENTAPINARESFUNC2ELEGIRFECHAHOY, self.OnElegirFechaHoy)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONESTADOCUENTAPINARESFUNC2HASTAFINAL, self.OnHastaFinal)
		wx.EVT_BUTTON(self, ID_BUTTONESTADOCUENTAPINARESFUNC2REFRESCAR, self.OnRefrescar)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONESTADOCUENTAPINARESFUNC2EXCEL, self.OnExcel)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONESTADOCUENTAPINARESFUNC2IMPRIMIR, self.OnImprimir)
		wx.EVT_BUTTON(self, ID_BUTTONESTADOCUENTAPINARESFUNC2SALIR, self.OnClose)
		wx.EVT_CLOSE(self, self.OnClose)
		self.FillListCtrl()
		
	def OnClose(self, evt):
	        self.EndModal(1)
		self.Destroy()
		
	def GetDate(self):
		cu = r_cngcmex.cursor()
		cu.execute("select convert(varchar(10), getdate(), 103)")
		row = fetchone(cu)
		cu.close()
		return str(row[0])
	
	def OnElegirFechaHoy(self, evt):
		self.GetControl(ID_TEXTCTRLESTADOCUENTAPINARESFUNC2FECHAHASTA).SetValue(self.GetDate())
		
	def OnHastaFinal(self, evt):
		self.GetControl(ID_TEXTCTRLESTADOCUENTAPINARESFUNC2FECHAHASTA).SetValue("Final")
		
	def OnRefrescar(self, evt):
		self.FillListCtrl()
		
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
				
		return dato.strip()
	
	def GetEncode(self, valor):
		dato = ""
		try:
			dato = valor.encode("iso8859-1")
		except:
			dato = valor
			
		return dato.strip()
		
	def ObtenerEncabezado(self):
		control = self.GetControl(ID_TEXTESTADOCUENTAPINARESFUNC2ENCABEZADO)
		control.Enable(False)
		control.Show(False)
		control.SetLabel(u"Error, no se localiz� informaci�n de la cuenta")
		sql = """
		select i.iden1, i.iden2, e.descripcion, t.nombre from CUENTA c
		join INMUEBLE i on c.fk_inmueble = i.codigo
		join ETAPA e on i.fk_etapa = e.codigo
		join CLIENTE t on c.fk_cliente = t.codigo
		where c.codigo = %s
		""" % self.cuenta
		cu = r_cngcmex.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row is not None:
			encabezado = u"Cuenta %s - %s%s %s - %s" % (self.cuenta, self.GetString(row[0]), self.GetString(row[1]), \
			                                            self.GetString(row[2]), self.GetString(row[3]))
			self.cuentainmueble = u"Cuenta %s - %s%s %s" % (self.cuenta, self.GetString(row[0]), self.GetString(row[1]), \
			                                                self.GetString(row[2]))
			self.cuentacliente = u"%s" % self.GetString(row[3])
			control.SetLabel(encabezado)
			
		control.Show(True)
		control.Enable(True)
		
	def OnSelectedDocumento(self, evt):
		self.currentdocumento = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLESTADOCUENTAPINARESFUNC2).GetItem(self.currentdocumento, 0).GetText()
		self.documento = int(datointerno)
		
	def OnDeselectedDocumento(self, evt):
		self.currentitem, self.documento = 0, 0
		
	def FillListCtrl(self, excel = False):
		if not excel:
			wx.BeginBusyCursor()
			lctrl = self.GetControl(ID_LISTCTRLESTADOCUENTAPINARESFUNC2)
			lctrl.ClearAll()
			
		filtrofecha1, filtrofecha2 = "", ""
		if self.GetControl(ID_TEXTCTRLESTADOCUENTAPINARESFUNC2FECHAHASTA).GetValue() != "Final":
			d, m, a = self.GetControl(ID_TEXTCTRLESTADOCUENTAPINARESFUNC2FECHAHASTA).GetValue().split('/')
			filtrofecha1 = "and d.fechadevencimiento <= '%04d/%02d/%02d'" % (int(a), int(m), int(d))
			filtrofecha2 = "and r.fechaemision <= '%04d/%02d/%02d'" % (int(a), int(m), int(d))
			
		query = """
		select m.codigo as movimiento, d.fechadevencimiento as fecha,
		d.codigo as documento, 0 as recibo, 0 as consdesarrollo, m.cantidad as cargo, 0 as abono,
		isnull(m.relaciondepago, '') as relacionpago, '' as referencia, convert(varchar(10), d.fechadevencimiento, 103),
		d.saldo as saldo, 0 as interesmoratorio
		from documento d
		join movimiento m on m.fk_documento = d.codigo
		where d.fk_cuenta = %s and m.cargoabono = 'C' %s
		union
		select m.codigo as movimiento, r.fechaemision as fecha,
		d.codigo as documento, r.codigo as recibo, r.consdesarrollo as consdesarrollo, 0 as cargo, m.cantidad as abono,
		isnull(m.relaciondepago,'') as relacionpago, r.referencia as referencia, convert(varchar(10), r.fechaemision, 103),
		0 as saldo, r.interesmoratorio as interesmoratorio
		from recibo r
		join movimiento m on m.numrecibo = r.codigo
		join documento d on d.codigo = m.fk_documento
		where d.fk_cuenta = %s and m.cargoabono = 'A' and r.status = 'A' %s
		order by 2
		""" % (self.cuenta, filtrofecha1, self.cuenta, filtrofecha2)
		
		sql = (query.replace('\t', ' ')).replace('\n', ' ')
		cu = r_cngcmex.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if excel:
			return rows
		
		fila, totalcargos, totalabonos, totalsaldo, totalinteres = 0, 0.00, 0.00, 0.00, 0.00
		if rows:
			lctrl.InsertColumn(0, u"Movimiento", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"Fecha", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(2, u"Documento", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(3, u"Recibo", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(4, u"Relaci�n", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(5, u"Cargo", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(6, u"Abono", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(7, u"Saldo Documento", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(8, u"Saldo de la Cuenta", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(9, u"Interes Moratorio", wx.LIST_FORMAT_RIGHT)
			#lctrl.InsertColumn(9, u"Referencia")
			for row in rows:
				recibo = ''
				if int(row[3]) > 0:
					recibo = '%s-%s' % (int(row[3]), int(row[4]))
					
				cargo = ''
				if float(row[5]) > 0:
					cargo = float(row[5])
					totalcargos += cargo
					totalsaldo += cargo

				abono = ''
				if float(row[6]) > 0:
					abono = float(row[6])
					totalabonos += abono
					totalsaldo -= abono
					
				if fila %2 != 0:
					bgcolor = [204,204,255]
				else:
					bgcolor = [230,230,255]

				if recibo:
					txcolor = [169,10,10]
					saldodocto = ''
				else: 
					txcolor = [0,0,0]
					saldodocto = float(row[10])
					
				interesmoratorio = ''
				if float(row[11]) > 0:
					interesmoratorio = float(row[11])
					totalinteres += interesmoratorio
					
				if round(totalsaldo, 2) == 0.00:
					totalsaldo = 0.00
					
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetItemTextColour(index, wx.Colour(txcolor[0], txcolor[1], txcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, str(row[9]))
				lctrl.SetStringItem(index, 2, str(row[2]))
				lctrl.SetStringItem(index, 3, recibo)
				lctrl.SetStringItem(index, 4, self.GetString(row[7]))
				lctrl.SetStringItem(index, 5, str(amount_and_cents_with_commas(cargo)))
				lctrl.SetStringItem(index, 6, str(amount_and_cents_with_commas(abono)))
				lctrl.SetStringItem(index, 7, str(amount_and_cents_with_commas(saldodocto)))
				lctrl.SetStringItem(index, 8, str(amount_and_cents_with_commas(totalsaldo)))
				lctrl.SetStringItem(index, 9, str(amount_and_cents_with_commas(interesmoratorio)))
				#lctrl.SetStringItem(index, 9, self.GetString(row[8]))
				lctrl.SetItemData(index, row[0])
				fila += 1
				
			lctrl.SetColumnWidth(0, 80)
			lctrl.SetColumnWidth(1, 95)
			lctrl.SetColumnWidth(2, 80)
			lctrl.SetColumnWidth(3, 120)
			lctrl.SetColumnWidth(4, 140)
			lctrl.SetColumnWidth(5, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(6, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(7, 110)
			lctrl.SetColumnWidth(8, 110)
			lctrl.SetColumnWidth(9, 110)
			#lctrl.SetColumnWidth(9, wx.LIST_AUTOSIZE)
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Documentos", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 200)
			
		self.GetControl(ID_TEXTCTRLESTADOCUENTAPINARESFUNC2TOTALMOVIMIENTOS).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLESTADOCUENTAPINARESFUNC2TOTALMOVIMIENTOS).SetValue(str(int(fila)))
		self.GetControl(ID_TEXTCTRLESTADOCUENTAPINARESFUNC2TOTALCARGOS).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLESTADOCUENTAPINARESFUNC2TOTALCARGOS).SetValue(str(amount_and_cents_with_commas(totalcargos)))
		self.GetControl(ID_TEXTCTRLESTADOCUENTAPINARESFUNC2TOTALABONOS).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLESTADOCUENTAPINARESFUNC2TOTALABONOS).SetValue(str(amount_and_cents_with_commas(totalabonos)))
		self.GetControl(ID_TEXTCTRLESTADOCUENTAPINARESFUNC2TOTALSALDO).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLESTADOCUENTAPINARESFUNC2TOTALSALDO).SetValue(str(amount_and_cents_with_commas(totalsaldo)))
		self.GetControl(ID_TEXTCTRLESTADOCUENTAPINARESFUNC2TOTALINTERES).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLESTADOCUENTAPINARESFUNC2TOTALINTERES).SetValue(str(amount_and_cents_with_commas(totalinteres)))
		wx.EndBusyCursor()
		
	def SetExcelWorkbook(self, excel = "gixreport.xls"):
		todobien = True
		self.excel = excel
		if wx.Platform == '__WXMSW__':
			key = _winreg.OpenKey( _winreg.HKEY_CURRENT_USER,
			                       "Software\\Microsoft\\Windows\\CurrentVersion\Explorer\\Shell Folders")
			ruta = _winreg.QueryValueEx( key, 'Personal')[0]
			_winreg.CloseKey( key )
		else:
			ruta = os.getenv("HOME")
			
		dlg = wx.FileDialog(None, message = "Guardar como...", defaultDir = ruta, defaultFile = self.excel,
		                    wildcard ="*.xls", style = wx.SAVE | wx.FD_OVERWRITE_PROMPT) #| wx.CHANGE_DIR)
		
		if dlg.ShowModal() == wx.ID_OK:
			self.excel = dlg.GetPath().encode("iso8859-1")
		else:
			todobien = False
			
		dlg.Destroy()
		
		return todobien

	def GenerateExcelWithXle(self, rows = None):
		columnas = ((3000, u"Movimiento"), (3000, u"Fecha"), (3000, u"Documento"), (3500, u"Recibo"),
		        (6000, u"Relaci�n"), (3000, u"Cargo"), (3000, u"Abono"), (4000, u"Saldo Documento"),
		        (5000, u"Saldo de la Cuenta"), (4000, u"Interes Moratorio"))
		workbook = xle.Workbook()
		worksheet = workbook.add_sheet("EstadoCuenta")
		for columna, detalle in enumerate(columnas):
			worksheet.col(columna).width = detalle[0]
			worksheet.write(0, columna, detalle[1])
					
		al = xle.Alignment()
		al.horz = xle.Alignment.HORZ_CENTER
		fnt = xle.Font()
		fnt.bold = True
		fnt.italic = True
		style = xle.XFStyle()
		style.alignment = al
		style.font = fnt
		worksheet.row(0).set_style(style)
		
		date_style = xle.XFStyle()
		date_style.alignment = al
		date_style.num_format_str = "M/D/YY"

		num_style = xle.XFStyle()
		num_style.alignment = al
		num_style.num_format_str = "0"
		
		alr = xle.Alignment()
		alr.horz = xle.Alignment.HORZ_RIGHT
		dec_style = xle.XFStyle()
		dec_style.alignment = alr
		dec_style.num_format_str = "0.00"
		
		gral_style = xle.XFStyle()
		gral_style.alignment = al
		
		progreso = 0
		signo = u"%"
		totalcargos, totalabonos, totalsaldo, totalinteres = 0.00, 0.00, 0.00, 0.00
		for fila, row in enumerate(rows):
			progreso += 1
			avance = (progreso * 100) / len(rows)
			mensaje = u"Progreso %s%s" % (avance, signo)
			self.dlgProgreso.Update(progreso, newmsg = mensaje)
			recibo = ''
			if int(row[3]) > 0:
				recibo = '%s-%s' % (int(row[3]), int(row[4]))
				
			cargo = ''
			if float(row[5]) > 0:
				cargo = round(float(row[5]), 2)
				totalcargos += cargo
				totalsaldo += cargo

			abono = ''
			if float(row[6]) > 0:
				abono = round(float(row[6]), 2)
				totalabonos += abono
				totalsaldo -= abono
				
			if recibo:
				#txcolor = [169,10,10]
				saldodocto = ''
			else: 
				#txcolor = [0,0,0]
				saldodocto = round(float(row[10]), 2)
				
			interesmoratorio = ''
			if float(row[11]) > 0:
				interesmoratorio = round(float(row[11]), 2)
				totalinteres += interesmoratorio
				
			if round(totalsaldo, 2) == 0.00:
				totalsaldo = 0.00

			worksheet.write(fila + 1, 0, str(int(row[0])), num_style)
			worksheet.write(fila + 1, 1, str(row[9]), date_style)
			worksheet.write(fila + 1, 2, str(int(row[2])), num_style)
			worksheet.write(fila + 1, 3, str(recibo), gral_style)
			worksheet.write(fila + 1, 4, self.GetString(row[7]), gral_style)
			worksheet.write(fila + 1, 5, str(amount_and_cents_with_commas(cargo)), dec_style)
			worksheet.write(fila + 1, 6, str(amount_and_cents_with_commas(abono)), dec_style)
			worksheet.write(fila + 1, 7, str(amount_and_cents_with_commas(saldodocto)), dec_style)
			worksheet.write(fila + 1, 8, str(amount_and_cents_with_commas(totalsaldo)), dec_style)
			worksheet.write(fila + 1, 9, str(amount_and_cents_with_commas(interesmoratorio)), dec_style)

		workbook.save(self.excel)

	def OnExcel(self, evt):
		rows = self.FillListCtrl(excel = True)
		if rows:
			if self.SetExcelWorkbook("gixestadocuenta%s.xls" % self.cuenta):
				continua = True
				try:
					xle
				except:
					continua = False
					Mensajes().Info(self, u"Por favor instale el m�dulo pyExcelerator", u"Atenci�n")
					
				if continua:
					wx.BeginBusyCursor()
					self.dlgProgreso = wx.ProgressDialog(u"Generando Archivo de Excel", u"Progreso",
						                        maximum = len(rows),
						                        style = wx.PD_AUTO_HIDE | wx.PD_APP_MODAL | wx.PD_SMOOTH | \
						                        wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_REMAINING_TIME)
					self.GenerateExcelWithXle(rows)
					self.dlgProgreso.Destroy()
					wx.EndBusyCursor()
		else:
			Mensajes().Info(self, u"No hay nada que enviar a Excel", u"Atenci�n")
						
	def ImprimirEstadoCuenta(self, rows):
		try:
			pisa
		except:
			Mensajes().Info(self, u"� Por favor instale el m�dulo pisa !", u"Aviso")
			return
		    
		try:
			wx.BeginBusyCursor()
			gridcontenthtml = self.GetHtmlEstadoCuenta(rows)
			if gridcontenthtml:
				archivo = self.GetPdfFileName("edocta")
				gridcontenthtml = gridcontenthtml.encode("utf-8")
				pdf = pisa.CreatePDF(cStringIO.StringIO(gridcontenthtml), file(archivo, "wb"))
				if not pdf.err:
					try:
						pdf.dest.close()
					except:
						warnings.warn("<<pdf.dest.close() no se pudo.>>")
					try:
						os.startfile(str(archivo))
					except:						
						commmand_line = "open %s" % archivo
						p = subprocess.Popen(commmand_line, shell = True)
						pid, sts = os.waitpid(p.pid, 0)						
						
				wx.EndBusyCursor()
			else:
				wx.EndBusyCursor()
				Mensajes().Info(self, u"� No se encontr� informaci�n referente al estado de cuenta !", u"Atenci�n")
		except:
			wx.EndBusyCursor()
			Mensajes().Info(self, u"� Se presento un problema al imprimir el estado de cuenta !", u"Atenci�n")
			
	def GetHtmlEstadoCuenta(self, rows):
		if rows:
			meses = ("", "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto",
			         "Septiembre", "Octubre", "Noviembre", "Diciembre")
			encabezado = self.GetControl(ID_TEXTESTADOCUENTAPINARESFUNC2ENCABEZADO).GetLabel()
			fechahasta = self.GetControl(ID_TEXTCTRLESTADOCUENTAPINARESFUNC2FECHAHASTA).GetValue()
			if fechahasta != "Final":
				d, m, a = fechahasta.split("/")
				fecha = "%02d de %s de %04d" % (int(d), meses[int(m)], int(a))
			else:
				fecha = "Hasta el Ultimo Movimiento"
				
			w = 213; h = 160
				
			header = """
			<table
			style="width: 993px; height: 200px; text-align: left; margin-left: auto; margin-right: auto;"
			border="0" cellpadding="2" cellspacing="2">
			<tbody>
			<tr>
			<td style="text-align: center;">
			  <IMG SRC="images/LogoPinares2009.jpg" NAME="Logo" ALIGN=LEFT
			  WIDTH=""" + str(w) + """ HEIGHT=""" + str(h) + """ BORDER=0>
			</td>
			<td style="text-align: center; vertical-align: middle;"><big><big><big><span
			style="font-weight: bold;"></span></big></big><big
			style="font-weight: bold;"><big><small><small><big><big>ESTADO DE CUENTA</big></big><br>
			</small></small></big></big></big></td>
			</tr>
			</tbody>
			</table>
			<div style="text-align: right;"><big><big>&nbsp;<small>Fecha de Corte:<span
			style="font-weight: bold;">&nbsp;""" + fecha + """<br>
			<small>(%page%)</small><br>
			</span></small></big></big></div>
			<hr style="width: 100%; height: 2px;">
			<div style="text-align: center; font-weight: bold;"><big><big><big><span
			style="font-weight: normal;"></span><small>""" + self.cuentacliente.encode("iso8859-1") + """<br>
			""" + self.cuentainmueble.encode("iso8859-1") + """</small><br>
			</big></big></big>
			<div style="text-align: center;"><big><big><big><small><span
			style="font-style: italic;">Saldo: ${saldo}</span></small></big></big></big><br>
			<big><big><big></big></big></big></div>
			</div>
			<hr style="height: 1px; width: 100%;" noshade="noshade">
			<table
			style="text-align: left; width: 100%; margin-left: auto; margin-right: auto;"
			border="0" cellpadding="2" cellspacing="2">
			<tbody>
			<tr>
			<td
			style="vertical-align: middle; text-align: center; font-weight: bold;">Fecha<br>
			</td>
			<td
			style="vertical-align: middle; text-align: center; font-weight: bold;">Documento<br>
			</td>
			<td
			style="vertical-align: middle; text-align: center; font-weight: bold;">Recibo<br>
			</td>
			<td
			style="vertical-align: middle; text-align: center; font-weight: bold;">Relaci�n<br>
			</td>
			<td
			style="vertical-align: middle; text-align: right; font-weight: bold;">Cargo<br>
			</td>
			<td
			style="vertical-align: middle; text-align: right; font-weight: bold;">Abono<br>
			</td>
			<td
			style="vertical-align: middle; text-align: center; font-weight: bold;">Saldo
			Documento<br>
			</td>
			<td
			style="vertical-align: middle; text-align: center; font-weight: bold;">Saldo
			de la Cuenta<br>
			</td>
			</tr>
			</tbody>
			</table>
			"""
				
			aux = len(rows) / 34.0
			pages = int(aux)
			if (aux - int(aux)) > 0:
				pages += 1

			lines = 0; page = 1
			detail = header.replace('%page%', 'Hoja ' + str(page) + ' de ' + str(pages))
			totalcargos, totalabonos, totalsaldo, totalinteres = 0.00, 0.00, 0.00, 0.00
			progreso = 0; signo = u"%"
			for row in rows:
				progreso += 1
				avance = (progreso * 100) / len(rows)
				mensaje = u"Progreso %s%s" % (avance, signo)
				self.dlgProgreso.Update(progreso, newmsg = mensaje)
				
				tag = ''; lines += 1
				if lines > 33:
					tag = '<div><h1></div>'
					lines = 0
					page += 1
					
				recibo = ''
				if int(row[3]) > 0:
					recibo = '%s-%s' % (int(row[3]), int(row[4]))
					
				cargo = ''
				if float(row[5]) > 0:
					cargo = round(float(row[5]), 2)
					totalcargos += cargo
					totalsaldo += cargo
	
				abono = ''
				if float(row[6]) > 0:
					abono = round(float(row[6]), 2)
					totalabonos += abono
					totalsaldo -= abono
					
				if recibo:
					#txcolor = [169,10,10]
					saldodocto = ''
				else: 
					#txcolor = [0,0,0]
					saldodocto = round(float(row[10]), 2)
					
				interesmoratorio = ''
				if float(row[11]) > 0:
					interesmoratorio = round(float(row[11]), 2)
					totalinteres += interesmoratorio
	
				if round(totalsaldo, 2) == 0.00:
					totalsaldo = 0.00
					
				relacion = row[7]
				if row[7].startswith("Pagar"):
					relacion = "Enganche"
					
				line = """
				<table style="text-align: left; width: 100%;" border="0" cellpadding="2"
				cellspacing="2">
				<tbody>
				<tr>
				<td style="vertical-align: top; text-align: center;">""" + str(row[9]) + """<br>
				</td>
				<td style="vertical-align: top; text-align: center;">""" + str(int(row[2])) + """<br>
				</td>
				<td style="vertical-align: top; text-align: center;">""" + recibo + """<br>
				</td>
				<td style="vertical-align: top; text-align: center;">""" + relacion + """<br>
				</td>
				<td style="vertical-align: top; text-align: right;">""" + str(amount_and_cents_with_commas(cargo)) + """<br>
				</td>
				<td style="vertical-align: top; text-align: right;">""" + str(amount_and_cents_with_commas(abono)) + """<br>
				</td>
				<td style="vertical-align: top; text-align: right;">""" + str(amount_and_cents_with_commas(saldodocto)) + """<br>
				</td>
				<td style="vertical-align: top; text-align: right;">""" + str(amount_and_cents_with_commas(totalsaldo)) + """<br>
				</td>
				</tr>
				</tbody>
				</table>
				"""

				detail += line + tag
				if tag:
					detail += header.replace('%page%', 'Hoja ' +  str(page) + ' de ' + str(pages))

			d = ((detail.replace('\n',' ')).replace('\t',' ')).replace('${saldo}', str(amount_and_cents_with_commas(totalsaldo)))
			
			jump = '<style>@media print {h1 {page-break-before:always}}</style>'
			
			html = '<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" />' + jump + \
			     '</head><body>' + d + '</body></html>'
			
			return u"%s" % html.decode("iso8859-1")
		else:
			return ""
		
	def OnImprimir(self, evt):
		rows = self.FillListCtrl(excel = True)
		if rows:
			self.dlgProgreso = wx.ProgressDialog(u"Generando Estado de Cuenta", u"Progreso",
		                                        maximum = len(rows),
		                                        style = wx.PD_AUTO_HIDE | wx.PD_APP_MODAL | wx.PD_SMOOTH | \
		                                        wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_REMAINING_TIME)
			self.ImprimirEstadoCuenta(rows)
			self.dlgProgreso.Destroy()
		else:
			Mensajes().Info(self, u"No hay nada que imprimir", u"Atenci�n")
			
class GixEstadoCuentaPinaresFunc1(wx.Frame, GixBase):
	def __init__(self, parent, id = -1, title = "", pos = wx.DefaultPosition, size = wx.DefaultSize,
	             style = wx.DEFAULT_FRAME_STYLE, usuario = None):
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		self.lstctrlorder = {0:("c.codigo","desc",""), 1:("c.fecha","desc","> "), 2:("i.iden1, i.iden2","desc",""),
		                     3:("i.iden2, i.iden1","desc",""), 4:("c.saldo","desc",""), 5:("e.descripcion","desc",""),
		                     6:("t.nombre","desc","")}
		self.DicDatesAndTxt = {ID_BITMAPBUTTONESTADOCUENTAPINARESFUNC1FECHAINICIALELEGIR : ID_TEXTCTRLESTADOCUENTAPINARESFUNC1FECHAINICIALFILTRO,
				       ID_BITMAPBUTTONESTADOCUENTAPINARESFUNC1FECHAFINALELEGIR : ID_TEXTCTRLESTADOCUENTAPINARESFUNC1FECHAFINALFILTRO}
		self.usuario = usuario
		self.cliente = ""
		self.empresa, self.desarrollo = 1, 5
		self.currentitem, self.cuenta, self.etapa = 0, 0, 0
		panel = wx.Panel(self, -1)
		EstadoCuentaPinaresFunc1(panel)
		self.colprev, self.colsort = 1, 1
		self.lstctrlsort = "c.fecha desc"
		self.choicefiltroinmueble = {0:"c.congelada = 0", 1:"c.saldo > 0 and c.congelada = 0",
		                             2:"c.saldo = 0 and c.congelada = 0", 3:"c.saldo < 0 and c.congelada = 0",
		                             4:"c.saldo > 0 and c.congelada = 0", 5:"c.congelada = 1"}
		
		self.choiceinxinmueble = 1
		self.GetControl(ID_CHOICEESTADOCUENTAPINARESFUNC1INMUEBLEFILTRO).SetSelection(self.choiceinxinmueble)
		self.Bind(wx.EVT_CHOICE, self.OnChoiceCtrlInmueble, id = ID_CHOICEESTADOCUENTAPINARESFUNC1INMUEBLEFILTRO)
		
		self.ObtenerEtapas()
		self.Bind(wx.EVT_CHOICE, self.OnChoiceCtrlEtapa, id = ID_CHOICEESTADOCUENTAPINARESFUNC1ETAPAFILTRO)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONESTADOCUENTAPINARESFUNC1LIMPIARETAPAFILTRO, self.OnLimpiarEtapaFiltro)
		
		for v in self.DicDatesAndTxt.keys():
			self.Bind(wx.EVT_BUTTON, self.OnFechaButton, id = v )
			
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONESTADOCUENTAPINARESFUNC1FECHAINICIALLIMPIAR, self.OnLimpiaFecha)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONESTADOCUENTAPINARESFUNC1FECHAFINALLIMPIAR, self.OnLimpiaFecha)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLESTADOCUENTAPINARESFUNC1FECHAINICIALFILTRO)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLESTADOCUENTAPINARESFUNC1FECHAFINALFILTRO)
		
		self.GetControl(ID_SEARCHCTRLESTADOCUENTAPINARESFUNC1CLIENTEFILTRO).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchCliente, id = ID_SEARCHCTRLESTADOCUENTAPINARESFUNC1CLIENTEFILTRO)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanCliente, id = ID_SEARCHCTRLESTADOCUENTAPINARESFUNC1CLIENTEFILTRO)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchCliente, id = ID_SEARCHCTRLESTADOCUENTAPINARESFUNC1CLIENTEFILTRO)
		
		self.Bind(wx.EVT_LIST_COL_CLICK, self.OnSortListCtrl, id = ID_LISTCTRLESTADOCUENTAPINARESFUNC1)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelected, id = ID_LISTCTRLESTADOCUENTAPINARESFUNC1)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselected, id = ID_LISTCTRLESTADOCUENTAPINARESFUNC1)
		self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnEdit, id = ID_LISTCTRLESTADOCUENTAPINARESFUNC1)

		if self.usuario in ('CESAR', 'ADRIANA'):
			self.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.OnRClick, id = ID_LISTCTRLESTADOCUENTAPINARESFUNC1)
		
		wx.EVT_BUTTON(self, ID_BUTTONESTADOCUENTAPINARESFUNC1REFRESCAR, self.OnRefrescar)
		wx.EVT_BUTTON(self, ID_BUTTONESTADOCUENTAPINARESFUNC1EDITAR, self.OnEdit)
		wx.EVT_BUTTON(self, ID_BUTTONESTADOCUENTAPINARESFUNC1SALIR, self.OnClose)
		wx.EVT_CLOSE(self, self.OnClose)
		
		self.GetControl(ID_LISTCTRLESTADOCUENTAPINARESFUNC1).SetFocus()
		self.FillListCtrl()
		
	def OnClose(self, evt):
		self.Destroy()
		
	def OnRefrescar(self, evt):
		self.FillListCtrl()
		
	def OnRClick( self, evt ):
		menu = wx.Menu()
		self.Bind(wx.EVT_MENU, self.OnCancelar, menu.Append( -1, u"Cancelar cuenta"))
		self.Bind(wx.EVT_MENU, self.OnInfoCliente, menu.Append( -1, u"M�s sobre cliente..."))
		self.PopupMenu( menu )
		
	def OnCancelar( self, evt ):
		sql = "select i.iden1, i.iden2, i.fk_etapa, i.codigo from cuenta c join inmueble i on c.fk_inmueble = i.codigo where c.codigo = %s" % ( self.cuenta, )
		cu = r_cngcmex.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		etapas = { 8: 1, 9: 2, 10: 3, 33: 4 }
		etapa = etapas[int(row[2])]
		sql1 = """delete recibo where codigo in ( 
		select numrecibo from movimiento where fk_documento in (
		select codigo from documento where fk_cuenta = %s ))
		""" % ( self.cuenta , )
		sql1 = sql1.replace("\t", " " )
		sql1 = sql1.replace("\n", " " )
		sql2 = """ delete movimiento where fk_documento in (
		select codigo from documento where fk_cuenta = %s )
		""" % ( self.cuenta, )
		sql2 = sql2.replace("\t", " " )
		sql2 = sql2.replace("\n", " " )
		sql3 = "delete documento where fk_cuenta = %s " % ( self.cuenta , )
		sql4 = "exec Cancela_CuentaSP %s, %s" % ( self.cuenta, row[3])
		if row and Mensajes().YesNo(self,u"� Desea cancelar la cuenta %s \n del terreno %s %s etapa %s ?" %(self.cuenta, row[0],row[1], etapa), u"Cancelaci�n"):
			cu = r_cngcmex.cursor()
			cu.execute(str(sql1))
			cu.execute(str(sql2))
			cu.execute(str(sql3))
			cu.execute(str(sql4))
			cu.close()
			r_cngcmex.commit()
			
			Mensajes().Info(self, u"La cuenta ha sido eliminada", u"Atenci�n")
			#Mensajes().Info(self, u"Cuando esta opci�n funcione la cuenta %s ser� cancelada\n y se har� un repoblamiento del listview" % ( self.cuenta ), u"Atenci�n")
			self.FillListCtrl()
		return
		
	def OnInfoCliente( self, evt):
		Mensajes().Info(self,u"En construcci�n", u"Atenci�n")
		
		
	def ObtenerEtapas(self):
		control = self.GetControl(ID_CHOICEESTADOCUENTAPINARESFUNC1ETAPAFILTRO)
		control.Clear()
		sql = """
		select codigo, descripcion from ETAPA
		where fk_desarrollo = %s order by codigo
		""" % self.desarrollo
		cu = r_cngcmex.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(str(row[1]).decode("iso8859-1"), int(row[0]))
				
		control.SetSelection(-1)
		
	def OnChoiceCtrlEtapa(self, evt):
		choiceinxetapa = self.GetControl(ID_CHOICEESTADOCUENTAPINARESFUNC1ETAPAFILTRO).GetSelection()
		self.etapa = self.GetControl(ID_CHOICEESTADOCUENTAPINARESFUNC1ETAPAFILTRO).GetClientData(choiceinxetapa)
		self.FillListCtrl()
		self.GetControl(ID_LISTCTRLESTADOCUENTAPINARESFUNC1).SetFocus()
		
	def OnLimpiarEtapaFiltro(self, evt):
		self.GetControl(ID_CHOICEESTADOCUENTAPINARESFUNC1ETAPAFILTRO).SetSelection(SetChoiceIndex())
		self.etapa = 0
		self.FillListCtrl()
		
	def OnChoiceCtrlInmueble(self, evt):
		self.choiceinxinmueble = self.GetControl(ID_CHOICEESTADOCUENTAPINARESFUNC1INMUEBLEFILTRO).GetSelection()
		self.FillListCtrl()
		self.GetControl(ID_LISTCTRLESTADOCUENTAPINARESFUNC1).SetFocus()
		
	def OnText(self, evt):
		id = evt.GetId()
		if id == ID_TEXTCTRLESTADOCUENTAPINARESFUNC1FECHAINICIALFILTRO:
			self.Habilita()
			
		self.FillListCtrl()
		
	def OnLimpiaFecha(self, evt):
		id = evt.GetId()
		if id == ID_BITMAPBUTTONESTADOCUENTAPINARESFUNC1FECHAINICIALLIMPIAR:
			self.GetControl(ID_TEXTCTRLESTADOCUENTAPINARESFUNC1FECHAINICIALFILTRO).SetValue("")
			self.GetControl(ID_TEXTCTRLESTADOCUENTAPINARESFUNC1FECHAFINALFILTRO).SetValue("")
			self.Habilita()
		else:
			self.GetControl(ID_TEXTCTRLESTADOCUENTAPINARESFUNC1FECHAFINALFILTRO).SetValue("")
			
		self.FillListCtrl()
		
	def OnSelected(self, evt):
		self.currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLESTADOCUENTAPINARESFUNC1).GetItem(self.currentitem, 0).GetText()
		self.cuenta = int(datointerno)
		self.GetControl(ID_BUTTONESTADOCUENTAPINARESFUNC1EDITAR).Enable(True)
		tooltip = u"Consulta del Estado de Cuenta %s" % self.cuenta
		self.GetControl(ID_BUTTONESTADOCUENTAPINARESFUNC1EDITAR).SetToolTip(wx.ToolTip(tooltip))
		
	def OnDeselected(self, evt):
		self.currentitem, self.cuenta = 0, 0
		self.GetControl(ID_BUTTONESTADOCUENTAPINARESFUNC1EDITAR).Enable(False)
		self.GetControl(ID_BUTTONESTADOCUENTAPINARESFUNC1EDITAR).SetToolTip(wx.ToolTip(""))
	
	def OnEdit(self, evt):
		titulo = u"Arcadia (Pinares Tapalpa) - Estado de Cuenta"
		dlg = GixEstadoCuentaPinaresFunc2(self, -1, titulo, wx.Point(20,20), wx.Size(1045,655),
		                                  usuario = self.usuario, cuenta = self.cuenta)
		dlg.Centre(wx.BOTH)
		dlg.ShowModal()
		
	def OnSortListCtrl(self, evt):
		self.colsort = evt.GetColumn()
		if self.lstctrlorder[self.colsort][1] == "desc":
			self.lstctrlsort = "%s asc" % self.lstctrlorder[self.colsort][0]
			self.lstctrlorder[self.colsort] = (self.lstctrlorder[self.colsort][0], "asc", "< ")
		else:
			self.lstctrlsort = "%s desc" % self.lstctrlorder[self.colsort][0]
			self.lstctrlorder[self.colsort] = (self.lstctrlorder[self.colsort][0], "desc", "> ")
			
		if self.colprev != self.colsort:
			self.lstctrlorder[self.colprev] = (self.lstctrlorder[self.colprev][0], self.lstctrlorder[self.colprev][1], "")
			
		self.FillListCtrl()
		self.colprev = self.colsort
		evt.Skip()
		
	def OnDoSearchCliente(self, evt):
		self.cliente =  self.GetControl(ID_SEARCHCTRLESTADOCUENTAPINARESFUNC1CLIENTEFILTRO).GetValue()
		self.FillListCtrl()

	def OnCleanCliente(self, evt):
		self.GetControl(ID_SEARCHCTRLESTADOCUENTAPINARESFUNC1CLIENTEFILTRO).SetValue("")
		self.cliente = ""
		self.FillListCtrl()
		
	def GetDate(self):
		cu = r_cngcmex.cursor()
		cu.execute("select convert(varchar(10), getdate(), 111)")
		row = fetchone(cu)
		cu.close()
		return str(row[0])
		
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
				
		return dato.strip()

	def FillListCtrl(self):
		wx.BeginBusyCursor()
		listctrlfiltro = ""
		fechafiltro = self.GetControl(ID_TEXTCTRLESTADOCUENTAPINARESFUNC1FECHAINICIALFILTRO).GetValue()
		if fechafiltro:
			try:
				fecha_dia, fecha_mes, fecha_ano = \
						 self.GetControl(ID_TEXTCTRLESTADOCUENTAPINARESFUNC1FECHAINICIALFILTRO).GetValue().split('/')
				fechainicial = "'%s/%02d/%02d'" % (fecha_ano, int(fecha_mes), int(fecha_dia))
				fecharango = self.GetControl(ID_TEXTCTRLESTADOCUENTAPINARESFUNC1FECHAFINALFILTRO).GetValue()
				if fecharango:
					rango_dia, rango_mes, rango_ano = \
							 self.GetControl(ID_TEXTCTRLESTADOCUENTAPINARESFUNC1FECHAFINALFILTRO).GetValue().split('/')
					fechafinal = "'%s/%02d/%02d'" % (rango_ano, int(rango_mes), int(rango_dia))
					if fechainicial > fechafinal:
						Mensajes().Info(self, u"La Fecha Inicial no debe ser mayor a la Fecha Final.\n\n" \
						                u"Se tomar� en cuenta unicamente la fecha inicial.", u"Atenci�n")
						self.GetControl(ID_TEXTCTRLESTADOCUENTAPINARESFUNC1FECHAFINALFILTRO).SetValue("")
						return
					else:
						listctrlfiltro = """
						and (convert(varchar(10), c.fecha, 111) >= %s
						and convert(varchar(10), c.fecha, 111) <= %s)
						""" % (fechainicial, fechafinal)
				else:
					listctrlfiltro = "and convert(varchar(10), c.fecha, 111) = %s" % fechainicial
			except:
				listctrlfiltro = ""
				
		#if self.choiceinxinmueble > 0:
		listctrlfiltro += " and %s" % str(self.choicefiltroinmueble[self.choiceinxinmueble])
			
		if self.cliente:
			listctrlfiltro += " and t.nombre like '%s%s%s'" % ("%%", str(self.cliente), "%%")
			
		if self.etapa:
			listctrlfiltro += " and e.codigo = %s" % int(self.etapa)
			
		query = """
		select c.codigo, convert(varchar(10), c.fecha, 103), i.iden1, i.iden2,
		c.saldo, rtrim(ltrim(e.descripcion)), rtrim(ltrim(t.nombre))
		from CUENTA c
		join CLIENTE t on c.fk_cliente = t.codigo
		join INMUEBLE i on c.fk_inmueble = i.codigo
		join ETAPA e on i.fk_etapa = e.codigo
		join DESARROLLO d on e.fk_desarrollo = d.codigo
		where d.codigo = %s and d.fk_empresa = %s
		%s order by %s
		""" % (self.desarrollo, self.empresa, listctrlfiltro, self.lstctrlsort)
		sql = (query.replace('\t', ' ')).replace('\n', ' ')
		cu = r_cngcmex.cursor()
		cu.execute(str(sql))
		cuentas = fetchall(cu)
		cu.close()
		rows = []
		if cuentas:
			if self.choiceinxinmueble == 4:
				fechadeldia = self.GetDate()
				cu = r_cngcmex.cursor()
				for cuenta in cuentas:
					query = """
					select sum(saldo) from documento
					where fk_cuenta = %s and fechadevencimiento < '%s'
					""" % (int(cuenta[0]), fechadeldia)
					sql = (query.replace('\t', ' ')).replace('\n', ' ')
					cu.execute(str(sql))
					saldo = fetchone(cu)
					if saldo is not None:
						if float(saldo[0]) > 0:
							rows.append((cuenta[0], cuenta[1], cuenta[2], cuenta[3],
							             saldo[0], cuenta[5], cuenta[6]))
					
				cu.close()
			else:
				rows = cuentas
		else:
			rows = cuentas
			
		fila, total = 0, 0
		lctrl = self.GetControl(ID_LISTCTRLESTADOCUENTAPINARESFUNC1)
		if lctrl.GetItemCount() > 0:
			lctrl.ClearAll()
			
		if rows:
			lctrl.InsertColumn(0, u"%sCuenta" % self.lstctrlorder[0][2], wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"%sCreaci�n" % self.lstctrlorder[1][2], wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(2, u"%sManzana" % self.lstctrlorder[2][2], wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(3, u"%sLote" % self.lstctrlorder[3][2], wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(4, u"%sSaldo" % self.lstctrlorder[4][2], wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(5, u"%sEtapa" % self.lstctrlorder[5][2])
			lctrl.InsertColumn(6, u"%sCliente" % self.lstctrlorder[6][2])
			for row in rows:
				if float(row[4]) > 0:
					if fila %2 != 0: bgcolor = [204,204,255]
					else:            bgcolor = [230,230,255]
				elif float(row[4]) == 0:
					if fila %2 != 0: bgcolor = [248,181,68]
					else:            bgcolor = [251,212,146]
				else:
					if fila %2 != 0: bgcolor = [255,153,153]
					else:            bgcolor = [255,215,215]
					
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				etapa = str(row[5].strip())
				cliente = str(row[6].strip())
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, str(row[1]))
				lctrl.SetStringItem(index, 2, self.GetString(row[2]))
				lctrl.SetStringItem(index, 3, str(row[3]))
				lctrl.SetStringItem(index, 4, str(amount_and_cents_with_commas(row[4])))
				lctrl.SetStringItem(index, 5, self.GetString(etapa))
				lctrl.SetStringItem(index, 6, self.GetString(cliente))
				lctrl.SetItemData(index, row[0])
				fila += 1
				total += float(row[4])
				
			lctrl.SetColumnWidth(0, 60)
			lctrl.SetColumnWidth(1, 90)
			lctrl.SetColumnWidth(2, 70)
			lctrl.SetColumnWidth(3, 70)
			lctrl.SetColumnWidth(4, 90)
			lctrl.SetColumnWidth(5, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(6, wx.LIST_AUTOSIZE)
			self.Habilita()
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Cuentas", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 200)
			self.Habilita()
			
		self.GetControl(ID_TEXTCTRLESTADOCUENTAPINARESFUNC1TOTALREGISTROS).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLESTADOCUENTAPINARESFUNC1TOTALREGISTROS).SetValue(str(int(fila)))
		self.GetControl(ID_TEXTCTRLESTADOCUENTAPINARESFUNC1TOTALSALDO).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLESTADOCUENTAPINARESFUNC1TOTALSALDO).SetValue(str(amount_and_cents_with_commas(total)))
		wx.EndBusyCursor()
		
	def Habilita(self):
		sw = False
		if self.GetControl(ID_TEXTCTRLESTADOCUENTAPINARESFUNC1FECHAINICIALFILTRO).GetValue():
			sw = True
			
		self.GetControl(ID_TEXTESTADOCUENTAPINARESFUNC1FECHAFINALFILTRO).Enable(sw)
		self.GetControl(ID_TEXTCTRLESTADOCUENTAPINARESFUNC1FECHAFINALFILTRO).Enable(sw)
		self.GetControl(ID_BITMAPBUTTONESTADOCUENTAPINARESFUNC1FECHAFINALELEGIR).Enable(sw)
		self.GetControl(ID_BITMAPBUTTONESTADOCUENTAPINARESFUNC1FECHAFINALLIMPIAR).Enable(sw)

class GixReporteOfertasAsignacionesFunc1(wx.Frame, GixBase):
	def __init__(self, parent, id = -1, title = u"Reporte de Ofertas de Compra y Asignaci�n de Inmuebles", pos = wx.DefaultPosition,
	             size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE):
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		#self.tb = self.CreateToolBar(wx.TB_HORIZONTAL | wx.NO_BORDER | wx.TB_FLAT | wx.TB_TEXT )
		#REPORTEOFERTASASIGNACIONESToolBarFunc(self.tb)
		panel = wx.Panel(self, -1)
		ReporteOfertasAsignacionesFunc1(panel, True, True)
		anchos = [350, -1, 250]
		self.CreateStatusBar(3)
		self.SetStatusWidths(anchos)
		self.DicDatesAndTxt = {ID_BITMAPBUTTONOFERTASASIGNACIONESFUNC1ELEGIRFECHAINICIALOFERTA:ID_TEXTCTRLOFERTASASIGNACIONESFUNC1FECHAINICIALOFERTA,
		                       ID_BITMAPBUTTONOFERTASASIGNACIONESFUNC1ELEGIRFECHAFINALOFERTA:ID_TEXTCTRLOFERTASASIGNACIONESFUNC1FECHAFINALOFERTA,
		                       ID_BITMAPBUTTONOFERTASASIGNACIONESFUNC1ELEGIRFECHAINICIALASIGNACION:ID_TEXTCTRLOFERTASASIGNACIONESFUNC1FECHAINICIALASIGNACION,
		                       ID_BITMAPBUTTONOFERTASASIGNACIONESFUNC1ELEGIRFECHAFINALASIGNACION:ID_TEXTCTRLOFERTASASIGNACIONESFUNC1FECHAFINALASIGNACION}
		for v in self.DicDatesAndTxt.keys():
			self.Bind(wx.EVT_BUTTON, self.OnFechaButton, id = v )
		
		self.DicDatesAndCln = {ID_BITMAPBUTTONOFERTASASIGNACIONESFUNC1LIMPIARFECHAINICIALOFERTA:ID_TEXTCTRLOFERTASASIGNACIONESFUNC1FECHAINICIALOFERTA,
		                       ID_BITMAPBUTTONOFERTASASIGNACIONESFUNC1LIMPIARFECHAFINALOFERTA:ID_TEXTCTRLOFERTASASIGNACIONESFUNC1FECHAFINALOFERTA,
		                       ID_BITMAPBUTTONOFERTASASIGNACIONESFUNC1LIMPIARFECHAINICIALASIGNACION:ID_TEXTCTRLOFERTASASIGNACIONESFUNC1FECHAINICIALASIGNACION,
		                       ID_BITMAPBUTTONOFERTASASIGNACIONESFUNC1LIMPIARFECHAFINALASIGNACION:ID_TEXTCTRLOFERTASASIGNACIONESFUNC1FECHAFINALASIGNACION}
		for v in self.DicDatesAndCln.keys():
			self.Bind(wx.EVT_BUTTON, self.OnLimpiarFecha, id = v )

		self.Bind(wx.EVT_CHOICE, self.OnChoiceEtapa, id = ID_CHOICEOFERTASASIGNACIONESFUNC1TBETAPA)
		self.Bind(wx.EVT_BUTTON, self.OnRefrescarVista, id = ID_TOOLOFERTASASIGNACIONESFUNC1TBREFRESCAR)
		self.Bind(wx.EVT_BUTTON, self.OnExcel, id = ID_BITMAPBUTTONOFERTASASIGNACIONESFUNC1EXCEL)
		wx.EVT_CLOSE(self, self.OnClose)
		
		self.ObtenerEtapas()
		self.etapa = 0
		self.GetControl(ID_CHOICEOFERTASASIGNACIONESFUNC1TBETAPA).SetSelection(0)
		self.GetControl(ID_CHOICEOFERTASASIGNACIONESFUNC1TBFILTRO).SetSelection(0)
		self.GetControl(ID_TEXTCTRLOFERTASASIGNACIONESFUNC1TOTALOFERTAS).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLOFERTASASIGNACIONESFUNC1ASIGNADAS).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLOFERTASASIGNACIONESFUNC1SINASIGNAR).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLOFERTASASIGNACIONESFUNC1REACTIVACIONES).SetBackgroundColour(wx.Colour(153,255,153))
		
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
				
		return dato.strip()
				
	def PreparaQuery(self, sql):
		sqlx = sql.replace('\t', ' '); sql = sqlx.replace('\n', ' ')
		return sql
	
	def OnClose(self, evt):
		self.Destroy()
		
	def OnRefrescarVista(self, evt):
		self.FillListCtrl()

	def SetExcelWorkbook(self, excel = "aexcel.xls"):
		todobien = True
		self.excel = excel
		if wx.Platform == '__WXMSW__':
			key = _winreg.OpenKey( _winreg.HKEY_CURRENT_USER,
			                       "Software\\Microsoft\\Windows\\CurrentVersion\Explorer\\Shell Folders")
			ruta = _winreg.QueryValueEx( key, 'Personal')[0]
			_winreg.CloseKey( key )
		else:
			ruta = os.getenv("HOME")
			
		dlg = wx.FileDialog(None, message = "Guardar como...", defaultDir = ruta, defaultFile = self.excel,
		                    wildcard ="*.xls", style = wx.SAVE | wx.FD_OVERWRITE_PROMPT) #| wx.CHANGE_DIR)
		
		if dlg.ShowModal() == wx.ID_OK:
			self.excel = dlg.GetPath().encode("iso8859-1")
		else:
			todobien = False
			
		dlg.Destroy()
		
		return todobien

	def GenerateExcelWithXle(self, rows = None):
		columnas = ((2000, u"Oferta"), (3000, u"Fecha"), (3000, u"Cuenta"), (3000, u"Preinmueble"),
		        (3000, u"Asignaci�n"), (3000, u"Cliente"), (12000, u"Nombre del Cliente"), (4000, u"Subvendedor"),
		        (12000, u"Nombre del Subvendedor"), (3000, u"Vendedor"), (12000, u"Nombre del Vendedor"),
		        (5000, u"Referencia RAP"))
		workbook = xle.Workbook()
		worksheet = workbook.add_sheet("Ofertas")
		for columna, detalle in enumerate(columnas):
			worksheet.col(columna).width = detalle[0]
			worksheet.write(0, columna, detalle[1])
			
		al = xle.Alignment()
		al.horz = xle.Alignment.HORZ_CENTER
		fnt = xle.Font()
		fnt.bold = True
		fnt.italic = True
		style = xle.XFStyle()
		style.alignment = al
		style.font = fnt
		worksheet.row(0).set_style(style)
		
		date_style = xle.XFStyle()
		date_style.alignment = al
		date_style.num_format_str = "M/D/YY"

		num_style = xle.XFStyle()
		num_style.alignment = al
		num_style.num_format_str = "0"
		
		gral_style = xle.XFStyle()
		gral_style.alignment = al
		
		progreso = 0
		signo = u"%"
		for fila, row in enumerate(rows):
			progreso += 1
			avance = (progreso * 100) / len(rows)
			mensaje = u"Progreso %s%s" % (avance, signo)
			self.dlgProgreso.Update(progreso, newmsg = mensaje)
			worksheet.write(fila + 1, 0, str(int(row[0])), num_style)
			worksheet.write(fila + 1, 1, str(row[1]), date_style)
			worksheet.write(fila + 1, 2, str(int(row[2])), num_style)
			worksheet.write(fila + 1, 3, self.GetString(row[3]), gral_style)
			worksheet.write(fila + 1, 4, str(row[4]), date_style)
			worksheet.write(fila + 1, 5, str(int(row[5])), num_style)
			worksheet.write(fila + 1, 6, self.GetString(row[6]))
			worksheet.write(fila + 1, 7, str(int(row[7])), num_style)
			worksheet.write(fila + 1, 8, self.GetString(row[8]))
			worksheet.write(fila + 1, 9, str(int(row[9])), num_style)
			worksheet.write(fila + 1, 10, self.GetString(row[10]))
			worksheet.write(fila + 1, 11, str(row[11]), num_style)
				
		workbook.save(self.excel)

	def OnExcel(self, evt):
		rows = self.FillListCtrl(excel = True)
		if rows:
			if self.SetExcelWorkbook("gixreport.xls"):
				continua = True
				try:
					xle
				except:
					continua = False
					Mensajes().Info(self, u"Por favor instale el m�dulo pyExcelerator", u"Atenci�n")
					
				if continua:
					wx.BeginBusyCursor()
					self.dlgProgreso = wx.ProgressDialog(u"Generando Archivo de Excel", u"Progreso",
						                        maximum = len(rows),
						                        style = wx.PD_AUTO_HIDE | wx.PD_APP_MODAL | wx.PD_SMOOTH | \
						                        wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_REMAINING_TIME)
					self.GenerateExcelWithXle(rows)
					self.dlgProgreso.Destroy()
					wx.EndBusyCursor()
		else:
			Mensajes().Info(self, u"No hay nada que enviar a Excel", u"Atenci�n")

	def OnChoiceEtapa(self, evt):
		ctrl = self.GetControl(ID_CHOICEOFERTASASIGNACIONESFUNC1TBETAPA)
		inx = ctrl.GetSelection()
		self.etapa = ctrl.GetClientData(inx)
		sql = """
		select e.fk_desarrollo, d.descripcion, d.fk_empresa, m.razonsocial from etapa e
		join desarrollo d on d.codigo = e.fk_desarrollo
		join empresa m on m.codigo = d.fk_empresa where e.codigo = %s
		""" % self.etapa
		sql = self.PreparaQuery(sql)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		self.desarrollo, self.empresa = 0, 0
		if row is not None:
			self.desarrollo = int(row[0])
			self.empresa = int(row[2])
			self.SetStatusText(u" %s " % self.GetString(row[3]), 0)
			self.SetStatusText(u" %s " % self.GetString(row[1]), 2)
		else:
			self.desarrollo = 0
			self.empresa = 0
			self.SetStatusText(u"", 0)
			self.SetStatusText(u"", 2)

	def OnLimpiarFecha(self, evt):
		self.GetControl(self.DicDatesAndCln[evt.GetId()]).SetValue("")
		
	def ObtenerEtapas(self):
		control = self.GetControl(ID_CHOICEOFERTASASIGNACIONESFUNC1TBETAPA)
		control.Enable(False); control.Show(False); control.Clear()
		cu = r_cn.cursor()
		cu.execute(str("select codigo, descripcion from ETAPA where (codigo > 46  and codigo <> 49) order by descripcion"))
		rows = fetchall(cu)
		cu.close()
		if rows:
			control.Append("<Todo>", 0)
			for row in rows:
				control.Append(self.GetString(row[1]), int(row[0]))
				
		control.Show(True)
		control.Enable(True)
	
	def ObtenerInmueble(self, codigo):
		inmueble = ""
		if codigo:
			cu = r_cn.cursor()
			cu.execute(str("select rtrim(ltrim(iden2)) + rtrim(ltrim(iden1)) from inmueble where codigo = %s" % codigo))
			row = fetchone(cu)
			cu.close()
			if row is not None:
				inmueble = "%s" % str(row[0])
				#inmueble = "%s - %s" % (codigo, str(row[0]))
				
		return inmueble
	
	def ObtenerNombreVendedor(self, codigo):
		cu = r_cn.cursor()
		cu.execute(str("select nombre from vendedor where codigo = %s" % codigo))
		row = fetchone(cu)
		cu.close()
		nombre = ""
		if row is not None:
			nombre = self.GetString(row[0])
		
		return nombre
	
	def ObtenerFecha(self, idctrl):
		fecha = ""
		if self.GetControl(idctrl).GetValue():
			d, m, a = self.GetControl(idctrl).GetValue().split("/")
			fecha = "'%s/%02d/%02d'" % (int(a), int(m), int(d))
			
		return fecha
		
	def FillListCtrl(self, excel = False):
		if not excel:
			wx.BeginBusyCursor()
			lctrl = self.GetControl(ID_LISTCTRLOFERTASASIGNACIONESFUNC1)
			lctrl.Enable(False); lctrl.Show(False); lctrl.ClearAll()
			
		filtro = ""
		inx = self.GetControl(ID_CHOICEOFERTASASIGNACIONESFUNC1TBFILTRO).GetSelection()
		if inx == 1:
			filtro = "and o.asignada = 1"
		elif inx == 2:
			filtro = "and o.asignada <> 1"
		elif inx == 3:
			filtro = "and o.reactivacion_cliente_etapa <> 0"
			
		foi = self.ObtenerFecha(ID_TEXTCTRLOFERTASASIGNACIONESFUNC1FECHAINICIALOFERTA)
		fof = self.ObtenerFecha(ID_TEXTCTRLOFERTASASIGNACIONESFUNC1FECHAFINALOFERTA)
		fai = self.ObtenerFecha(ID_TEXTCTRLOFERTASASIGNACIONESFUNC1FECHAINICIALASIGNACION)
		faf = self.ObtenerFecha(ID_TEXTCTRLOFERTASASIGNACIONESFUNC1FECHAFINALASIGNACION)

		filtrofo, filtrofa = "", ""
		if foi:
			if fof:
				filtrofo = "and (o.fecha_oferta >= %s and o.fecha_oferta <= %s)" % (foi, fof)
			else:
				filtrofo = "and o.fecha_oferta >= %s" % foi
		elif fof:
			filtrofo = "and o.fecha_oferta <= %s" % fof
			
		if fai:
			if faf:
				filtrofa = "and (o.fecha_asignacion >= %s and o.fecha_asignacion <= %s)" % (fai, faf)
			else:
				filtrofa = "and convert(varchar(10), o.fecha_asignacion, 111) >= %s" % fai
		elif faf:
			filtrofa = "and o.fecha_asignacion <= %s" % faf
			
		#filtroetapa = "> 46"  Unicamente Sabinos
		filtroetapa = "> 43"   # Incluye VLO
		if self.etapa:
			filtroetapa = "= %s" % self.etapa
			
		if excel:
			query = """
			select o.oferta, convert(varchar(10), o.fecha_oferta, 103),
			c.codigo, isnull(rtrim(ltrim(i.iden2)) + rtrim(ltrim(i.iden1)), ''),
			isnull(convert(varchar(10), o.fecha_asignacion, 103), ''),
			o.cliente, l.nombre, o.subvendedor, sv.nombre, o.vendedor,
			isnull(v2.nombre, ''), o.referencia_rap
			from ofertas_compra o
			join cuenta c on o.oferta  = c.contrato and o.fk_etapa = c.fk_etapa
			join cliente l on o.cliente = l.codigo
			join vendedor sv on o.subvendedor = sv.codigo
			left join vendedor v2 on o.vendedor = v2.codigo
			left join inmueble i on c.fk_inmueble = i.codigo
			where o.cancelada <> 1 and o.reactivar <> 1 and (o.fk_etapa %s and o.fk_etapa <> 49) and
			(c.fk_etapa %s and c.fk_etapa <> 49) %s %s %s order by 1 desc
			""" % (filtroetapa, filtroetapa, filtro, filtrofo, filtrofa)
		else:
			query = """
			select o.oferta, convert(varchar(10), o.fecha_oferta, 103),
			c.codigo, c.fk_inmueble, o.cliente, o.subvendedor, o.vendedor, o.referencia_rap,
			o.cancelada, l.nombre, sv.nombre, o.reactivar, isnull(v2.nombre, ''),
			isnull(o.reactivacion_cliente_etapa, 0), isnull(o.asignada, 0),
			isnull(convert(varchar(10), o.fecha_asignacion, 103), '')
			from ofertas_compra o
			join cuenta c on o.oferta  = c.contrato and o.fk_etapa = c.fk_etapa
			join cliente l on o.cliente = l.codigo
			join vendedor sv on o.subvendedor = sv.codigo
			left join vendedor v2 on o.vendedor = v2.codigo
			where o.cancelada <> 1 and o.reactivar <> 1 and (o.fk_etapa %s and o.fk_etapa <> 49) and
			(c.fk_etapa %s and c.fk_etapa <> 49) %s %s %s order by 1 desc
			""" % (filtroetapa, filtroetapa, filtro, filtrofo, filtrofa)

		sql = self.PreparaQuery(query)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if excel:
			return rows
		
		if rows:
			lctrl.InsertColumn(0, u"Oferta", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"Fecha", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(2, u"Cuenta", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(3, u"Preinmueble", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(4, u"Asignaci�n", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(5, u"Cliente", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(6, u"Nombre del Cliente")
			lctrl.InsertColumn(7, u"Subvendedor", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(8, u"Nombre del Subvendedor")
			lctrl.InsertColumn(9, u"Vendedor", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(10, u"Nombre del Vendedor")
			lctrl.InsertColumn(11, u"Referencia RAP", wx.LIST_FORMAT_CENTER)
			asignadas, sinasignar, reactivaciones = 0, 0, 0
			for fila, row in enumerate(rows):
				if not row[8]:
					if row[13]:
						bgcolor = [248,181,68]
					elif not row[3]:
						bgcolor = [250,250,200]
					else:
						bgcolor = [210,240,210]
				else:
					if not row[13]:
						bgcolor = [250,70,70]
					else:
						bgcolor = [248,181,68]
						
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				#lctrl.SetItemTextColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, str(row[1]))
				lctrl.SetStringItem(index, 2, str(row[2]))
				lctrl.SetStringItem(index, 3, str(self.ObtenerInmueble(row[3])))
				lctrl.SetStringItem(index, 4, str(row[15]))
				lctrl.SetStringItem(index, 5, str(row[4]))
				lctrl.SetStringItem(index, 6, self.GetString(row[9]))
				lctrl.SetStringItem(index, 7, str(row[5]))
				lctrl.SetStringItem(index, 8, self.GetString(row[10]))
				lctrl.SetStringItem(index, 9, str(row[6]))
				lctrl.SetStringItem(index, 10, self.ObtenerNombreVendedor(row[6]))
				lctrl.SetStringItem(index, 11, str(row[7]))
				lctrl.SetItemData(index, row[0])
				if int(row[14]):
					asignadas += 1
				else:
					sinasignar += 1
					
				if int(row[13]):
					reactivaciones += 1
				
			lctrl.SetColumnWidth(0, 70)
			lctrl.SetColumnWidth(1, 90)
			lctrl.SetColumnWidth(2, 70)
			lctrl.SetColumnWidth(3, 80)
			lctrl.SetColumnWidth(4, 90)
			lctrl.SetColumnWidth(5, 70)
			lctrl.SetColumnWidth(6, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(7, 78)
			lctrl.SetColumnWidth(8, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(9, 73)
			lctrl.SetColumnWidth(10, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(11, 90)
			lctrl.SetItemState(0, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
			lctrl.EnsureVisible(0)
			self.GetControl(ID_TEXTCTRLOFERTASASIGNACIONESFUNC1TOTALOFERTAS).SetValue(str(fila + 1))
			self.GetControl(ID_TEXTCTRLOFERTASASIGNACIONESFUNC1ASIGNADAS).SetValue(str(asignadas))
			self.GetControl(ID_TEXTCTRLOFERTASASIGNACIONESFUNC1SINASIGNAR).SetValue(str(sinasignar))
			self.GetControl(ID_TEXTCTRLOFERTASASIGNACIONESFUNC1REACTIVACIONES).SetValue(str(reactivaciones))
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Ofertas", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 250)
			self.GetControl(ID_TEXTCTRLOFERTASASIGNACIONESFUNC1TOTALOFERTAS).SetValue("0")
			self.GetControl(ID_TEXTCTRLOFERTASASIGNACIONESFUNC1ASIGNADAS).SetValue("0")
			self.GetControl(ID_TEXTCTRLOFERTASASIGNACIONESFUNC1SINASIGNAR).SetValue("0")
			self.GetControl(ID_TEXTCTRLOFERTASASIGNACIONESFUNC1REACTIVACIONES).SetValue("0")
			
		lctrl.Enable(True)
		lctrl.Show(True)
		lctrl.SetFocus()
		wx.EndBusyCursor()
		
class GixAsignacionPreciosInmueblesFunc2(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Asignaci�n de Precio", pos = wx.DefaultPosition,
	             size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE, fecha = "", inmuebles = [], etapa = {}, filllistctrl = None):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.inmuebles = inmuebles
		self.etapa = etapa
		self.idprecioetapa = 0
		self.FillListCtrl = filllistctrl
		AsignacionPreciosInmueblesFunc2(self, True)
		self.Bind(EVT_ETC_LAYOUT_NEEDED, lambda _ :self.Fit(), self.FOREIGNASIGNACIONPRECIOSINMUEBLES)
		self.Bind(wx.EVT_BUTTON, self.OnAceptar, id = ID_BUTTONASIGNACIONPRECIOSINMUEBLESFUNC2ACEPTAR)
		self.Bind(wx.EVT_BUTTON, self.OnClose, id = ID_BUTTONASIGNACIONPRECIOSINMUEBLESFUNC2CANCELAR)
		wx.EVT_CLOSE(self, self.OnClose)
		self.ObtenerPreciosEtapa()
		self.GetControl(ID_TEXTASIGNACIONPRECIOSINMUEBLESFUNC2TITULO).SetLabel(self.etapa["desarrollotxt"] + " - " +
		                                                                       self.etapa["etapatxt"])
   		
		self.GetControl(ID_TEXTCTRLASIGNACIONPRECIOSINMUEBLESFUNC2ALTA).SetValue(fecha)
		self.GetControl(ID_TEXTASIGNACIONPRECIOSINMUEBLESFUNC2INMUEBLE).SetLabel(self.GetInmueblesLabel())
		self.GetControl(ID_CHOICEASIGNACIONPRECIOSINMUEBLESFUNC2PRECIO).SetSelection(SetChoiceIndex())
		self.GetControl(ID_RADIOBOXASIGNACIONPRECIOSINMUEBLESFUNC2ACTIVO).SetStringSelection("Si")

		self.GetControl(ID_TEXTCTRLASIGNACIONPRECIOSINMUEBLESFUNC2ALTA).SetBackgroundColour(wx.Colour(153,255,153))
		self.FOREIGNASIGNACIONPRECIOSINMUEBLES.SetBackgroundColour(wx.Colour(153,255,153))
		self.FOREIGNASIGNACIONPRECIOSINMUEBLES.SetEditable(False)
		
		self.Fit()
		self.SetFocus()
		
	def OnClose(self, evt):
		self.EndModal(1)
		self.Destroy()
		
	def GetDate(self):
		cu = r_cn.cursor()
		cu.execute("select convert(varchar(10), getdate(), 103)")
		row = fetchone(cu)
		cu.close()
		return str(row[0])
		
	def GetInmueblesLabel(self):
		label = "Inmueble (%s)" % len(self.inmuebles)
		if len(self.inmuebles) > 1:
			label = "Inmuebles (%s)" % len(self.inmuebles)
			
		return label
	
	def GetInmueblesStr(self):
		inmuebles = ""
		for inmueble in self.inmuebles:
			inmuebles += str(inmueble) + ", "
			
		return inmuebles[:-2]

	def SetInstance(self, item):
		self.FOREIGNASIGNACIONPRECIOSINMUEBLES = item
		
	def PreparaQuery(self, sql):
		return (sql.replace('\t', ' ')).replace('\n', ' ')
		
	def ObtenerPreciosEtapa(self):
		control = self.GetControl(ID_CHOICEASIGNACIONPRECIOSINMUEBLESFUNC2PRECIO)
		control.Enable(False); control.Show(False); control.Clear()
		sql = """
		select id, precio from gixpreciosetapa where fk_etapa = %s and activo <> 0 order by precio
		""" % self.etapa["etapa"]
		cu = r_cn.cursor()
		cu.execute(str(self.PreparaQuery(sql)))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(str(amount_and_cents_with_commas(float(row[1]))), int(row[0]))
				
		control.Show(True)
		control.Enable(True)
		
	def ValidacionOk(self):
		todook = True
		ctrl = self.GetControl(ID_CHOICEASIGNACIONPRECIOSINMUEBLESFUNC2PRECIO)
		inx = ctrl.GetSelection()
		if inx > -1:
			self.idprecioetapa = ctrl.GetClientData(inx)
		else:
			Mensajes().Error(self, u"� Por Favor Elija el Precio !", u"Atenci�n")
			todook = False
			
		return todook

	def OnAceptar(self, evt):
		if self.ValidacionOk():
			d, m, a = self.GetControl(ID_TEXTCTRLASIGNACIONPRECIOSINMUEBLESFUNC2ALTA).GetValue().split("/")
			fecha = "%04d/%02d/%02d" % (int(a), int(m), int(d))
			activo = 1
			if self.GetControl(ID_RADIOBOXASIGNACIONPRECIOSINMUEBLESFUNC2ACTIVO).GetStringSelection() == "No":
				activo = 0
				
			for inmueble in self.inmuebles:
				cu = r_cn.cursor()
				cu.execute("select id from gixpreciosinmueble where fk_inmueble = %s" % int(inmueble))
				row = fetchone(cu)
				cu.close()
				if row is not None:
					sql = """
				        update gixpreciosinmueble
				        set fk_precio = %s, fecha = '%s', activo = %s
				        where id = %s
				        """ % (self.idprecioetapa, fecha, activo, int(row[0]))
				else:
					sql = """
				        insert into gixpreciosinmueble
					(fk_inmueble, fk_precio, fecha, activo) values (%s, %s, '%s', %s)
				        """ % (int(inmueble), self.idprecioetapa, fecha, activo)
					
				todook, trash = self.QueryUpdateRecord(self.PreparaQuery(sql), conexion = r_cn)
				if not todook:
					Mensajes().Info(self, u"� Problemas en la asignaci�n de precio !\n\n" \
					                u"Inmueble: %s" % int(inmueble), u"Atenci�n")
					
			self.FillListCtrl()
			self.EndDialog(1)
			self.Destroy()

class GixAsignacionPreciosInmueblesFunc1(wx.Frame, GixBase):
	def __init__(self, parent, id = -1, title = u"Asignaci�n de Precios a Inmuebles", pos = wx.DefaultPosition,
	             size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE):
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		panel = wx.Panel(self, -1)
		AsignacionPreciosInmueblesFunc1(panel, True, True)
		anchos = [350, -1, 250]
		self.CreateStatusBar(3)
		self.SetStatusWidths(anchos)

		self.Bind(wx.EVT_CHOICE, self.OnChoiceEtapa, id = ID_CHOICEASIGNACIONPRECIOSINMUEBLESFUNC1ETAPA)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelected, id = ID_LISTCTRLASIGNACIONPRECIOSINMUEBLESFUNC1)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselected, id = ID_LISTCTRLASIGNACIONPRECIOSINMUEBLESFUNC1)
		self.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.OnRightClick, id = ID_LISTCTRLASIGNACIONPRECIOSINMUEBLESFUNC1)
		self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnActivated, id = ID_LISTCTRLASIGNACIONPRECIOSINMUEBLESFUNC1)

		wx.EVT_CLOSE(self, self.OnClose)
		
		self.ObtenerEtapas()
		self.etapa = {"empresa":0, "empresatxt":"",
		              "desarrollo":0, "desarrollotxt":"",
		              "etapa":0, "etapatxt":""}
		self.inmuebles = []
		self.currentitem = 0
		self.currentindex = 0
		self.GetControl(ID_CHOICEASIGNACIONPRECIOSINMUEBLESFUNC1ETAPA).SetSelection(SetChoiceIndex())
		self.GetControl(ID_TEXTCTRLASIGNACIONPRECIOSINMUEBLESFUNC1INMUEBLESALAVISTA).SetBackgroundColour(wx.Colour(153,255,153))
		
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
				
		return dato.strip()
				
	def PreparaQuery(self, sql):
		sqlx = sql.replace('\t', ' '); sql = sqlx.replace('\n', ' ')
		return sql
	
	def OnClose(self, evt):
		self.Destroy()
		
	def OnChoiceEtapa(self, evt):
		self.currentitem, self.currentindex = 0 ,0
		ctrl = self.GetControl(ID_CHOICEASIGNACIONPRECIOSINMUEBLESFUNC1ETAPA)
		inx = ctrl.GetSelection()
		self.etapa["etapa"] = ctrl.GetClientData(inx)
		sql = """
		select e.descripcion, e.fk_desarrollo, d.descripcion, d.fk_empresa, m.razonsocial
		from etapa e
		join desarrollo d on d.codigo = e.fk_desarrollo
		join empresa m on m.codigo = d.fk_empresa where e.codigo = %s
		""" % self.etapa["etapa"]
		sql = self.PreparaQuery(sql)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		self.etapa["etapatxt"], self.etapa["desarrollotxt"], self.etapa["empresatxt"] = "", "", ""
		self.etapa["desarrollo"], self.etapa["empresa"] = 0, 0
		if row is not None:
			self.etapa["etapatxt"] = self.GetString(row[0])
			self.etapa["desarrollo"] = int(row[1]); self.etapa["desarrollotxt"] = self.GetString(row[2])
			self.etapa["empresa"] = int(row[3]); self.etapa["empresatxt"] = self.GetString(row[4])
			self.SetStatusText(u" %s " % self.GetString(row[4]), 0)
			self.SetStatusText(u" %s " % self.GetString(row[2]), 2)
		else:
			self.SetStatusText(u"", 0)
			self.SetStatusText(u"", 2)
			
		self.FillListCtrl()
		
	def OnSelected(self, evt):
		self.currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLASIGNACIONPRECIOSINMUEBLESFUNC1).GetItem(evt.m_itemIndex, 0).GetText()
		try:
			dato = int(str(datointerno).split(".")[0])
		except:
			dato = int(str(datointerno))
			
		try:
			self.inmuebles.append(dato)
		except:
			pass
	
	def OnDeselected(self, evt):
		if self.inmuebles:
			datointerno = self.GetControl(ID_LISTCTRLASIGNACIONPRECIOSINMUEBLESFUNC1).GetItem(evt.m_itemIndex, 0).GetText()
			try:
				dato = int(str(datointerno).split(".")[0])
			except:
				dato = int(str(datointerno))
				
			self.inmuebles.remove(dato)
			
	def OnRightClick(self, evt):
		if not hasattr(self, "ID_POPUPASIGNACIONPRECIOSINMUEBLESCAMBIARPRECIO"):
			ID_POPUPASIGNACIONPRECIOSINMUEBLESCAMBIARPRECIO = wx.NewId()
			self.Bind(wx.EVT_MENU, self.OnActivated, id = ID_POPUPASIGNACIONPRECIOSINMUEBLESCAMBIARPRECIO)
			
		popup = wx.Menu()
		if len(self.inmuebles) > 1:
			popup.Append(ID_POPUPASIGNACIONPRECIOSINMUEBLESCAMBIARPRECIO, u" Cambio de Precio a %s Inmuebles " % len(self.inmuebles))
		elif len(self.inmuebles) == 1:
			popup.Append(ID_POPUPASIGNACIONPRECIOSINMUEBLESCAMBIARPRECIO, u" Cambio de Precio al Inmueble %s " % self.inmuebles[0])
			
		self.PopupMenu(popup)
		popup.Destroy()
		
	def GetDate(self):
		cu = r_cn.cursor()
		cu.execute("select convert(varchar(10), getdate(), 103)")
		row = fetchone(cu)
		cu.close()
		return str(row[0])
	
	def OnActivated(self, evt):
		self.currentindex = self.currentitem
		self.dlg = GixAsignacionPreciosInmueblesFunc2(self, fecha = self.GetDate(), inmuebles = self.inmuebles, etapa = self.etapa,
		                                              filllistctrl = self.FillListCtrl)
		self.dlg.CenterOnParent()
		self.dlg.ShowModal()

	def ObtenerEtapas(self):
		control = self.GetControl(ID_CHOICEASIGNACIONPRECIOSINMUEBLESFUNC1ETAPA)
		control.Enable(False); control.Show(False); control.Clear()
		cu = r_cn.cursor()
		cu.execute(str("select codigo, descripcion from ETAPA where (codigo > 46 and codigo <> 49) order by descripcion"))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(self.GetString(row[1]), int(row[0]))
				
		control.Show(True)
		control.Enable(True)
	
	def GetCondition(self, dato):
		condicion = "No"
		if dato:
			condicion = "Si"
			
		return condicion
	
	def FillListCtrl(self):
		wx.BeginBusyCursor()
		self.inmuebles = []
		lctrl = self.GetControl(ID_LISTCTRLASIGNACIONPRECIOSINMUEBLESFUNC1)
		lctrl.Enable(False); lctrl.Show(False); lctrl.ClearAll()
		filtroetapa = "> 46"
		if self.etapa["etapa"]:
			filtroetapa = "= %s" % self.etapa["etapa"]

		query = """
		select i.codigo, rtrim(ltrim(i.iden2)), rtrim(ltrim(i.iden1)), isnull(pe.precio, 0.00),
		isnull(pe.tipo, ''), isnull(pe.sustentable, 0), isnull(pi.activo, 0), e.descripcion
		from inmueble i
		join etapa e on i.fk_etapa = e.codigo
		left join gixpreciosinmueble pi on i.codigo = pi.fk_inmueble
		left join gixpreciosetapa pe on pi.fk_precio = pe.id
		where i.habilitado <> 0 and (i.fk_etapa %s and i.fk_etapa <> 49) order by i.fk_etapa, i.iden2, i.iden1
		""" % filtroetapa
		
		sql = self.PreparaQuery(query)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			lctrl.InsertColumn(0, u"Inmueble", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"Manzana", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(2, u"Lote", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(3, u"Precio", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(4, u"Prototipo", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(5, u"Sustentable", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(6, u"Activo", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(7, u"Etapa")
			for fila, row in enumerate(rows):
				if float(row[3]) > 0.00:
					if fila %2 != 0: bgcolor = [204,204,255]
					else:            bgcolor = [230,230,255]
				else:
					if fila %2 != 0: bgcolor = [255,153,153]
					else:            bgcolor = [255,215,215]

				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, self.GetString(row[1]))
				lctrl.SetStringItem(index, 2, self.GetString(row[2]))
				lctrl.SetStringItem(index, 3, str(amount_and_cents_with_commas(float(row[3]))))
				lctrl.SetStringItem(index, 4, self.GetString(row[4]))
				lctrl.SetStringItem(index, 5, str(self.GetCondition(row[5])))
				lctrl.SetStringItem(index, 6, str(self.GetCondition(row[6])))
				lctrl.SetStringItem(index, 7, self.GetString(row[7]))
				lctrl.SetItemData(index, row[0])
				
			lctrl.SetColumnWidth(0, 70)
			lctrl.SetColumnWidth(1, 60)
			lctrl.SetColumnWidth(2, 60)
			lctrl.SetColumnWidth(3, 100)
			lctrl.SetColumnWidth(4, 80)
			lctrl.SetColumnWidth(5, 80)
			lctrl.SetColumnWidth(6, 80)
			lctrl.SetColumnWidth(7, wx.LIST_AUTOSIZE)
			if self.currentindex <= lctrl.GetItemCount():
				lctrl.EnsureVisible(self.currentindex)
				lctrl.SetItemState(self.currentindex, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
				
			self.GetControl(ID_TEXTCTRLASIGNACIONPRECIOSINMUEBLESFUNC1INMUEBLESALAVISTA).SetValue(str(fila + 1))
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Inmuebles", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 250)
			self.GetControl(ID_TEXTCTRLASIGNACIONPRECIOSINMUEBLESFUNC1INMUEBLESALAVISTA).SetValue("0")
			
		lctrl.Enable(True)
		lctrl.Show(True)
		lctrl.SetFocus()
		wx.EndBusyCursor()
		
class GixPreciosEtapaFunc3(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Agregando Caracter�stica del Inmueble", pos = wx.DefaultPosition,
	             size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE, idprecioetapa = 0, filllistctrlcaracteristicas = None):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.idprecioetapa = idprecioetapa
		self.FillListCtrlCaracteristicas = filllistctrlcaracteristicas
		PreciosEtapaFunc3(self, True)
		self.Bind(wx.EVT_BUTTON, self.OnAceptar, id = ID_BUTTONPRECIOSETAPAFUNC3ACEPTAR)
		self.Bind(wx.EVT_BUTTON, self.OnClose, id = ID_BUTTONPRECIOSETAPAFUNC3CANCELAR)
		wx.EVT_CLOSE(self, self.OnClose)
		self.GetControl(ID_TEXTCTRLPRECIOSETAPAFUNC3CANTIDAD).SetValue("1")
		self.ObtenerCaracteristicas()
		self.SetFocus()
		
	def OnClose(self, evt):
		self.EndModal(1)
		self.Destroy()
		
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
				
		return dato.strip()

	def PreparaQuery(self, sql):
		return (sql.replace('\t', ' ')).replace('\n', ' ')
		
	def ObtenerCaracteristicas(self):
		control = self.GetControl(ID_CHOICEPRECIOSETAPAFUNC3CARACTERISTICA)
		control.Enable(False); control.Show(False); control.Clear()
		cu = r_cn.cursor()
		sql = """
		select id, descripcion from gixcaracteristicasinmuebles where id not in
		(select fk_idcaracteristica from  gixpreciosetapacaracteristicas where fk_idpreciosetapa = %s)
		order by descripcion
		""" % self.idprecioetapa
		cu.execute(self.PreparaQuery(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(self.GetString(row[1]), int(row[0]))
				
		control.SetSelection(-1)
		control.Show(True)
		control.Enable(True)
			
	def ValidacionOk(self):
		todook = True
		inx = self.GetControl(ID_CHOICEPRECIOSETAPAFUNC3CARACTERISTICA).GetSelection()
		if inx < 0:
			Mensajes().Error(self, u"� Seleccione la caracter�stica !", u"Atenci�n")
			todook = False

		if todook:
			try:
				ctrl = self.GetControl(ID_TEXTCTRLPRECIOSETAPAFUNC3CANTIDAD)
				valor = ctrl.GetValue(); cantidad = 0
				if valor:
					cantidad = float(valor.replace(",",""))
					
				if not cantidad:
					Mensajes().Error(self, u"� Introduzca la cantidad !", u"Atenci�n")
					ctrl.SetValue("")
					ctrl.SetFocus()
					todook = False
					
			except:
				Mensajes().Error(self, u"� Cantidad mal introducida !", u"Atenci�n")
				ctrl.SetValue("")
				ctrl.SetFocus()
				todook = False
				
		return todook

	def OnAceptar(self, evt):
		if self.ValidacionOk():
			inx = self.GetControl(ID_CHOICEPRECIOSETAPAFUNC3CARACTERISTICA).GetSelection()
			fk_idcaracteristica = self.GetControl(ID_CHOICEPRECIOSETAPAFUNC3CARACTERISTICA).GetClientData(inx)
			valor = self.GetControl(ID_TEXTCTRLPRECIOSETAPAFUNC3CANTIDAD).GetValue()
			cantidad = float(valor.replace(",",""))
				
			sql = """
		        insert into gixpreciosetapacaracteristicas (cantidad, fk_idcaracteristica, fk_idpreciosetapa)
		        values (%s, %s, %s)
		        """ % (cantidad, fk_idcaracteristica, self.idprecioetapa)
				
			todook, trash = self.QueryUpdateRecord(self.PreparaQuery(sql), conexion = r_cn)
			if todook:
				self.FillListCtrlCaracteristicas()
				self.EndModal(1)
				self.Destroy()
			else:
				Mensajes().Info(self, u"� No se actualiz� la caracter�stica !", u"Atenci�n")
				
class GixPreciosEtapaFunc2(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Editando Precio", pos = wx.DefaultPosition,
	             size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE, idprecioetapa = 0, filllistctrl = None):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.idprecioetapa = idprecioetapa
		self.FillListCtrl = filllistctrl
		self.etapa = 0
		PreciosEtapaFunc2(self, True)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelected, id = ID_LISTCTRLPRECIOSETAPAFUNC2)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselected, id = ID_LISTCTRLPRECIOSETAPAFUNC2)
		self.Bind(wx.EVT_BUTTON, self.OnAgregar, id = ID_BUTTONPRECIOSETAPAFUNC2AGREGAR)
		self.Bind(wx.EVT_BUTTON, self.OnEliminar, id = ID_BUTTONPRECIOSETAPAFUNC2ELIMINAR)
		self.Bind(wx.EVT_BUTTON, self.OnAceptar, id = ID_BUTTONPRECIOSETAPAFUNC2ACEPTAR)
		self.Bind(wx.EVT_BUTTON, self.OnClose, id = ID_BUTTONPRECIOSETAPAFUNC2CANCELAR)
		wx.EVT_CLOSE(self, self.OnClose)
		self.ObtenerEtapas()
		if self.idprecioetapa:
			self.ObtenerPreciosEtapa()
			self.FillListCtrlCaracteristicas()
		else:
			self.GetControl(ID_TEXTCTRLPRECIOSETAPAFUNC2FECHA).SetValue(self.GetDate())
			self.GetControl(ID_TEXTCTRLPRECIOSETAPAFUNC2ID).SetValue("")
			self.GetControl(ID_CHOICEPRECIOSETAPAFUNC2ETAPA).SetSelection(SetChoiceIndex())
			self.GetControl(ID_TEXTCTRLPRECIOSETAPAFUNC2PRECIO).SetValue("")
			self.GetControl(ID_TEXTCTRLPRECIOSETAPAFUNC2DESCRIPCION).SetValue("")
			self.GetControl(ID_CHOICEPRECIOSETAPAFUNC2TIPO).SetSelection(0)
			self.GetControl(ID_RADIOBOXPRECIOSETAPAFUNC2VISIBLE).SetStringSelection("Si")
			self.GetControl(ID_RADIOBOXPRECIOSETAPAFUNC2VISIBLE).SetStringSelection("Si")
			self.GetControl(ID_RADIOBOXPRECIOSETAPAFUNC2ACTIVO).SetStringSelection("Si")
			self.GetControl(ID_BUTTONPRECIOSETAPAFUNC2ELIMINAR).Enable(False)
			
		self.SetFocus()
		
	def OnClose(self, evt):
		self.EndModal(1)
		self.Destroy()
		
	def GetDate(self):
		cu = r_cn.cursor()
		cu.execute("select convert(varchar(10), getdate(), 103)")
		row = fetchone(cu)
		cu.close()
		return str(row[0])
		
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
				
		return dato.strip()

	def PreparaQuery(self, sql):
		return (sql.replace('\t', ' ')).replace('\n', ' ')
		
	def ObtenerEtapas(self):
		control = self.GetControl(ID_CHOICEPRECIOSETAPAFUNC2ETAPA)
		control.Enable(False); control.Show(False); control.Clear()
		cu = r_cn.cursor()
		#cu.execute(str("select codigo, descripcion from ETAPA where codigo > 46 and codigo <> 49 order by descripcion"))
		cu.execute(str("select codigo, descripcion from ETAPA where codigo > 43 and codigo not in (45,46,49) order by descripcion"))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(self.GetString(row[1]), int(row[0]))
				
		control.Show(True)
		control.Enable(True)
		
	def ObtenerPreciosEtapa(self):
		cu = r_cn.cursor()
		sql = """
		select fk_etapa, precio, descripcion, convert(varchar(10), fecha, 103), tipo, visible, sustentable, activo
		from gixpreciosetapa where id = %s
		""" % self.idprecioetapa
		sql = self.PreparaQuery(sql)
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row is not None:
			self.GetControl(ID_TEXTCTRLPRECIOSETAPAFUNC2ID).SetValue(str(self.idprecioetapa))
			ctrl = self.GetControl(ID_CHOICEPRECIOSETAPAFUNC2ETAPA)
			for inx in range(0, ctrl.GetCount()):
				if int(row[0]) == ctrl.GetClientData(inx):
					ctrl.SetSelection(inx)
					break
			
			self.GetControl(ID_TEXTCTRLPRECIOSETAPAFUNC2PRECIO).SetValue(amount_and_cents_with_commas(float(row[1])))
			self.GetControl(ID_TEXTCTRLPRECIOSETAPAFUNC2DESCRIPCION).SetValue(self.GetString(row[2]))
			d, m, a = str(row[3]).split("/")
			self.GetControl(ID_TEXTCTRLPRECIOSETAPAFUNC2FECHA).SetValue(str("%02d/%02d/%04d" % (int(d), int(m), int(a))))
			inx = 0
			if str(row[4]) == "B":
				inx = 1
			elif str(row[4]) == "C":
				inx = 2
				
			self.GetControl(ID_CHOICEPRECIOSETAPAFUNC2TIPO).SetSelection(inx)
			
			visible = "No"
			if row[5]:
				visible = "Si"
				
			self.GetControl(ID_RADIOBOXPRECIOSETAPAFUNC2VISIBLE).SetStringSelection(visible)
			
			sustentable = "No"
			if row[6]:
				sustentable = "Si"
				
			self.GetControl(ID_RADIOBOXPRECIOSETAPAFUNC2SUSTENTABLE).SetStringSelection(sustentable)
			
			activo = "No"
			if row[7]:
				activo = "Si"
				
			self.GetControl(ID_RADIOBOXPRECIOSETAPAFUNC2ACTIVO).SetStringSelection(activo)

	def FillListCtrlCaracteristicas(self):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLPRECIOSETAPAFUNC2)
		lctrl.Enable(False); lctrl.Show(False); lctrl.ClearAll()
		query = """
		select p.id, p.cantidad, c.descripcion from gixpreciosetapacaracteristicas p
		join gixcaracteristicasinmuebles c on c.id = p.fk_idcaracteristica
		where p.fk_idpreciosetapa = %s order by c.descripcion
		""" % self.idprecioetapa
		sql = (query.replace('\t', ' ')).replace('\n', ' ')
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			lctrl.InsertColumn(0, u"Id", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"Cantidad", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(2, u"Descripci�n")
			for fila, row in enumerate(rows):
				if fila %2 != 0: bgcolor = [255,255,255]
				else:            bgcolor = [230,230,255]
					
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, self.GetString(row[0]))
				lctrl.SetStringItem(index, 1, str(amount_and_cents_with_commas(row[1])))
				lctrl.SetStringItem(index, 2, self.GetString(row[2]))
				lctrl.SetItemData(index, row[0])
				
			lctrl.SetColumnWidth(0, 0)
			lctrl.SetColumnWidth(1, 70)
			lctrl.SetColumnWidth(2, wx.LIST_AUTOSIZE)
			lctrl.SetItemState(0, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
			#lctrl.EnsureVisible(self.currentitem)
		else:
			lctrl.InsertColumn(0, u"  No se Encontraron Caracter�sticas", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 250)
			self.GetControl(ID_BUTTONPRECIOSETAPAFUNC2ELIMINAR).Enable(False)
			
		lctrl.Enable(True)
		lctrl.Show(True)
		lctrl.SetFocus()
		wx.EndBusyCursor()

	def OnSelected(self, evt):
		self.currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLPRECIOSETAPAFUNC2).GetItem(self.currentitem, 0).GetText()
		self.idpreciosetapacaracteristica = int(datointerno)
		self.GetControl(ID_BUTTONPRECIOSETAPAFUNC2ELIMINAR).Enable(True)
		evt.Skip()
		
	def OnDeselected(self, evt):
		self.currentitem = 0
		self.idpreciosetapacaracteristica = 0
		self.GetControl(ID_BUTTONPRECIOSETAPAFUNC2ELIMINAR).Enable(False)
		evt.Skip()
		
	def ValidacionOk(self):
		todook = True
		inx = self.GetControl(ID_CHOICEPRECIOSETAPAFUNC2ETAPA).GetSelection()
		if inx < 0:
			Mensajes().Error(self, u"� Seleccione la etapa !", u"Atenci�n")
			todook = False

		if todook:
			try:
				ctrl = self.GetControl(ID_TEXTCTRLPRECIOSETAPAFUNC2PRECIO)
				valor = ctrl.GetValue(); precio = 0
				if valor:
					precio = float(valor.replace(",",""))
					
				if not precio:
					Mensajes().Error(self, u"� Introduzca el precio !", u"Atenci�n")
					ctrl.SetValue("")
					ctrl.SetFocus()
					todook = False
					
			except:
				Mensajes().Error(self, u"� Precio mal introducido !", u"Atenci�n")
				ctrl.SetValue("")
				ctrl.SetFocus()
				todook = False
				
		if todook:
			ctrl = self.GetControl(ID_TEXTCTRLPRECIOSETAPAFUNC2DESCRIPCION)
			if not ctrl.GetValue():
				Mensajes().Error(self, u"� Introduzca la descripci�n !", u"Atenci�n")
				ctrl.SetValue("")
				ctrl.SetFocus()
				todook = False
			
		return todook

	def GrabaPrecio(self):
		inx = self.GetControl(ID_CHOICEPRECIOSETAPAFUNC2ETAPA).GetSelection()
		fk_etapa = self.GetControl(ID_CHOICEPRECIOSETAPAFUNC2ETAPA).GetClientData(inx)
		valor = self.GetControl(ID_TEXTCTRLPRECIOSETAPAFUNC2PRECIO).GetValue()
		precio = float(valor.replace(",",""))
		descripcion = self.GetControl(ID_TEXTCTRLPRECIOSETAPAFUNC2DESCRIPCION).GetValue()
		inx = self.GetControl(ID_CHOICEPRECIOSETAPAFUNC2TIPO).GetSelection()
		tipo = "A"
		if inx == 1:
			tipo = "B"
		elif inx == 2:
			tipo = "C"
			
		visible = 1
		if self.GetControl(ID_RADIOBOXPRECIOSETAPAFUNC2VISIBLE).GetStringSelection() == "No":
			visible = 0
			
		sustentable = 1
		if self.GetControl(ID_RADIOBOXPRECIOSETAPAFUNC2SUSTENTABLE).GetStringSelection() == "No":
			sustentable = 0
			
		activo = 1
		if self.GetControl(ID_RADIOBOXPRECIOSETAPAFUNC2ACTIVO).GetStringSelection() == "No":
			activo = 0
			
		if self.idprecioetapa:
			sql = """
		        update gixpreciosetapa
		        set fk_etapa = %s, precio = %s, descripcion = '%s', tipo = '%s', visible = %s,
		        sustentable = %s, activo = %s
		        where id = %s
		        """ % (int(fk_etapa), precio, descripcion, tipo, visible, sustentable, activo, self.idprecioetapa)
			todook, trash = self.QueryUpdateRecord(self.PreparaQuery(sql), conexion = r_cn)
		else:
			sql = """
		        insert into gixpreciosetapa (fk_etapa, precio, descripcion, tipo, visible, sustentable, activo)
		        values (%s, %s, '%s', '%s', %s, %s, %s)
		        """ % (int(fk_etapa), precio, descripcion, tipo, visible, sustentable, activo)
			todook, self.idprecioetapa = self.QueryUpdateRecord(self.PreparaQuery(sql), insert = True, conexion = r_cn)
			
		if todook:
			self.FillListCtrl()
		else:
			Mensajes().Info(self, u"� No se actualiz� la lista de precios !", u"Atenci�n")
			
		return todook
			
	def OnAceptar(self, evt):
		if self.ValidacionOk():
			if self.GrabaPrecio():
				self.EndModal(1)
				self.Destroy()
			
	def OnAgregar(self, evt):
		todook = False
		if self.idprecioetapa:
			todook = True
		else:
			if self.ValidacionOk():
				if self.GrabaPrecio():
					self.GetControl(ID_TEXTCTRLPRECIOSETAPAFUNC2ID).SetValue(str(self.idprecioetapa))
					todook = True
					
		if todook:
			dlg = GixPreciosEtapaFunc3(self, idprecioetapa = self.idprecioetapa,
			                           filllistctrlcaracteristicas = self.FillListCtrlCaracteristicas)
			dlg.CenterOnParent()
			dlg.ShowModal()
			
	def OnEliminar(self, evt):
		cu = r_cn.cursor()
		cu.execute("delete from gixpreciosetapacaracteristicas where id = %s" % self.idpreciosetapacaracteristica)
		cu.close()
		self.FillListCtrlCaracteristicas()

class GixPreciosEtapaFunc1(wx.Frame, GixBase):
	def __init__(self, parent, id = -1, title = u"Cat�logo de Precios", pos = wx.DefaultPosition, size = wx.DefaultSize,
	             style = wx.DEFAULT_FRAME_STYLE, usuario = None):
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		self.usuario = usuario
		self.idprecioetapa, self.currentitem = 0, 0
		panel = wx.Panel(self, -1)
		PreciosEtapaFunc1(panel, True, True)
		self.ObtenerEtapas()
		self.Bind(wx.EVT_CHOICE, self.OnChoice, id = ID_CHOICEPRECIOSETAPAFUNC1ETAPA)
		self.Bind(wx.EVT_CHOICE, self.OnChoice, id = ID_CHOICEPRECIOSETAPAFUNC1ESTATUS)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelected, id = ID_LISTCTRLPRECIOSETAPAFUNC1)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselected, id = ID_LISTCTRLPRECIOSETAPAFUNC1)
		self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnEditar, id = ID_LISTCTRLPRECIOSETAPAFUNC1)
		self.Bind(wx.EVT_BUTTON, self.OnAgregar, id = ID_BUTTONPRECIOSETAPAFUNC1AGREGAR)
		self.Bind(wx.EVT_BUTTON, self.OnEditar, id = ID_BUTTONPRECIOSETAPAFUNC1EDITAR)
		self.Bind(wx.EVT_BUTTON, self.OnCerrar, id = ID_BUTTONPRECIOSETAPAFUNC1CERRAR)
		wx.EVT_CLOSE(self, lambda _: self.Destroy())
		self.GetControl(ID_CHOICEPRECIOSETAPAFUNC1ETAPA).SetSelection(0)
		self.GetControl(ID_CHOICEPRECIOSETAPAFUNC1ESTATUS).SetSelection(0)
		self.FillListCtrl()
		self.SetFocus()

	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
				
		return dato.strip()
	
	def ObtenerEtapas(self):
		control = self.GetControl(ID_CHOICEPRECIOSETAPAFUNC1ETAPA)
		control.Enable(False); control.Show(False); control.Clear()
		cu = r_cn.cursor()
		#cu.execute(str("select codigo, descripcion from ETAPA where codigo > 46 and codigo <> 49 order by descripcion"))
		cu.execute(str("select codigo, descripcion from ETAPA where codigo > 43 and codigo not in (45,46,49) order by descripcion"))
		rows = fetchall(cu)
		cu.close()
		control.Append("<Todo>", 0)
		if rows:
			for row in rows:
				control.Append(self.GetString(row[1]), int(row[0]))
				
		control.Show(True)
		control.Enable(True)

	def OnCerrar(self, evt):
		self.Destroy()
		
	def OnChoice(self, evt):
		self.FillListCtrl()
		
	def OnSelected(self, evt):
		self.currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLPRECIOSETAPAFUNC1).GetItem(self.currentitem, 0).GetText()
		self.idprecioetapa = int(datointerno)
		self.GetControl(ID_BUTTONPRECIOSETAPAFUNC1EDITAR).Enable(True)
		evt.Skip()
		
	def OnDeselected(self, evt):
		self.currentitem = 0
		self.idprecioetapa = 0
		self.GetControl(ID_BUTTONPRECIOSETAPAFUNC1EDITAR).Enable(False)
		evt.Skip()
		
	def OnAgregar(self, evt):
		dlg = GixPreciosEtapaFunc2(self, title = u"Agregando Precio", filllistctrl = self.FillListCtrl)
		dlg.CenterOnParent()
		dlg.ShowModal()
	
	def OnEditar(self, evt):
		dlg = GixPreciosEtapaFunc2(self, idprecioetapa = self.idprecioetapa, filllistctrl = self.FillListCtrl)
		dlg.CenterOnParent()
		dlg.ShowModal()
		
	def ObtenerEtapa(self, codigo):
		descripcion = ""
		cu = r_cn.cursor()
		cu.execute(str("select descripcion from etapa where codigo = %s" % codigo))
		row = fetchone(cu)
		cu.close()
		if row is not None:
			descripcion = self.GetString(row[0])
			
		return descripcion
	
	def ObtenerRadioBox(self, dato):
		resultado = "No"
		if dato:
			resultado = "Si"
			
		return resultado
		
	def FillListCtrl(self):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLPRECIOSETAPAFUNC1)
		lctrl.Enable(False); lctrl.Show(False); lctrl.ClearAll()
		inx = self.GetControl(ID_CHOICEPRECIOSETAPAFUNC1ETAPA).GetSelection()
		fk_etapa = self.GetControl(ID_CHOICEPRECIOSETAPAFUNC1ETAPA).GetClientData(inx)
		filtroetapa = ""
		if fk_etapa:
			filtroetapa = "where fk_etapa = %s" % int(fk_etapa)
			
		inx = self.GetControl(ID_CHOICEPRECIOSETAPAFUNC1ESTATUS).GetSelection()
		filtroestatus = ""
		if inx:
			filtroestatus = "where "
			if filtroetapa:
				filtroestatus = "and "
				
			if inx == 1:
				filtroestatus += "activo = 1"
			else:
				filtroestatus += "activo = 0"
					
		query = """
		select id, fk_etapa, precio, tipo, descripcion, sustentable, visible, activo
		from gixpreciosetapa %s %s order by fk_etapa, precio
		""" % (filtroetapa, filtroestatus)
		sql = (query.replace('\t', ' ')).replace('\n', ' ')
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			lctrl.InsertColumn(0, u"C�digo", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"Etapa")
			lctrl.InsertColumn(2, u"Precio", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(3, u"Tipo", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(4, u"Descripci�n")
			lctrl.InsertColumn(5, u"Sustentable", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(6, u"Visible", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(7, u"Activo", wx.LIST_FORMAT_CENTER)
			for fila, row in enumerate(rows):
				if not int(row[7]):
					bgcolor = [255,153,153]
					#if fila %2 != 0: bgcolor = [255,153,153]
					#else:            bgcolor = [255,215,215]
				else:
					if fila %2 != 0: bgcolor = [255,255,255]
					else:            bgcolor = [230,230,255]
					
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, self.ObtenerEtapa(int(row[1])))
				lctrl.SetStringItem(index, 2, str(amount_and_cents_with_commas(row[2])))
				lctrl.SetStringItem(index, 3, self.GetString(row[3]))
				lctrl.SetStringItem(index, 4, self.GetString(row[4]))
				lctrl.SetStringItem(index, 5, self.ObtenerRadioBox(row[5]))
				lctrl.SetStringItem(index, 6, self.ObtenerRadioBox(row[6]))
				lctrl.SetStringItem(index, 7, self.ObtenerRadioBox(row[7]))
				lctrl.SetItemData(index, row[0])
				
			lctrl.SetColumnWidth(0, 50)
			lctrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(2, 100)
			lctrl.SetColumnWidth(3, 60)
			lctrl.SetColumnWidth(4, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(5, 80)
			lctrl.SetColumnWidth(6, 60)
			lctrl.SetColumnWidth(7, 60)
			lctrl.SetItemState(0, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
			#lctrl.EnsureVisible(self.currentitem)
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Precios", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 250)
			self.GetControl(ID_BUTTONPRECIOSETAPAFUNC1EDITAR).Enable(False)
			
		lctrl.Enable(True)
		lctrl.Show(True)
		lctrl.SetFocus()
		wx.EndBusyCursor()
		
class GixClientesVentasFunc3(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Agregando Hijo(a)", pos = wx.DefaultPosition, size = wx.DefaultSize,
	             style = wx.DEFAULT_DIALOG_STYLE, codigocliente = 0, filllistctrlhijos = None):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.codigocliente = codigocliente
		self.FillListCtrlHijos = filllistctrlhijos
		ClientesVentasFunc5(self, True)
		self.Bind(wx.EVT_BUTTON, self.OnAceptar, id = ID_BUTTONCLIENTEFUNC5ACEPTAR)
		self.Bind(wx.EVT_BUTTON, self.OnClose, id = ID_BUTTONCLIENTEFUNC5CANCELAR)
		wx.EVT_CLOSE(self, self.OnClose)
		self.SetFocus()
		
	def OnClose(self, evt):
		self.EndModal(1)
		self.Destroy()
		
	def PreparaQuery(self, sql):
		return (sql.replace('\t', ' ')).replace('\n', ' ')
		
	def ValidacionOk(self):
		todook = True
		ctrla = self.GetControl(ID_TEXTCTRLCLIENTEFUNC5ANIOS)
		ctrlm = self.GetControl(ID_TEXTCTRLCLIENTEFUNC5MESES)
		valora = ctrla.GetValue(); self.anios = 0
		valorm = ctrlm.GetValue(); self.meses = 0
		try:
			if valora:
				self.anios = int(valora)
		except:
			todook = False
			Mensajes().Error(self, u"� A�os mal introducidos !", u"Atenci�n")
			ctrla.SetValue(""); ctrla.SetFocus()
			
		if todook:
			try:
				if valorm:
					self.meses = int(valorm)
			except:
				todook = False
				Mensajes().Error(self, u"� Meses mal introducidos !", u"Atenci�n")
				ctrlm.SetValue(""); ctrlm.SetFocus()
				
			if todook:
				if not valora and not valorm:
					todook = False
					Mensajes().Info(self, u"� Revise los a�os y meses !", u"Atenci�n")
				
		return todook

	def OnAceptar(self, evt):
		if self.ValidacionOk():
			inx = self.GetControl(ID_RADIOBOXCLIENTEFUNC5SEXO).GetSelection()
			if inx == 0:
				sexo = "M"
			else:
				sexo = "F"
				
			sql = """
		        insert into hijos (fk_cliente, anios, meses, sexo, fecha)
		        values (%s, %s, %s, '%s', getdate())
		        """ % (self.codigocliente, self.anios, self.meses, sexo)
				
			todook, trash = self.QueryUpdateRecord(self.PreparaQuery(sql), conexion = r_cn)
			if todook:
				self.FillListCtrlHijos()
				self.EndModal(1)
				self.Destroy()
			else:
				Mensajes().Info(self, u"� No se actualiz� hijo(a) !", u"Atenci�n")
		
class GixClientesVentasFunc2(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Editando Cliente", pos = wx.DefaultPosition,
	             size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE, codigocliente = 0, filllistctrl = None):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.codigocliente = codigocliente
		self.FillListCtrl = filllistctrl
		self.tipotramite = {'S':0, 'C':1, 'Y':2}
		self.tipotramiteinx = {0:'S', 1:'C', 2:'Y'}
		self.sexo = {'F':'Femenino', 'M':'Masculino', '':''}
		self.codigohijo = 0; self.rapdisponible = ""; self.rapcliente = ""; self.cuenta = 0
		if wx.Platform == '__WXMSW__':
			ClientesVentasFunc8(self, True)
		else:
			ClientesVentasFunc2(self, True)

		self.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGED, self.OnChangeNoteBook, id = ID_NOTEBOOKCLIENTEFUNC2)
		self.DicDatesAndTxt = {ID_BITMAPBUTTONCLIENTEFUNC2ELEGIRFECHANACIMIENTO : ID_TEXTCTRLCLIENTEFUNC2FECHANACIMIENTO,
		                       ID_BITMAPBUTTONCLIENTEFUNC4ELEGIRFECHANACIMIENTO : ID_TEXTCTRLCLIENTEFUNC4FECHANACIMIENTO}
		for v in self.DicDatesAndTxt.keys():
			self.Bind(wx.EVT_BUTTON, self.OnFechaButton, id = v)
			
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONCLIENTEFUNC2LIMPIARFECHANACIMIENTO, self.OnLimpiarFechaTitular)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONCLIENTEFUNC4LIMPIARFECHANACIMIENTO, self.OnLimpiarFechaConyuge)
		
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelectedHijo, id = ID_LISTCTRLCLIENTEFUNC4)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselectedHijo, id = ID_LISTCTRLCLIENTEFUNC4)
		self.Bind(wx.EVT_BUTTON, self.OnAgregarHijo, id = ID_BUTTONCLIENTEFUNC4AGREGAR)
		self.Bind(wx.EVT_BUTTON, self.OnEliminarHijo, id = ID_BUTTONCLIENTEFUNC4ELIMINAR)
		
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelectedRapDisponible, id = ID_LISTCTRLCLIENTEFUNC7REFERENCIASRAPDISPONIBLES)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselectedRapDisponible, id = ID_LISTCTRLCLIENTEFUNC7REFERENCIASRAPDISPONIBLES)
		self.Bind(wx.EVT_BUTTON, self.OnRefrescarRapDisponible, id = ID_BITMAPBUTTONCLIENTEFUNC7REFRESCAR)
		self.Bind(wx.EVT_BUTTON, self.OnAgregarRapDisponible, id = ID_BITMAPBUTTONCLIENTEFUNC7AGREGAR)
		
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelectedRapCliente, id = ID_LISTCTRLCLIENTEFUNC7REFERENCIASRAPCLIENTE)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselectedRapCliente, id = ID_LISTCTRLCLIENTEFUNC7REFERENCIASRAPCLIENTE)
		self.Bind(wx.EVT_BUTTON, self.OnQuitarRapCliente, id = ID_BITMAPBUTTONCLIENTEFUNC7ELIMINAR)
		self.Bind(wx.EVT_BUTTON, self.OnImprimirRapCliente, id = ID_BITMAPBUTTONCLIENTEFUNC7IMPRIMIR)
		
		self.Bind(wx.EVT_BUTTON, self.OnAceptar, id = ID_BUTTONCLIENTEFUNC2ACEPTAR)
		self.Bind(wx.EVT_BUTTON, self.OnClose, id = ID_BUTTONCLIENTEFUNC2CANCELAR)
		wx.EVT_CLOSE(self, self.OnClose)
		
		if self.codigocliente:
			self.PreparaEdicion()
		else:
			self.PreparaAgregar()
					
		self.GetControl(ID_TEXTCTRLCLIENTEFUNC2NOMBRE).SetFocus()
		
	def OnClose(self, evt):
		self.ActualizaHijos()
		self.EndModal(1)
		self.Destroy()
		
	def OnChangeNoteBook(self, evt):
		tab = self.GetControl(evt.GetId()).GetSelection()
		if tab == 1:
			self.FillListCtrlHijos()
		elif tab == 3:
			self.FillListCtrlRapDisponible()
			self.FillListCtrlRapCliente()
		
	def OnLimpiarFechaTitular(self, evt):
		self.GetControl(ID_TEXTCTRLCLIENTEFUNC2FECHANACIMIENTO).SetValue("")
		
	def OnLimpiarFechaConyuge(self, evt):
		self.GetControl(ID_TEXTCTRLCLIENTEFUNC4FECHANACIMIENTO).SetValue("")
		
	def GetString(self, valor):
		dato = ""
		if valor != None:
			try:
				dato = valor.decode("iso8859-1")
			except:
				try:
					dato = str(valor)
				except:
					dato = valor
				
		return dato.strip()
	
	def GetDate(self):
		cu = r_cn.cursor()
		cu.execute("select convert(varchar(10), getdate(), 103)")
		row = fetchone(cu)
		cu.close()
		return str(row[0])

	def SetBit(self, valor):
		sw = False
		try:
			if int(valor) == 1:
				sw = True
		except:
			sw = False
		
		return sw

	def GetBit(self, valor):
		sw = 0
		try:
			if valor == True:
				sw = 1
		except:
			sw = 0
		
		return sw

	def PreparaQuery(self, sql):
		return (sql.replace('\t', ' ')).replace('\n', ' ')
	
	def PreparaEdicion(self):
		print("en edicion")
		query = """
		select nombre, rfc, nacionalidad, lugardenacimiento, convert(varchar(10), fechadenacimiento, 103),
		estadocivil, situacion, regimen, ocupacion, domicilio, colonia, cp, ciudad, estado, telefonocasa,
		telefonotrabajo, conyugenombre, conyugenacionalidad, conyugelugardenacimiento,
		convert(varchar(10), conyugefechadenacimiento, 103),
		conyugerfc, conyugeocupacion, curp, conyugecurp, email, imss, tipo_tramite, titular_ife, titular_ife_copias,
		titular_afore_copias, titular_carta_empresa, titular_acta_nacimiento, titular_acta_nacimiento_copias,
		conyuge_ife, conyuge_ife_copias, conyuge_afore_copias, conyuge_carta_empresa, conyuge_acta_nacimiento,
		conyuge_acta_nacimiento_copias, acta_matrimonio, acta_matrimonio_copias
		from cliente where codigo = %s
		""" % self.codigocliente
		cu = r_cn.cursor()
		cu.execute(self.PreparaQuery(query))
		row = fetchone(cu)
		cu.close()
		if row is not None:
			self.GetControl(ID_TEXTCTRLCLIENTEFUNC2NOMBRE).SetValue(self.GetString(row[0]))
			self.GetControl(ID_TEXTCTRLCLIENTEFUNC2ID).SetValue(str(int(self.codigocliente)))
			self.GetControl(ID_TEXTCTRLCLIENTEFUNC2FECHANACIMIENTO).SetValue(self.GetString(row[4]))
			self.GetControl(ID_TEXTCTRLCLIENTEFUNC2NACIONALIDAD).SetValue(self.GetString(row[2]))
			self.GetControl(ID_TEXTCTRLCLIENTEFUNC2LUGARNACIMIENTO).SetValue(self.GetString(row[3]))
			self.GetControl(ID_TEXTCTRLCLIENTEFUNC2TELEFONOCASA).SetValue(self.GetString(row[14]))
			self.GetControl(ID_TEXTCTRLCLIENTEFUNC2TELEFONOOFICINA).SetValue(self.GetString(row[15]))
			self.GetControl(ID_TEXTCTRLCLIENTEFUNC2RFC).SetValue(self.GetString(row[1]))
			self.GetControl(ID_TEXTCTRLCLIENTEFUNC2CURP).SetValue(self.GetString(row[22]))
			self.GetControl(ID_TEXTCTRLCLIENTEFUNC2IMSS).SetValue(self.GetString(row[25]))
			self.GetControl(ID_CHOICECLIENTEFUNC2ESTADOCIVIL).SetSelection(int(row[5]))
			self.GetControl(ID_CHOICECLIENTEFUNC2SITUACION).SetSelection(int(row[6]))
			self.GetControl(ID_CHOICECLIENTEFUNC2REGIMEN).SetSelection(int(row[7]))
			self.GetControl(ID_CHOICECLIENTEFUNC2OCUPACION).SetSelection(int(row[8]))
			
			self.GetControl(ID_TEXTCTRLCLIENTEFUNC3DOMICILIO).SetValue(self.GetString(row[9]))
			self.GetControl(ID_TEXTCTRLCLIENTEFUNC3COLONIA).SetValue(self.GetString(row[10]))
			self.GetControl(ID_TEXTCTRLCLIENTEFUNC3CIUDAD).SetValue(self.GetString(row[12]))
			self.GetControl(ID_TEXTCTRLCLIENTEFUNC3ESTADO).SetValue(self.GetString(row[13]))
			self.GetControl(ID_TEXTCTRLCLIENTEFUNC3CP).SetValue(self.GetString(row[11]))
			self.GetControl(ID_TEXTCTRLCLIENTEFUNC3EMAIL).SetValue(self.GetString(row[24]))
			
			self.GetControl(ID_TEXTCTRLCLIENTEFUNC4NOMBRE).SetValue(self.GetString(row[16]))
			self.GetControl(ID_TEXTCTRLCLIENTEFUNC4FECHANACIMIENTO).SetValue(self.GetString(row[19]))
			self.GetControl(ID_TEXTCTRLCLIENTEFUNC4NACIONALIDAD).SetValue(self.GetString(row[17]))
			self.GetControl(ID_TEXTCTRLCLIENTEFUNC4LUGARNACIMIENTO).SetValue(self.GetString(row[18]))
			self.GetControl(ID_TEXTCTRLCLIENTEFUNC4RFC).SetValue(self.GetString(row[20]))
			self.GetControl(ID_TEXTCTRLCLIENTEFUNC4CURP).SetValue(self.GetString(row[23]))
			self.GetControl(ID_CHOICECLIENTEFUNC4OCUPACION).SetSelection(int(row[21]))
			
			try:
				self.GetControl(ID_RADIOBOXCLIENTEFUNC6TIPOTRAMITE).SetSelection(self.tipotramite[str(row[26])])
			except:
				self.GetControl(ID_RADIOBOXCLIENTEFUNC6TIPOTRAMITE).SetSelection(0)
			
			self.GetControl(ID_CHECKBOXCLIENTEFUNC6IFE).SetValue(self.SetBit(row[27]))
			self.GetControl(ID_CHECKBOXCLIENTEFUNC6IFECOPIAS).SetValue(self.SetBit(row[28]))
			self.GetControl(ID_CHECKBOXCLIENTEFUNC6CARTAEMPRESA).SetValue(self.SetBit(row[30]))
			self.GetControl(ID_CHECKBOXCLIENTEFUNC6AFORECOPIAS).SetValue(self.SetBit(row[29]))
			self.GetControl(ID_CHECKBOXCLIENTEFUNC6ACTANACIMIENTO).SetValue(self.SetBit(row[31]))
			self.GetControl(ID_CHECKBOXCLIENTEFUNC6ACTANACIMIENTOCOPIAS).SetValue(self.SetBit(row[32]))
			self.GetControl(ID_CHECKBOXCLIENTEFUNC6IFECONYUGE).SetValue(self.SetBit(row[33]))
			self.GetControl(ID_CHECKBOXCLIENTEFUNC6IFECOPIASCONYUGE).SetValue(self.SetBit(row[34]))
			self.GetControl(ID_CHECKBOXCLIENTEFUNC6CARTAEMPRESACONYUGE).SetValue(self.SetBit(row[36]))
			self.GetControl(ID_CHECKBOXCLIENTEFUNC6AFORECOPIASCONYUGE).SetValue(self.SetBit(row[35]))
			self.GetControl(ID_CHECKBOXCLIENTEFUNC6ACTANACIMIENTOCONYUGE).SetValue(self.SetBit(row[37]))
			self.GetControl(ID_CHECKBOXCLIENTEFUNC6ACTANACIMIENTOCOPIASCONYUGE).SetValue(self.SetBit(row[38]))
			self.GetControl(ID_CHECKBOXCLIENTEFUNC6ACTAMATRIMONIO).SetValue(self.SetBit(row[39]))
			self.GetControl(ID_CHECKBOXCLIENTEFUNC6ACTAMATRIMONIOCOPIAS).SetValue(self.SetBit(row[40]))
			
			self.FillListCtrlHijos()
			self.FillListCtrlRapDisponible()
			self.FillListCtrlRapCliente()
		else:
			Mensajes().Error(self, u"� Problemas al accesar cliente %s !" % self.codigocliente, u"Error")
		
	def PreparaAgregar(self):
		self.GetControl(ID_TEXTCTRLCLIENTEFUNC2NOMBRE).SetValue("")
		self.GetControl(ID_TEXTCTRLCLIENTEFUNC2ID).SetValue("")
		self.GetControl(ID_TEXTCTRLCLIENTEFUNC2FECHANACIMIENTO).SetValue("")
		self.GetControl(ID_TEXTCTRLCLIENTEFUNC2NACIONALIDAD).SetValue("")
		self.GetControl(ID_TEXTCTRLCLIENTEFUNC2LUGARNACIMIENTO).SetValue("")
		self.GetControl(ID_TEXTCTRLCLIENTEFUNC2TELEFONOCASA).SetValue("")
		self.GetControl(ID_TEXTCTRLCLIENTEFUNC2TELEFONOOFICINA).SetValue("")
		self.GetControl(ID_TEXTCTRLCLIENTEFUNC2RFC).SetValue("")
		self.GetControl(ID_TEXTCTRLCLIENTEFUNC2CURP).SetValue("")
		self.GetControl(ID_TEXTCTRLCLIENTEFUNC2IMSS).SetValue("")
		self.GetControl(ID_CHOICECLIENTEFUNC2ESTADOCIVIL).SetSelection(0)
		self.GetControl(ID_CHOICECLIENTEFUNC2SITUACION).SetSelection(0)
		self.GetControl(ID_CHOICECLIENTEFUNC2REGIMEN).SetSelection(0)
		self.GetControl(ID_CHOICECLIENTEFUNC2OCUPACION).SetSelection(1)
		
		self.GetControl(ID_TEXTCTRLCLIENTEFUNC3DOMICILIO).SetValue("")
		self.GetControl(ID_TEXTCTRLCLIENTEFUNC3COLONIA).SetValue("")
		self.GetControl(ID_TEXTCTRLCLIENTEFUNC3CIUDAD).SetValue("")
		self.GetControl(ID_TEXTCTRLCLIENTEFUNC3ESTADO).SetValue("")
		self.GetControl(ID_TEXTCTRLCLIENTEFUNC3CP).SetValue("")
		self.GetControl(ID_TEXTCTRLCLIENTEFUNC3EMAIL).SetValue("")
		
		self.GetControl(ID_TEXTCTRLCLIENTEFUNC4NOMBRE).SetValue("")
		self.GetControl(ID_TEXTCTRLCLIENTEFUNC4FECHANACIMIENTO).SetValue("")
		self.GetControl(ID_TEXTCTRLCLIENTEFUNC4NACIONALIDAD).SetValue("")
		self.GetControl(ID_TEXTCTRLCLIENTEFUNC4LUGARNACIMIENTO).SetValue("")
		self.GetControl(ID_TEXTCTRLCLIENTEFUNC4RFC).SetValue("")
		self.GetControl(ID_TEXTCTRLCLIENTEFUNC4CURP).SetValue("")
		self.GetControl(ID_CHOICECLIENTEFUNC4OCUPACION).SetSelection(1)
		
		self.GetControl(ID_RADIOBOXCLIENTEFUNC6TIPOTRAMITE).SetSelection(0)
		self.GetControl(ID_CHECKBOXCLIENTEFUNC6IFE).SetValue(False)
		self.GetControl(ID_CHECKBOXCLIENTEFUNC6IFECOPIAS).SetValue(False)
		self.GetControl(ID_CHECKBOXCLIENTEFUNC6CARTAEMPRESA).SetValue(False)
		self.GetControl(ID_CHECKBOXCLIENTEFUNC6AFORECOPIAS).SetValue(False)
		self.GetControl(ID_CHECKBOXCLIENTEFUNC6ACTANACIMIENTO).SetValue(False)
		self.GetControl(ID_CHECKBOXCLIENTEFUNC6ACTANACIMIENTOCOPIAS).SetValue(False)
		self.GetControl(ID_CHECKBOXCLIENTEFUNC6IFECONYUGE).SetValue(False)
		self.GetControl(ID_CHECKBOXCLIENTEFUNC6IFECOPIASCONYUGE).SetValue(False)
		self.GetControl(ID_CHECKBOXCLIENTEFUNC6CARTAEMPRESACONYUGE).SetValue(False)
		self.GetControl(ID_CHECKBOXCLIENTEFUNC6AFORECOPIASCONYUGE).SetValue(False)
		self.GetControl(ID_CHECKBOXCLIENTEFUNC6ACTANACIMIENTOCONYUGE).SetValue(False)
		self.GetControl(ID_CHECKBOXCLIENTEFUNC6ACTANACIMIENTOCOPIASCONYUGE).SetValue(False)
		self.GetControl(ID_CHECKBOXCLIENTEFUNC6ACTAMATRIMONIO).SetValue(False)
		self.GetControl(ID_CHECKBOXCLIENTEFUNC6ACTAMATRIMONIOCOPIAS).SetValue(False)
		
		self.FillListCtrlRapDisponible()

	def OnSelectedHijo(self, evt):
		currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLCLIENTEFUNC4).GetItem(currentitem, 0).GetText()
		self.codigohijo = int(datointerno)
		self.GetControl(ID_BUTTONCLIENTEFUNC4ELIMINAR).Enable(True)
		evt.Skip()
		
	def OnDeselectedHijo(self, evt):
		self.codigohijo = 0
		self.GetControl(ID_BUTTONCLIENTEFUNC4ELIMINAR).Enable(False)
		evt.Skip()

	def FillListCtrlHijos(self):
		lctrl = self.GetControl(ID_LISTCTRLCLIENTEFUNC4)
		if lctrl.GetItemCount() > 0 or lctrl.GetColumnCount() > 0:
			lctrl.ClearAll()
			
		query = """
		select codigo, anios, meses, sexo, convert(varchar(10), fecha, 103)
		from hijos where fk_cliente = %s order by anios desc, meses desc
		""" % self.codigocliente
		cu = r_cn.cursor()
		cu.execute(self.PreparaQuery(query))
		rows = fetchall(cu)
		cu.close()
		if rows:
			lctrl.InsertColumn(0, u"Id", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"A�os", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(2, u"Meses", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(3, u"Sexo", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(4, u"Fecha", wx.LIST_FORMAT_CENTER)
			for fila, row in enumerate(rows):
				if fila %2 != 0: bgcolor = [230,230,255]
				else:            bgcolor = [204,204,255]
				
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, str(row[1]))
				lctrl.SetStringItem(index, 2, str(row[2]))
				lctrl.SetStringItem(index, 3, self.sexo[self.GetString(row[3])])
				lctrl.SetStringItem(index, 4, str(row[4]))
				lctrl.SetItemData(index, row[0])
				
			lctrl.SetColumnWidth(0, 0)
			lctrl.SetColumnWidth(1, 70)
			lctrl.SetColumnWidth(2, 70)
			lctrl.SetColumnWidth(3, 70)
			lctrl.SetColumnWidth(4, 90)
		else:
			lctrl.InsertColumn(0, u"  No se Encontraron Hijos Registrados", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 250)
			
		self.GetControl(ID_BUTTONCLIENTEFUNC4ELIMINAR).Enable(False)
		
	def OnAgregarHijo(self, evt):
		todook = False
		if self.codigocliente:
			todook = True
		else:
			if self.ValidacionOk():
				if self.GrabaCliente():
					self.GetControl(ID_TEXTCTRLCLIENTEFUNC2ID).SetValue(str(self.codigocliente))
					todook = True
					
		if todook:
			dlg = GixClientesVentasFunc3(self, codigocliente = self.codigocliente, filllistctrlhijos = self.FillListCtrlHijos)
			dlg.CenterOnParent()
			dlg.ShowModal()
			
	def OnEliminarHijo(self, evt):
		if Mensajes().YesNo(self, u"� Desea realmente eliminar hijo(a) ?", u"Confirmaci�n"):
			cu = r_cn.cursor()
			cu.execute("delete from hijos where codigo = %s" % self.codigohijo)
			cu.close()
			r_cn.commit()
			self.FillListCtrlHijos()

	def OnSelectedRapDisponible(self, evt):
		currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLCLIENTEFUNC7REFERENCIASRAPDISPONIBLES).GetItem(currentitem, 1).GetText()
		self.rapdisponible = self.GetString(datointerno)
		self.GetControl(ID_BITMAPBUTTONCLIENTEFUNC7AGREGAR).Enable(True)
		evt.Skip()
		
	def OnDeselectedRapDisponible(self, evt):
		self.rapdisponible = ""
		self.GetControl(ID_BITMAPBUTTONCLIENTEFUNC7AGREGAR).Enable(False)
		evt.Skip()

	def FillListCtrlRapDisponible(self):
		lctrl = self.GetControl(ID_LISTCTRLCLIENTEFUNC7REFERENCIASRAPDISPONIBLES)
		if lctrl.GetItemCount() > 0 or lctrl.GetColumnCount() > 0:
			lctrl.ClearAll()
			
		query = """
		select referencia, cuentabancaria, convert(varchar(10), fecha, 103)
		from referencias_rap where cliente = 0 and cuenta = 0 order by referencia
		"""
		cu = r_cn.cursor()
		cu.execute(self.PreparaQuery(query))
		rows = fetchall(cu)
		cu.close()
		if rows:
			lctrl.InsertColumn(0, u"Fila", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"Referencia", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(2, u"Cta. Bancaria", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(3, u"Fecha", wx.LIST_FORMAT_CENTER)
			for fila, row in enumerate(rows):
				if fila %2 != 0: bgcolor = [255,255,230]
				else:            bgcolor = [255,225,180]
				
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(fila))
				lctrl.SetStringItem(index, 1, self.GetString(row[0]))
				lctrl.SetStringItem(index, 2, str(row[1]))
				lctrl.SetStringItem(index, 3, str(row[2]))
				lctrl.SetItemData(index, fila)
				
			lctrl.SetColumnWidth(0, 0)
			lctrl.SetColumnWidth(1, 100)
			lctrl.SetColumnWidth(2, 90)
			lctrl.SetColumnWidth(3, 90)
		else:
			lctrl.InsertColumn(0, u"  No se Encontraron Referencias RAP Disponibles", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 350)
			
		self.GetControl(ID_BITMAPBUTTONCLIENTEFUNC7AGREGAR).Enable(False)
			
	def OnRefrescarRapDisponible(self, evt):
		self.FillListCtrlRapDisponible()
		self.FillListCtrlRapCliente()
		
	def OnAgregarRapDisponible(self, evt):
		todook = False
		if self.codigocliente:
			todook = True
		else:
			if self.ValidacionOk():
				if self.GrabaCliente():
					self.GetControl(ID_TEXTCTRLCLIENTEFUNC2ID).SetValue(str(self.codigocliente))
					todook = True
					
		if todook:
			cu = r_cn.cursor()
			cu.execute("select cliente from referencias_rap where referencia = '%s'" % self.rapdisponible)
			row = fetchone(cu)
			cu.close()
			cliente = int(row[0])
			if cliente:
				Mensajes().Info(self, u"La referencia %s que eligi� acaba de ser asignada a\n" \
				                u"otro cliente, por favor elija otra referencia RAP." % self.rapdisponible, u"Atenci�n")
				self.FillListCtrlRapDisponible()
				self.FillListCtrlRapCliente()
			else:
				sql = "update referencias_rap set cliente = %s where referencia = '%s'" % (self.codigocliente, self.rapdisponible)
				todook, trash = self.QueryUpdateRecord(sql)
				if not todook:
					Mensajes().Info(self, u"� No se agrego al cliente la referencia RAP %s !" % self.rapdisponible, u"Atenci�n")
				else:
					self.FillListCtrlRapDisponible()
					self.FillListCtrlRapCliente()

	def OnSelectedRapCliente(self, evt):
		currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLCLIENTEFUNC7REFERENCIASRAPCLIENTE).GetItem(currentitem, 1).GetText()
		self.rapcliente = self.GetString(datointerno)
		datointerno = self.GetControl(ID_LISTCTRLCLIENTEFUNC7REFERENCIASRAPCLIENTE).GetItem(currentitem, 2).GetText()
		self.cuenta = int(datointerno)
		if self.cuenta:
			self.GetControl(ID_BITMAPBUTTONCLIENTEFUNC7ELIMINAR).Enable(False)
		else:
			self.GetControl(ID_BITMAPBUTTONCLIENTEFUNC7ELIMINAR).Enable(True)

		self.GetControl(ID_BITMAPBUTTONCLIENTEFUNC7IMPRIMIR).Enable(True)
		evt.Skip()
		
	def OnDeselectedRapCliente(self, evt):
		self.rapcliente = ""; self.cuenta = 0
		self.GetControl(ID_BITMAPBUTTONCLIENTEFUNC7ELIMINAR).Enable(False)
		self.GetControl(ID_BITMAPBUTTONCLIENTEFUNC7IMPRIMIR).Enable(False)
		evt.Skip()

	def FillListCtrlRapCliente(self):
		lctrl = self.GetControl(ID_LISTCTRLCLIENTEFUNC7REFERENCIASRAPCLIENTE)
		if lctrl.GetItemCount() > 0 or lctrl.GetColumnCount() > 0:
			lctrl.ClearAll()
			
		rows = []
		if self.codigocliente:
			query = """
			select referencia, cuenta, cuentabancaria, convert(varchar(10), fecha, 103)
			from referencias_rap where cliente = %s order by referencia
			""" % self.codigocliente
			cu = r_cn.cursor()
			cu.execute(self.PreparaQuery(query))
			rows = fetchall(cu)
			cu.close()
			
		if rows:
			lctrl.InsertColumn(0, u"Fila", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"Referencia", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(2, u"Cuenta", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(3, u"Cta. Bancaria", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(4, u"Fecha", wx.LIST_FORMAT_CENTER)
			for fila, row in enumerate(rows):
				if fila %2 != 0: bgcolor = [230,230,255]
				else:            bgcolor = [204,204,255]
				
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(fila))
				lctrl.SetStringItem(index, 1, self.GetString(row[0]))
				lctrl.SetStringItem(index, 2, str(row[1]))
				lctrl.SetStringItem(index, 3, str(row[2]))
				lctrl.SetStringItem(index, 4, str(row[3]))
				lctrl.SetItemData(index, fila)
				
			lctrl.SetColumnWidth(0, 0)
			lctrl.SetColumnWidth(1, 100)
			lctrl.SetColumnWidth(2, 70)    
			lctrl.SetColumnWidth(3, 90)
			lctrl.SetColumnWidth(4, 90)
		else:
			lctrl.InsertColumn(0, u"  No se Encontraron Referencias RAP del Cliente", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 350)
			
		self.GetControl(ID_BITMAPBUTTONCLIENTEFUNC7ELIMINAR).Enable(False)
		self.GetControl(ID_BITMAPBUTTONCLIENTEFUNC7IMPRIMIR).Enable(False)
			
	def OnQuitarRapCliente(self, evt):
		sql = "update referencias_rap set cliente = 0 where referencia = '%s'" % self.rapcliente
		todook, trash = self.QueryUpdateRecord(sql)
		if not todook:
			Mensajes().Info(self, u"� No se elimino la referencia RAP %s del cliente !" % self.rapcliente, u"Atenci�n")
		else:
			self.FillListCtrlRapCliente()
			self.FillListCtrlRapDisponible()
		
	def OnImprimirRapCliente(self, evt):
		if self.rapcliente:
			self.ImprimirRapCliente()
		else:
			Mensajes().Info(self, u"� Elija la referencia RAP a imprimir !", u"Atenci�n")
			
	def ImprimirRapCliente(self):
		try:
			pisa
		except:
			Mensajes().Info(self, u"� Por favor instale el m�dulo pisa !", u"Aviso")
			return
		    
		try:
			wx.BeginBusyCursor()
			gridcontenthtml = self.GetHtmlRapCliente()
			if gridcontenthtml:
				archivo = self.GetPdfFileName("rap")
				gridcontenthtml = gridcontenthtml.encode("utf-8")
				pdf = pisa.CreatePDF(cStringIO.StringIO(gridcontenthtml), file(archivo, "wb"))
				if not pdf.err:
					try:
						pdf.dest.close()
					except:
						warnings.warn("<<pdf.dest.close() no se pudo.>>")
					try:
						os.startfile(str(archivo))
					except:
						commmand_line = "open %s" % archivo
						p = subprocess.Popen(commmand_line, shell = True)
						pid, sts = os.waitpid(p.pid, 0)
						
						#os.system("open %s" % archivo)
						
				wx.EndBusyCursor()
			else:
				wx.EndBusyCursor()
				Mensajes().Info(self, u"� No se encontr� informaci�n referente a la referencia RAP !", u"Atenci�n")
		except:
			wx.EndBusyCursor()
			Mensajes().Info(self, u"� Se presento un problema al imprimir la referencia RAP !", u"Atenci�n")
			
	def GetHtmlRapCliente(self):
		desarrollo, etapa, manzana, lote = "", 0, "", ""
		if self.cuenta:
			query = """
			select d.descripcion, c.fk_etapa, i.iden2, i.iden1 from cuenta c
			join etapa e on c.fk_etapa = e.codigo
			join desarrollo d on e.fk_desarrollo = d.codigo
			join inmueble i on c.fk_inmueble = i.codigo
			where c.codigo = %s
			""" % self.cuenta
			cu = r_cn.cursor()
			cu.execute(self.PreparaQuery(query))
			row = fetchone(cu)
			cu.close()
			if row is not None:
				desarrollo = self.GetString(row[0])
				etapa = int(row[1])
				manzana = self.GetString(row[2])
				lote = self.GetString(row[3])
			
		meses = ("", "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto",
	                 "Septiembre", "Octubre", "Noviembre", "Diciembre")
		d, m, a = self.GetDate().split("/")
		fecha = "Guadalajara, Jalisco a %02d de %s de %04d" % (int(d), meses[int(m)], int(a))
		cliente = self.GetControl(ID_TEXTCTRLCLIENTEFUNC2NOMBRE).GetValue()
		
		if desarrollo:
			header = u"""
			<div style="text-align: center;"><big><span style="font-weight: bold;"><span
			style="font-family: Arial;"><big>INFORMACION PARA EL DEPOSITO<br>
			<br>
			<br>
			</big></span></span></big>
			<div style="text-align: right;"><span style="font-family: Arial;"><big>${FECHA}<br>
			</big></span>
			<hr style="width: 100%; height: 2px;">
			<div style="text-align: center;">
			<table style="text-align: left; width: 976px; height: 244px;" border="0"
			cellpadding="2" cellspacing="2">
			<tbody>
			<tr>
			<td
			style="vertical-align: middle; text-align: right; width: 240px;"><big
			style="font-weight: bold;"><span style="font-family: Arial;">Banco</span>&nbsp;</big>
			<br>
			</td>
			<td style="vertical-align: top;"><big><big><big><span
			style="font-weight: bold;"><span style="font-family: Arial;">HSBC</span></span></big></big></big><br>
			</td>
			</tr>
			<tr>
			<td
			style="vertical-align: middle; text-align: right; width: 240px;"><big><span
			style="font-family: Arial;">Nombre del Servicio</span></big>&nbsp; <br>
			</td>
			<td style="vertical-align: top;"><big><big><span
			style="font-weight: bold; font-family: Arial;">DESARROLLADORA URBANA
			INTEGRAL, S.A. DE C.V.</span></big></big><br>
			</td>
			</tr>
			<tr>
			<td
			style="vertical-align: middle; text-align: right; width: 240px;"><big><span
			style="font-family: Arial;">Clave del Servicio</span>&nbsp;</big> <br>
			</td>
			<td style="vertical-align: top;"><big><big><span
			style="font-weight: bold;"><span style="font-family: Arial;">6027</span></span></big></big><br>
			</td>
			</tr>
			<tr>
			<td
			style="vertical-align: middle; text-align: right; width: 240px;"><big><span
			style="font-family: Arial;">Referencia</span></big>&nbsp; <br>
			</td>
			<td style="vertical-align: top;"><big><big><span
			style="font-weight: bold;"><span style="font-family: Arial;">${REFERENCIA}</span></span></big></big><br>
			</td>
			</tr>
			<tr>
			<td
			style="vertical-align: middle; text-align: right; width: 240px;"><big><span
			style="font-family: Arial;">Nombre del Depositante</span></big>&nbsp; <br>
			</td>
			<td style="vertical-align: top;"><big><big
			style="font-weight: bold;"><span style="font-family: Arial;">${CLIENTE}</span></big></big><br>
			</td>
			</tr>
			<tr>
			<td style="vertical-align: middle; text-align: right;"><big><span
			style="font-family: Arial;">Desarrollo</span></big><br>
			</td>
			<td style="vertical-align: top;"><big><span
			style="font-weight: bold;"><span style="font-family: Arial;"><big>${DESARROLLO}</big></span></span></big>
			<big style="font-family: Arial;"><big><span
			style="font-weight: bold;">[${ETAPA}]</span></big></big><br>
			</td>
			</tr>
			<tr>
			<td style="vertical-align: middle; text-align: right;"><big><span
			style="font-family: Arial;">Manzana</span></big><br>
			</td>
			<td style="vertical-align: top;"><big><big><span
			style="font-weight: bold;"><span style="font-family: Arial;">${MANZANA}</span></span></big></big><br>
			</td>
			</tr>
			<tr>
			<td style="vertical-align: middle; text-align: right;"><big><span
			style="font-family: Arial;">Lote</span></big><br>
			</td>
			<td style="vertical-align: top;"><big><big><span
			style="font-weight: bold;"><span style="font-family: Arial;">${LOTE}</span></span></big></big><br>
			</td>
			</tr>
			<tr>
			<td
			style="vertical-align: middle; text-align: right; width: 240px;"><big
			style="font-weight: bold;"><span style="font-family: Arial;">Total del
			Deposito M.N.</span></big>&nbsp; <br>
			</td>
			<td style="vertical-align: top;"><big><big><big><big><span
			style="font-weight: bold;"><span style="font-family: Arial;">$</span></span></big></big></big></big><br>
			</td>
			</tr>
			</tbody>
			</table>
			<div style="text-align: left;">
			<hr style="width: 100%; height: 2px;"><big><span
			style="font-family: Arial;">Notas.-</span></big><br>
			</div>
			</div>
			<br>
			<span style="font-family: Arial;"></span><big><span
			style="font-weight: bold;"><span style="font-family: Arial;"></span></span></big></div>
			</div>
			"""
		else:
			header = u"""
			<div style="text-align: center;"><big><span style="font-weight: bold;"><span
			style="font-family: Arial;"><big>INFORMACION PARA EL DEPOSITO<br>
			<br>
			<br>
			</big></span></span></big>
			<div style="text-align: right;"><span style="font-family: Arial;"><big>${FECHA}<br>
			</big></span>
			<hr style="width: 100%; height: 2px;">
			<div style="text-align: center;">
			<table style="text-align: left; width: 976px; height: 244px;" border="0"
			cellpadding="2" cellspacing="2">
			<tbody>
			<tr>
			<td
			style="vertical-align: middle; text-align: right; width: 240px;"><big
			style="font-weight: bold;"><span style="font-family: Arial;">Banco</span>&nbsp;</big>
			<br>
			</td>
			<td style="vertical-align: top;"><big><big><big><span
			style="font-weight: bold;"><span style="font-family: Arial;">HSBC</span></span></big></big></big><br>
			</td>
			</tr>
			<tr>
			<td
			style="vertical-align: middle; text-align: right; width: 240px;"><big><span
			style="font-family: Arial;">Nombre del Servicio</span></big>&nbsp; <br>
			</td>
			<td style="vertical-align: top;"><big><big><span
			style="font-weight: bold; font-family: Arial;">DESARROLLADORA URBANA
			INTEGRAL, S.A. DE C.V.</span></big></big><br>
			</td>
			</tr>
			<tr>
			<td
			style="vertical-align: middle; text-align: right; width: 240px;"><big><span
			style="font-family: Arial;">Clave del Servicio</span>&nbsp;</big> <br>
			</td>
			<td style="vertical-align: top;"><big><big><span
			style="font-weight: bold;"><span style="font-family: Arial;">6027</span></span></big></big><br>
			</td>
			</tr>
			<tr>
			<td
			style="vertical-align: middle; text-align: right; width: 240px;"><big><span
			style="font-family: Arial;">Referencia</span></big>&nbsp; <br>
			</td>
			<td style="vertical-align: top;"><big><big><span
			style="font-weight: bold;"><span style="font-family: Arial;">${REFERENCIA}</span></span></big></big><br>
			</td>
			</tr>
			<tr>
			<td
			style="vertical-align: middle; text-align: right; width: 240px;"><big><span
			style="font-family: Arial;">Nombre del Depositante</span></big>&nbsp; <br>
			</td>
			<td style="vertical-align: top;"><big><big
			style="font-weight: bold;"><span style="font-family: Arial;">${CLIENTE}</span></big></big><br>
			</td>
			</tr>
			<tr>
			<td
			style="vertical-align: middle; text-align: right; width: 240px;"><big
			style="font-weight: bold;"><span style="font-family: Arial;">Total del
			Deposito M.N.</span></big>&nbsp; <br>
			</td>
			<td style="vertical-align: middle;"><big><big><big><big><span
			style="font-weight: bold;"><span style="font-family: Arial;">$</span></span></big></big></big></big><br>
			</td>
			</tr>
			</tbody>
			</table>
			<div style="text-align: left;">
			<hr style="width: 100%; height: 2px;"><big><span
			style="font-family: Arial;">Notas.-</span></big><br>
			</div>
			</div>
			<br>
			<span style="font-family: Arial;"></span><big><span
			style="font-weight: bold;"><span style="font-family: Arial;"></span></span></big></div>
			</div>
			"""
			
		h = (header.replace('\n',' ')).replace('\t',' ')
		h = ((h.replace('${FECHA}',fecha)).replace('${REFERENCIA}',self.rapcliente)).replace('${CLIENTE}',cliente)
		if desarrollo:
			h = (((h.replace('${DESARROLLO}', desarrollo)).replace('${ETAPA}',str(etapa))). \
			     replace('${MANZANA}',manzana)).replace('${LOTE}',lote)
		
		html = '<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" />' \
	             '</head><body>' + h + '</body></html>'
		
		return html
	
	def ActualizaHijos(self):
		if self.codigocliente:
			cu = r_cn.cursor()
			cu.execute("delete from sinhijos where fk_cliente = %s" % self.codigocliente)
			cu.close()
			r_cn.commit()
			cu = r_cn.cursor()
			cu.execute("select codigo from hijos where fk_cliente = %s" % self.codigocliente)
			rows = fetchall(cu)
			cu.close()
			if not rows:
				sql = "insert into sinhijos (fk_cliente) values (%s)" % self.codigocliente
				todook, trash = self.QueryUpdateRecord(sql)
			
				if not todook:
					Mensajes().Info(self, u"� No se actualiz� la estad�stica de hijos !", u"Atenci�n")
			
	def ValidacionOk(self):
		todook = True
		campos = {"NOMBRE":u"el nombre del cliente", "FECHANACIMIENTO":u"la fecha de nacimiento",
		          "IMSS":u"el n�mero de afiliaci�n al IMSS"}
		
		for campo in campos.keys():
			if not self.GetControl(eval("ID_TEXTCTRLCLIENTEFUNC2%s" % campo)).GetValue():
				Mensajes().Info(self, u"� Introduzca %s !" % campos[campo], u"Atenci�n")
				self.GetControl(eval("ID_TEXTCTRLCLIENTEFUNC2%s" % campo)).SetFocus()
				todook = False
				break
			elif campo == "IMSS":
				valor = self.GetControl(eval("ID_TEXTCTRLCLIENTEFUNC2%s" % campo)).GetValue()
				try:
					imss = int(valor)
					if len(str(valor)) != 11:
						Mensajes().Info(self, u"� Revise el n�mero del IMSS !", u"Atenci�n")
						todook = False
						break
				except:
					Mensajes().Info(self, u"� El n�mero del IMSS debe ser numerico !", u"Atenci�n")
					todook = False
					break
			
		return todook

	def GrabaCliente(self):
		nombre = self.GetControl(ID_TEXTCTRLCLIENTEFUNC2NOMBRE).GetValue()
		d, m, a = self.GetControl(ID_TEXTCTRLCLIENTEFUNC2FECHANACIMIENTO).GetValue().split("/")
		fechanacimiento = "%04d/%02d/%02d" % (int(a), int(m), int(d))
		nacionalidad = self.GetControl(ID_TEXTCTRLCLIENTEFUNC2NACIONALIDAD).GetValue()
		lugarnacimiento = self.GetControl(ID_TEXTCTRLCLIENTEFUNC2LUGARNACIMIENTO).GetValue()
		telefonocasa = self.GetControl(ID_TEXTCTRLCLIENTEFUNC2TELEFONOCASA).GetValue()
		telefonooficina = self.GetControl(ID_TEXTCTRLCLIENTEFUNC2TELEFONOOFICINA).GetValue()
		rfc = self.GetControl(ID_TEXTCTRLCLIENTEFUNC2RFC).GetValue()
		curp = self.GetControl(ID_TEXTCTRLCLIENTEFUNC2CURP).GetValue()
		imss = self.GetControl(ID_TEXTCTRLCLIENTEFUNC2IMSS).GetValue()
		
		estadocivil = str(self.GetControl(ID_CHOICECLIENTEFUNC2ESTADOCIVIL).GetSelection())
		situacion = str(self.GetControl(ID_CHOICECLIENTEFUNC2SITUACION).GetSelection())
		regimen = str(self.GetControl(ID_CHOICECLIENTEFUNC2REGIMEN).GetSelection())
		ocupacion = str(self.GetControl(ID_CHOICECLIENTEFUNC2OCUPACION).GetSelection())
		
		domicilio = self.GetControl(ID_TEXTCTRLCLIENTEFUNC3DOMICILIO).GetValue()
		colonia = self.GetControl(ID_TEXTCTRLCLIENTEFUNC3COLONIA).GetValue()
		ciudad = self.GetControl(ID_TEXTCTRLCLIENTEFUNC3CIUDAD).GetValue()
		estado = self.GetControl(ID_TEXTCTRLCLIENTEFUNC3ESTADO).GetValue()
		cp = self.GetControl(ID_TEXTCTRLCLIENTEFUNC3CP).GetValue()
		email = self.GetControl(ID_TEXTCTRLCLIENTEFUNC3EMAIL).GetValue()
		
		nombreconyuge = self.GetControl(ID_TEXTCTRLCLIENTEFUNC4NOMBRE).GetValue()
		fecha = self.GetControl(ID_TEXTCTRLCLIENTEFUNC4FECHANACIMIENTO).GetValue()
		fechanacimientoconyugeu = "conyugefechadenacimiento = null"
		fechanacimientoconyugei = "null"
		if fecha:
			d, m, a = fecha.split("/")
			fechanacimientoconyugeu = "conyugefechadenacimiento = '%04d/%02d/%02d'" % (int(a), int(m), int(d))
			fechanacimientoconyugei = "'%04d/%02d/%02d'" % (int(a), int(m), int(d))
			
		nacionalidadconyuge = self.GetControl(ID_TEXTCTRLCLIENTEFUNC4NACIONALIDAD).GetValue()
		lugarnacimientoconyuge = self.GetControl(ID_TEXTCTRLCLIENTEFUNC4LUGARNACIMIENTO).GetValue()
		rfcconyuge = self.GetControl(ID_TEXTCTRLCLIENTEFUNC4RFC).GetValue()
		curpconyuge = self.GetControl(ID_TEXTCTRLCLIENTEFUNC4CURP).GetValue()
		
		ocupacionconyuge = str(self.GetControl(ID_CHOICECLIENTEFUNC4OCUPACION).GetSelection())
		
		inx = self.GetControl(ID_RADIOBOXCLIENTEFUNC6TIPOTRAMITE).GetSelection()
		tipotramite = self.tipotramiteinx[inx]
		
		ife = self.GetBit(self.GetControl(ID_CHECKBOXCLIENTEFUNC6IFE).GetValue())
		ifecopias = self.GetBit(self.GetControl(ID_CHECKBOXCLIENTEFUNC6IFECOPIAS).GetValue())
		cartaempresa = self.GetBit(self.GetControl(ID_CHECKBOXCLIENTEFUNC6CARTAEMPRESA).GetValue())
		aforecopias = self.GetBit(self.GetControl(ID_CHECKBOXCLIENTEFUNC6AFORECOPIAS).GetValue())
		actanacimiento = self.GetBit(self.GetControl(ID_CHECKBOXCLIENTEFUNC6ACTANACIMIENTO).GetValue())
		actanacimientocopias = self.GetBit(self.GetControl(ID_CHECKBOXCLIENTEFUNC6ACTANACIMIENTOCOPIAS).GetValue())
		ifeconyuge = self.GetBit(self.GetControl(ID_CHECKBOXCLIENTEFUNC6IFECONYUGE).GetValue())
		ifecopiasconyuge = self.GetBit(self.GetControl(ID_CHECKBOXCLIENTEFUNC6IFECOPIASCONYUGE).GetValue())
		cartaempresaconyuge = self.GetBit(self.GetControl(ID_CHECKBOXCLIENTEFUNC6CARTAEMPRESACONYUGE).GetValue())
		aforecopiasconyuge = self.GetBit(self.GetControl(ID_CHECKBOXCLIENTEFUNC6AFORECOPIASCONYUGE).GetValue())
		actanacimientoconyuge = self.GetBit(self.GetControl(ID_CHECKBOXCLIENTEFUNC6ACTANACIMIENTOCONYUGE).GetValue())
		actanacimientocopiasconyuge = self.GetBit(self.GetControl(ID_CHECKBOXCLIENTEFUNC6ACTANACIMIENTOCOPIASCONYUGE).GetValue())
		actamatrimonio = self.GetBit(self.GetControl(ID_CHECKBOXCLIENTEFUNC6ACTAMATRIMONIO).GetValue())
		actamatrimoniocopias = self.GetBit(self.GetControl(ID_CHECKBOXCLIENTEFUNC6ACTAMATRIMONIOCOPIAS).GetValue())
		
		if self.codigocliente:
			sql = """
		        update cliente
		        set nombre = '%s', rfc = '%s', nacionalidad = '%s', lugardenacimiento = '%s',
		        fechadenacimiento = '%s', estadocivil = '%s', situacion = '%s', regimen = '%s', ocupacion = '%s',
			domicilio = '%s', colonia = '%s', cp = '%s', ciudad = '%s', estado = '%s', telefonocasa = '%s',
			telefonotrabajo = '%s', conyugenombre = '%s', conyugenacionalidad = '%s', conyugelugardenacimiento = '%s',
			%s, conyugerfc = '%s', conyugeocupacion = '%s', curp = '%s',
			conyugecurp = '%s', email = '%s', imss = '%s', tipo_tramite = '%s', titular_ife = %s, titular_ife_copias = %s,
			titular_afore_copias = %s, titular_carta_empresa = %s, titular_acta_nacimiento = %s,
			titular_acta_nacimiento_copias = %s, conyuge_ife = %s, conyuge_ife_copias = %s,
			conyuge_afore_copias = %s, conyuge_carta_empresa = %s, conyuge_acta_nacimiento = %s,
			conyuge_acta_nacimiento_copias = %s, acta_matrimonio = %s, acta_matrimonio_copias = %s
		        where codigo = %s
		        """ % (nombre, rfc, nacionalidad, lugarnacimiento, fechanacimiento, estadocivil, situacion, regimen,
			       ocupacion, domicilio, colonia, cp, ciudad, estado, telefonocasa, telefonooficina, nombreconyuge,
			       nacionalidadconyuge, lugarnacimientoconyuge, fechanacimientoconyugeu, rfcconyuge, ocupacionconyuge,
			       curp, curpconyuge, email, imss, tipotramite, ife, ifecopias, aforecopias, cartaempresa, actanacimiento,
			       actanacimientocopias, ifeconyuge, ifecopiasconyuge, aforecopiasconyuge, cartaempresaconyuge,
			       actanacimientoconyuge, actanacimientocopiasconyuge, actamatrimonio, actamatrimoniocopias,
			       self.codigocliente)
			todook, trash = self.QueryUpdateRecord(self.PreparaQuery(sql))
		else:
			cu = r_cn.cursor()
			cu.execute("select top 1 codigo from cliente order by codigo desc")
			row = fetchone(cu)
			cu.close()
			self.codigocliente = int(row[0]) + 1
			sql = """
		        insert into cliente
		        (codigo, nombre, rfc, nacionalidad, lugardenacimiento, fechadenacimiento, estadocivil, situacion, regimen,
			ocupacion, domicilio, colonia, cp, ciudad, estado, telefonocasa, telefonotrabajo, conyugenombre,
			conyugenacionalidad, conyugelugardenacimiento, conyugefechadenacimiento, conyugerfc, conyugeocupacion, curp,
			conyugecurp, email, imss, tipo_tramite, titular_ife, titular_ife_copias, titular_afore_copias,
			titular_carta_empresa, titular_acta_nacimiento, titular_acta_nacimiento_copias, conyuge_ife, conyuge_ife_copias,
			conyuge_afore_copias, conyuge_carta_empresa, conyuge_acta_nacimiento, conyuge_acta_nacimiento_copias,
			acta_matrimonio, acta_matrimonio_copias)
			values
			(%s, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s',
			'%s', %s, '%s', '%s', '%s', '%s', '%s', '%s', '%s', %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
		        """ % (self.codigocliente, nombre, rfc, nacionalidad, lugarnacimiento, fechanacimiento, estadocivil, situacion,
			       regimen, ocupacion, domicilio, colonia, cp, ciudad, estado, telefonocasa, telefonooficina, nombreconyuge,
			       nacionalidadconyuge, lugarnacimientoconyuge, fechanacimientoconyugei, rfcconyuge, ocupacionconyuge,
			       curp, curpconyuge, email, imss, tipotramite, ife, ifecopias, aforecopias, cartaempresa, actanacimiento,
			       actanacimientocopias, ifeconyuge, ifecopiasconyuge, aforecopiasconyuge, cartaempresaconyuge,
			       actanacimientoconyuge, actanacimientocopiasconyuge, actamatrimonio, actamatrimoniocopias)
			todook, trash = self.QueryUpdateRecord(self.PreparaQuery(sql))
			
		if not todook:
			Mensajes().Info(self, u"� No se actualiz� el cliente !", u"Atenci�n")
			
		return todook
			
	def OnAceptar(self, evt):
		self.ActualizaHijos()
		if self.ValidacionOk():
			if self.GrabaCliente():
				self.EndModal(1)
				self.Destroy()
			
class GixClientesVentasFunc1(wx.Frame, GixBase):
	def __init__(self, parent, id = -1, title = u"Clientes", pos = wx.DefaultPosition, size = wx.DefaultSize,
	             style = wx.DEFAULT_FRAME_STYLE):
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		self.codigocliente, self.nombrecliente, self.idclientefiltro, self.clientefiltro = 0, "", "", ""
		panel = wx.Panel(self, -1)
		ClientesVentasFunc1(panel)
		if wx.Platform == '__WXMSW__':
			self.SetSize(wx.Size(610, 660))

		self.GetControl(ID_SEARCHCTRLCLIENTEFUNC1BUSCARIDCLIENTE).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchIdCliente, id = ID_SEARCHCTRLCLIENTEFUNC1BUSCARIDCLIENTE)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanIdCliente, id = ID_SEARCHCTRLCLIENTEFUNC1BUSCARIDCLIENTE)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchIdCliente, id = ID_SEARCHCTRLCLIENTEFUNC1BUSCARIDCLIENTE)
		self.GetControl(ID_SEARCHCTRLCLIENTEFUNC1BUSCARCLIENTE).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchCliente, id = ID_SEARCHCTRLCLIENTEFUNC1BUSCARCLIENTE)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanCliente, id = ID_SEARCHCTRLCLIENTEFUNC1BUSCARCLIENTE)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchCliente, id = ID_SEARCHCTRLCLIENTEFUNC1BUSCARCLIENTE)
		self.Bind(wx.EVT_CHOICE, self.OnChoiceClientes, id = ID_CHOICECLIENTEFUNC1FILTROCUENTA)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelected, id = ID_LISTCTRLCLIENTEFUNC1)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselected, id = ID_LISTCTRLCLIENTEFUNC1)
		self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnActivated, id = ID_LISTCTRLCLIENTEFUNC1)
		self.Bind(wx.EVT_BUTTON, self.OnRefrescar, id = ID_BUTTONCLIENTEFUNC1REFRESCAR)
		self.Bind(wx.EVT_BUTTON, self.OnAgregar, id = ID_BUTTONCLIENTEFUNC1AGREGAR)
		self.Bind(wx.EVT_BUTTON, self.OnActivated, id = ID_BUTTONCLIENTEFUNC1EDITAR)
		self.Bind(wx.EVT_BUTTON, self.OnClose, id = ID_BUTTONCLIENTEFUNC1CERRAR)
		wx.EVT_CLOSE(self, self.OnClose)
		self.GetControl(ID_CHOICECLIENTEFUNC1FILTROCUENTA).SetSelection(0)
		self.FillListCtrl()
		self.SetFocus()
		self.GetControl(ID_SEARCHCTRLCLIENTEFUNC1BUSCARIDCLIENTE).SetFocus()
		
	def OnClose(self, evt):
		self.Destroy()
		
	def GetEncode(self, valor):
		dato = ""
		try:
			dato = valor.encode("iso8859-1")
		except:
			dato = valor
			
		return dato.strip()
	
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
				
		return dato.strip()

	def OnDoSearchIdCliente(self, evt):
		self.idclientefiltro = self.GetControl(ID_SEARCHCTRLCLIENTEFUNC1BUSCARIDCLIENTE).GetValue()
		self.FillListCtrl()

	def OnCleanIdCliente(self, evt):
		self.GetControl(ID_SEARCHCTRLCLIENTEFUNC1BUSCARIDCLIENTE).SetValue("")
		self.idclientefiltro = ""
		self.FillListCtrl()
		
	def OnDoSearchCliente(self, evt):
		cliente =  self.GetControl(ID_SEARCHCTRLCLIENTEFUNC1BUSCARCLIENTE).GetValue()
		self.clientefiltro = self.GetEncode(cliente)
		self.FillListCtrl()

	def OnCleanCliente(self, evt):
		self.GetControl(ID_SEARCHCTRLCLIENTEFUNC1BUSCARCLIENTE).SetValue("")
		self.clientefiltro = ""
		self.FillListCtrl()
		
	def OnChoiceClientes(self, evt):
		self.FillListCtrl()

	def OnSelected(self, evt):
		currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLCLIENTEFUNC1).GetItem(currentitem, 0).GetText()
		self.codigocliente = int(datointerno)
		self.nombrecliente = self.GetControl(ID_LISTCTRLCLIENTEFUNC1).GetItem(currentitem, 1).GetText()
		self.GetControl(ID_BUTTONCLIENTEFUNC1EDITAR).Enable(True)
		evt.Skip()
		
	def OnDeselected(self, evt):
		self.codigocliente, self.nombrecliente = 0, ""
		self.GetControl(ID_BUTTONCLIENTEFUNC1EDITAR).Enable(False)
		evt.Skip()
	
	def OnActivated(self, evt):
		dlg = GixClientesVentasFunc2(self, codigocliente = self.codigocliente, filllistctrl = self.FillListCtrl)
		dlg.CenterOnParent()
		dlg.ShowModal()
		
	def OnAgregar(self, evt):
		dlg = GixClientesVentasFunc2(self, title = u"Agregando Cliente", filllistctrl = self.FillListCtrl)
		dlg.CenterOnParent()
		dlg.ShowModal()
		
	def OnRefrescar(self, evt):
		self.FillListCtrl()
		
	def FillListCtrl(self):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLCLIENTEFUNC1)
		if lctrl.GetItemCount() > 0 or lctrl.GetColumnCount() > 0:
			lctrl.ClearAll()

		listctrlfiltro = ""
		if self.idclientefiltro:
			listctrlfiltro = "where codigo = %s" % self.idclientefiltro
			
		if self.clientefiltro:
			if listctrlfiltro:
				listctrlfiltro = "%s and nombre like '%s%s%s'" % (listctrlfiltro, "%%", self.clientefiltro, "%%")
			else:
				listctrlfiltro = "where nombre like '%s%s%s'" % ("%%", self.clientefiltro, "%%")
				
		filtroclientes = self.GetControl(ID_CHOICECLIENTEFUNC1FILTROCUENTA).GetSelection()
		if filtroclientes == 1:
			if listctrlfiltro:
				listctrlfiltro = "%s %s" % (listctrlfiltro, "and codigo not in (select distinct fk_cliente from cuenta)")
			else:
				listctrlfiltro = "where codigo not in (select distinct fk_cliente from cuenta)"
		elif filtroclientes == 2:
			if listctrlfiltro:
				listctrlfiltro = "%s %s" % (listctrlfiltro, "and codigo in (select distinct fk_cliente from cuenta)")
			else:
				listctrlfiltro = "where codigo in (select distinct fk_cliente from cuenta)"
				
		cu = r_cn.cursor()
		cu.execute("select codigo, nombre from CLIENTE %s order by nombre" % listctrlfiltro)
		rows = fetchall(cu)
		cu.close()
		if rows:
			lctrl.InsertColumn(0, u"C�digo", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(1, u"Nombre")
			for fila, row in enumerate(rows):
				if fila %2 != 0: bgcolor = [230,230,255]
				else:            bgcolor = [204,204,255]

				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, self.GetString(row[1]))
				lctrl.SetItemData(index, row[0])
				
			lctrl.SetColumnWidth(0, 70)
			lctrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Clientes", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 200)
			
		self.GetControl(ID_BUTTONCLIENTEFUNC1EDITAR).Enable(False)
		wx.EndBusyCursor()
		
class GixClientesVentasPinaresFunc2(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Arcadia (Pinares Tapalpa) - Editando Cliente", pos = wx.DefaultPosition,
	             size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE, codigocliente = 0, filllistctrl = None):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.codigocliente = codigocliente
		self.FillListCtrl = filllistctrl
		if wx.Platform == '__WXMSW__':
			ClientesVentasPinaresFunc2(self, True)
		else:
			ClientesVentasPinaresFunc2(self, True)

		self.DicDatesAndTxt = {ID_BITMAPBUTTONCLIENTEPINARESFUNC2ELEGIRFECHANACIMIENTO : ID_TEXTCTRLCLIENTEPINARESFUNC2FECHANACIMIENTO,
		                       ID_BITMAPBUTTONCLIENTEPINARESFUNC4ELEGIRFECHANACIMIENTO : ID_TEXTCTRLCLIENTEPINARESFUNC4FECHANACIMIENTO}
		
		for v in self.DicDatesAndTxt.keys():
			self.Bind(wx.EVT_BUTTON, self.OnFechaButton, id = v)
			
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONCLIENTEPINARESFUNC2LIMPIARFECHANACIMIENTO, self.OnLimpiarFechaTitular)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONCLIENTEPINARESFUNC4LIMPIARFECHANACIMIENTO, self.OnLimpiarFechaConyuge)
		
		self.Bind(wx.EVT_BUTTON, self.OnAceptar, id = ID_BUTTONCLIENTEPINARESFUNC2ACEPTAR)
		self.Bind(wx.EVT_BUTTON, self.OnClose, id = ID_BUTTONCLIENTEPINARESFUNC2CANCELAR)
		wx.EVT_CLOSE(self, self.OnClose)
		
		if self.codigocliente:
			self.PreparaEdicion()
		else:
			self.PreparaAgregar()
					
		self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC2NOMBRE).SetFocus()
		
	def OnClose(self, evt):
		self.EndModal(1)
		self.Destroy()
		
	def OnLimpiarFechaTitular(self, evt):
		self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC2FECHANACIMIENTO).SetValue("")
		
	def OnLimpiarFechaConyuge(self, evt):
		self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC4FECHANACIMIENTO).SetValue("")
		
	def GetString(self, valor):
		dato = ""
		if valor != None:
			try:
				dato = valor.decode("iso8859-1")
			except:
				try:
					dato = str(valor)
				except:
					dato = valor
				
		return dato.strip()
	
	def GetDate(self):
		cu = r_cngcmex.cursor()
		cu.execute("select convert(varchar(10), getdate(), 103)")
		row = fetchone(cu)
		cu.close()
		return str(row[0])

	def SetBit(self, valor):
		sw = False
		try:
			if int(valor) == 1:
				sw = True
		except:
			sw = False
		
		return sw

	def GetBit(self, valor):
		sw = 0
		try:
			if valor == True:
				sw = 1
		except:
			sw = 0
		
		return sw

	def PreparaQuery(self, sql):
		return (sql.replace('\t', ' ')).replace('\n', ' ')
	
	def PreparaEdicion(self):
		print("hasta acaaa")
		query = """
		select nombre, rfc, nacionalidad, lugardenacimiento, convert(varchar(10), fechadenacimiento, 103),
		estadocivil, situacion, regimen, ocupacion, domicilio, colonia, cp, ciudad, estado, telefonocasa,
		telefonotrabajo, conyugenombre, conyugenacionalidad, conyugelugardenacimiento,
		convert(varchar(10), conyugefechadenacimiento, 103),
		conyugerfc, conyugeocupacion, curp, conyugecurp, email
		from cliente where codigo = %s
		""" % self.codigocliente
		if os.environ["POSTGRES"]:
			query = """
			select nombre, rfc, nacionalidad, lugardenacimiento, fechadenacimiento,
			estadocivil, situacion, regimen, ocupacion, domicilio, colonia, cp, ciudad, estado, telefonocasa,
			telefonotrabajo, conyugenombre, conyugenacionalidad, conyugelugardenacimiento,
			conyugefechadenacimiento, 103
			conyugerfc, conyugeocupacion, curp, conyugecurp, email
			from cliente where codigo = %s
			""" % self.codigocliente
		cu = r_cngcmex.cursor()
		cu.execute(self.PreparaQuery(query))
		row = fetchone(cu)
		cu.close()
		if row is not None:
			self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC2NOMBRE).SetValue(self.GetString(row[0]))
			self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC2ID).SetValue(str(int(self.codigocliente)))
			self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC2FECHANACIMIENTO).SetValue(self.GetString(row[4]))
			self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC2NACIONALIDAD).SetValue(self.GetString(row[2]))
			self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC2LUGARNACIMIENTO).SetValue(self.GetString(row[3]))
			self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC2TELEFONOCASA).SetValue(self.GetString(row[14]))
			self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC2TELEFONOOFICINA).SetValue(self.GetString(row[15]))
			self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC2RFC).SetValue(self.GetString(row[1]))
			self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC2CURP).SetValue(self.GetString(row[22]))
			try:
				self.GetControl(ID_CHOICECLIENTEPINARESFUNC2ESTADOCIVIL).SetSelection(int(row[5]))
			except:
				self.GetControl(ID_CHOICECLIENTEPINARESFUNC2ESTADOCIVIL).SetSelection(0)

			try:
				self.GetControl(ID_CHOICECLIENTEPINARESFUNC2SITUACION).SetSelection(int(row[6]))
			except:
				self.GetControl(ID_CHOICECLIENTEPINARESFUNC2SITUACION).SetSelection(0)

			try:
				self.GetControl(ID_CHOICECLIENTEPINARESFUNC2REGIMEN).SetSelection(int(row[7]))
			except:
				self.GetControl(ID_CHOICECLIENTEPINARESFUNC2REGIMEN).SetSelection(0)

			try:
				self.GetControl(ID_CHOICECLIENTEPINARESFUNC2OCUPACION).SetSelection(int(row[8]))
			except:
				self.GetControl(ID_CHOICECLIENTEPINARESFUNC2OCUPACION).SetSelection(0)
			
			self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC3DOMICILIO).SetValue(self.GetString(row[9]))
			self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC3COLONIA).SetValue(self.GetString(row[10]))
			self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC3CIUDAD).SetValue(self.GetString(row[12]))
			self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC3ESTADO).SetValue(self.GetString(row[13]))
			self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC3CP).SetValue(self.GetString(row[11]))
			self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC3EMAIL).SetValue(self.GetString(row[24]))
			
			self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC4NOMBRE).SetValue(self.GetString(row[16]))
			self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC4FECHANACIMIENTO).SetValue(self.GetString(row[19]))
			self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC4NACIONALIDAD).SetValue(self.GetString(row[17]))
			self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC4LUGARNACIMIENTO).SetValue(self.GetString(row[18]))
			self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC4RFC).SetValue(self.GetString(row[20]))
			self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC4CURP).SetValue(self.GetString(row[23]))
			try:
				self.GetControl(ID_CHOICECLIENTEPINARESFUNC4OCUPACION).SetSelection(int(row[21]))
			except:
				self.GetControl(ID_CHOICECLIENTEPINARESFUNC4OCUPACION).SetSelection(0)
			
		else:
			Mensajes().Error(self, u"� Problemas al accesar cliente %s !" % self.codigocliente, u"Error")
		
	def PreparaAgregar(self):
		self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC2NOMBRE).SetValue("")
		self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC2ID).SetValue("")
		self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC2FECHANACIMIENTO).SetValue("")
		self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC2NACIONALIDAD).SetValue("")
		self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC2LUGARNACIMIENTO).SetValue("")
		self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC2TELEFONOCASA).SetValue("")
		self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC2TELEFONOOFICINA).SetValue("")
		self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC2RFC).SetValue("")
		self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC2CURP).SetValue("")
		self.GetControl(ID_CHOICECLIENTEPINARESFUNC2ESTADOCIVIL).SetSelection(0)
		self.GetControl(ID_CHOICECLIENTEPINARESFUNC2SITUACION).SetSelection(0)
		self.GetControl(ID_CHOICECLIENTEPINARESFUNC2REGIMEN).SetSelection(0)
		self.GetControl(ID_CHOICECLIENTEPINARESFUNC2OCUPACION).SetSelection(1)
		
		self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC3DOMICILIO).SetValue("")
		self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC3COLONIA).SetValue("")
		self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC3CIUDAD).SetValue("")
		self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC3ESTADO).SetValue("")
		self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC3CP).SetValue("")
		self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC3EMAIL).SetValue("")
		
		self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC4NOMBRE).SetValue("")
		self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC4FECHANACIMIENTO).SetValue("")
		self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC4NACIONALIDAD).SetValue("")
		self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC4LUGARNACIMIENTO).SetValue("")
		self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC4RFC).SetValue("")
		self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC4CURP).SetValue("")
		self.GetControl(ID_CHOICECLIENTEPINARESFUNC4OCUPACION).SetSelection(1)
			
	def ValidacionOk(self):
		todook = True
		campos = {"NOMBRE":u"el nombre del cliente", "FECHANACIMIENTO":u"la fecha de nacimiento"}
		
		for campo in campos.keys():
			if not self.GetControl(eval("ID_TEXTCTRLCLIENTEPINARESFUNC2%s" % campo)).GetValue():
				Mensajes().Info(self, u"� Introduzca %s !" % campos[campo], u"Atenci�n")
				self.GetControl(eval("ID_TEXTCTRLCLIENTEPINARESFUNC2%s" % campo)).SetFocus()
				todook = False
				break
			
		return todook

	def GrabaCliente(self):
		nombre = self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC2NOMBRE).GetValue()
		d, m, a = self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC2FECHANACIMIENTO).GetValue().split("/")
		fechanacimiento = "%04d/%02d/%02d" % (int(a), int(m), int(d))
		nacionalidad = self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC2NACIONALIDAD).GetValue()
		lugarnacimiento = self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC2LUGARNACIMIENTO).GetValue()
		telefonocasa = self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC2TELEFONOCASA).GetValue()
		telefonooficina = self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC2TELEFONOOFICINA).GetValue()
		rfc = self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC2RFC).GetValue()
		curp = self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC2CURP).GetValue()
		
		estadocivil = str(self.GetControl(ID_CHOICECLIENTEPINARESFUNC2ESTADOCIVIL).GetSelection())
		situacion = str(self.GetControl(ID_CHOICECLIENTEPINARESFUNC2SITUACION).GetSelection())
		regimen = str(self.GetControl(ID_CHOICECLIENTEPINARESFUNC2REGIMEN).GetSelection())
		ocupacion = str(self.GetControl(ID_CHOICECLIENTEPINARESFUNC2OCUPACION).GetSelection())
		
		domicilio = self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC3DOMICILIO).GetValue()
		colonia = self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC3COLONIA).GetValue()
		ciudad = self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC3CIUDAD).GetValue()
		estado = self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC3ESTADO).GetValue()
		cp = self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC3CP).GetValue()
		email = self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC3EMAIL).GetValue()
		
		nombreconyuge = self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC4NOMBRE).GetValue()
		fecha = self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC4FECHANACIMIENTO).GetValue()
		fechanacimientoconyugeu = "conyugefechadenacimiento = null"
		fechanacimientoconyugei = "null"
		if fecha:
			d, m, a = fecha.split("/")
			fechanacimientoconyugeu = "conyugefechadenacimiento = '%04d/%02d/%02d'" % (int(a), int(m), int(d))
			fechanacimientoconyugei = "'%04d/%02d/%02d'" % (int(a), int(m), int(d))
			
		nacionalidadconyuge = self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC4NACIONALIDAD).GetValue()
		lugarnacimientoconyuge = self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC4LUGARNACIMIENTO).GetValue()
		rfcconyuge = self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC4RFC).GetValue()
		curpconyuge = self.GetControl(ID_TEXTCTRLCLIENTEPINARESFUNC4CURP).GetValue()
		
		ocupacionconyuge = str(self.GetControl(ID_CHOICECLIENTEPINARESFUNC4OCUPACION).GetSelection())
		
		if self.codigocliente:
			sql = """
		        update cliente
		        set nombre = '%s', rfc = '%s', nacionalidad = '%s', lugardenacimiento = '%s',
		        fechadenacimiento = '%s', estadocivil = '%s', situacion = '%s', regimen = '%s', ocupacion = '%s',
			domicilio = '%s', colonia = '%s', cp = '%s', ciudad = '%s', estado = '%s', telefonocasa = '%s',
			telefonotrabajo = '%s', conyugenombre = '%s', conyugenacionalidad = '%s', conyugelugardenacimiento = '%s',
			%s, conyugerfc = '%s', conyugeocupacion = '%s', curp = '%s',
			conyugecurp = '%s', email = '%s'
		        where codigo = %s
		        """ % (nombre, rfc, nacionalidad, lugarnacimiento, fechanacimiento, estadocivil, situacion, regimen,
			       ocupacion, domicilio, colonia, cp, ciudad, estado, telefonocasa, telefonooficina, nombreconyuge,
			       nacionalidadconyuge, lugarnacimientoconyuge, fechanacimientoconyugeu, rfcconyuge, ocupacionconyuge,
			       curp, curpconyuge, email, self.codigocliente)
			todook, trash = self.QueryUpdateRecord(self.PreparaQuery(sql), conexion = r_cngcmex)
		else:
			cu = r_cngcmex.cursor()
			query = ""
			if os.environ["POSTGRES"]:
				query = "select codigo from cliente order by codigo desc limit 1"
			else:
				query = "select top 1 codigo from cliente order by codigo desc"
			cu.execute(query)
			row = fetchone(cu)
			cu.close()
			self.codigocliente = int(row[0]) + 1
			sql = """
		        insert into cliente
		        (codigo, nombre, rfc, nacionalidad, lugardenacimiento, fechadenacimiento, estadocivil, situacion, regimen,
			ocupacion, domicilio, colonia, cp, ciudad, estado, telefonocasa, telefonotrabajo, conyugenombre,
			conyugenacionalidad, conyugelugardenacimiento, conyugefechadenacimiento, conyugerfc, conyugeocupacion, curp,
			conyugecurp, email)
			values
			(%s, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s',
			'%s', %s, '%s', '%s', '%s', '%s', '%s')
		        """ % (self.codigocliente, nombre, rfc, nacionalidad, lugarnacimiento, fechanacimiento, estadocivil, situacion,
			       regimen, ocupacion, domicilio, colonia, cp, ciudad, estado, telefonocasa, telefonooficina, nombreconyuge,
			       nacionalidadconyuge, lugarnacimientoconyuge, fechanacimientoconyugei, rfcconyuge, ocupacionconyuge,
			       curp, curpconyuge, email)
			todook, trash = self.QueryUpdateRecord(self.PreparaQuery(sql), conexion = r_cngcmex)
			
		if not todook:
			Mensajes().Info(self, u"� No se actualiz� el cliente !", u"Atenci�n")
			
		return todook
			
	def OnAceptar(self, evt):
		if self.ValidacionOk():
			if self.GrabaCliente():
				self.EndModal(1)
				self.Destroy()

class GixClientesVentasPinaresFunc1(wx.Frame, GixBase):
	print("aqui")
	logging.info("probando a ver si funciona")
	def __init__(self, parent, id = -1, title = u"Clientes", pos = wx.DefaultPosition, size = wx.DefaultSize,
	             style = wx.DEFAULT_FRAME_STYLE):
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		self.codigocliente, self.nombrecliente, self.idclientefiltro, self.clientefiltro = 0, "", "", ""
		panel = wx.Panel(self, -1)
		ClientesVentasPinaresFunc1(panel)
		if wx.Platform == '__WXMSW__':
			self.SetSize(wx.Size(610, 660))

		self.GetControl(ID_SEARCHCTRLCLIENTEPINARESFUNC1BUSCARIDCLIENTE).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchIdCliente, id = ID_SEARCHCTRLCLIENTEPINARESFUNC1BUSCARIDCLIENTE)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanIdCliente, id = ID_SEARCHCTRLCLIENTEPINARESFUNC1BUSCARIDCLIENTE)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchIdCliente, id = ID_SEARCHCTRLCLIENTEPINARESFUNC1BUSCARIDCLIENTE)
		self.GetControl(ID_SEARCHCTRLCLIENTEPINARESFUNC1BUSCARCLIENTE).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchCliente, id = ID_SEARCHCTRLCLIENTEPINARESFUNC1BUSCARCLIENTE)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanCliente, id = ID_SEARCHCTRLCLIENTEPINARESFUNC1BUSCARCLIENTE)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchCliente, id = ID_SEARCHCTRLCLIENTEPINARESFUNC1BUSCARCLIENTE)
		self.Bind(wx.EVT_CHOICE, self.OnChoiceClientes, id = ID_CHOICECLIENTEPINARESFUNC1FILTROCUENTA)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelected, id = ID_LISTCTRLCLIENTEPINARESFUNC1)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselected, id = ID_LISTCTRLCLIENTEPINARESFUNC1)
		self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnActivated, id = ID_LISTCTRLCLIENTEPINARESFUNC1)
		self.Bind(wx.EVT_BUTTON, self.OnRefrescar, id = ID_BUTTONCLIENTEPINARESFUNC1REFRESCAR)
		self.Bind(wx.EVT_BUTTON, self.OnAgregar, id = ID_BUTTONCLIENTEPINARESFUNC1AGREGAR)
		self.Bind(wx.EVT_BUTTON, self.OnActivated, id = ID_BUTTONCLIENTEPINARESFUNC1EDITAR)
		self.Bind(wx.EVT_BUTTON, self.OnClose, id = ID_BUTTONCLIENTEPINARESFUNC1CERRAR)
		wx.EVT_CLOSE(self, self.OnClose)
		self.GetControl(ID_CHOICECLIENTEPINARESFUNC1FILTROCUENTA).SetSelection(0)
		self.FillListCtrl()
		self.SetFocus()
		self.GetControl(ID_SEARCHCTRLCLIENTEPINARESFUNC1BUSCARIDCLIENTE).SetFocus()
		
	def OnClose(self, evt):
		self.Destroy()
		
	def GetEncode(self, valor):
		dato = ""
		try:
			dato = valor.encode("iso8859-1")
		except:
			dato = valor
			
		return dato.strip()
	
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
				
		return dato.strip()

	def OnDoSearchIdCliente(self, evt):
		print("entro aqui 10")
		self.idclientefiltro = self.GetControl(ID_SEARCHCTRLCLIENTEPINARESFUNC1BUSCARIDCLIENTE).GetValue()
		self.FillListCtrl()

	def OnCleanIdCliente(self, evt):
		print("entro aqui 11")
		self.GetControl(ID_SEARCHCTRLCLIENTEPINARESFUNC1BUSCARIDCLIENTE).SetValue("")
		self.idclientefiltro = ""
		self.FillListCtrl()
		
	def OnDoSearchCliente(self, evt):
		cliente = self.GetControl(ID_SEARCHCTRLCLIENTEPINARESFUNC1BUSCARCLIENTE).GetValue()
		self.clientefiltro = self.GetEncode(cliente)
		self.FillListCtrl()

	def OnCleanCliente(self, evt):
		self.GetControl(ID_SEARCHCTRLCLIENTEPINARESFUNC1BUSCARCLIENTE).SetValue("")
		self.clientefiltro = ""
		self.FillListCtrl()
		
	def OnChoiceClientes(self, evt):
		print("entro aqui 7")
		self.FillListCtrl()

	def OnSelected(self, evt):
		print("entro aqui 6")
		currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLCLIENTEPINARESFUNC1).GetItem(currentitem, 0).GetText()
		self.codigocliente = int(datointerno)
		self.nombrecliente = self.GetControl(ID_LISTCTRLCLIENTEPINARESFUNC1).GetItem(currentitem, 1).GetText()
		self.GetControl(ID_BUTTONCLIENTEPINARESFUNC1EDITAR).Enable(True)
		evt.Skip()
		
	def OnDeselected(self, evt):
		print("entro aqui 5")
		self.codigocliente, self.nombrecliente = 0, ""
		self.GetControl(ID_BUTTONCLIENTEPINARESFUNC1EDITAR).Enable(False)
		evt.Skip()
	
	def OnActivated(self, evt):
		print("entro aqui 4")
		dlg = GixClientesVentasPinaresFunc2(self, codigocliente = self.codigocliente, filllistctrl = self.FillListCtrl)
		dlg.CenterOnParent()
		dlg.ShowModal()
		
	def OnAgregar(self, evt):
		print("entro aqui 3")
		dlg = GixClientesVentasPinaresFunc2(self, title = u"Arcadia (Pinares Tapalpa) - Agregando Cliente", filllistctrl = self.FillListCtrl)
		dlg.CenterOnParent()
		dlg.ShowModal()
		
	def OnRefrescar(self, evt):
		print("entro aqui 2")
		self.FillListCtrl()
		
	def FillListCtrl(self):
		print("entro aqui jajajaja")
		logging.info("probando a ver si funciona")
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLCLIENTEPINARESFUNC1)
		if lctrl.GetItemCount() > 0 or lctrl.GetColumnCount() > 0:
			lctrl.ClearAll()

		listctrlfiltro = ""
		if self.idclientefiltro:
			listctrlfiltro = "where codigo = %s" % self.idclientefiltro
			
		if self.clientefiltro:
			if listctrlfiltro:
				listctrlfiltro = "%s and nombre like '%s%s%s'" % (listctrlfiltro, "%%", self.clientefiltro, "%%")
			else:
				listctrlfiltro = "where nombre like '%s%s%s'" % ("%%", self.clientefiltro, "%%")
				
		filtroclientes = self.GetControl(ID_CHOICECLIENTEPINARESFUNC1FILTROCUENTA).GetSelection()
		if filtroclientes == 1:
			if listctrlfiltro:
				listctrlfiltro = "%s %s" % (listctrlfiltro, "and codigo not in (select distinct fk_cliente from cuenta)")
			else:
				listctrlfiltro = "where codigo not in (select distinct fk_cliente from cuenta)"
		elif filtroclientes == 2:
			if listctrlfiltro:
				listctrlfiltro = "%s %s" % (listctrlfiltro, "and codigo in (select distinct fk_cliente from cuenta)")
			else:
				listctrlfiltro = "where codigo in (select distinct fk_cliente from cuenta)"
				
		cu = r_cngcmex.cursor()
		cu.execute("select codigo, nombre from CLIENTE %s order by nombre" % listctrlfiltro)
		rows = fetchall(cu)
		cu.close()
		if rows:
			lctrl.InsertColumn(0, u"C�digo", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(1, u"Nombre")
			for fila, row in enumerate(rows):
				if fila %2 != 0: bgcolor = [230,230,255]
				else:            bgcolor = [204,204,255]

				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, self.GetString(row[1]))
				lctrl.SetItemData(index, row[0])
				
			lctrl.SetColumnWidth(0, 70)
			lctrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Clientes", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 200)
			
		self.GetControl(ID_BUTTONCLIENTEPINARESFUNC1EDITAR).Enable(False)
		wx.EndBusyCursor()

class GixVendedoresVentasPinaresFunc2(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Arcadia (Pinares Tapalpa) - Editando Vendedor", pos = wx.DefaultPosition,
	             size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE, codigovendedor = 0, filllistctrl = None):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.codigovendedor = codigovendedor
		self.FillListCtrl = filllistctrl
		if wx.Platform == '__WXMSW__':
			VendedoresVentasPinaresFunc2(self, True)
		else:
			VendedoresVentasPinaresFunc2(self, True)

		self.Bind(wx.EVT_BUTTON, self.OnAceptar, id = ID_BUTTONVENDEDORPINARESFUNC2ACEPTAR)
		self.Bind(wx.EVT_BUTTON, self.OnClose, id = ID_BUTTONVENDEDORPINARESFUNC2CANCELAR)
		wx.EVT_CLOSE(self, self.OnClose)
		
		if self.codigovendedor:
			self.PreparaEdicion()
		else:
			self.PreparaAgregar()
					
		self.GetControl(ID_TEXTCTRLVENDEDORPINARESFUNC2NOMBRE).SetFocus()
		
	def OnClose(self, evt):
		self.EndModal(1)
		self.Destroy()
		
	def GetString(self, valor):
		dato = ""
		if valor != None:
			try:
				dato = valor.decode("iso8859-1")
			except:
				try:
					dato = str(valor)
				except:
					dato = valor
				
		return dato.strip()
	
	def GetDate(self):
		cu = r_cngcmex.cursor()
		cu.execute("select convert(varchar(10), getdate(), 103)")
		row = fetchone(cu)
		cu.close()
		return str(row[0])

	def SetBit(self, valor):
		sw = False
		try:
			if int(valor) == 1:
				sw = True
		except:
			sw = False
		
		return sw

	def GetBit(self, valor):
		sw = 0
		try:
			if valor == True:
				sw = 1
		except:
			sw = 0
		
		return sw

	def PreparaQuery(self, sql):
		return (sql.replace('\t', ' ')).replace('\n', ' ')
	
	def PreparaEdicion(self):
		query = """
		select nombre, domicilio, colonia, ciudad, estado, cp, telefono, rfc, email, activo
		from vendedor where codigo = %s
		""" % self.codigovendedor
		cu = r_cngcmex.cursor()
		cu.execute(self.PreparaQuery(query))
		row = fetchone(cu)
		cu.close()
		if row is not None:
			self.GetControl(ID_TEXTCTRLVENDEDORPINARESFUNC2ID).SetValue(str(int(self.codigovendedor)))
			self.GetControl(ID_TEXTCTRLVENDEDORPINARESFUNC2NOMBRE).SetValue(self.GetString(row[0]))
			self.GetControl(ID_TEXTCTRLVENDEDORPINARESFUNC2DOMICILIO).SetValue(self.GetString(row[1]))
			self.GetControl(ID_TEXTCTRLVENDEDORPINARESFUNC2COLONIA).SetValue(self.GetString(row[2]))
			self.GetControl(ID_TEXTCTRLVENDEDORPINARESFUNC2CIUDAD).SetValue(self.GetString(row[3]))
			self.GetControl(ID_TEXTCTRLVENDEDORPINARESFUNC2ESTADO).SetValue(self.GetString(row[4]))
			self.GetControl(ID_TEXTCTRLVENDEDORPINARESFUNC2CP).SetValue(self.GetString(row[5]))
			self.GetControl(ID_TEXTCTRLVENDEDORPINARESFUNC2TELEFONO).SetValue(self.GetString(row[6]))
			self.GetControl(ID_TEXTCTRLVENDEDORPINARESFUNC2RFC).SetValue(self.GetString(row[7]))
			self.GetControl(ID_TEXTCTRLVENDEDORPINARESFUNC2EMAIL).SetValue(self.GetString(row[8]))
			estatus = "Inactivo"
			if row[9]:
				estatus = "Activo"
				
			self.GetControl(ID_RADIOBOXVENDEDORPINARESFUNC2ESTATUS).SetStringSelection(estatus)

		else:
			Mensajes().Error(self, u"� Problemas al accesar vendedor %s !" % self.codigovendedor, u"Error")
		
	def PreparaAgregar(self):
		self.GetControl(ID_TEXTCTRLVENDEDORPINARESFUNC2ID).SetValue("")
		self.GetControl(ID_TEXTCTRLVENDEDORPINARESFUNC2NOMBRE).SetValue("")
		self.GetControl(ID_TEXTCTRLVENDEDORPINARESFUNC2DOMICILIO).SetValue("")
		self.GetControl(ID_TEXTCTRLVENDEDORPINARESFUNC2COLONIA).SetValue("")
		self.GetControl(ID_TEXTCTRLVENDEDORPINARESFUNC2CIUDAD).SetValue("")
		self.GetControl(ID_TEXTCTRLVENDEDORPINARESFUNC2ESTADO).SetValue("")
		self.GetControl(ID_TEXTCTRLVENDEDORPINARESFUNC2CP).SetValue("")
		self.GetControl(ID_TEXTCTRLVENDEDORPINARESFUNC2TELEFONO).SetValue("")
		self.GetControl(ID_TEXTCTRLVENDEDORPINARESFUNC2RFC).SetValue("")
		self.GetControl(ID_TEXTCTRLVENDEDORPINARESFUNC2EMAIL).SetValue("")
		self.GetControl(ID_RADIOBOXVENDEDORPINARESFUNC2ESTATUS).SetStringSelection("Activo")
			
	def ValidacionOk(self):
		todook = True
		campos = {"NOMBRE":u"el nombre del vendedor", "TELEFONO":u"el tel�fono del vendedor"}
		
		for campo in campos.keys():
			if not self.GetControl(eval("ID_TEXTCTRLVENDEDORPINARESFUNC2%s" % campo)).GetValue():
				Mensajes().Info(self, u"� Introduzca %s !" % campos[campo], u"Atenci�n")
				self.GetControl(eval("ID_TEXTCTRLVENDEDORPINARESFUNC2%s" % campo)).SetFocus()
				todook = False
				break
			
		return todook

	def GrabaVendedor(self):
		nombre = self.GetControl(ID_TEXTCTRLVENDEDORPINARESFUNC2NOMBRE).GetValue()
		domicilio = self.GetControl(ID_TEXTCTRLVENDEDORPINARESFUNC2DOMICILIO).GetValue()
		colonia = self.GetControl(ID_TEXTCTRLVENDEDORPINARESFUNC2COLONIA).GetValue()
		ciudad = self.GetControl(ID_TEXTCTRLVENDEDORPINARESFUNC2CIUDAD).GetValue()
		estado = self.GetControl(ID_TEXTCTRLVENDEDORPINARESFUNC2ESTADO).GetValue()
		cp = self.GetControl(ID_TEXTCTRLVENDEDORPINARESFUNC2CP).GetValue()
		telefono = self.GetControl(ID_TEXTCTRLVENDEDORPINARESFUNC2TELEFONO).GetValue()
		rfc = self.GetControl(ID_TEXTCTRLVENDEDORPINARESFUNC2RFC).GetValue()
		email = self.GetControl(ID_TEXTCTRLVENDEDORPINARESFUNC2EMAIL).GetValue()
		
		activo = 1
		if self.GetControl(ID_RADIOBOXVENDEDORPINARESFUNC2ESTATUS).GetStringSelection() == "Inactivo":
			activo = 0
		
		if self.codigovendedor:
			sql = """
		        update vendedor
		        set nombre = '%s', domicilio = '%s', colonia = '%s', cp = '%s', ciudad = '%s', estado = '%s', telefono = '%s',
			rfc = '%s', email = '%s', activo = %s
		        where codigo = %s
		        """ % (nombre, domicilio, colonia, cp, ciudad, estado, telefono, rfc, email, activo, self.codigovendedor)
			todook, trash = self.QueryUpdateRecord(self.PreparaQuery(sql), conexion = r_cngcmex)
		else:
			cu = r_cngcmex.cursor()
			cu.execute("select top 1 codigo from vendedor order by codigo desc")
			row = fetchone(cu)
			cu.close()
			self.codigovendedor = int(row[0]) + 1
			sql = """
		        insert into vendedor
		        (codigo, nombre, domicilio, colonia, cp, ciudad, estado, telefono, rfc, email, activo)
			values
			(%s, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', %s)
		        """ % (self.codigovendedor, nombre, domicilio, colonia, cp, ciudad, estado, telefono, rfc, email, activo)
			todook, trash = self.QueryUpdateRecord(self.PreparaQuery(sql), conexion = r_cngcmex)
			
		if not todook:
			Mensajes().Info(self, u"� No se actualiz� el vendedor !", u"Atenci�n")
			
		return todook
			
	def OnAceptar(self, evt):
		if self.ValidacionOk():
			if self.GrabaVendedor():
				self.FillListCtrl()
				self.EndModal(1)
				self.Destroy()

class GixVendedoresVentasPinaresFunc1(wx.Frame, GixBase):
	def __init__(self, parent, id = -1, title = u"Vendedores", pos = wx.DefaultPosition, size = wx.DefaultSize,
	             style = wx.DEFAULT_FRAME_STYLE):
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		self.codigovendedor, self.nombrevendedor, self.idvendedorfiltro, self.vendedorfiltro = 0, "", "", ""
		panel = wx.Panel(self, -1)
		VendedoresVentasPinaresFunc1(panel)
		if wx.Platform == '__WXMSW__':
			self.SetSize(wx.Size(610, 660))

		self.GetControl(ID_SEARCHCTRLVENDEDORPINARESFUNC1BUSCARIDVENDEDOR).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchIdVendedor, id = ID_SEARCHCTRLVENDEDORPINARESFUNC1BUSCARIDVENDEDOR)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanIdVendedor, id = ID_SEARCHCTRLVENDEDORPINARESFUNC1BUSCARIDVENDEDOR)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchIdVendedor, id = ID_SEARCHCTRLVENDEDORPINARESFUNC1BUSCARIDVENDEDOR)
		self.GetControl(ID_SEARCHCTRLVENDEDORPINARESFUNC1BUSCARVENDEDOR).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchVendedor, id = ID_SEARCHCTRLVENDEDORPINARESFUNC1BUSCARVENDEDOR)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanVendedor, id = ID_SEARCHCTRLVENDEDORPINARESFUNC1BUSCARVENDEDOR)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchVendedor, id = ID_SEARCHCTRLVENDEDORPINARESFUNC1BUSCARVENDEDOR)
		self.Bind(wx.EVT_CHOICE, self.OnChoiceVendedor, id = ID_CHOICEVENDEDORPINARESFUNC1FILTRO)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelected, id = ID_LISTCTRLVENDEDORPINARESFUNC1)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselected, id = ID_LISTCTRLVENDEDORPINARESFUNC1)
		self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnActivated, id = ID_LISTCTRLVENDEDORPINARESFUNC1)
		self.Bind(wx.EVT_BUTTON, self.OnRefrescar, id = ID_BUTTONVENDEDORPINARESFUNC1REFRESCAR)
		self.Bind(wx.EVT_BUTTON, self.OnAgregar, id = ID_BUTTONVENDEDORPINARESFUNC1AGREGAR)
		self.Bind(wx.EVT_BUTTON, self.OnActivated, id = ID_BUTTONVENDEDORPINARESFUNC1EDITAR)
		self.Bind(wx.EVT_BUTTON, self.OnClose, id = ID_BUTTONVENDEDORPINARESFUNC1CERRAR)
		wx.EVT_CLOSE(self, self.OnClose)
		self.GetControl(ID_CHOICEVENDEDORPINARESFUNC1FILTRO).SetSelection(1)
		self.FillListCtrl()
		self.SetFocus()
		self.GetControl(ID_SEARCHCTRLVENDEDORPINARESFUNC1BUSCARIDVENDEDOR).SetFocus()
		
	def OnClose(self, evt):
		self.Destroy()
		
	def GetEncode(self, valor):
		dato = ""
		try:
			dato = valor.encode("iso8859-1")
		except:
			dato = valor
			
		return dato.strip()
	
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
				
		return dato.strip()

	def OnDoSearchIdVendedor(self, evt):
		self.idvendedorfiltro = self.GetControl(ID_SEARCHCTRLVENDEDORPINARESFUNC1BUSCARIDVENDEDOR).GetValue()
		self.FillListCtrl()

	def OnCleanIdVendedor(self, evt):
		self.GetControl(ID_SEARCHCTRLVENDEDORPINARESFUNC1BUSCARIDVENDEDOR).SetValue("")
		self.idvendedorfiltro = ""
		self.FillListCtrl()
		
	def OnDoSearchVendedor(self, evt):
		vendedor = self.GetControl(ID_SEARCHCTRLVENDEDORPINARESFUNC1BUSCARVENDEDOR).GetValue()
		self.vendedorfiltro = self.GetEncode(vendedor)
		self.FillListCtrl()

	def OnCleanVendedor(self, evt):
		self.GetControl(ID_SEARCHCTRLVENDEDORPINARESFUNC1BUSCARVENDEDOR).SetValue("")
		self.vendedorfiltro = ""
		self.FillListCtrl()
		
	def OnChoiceVendedor(self, evt):
		self.FillListCtrl()

	def OnSelected(self, evt):
		currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLVENDEDORPINARESFUNC1).GetItem(currentitem, 0).GetText()
		self.codigovendedor = int(datointerno)
		self.nombrevendedor = self.GetControl(ID_LISTCTRLVENDEDORPINARESFUNC1).GetItem(currentitem, 1).GetText()
		self.GetControl(ID_BUTTONVENDEDORPINARESFUNC1EDITAR).Enable(True)
		evt.Skip()
		
	def OnDeselected(self, evt):
		self.codigovendedor, self.nombrevendedor = 0, ""
		self.GetControl(ID_BUTTONVENDEDORPINARESFUNC1EDITAR).Enable(False)
		evt.Skip()
	
	def OnActivated(self, evt):
		dlg = GixVendedoresVentasPinaresFunc2(self, codigovendedor = self.codigovendedor, filllistctrl = self.FillListCtrl)
		dlg.CenterOnParent()
		dlg.ShowModal()
		
	def OnAgregar(self, evt):
		dlg = GixVendedoresVentasPinaresFunc2(self, title = u"Arcadia (Pinares Tapalpa) - Agregando Vendedor",
		                                      filllistctrl = self.FillListCtrl)
		dlg.CenterOnParent()
		dlg.ShowModal()
		
	def OnRefrescar(self, evt):
		self.FillListCtrl()
		
	def FillListCtrl(self):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLVENDEDORPINARESFUNC1)
		if lctrl.GetItemCount() > 0 or lctrl.GetColumnCount() > 0:
			lctrl.ClearAll()

		listctrlfiltro = ""
		if self.idvendedorfiltro:
			listctrlfiltro = "where codigo = %s" % self.idvendedorfiltro
			
		if self.vendedorfiltro:
			if listctrlfiltro:
				listctrlfiltro = "%s and nombre like '%s%s%s'" % (listctrlfiltro, "%%", self.vendedorfiltro, "%%")
			else:
				listctrlfiltro = "where nombre like '%s%s%s'" % ("%%", self.vendedorfiltro, "%%")
				
		filtrovendedor = self.GetControl(ID_CHOICEVENDEDORPINARESFUNC1FILTRO).GetSelection()
		if filtrovendedor == 1:
			if listctrlfiltro:
				listctrlfiltro = "%s %s" % (listctrlfiltro, "and activo = 1")
			else:
				listctrlfiltro = "where activo = 1"
		elif filtrovendedor == 2:
			if listctrlfiltro:
				listctrlfiltro = "%s %s" % (listctrlfiltro, "and activo = 0")
			else:
				listctrlfiltro = "where activo = 0"
				
		cu = r_cngcmex.cursor()
		cu.execute("select codigo, nombre, activo from VENDEDOR %s order by nombre" % listctrlfiltro)
		rows = fetchall(cu)
		cu.close()
		if rows:
			lctrl.InsertColumn(0, u"C�digo", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(1, u"Nombre")
			for fila, row in enumerate(rows):
				if not row[2]:
					bgcolor = [255,153,153]
				else:
					if fila %2 != 0: bgcolor = [230,230,255]
					else:            bgcolor = [204,204,255]

				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, self.GetString(row[1]))
				lctrl.SetItemData(index, row[0])
				
			lctrl.SetColumnWidth(0, 70)
			lctrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Vendedores", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 200)
			
		self.GetControl(ID_BUTTONVENDEDORPINARESFUNC1EDITAR).Enable(False)
		wx.EndBusyCursor()

class GixOfertasDeCompraFunc2(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Elegir Cliente", pos = wx.DefaultPosition, size = wx.DefaultSize,
	             style = wx.DEFAULT_DIALOG_STYLE, clienteelegido = None):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.ClienteElegido = clienteelegido
		self.codigocliente, self.nombrecliente, self.idclientefiltro, self.clientefiltro = 0, "", "", ""
		OfertasCompraFunc2(self, True)
		self.GetControl(ID_SEARCHCTRLOFERTASCOMPRAFUNC2BUSCARIDCLIENTE).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchIdCliente, id = ID_SEARCHCTRLOFERTASCOMPRAFUNC2BUSCARIDCLIENTE)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanIdCliente, id = ID_SEARCHCTRLOFERTASCOMPRAFUNC2BUSCARIDCLIENTE)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchIdCliente, id = ID_SEARCHCTRLOFERTASCOMPRAFUNC2BUSCARIDCLIENTE)
		self.GetControl(ID_SEARCHCTRLOFERTASCOMPRAFUNC2BUSCARCLIENTE).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchCliente, id = ID_SEARCHCTRLOFERTASCOMPRAFUNC2BUSCARCLIENTE)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanCliente, id = ID_SEARCHCTRLOFERTASCOMPRAFUNC2BUSCARCLIENTE)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchCliente, id = ID_SEARCHCTRLOFERTASCOMPRAFUNC2BUSCARCLIENTE)
		self.Bind(wx.EVT_CHOICE, self.OnChoiceClientes, id = ID_CHOICEOFERTASCOMPRAFUNC2FILTROCUENTA)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelected, id = ID_LISTCTRLOFERTASCOMPRAFUNC2)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselected, id = ID_LISTCTRLOFERTASCOMPRAFUNC2)
		self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnActivated, id = ID_LISTCTRLOFERTASCOMPRAFUNC2)
		self.Bind(wx.EVT_BUTTON, self.OnRefrescar, id = ID_BUTTONOFERTASCOMPRAFUNC2REFRESCAR)
		self.Bind(wx.EVT_BUTTON, self.OnClose, id = ID_BUTTONOFERTASCOMPRAFUNC2CANCELAR)
		self.Bind(wx.EVT_BUTTON, self.OnActivated, id = ID_BUTTONOFERTASCOMPRAFUNC2ELEGIR)
		self.Bind(wx.EVT_BUTTON, self.OnAgregar, id = ID_BUTTONOFERTASCOMPRAFUNC2AGREGAR)
		self.Bind(wx.EVT_BUTTON, self.OnEditar, id = ID_BUTTONOFERTASCOMPRAFUNC2EDITAR)
		wx.EVT_CLOSE(self, self.OnClose)
		self.GetControl(ID_CHOICEOFERTASCOMPRAFUNC2FILTROCUENTA).SetSelection(0)
		self.FillListCtrl()
		self.SetFocus()
		self.GetControl(ID_SEARCHCTRLOFERTASCOMPRAFUNC2BUSCARIDCLIENTE).SetFocus()
		
	def OnClose(self, evt):
		self.EndModal(1)
		self.Destroy()
		
	def GetEncode(self, valor):
		dato = ""
		try:
			dato = valor.encode("iso8859-1")
		except:
			dato = valor
			
		return dato.strip()

	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
		return dato.strip()

	def OnDoSearchIdCliente(self, evt):
		self.idclientefiltro =  self.GetControl(ID_SEARCHCTRLOFERTASCOMPRAFUNC2BUSCARIDCLIENTE).GetValue()
		self.FillListCtrl()

	def OnCleanIdCliente(self, evt):
		self.GetControl(ID_SEARCHCTRLOFERTASCOMPRAFUNC2BUSCARIDCLIENTE).SetValue("")
		self.idclientefiltro = ""
		self.FillListCtrl()
		
	def OnDoSearchCliente(self, evt):
		cliente =  self.GetControl(ID_SEARCHCTRLOFERTASCOMPRAFUNC2BUSCARCLIENTE).GetValue()
		self.clientefiltro = self.GetEncode(cliente)
		self.FillListCtrl()

	def OnCleanCliente(self, evt):
		self.GetControl(ID_SEARCHCTRLOFERTASCOMPRAFUNC2BUSCARCLIENTE).SetValue("")
		self.clientefiltro = ""
		self.FillListCtrl()
		
	def OnChoiceClientes(self, evt):
		self.FillListCtrl()

	def OnSelected(self, evt):
		currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLOFERTASCOMPRAFUNC2).GetItem(currentitem, 0).GetText()
		self.codigocliente = int(datointerno)
		self.nombrecliente = self.GetControl(ID_LISTCTRLOFERTASCOMPRAFUNC2).GetItem(currentitem, 1).GetText()
		self.GetControl(ID_BUTTONOFERTASCOMPRAFUNC2ELEGIR).Enable(True)
		self.GetControl(ID_BUTTONOFERTASCOMPRAFUNC2EDITAR).Enable(True)
		evt.Skip()
		
	def OnDeselected(self, evt):
		self.codigocliente, self.nombrecliente = 0, ""
		self.GetControl(ID_BUTTONOFERTASCOMPRAFUNC2ELEGIR).Enable(False)
		self.GetControl(ID_BUTTONOFERTASCOMPRAFUNC2EDITAR).Enable(False)
		evt.Skip()
	
	def OnActivated(self, evt):
		self.ClienteElegido(codigocliente = self.codigocliente, nombrecliente = self.nombrecliente)
		self.EndModal(1)
		self.Destroy()
		
	def OnAgregar(self, evt):
		dlg = GixClientesVentasFunc2(self, title = u"Agregando Cliente", filllistctrl = self.FillListCtrl)
		dlg.CenterOnParent()
		dlg.ShowModal()

	def OnEditar(self, evt):
		dlg = GixClientesVentasFunc2(self, codigocliente = self.codigocliente, filllistctrl = self.FillListCtrl)
		dlg.CenterOnParent()
		dlg.ShowModal()
		
	def OnRefrescar(self, evt):
		self.FillListCtrl()
		
	def FillListCtrl(self):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLOFERTASCOMPRAFUNC2)
		if lctrl.GetItemCount() > 0 or lctrl.GetColumnCount() > 0:
			lctrl.ClearAll()

		listctrlfiltro = ""
		if self.idclientefiltro:
			listctrlfiltro = "where codigo = %s" % self.idclientefiltro
			
		if self.clientefiltro:
			if listctrlfiltro:
				listctrlfiltro = "%s and nombre like '%s%s%s'" % (listctrlfiltro, "%%", self.clientefiltro, "%%")
			else:
				listctrlfiltro = "where nombre like '%s%s%s'" % ("%%", self.clientefiltro, "%%")
				
		filtroclientes = self.GetControl(ID_CHOICEOFERTASCOMPRAFUNC2FILTROCUENTA).GetSelection()
		if filtroclientes == 1:
			if listctrlfiltro:
				listctrlfiltro = "%s %s" % (listctrlfiltro, "and codigo not in (select distinct fk_cliente from cuenta)")
			else:
				listctrlfiltro = "where codigo not in (select distinct fk_cliente from cuenta)"
		elif filtroclientes == 2:
			if listctrlfiltro:
				listctrlfiltro = "%s %s" % (listctrlfiltro, "and codigo in (select distinct fk_cliente from cuenta)")
			else:
				listctrlfiltro = "where codigo in (select distinct fk_cliente from cuenta)"
				
		cu = r_cn.cursor()
		cu.execute(str("select codigo, nombre from CLIENTE %s order by nombre" % listctrlfiltro))
		rows = fetchall(cu)
		cu.close()
		if rows:
			lctrl.InsertColumn(0, u"C�digo", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(1, u"Nombre")
			for fila, row in enumerate(rows):
				if fila %2 != 0: bgcolor = [150,204,150]
				else:            bgcolor = [200,230,200]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, self.GetString(row[1]))
				lctrl.SetItemData(index, row[0])
				
			lctrl.SetColumnWidth(0, 70)
			lctrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Clientes", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 200)
			
		self.GetControl(ID_BUTTONOFERTASCOMPRAFUNC2ELEGIR).Enable(False)
		self.GetControl(ID_BUTTONOFERTASCOMPRAFUNC2EDITAR).Enable(False)
		wx.EndBusyCursor()

class GixOfertasDeCompraFunc3(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Elegir Prospecto", pos = wx.DefaultPosition, size = wx.DefaultSize,
	             style = wx.DEFAULT_DIALOG_STYLE, prospectoelegido = None):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.ProspectoElegido = prospectoelegido
		self.idprospecto  = 0
		self.paternofiltro, self.maternofiltro, self.nombrefiltro, self.imssfiltro, self.prospectofiltro = "", "", "", "", ""
		OfertasCompraFunc3(self, True)
		self.GetControl(ID_SEARCHCTRLOFERTASCOMPRAFUNC3BUSCARPATERNO).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchPaterno, id = ID_SEARCHCTRLOFERTASCOMPRAFUNC3BUSCARPATERNO)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanPaterno, id = ID_SEARCHCTRLOFERTASCOMPRAFUNC3BUSCARPATERNO)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchPaterno, id = ID_SEARCHCTRLOFERTASCOMPRAFUNC3BUSCARPATERNO)
		self.GetControl(ID_SEARCHCTRLOFERTASCOMPRAFUNC3BUSCARMATERNO).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchMaterno, id = ID_SEARCHCTRLOFERTASCOMPRAFUNC3BUSCARMATERNO)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanMaterno, id = ID_SEARCHCTRLOFERTASCOMPRAFUNC3BUSCARMATERNO)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchMaterno, id = ID_SEARCHCTRLOFERTASCOMPRAFUNC3BUSCARMATERNO)
		self.GetControl(ID_SEARCHCTRLOFERTASCOMPRAFUNC3BUSCARNOMBRE).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchNombre, id = ID_SEARCHCTRLOFERTASCOMPRAFUNC3BUSCARNOMBRE)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanNombre, id = ID_SEARCHCTRLOFERTASCOMPRAFUNC3BUSCARNOMBRE)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchNombre, id = ID_SEARCHCTRLOFERTASCOMPRAFUNC3BUSCARNOMBRE)
		self.GetControl(ID_SEARCHCTRLOFERTASCOMPRAFUNC3BUSCARIMSS).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchImss, id = ID_SEARCHCTRLOFERTASCOMPRAFUNC3BUSCARIMSS)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanImss, id = ID_SEARCHCTRLOFERTASCOMPRAFUNC3BUSCARIMSS)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchImss, id = ID_SEARCHCTRLOFERTASCOMPRAFUNC3BUSCARIMSS)
		self.GetControl(ID_SEARCHCTRLOFERTASCOMPRAFUNC3BUSCARPROSPECTO).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchProspecto, id = ID_SEARCHCTRLOFERTASCOMPRAFUNC3BUSCARPROSPECTO)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanProspecto, id = ID_SEARCHCTRLOFERTASCOMPRAFUNC3BUSCARPROSPECTO)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchProspecto, id = ID_SEARCHCTRLOFERTASCOMPRAFUNC3BUSCARPROSPECTO)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelected, id = ID_LISTCTRLOFERTASCOMPRAFUNC3)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselected, id = ID_LISTCTRLOFERTASCOMPRAFUNC3)
		self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnActivated, id = ID_LISTCTRLOFERTASCOMPRAFUNC3)
		self.Bind(wx.EVT_BUTTON, self.OnClose, id = ID_BUTTONOFERTASCOMPRAFUNC3CANCELAR)
		self.Bind(wx.EVT_BUTTON, self.OnActivated, id = ID_BUTTONOFERTASCOMPRAFUNC3ELEGIR)
		wx.EVT_CLOSE(self, self.OnClose)
		self.FillListCtrl()
		self.SetFocus()
		self.GetControl(ID_SEARCHCTRLOFERTASCOMPRAFUNC3BUSCARPROSPECTO).SetFocus()
		
	def OnClose(self, evt):
		self.EndModal(1)
		self.Destroy()
	
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
		return dato.strip()

	def OnDoSearchPaterno(self, evt):
		self.paternofiltro =  self.GetControl(ID_SEARCHCTRLOFERTASCOMPRAFUNC3BUSCARPATERNO).GetValue()
		self.FillListCtrl()

	def OnCleanPaterno(self, evt):
		self.GetControl(ID_SEARCHCTRLOFERTASCOMPRAFUNC3BUSCARPATERNO).SetValue("")
		self.paternofiltro = ""
		self.FillListCtrl()

	def OnDoSearchMaterno(self, evt):
		self.maternofiltro =  self.GetControl(ID_SEARCHCTRLOFERTASCOMPRAFUNC3BUSCARMATERNO).GetValue()
		self.FillListCtrl()

	def OnCleanMaterno(self, evt):
		self.GetControl(ID_SEARCHCTRLOFERTASCOMPRAFUNC3BUSCARMATERNO).SetValue("")
		self.maternofiltro = ""
		self.FillListCtrl()
		
	def OnDoSearchNombre(self, evt):
		self.nombrefiltro =  self.GetControl(ID_SEARCHCTRLOFERTASCOMPRAFUNC3BUSCARNOMBRE).GetValue()
		self.FillListCtrl()

	def OnCleanNombre(self, evt):
		self.GetControl(ID_SEARCHCTRLOFERTASCOMPRAFUNC3BUSCARNOMBRE).SetValue("")
		self.nombrefiltro = ""
		self.FillListCtrl()

	def OnDoSearchImss(self, evt):
		self.imssfiltro =  self.GetControl(ID_SEARCHCTRLOFERTASCOMPRAFUNC3BUSCARIMSS).GetValue()
		self.FillListCtrl()

	def OnCleanImss(self, evt):
		self.GetControl(ID_SEARCHCTRLOFERTASCOMPRAFUNC3BUSCARIMSS).SetValue("")
		self.imssfiltro = ""
		self.FillListCtrl()
		
	def OnDoSearchProspecto(self, evt):
		self.prospectofiltro =  self.GetControl(ID_SEARCHCTRLOFERTASCOMPRAFUNC3BUSCARPROSPECTO).GetValue()
		self.FillListCtrl()

	def OnCleanProspecto(self, evt):
		self.GetControl(ID_SEARCHCTRLOFERTASCOMPRAFUNC3BUSCARPROSPECTO).SetValue("")
		self.prospectofiltro = ""
		self.FillListCtrl()
		
	def OnSelected(self, evt):
		currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLOFERTASCOMPRAFUNC3).GetItem(currentitem, 0).GetText()
		self.codigoprospecto = int(datointerno)
		self.GetControl(ID_BUTTONOFERTASCOMPRAFUNC3ELEGIR).Enable(True)
		evt.Skip()
		
	def OnDeselected(self, evt):
		self.codigoprospecto = 0
		self.GetControl(ID_BUTTONOFERTASCOMPRAFUNC3ELEGIR).Enable(False)
		evt.Skip()
	
	def OnActivated(self, evt):
		self.ProspectoElegido(codigoprospecto = self.codigoprospecto)
		self.EndModal(1)
		self.Destroy()
		
	def FillListCtrl(self):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLOFERTASCOMPRAFUNC3)
		lctrl.Enable(False); lctrl.Show(False); lctrl.ClearAll()
		listctrlfiltro = ""
		if self.paternofiltro:
			listctrlfiltro = "and apellidopaterno1 like '%s%s%s'" % ("%%", str(self.paternofiltro), "%%")
			
		if self.maternofiltro:
			listctrlfiltro += " and apellidomaterno1 like '%s%s%s'" % ("%%", str(self.maternofiltro), "%%")
				
		if self.nombrefiltro:
			listctrlfiltro += " and nombre1 like '%s%s%s'" % ("%%", str(self.nombrefiltro), "%%")
			
		if self.imssfiltro:
			listctrlfiltro += " and afiliacionimss = '%s'" % str(self.imssfiltro)
			
		if self.prospectofiltro:
			listctrlfiltro += " and idprospecto = %s" % str(self.prospectofiltro)
			
		cu = r_cn.cursor()
		query = """
		select idprospecto, rtrim(ltrim(apellidopaterno1)), rtrim(ltrim(apellidomaterno1)), rtrim(ltrim(nombre1)), afiliacionimss
		from gixprospectos where congelado <> 1 %s
		order by rtrim(ltrim(apellidopaterno1)), rtrim(ltrim(apellidomaterno1)), rtrim(ltrim(nombre1))
		""" % listctrlfiltro
		sql = (query.replace('\t', ' ')).replace('\n', ' ')
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			lctrl.InsertColumn(0, u"C�digo", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(1, u"Paterno")
			lctrl.InsertColumn(2, u"Materno")
			lctrl.InsertColumn(3, u"Nombre")
			lctrl.InsertColumn(4, u"IMSS", wx.LIST_FORMAT_CENTER)
			for fila, row in enumerate(rows):
				if fila %2 != 0: bgcolor = [150,204,150]
				else:            bgcolor = [200,230,200]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, self.GetString(row[1]))
				lctrl.SetStringItem(index, 2, self.GetString(row[2]))
				lctrl.SetStringItem(index, 3, self.GetString(row[3]))
				lctrl.SetStringItem(index, 4, str(row[4]))
				lctrl.SetItemData(index, row[0])
			lctrl.SetColumnWidth(0, 70)
			lctrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(2, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(3, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(4, wx.LIST_AUTOSIZE)
			lctrl.SetItemState(0, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
			lctrl.EnsureVisible(0)
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Prospectos", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 200)
			self.GetControl(ID_BUTTONOFERTASCOMPRAFUNC3ELEGIR).Enable(False)
			
		lctrl.Enable(True)
		lctrl.Show(True)
		lctrl.SetFocus()
		wx.EndBusyCursor()

class GixOfertasDeCompraFunc4(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Elegir Subvendedor", pos = wx.DefaultPosition, size = wx.DefaultSize,
	             style = wx.DEFAULT_DIALOG_STYLE, subvendedorelegido = None):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.SubvendedorElegido = subvendedorelegido
		self.codigovendedor  = 0; self.nombrefiltro = ""
		OfertasCompraFunc4(self, True)
		self.GetControl(ID_SEARCHCTRLOFERTASCOMPRAFUNC4BUSCARNOMBRE).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchNombre, id = ID_SEARCHCTRLOFERTASCOMPRAFUNC4BUSCARNOMBRE)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanNombre, id = ID_SEARCHCTRLOFERTASCOMPRAFUNC4BUSCARNOMBRE)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchNombre, id = ID_SEARCHCTRLOFERTASCOMPRAFUNC4BUSCARNOMBRE)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelected, id = ID_LISTCTRLOFERTASCOMPRAFUNC4)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselected, id = ID_LISTCTRLOFERTASCOMPRAFUNC4)
		self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnActivated, id = ID_LISTCTRLOFERTASCOMPRAFUNC4)
		self.Bind(wx.EVT_BUTTON, self.OnClose, id = ID_BUTTONOFERTASCOMPRAFUNC4CANCELAR)
		self.Bind(wx.EVT_BUTTON, self.OnActivated, id = ID_BUTTONOFERTASCOMPRAFUNC4ELEGIR)
		wx.EVT_CLOSE(self, self.OnClose)
		self.FillListCtrl()
		self.SetFocus()
		
	def OnClose(self, evt):
		self.EndModal(1)
		self.Destroy()
	
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
		return dato.strip()

	def OnDoSearchNombre(self, evt):
		self.nombrefiltro =  self.GetControl(ID_SEARCHCTRLOFERTASCOMPRAFUNC4BUSCARNOMBRE).GetValue()
		self.FillListCtrl()

	def OnCleanNombre(self, evt):
		self.GetControl(ID_SEARCHCTRLOFERTASCOMPRAFUNC4BUSCARNOMBRE).SetValue("")
		self.nombrefiltro = ""
		self.FillListCtrl()

	def OnSelected(self, evt):
		currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLOFERTASCOMPRAFUNC4).GetItem(currentitem, 0).GetText()
		self.codigosubvendedor = int(datointerno)
		self.GetControl(ID_BUTTONOFERTASCOMPRAFUNC4ELEGIR).Enable(True)
		evt.Skip()
		
	def OnDeselected(self, evt):
		self.codigosubvendedor = 0
		self.GetControl(ID_BUTTONOFERTASCOMPRAFUNC4ELEGIR).Enable(False)
		evt.Skip()
	
	def OnActivated(self, evt):
		self.SubvendedorElegido(codigosubvendedor = self.codigosubvendedor)
		self.EndModal(1)
		self.Destroy()
		
	def FillListCtrl(self):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLOFERTASCOMPRAFUNC4)
		lctrl.Enable(False); lctrl.Show(False); lctrl.ClearAll()
		listctrlfiltro = ""
		if self.nombrefiltro:
			listctrlfiltro += " and nombre like '%s%s%s'" % ("%%", str(self.nombrefiltro), "%%")
			
		cu = r_cn.cursor()
		query = """
		select codigo, nombre from vendedor where desactivado <> 1 and es_subvendedor = 1 %s and
		codigo not in (458,459,460,474) order by nombre
		""" % listctrlfiltro
		sql = (query.replace('\t', ' ')).replace('\n', ' ')
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			lctrl.InsertColumn(0, u"C�digo", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(2, u"Nombre")
			for fila, row in enumerate(rows):
				if fila %2 != 0: bgcolor = [150,204,150]
				else:            bgcolor = [200,230,200]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, self.GetString(row[1]))
				lctrl.SetItemData(index, row[0])
			lctrl.SetColumnWidth(0, 70)
			lctrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
			lctrl.SetItemState(0, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
			lctrl.EnsureVisible(0)
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Subvendedores", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 200)
			self.GetControl(ID_BUTTONOFERTASCOMPRAFUNC4ELEGIR).Enable(False)
			
		lctrl.Enable(True)
		lctrl.Show(True)
		lctrl.SetFocus()
		wx.EndBusyCursor()
		
class GixOfertasDeCompraFunc5(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Caracter�sticas del Inmueble", pos = wx.DefaultPosition,
	             size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE, etapa = 0, oferta = 0, row = None):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.etapa = etapa; self.oferta = oferta
		self.caracteristicas = []
		OfertasCompraFunc5(self)
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC5OFERTA).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC5CUENTA).SetBackgroundColour(wx.Colour(153,255,153))
		self.Bind(wx.EVT_BUTTON, self.OnElegirPrecio, id = ID_BITMAPBUTTONOFERTASCOMPRAFUNC5ELEGIRPRECIO)
		self.Bind(wx.EVT_BUTTON, self.OnImprimir, id = ID_BUTTONOFERTASCOMPRAFUNC5IMPRIMIR)
		self.Bind(wx.EVT_BUTTON, self.OnClose, id = ID_BUTTONOFERTASCOMPRAFUNC5CERRAR)
		wx.EVT_CLOSE(self, self.OnClose)
		self.ObtenerOferta(row)
		self.SetFocus()
		
	def OnClose(self, evt):
		self.ActualizaAsignacion()
		self.EndModal(1)
		self.Destroy()
		
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
				
		return dato.strip()

	def PreparaQuery(self, query):
		return (query.replace('\t', ' ')).replace('\n', ' ')
	    
	def ObtenerOferta(self, row):
		self.GetControl(ID_TEXTOFERTASCOMPRAFUNC5ETAPA).SetLabel(self.GetString(row[0]))
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC5OFERTA).SetValue(str(self.oferta))
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC5CUENTA).SetValue(str(int(row[1])))
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC5FECHAOFERTA).SetValue(str(row[2]))
		if row[3] == "null":
			self.fechaasignacion = str(row[10])
			self.inmueble = int(row[11])
			self.fkprecioetapaasignacion = int(row[8])
			self.precioasignacion = float(row[9])
		else:
			self.fechaasignacion = str(row[3])
			self.inmueble = int(row[14])
			self.fkprecioetapaasignacion = int(row[6])
			self.precioasignacion = float(row[7])
		    
		self.inmuebledefinitivo = int(row[11])
		ubicacion = u"%s - %s" % (self.GetString(row[12]), self.GetString(row[13]))
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC5FECHAASIGNACION).SetValue(self.fechaasignacion)
		self.GetControl(ID_TEXTOFERTASCOMPRAFUNC5INMUEBLE).SetLabel(u"Inmueble %s" % self.inmuebledefinitivo)
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC5INMUEBLE).SetValue(ubicacion)
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC5PRECIO).SetValue(str(amount_and_cents_with_commas(self.precioasignacion)))
		self.idprospecto = int(row[15])
		self.clientecodigo = int(row[16])
		self.clientenombre = self.GetString(row[17])
		self.ObtenerCaracteristicas()
		
	def ObtenerCaracteristicas(self):
		lctrl = self.GetControl(ID_LISTCTRLOFERTASCOMPRAFUNC5)
		lctrl.ClearAll()
		query = """
		select p.id, p.cantidad, c.descripcion from gixpreciosetapacaracteristicas p
		join gixcaracteristicasinmuebles c on c.id = p.fk_idcaracteristica
		where p.fk_idpreciosetapa = %s order by c.descripcion
		""" % self.fkprecioetapaasignacion
		cu = r_cn.cursor()
		cu.execute(self.PreparaQuery(query))
		rows = fetchall(cu)
		cu.close()
		if rows:
		        self.caracteristicas = rows
			lctrl.InsertColumn(0, u"Id", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"Cantidad", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(2, u"Descripci�n")
			for fila, row in enumerate(rows):
				if fila %2 != 0: bgcolor = [255,255,255]
				else:            bgcolor = [230,230,255]
					
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, self.GetString(row[0]))
				lctrl.SetStringItem(index, 1, str(amount_and_cents_with_commas(row[1])))
				lctrl.SetStringItem(index, 2, self.GetString(row[2]))
				lctrl.SetItemData(index, row[0])
				
			lctrl.SetColumnWidth(0, 0)
			lctrl.SetColumnWidth(1, 70)
			lctrl.SetColumnWidth(2, wx.LIST_AUTOSIZE)
			self.GetControl(ID_BUTTONOFERTASCOMPRAFUNC5IMPRIMIR).Enable(True)
		else:
			lctrl.InsertColumn(0, u"  No se Encontraron Caracter�sticas", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 250)
			
	def OnElegirPrecio(self, evt):
		query = """
	        select precio, sustentable, id from gixpreciosetapa
		where fk_etapa = %s and activo = 1 and precio <> %sorder by precio
	        """ % (self.etapa, self.precioasignacion)
		cu = r_cn.cursor()
		cu.execute(self.PreparaQuery(query))
		rows = fetchall(cu)
		cu.close()
		if rows:
			idpreciolst = []; preciostrlst = []; precionumlst = []
			for row in rows:
				idpreciolst.append(int(row[2]))
				preciostrlst.append(str(amount_and_cents_with_commas(float(row[0]))))
				precionumlst.append(float(row[0]))
				
			index = wx.GetSingleChoiceIndex(u"Elija un Precio",  u"Precios", preciostrlst, parent = None)
			if int(index) > -1:
				self.fkprecioetapaasignacion = idpreciolst[index]
				self.precioasignacion = precionumlst[index]
				self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC5PRECIO).\
				    SetValue(str(amount_and_cents_with_commas(self.precioasignacion)))
		else:
			Mensajes().Info(self, u"� No hay precios registrados para la etapa %s !" % self.etapa, u"Atenci�n")
			
	def GetFecha(self):
	        d, m, a = self.fechaasignacion.split("/")
		return "%04d/%02d/%02d" % (int(a), int(m), int(d))
			
	def ActualizaAsignacion(self):
		query = """
		update gixpreciosetapaofertaasignacion set fecha_asignacion = '%s', inmueble = %s,
		fk_preciosetapaasignacion = %s, precioasignacion = %s, inmuebledefinitivo = %s
		where fk_etapa = %s and oferta = %s
		""" % (self.GetFecha(), self.inmueble, self.fkprecioetapaasignacion,
		       self.precioasignacion, self.inmuebledefinitivo, self.etapa, self.oferta)
		todook, trash = self.QueryUpdateRecord(self.PreparaQuery(query), conexion = r_cn)
		if todook:
		        return True
		else:
			Mensajes().Info(self, u"� No se actualiz� la asignaci�n del inmueble !", u"Atenci�n")
			return False

	#def ActualizaAsignacion(self):
		#query = """
	        #select p.id, c.fk_inmueble from gixpreciosetapaofertaasignacion p
		#join cuenta c on c.codigo = p.cuenta
		#order by p.id
	        #"""
		#cu = r_cn.cursor()
		#cu.execute(self.PreparaQuery(query))
		#rows = fetchall(cu)
		#cu.close()
		#if rows:
			#for row in rows:
				#query = """
				#update gixpreciosetapaofertaasignacion set inmuebledefinitivo = %s
				#where id = %s
				#""" % (int(row[1]), int(row[0]))
				#todook, trash = self.QueryUpdateRecord(self.PreparaQuery(query), conexion = r_cn)
				#if not todook:
					#Mensajes().Info(self, u"� No se actualiz� la asignaci�n del inmueble !", u"Atenci�n")
					#return False

	def OnImprimir(self, evt):
		if self.ActualizaAsignacion():
		        if self.caracteristicas:
				self.ImprimirCaracteristicas()
			else:
				Mensajes().Info(self, u"� La oferta no tiene caracter�sticas del inmueble !", u"Atenci�n")
				
			self.EndModal(1)
			self.Destroy()
			
	def ImprimirCaracteristicas(self):
		try:
			pisa
		except:
			Mensajes().Info(self, u"� Por favor instale el m�dulo pisa !", u"Aviso")
			return
		    
		try:
			wx.BeginBusyCursor()
			gridcontenthtml = self.GetHtmlCaracteristicas()
			if gridcontenthtml:
				archivo = self.GetPdfFileName("car")
				gridcontenthtml = gridcontenthtml.encode("utf-8")
				pdf = pisa.CreatePDF(cStringIO.StringIO(gridcontenthtml), file(archivo, "wb"))
				if not pdf.err:
					try:
						pdf.dest.close()
					except:
						warnings.warn("<<pdf.dest.close() no se pudo.>>")
					try:
						os.startfile(str(archivo))
					except:
						os.system("open %s" % archivo)
						
						#commmand_line = "open %s" % archivo
						#p = subprocess.Popen(commmand_line, shell = True)
						#pid, sts = os.waitpid(p.pid, 0)						
						
				wx.EndBusyCursor()
			else:
				wx.EndBusyCursor()
				Mensajes().Info(self, u"� No se encontr� informaci�n referente a las caracter�sticas !", u"Atenci�n")
		except:
			wx.EndBusyCursor()
			Mensajes().Info(self, u"� Se presento un problema al imprimir las caracter�sticas !", u"Atenci�n")
			
	def GetHtmlCaracteristicas(self):
	        rows = self.caracteristicas
		if rows:
			meses = ("", "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto",
			         "Septiembre", "Octubre", "Noviembre", "Diciembre")
			etapa = self.GetControl(ID_TEXTOFERTASCOMPRAFUNC5ETAPA).GetLabel()
			d, m, a = self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC5FECHAASIGNACION).GetValue().split("/")
			fecha = "%02d de %s de %04d" % (int(d), meses[int(m)], int(a))
			cuenta = self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC5CUENTA).GetValue()
			inmueble = self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC5INMUEBLE).GetValue()
			oferta = self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC5OFERTA).GetValue()
			cliente = "%s - (P%s)" % (self.clientecodigo, self.idprospecto)
			precio = self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC5PRECIO).GetValue()
			
			w = 190; h = 170; br = ""
			if wx.Platform == '__WXMSW__':
			        w = 150; h = 130; br = "<br><br>"
			
			header = u"""
			<table
			  style="width: 993px; height: 200px; text-align: left; margin-left: auto; margin-right: auto;"
			  border="0" cellpadding="2" cellspacing="2">
			  <tbody>
			    <tr>
			      <td style="text-align: center;">
			        <IMG SRC="images/LogoIclar.jpg" NAME="Logo" ALIGN=LEFT
			        WIDTH=""" + str(w) + """ HEIGHT=""" + str(h) + """ BORDER=0>
			      </td>
			      <td style="text-align: center; vertical-align: middle;"><big><big><big><big><big>
			        <span style="font-weight: bold;">""" + etapa + """</span></big></big></big></big></big>
			        <br>
			      </td>
			    </tr>
			  </tbody>
			</table>
			<div style="text-align: right;"><big><big><big>&nbsp;Fecha:
			  <span style="font-weight: bold;">&nbsp;""" + fecha + """</span></big></big></big>
			  <br>
			</div>			
			<hr style="width: 100%; height: 2px;">
			<table
			  style="width: 985px; height: 82px; text-align: left; margin-left: auto; margin-right: auto;"
			  border="0" cellpadding="2" cellspacing="2">
			  <tbody>
			    <tr>
			      <td style="text-align: right; width: 190px;"><big><big><big>Cuenta:</big></big></big></td>
			      <td style="text-align: left; font-weight: bold; width: 183px;"><big><big><big>""" + cuenta + """</big></big></big></td>
			      <td style="text-align: right; width: 150px;"><big><big><big>Inmueble:</big></big></big></td>
			      <td style="text-align: left; font-weight: bold; width: 400px;"><big><big><big>""" + inmueble + """</big></big></big></td>
			    </tr>
			    <tr>
			      <td style="text-align: right; width: 190px;"><big><big><big>Oferta:</big></big></big></td>
			      <td style="text-align: left; font-weight: bold; width: 183px;"><big><big><big>""" + oferta + """</big></big></big></td>
			      <td style="text-align: right; width: 150px;"><big><big><big>Cliente:</big></big></big></td>
			      <td style="text-align: left; font-weight: bold; width: 400px;"><big><big><big>""" + cliente + """</big></big></big></td>
			    </tr>
			  </tbody>
			</table>
			<div style="text-align: center; font-weight: bold;"><br><br><br>""" + br + """<big><big><big><big><big>
			  <span style="font-weight: normal;">Precio:</span><big><big>$""" + precio + """</big></big><br><br>
			  </big></big></big></big></big>
			</div>
			<hr style="height: 1px; width: 100%;" noshade="noshade">
			<div style="text-align: center;">
			  <big><big><big><big><big>
			  <span style="font-style: italic; font-weight: bold;">CARACTERISTICAS
			  DE LA VIVIENDA</span><br><br>""" + br + """
			  </big></big></big></big></big>
			</div>
			"""
			
			detail = ""; lines = 0
			for row in rows:
				line = u"""
				<table
				  style="width: 990px; height: 36px; text-align: left; margin-left: auto; margin-right: auto;"
				  border="0" cellpadding="2" cellspacing="2">
				  <tbody>
				    <tr>
				      <td style="width: 120px; text-align: right;"><big><big><big
				        style="font-weight: bold;">""" + "%0.2f" % float(row[1]) + """</big></big></big>
				      </td>
				      <td style="text-align: left; font-weight: bold;">
				        <big><big><big>""" + "%s" % self.GetString(row[2]) + """</big></big></big>
				      </td>
				    </tr>
				  </tbody>
				</table>
			        """
				lines += 1
				detail += line
				
			jump = ""
			for cont in range(lines, 18):
			        jump += "<br>"
				
			footer = u"""
			<div style="text-align: center;">""" + jump + """<big><big><big><big>
			  <span style="font-weight: bold;">ENTERADO</span></big></big></big></big>
			  <br><br><br><br><br><br>
			</div>
			<hr style="width: 100%; height: 2px;">
			<div style="text-align: center;"><big><big><big><big>
			  <span style="font-weight: bold;">"""+ self.clientenombre + """</span></big></big></big></big>
			</div>
			"""
			
			h = (header.replace('\n',' ')).replace('\t',' ')
			d = (detail.replace('\n',' ')).replace('\t',' ')
			f = (footer.replace('\n',' ')).replace('\t',' ')
			
			html = '<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" />' \
			     '</head><body>' + h + d + f + '</body></html>'
			
			return html
		else:
			return ""
			
class GixOfertasDeCompraFunc1(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Ofertas de Compra", pos = wx.DefaultPosition,
	             size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE, usuario = None):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.usuario = usuario
		self.etapa, self.desarrollo, self.empresa = 0, 0, 0
		self.currentitem, self.oferta = 0, 0
		self.filtrooferta, self.filtrocuenta, self.filtrocliente = "", "", ""
		self.DicDatesAndTxt = {ID_BITMAPBUTTONOFERTASCOMPRAFUNC1ELEGIRFECHA : ID_TEXTCTRLOFERTASCOMPRAFUNC1FECHA}
		OfertasCompraFunc1(self, True)
		self.Bind(wx.EVT_CHOICE, self.OnChoiceEtapa, id = ID_CHOICEOFERTASCOMPRAFUNC1ETAPA)
		self.Bind(wx.EVT_CHOICE, self.OnChoiceReactivacion, id = ID_CHOICEOFERTASCOMPRAFUNC1REACTIVACIONES)
		self.GetControl(ID_SEARCHCTRLOFERTASCOMPRAFUNC1OFERTA).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchOferta, id = ID_SEARCHCTRLOFERTASCOMPRAFUNC1OFERTA)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanOferta, id = ID_SEARCHCTRLOFERTASCOMPRAFUNC1OFERTA)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchOferta, id = ID_SEARCHCTRLOFERTASCOMPRAFUNC1OFERTA)
		self.GetControl(ID_SEARCHCTRLOFERTASCOMPRAFUNC1CUENTA).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchCuenta, id = ID_SEARCHCTRLOFERTASCOMPRAFUNC1CUENTA)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanCuenta, id = ID_SEARCHCTRLOFERTASCOMPRAFUNC1CUENTA)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchCuenta, id = ID_SEARCHCTRLOFERTASCOMPRAFUNC1CUENTA)
		self.GetControl(ID_SEARCHCTRLOFERTASCOMPRAFUNC1NOMBRECLIENTE).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchCliente, id = ID_SEARCHCTRLOFERTASCOMPRAFUNC1NOMBRECLIENTE)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanCliente, id = ID_SEARCHCTRLOFERTASCOMPRAFUNC1NOMBRECLIENTE)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchCliente, id = ID_SEARCHCTRLOFERTASCOMPRAFUNC1NOMBRECLIENTE)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelected, id = ID_LISTCTRLOFERTASCOMPRAFUNC1)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselected, id = ID_LISTCTRLOFERTASCOMPRAFUNC1)
		self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnCaracteristicas, id = ID_LISTCTRLOFERTASCOMPRAFUNC1)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONOFERTASCOMPRAFUNC1ELEGIRPROSPECTO, self.OnElegirProspecto)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONOFERTASCOMPRAFUNC1ELEGIRCLIENTE, self.OnElegirCliente)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONOFERTASCOMPRAFUNC1ELEGIRSUBVENDEDOR, self.OnElegirSubvendedor)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONOFERTASCOMPRAFUNC1LIMPIARREACTIVACION, self.OnLimpiarReactivacion)
		self.Bind(wx.EVT_BUTTON, self.OnNuevaOferta, id = ID_BUTTONOFERTASCOMPRAFUNC1NUEVA)
		self.Bind(wx.EVT_BUTTON, self.OnGenerarOfertaCuenta, id = ID_BUTTONOFERTASCOMPRAFUNC1GENERAR)
		self.Bind(wx.EVT_BUTTON, self.OnImprimeOfertaCompra, id = ID_BUTTONOFERTASCOMPRAFUNC1IMPRIMIR)
		self.Bind(wx.EVT_BUTTON, self.OnCaracteristicas, id = ID_BUTTONOFERTASCOMPRAFUNC1CARACTERISTICAS)
		wx.EVT_CLOSE(self, self.OnClose)
		for v in self.DicDatesAndTxt.keys():
			self.Bind(wx.EVT_BUTTON, self.OnFechaButton, id = v )

		self.ObtenerEtapas()
		self.GetControl(ID_CHOICEOFERTASCOMPRAFUNC1ETAPA).SetSelection(SetChoiceIndex())
		self.GetControl(ID_CHOICEOFERTASCOMPRAFUNC1REACTIVACIONES).SetSelection(0)
		self.GetControl(ID_COMBOOFERTASCOMPRAFUNC1PRECIOINMUEBLE).SetSelection(SetChoiceIndex())
		self.GetControl(ID_COMBOOFERTASCOMPRAFUNC1REFERENCIARAP).SetSelection(SetChoiceIndex())

		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1ULTIMOFOLIO).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1TOTALOFERTAS).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1ALAVISTA).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1REACTIVACIONES).SetBackgroundColour(wx.Colour(153,255,153))
		
		self.SetFocus()
		
	def OnClose(self, evt):
		self.Destroy()
		
	def GetDate(self):
		cu = r_cn.cursor()
		cu.execute("select convert(varchar(10), getdate(), 103)")
		row = fetchone(cu)
		cu.close()
		return str(row[0])
	
	def GetEncode(self, valor):
		dato = ""
		try:
			dato = valor.encode("iso8859-1")
		except:
			dato = valor
			
		return dato.strip()
		
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
				
		return dato.strip()

	def PreparaQuery(self, sql):
		return (sql.replace('\t', ' ')).replace('\n', ' ')
		
	def ObtenerEtapas(self):
		control = self.GetControl(ID_CHOICEOFERTASCOMPRAFUNC1ETAPA)
		control.Enable(False); control.Show(False); control.Clear()
		cu = r_cn.cursor()
		#cu.execute(str("select codigo, descripcion from ETAPA where codigo > 46 and codigo <> 49 order by descripcion"))
		cu.execute(str("select codigo, descripcion from ETAPA where codigo > 43 and codigo not in (45,46,49) order by descripcion"))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(self.GetString(row[1]), int(row[0]))
				
		control.Show(True)
		control.Enable(True)
		
	def ObtenerTotalReactivaciones(self):
		cu = r_cn.cursor()
		cu.execute(str("select count(*) from ofertas_compra where reactivacion_cliente_etapa is not null and fk_etapa = %s" %
		               self.etapa))
		row = fetchone(cu)
		cu.close()
		return int(row[0])
		
	def ObtenerUltimoFolio(self):
		sql = """
		select d.contrato from etapa e join desarrollo d on e.fk_desarrollo = d.codigo where e.codigo = %s
		""" % self.etapa
		sql = self.PreparaQuery(sql)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		ultimofolio = 0
		if row is not None:
			ultimofolio = int(row[0])
			
		return ultimofolio
	
	def ObtenerTotalOfertas(self):
		sql = """
		select o.oferta, convert(varchar(10), o.fecha_oferta, 103),
		c.codigo, c.fk_inmueble, o.cliente, o.subvendedor, o.vendedor, o.referencia_rap,
		o.cancelada, l.nombre as nombrecliente, sv.nombre as nombresubvendedor, o.reactivar, isnull(v2.nombre, '')
		from ofertas_compra o
		join cuenta c on o.oferta  = c.contrato
		join cliente l on o.cliente = l.codigo
		join vendedor sv on o.subvendedor = sv.codigo
		left join vendedor v2 on o.vendedor = v2.codigo
		where o.fk_etapa = %s and c.fk_etapa = %s
		union select o.oferta, convert(varchar(10),o.fecha_oferta,111),
		0, 0, o.cliente, o.subvendedor, o.vendedor, o.referencia_rap,
		o.cancelada, l.nombre as nombrecliente, sv.nombre as nombresubvendedor, o.reactivar, isnull(v2.nombre, '')
		from ofertas_compra o
		join cliente l on o.cliente = l.codigo
		join vendedor sv on o.subvendedor = sv.codigo
		left join vendedor v2 on o.vendedor = v2.codigo
		where o.fk_etapa = %s and o.reactivar = -1 and o.cancelada = -1 order by 1
		""" % (self.etapa, self.etapa, self.etapa)
		sql = self.PreparaQuery(sql)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		totalofertas = 0
		if rows:
			totalofertas = len(rows)
			
		return totalofertas
	
	def ObtenerNombreVendedor(self, codigo):
		cu = r_cn.cursor()
		cu.execute(str("select nombre from vendedor where codigo = %s" % codigo))
		row = fetchone(cu)
		cu.close()
		nombre = ""
		if row is not None:
			nombre = self.GetString(row[0])
		
		return nombre
	
	def ObtenerReactivar(self, dato):
		reactivar = "No"
		if dato:
			reactivar = "Si"
			
		return reactivar
	
	def ObtenerInmueble(self, codigo):
		inmueble = ""
		if codigo:
			cu = r_cn.cursor()
			cu.execute(str("select rtrim(ltrim(iden2)) + rtrim(ltrim(iden1)) from inmueble where codigo = %s" % codigo))
			row = fetchone(cu)
			cu.close()
			if row is not None:
				inmueble = "%s - %s" % (codigo, str(row[0]))
				
		return inmueble
	
	def OnChoiceEtapa(self, evt):
		ctrl = self.GetControl(ID_CHOICEOFERTASCOMPRAFUNC1ETAPA)
		inx = ctrl.GetSelection()
		self.etapa = ctrl.GetClientData(inx)
		sql = """
		select e.fk_desarrollo, d.descripcion, d.fk_empresa, m.razonsocial from etapa e
		join desarrollo d on d.codigo = e.fk_desarrollo
		join empresa m on m.codigo = d.fk_empresa where e.codigo = %s
		""" % self.etapa
		sql = self.PreparaQuery(sql)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		self.desarrollo, self.empresa = 0, 0
		self.GetControl(ID_TEXTOFERTASCOMPRAFUNC1EMPRESADESARROLLO).SetLabel("")
		if row is not None:
			self.desarrollo = int(row[0])
			self.empresa = int(row[2])
			self.GetControl(ID_TEXTOFERTASCOMPRAFUNC1EMPRESADESARROLLO).SetLabel(" %s - %s " % (self.GetString(row[3]), self.GetString(row[1])))
		else:
			Mensajes().Info(self, u"Por favor revise el desarrollo y la empresa\n" \
			                u"a la que pertenece la etapa.\n\n", u"Atenci�n")

		self.FillOfertasCompra()
		self.GetControl(ID_BUTTONOFERTASCOMPRAFUNC1NUEVA).Enable(True)
		
	def OnChoiceReactivacion(self, evt):
		self.FillOfertasCompra()

	def OnDoSearchOferta(self, evt):
		self.filtrooferta = self.GetControl(ID_SEARCHCTRLOFERTASCOMPRAFUNC1OFERTA).GetValue()
		if self.etapa:
			self.FillOfertasCompra()
	
	def OnCleanOferta(self, evt):
		self.GetControl(ID_SEARCHCTRLOFERTASCOMPRAFUNC1OFERTA).SetValue("")
		self.filtrooferta = ""
		if self.etapa:
			self.FillOfertasCompra()

	def OnDoSearchCuenta(self, evt):
		self.filtrocuenta = self.GetControl(ID_SEARCHCTRLOFERTASCOMPRAFUNC1CUENTA).GetValue()
		if self.etapa:
			self.FillOfertasCompra()
	
	def OnCleanCuenta(self, evt):
		self.GetControl(ID_SEARCHCTRLOFERTASCOMPRAFUNC1CUENTA).SetValue("")
		self.filtrocuenta = ""
		if self.etapa:
			self.FillOfertasCompra()
		
	def OnDoSearchCliente(self, evt):
		cliente = self.GetControl(ID_SEARCHCTRLOFERTASCOMPRAFUNC1NOMBRECLIENTE).GetValue()
		self.filtrocliente = cliente.encode("iso8859-1")
		if self.etapa:
			self.FillOfertasCompra()
	
	def OnCleanCliente(self, evt):
		self.GetControl(ID_SEARCHCTRLOFERTASCOMPRAFUNC1NOMBRECLIENTE).SetValue("")
		self.filtrocliente = ""
		if self.etapa:
			self.FillOfertasCompra()
			
	def SetEditableCtrls(self, sw):
		self.GetControl(ID_BITMAPBUTTONOFERTASCOMPRAFUNC1ELEGIRFECHA).Enable(sw)
		self.GetControl(ID_BITMAPBUTTONOFERTASCOMPRAFUNC1ELEGIRPROSPECTO).Enable(sw)
		self.GetControl(ID_BITMAPBUTTONOFERTASCOMPRAFUNC1ELEGIRCLIENTE).Enable(sw)
		self.GetControl(ID_BITMAPBUTTONOFERTASCOMPRAFUNC1ELEGIRSUBVENDEDOR).Enable(sw)
		self.GetControl(ID_BITMAPBUTTONOFERTASCOMPRAFUNC1LIMPIARREACTIVACION).Enable(sw)
		self.GetControl(ID_BUTTONOFERTASCOMPRAFUNC1GENERAR).Enable(sw)
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1APARTADO).SetEditable(sw)
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1MONTOCREDITO).SetEditable(sw)
		if sw:
			self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1APARTADO).SetBackgroundColour(wx.CYAN)
			self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1MONTOCREDITO).SetBackgroundColour(wx.CYAN)
		else:
			self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1APARTADO).SetBackgroundColour(wx.WHITE)
			self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1MONTOCREDITO).SetBackgroundColour(wx.WHITE)

	def FillDetalleOferta(self, row1, row2):
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1FOLIOOFERTA).SetValue(str(int(row2[0])))
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1FECHA).SetValue(str(row2[1]))
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1CUENTA).SetValue(str(int(row2[2])))
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1PROSPECTO).SetValue(str(int(row2[13])))
		self.GetControl(ID_TEXTOFERTASCOMPRAFUNC1PROSPECTO).SetLabel(self.GetString(row2[14]))
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1PROSPECTOIMSS).SetValue(self.GetString(row2[15]))
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1PROSPECTOVENDEDOR).SetValue(self.GetString(row2[16]))
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1PROSPECTOGERENTE).SetValue(self.GetString(row2[17]))
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1CLIENTE).SetValue(str(int(row2[4])))
		self.GetControl(ID_TEXTOFERTASCOMPRAFUNC1CLIENTE).SetLabel(self.GetString(row2[9]))
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1IMSS).SetValue(self.GetString(row1[7]))
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1RFC).SetValue(self.GetString(row1[4]))
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1TELEFONO).SetValue(self.GetString(row1[6]))
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1DOMICILIO).SetValue(self.GetString(row1[5]))
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1SUBVENDEDOR).SetValue(str(row2[5]))
		self.GetControl(ID_TEXTOFERTASCOMPRAFUNC1SUBVENDEDOR).SetLabel(self.GetString(row2[10]))
		comision = ""
		if row1[12]:
			comision = "%s%s" % (float(row1[12]), "%")
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1COMISION).SetValue(comision)
		self.GetControl(ID_CHOICEOFERTASCOMPRAFUNC1REACTIVACIONOFERTA).Clear()
		if int(row2[18]):
			self.GetControl(ID_CHOICEOFERTASCOMPRAFUNC1REACTIVACIONOFERTA).Insert("Etapa: %s-%s  Oferta: %s" %
			                                                                      (int(row2[18]), self.GetString(row2[20]),
			                                                                       int(row2[19])), 0)
			self.GetControl(ID_CHOICEOFERTASCOMPRAFUNC1REACTIVACIONOFERTA).SetSelection(0)
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1ANTICIPOCOMISION).SetValue(str(amount_and_cents_with_commas(float(row1[9]))))
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1GASTOS).SetValue(str(amount_and_cents_with_commas(float(row1[0]))))
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1APARTADO).SetValue(str(amount_and_cents_with_commas(float(row1[1]))))
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1SEGURO).SetValue(str(amount_and_cents_with_commas(float(row1[8]))))
		self.GetControl(ID_COMBOOFERTASCOMPRAFUNC1PRECIOINMUEBLE).Clear()
		self.GetControl(ID_COMBOOFERTASCOMPRAFUNC1PRECIOINMUEBLE).Insert(str(amount_and_cents_with_commas(float(row1[2]))),0)
		self.GetControl(ID_COMBOOFERTASCOMPRAFUNC1PRECIOINMUEBLE).SetSelection(0)
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1MONTOCREDITO).SetValue(str(amount_and_cents_with_commas(float(row1[3]))))
		self.GetControl(ID_COMBOOFERTASCOMPRAFUNC1REFERENCIARAP).Clear()
		self.GetControl(ID_COMBOOFERTASCOMPRAFUNC1REFERENCIARAP).Insert(str(row2[7]),0)
		self.GetControl(ID_COMBOOFERTASCOMPRAFUNC1REFERENCIARAP).SetSelection(0)
		
		self.GetControl(ID_BUTTONOFERTASCOMPRAFUNC1IMPRIMIR).Enable(True)
		sw = True
		if not row2[3]:
			sw = False
			
		self.GetControl(ID_BUTTONOFERTASCOMPRAFUNC1CARACTERISTICAS).Enable(sw)

	def OnSelected(self, evt):
		datointerno = self.GetControl(ID_LISTCTRLOFERTASCOMPRAFUNC1).GetItem(evt.m_itemIndex, 0).GetText()
		self.oferta = int(datointerno)
		sql1 = """
		select o.gastos_admin, o.APARTADO, o.precio, o.monto_credito, c.rfc, c.domicilio, c.telefonocasa,
		c.imss, o.precio_seguro, o.anticipo_comision,
		case when o.reactivacion_cliente_etapa is null then ''
		else convert(varchar(10), o.reactivacion_cliente_etapa)
		end as reactivacion_cliente_etapa,
		case when o.reactivacion_cliente_oferta is null then ''
		else convert(varchar(10), o.reactivacion_cliente_oferta)
		end as reactivacion_cliente_oferta,
		isnull(p.porcentaje, '')
		from ofertas_compra o
		join cliente c on o.cliente = c.codigo
		left join porcentaje_comision p on o.subvendedor = p.fk_vendedor and p.fk_desarrollo = %s
		where o.oferta = %s and o.CLIENTE = c.codigo and o.fk_etapa = %s
		""" % (self.desarrollo, self.oferta, self.etapa)
		sql2 = """
		select o.oferta, convert(varchar(10), o.fecha_oferta, 103),
		c.codigo, c.fk_inmueble, o.cliente, o.subvendedor, o.vendedor, o.referencia_rap, o.cancelada,
		l.nombre as nombrecliente, sv.nombre as nombresubvendedor, o.reactivar, isnull(v2.nombre, ''), isnull(p.idprospecto, 0),
		isnull(rtrim(ltrim(p.apellidopaterno1))+' '+rtrim(ltrim(p.apellidomaterno1))+' '+rtrim(ltrim(p.nombre1)), 'SIN PROSPECTO'),
		isnull(rtrim(ltrim(p.afiliacionimss)), ''), isnull(rtrim(ltrim(vp.nombre)), ''), isnull(rtrim(ltrim(gv.nombre)), ''),
		isnull(o.reactivacion_cliente_etapa, 0), isnull(o.reactivacion_cliente_oferta, 0), isnull(e.descripcion, '')
		from ofertas_compra o
		join cuenta c on o.oferta  = c.contrato
		join cliente l on o.cliente = l.codigo
		join vendedor sv on o.subvendedor = sv.codigo
		left join vendedor v2 on o.vendedor = v2.codigo
		left join gixprospectos p on o.cuenta = p.cuenta
		left join vendedor vp on p.idvendedor = vp.codigo
		left join gerentesventas gv on p.idgerente = gv.codigo
		left join etapa e on o.reactivacion_cliente_etapa = e.codigo
		where o.fk_etapa = %s and c.fk_etapa = %s and o.oferta = %s
		union select o.oferta, convert(varchar(10),o.fecha_oferta,111),
		0, 0, o.cliente, o.subvendedor, o.vendedor, o.referencia_rap, o.cancelada,
		l.nombre as nombrecliente, sv.nombre as nombresubvendedor, o.reactivar, isnull(v2.nombre, ''), isnull(p.idprospecto, 0),
		isnull(rtrim(ltrim(p.nombre1))+' '+rtrim(ltrim(p.apellidopaterno1))+' '+rtrim(ltrim(p.apellidomaterno1)), 'SIN PROSPECTO'),
		isnull(rtrim(ltrim(p.afiliacionimss)), ''), isnull(rtrim(ltrim(vp.nombre)), ''), isnull(rtrim(ltrim(gv.nombre)), ''),
		isnull(o.reactivacion_cliente_etapa, 0), isnull(o.reactivacion_cliente_oferta, 0), isnull(e.descripcion, '')
		from ofertas_compra o
		join cliente l on o.cliente = l.codigo
		join vendedor sv on o.subvendedor = sv.codigo
		left join vendedor v2 on o.vendedor = v2.codigo
		left join gixprospectos p on o.cuenta = p.cuenta
		left join vendedor vp on p.idvendedor = vp.codigo
		left join gerentesventas gv on p.idgerente = gv.codigo
		left join etapa e on o.reactivacion_cliente_etapa = e.codigo
		where o.fk_etapa = %s and o.reactivar = -1 and o.cancelada = -1 and o.oferta = %s order by 1
		""" % (self.etapa, self.etapa, self.oferta, self.etapa, self.oferta)
		sql1 = self.PreparaQuery(sql1)
		sql2 = self.PreparaQuery(sql2)
		cu = r_cn.cursor()
		cu.execute(str(sql1))
		row1 = fetchone(cu)
		cu.execute(str(sql2))
		row2 = fetchone(cu)
		cu.close()
		if row1 is not None and row2 is not None:
			self.FillDetalleOferta(row1, row2)
			self.SetEditableCtrls(False)
			
		evt.Skip()
		
	def ClearDetalleOferta(self):
		self.oferta = 0
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1FOLIOOFERTA).SetValue("")
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1FECHA).SetValue("")
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1CUENTA).SetValue("")
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1PROSPECTO).SetValue("")
		self.GetControl(ID_TEXTOFERTASCOMPRAFUNC1PROSPECTO).SetLabel("")
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1PROSPECTOIMSS).SetValue("")
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1PROSPECTOVENDEDOR).SetValue("")
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1PROSPECTOGERENTE).SetValue("")
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1CLIENTE).SetValue("")
		self.GetControl(ID_TEXTOFERTASCOMPRAFUNC1CLIENTE).SetLabel("")
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1IMSS).SetValue("")
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1RFC).SetValue("")
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1TELEFONO).SetValue("")
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1DOMICILIO).SetValue("")
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1SUBVENDEDOR).SetValue("")
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1COMISION).SetValue("")
		self.GetControl(ID_TEXTOFERTASCOMPRAFUNC1SUBVENDEDOR).SetLabel("")
		self.GetControl(ID_CHOICEOFERTASCOMPRAFUNC1REACTIVACIONOFERTA).Clear()
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1ANTICIPOCOMISION).SetValue("")
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1GASTOS).SetValue("")
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1APARTADO).SetValue("")
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1SEGURO).SetValue("")
		self.GetControl(ID_COMBOOFERTASCOMPRAFUNC1PRECIOINMUEBLE).Clear()
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1MONTOCREDITO).SetValue("")
		self.GetControl(ID_COMBOOFERTASCOMPRAFUNC1REFERENCIARAP).Clear()
		
		self.GetControl(ID_BUTTONOFERTASCOMPRAFUNC1IMPRIMIR).Enable(False)
		self.GetControl(ID_BUTTONOFERTASCOMPRAFUNC1CARACTERISTICAS).Enable(False)
	
	def OnDeselected(self, evt):
		self.ClearDetalleOferta()
		self.SetEditableCtrls(False)
		
	def FillOfertasCompra(self):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLOFERTASCOMPRAFUNC1)
		#lctrl.Enable(False); lctrl.Show(False)
		lctrl.ClearAll()
		filtrooferta, filtroofertaunion = "and o.oferta > 0", ""
		if self.filtrooferta:
			filtrooferta = "and o.oferta = %s" % int(self.filtrooferta)
			filtroofertaunion = filtrooferta
		filtrocuenta = ""
		if self.filtrocuenta:
			filtrocuenta = "and c.codigo = %s" % int(self.filtrocuenta)
		filtrocliente = ""
		if self.filtrocliente:
			filtrocliente = "and l.nombre like '%s%s%s'" % ("%%", self.filtrocliente, "%%")
		filtrover = ""
		inx = self.GetControl(ID_CHOICEOFERTASCOMPRAFUNC1REACTIVACIONES).GetSelection()
		if inx > 0:
			filtrover = "and o.reactivacion_cliente_etapa <> 0"
			
		filtrofecha = ""	
		if self.usuario == "MELIZABETH":
			filtrofecha = "and o.fecha_oferta > '2012/07/01'"
			
		query = """
		select o.oferta, convert(varchar(10), o.fecha_oferta, 103),
		c.codigo, c.fk_inmueble, o.cliente, o.subvendedor, o.vendedor, o.referencia_rap,
		o.cancelada, l.nombre as nombrecliente, sv.nombre as nombresubvendedor, o.reactivar, isnull(v2.nombre, ''),
		isnull(o.reactivacion_cliente_etapa, 0)
		from ofertas_compra o
		join cuenta c on o.oferta  = c.contrato
		join cliente l on o.cliente = l.codigo
		join vendedor sv on o.subvendedor = sv.codigo
		left join vendedor v2 on o.vendedor = v2.codigo
		where o.fk_etapa = %s %s %s and c.fk_etapa = %s %s %s %s
		union select o.oferta, convert(varchar(10),o.fecha_oferta,111),
		0, 0, o.cliente, o.subvendedor, o.vendedor, o.referencia_rap,
		o.cancelada, l.nombre as nombrecliente, sv.nombre as nombresubvendedor, o.reactivar, isnull(v2.nombre, ''),
		isnull(o.reactivacion_cliente_etapa, 0)
		from ofertas_compra o
		join cliente l on o.cliente = l.codigo
		join vendedor sv on o.subvendedor = sv.codigo
		left join vendedor v2 on o.vendedor = v2.codigo
		where o.fk_etapa = %s %s and o.reactivar = -1 and o.cancelada = -1 %s %s %s order by 1 desc
		""" % (self.etapa, filtrooferta, filtrocuenta, self.etapa, filtrocliente, filtrover, filtrofecha,
		       self.etapa, filtroofertaunion, filtrocliente, filtrover, filtrofecha)
		sql = self.PreparaQuery(query)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			lctrl.InsertColumn(0, u"Oferta", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"Fecha", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(2, u"Cuenta", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(3, u"Preinmueble")
			lctrl.InsertColumn(4, u"Cliente", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(5, u"Nombre del Cliente")
			lctrl.InsertColumn(6, u"Subvendedor", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(7, u"Nombre del Subvendedor")
			lctrl.InsertColumn(8, u"Vendedor", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(9, u"Nombre del Vendedor")
			lctrl.InsertColumn(10, u"Referencia RAP", wx.LIST_FORMAT_CENTER)
			#lctrl.InsertColumn(11, u"� Reactivar ?", wx.LIST_FORMAT_CENTER)
			for fila, row in enumerate(rows):
				if not row[8]:
					if row[13]:
						bgcolor = [248,181,68]
					elif not row[3]:
						bgcolor = [250,250,200]
					else:
						bgcolor = [210,240,210]
				else:
					if not row[13]:
						bgcolor = [250,70,70]
					else:
						bgcolor = [248,181,68]
						
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, str(row[1]))
				lctrl.SetStringItem(index, 2, str(row[2]))
				lctrl.SetStringItem(index, 3, str(self.ObtenerInmueble(row[3])))
				lctrl.SetStringItem(index, 4, str(row[4]))
				lctrl.SetStringItem(index, 5, self.GetString(row[9]))
				lctrl.SetStringItem(index, 6, str(row[5]))
				lctrl.SetStringItem(index, 7, self.GetString(row[10]))
				lctrl.SetStringItem(index, 8, str(row[6]))
				lctrl.SetStringItem(index, 9, self.ObtenerNombreVendedor(row[6]))
				lctrl.SetStringItem(index, 10, str(row[7]))
				#lctrl.SetStringItem(index, 11, self.ObtenerReactivar(row[11]))
				lctrl.SetItemData(index, row[0])
				
			lctrl.SetColumnWidth(0, 70)
			lctrl.SetColumnWidth(1, 90)
			lctrl.SetColumnWidth(2, 70)
			lctrl.SetColumnWidth(3, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(4, 70)
			lctrl.SetColumnWidth(5, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(6, 78)
			lctrl.SetColumnWidth(7, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(8, 73)
			lctrl.SetColumnWidth(9, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(10, 90)
			#lctrl.SetColumnWidth(11, 75)
			lctrl.SetItemState(self.currentitem, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
			lctrl.EnsureVisible(self.currentitem)
			self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1ULTIMOFOLIO).SetValue(str(self.ObtenerUltimoFolio()))
			self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1TOTALOFERTAS).SetValue(str(self.ObtenerTotalOfertas()))
			self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1ALAVISTA).SetValue(str(fila + 1))
			self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1REACTIVACIONES).SetValue(str(self.ObtenerTotalReactivaciones()))
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Ofertas", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 250)
			self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1ULTIMOFOLIO).SetValue(str(self.ObtenerUltimoFolio()))
			self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1TOTALOFERTAS).SetValue(str(self.ObtenerTotalOfertas()))
			self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1ALAVISTA).SetValue("0")
			self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1REACTIVACIONES).SetValue(str(self.ObtenerTotalReactivaciones()))
			self.ClearDetalleOferta()
			self.SetEditableCtrls(False)
			
		#lctrl.Enable(True)
		#lctrl.Show(True)
		lctrl.SetFocus()
		wx.EndBusyCursor()
		
	def OnNuevaOferta(self, evt):
		topemaximo, conteoinmuebles, ofertasadicionales, conteoofertas = 0,0,0,0
		self.afiliacionimss, self.idvendedor, self.comisionvendedor = "", 0, 0
		
		cu = r_cn.cursor()
		cu.execute(str("select isnull(tope_maximo,0) from desarrollo where codigo = %s" % self.desarrollo))
		row = fetchone(cu)
		if row is not None:
			topemaximo = int(row[0])
			
		cu.execute(str("select ofertas_adicionales from ofertasadicionales where fk_etapa = %s" % self.etapa))
		row = fetchone(cu)
		if row is not None:
			ofertasadicionales = int(row[0])
			
		cu.execute(str("select count(*) from ofertas_compra where fk_etapa = %s and cancelada = 0" % self.etapa))
		row = fetchone(cu)
		if row is not None:
			conteoofertas = int(row[0])
			
		cu.execute(str("select count(*) from inmueble where fk_etapa = %s" % self.etapa))
		row = fetchone(cu)
		cu.close()
		if row is not None:
			conteoinmuebles = int(row[0])
			
		if not conteoinmuebles:
			Mensajes().Info(self, "No se han dado de alta los inmuebles para este desarrollo.\n\n" \
			                u"Puede continuar de todos modos.", u"Aviso")
			
		if (conteoofertas < (conteoinmuebles + ofertasadicionales)) or conteoinmuebles == 0:
			cu = r_cn.cursor()
			query = """
			select precio, sustentable, id from gixpreciosetapa where fk_etapa = %s and activo = 1 order by precio
			""" % self.etapa
			sql = self.PreparaQuery(query)
			cu.execute(str(sql))
			rows = fetchall(cu)
			cu.close()
			if rows:
				self.ClearDetalleOferta()
				self.SetEditableCtrls(True)
				self.sustentable = {}
				precio, valorgastos, precioseguro, valorapartado, anticipocomision, gastosacuenta = 0,0,0,0,0,0
				for row in rows:
					self.GetControl(ID_COMBOOFERTASCOMPRAFUNC1PRECIOINMUEBLE).\
					    Append(str(amount_and_cents_with_commas(float(row[0]))))
					self.sustentable[float(row[0])] = (int(row[1]), int(row[2]))

				self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1FOLIOOFERTA).SetValue("Nueva")
				self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1FECHA).SetValue(self.GetDate())
				self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1CUENTA).SetValue("Nueva")
				
				cu = r_cn.cursor()
				cu.execute(str("select contrato from desarrollo where codigo = %s" % self.desarrollo))
				row = fetchone(cu)
				if row is not None:
					self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1ULTIMOFOLIO).SetValue(str(int(row[0])))
					
				sql = """
				select precio, valor_gastos, precio_seguro, valor_apartado, anticipo_comision, gastos_a_cuenta
				from PrecioEtapaDefault where fk_etapa = %s
				""" % self.etapa
				sql = self.PreparaQuery(sql)
				cu.execute(str(sql))
				row = fetchone(cu)
				cu.close()
				if row is not None:
					if not self.GetControl(ID_COMBOOFERTASCOMPRAFUNC1PRECIOINMUEBLE).\
					   SetStringSelection(str(amount_and_cents_with_commas(float(row[0])))):
						self.GetControl(ID_COMBOOFERTASCOMPRAFUNC1PRECIOINMUEBLE).SetSelection(SetChoiceIndex())
					
					self.GetControl(ID_COMBOOFERTASCOMPRAFUNC1PRECIOINMUEBLE).SetSelection(SetChoiceIndex()) # para no elegir precio
					self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1GASTOS).SetValue(str(float(row[1])))
					self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1SEGURO).SetValue(str(float(row[2])))
					self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1APARTADO).SetValue(str(float(row[3])))
					self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1ANTICIPOCOMISION).SetValue(str(float(row[4])))
			else:
				Mensajes().Info(self, u"� No se puede agregar la nueva oferta !\n\n" \
				                u"La etapa no cuenta con lista de precios.", u"Atenci�n")
		else:
			Mensajes().Info(self, u"Ya no se pueden ingresar m�s ofertas, se rebas�\n" \
			                u"el tope m�ximo para este Desarrollo.", "Atenci�n")
			
	def OnGenerarOfertaCuenta(self, evt):
		todook = True
		campos = [("el prospecto", ID_TEXTCTRLOFERTASCOMPRAFUNC1PROSPECTO), ("el cliente", ID_TEXTCTRLOFERTASCOMPRAFUNC1CLIENTE),
		          ("el no. del IMSS del cliente", ID_TEXTCTRLOFERTASCOMPRAFUNC1IMSS), ("el subvendedor", ID_TEXTCTRLOFERTASCOMPRAFUNC1SUBVENDEDOR),
		          (u"el monto del cr�dito", ID_TEXTCTRLOFERTASCOMPRAFUNC1MONTOCREDITO),
		          (u"los gastos administrativos", ID_TEXTCTRLOFERTASCOMPRAFUNC1GASTOS),
		          (u"el apartado", ID_TEXTCTRLOFERTASCOMPRAFUNC1APARTADO),
		          (u"el anticipo de la comisi�n", ID_TEXTCTRLOFERTASCOMPRAFUNC1ANTICIPOCOMISION)]
		for pos, campo in enumerate(campos):
			dato = self.GetControl(campo[1]).GetValue()
			if not dato:
				Mensajes().Error(self, u"Por favor revise %s." % campo[0], u"Informaci�n Incompleta")
				todook = False
				break
			
			if pos == 2:
				if not str(dato).isdigit() or len(str(dato)) <> 11:
					Mensajes().Info(self, u"Por favor revise %s." % campo[0], u"Informaci�n mal Introducida")
					todook = False
					break
			elif pos in (4,5,6,7):
				try:
					valor = float(str(dato))
					if pos in (4,6,7) and valor <= 0:
						Mensajes().Info(self, u"Por favor revise %s." % campo[0], u"Informaci�n Incompleta")
						todook = False
						break
				except:
					Mensajes().Info(self, u"Por favor revise %s." % campo[0], u"Cantidad mal Introducida")
					todook = False
					break
				
				if self.GetControl(ID_COMBOOFERTASCOMPRAFUNC1REFERENCIARAP).GetSelection() < 0:
					Mensajes().Info(self, u"Por favor revise la referencia RAP.", u"Informaci�n Incompleta")
					todook = False
					break
				
				if self.GetControl(ID_COMBOOFERTASCOMPRAFUNC1PRECIOINMUEBLE).GetSelection() < 0:
					Mensajes().Info(self, u"Por favor revise el precio del inmueble.", u"Informaci�n Incompleta")
					todook = False
					break
				
		if todook:
			imss = self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1IMSS).GetValue()
			subvendedor = self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1SUBVENDEDOR).GetValue()
			comision = self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1COMISION).GetValue()
			todook = False
			if self.afiliacionimss <> imss:
				Mensajes().Info(self, u"No coinciden el no. del IMSS del prospecto y el del cliente.\n\n" \
				                u"Prospecto: %s     Cliente: %s" % (self.afiliacionimss, imss), u"Atenci�n")
			elif self.idvendedor <> int(subvendedor):
				Mensajes().Info(self, u"El vendedor del prospecto no coincide con el del cliente.", u"Atenci�n")
			elif not comision:
				Mensajes().Info(self, u"No se puede generar la cuenta debido a que no tiene comisi�n el subvendedor.",
				                u"Atenci�n")
			elif not self.comisionvendedor:
				Mensajes().Info(self, u"No se puede generar la cuenta debido a que no tiene comisi�n el vendedor.",
				                u"Atenci�n")
			elif self.GetControl(ID_COMBOOFERTASCOMPRAFUNC1REFERENCIARAP).GetSelection() < 0:
				Mensajes().Info(self, u"No se puede generar la cuenta debido a que no existe referencia rap.",
				                u"Atenci�n")
			else:
				todook = True
				
		if todook:
			if Mensajes().YesNo(self, u"� Desea realmente generar la oferta y la cuenta ?", u"Confirmaci�n"):
				# Para obtener comisiones anticipadas (de ofertas canceladas) - ya no en uso.
				#query = """
				#select a.codigo, m.fk_vendedor, m.fk_cuenta, c.contrato, m.cantidad,
				#c.fecha_cancelacion, c.fk_cliente, l.nombre as nombrecliente,
				#v.nombre as nombrevendedor from comision m
				#join anticipocomision a on m.codigo = a.fk_comision
				#join cuenta_cancelada c on m.fk_cuenta = c.codigo
				#join cliente l on c.fk_cliente = l.codigo
				#join vendedor v on m.fk_vendedor = v.codigo
				#where c.fk_etapa = %s and a.cancelado = 'N' and c.fk_inmueble = 0 and m.fk_cuenta > 0
				#order by m.codigo
				#""" % self.etapa
				#sql = self.PreparaQuery(query)
				#cu = r_cn.cursor()
				#cu.execute(str(sql))
				#rows = fetchall(cu)
				#cu.close()
				
				d, m, a = self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1FECHA).GetValue().split("/")
				fechadeventa = "%04d/%02d/%02d" % (int(a), int(m), int(d))
				aux = self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1PROSPECTO).GetValue()
				prospecto = int(aux)
				aux = self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1CLIENTE).GetValue()
				cliente = int(aux)
				aux = self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1SUBVENDEDOR).GetValue()
				subvendedor = int(aux)
				reactivacionetapa, reactivacionoferta = 0, 0
				ctrl = self.GetControl(ID_CHOICEOFERTASCOMPRAFUNC1REACTIVACIONOFERTA)
				inx = ctrl.GetSelection()
				if inx > -1:
					re, ro = ctrl.GetClientData(inx).split("-")
					reactivacionetapa, reactivacionoferta = int(re), int(ro)
					
				aux = self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1MONTOCREDITO).GetValue()
				montocredito = float(aux.replace(",",""))
				aux = self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1SEGURO).GetValue()
				seguro = float(aux.replace(",",""))
				aux = self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1APARTADO).GetValue()
				apartado = float(aux.replace(",",""))
				aux = self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1ANTICIPOCOMISION).GetValue()
				anticipocomision = float(aux.replace(",",""))
				aux = self.GetControl(ID_COMBOOFERTASCOMPRAFUNC1PRECIOINMUEBLE).GetValue()
				precio = float(aux.replace(",", ""))
				referenciarap = self.GetControl(ID_COMBOOFERTASCOMPRAFUNC1REFERENCIARAP).GetValue()
				resto = precio - apartado
				
				cu = r_cn.cursor()
				cu.execute("select vendedor from vendedor where codigo = %s" % subvendedor)
				row = fetchone(cu)
				vendedor = int(row[0])
				
				cu.execute("select contrato + 1 from desarrollo where codigo = %s" % self.desarrollo)
				row = fetchone(cu)
				contrato = int(row[0])
				cu.close()
				
				sql = "update desarrollo set contrato = %s where codigo = %s" % (contrato, self.desarrollo)
				todook, trash = self.QueryUpdateRecord(sql, conexion = r_cn)
				if not todook:
					Mensajes().Info(self, u"� No se actualiz� el contrato %s del desarrollo !" % contrato,
					                u"Notifique a Sistemas")
				else:
					cu = r_cn.cursor()
					cu.execute("select max(codigo) from cuenta")
					row = fetchone(cu)
					cuenta = int(row[0])
					cu.close()
					
					cu = r_cn.cursor()
					cu.execute("select max(codigo) from cuenta_cancelada")
					row = fetchone(cu)
					cuentaxx = int(row[0])
					cu.close()
					
					if cuenta < cuentaxx:
						cuenta = cuentaxx

					cuenta += 1
					
					query = """
					insert into cuenta
					(codigo, fecha, saldo, fk_cliente, fk_inmueble, fk_tipo_cuenta, contrato, tipo_contrato, fk_etapa)
					values (%s, '%s', %s, %s, 0, 2, %s, '3', %s)
					""" % (cuenta, fechadeventa, precio, cliente, contrato, self.etapa)
					todook, trash = self.QueryUpdateRecord(self.PreparaQuery(query), conexion = r_cn)
					if not todook:
						Mensajes().Info(self, u"� No se gener� la cuenta %s !" % cuenta, u"Notifique a Sistemas")
					else:
						if (reactivacionetapa and reactivacionoferta):
							query = """
							insert into ofertas_compra
							(fk_etapa, oferta, cliente, vendedor, subvendedor, fecha_oferta, gastos_admin, apartado,
							monto_credito, asignada, referencia_rap, precio, anticipo_comision, cuenta, cancelada,
							precio_seguro, habilitada, preciosustentable, reactivacion_cliente_etapa,
							reactivacion_cliente_oferta)
							values (%s, %s, %s, %s, %s, '%s', 0, %s, %s, 0, '%s', %s, %s, %s, 0, %s, -1, %s, %s, %s) 
							""" % (self.etapa, contrato, cliente, vendedor, subvendedor, fechadeventa, apartado,
							       montocredito, referenciarap, precio, anticipocomision, cuenta, seguro,
							       self.sustentable[precio][0], reactivacionetapa, reactivacionoferta)
						else:
							query = """
							insert into ofertas_compra
							(fk_etapa, oferta, cliente, vendedor, subvendedor, fecha_oferta, gastos_admin, apartado,
							monto_credito, asignada, referencia_rap, precio, anticipo_comision, cuenta, cancelada,
							precio_seguro, habilitada, preciosustentable)
							values (%s, %s, %s, %s, %s, '%s', 0, %s, %s, 0, '%s', %s, %s, %s, 0, %s, -1, %s) 
							""" % (self.etapa, contrato, cliente, vendedor, subvendedor, fechadeventa, apartado,
							       montocredito, referenciarap, precio, anticipocomision, cuenta, seguro,
							       self.sustentable[precio][0])
							
						todook, trash = self.QueryUpdateRecord(self.PreparaQuery(query), conexion = r_cn)
						if not todook:
							Mensajes().Info(self, u"� No se gener� la oferta %s !" % contrato,
							                u"Notifique a Sistemas")
						else:
							sql = "update referencias_rap set cuenta = %s where referencia = '%s'" % \
						            (cuenta, referenciarap)
							todook, trash = self.QueryUpdateRecord(sql, conexion = r_cn)
							if not todook:
								Mensajes().Info(self, u"� No se actualiz� la referencia rap (cuenta %s) !" % \
							                        cuenta, u"Notifique a Sistemas")
							else:
								cu = r_cn.cursor()
								cu.execute("select max(codigo) + 1 from comision")
								row = fetchone(cu)
								codigocomision = int(row[0])
								cu.close()
								query = """
							        insert comision (codigo, aplicar, cantidad, saldo_cantidad, iva, saldo_iva,
							        total, saldo_total, fk_inmueble, fk_vendedor, fk_cuenta, cancelada,
							        cuenta_anterior, cuenta_original)
							        values (%s, 'N', %s, %s, %s, %s, %s, %s, %s, %s, %s, 'N', 0, 0)
							        """ % (codigocomision, anticipocomision, anticipocomision,
							               anticipocomision * 0.16, anticipocomision * 0.16,
							               anticipocomision * 1.16, anticipocomision * 1.16,
							               0, vendedor, cuenta)
								todook, trash = self.QueryUpdateRecord(self.PreparaQuery(query),conexion = r_cn)
								if not todook:
									Mensajes().Info(self, u"� No se gener� comision del vendedor %s !" \
								                        % vendedor, u"Notifique a Sistemas")

								cu = r_cn.cursor()
								cu.execute("select max(codigo) + 1 from comision")
								row = fetchone(cu)
								codigocomision = int(row[0])
								cu.close()
								query = """
							        insert comision (codigo, aplicar, cantidad, saldo_cantidad, iva, saldo_iva,
							        total, saldo_total, fk_inmueble, fk_vendedor, fk_cuenta, cancelada,
							        cuenta_anterior, cuenta_original)
							        values (%s, 'N', %s, %s, %s, %s, %s, %s, %s, %s, %s, 'N', 0, 0)
							        """ % (codigocomision, anticipocomision, anticipocomision,
							               anticipocomision * 0.16, anticipocomision * 0.16,
							               anticipocomision * 1.16, anticipocomision * 1.16,
							               0, subvendedor, cuenta)
								todook, trash = self.QueryUpdateRecord(self.PreparaQuery(query),conexion = r_cn)
								if not todook:
									Mensajes().Info(self, u"� No se gener� comision del subvendedor %s !" \
								                        % vendedor, u"Notifique a Sistemas")
									
								query = """
								insert into gixpreciosetapaofertaasignacion
								(fk_etapa, oferta, fecha_oferta, fk_preciosetapaoferta,
								preciooferta, cuenta)
								values (%s, %s, '%s', %s, %s, %s)
								""" % (self.etapa, contrato, fechadeventa, self.sustentable[precio][1],
								       precio, cuenta)
								todook, trash = self.QueryUpdateRecord(self.PreparaQuery(query), conexion = r_cn)
								if not todook:
									Mensajes().Info(self, u"� No se gener� oferta/asignaci�n de la cuenta %s !" % cuenta, u"Notifique a Sistemas")
								
								
				if todook:
					if apartado > 0:
						cu = r_cn.cursor()
						cu.execute("select max(codigo) + 1 from documento")
						row = fetchone(cu)
						codigodocumento = int(row[0])
						cu.close()
						query = """
						insert into documento (codigo, fechadeelaboracion, fechadevencimiento, fechadevencimientovar,
						saldo, cargo, abono, fk_tipo, fk_cuenta, referencia)
						values (%s, '%s', '%s', '%s', %s, %s, 0, 7, %s, '%s')
						""" % (codigodocumento, fechadeventa, fechadeventa, fechadeventa, apartado, apartado,
						       cuenta, referenciarap)
						todook, trash = self.QueryUpdateRecord(self.PreparaQuery(query), conexion = r_cn)
						if not todook:
							Mensajes().Info(self, u"� No se gener� el documento %s !" \
						                        % codigodocumento, u"Notifique a Sistemas")
						else:
							cu = r_cn.cursor()
							cu.execute("select max(codigo) + 1 from movimiento")
							row = fetchone(cu)
							codigomovimiento = int(row[0])
							cu.close()
							query = """
							insert into movimiento (codigo, cantidad, fecha, relaciondepago, cargoabono,
							fk_tipo, fk_documento)
							values (%s, %s, '%s', '1/1', 'C', 7, %s)
							""" % (codigomovimiento, apartado, fechadeventa, codigodocumento)
							todook, trash = self.QueryUpdateRecord(self.PreparaQuery(query), conexion = r_cn)
							if not todook:
								Mensajes().Info(self, u"� No se gener� el movimiento %s !" \
									        % codigomovimiento, u"Notifique a Sistemas")
						
					cu = r_cn.cursor()
					cu.execute("select max(codigo) + 1 from documento")
					row = fetchone(cu)
					codigodocumento = int(row[0])
					cu.close()
					query = """
				        insert into documento (codigo, fechadeelaboracion, fechadevencimiento, fechadevencimientovar,
				        saldo, cargo, abono, fk_tipo, fk_cuenta, referencia)
				        values (%s, '%s', '%s', '%s', %s, %s, 0, 2, %s, '%s')
				        """ % (codigodocumento, fechadeventa, fechadeventa, fechadeventa, resto, resto,
				               cuenta, referenciarap)
					todook, trash = self.QueryUpdateRecord(self.PreparaQuery(query), conexion = r_cn)
					if not todook:
						Mensajes().Info(self, u"� No se gener� el documento %s !" \
					                        % codigodocumento, u"Notifique a Sistemas")
					else:
						cu = r_cn.cursor()
						cu.execute("select max(codigo) + 1 from movimiento")
						row = fetchone(cu)
						codigomovimiento = int(row[0])
						cu.close()
						query = """
					        insert into movimiento (codigo, cantidad, fecha, relaciondepago, cargoabono,
					        fk_tipo, fk_documento)
					        values (%s, %s, '%s', '1/1', 'C', 2, %s)
					        """ % (codigomovimiento, resto, fechadeventa, codigodocumento)
						todook, trash = self.QueryUpdateRecord(self.PreparaQuery(query), conexion = r_cn)
						if not todook:
							Mensajes().Info(self, u"� No se gener� el movimiento %s !" \
						                        % codigomovimiento, u"Notifique a Sistemas")
							
					query = """
					update gixprospectos set cuenta = %s, fechacierre = convert(varchar(10), getdate(), 111)
					where idprospecto = %s
					""" % (cuenta, prospecto)
					todook, trash = self.QueryUpdateRecord(self.PreparaQuery(query), conexion = r_cn)
					if not todook:
						Mensajes().Info(self, u"� No se actualiz� el prospecto %s cuenta %s !" \
					                        % (prospecto, cuenta), u"Notifique a Sistemas")
					
					self.FillOfertasCompra()
					if Mensajes().YesNo(self, u"� Desea imprimir la oferta de compra ?", u"Confirmaci�n"):
						self.ImprimeOfertaCompra()
						
	def OnImprimeOfertaCompra(self, evt):
		self.ImprimeOfertaCompra()
					
	def ImprimeOfertaCompra(self):
		try:
			pisa
		except:
			Mensajes().Info(self, u"� Por favor instale el m�dulo pisa !", u"Aviso")
			return
		try:
			gridcontenthtml = self.GetHtmlOferta()
			if gridcontenthtml:
				wx.BeginBusyCursor()
				archivo = self.GetPdfFileName("oferta")
				gridcontenthtml = gridcontenthtml.encode("utf-8")
				pdf = pisa.CreatePDF(cStringIO.StringIO(gridcontenthtml), file(archivo, "wb"))
				if not pdf.err:
					try:
						pdf.dest.close()
					except:
						warnings.warn("<<pdf.dest.close() no se pudo.>>")
					try:
						os.startfile(str(archivo))
					except:
						os.system("open %s" % archivo)
				wx.EndBusyCursor()
			else:
				Mensajes().Info(self, u"� No se encontr� informaci�n referente a la oferta !", u"Atenci�n")
		except:
			wx.EndBusyCursor()
			Mensajes().Info(self, u"� Se presento un problema al generar la oferta !", u"Atenci�n")
		
	def GetHtmlOferta(self, consecutivorecibo = 0):
		query = """
		select convert(varchar(10), o.fecha_oferta, 103), e.razonsocial, c.nombre, c.rfc, c.imss, c.domicilio,
		c.telefonocasa, d.descripcion, d.localizacion, d.estado, o.precio, o.monto_credito, o.apartado
		from ofertas_compra o
		join cliente c on o.cliente = c.codigo
		join empresa e on %s = e.codigo
		join desarrollo d on %s = d.codigo
		where o.fk_etapa = %s and o.oferta = %s
		""" % (self.empresa, self.desarrollo, self.etapa, self.oferta)
		cu = r_cn.cursor()
		sql = self.PreparaQuery(query)
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row is not None:
			meses = ("", "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto",
			         "Septiembre", "Octubre", "Noviembre", "Diciembre")
			dia, mes, ano = row[0].split("/")
			fechaoferta = "%s de %s del %s." % (dia, meses[int(mes)], ano)
			empresa = self.GetString(row[1])
			cliente = self.GetString(row[2]); rfc = self.GetString(row[3]); imss = self.GetString(row[4])
			domicilio = self.GetString(row[5]); telefono = self.GetString(row[6])
			desarrollo = self.GetString(row[7])
			localizacion = self.GetString(row[8]); estado = self.GetString(row[9])
			precio = float(row[10])
			precioprt = amount_and_cents_with_commas(precio); precioletra = c2p(precio).texto()
			monto_credito = float(row[11])
			monto_creditoprt = amount_and_cents_with_commas(monto_credito); monto_creditoletra = c2p(monto_credito).texto()
			apartado = float(row[12])
			apartadoprt = amount_and_cents_with_commas(apartado); apartadoletra = c2p(apartado).texto()
			
			br = ""
			if wx.Platform == '__WXMSW__':
			        br = "<br>"
			
			header = u"""
			<big><big><big>
			<div style="text-align: center;">
			<span style="font-family: Arial Bold;">OFERTA DE COMPRA - (%s)<br></span>%s
			</big>
			<div style="text-align: left;">
			<span style="font-family: Arial Bold;"><br></span>
			<big>
			<div style="text-align: left;">
			<div style="text-align: right;">
			<span style="font-family: Arial Bold;">
			<span style="font-family: Arial;">
			<span style="font-weight: bold;"><small>Guadalajara,
			Jalisco a&nbsp;%s</small></span></span></span><br>
			</div>
			<span style="font-family: Arial Bold;">
			<span style="font-family: Arial;">
			<span style="font-family: Arial;"></span></span></span>
			</div>
			<span style="font-family: Arial Bold;">
			<span style="font-family: Arial;">
			<span style="font-family: Arial;"><small>
			<span style="font-weight: bold;">%s<br>PRESENTE<br><br></big>
			</span></small></span></span></span>
			<div style="text-align: left;">
			<span style="font-family: Arial Bold;"><small>
			<span style="font-family: Arial;">Yo, el(la) Sr.(a) <span
			style="font-weight: bold;">%s</span>
			cuento con <span style="font-weight: bold;">R.F.C.%s</span>,
			con <span style="font-weight: bold;">N.S.S.%s</span>
			y con domicilio ubicado en <span style="font-weight: bold;">%s</span>
			con el n�mero de tel�fono: <span style="font-weight: bold;">%s</span>.
			Por esta medio, acudo de manera unilateral, para que se me tome en
			cuenta como interesado en adquirir la propiedad de alguna de las
			viviendas que est�n ofertando en el conjunto habitacional denominado <span
			 style="font-weight: bold;">%s</span>,
			ubicado en el municipio de <span style="font-weight: bold;">%s,
			%s</span>, que ser� adquirida en su momento mediante cr�dito
			del INFONAVIT, Sociedad Hipotecaria Federal, FOVISSSTE, Pensiones del
			Estado, con financiamiento de alguna otra instituci�n financiera o con
			recursos propios.<br>
			<br>
			Asimismo manifiesto conocer y estar de acuerdo que a la fecha el precio
			de la vivienda arriba mencionada es de: <span
			 style="font-weight: bold;">$%s (%s)</span>
			mismo que se actualizar� hasta la fecha en que se formalice la presente
			oferta mediante la firma de escritura publica correspondiente, de
			conformidad con los factores y pol�tica propias de los esquemas del
			cr�dito mediante el cual se formalizar� la operaci�n. Manifestando en
			este acto mi total conformidad a lo expresado en este esquema de
			actualizaci�n de precio.<br>
			<br>
			De la misma manera, acepto conocer que la formalizaci�n de la presente
			oferta, esta sujeta al otorgamiento en mi favor del cr�dito por parte
			de la instituci�n de que se trate y ser� usado �nicamente para el pago
			del valor de la vivienda. Estoy de acuerdo en que al d�a de hoy el
			monto del cr�dito al que tengo derecho es de <span
			 style="font-weight: bold;">$%s (%s)</span>.
			Mismo que al igual que el valor de la vivienda se actualizar� hasta el
			d�a de la escritura publica correspondiente. Adem�s, me comprometo a
			cubrir la diferencia existente, en caso de que el monto del cr�dito que
			me sea autorizado sea inferior al valor de la vivienda, aceptando que
			la entrega de la vivienda ser� hasta que el monto de mi adeudo sea
			totalmente liquidado; a�n cuando haya firmado la escritura de la
			vivienda, excepto si se me autoriz� un convenio de pago en caso de
			existir diferencia, el cual deber� estar firmado y al corriente en pagos.<br>
			<br>
			Que conste en la presente que conozco los requisitos para la obtenci�n
			de mi cr�dito y manifiesto que la instituci�n que me otorgar� el
			cr�dito es la �nica responsable en los tiempos y en los requisitos para
			el tr�mite, aceptando la cancelaci�n de la presente oferta en caso de
			no verme favorecido(a) con la aprobaci�n del cr�dito correspondiente.<br>
			<br>
			La presente oferta de compra la respaldo con la cantidad de <span
			 style="font-weight: bold;">$%s (%s)</span>
			mismos que se toman en cuenta en el valor de la vivienda, manifestando
			estar de acuerdo que en caso de que se cancele la presente operaci�n se
			aplicar� como pena convencional la cantidad de <span
			 style="font-weight: bold;">$%s (%s)</span>,
			sin importar la raz�n de la cancelaci�n.<br>
			<br>
			Agradezco su atenci�n a la presente, manifest�ndome a sus apreciables
			�rdenes, quedando en espera de noticias de su parte.<br>
			<br>
			</span></small></span>
			<div style="text-align: center;"><span
			 style="font-family: Arial Bold;"><small><span
			 style="font-family: Arial;"><span
			 style="font-weight: bold;">Muy atentamente,<br>
			<br>
			Firma<br>
			%s<br>
			</span></span></small></span><span
			 style="font-family: Arial Bold;"><small><span
			 style="font-family: Arial;"></span></small></span></div>
			<div style="text-align: center;"><span
			 style="font-family: Arial Bold;"><span
			 style="font-weight: bold;"></span><small><span
			 style="font-family: Arial;"></span></small></span><span
			 style="font-family: Arial Bold;"><small><span
			 style="font-family: Arial;"></span></small></span></div>
			<span style="font-family: Arial Bold;"></span></div>
			<span style="font-family: Arial Bold;"></span></div>
			</div>
			</big></big>
			""" % (self.oferta, br, fechaoferta, empresa, cliente, rfc, imss, domicilio, telefono, desarrollo,
			       localizacion, estado, precioprt, precioletra, monto_creditoprt, monto_creditoletra,
			       apartadoprt, apartadoletra, apartadoprt, apartadoletra, cliente)
			
			html = '<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /></head><body>' + \
			     header + '</body></html>'
			
			return html
		else:
			return ""
		
	def OnCaracteristicas(self, evt):
		if self.oferta > 0:
			query = """
			select e.descripcion, p.cuenta, convert(varchar(10), p.fecha_oferta, 103),
			case when p.fecha_asignacion is null then 'null' else convert(varchar(10), p.fecha_asignacion, 103) end,
			isnull(i.iden2, ''), isnull(i.iden1, ''), p.fk_preciosetapaasignacion, p.precioasignacion,
			p.fk_preciosetapaoferta, p.preciooferta, convert(varchar(10), o.fecha_asignacion, 103),
			c.fk_inmueble, m.iden2, m.iden1, p.inmueble, isnull(r.idprospecto, 0), c.fk_cliente, t.nombre
			from gixpreciosetapaofertaasignacion p
			join etapa e on e.codigo = p.fk_etapa
			left join inmueble i on i.codigo = p.inmueble
			join ofertas_compra o on o.fk_etapa = p.fk_etapa and o.oferta = p.oferta
			join cuenta c on c.codigo = p.cuenta
			join inmueble m on m.codigo = c.fk_inmueble
			left join gixprospectos r on r.cuenta = c.codigo
			join cliente t on t.codigo = c.fk_cliente
			where p.fk_etapa = %s and p.oferta = %s
			""" % (self.etapa, self.oferta)
			cu = r_cn.cursor()
			cu.execute(self.PreparaQuery(query))
			row = fetchone(cu)
			cu.close()
			if row is not None:
				dlg = GixOfertasDeCompraFunc5(self, etapa = self.etapa, oferta = self.oferta, row = row)
				dlg.CenterOnParent()
				dlg.ShowModal()
				self.SetFocus()
			else:
				Mensajes().Info(self, u"La oferta %s no tiene caracter�sticas del inmueble.\n\n" \
					        u"Tal vez la oferta no tenga inmueble asignado\n" \
					        u"o se haya elaborado antes del 28/10/2011.\n\n" \
					        u"En caso de que la oferta de compra se haya\n" \
					        u"elaborado antes del 28/10/2011\n" \
					        u"��� POR FAVOR NOTIFICALO A ELI !!!" % self.oferta, u"Atenci�n %s" % self.usuario)
		else:
			Mensajes().Info(self, u"� Seleccione una oferta !", u"Atenci�n")

	def OnElegirProspecto(self, evt):
		cu = r_cn.cursor()
		cu.execute(str("select count(*) from gixprospectos where fechacierre is null and congelado <> 1"))
		row = fetchone(cu)
		cu.close()
		if row[0] > 0:
			dlg = GixOfertasDeCompraFunc3(self, prospectoelegido = self.ProspectoElegido)
			dlg.CenterOnParent()
			dlg.ShowModal()
		else:
			Mensajes().Info(self, u"� No se encontraron prospectos !", u"Atenci�n")
			
	def ProspectoElegido(self, codigoprospecto):
		cu = r_cn.cursor()
		query = """
		select rtrim(ltrim(p.apellidopaterno1)) + ' ' + rtrim(ltrim(p.apellidomaterno1)) + ' ' + rtrim(ltrim(p.nombre1)),
		rtrim(ltrim(p.afiliacionimss)), p.idvendedor, v.nombre, p.idgerente, g.nombre from gixprospectos p
		join vendedor v on p.idvendedor = v.codigo
		join  gerentesventas g on p.idgerente = g.codigo
		where p.idprospecto = %s
		""" % codigoprospecto
		sql = self.PreparaQuery(query)
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1PROSPECTO).SetValue(str(codigoprospecto))
		self.GetControl(ID_TEXTOFERTASCOMPRAFUNC1PROSPECTO).SetLabel(self.GetString(row[0]))
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1PROSPECTOIMSS).SetValue(self.GetString(row[1]))
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1PROSPECTOVENDEDOR).SetValue("%s - %s" % (int(row[2]), self.GetString(row[3])))
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1PROSPECTOGERENTE).SetValue("%s - %s" % (int(row[4]), self.GetString(row[5])))
		self.afiliacionimss = self.GetString(row[1])
		self.idvendedor = int(row[2])
		
	def ObtenerReferenciasRap(self, codigocliente):
		control = self.GetControl(ID_COMBOOFERTASCOMPRAFUNC1REFERENCIARAP)
		control.Enable(False); control.Show(False); control.Clear()
		cu = r_cn.cursor()
		cu.execute(str("select referencia from referencias_rap where cliente = %s order by referencia" % codigocliente))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(self.GetString(row[0]), int(row[0]))
				
			control.SetSelection(0)
		else:
			control.SetSelection(SetChoiceIndex())
				
		control.Show(True)
		control.Enable(True)
		
	def ObtenerReactivacionOferta(self, codigocliente):
		control = self.GetControl(ID_CHOICEOFERTASCOMPRAFUNC1REACTIVACIONOFERTA)
		control.Enable(False); control.Show(False); control.Clear()
		query = """
		select o.fk_etapa, e.descripcion, o.oferta from ofertas_compra o join etapa e on o.fk_etapa = e.codigo
		where o.cliente = %s and o.cancelada <> 0 order by o.fk_etapa desc, o.oferta
		""" % codigocliente
		sql = self.PreparaQuery(query)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		if rows:
			for row in rows:
				query = """
				select count(*) from ofertas_compra
				where reactivacion_cliente_etapa = %s and reactivacion_cliente_oferta = %s
				""" % (int(row[0]), int(row[2]))
				sql = self.PreparaQuery(query)
				cu.execute(str(sql))
				contador = fetchone(cu)
				if int(contador[0]) == 0:
					control.Append("Etapa: %s-%s  Oferta: %s" %
					               (int(row[0]), self.GetString(row[1]), int(row[2])), "%s-%s" %
					               (int(row[0]), int(row[2])))
				
		cu.close()
		control.SetSelection(SetChoiceIndex())
		control.Show(True)
		control.Enable(True)
		
	def OnElegirCliente(self, evt):
		cu = r_cn.cursor()
		cu.execute(str("select count(*) from CLIENTE where codigo not in (select distinct fk_cliente from cuenta)"))
		row = fetchone(cu)
		cu.close()
		if row[0] > 0:
			dlg = GixOfertasDeCompraFunc2(self, clienteelegido = self.ClienteElegido)
			dlg.CenterOnParent()
			dlg.ShowModal()
		else:
			Mensajes().Info(self, u"� No se encontraron clientes !", u"Atenci�n")
			
	def ClienteElegido(self, codigocliente, nombrecliente):
		cu = r_cn.cursor()
		query = """
		select isnull(imss, ''), isnull(rfc, ''), isnull(telefonocasa, ''), isnull(domicilio, '')
		from cliente where codigo = %s
		""" % codigocliente
		sql = self.PreparaQuery(query)
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1CLIENTE).SetValue(str(codigocliente))
		self.GetControl(ID_TEXTOFERTASCOMPRAFUNC1CLIENTE).SetLabel(nombrecliente)
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1IMSS).SetValue(self.GetString(row[0]))
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1RFC).SetValue(self.GetString(row[1]))
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1TELEFONO).SetValue(self.GetString(row[2]))
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1DOMICILIO).SetValue(self.GetString(row[3]))
		self.ObtenerReferenciasRap(codigocliente)
		self.GetControl(ID_COMBOOFERTASCOMPRAFUNC1REFERENCIARAP).SetSelection(SetChoiceIndex()) # para no elegir referencia rap
		self.ObtenerReactivacionOferta(codigocliente)
		
	def OnElegirSubvendedor(self, evt):
		cu = r_cn.cursor()
		cu.execute(str("select count(*) from vendedor where desactivado <> 1 and es_subvendedor = 1 and codigo not in (458,459,460,474)"))
		row = fetchone(cu)
		cu.close()
		if row[0] > 0:
			dlg = GixOfertasDeCompraFunc4(self, subvendedorelegido = self.SubvendedorElegido)
			dlg.CenterOnParent()
			dlg.ShowModal()
		else:
			Mensajes().Info(self, u"� No se encontraron prospectos !", u"Atenci�n")
			
	def SubvendedorElegido(self, codigosubvendedor):
		cu = r_cn.cursor()
		query = """
		select rtrim(ltrim(v.nombre)), isnull(p.porcentaje, 0), isnull(pc.porcentaje, 0) from vendedor v
		left join porcentaje_comision p on v.codigo = p.fk_vendedor and p.fk_desarrollo = %s
		left join porcentaje_comision pc on v.vendedor = pc.fk_vendedor and pc.fk_desarrollo = %s
		where v.codigo = %s
		""" % (self.desarrollo, self.desarrollo, codigosubvendedor)
		sql = self.PreparaQuery(query)
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1SUBVENDEDOR).SetValue(str(codigosubvendedor))
		self.GetControl(ID_TEXTOFERTASCOMPRAFUNC1SUBVENDEDOR).SetLabel(self.GetString(row[0]))
		if float(row[1]):
			self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1COMISION).SetValue("%s%s" % (float(row[1]), "%"))
		else:
			self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1COMISION).SetValue("")

		self.comisionvendedor = 0
		if float(row[2]):
			self.comisionvendedor = float(row[2])
			
		self.GetControl(ID_TEXTCTRLOFERTASCOMPRAFUNC1MONTOCREDITO).SetFocus()
		
	def OnLimpiarReactivacion(self, evt):
		self.GetControl(ID_CHOICEOFERTASCOMPRAFUNC1REACTIVACIONOFERTA).SetSelection(SetChoiceIndex())
		
class GixFirmantes(wx.Frame, GixBase):
	dbtable = "gixfirmantes"
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize, style = wx.DEFAULT_FRAME_STYLE,
				 usuario = None):
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		self.parent = parent
		self.usuario = usuario
		self.textevent = True
		self.datointerno = ""
		self.NewFlag = False
		
		self.mb = FIRMANTEMenuBarFunc()
		self.SetMenuBar(self.mb)
		self.tb = self.CreateToolBar(wx.TB_HORIZONTAL | wx.NO_BORDER | wx.TB_FLAT) # | wx.TB_TEXT )
		FIRMANTEToolBarFunc(self.tb)
		panel = wx.Panel(self, -1)
		FirmantesFuncion(panel, True, True)
		
		self.Bind(wx.EVT_MENU, self.OnAgregar, id = ID_MENUFIRMANTEARCHIVOAGREGAR)
		self.Bind(wx.EVT_MENU, self.OnEliminar, id = ID_MENUFIRMANTEARCHIVOELIMINAR)
		self.Bind(wx.EVT_MENU, self.OnGuardar, id = ID_MENUFIRMANTEARCHIVOGUARDAR)
		self.Bind(wx.EVT_MENU, self.OnSalir, id = ID_MENUFIRMANTEARCHIVOSALIR)
		self.Bind(wx.EVT_TOOL, self.OnAgregar, id = ID_TOOLFIRMANTEAGREGAR)
		self.Bind(wx.EVT_TOOL, self.OnEliminar, id = ID_TOOLFIRMANTEELIMINAR)
		self.Bind(wx.EVT_TOOL, self.OnGuardar, id = ID_TOOLFIRMANTEGUARDAR)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnLCtrl, id = ID_LISTCTRLFIRMANTES)
		self.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.OnRightClick, id = ID_LISTCTRLFIRMANTES)
		wx.EVT_CLOSE(self, self.OnSalir)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLFIRMANTENOMBRE)
		self.GetControl(ID_TEXTCTRLFIRMANTENOMBRE).SetMaxLength(50)
		wx.EVT_RADIOBOX(self, ID_RADIOBOXFIRMANTESESTATUS, self.OnEstatus)
		
		anchos = [-1, 130, 80]
		self.CreateStatusBar(3)
		self.SetStatusWidths(anchos)
		self.SetStatusText(u"Recursos Financieros", 1)
		self.SetStatusText(u"Firmantes", 2)
		
		if wx.Platform == '__WXMSW__':
			self.GetControl(ID_LISTCTRLFIRMANTES).SetSize(wx.Size(350, 300))
			self.GetControl(ID_NOTEBOOKFIRMANTES).SetSize(wx.Size(400, 300))
		else:
			self.GetControl(ID_LISTCTRLFIRMANTES).SetSize(wx.Size(350, 350))
			self.GetControl(ID_NOTEBOOKFIRMANTES).SetSize(wx.Size(400, 350))
		
		self.currentitem, self.originalnombre, self.originalestatus = "","",""
		self.idfirmante, self.agregar = 0,0
		self.FillListCtrl()
		
	def OnSalir(self, event):
		self.Destroy()
		
	def OnRightClick(self, event):
		self.idregistryblog = self.idfirmante
		self.idtitleblog = "Registro"
		if not hasattr(self, "ID_VIEWBLOG"):
			ID_VIEWBLOG = wx.NewId(); ID_ADDBLOG = wx.NewId()
			self.Bind(wx.EVT_MENU, self.OnViewBlog, id = ID_VIEWBLOG)
			self.Bind(wx.EVT_MENU, self.OnAddBlog, id = ID_ADDBLOG)
		popup = wx.Menu()
		popup.Append(ID_VIEWBLOG, u"Consultar el Blog del %s %s" % (self.idtitleblog, self.idregistryblog))
		popup.Append(ID_ADDBLOG, u"Participar en el Blog...")
		self.PopupMenu(popup)
		popup.Destroy()
		
	def OnViewBlog(self, event):
		goal = ((90, u"Fecha"), (90, u"Hora"), (100, u"Usuario"), (300, u"Blog"))
		query = """
		select convert(varchar(50), FechaCaptura, 103), convert(varchar(50), FechaCaptura, 108),
		UsuarioCaptura, ContenidoText from Blogs
		where BlogGUID = '%s' order by FechaCaptura desc;
		select count(*) from Blogs where BlogGUID = '%s'
		""" % (self.BlogGUID, self.BlogGUID)
		title = u"Consultando el Blog del %s %s" % (self.idtitleblog, self.idregistryblog)
		table = "Blogs"
		frame = GixFrameCatalogo(self, -1, title, wx.Point(20,20), wx.Size(800,600), 
								 wx.DEFAULT_FRAME_STYLE, None, None, None, table, goal, query,
								 gridsize = [680,350], color = "AQUAMARINE")
		frame.Centre(wx.BOTH)
		frame.Show(True)
		
	def OnAddBlog(self, event):
		blog = wx.TextEntryDialog(self, u"Digite", u"Participando en el Blog del %s %s"
								  % (self.idtitleblog, self.idregistryblog),
								  defaultValue = "", style = wx.OK | wx.TE_MULTILINE)
		blog.SetSize(wx.Size(400,300))
		blog.Centre(wx.BOTH)
		blog.ShowModal()
		comment = blog.GetValue()
		blog.Destroy()
		if comment:
			sql = """
			insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension)
			values ('%s', getdate(), '%s', '%s', '%s', '%s')
			""" % (self.BlogGUID, self.usuario, comment, "", "")
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"� Problemas al actualizar el blog !", u"Atenci�n")
				
	def OnAgregar(self, event):
		self.agregar, self.NewFlag, self.FillingARecord = True, True, True
		self.GetControl(ID_TEXTCTRLFIRMANTEID).SetValue("")
		self.GetControl(ID_TEXTCTRLFIRMANTEID).Enable(True)
		self.GetControl(ID_TEXTCTRLFIRMANTENOMBRE).SetValue("")
		self.GetControl(ID_TEXTCTRLFIRMANTENOMBRE).SetBackgroundColour(wx.WHITE)
		self.GetControl(ID_TEXTCTRLFIRMANTENOMBRE).Enable(True)
		self.GetControl(ID_TEXTCTRLFIRMANTENOMBRE).Refresh()
		self.GetControl(ID_RADIOBOXFIRMANTESESTATUS).SetStringSelection("Activado")
		self.GetControl(ID_RADIOBOXFIRMANTESESTATUS).SetOwnBackgroundColour(wx.NullColour)
		self.GetControl(ID_RADIOBOXFIRMANTESESTATUS).Enable(True)
		self.GetControl(ID_RADIOBOXFIRMANTESESTATUS).Refresh()
		self.MenuSetter(ID_MENUFIRMANTEARCHIVOAGREGAR, False)
		self.MenuSetter(ID_MENUFIRMANTEARCHIVOELIMINAR, False)
		self.MenuSetter(ID_MENUFIRMANTEARCHIVOGUARDAR, True)
		self.tb.EnableTool(ID_TOOLFIRMANTEAGREGAR, False)
		self.tb.EnableTool(ID_TOOLFIRMANTEELIMINAR, False)
		self.tb.EnableTool(ID_TOOLFIRMANTEGUARDAR, True)
		self.FillingARecord = False
		self.originalnombre, self.originalestatus = "", ""
		self.GetControl(ID_TEXTCTRLFIRMANTENOMBRE).SetFocus()
		
	def OnEliminar(self, event):
		if self.idfirmante == "":
			Mensajes().Info(self, u"No se ha especificado el Registro a Eliminar", u"Atenci�n")
			return
		sql = "select count(*) from gixfirmantesbancos where idfirmante = %s" % self.idfirmante
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if int(row[0]) > 0:
			Mensajes().Info(self,u"Sucedi� algo que impidi� eliminar este registro.\n\n" \
							u"Esto se debe a que hay %s cuentas que\ndependen de este firmante."
							% int(row[0]), u"Atenci�n")
		else:
			if Mensajes().YesNo(self,u"� Desea realmente eliminar el registro %s ?"
								% self.idfirmante, u"Confirmaci�n"):
				if self.DeleteRecord():
					self.DeleteBlog()
					self.FillListCtrl()
					self.FillingARecord = True
					self.GetControl(ID_TEXTCTRLFIRMANTEID).SetValue("")
					self.GetControl(ID_TEXTCTRLFIRMANTENOMBRE).SetValue("")
					self.GetControl(ID_RADIOBOXFIRMANTESESTATUS).SetStringSelection("Activado")
					self.FillingARecord = False
					#sql = """
					#insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension)
					#values ('%s', getdate(), '%s', '%s', '%s', '%s')
					#""" % (self.BlogGUID, self.usuario, u"Eliminaci�n del Registro", "", "")
					#if not self.QueryUpdateRecord(sql):
						#Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
					
		event.Skip()
				
	def DeleteRecord(self):
		sql = "delete from %s where idfirmante = %s" % (self.dbtable, self.idfirmante) 
		try:
			cursor = r_cn.cursor()
			cursor.execute(str(sql))
			cursor.close()
			r_cn.commit()
			return True
		except:
			r_cn.rollback()
			Mensajes().Info(self,u"Sucedi� algo que impidi� eliminar este registro.\n" \
							u"Quiz� se deba a que hay otra informaci�n\nque depende de este registro.\n%s"
							% sql, u"Atenci�n")
			return False
		
	def DeleteBlog(self):
		sql = "delete from blogs where BlogGUID = '%s'" % (self.BlogGUID)
		try:
			cursor = r_cn.cursor()
			cursor.execute(str(sql))
			cursor.close()
			r_cn.commit()
		except:
			r_cn.rollback()
			Mensajes().Info(self,u"Sucedi� algo que impidi� eliminar el historial del blog del registro." \
							% sql, u"Atenci�n")
			
	def OnText(self, event):
		self.ctrlactual = event.GetId()
		valor = self.GetControl(self.ctrlactual).GetValue().encode("iso8859-1")
		valornum = str(valor).replace('.','')
		if valor and not valornum.isdigit():
			if not str(valor).isupper():
				if self.textevent:
					self.textevent = False
					self.GetControl(self.ctrlactual).SetValue(str(valor).upper())
				lastposition = self.GetControl(self.ctrlactual).GetLastPosition()
				self.GetControl(self.ctrlactual).SetInsertionPoint(lastposition)
				
		self.Text()
	
	def Text(self, VengodelaLista = False, texto = True):
		self.textevent = True
		control = self.GetControl(ID_TEXTCTRLFIRMANTENOMBRE)
		valor = control.GetValue().strip()
		if valor == "" and not self.FillingARecord and not self.NewFlag:
			self.NewFlag = True
			if not VengodelaLista:
				Mensajes().Info(self, u"� No debe quedar el nombre en blanco !", u"Atenci�n")
				return False
			
		if not self.FillingARecord:
			self.RevisaCambios()
			
		return True
			
	def RevisaCambios(self, cambio = False):
		control = self.GetControl(ID_TEXTCTRLFIRMANTENOMBRE)
		if control.GetValue() <> self.originalnombre:
			control.SetBackgroundColour(wx.CYAN)
			cambio = True
		else:
			control.SetBackgroundColour(wx.WHITE)
		control.Refresh()
		
		control = self.GetControl(ID_RADIOBOXFIRMANTESESTATUS)
		if control.GetStringSelection() <> self.originalestatus:
			control.SetOwnBackgroundColour(wx.CYAN)
			cambio = True
		else:
			control.SetOwnBackgroundColour(wx.NullColour)
		control.Refresh()
		
		if cambio:
			self.MenuSetter(ID_MENUFIRMANTEARCHIVOAGREGAR, False)
			self.MenuSetter(ID_MENUFIRMANTEARCHIVOELIMINAR, False)
			self.MenuSetter(ID_MENUFIRMANTEARCHIVOGUARDAR, True)
			self.tb.EnableTool(ID_TOOLFIRMANTEAGREGAR, False)
			self.tb.EnableTool(ID_TOOLFIRMANTEELIMINAR, False)
			self.tb.EnableTool(ID_TOOLFIRMANTEGUARDAR, True)
		else:
			self.MenuSetter(ID_MENUFIRMANTEARCHIVOAGREGAR, True)
			self.MenuSetter(ID_MENUFIRMANTEARCHIVOELIMINAR, True)
			self.MenuSetter(ID_MENUFIRMANTEARCHIVOGUARDAR, False)
			self.tb.EnableTool(ID_TOOLFIRMANTEAGREGAR, True)
			self.tb.EnableTool(ID_TOOLFIRMANTEELIMINAR, True)
			self.tb.EnableTool(ID_TOOLFIRMANTEGUARDAR, False)
	
	def OnEstatus(self, event):
		if not self.FillingARecord:
			self.RevisaCambios()
	
	def OnLCtrl(self, event):
		self.agregar = False
		self.FillingARecord = True
		lctrl = self.GetControl(ID_LISTCTRLFIRMANTES)
		self.currentitem = event.m_itemIndex
		datointerno = lctrl.GetItem(self.currentitem, 0).GetText()
		self.datointerno = int(datointerno)
		self.LCtrl()
		self.FillingARecord = False
		event.Skip()

	def LCtrl(self, onguardar = False):
		cambio = False
		if self.tb.GetToolEnabled(ID_TOOLFIRMANTEGUARDAR):
			if self.GetControl(ID_TEXTCTRLFIRMANTENOMBRE).GetValue() <> self.originalnombre:
				cambio = True
			elif self.GetControl(ID_RADIOBOXFIRMANTESESTATUS).GetStringSelection() <> self.originalestatus:
				cambio =True
				
		if cambio:
			self.NewFlag = False
			self.Text(True)
			if not self.NewFlag:
				if onguardar:
					if Mensajes().YesNo(self,u"� Desea realmente grabar la informaci�n ?", u"Confirmaci�n"):
						self.GuardarDetalle(onguardar)
				else:
					if Mensajes().YesNo(self,u"Algunos datos han cambiado\n\n� Desea ud. grabarlos ?", u"Confirmaci�n"):
						self.GuardarDetalle()
					
				self.GetControl(ID_TEXTCTRLFIRMANTENOMBRE).SetBackgroundColour(wx.WHITE)
				self.GetControl(ID_TEXTCTRLFIRMANTENOMBRE).Refresh()
				self.GetControl(ID_RADIOBOXFIRMANTESESTATUS).SetOwnBackgroundColour(wx.NullColour)
				self.GetControl(ID_RADIOBOXFIRMANTESESTATUS).Refresh()
		
		if self.GetRecord(record = self.datointerno):
			self.MenuSetter(ID_MENUFIRMANTEARCHIVOAGREGAR, True)
			self.MenuSetter(ID_MENUFIRMANTEARCHIVOELIMINAR, True)
			self.MenuSetter(ID_MENUFIRMANTEARCHIVOGUARDAR, False)
			self.tb.EnableTool(ID_TOOLFIRMANTEAGREGAR, True)
			self.tb.EnableTool(ID_TOOLFIRMANTEELIMINAR, True)
			self.tb.EnableTool(ID_TOOLFIRMANTEGUARDAR, False)
			self.GetControl(ID_TEXTCTRLFIRMANTEID).Enable(True)
			self.GetControl(ID_TEXTCTRLFIRMANTENOMBRE).Enable(True)
			self.GetControl(ID_RADIOBOXFIRMANTESESTATUS).Enable(True)
			self.editable = True
		else:
			Mensajes().Warn(self, u"Escoja un registro v�lido", u"Atenci�n")
					
	def GetRecord(self, record):
		try:
			self.idfirmante = int(record)
		except:
			return False
		sql = """
		select nombre, estatus, convert(varchar(100), BlogGUID) from %s where idfirmante = %s
		""" % (self.dbtable, self.idfirmante)
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		cursor.close()
		self.nombre = str(row[0])
		if str(row[1]) == "A":
			self.estatus = "Activado"
		else:
			self.estatus = "Desactivado"
		self.BlogGUID = str(row[2])
		self.GetControl(ID_TEXTCTRLFIRMANTEID).SetValue(str(self.idfirmante))
		self.GetControl(ID_TEXTCTRLFIRMANTENOMBRE).SetValue(self.nombre)
		self.GetControl(ID_RADIOBOXFIRMANTESESTATUS).SetStringSelection(self.estatus)
		self.originalnombre = str(row[0])
		if str(row[1]) == "A":
			self.originalestatus = "Activado"
		else:
			self.originalestatus = "Desactivado"
		return True
	
	def GuardarDetalle(self, onguardar = False):
		self.SaveRecord(onguardar)
		self.GetControl(ID_TEXTCTRLFIRMANTEID).Enable(False)
		self.GetControl(ID_TEXTCTRLFIRMANTENOMBRE).Enable(False)
		self.GetControl(ID_RADIOBOXFIRMANTESESTATUS).Enable(False)
	
	def OnGuardar(self, event):
		F, N = self.FillingARecord, self.NewFlag
		self.FillingARecord, self.NewFlag = False, False
		todobien = self.Text()
		self.FillingARecord, self.NewFlag = F, N
		if todobien:
			self.FillingARecord = True
			self.LCtrl(True)
			self.FillingARecord = False
		event.Skip()
		
	def SaveRecord(self, onguardar = False):
		wx.BeginBusyCursor()
		if self.agregar:
			bienGrabado, self.idfirmante = self.AddRecord()
		else:
			bienGrabado = self.UpdateRecord()
		wx.EndBusyCursor()
			
		if bienGrabado:
			lctrl = self.GetControl(ID_LISTCTRLFIRMANTES)
			if self.agregar:
				self.FillListCtrl()
				lctrl.SetItemState(self.ctrlindex, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
				self.GetRecord(record = self.idfirmante)
			else:
				if onguardar:
					self.FillListCtrl()
					lctrl.SetItemState(self.ctrlindex, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
					self.GetRecord(record = self.idfirmante)
				else:
					try:
						self.idfirmante = self.datointerno
						self.FillListCtrl()
						lctrl.SetItemState(self.ctrlindex, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
						self.GetRecord(record = self.idfirmante)
					except:
						pass
		else:
			Mensajes().Info(self, u"� El Registro no fue grabado !", u"Atenci�n")
			
	def UpdateRecord(self, querycancelar = ""):
		nombre = self.GetControl(ID_TEXTCTRLFIRMANTENOMBRE).GetValue()
		status = self.GetControl(ID_RADIOBOXFIRMANTESESTATUS).GetStringSelection()
		if status == "Activado":
			estatus = "A"
		else:
			estatus = "D"
		setListForQuery = "nombre = '%s', estatus = '%s'" % (nombre, estatus)
		sql = "update %s set %s where idfirmante = %s" % (self.dbtable, setListForQuery, self.idfirmante)
		queTal = self.QueryUpdateRecord(sql)
		if queTal:
			contenido = u"Edici�n del registro"
			sql = """
			insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension, Estatus)
			values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
			""" % (self.BlogGUID, self.usuario, contenido, "", "", "")
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
		
		return queTal
	
	def AddRecord(self):
		nombre = self.GetControl(ID_TEXTCTRLFIRMANTENOMBRE).GetValue()
		status = self.GetControl(ID_RADIOBOXFIRMANTESESTATUS).GetStringSelection()
		if status == "Activado":
			estatus = "A"
		else:
			estatus = "D"
		sqlFields = "nombre, estatus"
		sqlValues = "'%s', '%s'" % (nombre, estatus)
		sql = """
		insert into %s (%s) values (%s)
		""" % (self.dbtable, sqlFields, sqlValues) 
		sqlmax = "select max(idfirmante) from %s" % self.dbtable
		queTal, identity =  self.QueryUpdateRecord(sql, sqlmax, True)
		numero = 0
		if queTal:
			if identity is not None:
				numero = identity
			else:
				Mensajes().Info(self, u"Problemas al buscar nuevo firmante.\n\n%s" % sqlmax, u"Atenci�n")
				
			self.GetControl(ID_TEXTCTRLFIRMANTEID).SetValue(str(numero))
			sqly = "select convert(varchar(100), BlogGUID) from %s where idfirmante = %s" % (self.dbtable, numero)
			cursor = r_cn.cursor()
			cursor.execute(str(sqly))
			row = fetchone(cursor)
			if row is not None:
				self.BlogGUID = row[0]
			cursor.close()
			sql = """
			insert into Blogs 
			(BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension, Estatus)
			values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
			""" % (self.BlogGUID, self.usuario, "Alta del Firmante", "", "", "A")
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"Problemas al actualizar el blog.\n\n%s" % sql, u"Atenci�n")

		return queTal, int(numero)
	
	def FillListCtrl(self):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLFIRMANTES)
		lctrl.Enable(False); lctrl.Show(False); lctrl.ClearAll()
		sql = """
		select idfirmante, nombre, estatus from %s order by 2
		""" % self.dbtable
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		fila = 0
		if rows:
			lctrl.InsertColumn(0, u"Id", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"Nombre")
			for row in rows:
				if str(row[2]) == "D":
					if fila %2 != 0: bgcolor = [255,153,153]
					else:            bgcolor = [255,215,215]
				else:
					if fila %2 != 0: bgcolor = [204,204,255]
					else:            bgcolor = [230,230,255]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, str(row[1]))
				lctrl.SetItemData(index, row[0])
				if int(row[0]) == self.idfirmante:
					self.ctrlindex = index
				fila += 1
			lctrl.SetColumnWidth(0, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(1, 500)
		else:
			lctrl.InsertColumn(0, "       No Existen Registros", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 167)
		cu.close()
		self.MenuSetter(ID_MENUFIRMANTEARCHIVOAGREGAR, True)
		self.MenuSetter(ID_MENUFIRMANTEARCHIVOELIMINAR, False)
		self.MenuSetter(ID_MENUFIRMANTEARCHIVOGUARDAR, False)
		self.tb.EnableTool(ID_TOOLFIRMANTEAGREGAR, True)
		self.tb.EnableTool(ID_TOOLFIRMANTEELIMINAR, False)
		self.tb.EnableTool(ID_TOOLFIRMANTEGUARDAR, False)
		self.GetControl(ID_TEXTCTRLFIRMANTEID).Enable(False)
		self.GetControl(ID_TEXTCTRLFIRMANTENOMBRE).Enable(False)
		self.GetControl(ID_RADIOBOXFIRMANTESESTATUS).Enable(False)
		lctrl.Show(True); lctrl.Enable(True)
		self.currentitemlst = []
		self.selecteditems = []
		wx.EndBusyCursor()
		if self.currentitem:
			lctrl.EnsureVisible(self.currentitem)
		salir = True
		return salir, fila
		
class GixGuardias(wx.Frame, GixBase):
	dbtable = "gixguardias"
	DicDatesAndTxt = {ID_BITMAPBUTTONGUARDIAELEGIRFECHAINICIAL : ID_TEXTCTRLGUARDIAFECHAINICIAL,
					  ID_BITMAPBUTTONGUARDIAELEGIRFECHAFINAL : ID_TEXTCTRLGUARDIAFECHAFINAL}
	recurrenciadict = {0:"TODOS LOS DIAS", 1:"ENTRE SEMANA", 2:"LOS FINES DE SEMANA", 3:"LOS LUNES", 4:"LOS MARTES",
					   5:"LOS MIERCOLES", 6:"LOS JUEVES", 7:"LOS VIERNES", 8:"LOS SABADOS", 9:"LOS DOMINGOS"}
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize, style = wx.DEFAULT_FRAME_STYLE,
				 usuario = None):
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		self.parent = parent
		self.usuario = usuario
		self.textevent = True
		self.datointerno = ""
		
		self.mb = GUARDIAMenuBarFunc()
		self.SetMenuBar(self.mb)
		self.tb = self.CreateToolBar(wx.TB_HORIZONTAL | wx.NO_BORDER | wx.TB_FLAT) # | wx.TB_TEXT )
		GUARDIAToolBarFunc(self.tb)
		panel = wx.Panel(self, -1)
		GuardiasFuncion(panel, True, True)
		
		wx.EVT_CLOSE(self, self.OnSalir)
		self.Bind(wx.EVT_MENU, self.OnAgregar, id = ID_MENUGUARDIAARCHIVOAGREGAR)
		self.Bind(wx.EVT_MENU, self.OnEliminar, id = ID_MENUGUARDIAARCHIVOELIMINAR)
		self.Bind(wx.EVT_MENU, self.OnGuardar, id = ID_MENUGUARDIAARCHIVOGUARDAR)
		self.Bind(wx.EVT_MENU, self.OnSalir, id = ID_MENUGUARDIASALIR)
		self.Bind(wx.EVT_TOOL, self.OnAgregar, id = ID_TOOLGUARDIAAGREGAR)
		self.Bind(wx.EVT_TOOL, self.OnEliminar, id = ID_TOOLGUARDIAELIMINAR)
		self.Bind(wx.EVT_TOOL, self.OnGuardar, id = ID_TOOLGUARDIAGUARDAR)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnLCtrl, id = ID_LISTCTRLGUARDIA)
		self.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.OnRightClick, id = ID_LISTCTRLGUARDIA)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLGUARDIADESCRIPCION)
		self.Bind(wx.EVT_CHOICE, self.OnChoice, id = ID_CHOICEGUARDIARECURRENCIA)
		self.Bind(wx.EVT_TEXT, self.OnFecha, id = ID_TEXTCTRLGUARDIAFECHAINICIAL)
		self.Bind(wx.EVT_TEXT, self.OnFecha, id = ID_TEXTCTRLGUARDIAFECHAFINAL)
		for v in self.DicDatesAndTxt.keys():
			self.Bind(wx.EVT_BUTTON, self.OnFechaButton, id = v )
		self.Bind(wx.EVT_BUTTON, self.OnLimpiarFecha, id = ID_BITMAPBUTTONGUARDIALIMPIARFECHAINICIAL)
		self.Bind(wx.EVT_BUTTON, self.OnLimpiarFecha, id = ID_BITMAPBUTTONGUARDIALIMPIARFECHAFINAL)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLGUARDIAHORAINICIAL)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLGUARDIAHORAFINAL)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLGUARDIAINTEGRANTES)
		wx.EVT_RADIOBOX(self, ID_RADIOBOXGUARDIAESTATUS, self.OnEstatus)
		self.GetControl(ID_TEXTCTRLGUARDIADESCRIPCION).SetMaxLength(50)
		self.GetControl(ID_TEXTCTRLGUARDIAHORAINICIAL).SetMaxLength(5)
		self.GetControl(ID_TEXTCTRLGUARDIAHORAFINAL).SetMaxLength(5)
		self.GetControl(ID_TEXTCTRLGUARDIAINTEGRANTES).SetMaxLength(3)
		
		anchos = [-1, 70, 80]
		self.CreateStatusBar(3)
		self.SetStatusWidths(anchos)
		self.SetStatusText(u"Ventas", 1)
		self.SetStatusText(u"Guardias", 2)
		
		if wx.Platform == '__WXMSW__':
			self.GetControl(ID_LISTCTRLGUARDIA).SetSize(wx.Size(480, 520))
			self.GetControl(ID_NOTEBOOKGUARDIA).SetSize(wx.Size(400, 520))
		else:
			self.GetControl(ID_LISTCTRLGUARDIA).SetSize(wx.Size(480, 570))
			self.GetControl(ID_NOTEBOOKGUARDIA).SetSize(wx.Size(400, 570))
		
		self.currentitem, self.originaldescripcion, self.originalrecurrencia = "","",""
		self.originalfechainicial, self.originalfechafinal, self.originalhorainicial = "","",""
		self.originalhorafinal, self.originalintegrantes, self.originalestatus = "","",""
		self.idguardia, self.agregar = 0,0
		self.FillListCtrl()
		
	def OnSalir(self, event):
		self.Destroy()
		
	def OnRightClick(self, event):
		self.idregistryblog = self.idguardia
		self.idtitleblog = "Registro"
		if not hasattr(self, "ID_VIEWBLOG"):
			ID_VIEWBLOG = wx.NewId(); ID_ADDBLOG = wx.NewId()
			self.Bind(wx.EVT_MENU, self.OnViewBlog, id = ID_VIEWBLOG)
			self.Bind(wx.EVT_MENU, self.OnAddBlog, id = ID_ADDBLOG)
		popup = wx.Menu()
		popup.Append(ID_VIEWBLOG, u"Consultar el Blog del %s %s" % (self.idtitleblog, self.idregistryblog))
		popup.Append(ID_ADDBLOG, u"Participar en el Blog...")
		self.PopupMenu(popup)
		popup.Destroy()
		
	def OnViewBlog(self, event):
		goal = ((90, u"Fecha"), (90, u"Hora"), (100, u"Usuario"), (300, u"Blog"))
		query = """
		select convert(varchar(50), FechaCaptura, 103), convert(varchar(50), FechaCaptura, 108),
		UsuarioCaptura, ContenidoText from Blogs
		where BlogGUID = '%s' order by FechaCaptura desc;
		select count(*) from Blogs where BlogGUID = '%s'
		""" % (self.BlogGUID, self.BlogGUID)
		title = u"Consultando el Blog del %s %s" % (self.idtitleblog, self.idregistryblog)
		table = "Blogs"
		frame = GixFrameCatalogo(self, -1, title, wx.Point(20,20), wx.Size(800,600), 
								 wx.DEFAULT_FRAME_STYLE, None, None, None, table, goal, query,
								 gridsize = [680,350], color = "AQUAMARINE")
		frame.Centre(wx.BOTH)
		frame.Show(True)
		
	def OnAddBlog(self, event):
		blog = wx.TextEntryDialog(self, u"Digite", u"Participando en el Blog del %s %s"
								  % (self.idtitleblog, self.idregistryblog),
								  defaultValue = "", style = wx.OK | wx.TE_MULTILINE)
		blog.SetSize(wx.Size(400,300))
		blog.Centre(wx.BOTH)
		blog.ShowModal()
		comment = blog.GetValue()
		blog.Destroy()
		if comment:
			sql = """
			insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension)
			values ('%s', getdate(), '%s', '%s', '%s', '%s')
			""" % (self.BlogGUID, self.usuario, comment, "", "")
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"� Problemas al actualizar el blog !", u"Atenci�n")
				
	def OnChoice(self, event):
		self.RevisaCambios()
	
	def OnAgregar(self, event):
		self.agregar, self.NewFlag, self.FillingARecord = True, True, True
		control = self.GetControl(ID_TEXTCTRLGUARDIAID)
		control.SetValue("")
		control.Enable(True)
		for id, bool in ((ID_TEXTCTRLGUARDIADESCRIPCION, True), (ID_TEXTCTRLGUARDIAFECHAINICIAL, True),
						 (ID_TEXTCTRLGUARDIAFECHAFINAL, False), (ID_TEXTCTRLGUARDIAHORAINICIAL, True),
						 (ID_TEXTCTRLGUARDIAHORAFINAL, True), (ID_TEXTCTRLGUARDIAINTEGRANTES, True)):
			control = self.GetControl(id)
			control.SetValue("")
			control.SetBackgroundColour(wx.WHITE)
			control.Enable(bool)
			control.Refresh()
		self.GetControl(ID_BITMAPBUTTONGUARDIAELEGIRFECHAINICIAL).Enable(True)
		self.GetControl(ID_BITMAPBUTTONGUARDIALIMPIARFECHAINICIAL).Enable(True)
		self.GetControl(ID_BITMAPBUTTONGUARDIAELEGIRFECHAFINAL).Enable(False)
		self.GetControl(ID_BITMAPBUTTONGUARDIALIMPIARFECHAFINAL).Enable(False)
		control = self.GetControl(ID_CHOICEGUARDIARECURRENCIA)
		control.SetSelection(0)
		control.SetBackgroundColour(wx.WHITE)
		control.Enable(True)
		control = self.GetControl(ID_RADIOBOXGUARDIAESTATUS)
		control.SetStringSelection("Activada")
		control.SetOwnBackgroundColour(wx.NullColour)
		control.Enable(True)
		control.Refresh()
		self.MenuSetter(ID_MENUGUARDIAARCHIVOAGREGAR, False)
		self.MenuSetter(ID_MENUGUARDIAARCHIVOELIMINAR, False)
		self.MenuSetter(ID_MENUGUARDIAARCHIVOGUARDAR, True)
		self.tb.EnableTool(ID_TOOLGUARDIAAGREGAR, False)
		self.tb.EnableTool(ID_TOOLGUARDIAELIMINAR, False)
		self.tb.EnableTool(ID_TOOLGUARDIAGUARDAR, True)
		self.FillingARecord = False
		self.originaldescripcion, self.originalrecurrencia = "",""
		self.originalfechainicial, self.originalfechafinal, self.originalhorainicial = "","",""
		self.originalhorafinal, self.originalintegrantes, self.originalestatus = "","",""
		self.GetControl(ID_TEXTCTRLGUARDIADESCRIPCION).SetFocus()
		
	def OnEliminar(self, event):
		if self.idguardia == "":
			Mensajes().Info(self, u"No se ha especificado el Registro a Eliminar", u"Atenci�n")
			return
		sql = "select count(*) from gixguardiasroll where idguardia = %s" % self.idguardia
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if int(row[0]) > 0:
			Mensajes().Info(self,u"Sucedi� algo que impidi� eliminar este registro.\n\n" \
							u"Quiza se deba a que hay otra informaci�n que depende de esta guardia."
							% int(row[0]), u"Atenci�n")
		else:
			if Mensajes().YesNo(self,u"� Desea realmente eliminar el registro %s ?"
								% self.idguardia, u"Confirmaci�n"):
				if self.DeleteRecord():
					self.DeleteBlog()
					self.FillListCtrl()
					self.FillingARecord = True
					self.GetControl(ID_TEXTCTRLGUARDIAID).SetValue("")
					self.GetControl(ID_TEXTCTRLGUARDIADESCRIPCION).SetValue("")
					self.GetControl(ID_CHOICEGUARDIARECURRENCIA).SetSelection(SetChoiceIndex())
					self.GetControl(ID_TEXTCTRLGUARDIAFECHAINICIAL).SetValue("")
					self.GetControl(ID_TEXTCTRLGUARDIAFECHAFINAL).SetValue("")
					self.GetControl(ID_TEXTCTRLGUARDIAHORAINICIAL).SetValue("")
					self.GetControl(ID_TEXTCTRLGUARDIAHORAFINAL).SetValue("")
					self.GetControl(ID_TEXTCTRLGUARDIAINTEGRANTES).SetValue("")
					self.GetControl(ID_RADIOBOXGUARDIAESTATUS).SetStringSelection("Activada")
					self.FillingARecord = False
					#sql = """
					#insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension)
					#values ('%s', getdate(), '%s', '%s', '%s', '%s')
					#""" % (self.BlogGUID, self.usuario, u"Eliminaci�n del Registro", "", "")
					#if not self.QueryUpdateRecord(sql):
						#Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
					
		event.Skip()
				
	def DeleteRecord(self):
		sql = "delete from %s where idguardia = %s" % (self.dbtable, self.idguardia)
		try:
			cursor = r_cn.cursor()
			cursor.execute(str(sql))
			cursor.close()
			r_cn.commit()
			return True
		except:
			r_cn.rollback()
			Mensajes().Info(self,u"Sucedi� algo que impidi� eliminar este registro.\n" \
							u"Quiz� se deba a que hay otra informaci�n\nque depende de este registro.\n%s"
							% sql, u"Atenci�n")
			return False
		
	def DeleteBlog(self):
		sql = "delete from blogs where BlogGUID = '%s'" % (self.BlogGUID)
		try:
			cursor = r_cn.cursor()
			cursor.execute(str(sql))
			cursor.close()
			r_cn.commit()
		except:
			r_cn.rollback()
			Mensajes().Info(self,u"Sucedi� algo que impidi� eliminar el historial del blog del registro." \
							% sql, u"Atenci�n")
			
	def OnLimpiarFecha(self, event):
		id = event.GetId()
		if id == ID_BITMAPBUTTONGUARDIALIMPIARFECHAINICIAL:
			self.GetControl(ID_TEXTCTRLGUARDIAFECHAFINAL).SetValue("")
			self.GetControl(ID_TEXTCTRLGUARDIAFECHAINICIAL).SetValue("")
		else:
			self.GetControl(ID_TEXTCTRLGUARDIAFECHAFINAL).SetValue("")
			
	def HabilitaFechaFinal(self, bool):
		self.GetControl(ID_TEXTGUARDIAFECHAFINAL).Enable(bool)
		#self.GetControl(ID_TEXTCTRLGUARDIAFECHAFINAL).SetValue("")
		self.GetControl(ID_TEXTCTRLGUARDIAFECHAFINAL).Enable(bool)
		self.GetControl(ID_BITMAPBUTTONGUARDIAELEGIRFECHAFINAL).Enable(bool)
		self.GetControl(ID_BITMAPBUTTONGUARDIALIMPIARFECHAFINAL).Enable(bool)
		
	def OnFecha(self, event):
		id = event.GetId()
		if id == ID_TEXTCTRLGUARDIAFECHAINICIAL:
			if self.GetControl(ID_TEXTCTRLGUARDIAFECHAINICIAL).GetValue():
				if self.GetControl(ID_TEXTCTRLGUARDIAFECHAFINAL).GetValue():
					f_dia, f_mes, f_ano = self.GetControl(ID_TEXTCTRLGUARDIAFECHAINICIAL).GetValue().split('/')
					fechainicial = "%04d/%02d/%02d" % (int(f_ano), int(f_mes), int(f_dia))
					f_dia, f_mes, f_ano = self.GetControl(ID_TEXTCTRLGUARDIAFECHAFINAL).GetValue().split('/')
					fechafinal = "%04d/%02d/%02d" % (int(f_ano), int(f_mes), int(f_dia))
					if fechainicial > fechafinal:
						Mensajes().Info(self, u"La fecha inicial no debe ser mayor a la fecha final.", u"Atenci�n")
						self.GetControl(ID_TEXTCTRLGUARDIAFECHAFINAL).SetValue("")
				else:
					self.HabilitaFechaFinal(True)
			else:
				self.HabilitaFechaFinal(False)
		elif self.GetControl(ID_TEXTCTRLGUARDIAFECHAFINAL).GetValue():
			f_dia, f_mes, f_ano = self.GetControl(ID_TEXTCTRLGUARDIAFECHAINICIAL).GetValue().split('/')
			fechainicial = "%04d/%02d/%02d" % (int(f_ano), int(f_mes), int(f_dia))
			f_dia, f_mes, f_ano = self.GetControl(ID_TEXTCTRLGUARDIAFECHAFINAL).GetValue().split('/')
			fechafinal = "%04d/%02d/%02d" % (int(f_ano), int(f_mes), int(f_dia))
			if fechainicial > fechafinal:
				Mensajes().Info(self, u"La fecha inicial no debe ser mayor a la fecha final.", u"Atenci�n")
				self.GetControl(ID_TEXTCTRLGUARDIAFECHAFINAL).SetValue("")
			else:
				self.HabilitaFechaFinal(True)
				
		self.Text()
		
	def OnText(self, event):
		self.ctrlactual = event.GetId()
		valor = self.GetControl(self.ctrlactual).GetValue().encode("iso8859-1")
		valornum = str(valor).replace('.',''); valornum = str(valornum).replace(':', '')
		if valor and not valornum.isdigit():
			if not str(valor).isupper():
				if self.textevent:
					self.textevent = False
					self.GetControl(self.ctrlactual).SetValue(str(valor).upper())
				lastposition = self.GetControl(self.ctrlactual).GetLastPosition()
				self.GetControl(self.ctrlactual).SetInsertionPoint(lastposition)
				
		self.Text()
	
	def Text(self, VengodelaLista = False, texto = True):
		self.textevent = True
		for id in (ID_TEXTCTRLGUARDIADESCRIPCION, ID_TEXTCTRLGUARDIAFECHAINICIAL, ID_TEXTCTRLGUARDIAFECHAFINAL,
				   ID_TEXTCTRLGUARDIAHORAINICIAL, ID_TEXTCTRLGUARDIAHORAFINAL, ID_TEXTCTRLGUARDIAINTEGRANTES):
			control = self.GetControl(id)
			valor = control.GetValue().strip()
			if valor == "" and not self.FillingARecord and not self.NewFlag:
				self.NewFlag = True
				if not VengodelaLista:
					Mensajes().Info(self, u"� No debe quedar ning�n dato en blanco !", u"Atenci�n")
					return False
			
		if not self.FillingARecord:
			self.RevisaCambios()
			
		return True
			
	def RevisaCambios(self, cambioguardia = False, cambiopartida = False):
		for id, original in ((ID_TEXTCTRLGUARDIADESCRIPCION, self.originaldescripcion),
							 (ID_TEXTCTRLGUARDIAFECHAINICIAL, self.originalfechainicial),
							 (ID_TEXTCTRLGUARDIAFECHAFINAL, self.originalfechafinal),
							 (ID_TEXTCTRLGUARDIAHORAINICIAL, self.originalhorainicial),
							 (ID_TEXTCTRLGUARDIAHORAFINAL, self.originalhorafinal),
							 (ID_TEXTCTRLGUARDIAINTEGRANTES, self.originalintegrantes)):
			control = self.GetControl(id)
			valor = control.GetValue()
			if id == ID_TEXTCTRLGUARDIAINTEGRANTES and valor:
				valor = int(control.GetValue())
			else:
				valor = control.GetValue()
			if valor <> original:
				control.SetBackgroundColour(wx.CYAN)
				cambioguardia = True
			else:
				control.SetBackgroundColour(wx.WHITE)
			control.Refresh()
			
		control = self.GetControl(ID_CHOICEGUARDIARECURRENCIA)
		if control.GetSelection() <> self.originalrecurrencia:
			control.SetBackgroundColour(wx.CYAN)
			cambioguardia = True
		else:
			control.SetBackgroundColour(wx.WHITE)
		control.Refresh()
		
		control = self.GetControl(ID_RADIOBOXGUARDIAESTATUS)
		if control.GetStringSelection() <> self.originalestatus:
			control.SetOwnBackgroundColour(wx.CYAN)
			cambioguardia = True
		else:
			control.SetOwnBackgroundColour(wx.NullColour)
		control.Refresh()
		
		if cambioguardia:
			self.MenuSetter(ID_MENUGUARDIAARCHIVOAGREGAR, False)
			self.MenuSetter(ID_MENUGUARDIAARCHIVOELIMINAR, False)
			self.MenuSetter(ID_MENUGUARDIAARCHIVOGUARDAR, True)
			self.tb.EnableTool(ID_TOOLGUARDIAAGREGAR, False)
			self.tb.EnableTool(ID_TOOLGUARDIAELIMINAR, False)
			self.tb.EnableTool(ID_TOOLGUARDIAGUARDAR, True)
		else:
			self.MenuSetter(ID_MENUGUARDIAARCHIVOAGREGAR, True)
			self.MenuSetter(ID_MENUGUARDIAARCHIVOELIMINAR, True)
			self.MenuSetter(ID_MENUGUARDIAARCHIVOGUARDAR, False)
			self.tb.EnableTool(ID_TOOLGUARDIAAGREGAR, True)
			self.tb.EnableTool(ID_TOOLGUARDIAELIMINAR, True)
			self.tb.EnableTool(ID_TOOLGUARDIAGUARDAR, False)
	
	def OnEstatus(self, event):
		if not self.FillingARecord:
			self.RevisaCambios()
	
	def OnLCtrl(self, event):
		self.agregar = False
		self.FillingARecord = True
		lctrl = self.GetControl(ID_LISTCTRLGUARDIA)
		self.currentitem = event.m_itemIndex
		datointerno = lctrl.GetItem(self.currentitem, 0).GetText()
		self.datointerno = int(datointerno)
		self.LCtrl()
		self.FillingARecord = False
		event.Skip()

	def LCtrl(self, onguardar = False):
		cambio = False
		if self.tb.GetToolEnabled(ID_TOOLGUARDIAGUARDAR):
			if self.GetControl(ID_TEXTCTRLGUARDIADESCRIPCION).GetValue() <> self.originaldescripcion:
				cambio = True
			elif self.GetControl(ID_CHOICEGUARDIARECURRENCIA).GetSelection() <> self.originalrecurrencia:
				cambio = True
			elif self.GetControl(ID_TEXTCTRLGUARDIAFECHAINICIAL).GetValue() <> self.originalfechainicial:
				cambio = True
			elif self.GetControl(ID_TEXTCTRLGUARDIAFECHAFINAL).GetValue() <> self.originalfechafinal:
				cambio = True
			elif self.GetControl(ID_TEXTCTRLGUARDIAHORAINICIAL).GetValue() <> self.originalhorainicial:
				cambio = True
			elif self.GetControl(ID_TEXTCTRLGUARDIAHORAFINAL).GetValue() <> self.originalhorafinal:
				cambio = True
			elif self.GetControl(ID_TEXTCTRLGUARDIAINTEGRANTES).GetValue() <> self.originalintegrantes:
				cambio = True
			elif self.GetControl(ID_RADIOBOXGUARDIAESTATUS).GetStringSelection() <> self.originalestatus:
				cambio =True
				
		if cambio:
			self.NewFlag = False
			self.Text(True)
			if not self.NewFlag:
				if onguardar:
					if Mensajes().YesNo(self,u"� Desea realmente grabar la informaci�n ?", u"Confirmaci�n"):
						self.GuardarDetalle(onguardar)
				else:
					if Mensajes().YesNo(self,u"Algunos datos han cambiado\n\n� Desea ud. grabarlos ?", u"Confirmaci�n"):
						self.GuardarDetalle()
					
				for id in (ID_TEXTCTRLGUARDIADESCRIPCION, ID_TEXTCTRLGUARDIAFECHAINICIAL, ID_TEXTCTRLGUARDIAFECHAFINAL,
						   ID_TEXTCTRLGUARDIAHORAINICIAL, ID_TEXTCTRLGUARDIAHORAFINAL, ID_TEXTCTRLGUARDIAINTEGRANTES):
					control = self.GetControl(id)
					control.SetBackgroundColour(wx.WHITE)
					control.Refresh()
					
				self.GetControl(ID_CHOICEGUARDIARECURRENCIA).SetBackgroundColour(wx.WHITE)
				self.GetControl(ID_CHOICEGUARDIARECURRENCIA).Refresh()
				self.GetControl(ID_RADIOBOXGUARDIAESTATUS).SetOwnBackgroundColour(wx.NullColour)
				self.GetControl(ID_RADIOBOXGUARDIAESTATUS).Refresh()
		
		if self.GetRecord(record = self.datointerno):
			self.MenuSetter(ID_MENUGUARDIAARCHIVOAGREGAR, True)
			self.MenuSetter(ID_MENUGUARDIAARCHIVOELIMINAR, True)
			self.MenuSetter(ID_MENUGUARDIAARCHIVOGUARDAR, False)
			self.tb.EnableTool(ID_TOOLGUARDIAAGREGAR, True)
			self.tb.EnableTool(ID_TOOLGUARDIAELIMINAR, True)
			self.tb.EnableTool(ID_TOOLGUARDIAGUARDAR, False)
			self.GetControl(ID_TEXTCTRLGUARDIAID).Enable(True)
			self.GetControl(ID_TEXTCTRLGUARDIADESCRIPCION).Enable(True)
			self.GetControl(ID_CHOICEGUARDIARECURRENCIA).Enable(True)
			self.GetControl(ID_TEXTCTRLGUARDIAFECHAINICIAL).Enable(True)
			self.GetControl(ID_BITMAPBUTTONGUARDIAELEGIRFECHAINICIAL).Enable(True)
			self.GetControl(ID_BITMAPBUTTONGUARDIALIMPIARFECHAINICIAL).Enable(True)
			bool = True
			if not self.fechainicial:
				bool = False
			self.GetControl(ID_TEXTCTRLGUARDIAFECHAFINAL).Enable(bool)
			self.GetControl(ID_BITMAPBUTTONGUARDIAELEGIRFECHAFINAL).Enable(bool)
			self.GetControl(ID_BITMAPBUTTONGUARDIALIMPIARFECHAFINAL).Enable(bool)
			self.GetControl(ID_TEXTCTRLGUARDIAHORAINICIAL).Enable(True)
			self.GetControl(ID_TEXTCTRLGUARDIAHORAFINAL).Enable(True)
			self.GetControl(ID_TEXTCTRLGUARDIAINTEGRANTES).Enable(True)
			self.GetControl(ID_RADIOBOXGUARDIAESTATUS).Enable(True)
			self.editable = True
		else:
			Mensajes().Warn(self, u"Escoja un registro v�lido", u"Atenci�n")
					
	def GetRecord(self, record):
		try:
			self.idguardia = int(record)
		except:
			return False
		sql = """
		select descripcion, recurrencia, convert(varchar(10), fechainicial, 103),
		convert(varchar(10), fechafinal, 103), horainicial, horafinal, integrantes, estatus,
		convert(varchar(100), BlogGUID)
		from %s where idguardia = %s
		""" % (self.dbtable, self.idguardia)
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		cursor.close()
		self.descripcion = str(row[0])
		self.recurrencia = int(row[1])
		self.fechainicial = str(row[2])
		self.fechafinal = str(row[3])
		self.horainicial = str(row[4])
		self.horafinal = str(row[5])
		self.integrantes = int(row[6])
		if str(row[7]) == "A":
			self.estatus = "Activada"
		else:
			self.estatus = "Desactivada"
		self.BlogGUID = str(row[8])
		self.GetControl(ID_TEXTCTRLGUARDIAID).SetValue(str(self.idguardia))
		self.GetControl(ID_TEXTCTRLGUARDIADESCRIPCION).SetValue(self.descripcion)
		self.GetControl(ID_CHOICEGUARDIARECURRENCIA).SetSelection(self.recurrencia)
		self.GetControl(ID_TEXTCTRLGUARDIAFECHAINICIAL).SetValue(str(self.fechainicial))
		self.GetControl(ID_TEXTCTRLGUARDIAFECHAFINAL).SetValue(str(self.fechafinal))
		self.GetControl(ID_TEXTCTRLGUARDIAHORAINICIAL).SetValue(str(self.horainicial))
		self.GetControl(ID_TEXTCTRLGUARDIAHORAFINAL).SetValue(str(self.horafinal))
		self.GetControl(ID_TEXTCTRLGUARDIAINTEGRANTES).SetValue(str(self.integrantes))
		self.GetControl(ID_RADIOBOXGUARDIAESTATUS).SetStringSelection(self.estatus)
		self.originaldescripcion = str(row[0])
		self.originalrecurrencia = int(row[1])
		self.originalfechainicial = str(row[2])
		self.originalfechafinal = str(row[3])
		self.originalhorainicial = str(row[4])
		self.originalhorafinal = str(row[5])
		self.originalintegrantes = int(row[6])
		if str(row[7]) == "A":
			self.originalestatus = "Activada"
		else:
			self.originalestatus = "Desactivada"
		return True
	
	def GuardarDetalle(self, onguardar = False):
		self.SaveRecord(onguardar)
		self.GetControl(ID_TEXTCTRLGUARDIAID).Enable(False)
		self.GetControl(ID_TEXTCTRLGUARDIADESCRIPCION).Enable(False)
		self.GetControl(ID_CHOICEGUARDIARECURRENCIA).Enable(False)
		self.GetControl(ID_TEXTCTRLGUARDIAFECHAINICIAL).Enable(False)
		self.GetControl(ID_BITMAPBUTTONGUARDIAELEGIRFECHAINICIAL).Enable(False)
		self.GetControl(ID_BITMAPBUTTONGUARDIALIMPIARFECHAINICIAL).Enable(False)
		self.GetControl(ID_TEXTCTRLGUARDIAFECHAFINAL).Enable(False)
		self.GetControl(ID_BITMAPBUTTONGUARDIAELEGIRFECHAFINAL).Enable(False)
		self.GetControl(ID_BITMAPBUTTONGUARDIALIMPIARFECHAFINAL).Enable(False)
		self.GetControl(ID_TEXTCTRLGUARDIAHORAINICIAL).Enable(False)
		self.GetControl(ID_TEXTCTRLGUARDIAHORAFINAL).Enable(False)
		self.GetControl(ID_RADIOBOXGUARDIAESTATUS).Enable(False)
	
	def OnGuardar(self, event):
		F, N = self.FillingARecord, self.NewFlag
		self.FillingARecord, self.NewFlag = False, False
		todobien = self.Text()
		self.FillingARecord, self.NewFlag = F, N
		if todobien:
			self.FillingARecord = True
			self.LCtrl(True)
			self.FillingARecord = False
		event.Skip()
		
	def SaveRecord(self, onguardar = False):
		wx.BeginBusyCursor()
		if self.agregar:
			bienGrabado, self.idguardia = self.AddRecord()
		else:
			bienGrabado = self.UpdateRecord()
		wx.EndBusyCursor()
			
		if bienGrabado:
			lctrl = self.GetControl(ID_LISTCTRLGUARDIA)
			if self.agregar:
				self.FillListCtrl()
				lctrl.SetItemState(self.ctrlindex, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
				self.GetRecord(record = self.idguardia)
			else:
				if onguardar:
					self.FillListCtrl()
					lctrl.SetItemState(self.ctrlindex, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
					self.GetRecord(record = self.idguardia)
				else:
					try:
						self.idguardia = self.datointerno
						self.FillListCtrl()
						lctrl.SetItemState(self.ctrlindex, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
						self.GetRecord(record = self.idguardia)
					except:
						pass
		else:
			Mensajes().Info(self, u"� El Registro no fue grabado !", u"Atenci�n")
			
	def UpdateRecord(self, querycancelar = ""):
		descripcion = self.GetControl(ID_TEXTCTRLGUARDIADESCRIPCION).GetValue()
		recurrencia = self.GetControl(ID_CHOICEGUARDIARECURRENCIA).GetSelection()
		f_dia, f_mes, f_ano = self.GetControl(ID_TEXTCTRLGUARDIAFECHAINICIAL).GetValue().split('/')
		fechainicial = "%04d/%02d/%02d" % (int(f_ano), int(f_mes), int(f_dia))
		f_dia, f_mes, f_ano = self.GetControl(ID_TEXTCTRLGUARDIAFECHAFINAL).GetValue().split('/')
		fechafinal = "%04d/%02d/%02d" % (int(f_ano), int(f_mes), int(f_dia))
		horainicial = self.GetControl(ID_TEXTCTRLGUARDIAHORAINICIAL).GetValue()
		horafinal = self.GetControl(ID_TEXTCTRLGUARDIAHORAFINAL).GetValue()
		integrantes = self.GetControl(ID_TEXTCTRLGUARDIAINTEGRANTES).GetValue()
		status = self.GetControl(ID_RADIOBOXGUARDIAESTATUS).GetStringSelection()
		if status == "Activada":
			estatus = "A"
		else:
			estatus = "D"
		setListForQuery = """
		descripcion = '%s', recurrencia = %s, fechainicial = '%s', fechafinal = '%s', horainicial = '%s',
		horafinal = '%s', integrantes = %s, estatus = '%s'
		""" % (descripcion, recurrencia, fechainicial, fechafinal, horainicial, horafinal, integrantes, estatus)
		sql = "update %s set %s where idguardia = %s" % (self.dbtable, setListForQuery, self.idguardia)
		queTal = self.QueryUpdateRecord(sql)
		if queTal:
			contenido = u"Edici�n del registro"
			sql = """
			insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension, Estatus)
			values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
			""" % (self.BlogGUID, self.usuario, contenido, "", "", "")
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
		
		return queTal
	
	def AddRecord(self):
		descripcion = self.GetControl(ID_TEXTCTRLGUARDIADESCRIPCION).GetValue()
		recurrencia = self.GetControl(ID_CHOICEGUARDIARECURRENCIA).GetSelection()
		f_dia, f_mes, f_ano = self.GetControl(ID_TEXTCTRLGUARDIAFECHAINICIAL).GetValue().split('/')
		fechainicial = "%04d/%02d/%02d" % (int(f_ano), int(f_mes), int(f_dia))
		f_dia, f_mes, f_ano = self.GetControl(ID_TEXTCTRLGUARDIAFECHAFINAL).GetValue().split('/')
		fechafinal = "%04d/%02d/%02d" % (int(f_ano), int(f_mes), int(f_dia))
		horainicial = self.GetControl(ID_TEXTCTRLGUARDIAHORAINICIAL).GetValue()
		horafinal = self.GetControl(ID_TEXTCTRLGUARDIAHORAFINAL).GetValue()
		integrantes = self.GetControl(ID_TEXTCTRLGUARDIAINTEGRANTES).GetValue()
		status = self.GetControl(ID_RADIOBOXGUARDIAESTATUS).GetStringSelection()
		if status == "Activada":
			estatus = "A"
		else:
			estatus = "D"
		sqlFields = "descripcion, recurrencia, fechainicial, fechafinal, horainicial, horafinal, integrantes, estatus"
		sqlValues = """
		'%s', %s, '%s', '%s', '%s', '%s', %s, '%s'
		""" % (descripcion, recurrencia, fechainicial, fechafinal, horainicial, horafinal, integrantes, estatus)
		sql = """
		insert into %s (%s) values (%s)
		""" % (self.dbtable, sqlFields, sqlValues) 
		sqlmax = "select max(idguardia) from %s" % self.dbtable
		queTal, identity =  self.QueryUpdateRecord(sql, sqlmax, True)
		numero = 0
		if queTal:
			if identity is not None:
				numero = identity
			else:
				Mensajes().Info(self, u"Problemas al buscar la nueva guardia.\n\n%s" % sqlmax, u"Atenci�n")
			self.GetControl(ID_TEXTCTRLGUARDIAID).SetValue(str(numero))
			sqly = "select convert(varchar(100), BlogGUID) from %s where idguardia = %s" % (self.dbtable, numero)
			cursor = r_cn.cursor()
			cursor.execute(str(sqly))
			row = fetchone(cursor)
			if row is not None:
				self.BlogGUID = row[0]
			cursor.close()
			sql = """
			insert into Blogs 
			(BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension, Estatus)
			values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
			""" % (self.BlogGUID, self.usuario, "Alta de Guardia", "", "", "A")
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"Problemas al actualizar el blog.\n\n%s" % sql, u"Atenci�n")

		return queTal, int(numero)
	
	def FillListCtrl(self):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLGUARDIA)
		lctrl.Enable(False); lctrl.Show(False); lctrl.ClearAll()
		sql = """
		select idguardia, convert(varchar(10), fechainicial, 103), convert(varchar(10), fechafinal, 103),
		recurrencia, descripcion, estatus from %s order by 2 desc
		""" % self.dbtable
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		fila = 0
		if rows:
			lctrl.InsertColumn(0, u"Id", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"Inicio", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(2, u"Termino", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(3, u"Recurrencia", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(4, u"Descripci�n / Ubicaci�n")
			for row in rows:
				if str(row[5]) == "D":
					bgcolor = [255,153,153]
					#if fila %2 != 0: bgcolor = [255,153,153]
					#else:            bgcolor = [255,215,215]
				else:
					if fila %2 != 0: bgcolor = [204,204,255]
					else:            bgcolor = [230,230,255]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, str(row[1]))
				lctrl.SetStringItem(index, 2, str(row[2]))
				lctrl.SetStringItem(index, 3, str(self.recurrenciadict[int(row[3])]))
				lctrl.SetStringItem(index, 4, str(row[4]))
				lctrl.SetItemData(index, row[0])
				if int(row[0]) == self.idguardia:
					self.ctrlindex = index
				fila += 1
			lctrl.SetColumnWidth(0, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(1, 90)
			lctrl.SetColumnWidth(2, 90)
			lctrl.SetColumnWidth(3, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(4, wx.LIST_AUTOSIZE)
		else:
			lctrl.InsertColumn(0, "       No Existen Registros", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 167)
		cu.close()
		self.MenuSetter(ID_MENUGUARDIAARCHIVOAGREGAR, True)
		self.MenuSetter(ID_MENUGUARDIAARCHIVOELIMINAR, False)
		self.MenuSetter(ID_MENUGUARDIAARCHIVOGUARDAR, False)
		self.tb.EnableTool(ID_TOOLGUARDIAAGREGAR, True)
		self.tb.EnableTool(ID_TOOLGUARDIAELIMINAR, False)
		self.tb.EnableTool(ID_TOOLGUARDIAGUARDAR, False)
		self.GetControl(ID_TEXTCTRLGUARDIAID).Enable(False)
		self.GetControl(ID_TEXTCTRLGUARDIADESCRIPCION).Enable(False)
		self.GetControl(ID_CHOICEGUARDIARECURRENCIA).Enable(False)
		self.GetControl(ID_TEXTCTRLGUARDIAFECHAINICIAL).Enable(False)
		self.GetControl(ID_BITMAPBUTTONGUARDIAELEGIRFECHAINICIAL).Enable(False)
		self.GetControl(ID_BITMAPBUTTONGUARDIALIMPIARFECHAINICIAL).Enable(False)
		self.GetControl(ID_TEXTCTRLGUARDIAFECHAFINAL).Enable(False)
		self.GetControl(ID_BITMAPBUTTONGUARDIAELEGIRFECHAFINAL).Enable(False)
		self.GetControl(ID_BITMAPBUTTONGUARDIALIMPIARFECHAFINAL).Enable(False)
		self.GetControl(ID_TEXTCTRLGUARDIAHORAINICIAL).Enable(False)
		self.GetControl(ID_TEXTCTRLGUARDIAHORAFINAL).Enable(False)
		self.GetControl(ID_TEXTCTRLGUARDIAINTEGRANTES).Enable(False)
		self.GetControl(ID_RADIOBOXGUARDIAESTATUS).Enable(False)
		lctrl.Show(True); lctrl.Enable(True)
		self.currentitemlst = []
		self.selecteditems = []
		wx.EndBusyCursor()
		if self.currentitem:
			lctrl.EnsureVisible(self.currentitem)
		salir = True
		self.NewFlag = False
		return salir, fila
		
class GixVendedores(wx.Frame, GixBase):
	dbtable = "VENDEDOR"; dbtable2 = "PORCENTAJE_COMISION"
	campos = {ID_TEXTCTRLVENDEDORNOMBRE:"tc", ID_TEXTCTRLVENDEDORDOMICILIO:"tc", ID_TEXTCTRLVENDEDORCOLONIA:"tc",
			  ID_TEXTCTRLVENDEDORCODIGOPOSTAL:"tc", ID_TEXTCTRLVENDEDORCIUDAD:"tc", ID_TEXTCTRLVENDEDORESTADO:"tc",
			  ID_TEXTCTRLVENDEDORTELEFONO:"tc", ID_TEXTCTRLVENDEDORRFC:"tc", ID_RADIOBOXVENDEDORSUBVENDEDOR:"rb",
			  ID_CHOICEVENDEDORDELVENDEDOR:"ch", ID_CHOICEVENDEDORTIPO:"ch", ID_CHOICEVENDEDORGUARDIA:"ch",
			  ID_CHOICEVENDEDORDELGERENTE:"ch", ID_RADIOBOXVENDEDORESTATUS:"rb"}
	campos2 = {ID_CHOICEVENDEDORDESARROLLOCOMISION:"ch", ID_TEXTCTRLVENDEDORCOMISIONCOMISION:"tc"}
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize,
				 style = wx.DEFAULT_FRAME_STYLE, usuario = None):
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		self.parent = parent
		self.usuario = usuario
		self.textevent = True
		self.datointerno = ""
		self.FillingARecord = True
		self.validacontroles = True
		self.onguardar = True
		self.ctrlindex = 0
		
		self.mb = VENDEDORMenuBarFunc()
		self.SetMenuBar(self.mb)
		self.tb = self.CreateToolBar(wx.TB_HORIZONTAL | wx.NO_BORDER | wx.TB_FLAT) # | wx.TB_TEXT )
		VENDEDORToolBarFunc(self.tb)
		
		if FORCESCROLL:
			sb = wx.ScrolledWindow(self, -1, pos = wx.DefaultPosition, size = wx.DefaultSize,
			                       style = wx.HSCROLL | wx.VSCROLL, name = "scrolledWindow")
			sb.SetScrollbars(20, 20, 150, 150)
			panel = wx.Panel(sb, -1) #, size=(410, 700))
			sb.Layout()
		else:
			panel = wx.Panel(self, -1)
			
		#panel = wx.Panel(self, -1)
		VendedoresFuncion(panel, True, True)
		wx.EVT_CLOSE(self, self.OnSalir)
		self.Bind(wx.EVT_MENU, self.OnAgregar, id = ID_MENUVENDEDORARCHIVOAGREGAR)
		self.Bind(wx.EVT_MENU, self.OnEliminar, id = ID_MENUVENDEDORARCHIVOELIMINAR)
		self.Bind(wx.EVT_MENU, self.OnGuardar, id = ID_MENUVENDEDORARCHIVOGUARDAR)
		self.Bind(wx.EVT_MENU, self.OnSalir, id = ID_MENUVENDEDORSALIR)
		self.Bind(wx.EVT_TOOL, self.OnAgregar, id = ID_TOOLVENDEDORAGREGAR)
		self.Bind(wx.EVT_TOOL, self.OnEliminar, id = ID_TOOLVENDEDORELIMINAR)
		self.Bind(wx.EVT_TOOL, self.OnGuardar, id = ID_TOOLVENDEDORGUARDAR)
		self.Bind(wx.EVT_CHOICE, self.OnChoiceFiltro, id = ID_CHOICEVENDEDORESTATUSFILTRO)
		self.Bind(wx.EVT_CHOICE, self.OnChoiceFiltro, id = ID_CHOICEVENDEDORTIPOFILTRO)
		self.Bind(wx.EVT_CHOICE, self.OnChoiceFiltro, id = ID_CHOICEVENDEDORGERENTEFILTRO)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnLCtrl, id = ID_LISTCTRLVENDEDOR)
		self.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.OnRightClick, id = ID_LISTCTRLVENDEDOR)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLVENDEDORNOMBRE)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLVENDEDORDOMICILIO)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLVENDEDORCOLONIA)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLVENDEDORCODIGOPOSTAL)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLVENDEDORCIUDAD)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLVENDEDORESTADO)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLVENDEDORTELEFONO)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLVENDEDORRFC)
		wx.EVT_RADIOBOX(self, ID_RADIOBOXVENDEDORSUBVENDEDOR, self.OnRadioBox)
		self.Bind(wx.EVT_CHOICE, self.OnChoice, id = ID_CHOICEVENDEDORDELVENDEDOR)
		self.Bind(wx.EVT_CHOICE, self.OnChoice, id = ID_CHOICEVENDEDORTIPO)
		self.Bind(wx.EVT_CHOICE, self.OnChoice, id = ID_CHOICEVENDEDORGUARDIA)
		self.Bind(wx.EVT_CHOICE, self.OnChoice, id = ID_CHOICEVENDEDORDELGERENTE)
		wx.EVT_RADIOBOX(self, ID_RADIOBOXVENDEDORESTATUS, self.OnRadioBox)
		
		self.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGED, self.OnChangeNoteBook, id = ID_NOTEBOOKVENDEDOR)
		self.Bind(wx.EVT_CHOICE, self.OnChoice2, id = ID_CHOICEVENDEDORDESARROLLOCOMISION)
		self.Bind(wx.EVT_TEXT, self.OnText2, id = ID_TEXTCTRLVENDEDORCOMISIONCOMISION)
		self.Bind(wx.EVT_BUTTON, self.OnAgregar2, id = ID_BUTTONVENDEDORAGREGARCOMISION)
		self.Bind(wx.EVT_BUTTON, self.OnGuardar2, id = ID_BUTTONVENDEDORGUARDARCOMISION)
		self.Bind(wx.EVT_BUTTON, self.OnEliminar2, id = ID_BUTTONVENDEDORELIMINARCOMISION)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnLCtrl2, id = ID_LISTCTRLVENDEDORCOMISION)

		maxlength = {"NOMBRE":255, "DOMICILIO":50, "COLONIA":30, "CODIGOPOSTAL":5, "CIUDAD":20,
					 "ESTADO":25, "TELEFONO":15, "RFC":15}
		for id, length in maxlength.iteritems():
			self.GetControl(eval("ID_TEXTCTRLVENDEDOR%s" % id)).SetMaxLength(length)
			
		self.ObtenerGerentesFiltro()
			
		anchos = [-1, 60, 160]
		self.CreateStatusBar(3)
		self.SetStatusWidths(anchos)
		self.SetStatusText(u"Ventas", 1)
		self.SetStatusText(u"Vendedores y Comisiones", 2)
		
		if wx.Platform == '__WXMSW__':
			if FORCESCROLL:
				self.GetControl(ID_LISTCTRLVENDEDOR).SetSize(wx.Size(410, 630))
				self.GetControl(ID_NOTEBOOKVENDEDOR).SetSize(wx.Size(440, 630))
			else:
				self.GetControl(ID_LISTCTRLVENDEDOR).SetSize(wx.Size(410, 600))
				self.GetControl(ID_NOTEBOOKVENDEDOR).SetSize(wx.Size(440, 600))
		else:
			if FORCESCROLL:
				self.GetControl(ID_LISTCTRLVENDEDOR).SetSize(wx.Size(410, 700))
				self.GetControl(ID_NOTEBOOKVENDEDOR).SetSize(wx.Size(410, 700))
				self.GetControl(ID_LISTCTRLVENDEDORCOMISION).SetSize(wx.Size(420, 410))
			else:
				self.GetControl(ID_LISTCTRLVENDEDOR).SetSize(wx.Size(410, 670))
				self.GetControl(ID_NOTEBOOKVENDEDOR).SetSize(wx.Size(410, 670))
				self.GetControl(ID_LISTCTRLVENDEDORCOMISION).SetSize(wx.Size(420, 380))
		
		self.currentitem = ""; self.original = {}
		self.idvendedor, self.agregar = 0,0
		self.GetControl(ID_CHOICEVENDEDORESTATUSFILTRO).SetSelection(1)
		self.GetControl(ID_CHOICEVENDEDORTIPOFILTRO).SetSelection(0)
		self.FillListCtrl()
		
	def OnSalir(self, event):
		self.Destroy()
		
	def ObtenerGerentesFiltro(self):
		control = self.GetControl(ID_CHOICEVENDEDORGERENTEFILTRO)
		control.Enable(False)
		control.Show(False)
		control.Clear()
		sql = """
		select codigo, nombre from gerentesventas order by nombre
		"""
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		control.Append("<Todos>", 9999)
		if rows:
			for row in rows:
				control.Append(str(row[1]).decode("iso8859-1"), int(row[0]))
				
		control.SetSelection(0)
		control.Show(True)
		control.Enable(True)
		
	def GetBlog(self, hash, codigo):
		sql = """
		select convert(varchar(100), BlogGUID) from gixblogaux where hash = '%s'
		""" % hash
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		cursor.close()
		if row is None:
			sql = """
			insert into gixblogaux (hash, tablename, tablekey) values ('%s', '%s', '%s')
			""" % (hash, self.dbtable, codigo)
			todobien, trash = self.QueryUpdateRecord(sql)
			if todobien:
				Mensajes().Info(self, u"� Registro exitoso del vendedor en el blog !", u"Aviso")
			return False
		else:
			self.BlogGUID = row[0]
			return True
		
	def OnRightClick(self, event):
		self.idregistryblog = self.idvendedor
		self.idtitleblog = "Registro"
		if not hasattr(self, "ID_VIEWBLOG"):
			ID_VIEWBLOG = wx.NewId(); ID_ADDBLOG = wx.NewId()
			self.Bind(wx.EVT_MENU, self.OnViewBlog, id = ID_VIEWBLOG)
			self.Bind(wx.EVT_MENU, self.OnAddBlog, id = ID_ADDBLOG)
		popup = wx.Menu()
		popup.Append(ID_VIEWBLOG, u"Consultar el Blog del %s %s" % (self.idtitleblog, self.idregistryblog))
		popup.Append(ID_ADDBLOG, u"Participar en el Blog...")
		self.PopupMenu(popup)
		popup.Destroy()
		
	def OnViewBlog(self, event):
		hash = self.Hash("%s%020d" % (self.dbtable, self.idregistryblog))
		if self.GetBlog(hash, codigo = self.idregistryblog):
			goal = ((90, u"Fecha"), (90, u"Hora"), (100, u"Usuario"), (300, u"Blog"))
			query = """
			select convert(varchar(50), FechaCaptura, 103), convert(varchar(50), FechaCaptura, 108),
			UsuarioCaptura, ContenidoText from Blogs
			where BlogGUID = '%s' order by FechaCaptura desc;
			select count(*) from Blogs where BlogGUID = '%s'
			""" % (self.BlogGUID, self.BlogGUID)
			title = u"Consultando el Blog del %s %s" % (self.idtitleblog, self.idregistryblog)
			table = "Blogs"
			frame = GixFrameCatalogo(self, -1, title, wx.Point(20,20), wx.Size(800,600), 
									 wx.DEFAULT_FRAME_STYLE, None, None, None, table, goal, query,
									 gridsize = [680,350], color = "AQUAMARINE")
			frame.Centre(wx.BOTH)
			frame.Show(True)
		
	def OnAddBlog(self, event):
		hash = self.Hash("%s%020d" % (self.dbtable, self.idregistryblog))
		if self.GetBlog(hash, codigo = self.idregistryblog):
			blog = wx.TextEntryDialog(self, u"Digite", u"Participando en el Blog del %s %s"
									  % (self.idtitleblog, self.idregistryblog),
									  defaultValue = "", style = wx.OK | wx.TE_MULTILINE)
			blog.SetSize(wx.Size(400,300))
			blog.Centre(wx.BOTH)
			blog.ShowModal()
			comment = blog.GetValue()
			blog.Destroy()
			if comment:
				sql = """
				insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension)
				values ('%s', getdate(), '%s', '%s', '%s', '%s')
				""" % (self.BlogGUID, self.usuario, comment, "", "")
				if not self.QueryUpdateRecord(sql):
					Mensajes().Info(self, u"� Problemas al actualizar el blog !", u"Atenci�n")
				
	def OnChoice(self, event):
		self.Text()
		
	def OnChoiceFiltro(self, event):
		self.FillListCtrl()
	
	def OnAgregar(self, event):
		self.agregar, self.NewFlag, self.FillingARecord = True, True, True
		self.GetControl(ID_NOTEBOOKVENDEDOR).Enable(True)
		self.GetControl(ID_NOTEBOOKVENDEDOR).SetSelection(0)
		self.GetControl(ID_TEXTCTRLVENDEDORCODIGO).SetValue("")
		self.validacontroles = False
		self.CleanForm()
		self.validacontroles = True
		self.ObtenerVendedores(); self.ObtenerGerentes()
		self.MenuSetter(ID_MENUVENDEDORARCHIVOAGREGAR, False)
		self.MenuSetter(ID_MENUVENDEDORARCHIVOELIMINAR, False)
		self.MenuSetter(ID_MENUVENDEDORARCHIVOGUARDAR, True)
		self.tb.EnableTool(ID_TOOLVENDEDORAGREGAR, False)
		self.tb.EnableTool(ID_TOOLVENDEDORELIMINAR, False)
		self.tb.EnableTool(ID_TOOLVENDEDORGUARDAR, True)
		self.FillingARecord = False
		self.GetControl(ID_TEXTCTRLVENDEDORNOMBRE).SetFocus()
		
	def OnEliminar(self, event):
		Mensajes().Info(self, u"� No puede eliminar a un vendedor !\n\nSi desea no utilizarlo, desactivelo.", u"Atenci�n")
		
	def OnText(self, event):
		if self.validacontroles:
			self.ctrlactual = event.GetId()
			valor = self.GetControl(self.ctrlactual).GetValue().encode("iso8859-1")
			valornum = str(valor).replace('.',''); valornum = str(valornum).replace(':', '')
			if valor and not valornum.isdigit():
				if not str(valor).isupper():
					if self.textevent:
						self.textevent = False
						self.GetControl(self.ctrlactual).SetValue(str(valor).upper())
					lastposition = self.GetControl(self.ctrlactual).GetLastPosition()
					self.GetControl(self.ctrlactual).SetInsertionPoint(lastposition)
					
			self.Text()
	
	def Text(self, VengodelaLista = False, texto = True):
		if self.onguardar:
			self.textevent = True
			for id, tipo in self.campos.iteritems():
				control = self.GetControl(id)
				if tipo == "tc":
					valor = control.GetValue().strip()
				elif tipo == "ch":
					valor = control.GetSelection()
					if id == ID_CHOICEVENDEDORDELVENDEDOR:
						if self.GetControl(ID_RADIOBOXVENDEDORSUBVENDEDOR).GetStringSelection() == "No":
							valor = 1
					if valor < 0:
						valor = ""
				if valor == "" and not self.FillingARecord and not self.NewFlag:
					self.NewFlag = True
					if not VengodelaLista:
						Mensajes().Info(self, u"� No debe quedar ning�n dato en blanco !", u"Atenci�n")
						return False
				
			if not self.FillingARecord:
				self.RevisaCambios()
	
		return True
			
	def RevisaCambios(self, cambioguardia = False, cambiopartida = False):
		for id, tipo in self.campos.iteritems():
			control = self.GetControl(id)
			if tipo == "tc":
				valor = control.GetValue()
				if valor != self.original[id]:
					control.SetBackgroundColour(wx.CYAN)
					cambioguardia = True
				else:
					control.SetBackgroundColour(wx.WHITE)
			elif tipo == "ch":
				if id in (ID_CHOICEVENDEDORDELVENDEDOR, ID_CHOICEVENDEDORDELGERENTE):
					valor = ""
					index = control.GetSelection()
					if index > -1:
						valor = control.GetClientData(index)
					if valor != self.original[id]:
						sigue = True
						if id == ID_CHOICEVENDEDORDELVENDEDOR:
							if self.GetControl(ID_RADIOBOXVENDEDORSUBVENDEDOR).GetStringSelection() == "No":
								sigue = False
						if sigue:
							control.SetBackgroundColour(wx.CYAN)
							cambioguardia = True
						else:
							control.SetBackgroundColour(wx.WHITE)
					else:
						control.SetBackgroundColour(wx.WHITE)
				else:
					valor = control.GetStringSelection()
					if id == ID_CHOICEVENDEDORTIPO:
						if valor == "Interno":
							valor = 1
						else:
							valor = 0
					elif id == ID_CHOICEVENDEDORGUARDIA:
						if valor == "Participa en Guardias":
							valor = 1
						else:
							valor = 0
					if valor != self.original[id]:
						control.SetBackgroundColour(wx.CYAN)
						cambioguardia = True
					else:
						control.SetBackgroundColour(wx.WHITE)
			elif tipo == "rb":
				valor = control.GetStringSelection()
				if id == ID_RADIOBOXVENDEDORSUBVENDEDOR:
					if valor == "Si":
						valor = 1
						self.GetControl(ID_TEXTVENDEDORDELVENDEDOR).Enable(True)
						self.GetControl(ID_CHOICEVENDEDORDELVENDEDOR).Enable(True)
					else:
						valor = 0
						self.GetControl(ID_TEXTVENDEDORDELVENDEDOR).Enable(False)
						self.GetControl(ID_CHOICEVENDEDORDELVENDEDOR).Enable(False)
				elif id == ID_RADIOBOXVENDEDORESTATUS:
					if valor == "Desactivado":
						if Mensajes().YesNo(self, u"Recuerde que al desactivar a un vendedor todos\n" \
						                    u"sus prospectos se revincularan al vendedor virtual\n" \
						                    u"del gerente.\n\n� Desea realmente desactivar al vendedor ?", \
						                    u"Confirmaci�n"):
							valor = 1
						else:
							valor = 0
							self.GetControl(ID_RADIOBOXVENDEDORESTATUS).SetStringSelection("Activado")
					else:
						valor = 0
				if valor != self.original[id]:
					control.SetOwnBackgroundColour(wx.CYAN)
					cambioguardia = True
				else:
					control.SetOwnBackgroundColour(wx.NullColour)
			control.Refresh()
		
		if cambioguardia:
			self.MenuSetter(ID_MENUVENDEDORARCHIVOAGREGAR, False)
			self.MenuSetter(ID_MENUVENDEDORARCHIVOELIMINAR, False)
			self.MenuSetter(ID_MENUVENDEDORARCHIVOGUARDAR, True)
			self.tb.EnableTool(ID_TOOLVENDEDORAGREGAR, False)
			self.tb.EnableTool(ID_TOOLVENDEDORELIMINAR, False)
			self.tb.EnableTool(ID_TOOLVENDEDORGUARDAR, True)
		else:
			self.MenuSetter(ID_MENUVENDEDORARCHIVOAGREGAR, True)
			self.MenuSetter(ID_MENUVENDEDORARCHIVOELIMINAR, True)
			self.MenuSetter(ID_MENUVENDEDORARCHIVOGUARDAR, False)
			self.tb.EnableTool(ID_TOOLVENDEDORAGREGAR, True)
			self.tb.EnableTool(ID_TOOLVENDEDORELIMINAR, True)
			self.tb.EnableTool(ID_TOOLVENDEDORGUARDAR, False)
	
	def OnRadioBox(self, event):
		if not self.FillingARecord:
			self.RevisaCambios()
	
	def OnLCtrl(self, event):
		self.agregar = False
		self.FillingARecord = True
		self.currentitem = event.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLVENDEDOR).GetItem(self.currentitem, 0).GetText()
		self.datointerno = int(datointerno)
		self.LCtrl()
		self.FillingARecord = False
		self.GetControl(ID_NOTEBOOKVENDEDOR).SetSelection(0)
		event.Skip()

	def LCtrl(self, onguardar = False):
		cambio = False
		if self.tb.GetToolEnabled(ID_TOOLVENDEDORGUARDAR):
			for id, tipo in self.campos.iteritems():
				control = self.GetControl(id)
				if tipo == "tc":
					valor = control.GetValue()
					if valor != self.original[id]:
						cambio = True
				elif tipo == "ch":
					if id in (ID_CHOICEVENDEDORDELVENDEDOR, ID_CHOICEVENDEDORDELGERENTE):
						index = control.GetSelection()
						valor = control.GetClientData(index)
						if valor != self.original[id]:
							sigue = True
							if id == ID_CHOICEVENDEDORDELVENDEDOR:
								if self.GetControl(ID_RADIOBOXVENDEDORSUBVENDEDOR).GetStringSelection() == "No":
									sigue = False
							if sigue:
								cambio = True
					else:
						valor = control.GetStringSelection()
						if id == ID_CHOICEVENDEDORTIPO:
							if valor == "Interno":
								valor = 1
							else:
								valor = 0
						elif id == ID_CHOICEVENDEDORGUARDIA:
							if valor == "Participa en Guardias":
								valor = 1
							else:
								valor = 0
						if valor != self.original[id]:
							cambio = True
				elif tipo == "rb":
					valor = control.GetStringSelection()
					if id == ID_RADIOBOXVENDEDORSUBVENDEDOR:
						if valor == "Si":
							valor = 1
						else:
							valor = 0
					elif id == ID_RADIOBOXVENDEDORESTATUS:
						if valor == "Desactivado":
							valor = 1
						else:
							valor = 0
					if valor != self.original[id]:
						cambio = True
			
		if cambio:
			self.NewFlag = False
			self.Text(True)
			if not self.NewFlag:
				if onguardar:
					if Mensajes().YesNo(self,u"� Desea realmente grabar la informaci�n ?", u"Confirmaci�n"):
						self.GuardarDetalle(onguardar)
				else:
					if self.GetControl(ID_TEXTCTRLVENDEDORCODIGO).GetValue():
						Mensajes().Info(self, u"� No guardo los cambios del vendedor %s !\n\n" \
										u"Por lo tanto, no ser ver� afectado el registro del vendedor." \
										% self.idvendedor, u"Atenci�n")
					else:
						Mensajes().Info(self, u"� No guardo el nuevo vendedor !\n\n" \
										u"Por lo tanto, no quedar� registrado.", u"Atenci�n")
						
				for id, tipo in self.campos.iteritems():
					ctrl = self.GetControl(id)
					if tipo in ("tc", "ch"):
						ctrl.SetBackgroundColour(wx.WHITE)
					elif tipo == "rb":
						ctrl.SetOwnBackgroundColour(wx.NullColour)
					ctrl.Refresh()

		if self.datointerno:
			if self.GetRecord(record = self.datointerno):
				self.MenuSetter(ID_MENUVENDEDORARCHIVOAGREGAR, True)
				self.MenuSetter(ID_MENUVENDEDORARCHIVOELIMINAR, True)
				self.MenuSetter(ID_MENUVENDEDORARCHIVOGUARDAR, False)
				self.tb.EnableTool(ID_TOOLVENDEDORAGREGAR, True)
				self.tb.EnableTool(ID_TOOLVENDEDORELIMINAR, True)
				self.tb.EnableTool(ID_TOOLVENDEDORGUARDAR, False)
				self.GetControl(ID_NOTEBOOKVENDEDOR).Enable(True)
				self.editable = True
			else:
				Mensajes().Warn(self, u"Escoja un registro v�lido", u"Atenci�n")
		else:
			self.FillListCtrl()
			
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
		return dato
	
	def ObtenerVendedores(self):
		control = self.GetControl(ID_CHOICEVENDEDORDELVENDEDOR)
		control.Clear()
		sql = """
		select codigo, nombre from %s where es_subvendedor = 0 and desactivado = 0 order by nombre
		""" % self.dbtable
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(self.GetString(row[1]), int(row[0]))
		
	def ObtenerGerentes(self):
		control = self.GetControl(ID_CHOICEVENDEDORDELGERENTE)
		control.Clear()
		sql = """
		select codigo, nombre from gerentesventas order by nombre
		"""
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(self.GetString(row[1]), int(row[0]))
		
	def DespliegaChoice(self, id, valor):
		choice = self.GetControl(id)
		for inx in range(0, choice.GetCount()):
			if valor == choice.GetClientData(inx):
				choice.SetSelection(inx)
				break
		
	def GetRecord(self, record):
		try:
			self.idvendedor = int(record)
		except:
			return False
		self.ObtenerVendedores(); self.ObtenerGerentes()
		sql = """
		select nombre, domicilio, colonia, cp, ciudad, estado, telefono, rfc, es_subvendedor, vendedor,
		interno, elegibleguardia, gerente, desactivado
		from %s where codigo = %s
		""" % (self.dbtable, self.idvendedor)
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		cursor.close()
		self.original[ID_TEXTCTRLVENDEDORNOMBRE] = self.GetString(row[0])
		self.original[ID_TEXTCTRLVENDEDORDOMICILIO] =self.GetString(row[1])
		self.original[ID_TEXTCTRLVENDEDORCOLONIA] = self.GetString(row[2])
		self.original[ID_TEXTCTRLVENDEDORCODIGOPOSTAL] = self.GetString(row[3])
		self.original[ID_TEXTCTRLVENDEDORCIUDAD] = self.GetString(row[4])
		self.original[ID_TEXTCTRLVENDEDORESTADO] = self.GetString(row[5])
		self.original[ID_TEXTCTRLVENDEDORTELEFONO] = self.GetString(row[6])
		self.original[ID_TEXTCTRLVENDEDORRFC] = self.GetString(row[7])
		self.original[ID_RADIOBOXVENDEDORSUBVENDEDOR] = int(row[8])
		self.original[ID_CHOICEVENDEDORDELVENDEDOR] = int(row[9])
		self.original[ID_CHOICEVENDEDORTIPO] = int(row[10])
		self.original[ID_CHOICEVENDEDORGUARDIA] = int(row[11])
		self.original[ID_CHOICEVENDEDORDELGERENTE] = int(row[12])
		self.original[ID_RADIOBOXVENDEDORESTATUS] = int(row[13])
		
		self.GetControl(ID_TEXTCTRLVENDEDORCODIGO).SetValue(str(self.idvendedor))
		self.GetControl(ID_TEXTCTRLVENDEDORNOMBRE).SetValue(self.GetString(row[0]))
		self.GetControl(ID_TEXTCTRLVENDEDORDOMICILIO).SetValue(self.GetString(row[1]))
		self.GetControl(ID_TEXTCTRLVENDEDORCOLONIA).SetValue(self.GetString(row[2]))
		self.GetControl(ID_TEXTCTRLVENDEDORCODIGOPOSTAL).SetValue(self.GetString(row[3]))
		self.GetControl(ID_TEXTCTRLVENDEDORCIUDAD).SetValue(self.GetString(row[4]))
		self.GetControl(ID_TEXTCTRLVENDEDORESTADO).SetValue(self.GetString(row[5]))
		self.GetControl(ID_TEXTCTRLVENDEDORTELEFONO).SetValue(self.GetString(row[6]))
		self.GetControl(ID_TEXTCTRLVENDEDORRFC).SetValue(self.GetString(row[7]))
		control = self.GetControl(ID_CHOICEVENDEDORDELVENDEDOR); control.SetSelection(SetChoiceIndex())
		if int(row[8]):
			self.GetControl(ID_RADIOBOXVENDEDORSUBVENDEDOR).SetStringSelection("Si")
			control.Enable(True)
			self.GetControl(ID_TEXTVENDEDORDELVENDEDOR).Enable(True)
			self.DespliegaChoice(ID_CHOICEVENDEDORDELVENDEDOR, valor = int(row[9]))
		else:
			self.GetControl(ID_RADIOBOXVENDEDORSUBVENDEDOR).SetStringSelection("No")
			control.Enable(False)
			self.GetControl(ID_TEXTVENDEDORDELVENDEDOR).Enable(False)
		if int(row[10]):
			self.GetControl(ID_CHOICEVENDEDORTIPO).SetSelection(0)
		else:
			self.GetControl(ID_CHOICEVENDEDORTIPO).SetSelection(1)
		if int(row[11]):
			self.GetControl(ID_CHOICEVENDEDORGUARDIA).SetSelection(0)
		else:
			self.GetControl(ID_CHOICEVENDEDORGUARDIA).SetSelection(1)
		self.GetControl(ID_CHOICEVENDEDORDELGERENTE).SetSelection(SetChoiceIndex())
		self.DespliegaChoice(ID_CHOICEVENDEDORDELGERENTE, valor = int(row[12]))
		if int(row[13]):
			self.GetControl(ID_RADIOBOXVENDEDORESTATUS).SetStringSelection("Desactivado")
		else:
			self.GetControl(ID_RADIOBOXVENDEDORESTATUS).SetStringSelection("Activado")
			
		return True
	
	def GuardarDetalle(self, onguardar = False):
		self.SaveRecord(onguardar)
	
	def OnGuardar(self, event):
		F, N = self.FillingARecord, self.NewFlag
		self.FillingARecord, self.NewFlag = False, False
		todobien = self.Text()
		self.onguardar = False
		self.FillingARecord, self.NewFlag = F, N
		if todobien:
			self.FillingARecord = True
			self.LCtrl(True)
			self.FillingARecord = False
		self.onguardar = True
		event.Skip()
		
	def Hash(self, data):
		#m = md5.new()
		#m.update(data)
		return md5(data).hexdigest().upper()
	
	def SaveRecord(self, onguardar = False):
		wx.BeginBusyCursor()
		if self.agregar:
			bienGrabado, self.idvendedor = self.AddRecord()
		else:
			bienGrabado = self.UpdateRecord()
		wx.EndBusyCursor()
			
		if bienGrabado:
			lctrl = self.GetControl(ID_LISTCTRLVENDEDOR)
			if self.agregar:
				self.FillListCtrl()
				lctrl.SetItemState(self.ctrlindex, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
				self.GetRecord(record = self.idvendedor)
			else:
				if onguardar:
					self.FillListCtrl()
					lctrl.SetItemState(self.ctrlindex, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
					self.GetRecord(record = self.idvendedor)
				else:
					try:
						self.idvendedor = self.datointerno
						self.FillListCtrl()
						lctrl.SetItemState(self.ctrlindex, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
						self.GetRecord(record = self.idvendedor)
					except:
						pass
		else:
			Mensajes().Info(self, u"� El Registro no fue grabado !", u"Atenci�n")
			
	def RevinculaProspectos(self, gerente):
		sql = "select codigo from VENDEDOR where gerente = %s and vendedorvirtual = 1" % int(gerente)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		vendedor = fetchone(cu)
		cu.close()
		if vendedor is None:
			Mensajes().Info(self, u"� El gerente %s no tiene vendedor virtual !" % int(gerente), u"Atenci�n")
			return False, 0
		else:
			vendedorvirtual = int(vendedor[0])
			sql = """
			select p.idprospecto, convert(varchar(100), p.BlogGUID), v.nombre
			from gixprospectos p
			join VENDEDOR v on p.idvendedor = v.codigo
			where p.idgerente = %s and p.idvendedor = %s
			""" % (int(gerente), int(self.idvendedor))
			cu = r_cn.cursor()
			cu.execute(str(sql))
			rows = fetchall(cu)
			cu.close()
			prospectos = 0
			if rows:
				prospectos = len(rows)
				for row in rows:
					sql = "update gixprospectos set idvendedor = %s where idprospecto = %s" % \
					    (int(vendedorvirtual), int(row[0]))
					queTal, trash = self.QueryUpdateRecord(sql)
					if queTal:
						usuario = "%s/GIX" % self.usuario
						contenido = u"Revinculaci�n del Prospecto por Desactivaci�n del Vendedor %s" % self.GetString(row[2])
						sql = """
					        insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario,
					        Extension, Estatus) values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
					        """ % (str(row[1]), usuario, contenido, "", "", "")
						if not self.QueryUpdateRecord(sql):
							Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
							
		return True, prospectos
								
	def UpdateRecord(self, querycancelar = ""):
		nombre = self.GetControl(ID_TEXTCTRLVENDEDORNOMBRE).GetValue().strip()
		domicilio = self.GetControl(ID_TEXTCTRLVENDEDORDOMICILIO).GetValue().strip()
		colonia = self.GetControl(ID_TEXTCTRLVENDEDORCOLONIA).GetValue().strip()
		cp = self.GetControl(ID_TEXTCTRLVENDEDORCODIGOPOSTAL).GetValue().strip()
		ciudad = self.GetControl(ID_TEXTCTRLVENDEDORCIUDAD).GetValue().strip()
		estado = self.GetControl(ID_TEXTCTRLVENDEDORESTADO).GetValue().strip()
		telefono = self.GetControl(ID_TEXTCTRLVENDEDORTELEFONO).GetValue().strip()
		rfc = self.GetControl(ID_TEXTCTRLVENDEDORRFC).GetValue().strip()
		valor = self.GetControl(ID_RADIOBOXVENDEDORSUBVENDEDOR).GetStringSelection()
		es_subvendedor = 0
		if valor == "Si":
			es_subvendedor = 1
		inx = self.GetControl(ID_CHOICEVENDEDORDELVENDEDOR).GetSelection()
		if inx < 0:
			vendedor = 0
		else:
			vendedor = self.GetControl(ID_CHOICEVENDEDORDELVENDEDOR).GetClientData(inx)
		valor = self.GetControl(ID_CHOICEVENDEDORTIPO).GetSelection()
		interno = 1
		if valor == 1:
			interno = 0
		valor = self.GetControl(ID_CHOICEVENDEDORGUARDIA).GetSelection()
		elegibleguardia = 1
		if valor == 1:
			elegibleguardia = 0
		inx = self.GetControl(ID_CHOICEVENDEDORDELGERENTE).GetSelection()
		gerente = self.GetControl(ID_CHOICEVENDEDORDELGERENTE).GetClientData(inx)
		valor = self.GetControl(ID_RADIOBOXVENDEDORESTATUS).GetStringSelection()
		queTal = True; desactivado, prospectos = 0,0
		if valor == "Desactivado":
			desactivado = 1
			queTal, prospectos = self.RevinculaProspectos(gerente)
		if queTal:
			setListForQuery = """
			nombre = '%s', domicilio = '%s', colonia = '%s', cp = '%s', ciudad = '%s', estado = '%s', telefono ='%s',
			rfc = '%s', es_subvendedor = %s, vendedor = %s, desactivado = %s, interno = %s, elegibleguardia = %s,
			gerente = %s
			""" % (nombre, domicilio, colonia, cp, ciudad, estado, telefono, rfc, es_subvendedor, vendedor,
				   desactivado, interno, elegibleguardia, gerente)
			sql = "update %s set %s where codigo = %s" % (self.dbtable, setListForQuery, self.idvendedor)
			queTal, trash = self.QueryUpdateRecord(sql)
			if queTal:
				hash = self.Hash("%s%020d" % (self.dbtable, self.idvendedor))
				if self.GetBlog(hash, codigo = self.idvendedor):
					if desactivado:
						contenido = u"Desactivaci�n del Vendedor / Revinculaci�n de %s Prospecto(s) al Vendedor Virtual" % int(prospectos)
					else:
						contenido = u"Edici�n del Registro"
					sql = """
					insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario,
					Extension, Estatus) values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
					""" % (self.BlogGUID, self.usuario, contenido, "", "", "")
					if not self.QueryUpdateRecord(sql):
						Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
		
		return queTal
	
	def AddRecord(self):
		nombre = self.GetControl(ID_TEXTCTRLVENDEDORNOMBRE).GetValue().strip()
		domicilio = self.GetControl(ID_TEXTCTRLVENDEDORDOMICILIO).GetValue().strip()
		colonia = self.GetControl(ID_TEXTCTRLVENDEDORCOLONIA).GetValue().strip()
		cp = self.GetControl(ID_TEXTCTRLVENDEDORCODIGOPOSTAL).GetValue().strip()
		ciudad = self.GetControl(ID_TEXTCTRLVENDEDORCIUDAD).GetValue().strip()
		estado = self.GetControl(ID_TEXTCTRLVENDEDORESTADO).GetValue().strip()
		telefono = self.GetControl(ID_TEXTCTRLVENDEDORTELEFONO).GetValue().strip()
		rfc = self.GetControl(ID_TEXTCTRLVENDEDORRFC).GetValue().strip()
		valor = self.GetControl(ID_RADIOBOXVENDEDORSUBVENDEDOR).GetStringSelection()
		es_subvendedor = 0
		if valor == "Si":
			es_subvendedor = 1
		inx = self.GetControl(ID_CHOICEVENDEDORDELVENDEDOR).GetSelection()
		if inx < 0:
			vendedor = 0
		else:
			vendedor = self.GetControl(ID_CHOICEVENDEDORDELVENDEDOR).GetClientData(inx)
		valor = self.GetControl(ID_CHOICEVENDEDORTIPO).GetSelection()
		interno = 1
		if valor == 1:
			interno = 0
		valor = self.GetControl(ID_CHOICEVENDEDORGUARDIA).GetSelection()
		elegibleguardia = 1
		if valor == 1:
			elegibleguardia = 0
		inx = self.GetControl(ID_CHOICEVENDEDORDELGERENTE).GetSelection()
		gerente = self.GetControl(ID_CHOICEVENDEDORDELGERENTE).GetClientData(inx)
		valor = self.GetControl(ID_RADIOBOXVENDEDORESTATUS).GetStringSelection()
		desactivado = 0
		if valor == "Desactivado":
			desactivado = 1
		sqlFields = """
		codigo, nombre, domicilio, colonia, cp, ciudad, estado, telefono, rfc, es_subvendedor, vendedor,
		desactivado, interno, elegibleguardia, guardiarealizada, gerente
		"""
		sqlmax = "select max(codigo) from %s" % self.dbtable
		cursor = r_cn.cursor()
		cursor.execute(str(sqlmax))
		row = fetchone(cursor)
		cursor.close()
		if row is None:
			return False, 0
		codigo = int(row[0]) + 1
		sqlValues = """
		%s, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', %s, %s, %s, %s, %s, %s, %s
		""" % (codigo, nombre, domicilio, colonia, cp, ciudad, estado, telefono, rfc, es_subvendedor, vendedor,
			   desactivado, interno, elegibleguardia, 0, gerente)
		sql = """
		insert into %s (%s) values (%s)
		""" % (self.dbtable, sqlFields, sqlValues) 
		queTal, trash =  self.QueryUpdateRecord(sql)
		if queTal:
			self.GetControl(ID_TEXTCTRLVENDEDORCODIGO).SetValue(str(codigo))
			hash = self.Hash("%s%020d" % (self.dbtable, codigo))
			sql = """
			insert into gixblogaux (hash, tablename, tablekey) values ('%s', '%s', '%s')
			""" % (hash, self.dbtable, codigo)
			todobien, trash = self.QueryUpdateRecord(sql)
			if todobien:
				if self.GetBlog(hash, codigo = codigo):
					if desactivado:
						contenido = "Alta del Vendedor con Estatus Desactivado"
					else:
						contenido = "Alta del Vendedor"
					sql = """
					insert into Blogs 
					(BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension, Estatus)
					values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
					""" % (self.BlogGUID, self.usuario, contenido, "", "", "")
					todobien, trash = self.QueryUpdateRecord(sql)
					if not todobien:
						Mensajes().Info(self, u"Problemas al actualizar el blog.\n\n%s" % sql, u"Atenci�n")

		return queTal, codigo
	
	def CleanForm(self):
		self.original.clear()
		for id, tipo in self.campos.iteritems():
			self.original[id] = ""
			ctrl = self.GetControl(id)
			if tipo in ("tc", "ch"):
				ctrl.SetBackgroundColour(wx.WHITE)
			elif tipo == "rb":
				ctrl.SetOwnBackgroundColour(wx.NullColour)
			ctrl.Refresh()
		self.original[ID_RADIOBOXVENDEDORSUBVENDEDOR] = "1"
		self.original[ID_RADIOBOXVENDEDORESTATUS] = "0"
		
		self.GetControl(ID_TEXTCTRLVENDEDORCODIGO).SetValue("")
		self.GetControl(ID_TEXTCTRLVENDEDORNOMBRE).SetValue("")
		self.GetControl(ID_TEXTCTRLVENDEDORDOMICILIO).SetValue("")
		self.GetControl(ID_TEXTCTRLVENDEDORCOLONIA).SetValue("")
		self.GetControl(ID_TEXTCTRLVENDEDORCODIGOPOSTAL).SetValue("")
		self.GetControl(ID_TEXTCTRLVENDEDORCIUDAD).SetValue("")
		self.GetControl(ID_TEXTCTRLVENDEDORESTADO).SetValue("")
		self.GetControl(ID_TEXTCTRLVENDEDORTELEFONO).SetValue("")
		self.GetControl(ID_TEXTCTRLVENDEDORRFC).SetValue("")
		self.GetControl(ID_RADIOBOXVENDEDORSUBVENDEDOR).SetStringSelection("Si")
		self.GetControl(ID_CHOICEVENDEDORDELVENDEDOR).SetSelection(SetChoiceIndex())
		self.GetControl(ID_CHOICEVENDEDORTIPO).SetSelection(SetChoiceIndex())
		self.GetControl(ID_CHOICEVENDEDORGUARDIA).SetSelection(SetChoiceIndex())
		self.GetControl(ID_CHOICEVENDEDORDELGERENTE).SetSelection(SetChoiceIndex())
		self.GetControl(ID_RADIOBOXVENDEDORESTATUS).SetStringSelection("Activado")
	
	def FillListCtrl(self):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLVENDEDOR)
		lctrl.Enable(False); lctrl.Show(False); lctrl.ClearAll()
		estatusfiltro = self.GetControl(ID_CHOICEVENDEDORESTATUSFILTRO).GetSelection()
		self.estatusfiltro = ""
		if estatusfiltro == 1:
			self.estatusfiltro = "where desactivado = 0"
		elif estatusfiltro == 2:
			self.estatusfiltro = "where desactivado = 1"
		tipofiltro = self.GetControl(ID_CHOICEVENDEDORTIPOFILTRO).GetSelection()
		self.tipofiltro = ""
		if tipofiltro == 1:
			if self.estatusfiltro:
				self.tipofiltro = "and interno = 1"
			else:
				self.tipofiltro = "where interno = 1"
		elif tipofiltro == 2:
			if self.estatusfiltro:
				self.tipofiltro = "and interno = 0"
			else:
				self.tipofiltro = "where interno = 0"
		gerenteinx = self.GetControl(ID_CHOICEVENDEDORGERENTEFILTRO).GetSelection()
		self.gerentefiltro = ""
		if gerenteinx > 0:
			idgerente = self.GetControl(ID_CHOICEVENDEDORGERENTEFILTRO).GetClientData(gerenteinx)
			if self.estatusfiltro or self.tipofiltro:
				self.gerentefiltro = " and gerente = %s" % idgerente
			else:
				self.gerentefiltro = "where gerente = %s" % idgerente
		if self.estatusfiltro or self.tipofiltro or self.gerentefiltro:
			vendedorvirtual = " and vendedorvirtual = 0"
		else:
			vendedorvirtual = "where vendedorvirtual = 0"
		sql = """
		select codigo, nombre, desactivado from %s %s %s %s %s order by nombre
		""" % (self.dbtable, self.estatusfiltro, self.tipofiltro, self.gerentefiltro, vendedorvirtual)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		fila = 0
		if rows:
			lctrl.InsertColumn(0, u"Id", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"Nombre")
			for row in rows:
				if int(row[2]):
					bgcolor = [255,153,153]
					#if fila %2 != 0: bgcolor = [255,153,153]
					#else:            bgcolor = [255,215,215]
				else:
					if fila %2 != 0: bgcolor = [204,204,255]
					else:            bgcolor = [230,230,255]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, self.GetString(row[1]))
				lctrl.SetItemData(index, row[0])
				if int(row[0]) == self.idvendedor:
					self.ctrlindex = index
				fila += 1
			lctrl.SetColumnWidth(0, 50)
			lctrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
		else:
			lctrl.InsertColumn(0, "       No Existen Registros", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 167)
		self.SetStatusText(u"Total de Registros a la Vista: %s" % int(fila), 0)
		self.MenuSetter(ID_MENUVENDEDORARCHIVOAGREGAR, True)
		self.MenuSetter(ID_MENUVENDEDORARCHIVOELIMINAR, False)
		self.MenuSetter(ID_MENUVENDEDORARCHIVOGUARDAR, False)
		self.tb.EnableTool(ID_TOOLVENDEDORAGREGAR, True)
		self.tb.EnableTool(ID_TOOLVENDEDORELIMINAR, False)
		self.tb.EnableTool(ID_TOOLVENDEDORGUARDAR, False)
		self.GetControl(ID_NOTEBOOKVENDEDOR).SetSelection(0)
		self.GetControl(ID_NOTEBOOKVENDEDOR).Enable(False)
		lctrl.Show(True); lctrl.Enable(True)
		self.currentitemlst = []
		self.selecteditems = []
		self.validacontroles = False
		self.CleanForm()
		self.validacontroles = True
		wx.EndBusyCursor()
		#if self.currentitem:
			#lctrl.EnsureVisible(self.currentitem)
		salir = True
		self.NewFlag = False
		return salir, fila
	
	def ObtenerDesarrollos(self):
		control = self.GetControl(ID_CHOICEVENDEDORDESARROLLOCOMISION)
		control.Clear()
		sql = """
		select codigo, descripcion from DESARROLLO order by descripcion
		"""
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(self.GetString(row[1]), int(row[0]))
				
	def HabilitaComisiones(self, bool = True):
		self.GetControl(ID_TEXTVENDEDORCODIGOCOMISION).Enable(bool)
		self.GetControl(ID_TEXTCTRLVENDEDORCODIGOCOMISION).Enable(bool)
		self.GetControl(ID_TEXTVENDEDORDESARROLLOCOMISION).Enable(bool)
		self.GetControl(ID_CHOICEVENDEDORDESARROLLOCOMISION).Enable(bool)
		self.GetControl(ID_TEXTVENDEDORCOMISIONCOMISION).Enable(bool)
		self.GetControl(ID_TEXTCTRLVENDEDORCOMISIONCOMISION).Enable(bool)
		self.GetControl(ID_TEXTVENDEDORPORCENTAJECOMISION).Enable(bool)
				
	def OnChangeNoteBook(self, event):
		control = self.GetControl(event.GetId())
		if control.GetSelection():
			codigo = self.GetControl(ID_TEXTCTRLVENDEDORCODIGO).GetValue()
			if codigo:
				self.HabilitaComisiones(False)
				self.original2 = {}; self.datointerno2 = ""
				self.idporcentaje, self.currentitem2, self.agregar2 = 0,0,0
				self.FillingARecord2, self.onguardar2, self.validacontroles2 = True, True, True
				self.ObtenerDesarrollos()
				nombre = self.GetControl(ID_TEXTCTRLVENDEDORNOMBRE).GetValue()
				self.GetControl(ID_TEXTVENDEDORNOMBRE2).SetLabel(nombre + " - ID " + codigo)
				self.FillListCtrl2()
			else:
				control.SetSelection(0)
				Mensajes().Info(self, u"Por favor guarde el vendedor antes de ingresar a las comisiones.", u"Aviso")
				
	def CleanForm2(self):
		self.original2.clear()
		for id, tipo in self.campos2.iteritems():
			self.original2[id] = ""
			ctrl = self.GetControl(id)
			ctrl.SetBackgroundColour(wx.WHITE)
			ctrl.Refresh()
		self.GetControl(ID_TEXTCTRLVENDEDORCODIGOCOMISION).SetValue("")
		self.GetControl(ID_CHOICEVENDEDORDESARROLLOCOMISION).SetSelection(SetChoiceIndex())
		self.GetControl(ID_TEXTCTRLVENDEDORCOMISIONCOMISION).SetValue("")
		
	def FillListCtrl2(self):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLVENDEDORCOMISION)
		lctrl.Enable(False); lctrl.Show(False); lctrl.ClearAll()
		sql = """
		select p.codigo, p.porcentaje, d.descripcion from %s p
		join DESARROLLO d on p.fk_desarrollo = d.codigo
		where p.fk_vendedor = %s order by d.descripcion
		""" % (self.dbtable2, self.idvendedor)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		fila = 0
		if rows:
			lctrl.InsertColumn(0, u"Id", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"Comisi�n %", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(2, u"Desarrollo")
			for row in rows:
				if fila %2 != 0: bgcolor = [255,255,150]
				else:            bgcolor = [255,255,200]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, str(amount_and_cents_with_commas(row[1])))
				lctrl.SetStringItem(index, 2, self.GetString(row[2]))
				lctrl.SetItemData(index, row[0])
				if int(row[0]) == self.idporcentaje:
					self.ctrlindex2 = index
				fila += 1
			lctrl.SetColumnWidth(0, 45)
			lctrl.SetColumnWidth(1, 73)
			lctrl.SetColumnWidth(2, wx.LIST_AUTOSIZE)
		else:
			lctrl.InsertColumn(0, "       No Existen Registros", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 167)
		self.GetControl(ID_BUTTONVENDEDORAGREGARCOMISION).Enable(True)
		self.GetControl(ID_BUTTONVENDEDORELIMINARCOMISION).Enable(False)
		self.GetControl(ID_BUTTONVENDEDORGUARDARCOMISION).Enable(False)
		lctrl.Show(True); lctrl.Enable(True)
		self.currentitemlst2 = []
		self.selecteditems2 = []
		self.validacontroles2 = False
		self.CleanForm2()
		self.validacontroles2 = True
		wx.EndBusyCursor()
		if self.currentitem2:
			lctrl.EnsureVisible(self.currentitem2)
		salir = True
		self.NewFlag2 = False
		return salir, fila

	def OnChoice2(self, event):
		self.Text2()
	
	def OnText2(self, event):
		self.Text2()
	
	def Text2(self, VengodelaLista = False, texto = True):
		if self.validacontroles2:
			if self.onguardar2:
				for id, tipo in self.campos2.iteritems():
					control = self.GetControl(id)
					if tipo == "tc":
						valor = control.GetValue().strip()
					elif tipo == "ch":
						valor = control.GetSelection()
						if valor < 0:
							valor = ""
					if valor == "" and not self.FillingARecord2 and not self.NewFlag2:
						self.NewFlag2 = True
						if not VengodelaLista:
							Mensajes().Info(self, u"� No debe quedar ning�n dato en blanco !", u"Atenci�n")
							return False
					
				if not self.FillingARecord2:
					self.RevisaCambios2()
	
		return True
			
	def RevisaCambios2(self, cambioguardia = False, cambiopartida = False):
		for id, tipo in self.campos2.iteritems():
			control = self.GetControl(id)
			if tipo == "tc":
				valor = control.GetValue()
				if valor:
					try:
						valor = float(valor)
					except:
						Mensajes().Info(self, u"� Error al ingresar la comisi�n !", u"Atenci�n")
						valor = self.original2[id]
						self.GetControl(id).SetValue(str(valor))
				if valor != self.original2[id]:
					control.SetBackgroundColour(wx.CYAN)
					cambioguardia = True
				else:
					control.SetBackgroundColour(wx.WHITE)
			elif tipo == "ch":
				index = control.GetSelection()
				if index > -1:
					valor = control.GetClientData(index)
					if valor != self.original2[id]:
						control.SetBackgroundColour(wx.CYAN)
						cambioguardia = True
					else:
						control.SetBackgroundColour(wx.WHITE)
			control.Refresh()
		
		if cambioguardia:
			self.GetControl(ID_BUTTONVENDEDORAGREGARCOMISION).Enable(False)
			self.GetControl(ID_BUTTONVENDEDORELIMINARCOMISION).Enable(False)
			self.GetControl(ID_BUTTONVENDEDORGUARDARCOMISION).Enable(True)
		else:
			self.GetControl(ID_BUTTONVENDEDORAGREGARCOMISION).Enable(True)
			self.GetControl(ID_BUTTONVENDEDORELIMINARCOMISION).Enable(True)
			self.GetControl(ID_BUTTONVENDEDORGUARDARCOMISION).Enable(False)
	
	def OnLCtrl2(self, event):
		self.currentitem2 = event.m_itemIndex
		self.agregar2 = False; self.FillingARecord2 = True
		datointerno2 = self.GetControl(ID_LISTCTRLVENDEDORCOMISION).GetItem(self.currentitem2, 0).GetText()
		self.datointerno2 = int(datointerno2)
		self.LCtrl2()
		self.FillingARecord2 = False

	def LCtrl2(self, onguardar = False):
		cambio = False
		if self.GetControl(ID_BUTTONVENDEDORGUARDARCOMISION).IsEnabled():
			for id, tipo in self.campos2.iteritems():
				control = self.GetControl(id)
				if tipo == "tc":
					valor = control.GetValue()
					if valor != self.original2[id]:
						cambio = True
				elif tipo == "ch":
					valor = ""
					index = control.GetSelection()
					if index > -1:
						valor = control.GetClientData(index)
					if valor != self.original2[id]:
						cambio = True
			
		if cambio:
			self.NewFlag2 = False
			self.Text2(True)
			if not self.NewFlag2:
				if onguardar:
					if Mensajes().YesNo(self,u"� Desea realmente grabar la comisi�n ?", u"Confirmaci�n"):
						self.GuardarDetalle2(onguardar)
					else:
						self.HabilitaComisiones(False)
				else:
					if self.GetControl(ID_TEXTCTRLVENDEDORCODIGOCOMISION).GetValue():
						Mensajes().Info(self, u"� No guardo los cambios de la comisi�n %s !\n\n" \
										u"Por lo tanto, no ser ver� afectado el registro del vendedor." \
										% self.idporcentaje, u"Atenci�n")
					else:
						Mensajes().Info(self, u"� No guardo la nueva comisi�n !\n\n" \
										u"Por lo tanto, no quedar� registrada.", u"Atenci�n")
						
				for id, tipo in self.campos2.iteritems():
					ctrl = self.GetControl(id)
					ctrl.SetBackgroundColour(wx.WHITE)
					ctrl.Refresh()

		if self.datointerno2:
			if self.GetRecord2(record = self.datointerno2):
				self.GetControl(ID_BUTTONVENDEDORAGREGARCOMISION).Enable(True)
				self.GetControl(ID_BUTTONVENDEDORELIMINARCOMISION).Enable(True)
				self.GetControl(ID_BUTTONVENDEDORGUARDARCOMISION).Enable(False)
				self.HabilitaComisiones()
				self.editable2 = True
			else:
				Mensajes().Warn(self, u"Escoja un registro v�lido", u"Atenci�n")
		else:
			self.FillListCtrl2()
			
	def GetRecord2(self, record):
		try:
			self.idporcentaje = int(record)
		except:
			return False
		sql = """
		select porcentaje, fk_desarrollo from %s where codigo = %s
		""" % (self.dbtable2, self.idporcentaje)
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		cursor.close()
		self.original2[ID_TEXTCTRLVENDEDORCOMISIONCOMISION] = float(row[0])
		self.original2[ID_CHOICEVENDEDORDESARROLLOCOMISION] = int(row[1])
		self.GetControl(ID_TEXTCTRLVENDEDORCODIGOCOMISION).SetValue(str(self.idporcentaje))
		self.GetControl(ID_CHOICEVENDEDORDESARROLLOCOMISION).SetSelection(SetChoiceIndex())
		self.DespliegaChoice(ID_CHOICEVENDEDORDESARROLLOCOMISION, valor = int(row[1]))
		self.GetControl(ID_TEXTCTRLVENDEDORCOMISIONCOMISION).SetValue(str(float(row[0])))
		return True
	
	def OnAgregar2(self, event):
		self.HabilitaComisiones()
		self.agregar2, self.NewFlag2, self.FillingARecord2 = True, True, True
		self.GetControl(ID_TEXTCTRLVENDEDORCODIGOCOMISION).SetValue("")
		self.validacontroles2 = False
		self.CleanForm2()
		self.validacontroles2 = True
		self.ObtenerDesarrollos()
		self.GetControl(ID_BUTTONVENDEDORAGREGARCOMISION).Enable(False)
		self.GetControl(ID_BUTTONVENDEDORELIMINARCOMISION).Enable(False)
		self.GetControl(ID_BUTTONVENDEDORGUARDARCOMISION).Enable(True)
		self.FillingARecord2 = False
		self.GetControl(ID_CHOICEVENDEDORDESARROLLOCOMISION).SetFocus()
		
	def OnEliminar2(self, event):
		if self.idporcentaje == "":
			Mensajes().Info(self, u"No se ha especificado el Registro a Eliminar", u"Atenci�n")
			return
		else:
			if Mensajes().YesNo(self,u"� Desea realmente eliminar el registro %s ?"
								% self.idporcentaje, u"Confirmaci�n"):
				if self.DeleteRecord2():
					desarrollo = self.GetControl(ID_CHOICEVENDEDORDESARROLLOCOMISION).GetStringSelection()
					porcentaje = self.GetControl(ID_TEXTCTRLVENDEDORCOMISIONCOMISION).GetValue()
					hash = self.Hash("%s%020d" % (self.dbtable, self.idvendedor))
					if self.GetBlog(hash, codigo = self.idvendedor):
						self.SetBlog(desarrollo, porcentaje)
					elif self.GetBlog(hash, codigo = self.idvendedor):
						self.SetBlog(desarrollo, porcentaje)
					self.FillListCtrl2()
					self.validacontroles2 = False
					self.CleanForm2()
					self.validacontroles2 = True
					self.HabilitaComisiones(False)
					
		event.Skip()
		
	def SetBlog(self, desarrollo, porcentaje):
		contenido = u"Eliminaci�n de Comisi�n %s: %s %s%s" \
				  % (int(self.idporcentaje), desarrollo, str(amount_and_cents_with_commas(float(porcentaje))), "%")
		sql = """
		insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario,
		Extension, Estatus) values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
		""" % (self.BlogGUID, self.usuario, contenido, "", "", "")
		if not self.QueryUpdateRecord(sql):
			Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
	
	def DeleteRecord2(self):
		sql = "delete from %s where codigo = %s" % (self.dbtable2, self.idporcentaje)
		try:
			cursor = r_cn.cursor()
			cursor.execute(str(sql))
			cursor.close()
			r_cn.commit()
			return True
		except:
			r_cn.rollback()
			Mensajes().Info(self,u"Sucedi� algo que impidi� eliminar este registro.\n" \
							u"Quiz� se deba a que hay otra informaci�n\nque depende de este registro.\n%s"
							% sql, u"Atenci�n")
			return False
		
	def OnGuardar2(self, event):
		F, N = self.FillingARecord2, self.NewFlag2
		self.FillingARecord2, self.NewFlag2 = False, False
		todobien = self.Text2()
		self.onguardar2 = False
		self.FillingARecord2, self.NewFlag2 = F, N
		if todobien:
			self.FillingARecord2 = True
			self.LCtrl2(True)
			self.FillingARecord2 = False
		self.onguardar2 = True
		event.Skip()
	
	def GuardarDetalle2(self, onguardar = False):
		self.SaveRecord2(onguardar)
	
	def SaveRecord2(self, onguardar = False):
		wx.BeginBusyCursor()
		if self.agregar2:
			bienGrabado, self.idporcentaje = self.AddRecord2()
		else:
			bienGrabado = self.UpdateRecord2()
		wx.EndBusyCursor()
			
		if bienGrabado:
			lctrl = self.GetControl(ID_LISTCTRLVENDEDORCOMISION)
			if self.agregar2:
				self.FillListCtrl2()
				lctrl.SetItemState(self.ctrlindex2, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
				self.GetRecord2(record = self.idporcentaje)
			else:
				if onguardar:
					self.FillListCtrl2()
					lctrl.SetItemState(self.ctrlindex2, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
					self.GetRecord2(record = self.idporcentaje)
				else:
					try:
						self.idporcentaje = self.datointerno2
						self.FillListCtrl2()
						lctrl.SetItemState(self.ctrlindex2, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
						self.GetRecord2(record = self.idporcentaje)
					except:
						pass
		else:
			Mensajes().Info(self, u"� El Registro no fue grabado !", u"Atenci�n")
			
	def UpdateRecord2(self, querycancelar = ""):
		comision = self.GetControl(ID_TEXTCTRLVENDEDORCOMISIONCOMISION).GetValue()
		inx = self.GetControl(ID_CHOICEVENDEDORDESARROLLOCOMISION).GetSelection()
		desarrollo = self.GetControl(ID_CHOICEVENDEDORDESARROLLOCOMISION).GetClientData(inx)
		setListForQuery = """
		porcentaje = %s, fk_desarrollo = %s
		""" % (float(comision), int(desarrollo))
		sql = "update %s set %s where codigo = %s" % (self.dbtable2, setListForQuery, self.idporcentaje)
		queTal, trash = self.QueryUpdateRecord(sql)
		if queTal:
			desarrollo = self.GetControl(ID_CHOICEVENDEDORDESARROLLOCOMISION).GetStringSelection()
			porcentaje = self.GetControl(ID_TEXTCTRLVENDEDORCOMISIONCOMISION).GetValue()
			hash = self.Hash("%s%020d" % (self.dbtable, self.idvendedor))
			if self.GetBlog(hash, codigo = self.idvendedor):
				contenido = u"Edici�n de Comisi�n %s: %s %s%s" \
						  % (int(self.idporcentaje), desarrollo, str(amount_and_cents_with_commas(float(porcentaje))), "%")
				sql = """
				insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario,
				Extension, Estatus) values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
				""" % (self.BlogGUID, self.usuario, contenido, "", "", "")
				if not self.QueryUpdateRecord(sql):
					Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
		
		return queTal
	
	def AddRecord2(self):
		comision = self.GetControl(ID_TEXTCTRLVENDEDORCOMISIONCOMISION).GetValue()
		inx = self.GetControl(ID_CHOICEVENDEDORDESARROLLOCOMISION).GetSelection()
		desarrollo = self.GetControl(ID_CHOICEVENDEDORDESARROLLOCOMISION).GetClientData(inx)
		sqlFields = """
		codigo, porcentaje, fk_desarrollo, fk_vendedor
		"""
		sqlmax = "select max(codigo) from %s" % self.dbtable2
		cursor = r_cn.cursor()
		cursor.execute(str(sqlmax))
		row = fetchone(cursor)
		cursor.close()
		if row is None:
			return False, 0
		codigo = int(row[0]) + 1
		sqlValues = """
		%s, %s, %s, %s
		""" % (codigo, float(comision), int(desarrollo), int(self.idvendedor))
		sql = """
		insert into %s (%s) values (%s)
		""" % (self.dbtable2, sqlFields, sqlValues) 
		queTal, trash =  self.QueryUpdateRecord(sql)
		if queTal:
			self.GetControl(ID_TEXTCTRLVENDEDORCODIGOCOMISION).SetValue(str(codigo))
			desarrollo = self.GetControl(ID_CHOICEVENDEDORDESARROLLOCOMISION).GetStringSelection()
			porcentaje = self.GetControl(ID_TEXTCTRLVENDEDORCOMISIONCOMISION).GetValue()
			hash = self.Hash("%s%020d" % (self.dbtable, self.idvendedor))
			if self.GetBlog(hash, codigo = self.idvendedor):
				contenido = u"Alta de Comisi�n %s: %s %s%s" \
						  % (int(codigo), desarrollo, str(amount_and_cents_with_commas(float(porcentaje))), "%")
				sql = """
				insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario,
				Extension, Estatus) values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
				""" % (self.BlogGUID, self.usuario, contenido, "", "", "")
				if not self.QueryUpdateRecord(sql):
					Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")

		return queTal, codigo
	
class GixContratosObrasConvenios(wx.Frame, GixBase):
	dbtable = "gixcontratosobras"; dbtable2 = "gixcontratosconvenios"
	campos = {ID_CHOICECONTRATOOBRAEMPRESA:"ch", ID_CHOICECONTRATOOBRADESARROLLO:"ch", ID_CHOICECONTRATOOBRAETAPA:"ch",
		  ID_CHOICECONTRATOOBRAPROVEEDOR:"ch", ID_TEXTCTRLCONTRATOOBRANOMBRE:"tc", ID_TEXTCTRLCONTRATOOBRAFECHA:"tc",
		  ID_TEXTCTRLCONTRATOOBRAVALOR:"tc", ID_TEXTCTRLCONTRATOOBRANOTAS:"tc", ID_RADIOBOXCONTRATOOBRAESTATUS:"rb",
		  ID_TEXTCTRLCONTRATOOBRAESTIMACION:"tc"}
	campos2 = {ID_TEXTCTRLCONTRATOOBRACONVENIOFECHA:"tc", ID_TEXTCTRLCONTRATOOBRACONVENIOCANTIDAD:"tc",
		   ID_CHOICECONTRATOOBRACONVENIOCONTRATO:"ch", ID_TEXTCTRLCONTRATOOBRACONVENIONOTAS:"tc"}
	DicDatesAndTxt = {ID_BITMAPBUTTONCONTRATOOBRAFECHA : ID_TEXTCTRLCONTRATOOBRAFECHA,
			  ID_BITMAPBUTTONCONTRATOOBRACONVENIOFECHA : ID_TEXTCTRLCONTRATOOBRACONVENIOFECHA}
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize,
		     style = wx.DEFAULT_FRAME_STYLE, usuario = None):
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		self.parent = parent
		self.usuario = usuario
		self.textevent = True
		self.textevent2 = True
		self.datointerno = ""
		self.FillingARecord = True
		self.validacontroles = True
		self.onguardar = True
		self.ctrlindex = 0
		
		self.mb = CONTRATOOBRAMenuBarFunc()
		self.SetMenuBar(self.mb)
		self.tb = self.CreateToolBar(wx.TB_HORIZONTAL | wx.NO_BORDER | wx.TB_FLAT) # | wx.TB_TEXT )
		CONTRATOOBRAToolBarFunc(self.tb)
		panel = wx.Panel(self, -1)
		ContratosObraFuncion(panel, True, True)
		
		wx.EVT_CLOSE(self, self.OnSalir)
		self.Bind(wx.EVT_MENU, self.OnAgregar, id = ID_MENUCONTRATOOBRAARCHIVOAGREGAR)
		self.Bind(wx.EVT_MENU, self.OnEliminar, id = ID_MENUCONTRATOOBRAARCHIVOELIMINAR)
		self.Bind(wx.EVT_MENU, self.OnGuardar, id = ID_MENUCONTRATOOBRAARCHIVOGUARDAR)
		self.Bind(wx.EVT_MENU, self.OnSalir, id = ID_MENUCONTRATOOBRASALIR)
		self.Bind(wx.EVT_TOOL, self.OnAgregar, id = ID_TOOLCONTRATOOBRAAGREGAR)
		self.Bind(wx.EVT_TOOL, self.OnEliminar, id = ID_TOOLCONTRATOOBRAELIMINAR)
		self.Bind(wx.EVT_TOOL, self.OnGuardar, id = ID_TOOLCONTRATOOBRAGUARDAR)
		self.Bind(wx.EVT_CHOICE, self.OnChoiceFiltro, id = ID_CHOICECONTRATOOBRAESTATUSFILTRO)
		self.Bind(wx.EVT_CHOICE, self.OnChoiceFiltro, id = ID_CHOICECONTRATOOBRAEMPRESAFILTRO)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnLCtrl, id = ID_LISTCTRLCONTRATOOBRA)
		self.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.OnRightClick, id = ID_LISTCTRLCONTRATOOBRA)
		self.Bind(wx.EVT_CHOICE, self.OnChoice, id = ID_CHOICECONTRATOOBRAEMPRESA)
		self.Bind(wx.EVT_CHOICE, self.OnChoice, id = ID_CHOICECONTRATOOBRADESARROLLO)
		self.Bind(wx.EVT_CHOICE, self.OnChoice, id = ID_CHOICECONTRATOOBRAETAPA)
		self.Bind(wx.EVT_CHOICE, self.OnChoice, id = ID_CHOICECONTRATOOBRAPROVEEDOR)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLCONTRATOOBRANOMBRE)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLCONTRATOOBRAFECHA)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLCONTRATOOBRAVALOR)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLCONTRATOOBRAESTIMACION)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLCONTRATOOBRANOTAS)
		wx.EVT_RADIOBOX(self, ID_RADIOBOXCONTRATOOBRAESTATUS, self.OnRadioBox)
		self.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGED, self.OnChangeNoteBook, id = ID_NOTEBOOKCONTRATOOBRA)
		self.Bind(wx.EVT_TEXT, self.OnText2, id = ID_TEXTCTRLCONTRATOOBRACONVENIOFECHA)
		self.Bind(wx.EVT_TEXT, self.OnText2, id = ID_TEXTCTRLCONTRATOOBRACONVENIOCANTIDAD)
		self.Bind(wx.EVT_CHOICE, self.OnChoice2, id = ID_CHOICECONTRATOOBRACONVENIOCONTRATO)
		self.Bind(wx.EVT_TEXT, self.OnText2, id = ID_TEXTCTRLCONTRATOOBRACONVENIONOTAS)
		self.Bind(wx.EVT_BUTTON, self.OnAgregar2, id = ID_BUTTONCONTRATOOBRACONVENIOAGREGAR)
		self.Bind(wx.EVT_BUTTON, self.OnGuardar2, id = ID_BUTTONCONTRATOOBRACONVENIOGUARDAR)
		self.Bind(wx.EVT_BUTTON, self.OnEliminar2, id = ID_BUTTONCONTRATOOBRACONVENIOELIMINAR)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnLCtrl2, id = ID_LISTCTRLCONTRATOOBRACONVENIO)
		self.GetControl(ID_TEXTCTRLCONTRATOOBRANOTAS).SetMaxLength(255)
		self.GetControl(ID_TEXTCTRLCONTRATOOBRACONVENIONOTAS).SetMaxLength(255)
		for v in self.DicDatesAndTxt.keys():
			self.Bind(wx.EVT_BUTTON, self.OnFechaButton, id = v )

		anchos = [-1, 120, 200]
		self.CreateStatusBar(3)
		self.SetStatusWidths(anchos)
		self.SetStatusText(u"Contratos de Obra", 1)
		self.SetStatusText(u"Control de Proveedores de Obra", 2)

		if wx.Platform == '__WXMSW__':
			self.GetControl(ID_LISTCTRLCONTRATOOBRA).SetSize(wx.Size(410, 600))
			self.GetControl(ID_NOTEBOOKCONTRATOOBRA).SetSize(wx.Size(440, 600))
		else:
			self.GetControl(ID_LISTCTRLCONTRATOOBRA).SetSize(wx.Size(410, 650))
			self.GetControl(ID_NOTEBOOKCONTRATOOBRA).SetSize(wx.Size(410, 650))
			self.GetControl(ID_LISTCTRLCONTRATOOBRACONVENIO).SetSize(wx.Size(420, 200))
		
		self.currentitem = ""; self.original = {}
		self.idcontratoobra, self.agregar = 0,0
		
		if self.ObtenerEmpresasFiltro():
			self.GetControl(ID_CHOICECONTRATOOBRAEMPRESAFILTRO).SetSelection(0)
		self.GetControl(ID_CHOICECONTRATOOBRAESTATUSFILTRO).SetSelection(1)
		self.GetControl(ID_TEXTCTRLCONTRATOOBRACONVENIOVALORCONTRATO).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLCONTRATOOBRACONVENIOCONVENIOS).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLCONTRATOOBRACONVENIOVAORTOTAL).SetBackgroundColour(wx.Colour(153,255,153))
		self.FillListCtrl()
		
	def OnSalir(self, event):
		self.Destroy()
		
	def ObtenerEmpresasFiltro(self):
		exist = False
		control = self.GetControl(ID_CHOICECONTRATOOBRAEMPRESAFILTRO)
		control.Clear()
		sql = """
		select EmpresaID, Razonsocial from cont_Empresas where activarecfin = 'S' order by RazonSocial
		"""
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			exist = True
			control.Append("<Todo>", 0)
			for row in rows:
				control.Append(str(row[1]), int(row[0]))
		return exist
				
	def OnRightClick(self, event):
		self.idregistryblog = self.idcontratoobra
		self.idtitleblog = "Registro"
		if not hasattr(self, "ID_VIEWBLOG"):
			ID_VIEWBLOG = wx.NewId(); ID_ADDBLOG = wx.NewId()
			self.Bind(wx.EVT_MENU, self.OnViewBlog, id = ID_VIEWBLOG)
			self.Bind(wx.EVT_MENU, self.OnAddBlog, id = ID_ADDBLOG)
		popup = wx.Menu()
		popup.Append(ID_VIEWBLOG, u"Consultar el Blog del %s %s" % (self.idtitleblog, self.idregistryblog))
		popup.Append(ID_ADDBLOG, u"Participar en el Blog...")
		self.PopupMenu(popup)
		popup.Destroy()

	def OnViewBlog(self, event):
		goal = ((90, u"Fecha"), (90, u"Hora"), (100, u"Usuario"), (300, u"Blog"))
		query = """
		select convert(varchar(50), FechaCaptura, 103), convert(varchar(50), FechaCaptura, 108),
		UsuarioCaptura, ContenidoText from Blogs
		where BlogGUID = '%s' order by FechaCaptura desc;
		select count(*) from Blogs where BlogGUID = '%s'
		""" % (self.BlogGUID, self.BlogGUID)
		title = u"Consultando el Blog %s %s" % (self.idtitleblog, self.idregistryblog)
		table = "Blogs"
		frame = GixFrameCatalogo(self, -1, title, wx.Point(20,20), wx.Size(800,600), 
								 wx.DEFAULT_FRAME_STYLE, None, None, None, table, goal, query,
								 gridsize = [680,350], color = "AQUAMARINE")
		frame.Centre(wx.BOTH)
		frame.Show(True)
		
	def OnAddBlog(self, event):
		blog = wx.TextEntryDialog(self, u"Digite", u"Participando en el Blog %s %s"
								  % (self.idtitleblog, self.idregistryblog),
								  defaultValue = "", style = wx.OK | wx.TE_MULTILINE)
		blog.SetSize(wx.Size(400,300))
		blog.Centre(wx.BOTH)
		blog.ShowModal()
		comment = blog.GetValue()
		blog.Destroy()
		if comment:
			sql = """
			insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension)
			values ('%s', getdate(), '%s', '%s', '%s', '%s')
			""" % (self.BlogGUID, self.usuario, comment, "", "")
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"� Problemas al actualizar el blog !", u"Atenci�n")
		
	def OnChoice(self, event):
		id = event.GetId()
		if id == ID_CHOICECONTRATOOBRAEMPRESA:
			self.ObtenerDesarrollos()
		elif id == ID_CHOICECONTRATOOBRADESARROLLO:
			self.ObtenerEtapas()
		self.Text()
		
	def OnChoiceFiltro(self, event):
		self.FillListCtrl()
	
	def OnAgregar(self, event):
		self.agregar, self.NewFlag, self.FillingARecord = True, True, True
		self.GetControl(ID_NOTEBOOKCONTRATOOBRA).Enable(True)
		self.GetControl(ID_NOTEBOOKCONTRATOOBRA).SetSelection(0)
		self.GetControl(ID_TEXTCTRLCONTRATOOBRAID).SetValue("")
		self.validacontroles = False
		self.CleanForm()
		self.validacontroles = True
		self.ObtenerEmpresas(); self.ObtenerProveedores()
		self.MenuSetter(ID_MENUCONTRATOOBRAARCHIVOAGREGAR, False)
		self.MenuSetter(ID_MENUCONTRATOOBRAARCHIVOELIMINAR, False)
		self.MenuSetter(ID_MENUCONTRATOOBRAARCHIVOGUARDAR, True)
		self.tb.EnableTool(ID_TOOLCONTRATOOBRAAGREGAR, False)
		self.tb.EnableTool(ID_TOOLCONTRATOOBRAELIMINAR, False)
		self.tb.EnableTool(ID_TOOLCONTRATOOBRAGUARDAR, True)
		self.FillingARecord = False
		self.GetControl(ID_CHOICECONTRATOOBRAEMPRESA).SetFocus()
		
	def OnEliminar(self, event):
		Mensajes().Info(self, u"� No puede eliminar un contrato de obra !\n\nSi desea no utilizarlo, desactivelo.", u"Atenci�n")
		
	def OnText(self, event):
		if self.validacontroles:
			self.ctrlactual = event.GetId()
			valor = self.GetControl(self.ctrlactual).GetValue().encode("iso8859-1")
			valornum = str(valor).replace('.',''); valornum = str(valornum).replace(':', '')
			if valor and not valornum.isdigit():
				if not str(valor).isupper():
					insertposition = self.GetControl(self.ctrlactual).GetInsertionPoint()
					if self.textevent:
						self.textevent = False
						self.GetControl(self.ctrlactual).SetValue(str(valor).upper())
					self.GetControl(self.ctrlactual).SetInsertionPoint(insertposition)
					
			self.Text()
	
	def Text(self, VengodelaLista = False, texto = True):
		if self.onguardar:
			self.textevent = True
			for id, tipo in self.campos.iteritems():
				control = self.GetControl(id)
				if tipo == "tc":
					valor = control.GetValue().strip()
				elif tipo == "ch":
					valor = control.GetSelection()
					if valor < 0:
						valor = ""
				if valor == "" and not self.FillingARecord and not self.NewFlag and id != ID_TEXTCTRLCONTRATOOBRANOTAS:
					self.NewFlag = True
					if not VengodelaLista:
						Mensajes().Info(self, u"� No debe quedar ning�n dato en blanco !", u"Atenci�n")
						return False
				
			if not self.FillingARecord:
				self.RevisaCambios()
	
		return True
			
	def RevisaCambios(self, cambioguardia = False, cambiopartida = False):
		for id, tipo in self.campos.iteritems():
			control = self.GetControl(id)
			if tipo == "tc":
				valor = control.GetValue()
				if id in (ID_TEXTCTRLCONTRATOOBRAVALOR, ID_TEXTCTRLCONTRATOOBRAESTIMACION) and valor:
					valor = float(valor)
				if valor != self.original[id]:
					control.SetBackgroundColour(wx.CYAN)
					cambioguardia = True
				else:
					control.SetBackgroundColour(wx.WHITE)
			elif tipo == "ch":
				index = control.GetSelection()
				if index < 0:
					control.SetBackgroundColour(wx.WHITE)
				else:
					valor = control.GetClientData(index)
					if valor != self.original[id]:
						control.SetBackgroundColour(wx.CYAN)
						cambioguardia = True
					else:
						control.SetBackgroundColour(wx.WHITE)
			elif tipo == "rb":
				valor = control.GetStringSelection()
				if valor == "Activado":
					valor = 1
				else:
					valor = 0
				if valor != self.original[id]:
					control.SetOwnBackgroundColour(wx.CYAN)
					cambioguardia = True
				else:
					control.SetOwnBackgroundColour(wx.NullColour)
			control.Refresh()
		
		if cambioguardia:
			self.MenuSetter(ID_MENUCONTRATOOBRAARCHIVOAGREGAR, False)
			self.MenuSetter(ID_MENUCONTRATOOBRAARCHIVOELIMINAR, False)
			self.MenuSetter(ID_MENUCONTRATOOBRAARCHIVOGUARDAR, True)
			self.tb.EnableTool(ID_TOOLCONTRATOOBRAAGREGAR, False)
			self.tb.EnableTool(ID_TOOLCONTRATOOBRAELIMINAR, False)
			self.tb.EnableTool(ID_TOOLCONTRATOOBRAGUARDAR, True)
		else:
			self.MenuSetter(ID_MENUCONTRATOOBRAARCHIVOAGREGAR, True)
			self.MenuSetter(ID_MENUCONTRATOOBRAARCHIVOELIMINAR, True)
			self.MenuSetter(ID_MENUCONTRATOOBRAARCHIVOGUARDAR, False)
			self.tb.EnableTool(ID_TOOLCONTRATOOBRAAGREGAR, True)
			self.tb.EnableTool(ID_TOOLCONTRATOOBRAELIMINAR, True)
			self.tb.EnableTool(ID_TOOLCONTRATOOBRAGUARDAR, False)
	
	def OnRadioBox(self, event):
		if not self.FillingARecord:
			self.RevisaCambios()
	
	def OnLCtrl(self, event):
		self.agregar = False
		self.FillingARecord = True
		self.currentitem = event.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLCONTRATOOBRA).GetItem(self.currentitem, 0).GetText()
		self.datointerno = int(datointerno)
		self.LCtrl()
		self.FillingARecord = False
		self.GetControl(ID_NOTEBOOKCONTRATOOBRA).SetSelection(0)
		event.Skip()

	def LCtrl(self, onguardar = False):
		cambio = False
		if self.tb.GetToolEnabled(ID_TOOLCONTRATOOBRAGUARDAR):
			for id, tipo in self.campos.iteritems():
				control = self.GetControl(id)
				if tipo == "tc":
					valor = control.GetValue()
					if valor != self.original[id]:
						cambio = True
				elif tipo == "ch":
					index = control.GetSelection()
					valor = control.GetClientData(index)
					if valor != self.original[id]:
						cambio = True
				elif tipo == "rb":
					valor = control.GetStringSelection()
					if valor == "Activado":
						valor = 1
					else:
						valor = 0
					if valor != self.original[id]:
						cambio = True
			
		if cambio:
			self.NewFlag = False
			self.Text(True)
			if not self.NewFlag:
				if onguardar:
					if Mensajes().YesNo(self,u"� Desea realmente grabar la informaci�n ?", u"Confirmaci�n"):
						self.GuardarDetalle(onguardar)
				else:
					if self.GetControl(ID_TEXTCTRLCONTRATOOBRAID).GetValue():
						Mensajes().Info(self, u"� No guardo los cambios del contrato de obra %s !\n\n" \
										u"Por lo tanto, no ser ver� afectado el registro del contrato." \
										% self.idcontratoobra, u"Atenci�n")
					else:
						Mensajes().Info(self, u"� No guardo el nuevo contrato de obra !\n\n" \
										u"Por lo tanto, no quedar� registrado.", u"Atenci�n")
						
				for id, tipo in self.campos.iteritems():
					ctrl = self.GetControl(id)
					if tipo in ("tc", "ch"):
						ctrl.SetBackgroundColour(wx.WHITE)
					elif tipo == "rb":
						ctrl.SetOwnBackgroundColour(wx.NullColour)
					ctrl.Refresh()

		if self.datointerno:
			if self.GetRecord(record = self.datointerno):
				self.MenuSetter(ID_MENUCONTRATOOBRAARCHIVOAGREGAR, True)
				self.MenuSetter(ID_MENUCONTRATOOBRAARCHIVOELIMINAR, True)
				self.MenuSetter(ID_MENUCONTRATOOBRAARCHIVOGUARDAR, False)
				self.tb.EnableTool(ID_TOOLCONTRATOOBRAAGREGAR, True)
				self.tb.EnableTool(ID_TOOLCONTRATOOBRAELIMINAR, True)
				self.tb.EnableTool(ID_TOOLCONTRATOOBRAGUARDAR, False)
				self.GetControl(ID_NOTEBOOKCONTRATOOBRA).Enable(True)
				self.editable = True
			else:
				Mensajes().Warn(self, u"Escoja un registro v�lido", u"Atenci�n")
		else:
			self.FillListCtrl()
			
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
		return dato
	
	def ObtenerEmpresas(self):
		self.GetControl(ID_CHOICECONTRATOOBRAETAPA).Clear()
		self.GetControl(ID_CHOICECONTRATOOBRADESARROLLO).Clear()
		control = self.GetControl(ID_CHOICECONTRATOOBRAEMPRESA); control.Clear()
		sql = """
		select EmpresaID, Razonsocial from cont_Empresas where activarecfin = 'S' order by RazonSocial
		"""
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(str(row[1]), int(row[0]))
				
	def ObtenerDesarrollos(self):
		self.GetControl(ID_CHOICECONTRATOOBRAETAPA).Clear()
		control = self.GetControl(ID_CHOICECONTRATOOBRADESARROLLO); control.Clear()
		ctrl = self.GetControl(ID_CHOICECONTRATOOBRAEMPRESA); index = ctrl.GetSelection()
		if index > -1:
			idempresa = ctrl.GetClientData(index)
			if idempresa > 0:
				sql = """
				select codigo, descripcion from DESARROLLO where fk_empresa = %s order by descripcion
				""" % idempresa
				cu = r_cn.cursor()
				cu.execute(str(sql))
				rows = fetchall(cu)
				cu.close()
				if rows:
					for row in rows:
						control.Append(self.GetString(row[1]), int(row[0]))
				
	def ObtenerEtapas(self):
		control = self.GetControl(ID_CHOICECONTRATOOBRAETAPA); control.Clear()
		ctrl = self.GetControl(ID_CHOICECONTRATOOBRADESARROLLO); index = ctrl.GetSelection()
		if index > -1:
			iddesarrollo = ctrl.GetClientData(index)
			if iddesarrollo > 0:
				sql = """
				select codigo, descripcion from ETAPA where fk_desarrollo = %s order by descripcion
				""" % iddesarrollo
				cu = r_cn.cursor()
				cu.execute(str(sql))
				rows = fetchall(cu)
				cu.close()
				if rows:
					for row in rows:
						control.Append(self.GetString(row[1]), int(row[0]))
				
	def ObtenerProveedores(self):
		control = self.GetControl(ID_CHOICECONTRATOOBRAPROVEEDOR)
		control.Clear()
		sql = """
		select idproveedor, razonsocial from gixproveedoresobras where estatus = 1 order by razonsocial
		"""
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(self.GetString(row[1]), int(row[0]))
		
	def DespliegaChoice(self, id, valor):
		choice = self.GetControl(id)
		for inx in range(0, choice.GetCount()):
			if valor == choice.GetClientData(inx):
				choice.SetSelection(inx)
				break
		
	def GetRecord(self, record):
		try:
			self.idcontratoobra = int(record)
		except:
			return False
		sql = """
		select fkempresa, fkdesarrollo, fketapa, fkproveedor, nombreobra, valorcontrato, estimacionproveedor,
		convert(varchar(10), fecha, 103), notas, activo, convert(varchar(100), BlogGUID)
		from %s where idcontratoobra = %s
		""" % (self.dbtable, self.idcontratoobra)
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		cursor.close()
		self.original[ID_CHOICECONTRATOOBRAEMPRESA] = int(row[0])
		self.original[ID_CHOICECONTRATOOBRADESARROLLO] = int(row[1])
		self.original[ID_CHOICECONTRATOOBRAETAPA] = int(row[2])
		self.original[ID_CHOICECONTRATOOBRAPROVEEDOR] = int(row[3])
		self.original[ID_TEXTCTRLCONTRATOOBRANOMBRE] = self.GetString(row[4])
		self.original[ID_TEXTCTRLCONTRATOOBRAVALOR] = float(row[5])
		self.original[ID_TEXTCTRLCONTRATOOBRAESTIMACION] = float(row[6])
		self.original[ID_TEXTCTRLCONTRATOOBRAFECHA] = self.GetString(row[7])
		self.original[ID_TEXTCTRLCONTRATOOBRANOTAS] = self.GetString(row[8])
		self.original[ID_RADIOBOXCONTRATOOBRAESTATUS] = int(row[9])
		
		self.GetControl(ID_TEXTCTRLCONTRATOOBRAID).SetValue(str(self.idcontratoobra))
		self.ObtenerEmpresas()
		self.GetControl(ID_CHOICECONTRATOOBRAEMPRESA).SetSelection(SetChoiceIndex())
		self.DespliegaChoice(ID_CHOICECONTRATOOBRAEMPRESA, valor = int(row[0]))
		self.ObtenerDesarrollos()
		self.GetControl(ID_CHOICECONTRATOOBRADESARROLLO).SetSelection(SetChoiceIndex())
		self.DespliegaChoice(ID_CHOICECONTRATOOBRADESARROLLO, valor = int(row[1]))
		self.ObtenerEtapas()
		self.GetControl(ID_CHOICECONTRATOOBRAETAPA).SetSelection(SetChoiceIndex())
		self.DespliegaChoice(ID_CHOICECONTRATOOBRAETAPA, valor = int(row[2]))
		self.ObtenerProveedores()
		self.GetControl(ID_CHOICECONTRATOOBRAPROVEEDOR).SetSelection(SetChoiceIndex())
		self.DespliegaChoice(ID_CHOICECONTRATOOBRAPROVEEDOR, valor = int(row[3]))
		self.GetControl(ID_TEXTCTRLCONTRATOOBRANOMBRE).SetValue(self.GetString(row[4]))
		self.GetControl(ID_TEXTCTRLCONTRATOOBRAVALOR).SetValue(self.GetString(row[5]))
		self.GetControl(ID_TEXTCTRLCONTRATOOBRAESTIMACION).SetValue(self.GetString(row[6]))
		self.GetControl(ID_TEXTCTRLCONTRATOOBRAFECHA).SetValue(self.GetString(row[7]))
		self.GetControl(ID_TEXTCTRLCONTRATOOBRANOTAS).SetValue(self.GetString(row[8]))
		if int(row[9]):
			self.GetControl(ID_RADIOBOXCONTRATOOBRAESTATUS).SetStringSelection("Activado")
		else:
			self.GetControl(ID_RADIOBOXCONTRATOOBRAESTATUS).SetStringSelection("Desactivado")
		self.BlogGUID = str(row[10])
			
		return True
	
	def GuardarDetalle(self, onguardar = False):
		self.SaveRecord(onguardar)
	
	def OnGuardar(self, event):
		F, N = self.FillingARecord, self.NewFlag
		self.FillingARecord, self.NewFlag = False, False
		todobien = self.Text()
		self.onguardar = False
		self.FillingARecord, self.NewFlag = F, N
		if todobien:
			self.FillingARecord = True
			self.LCtrl(True)
			self.FillingARecord = False
		self.onguardar = True
		event.Skip()
		
	def Hash(self, data):
		#m = md5.new()
		#m.update(data)
		return md5(data).hexdigest().upper()
	
	def SaveRecord(self, onguardar = False):
		wx.BeginBusyCursor()
		if self.agregar:
			bienGrabado, self.idcontratoobra = self.AddRecord()
		else:
			bienGrabado = self.UpdateRecord()
		wx.EndBusyCursor()
			
		if bienGrabado:
			lctrl = self.GetControl(ID_LISTCTRLCONTRATOOBRA)
			if self.agregar:
				self.FillListCtrl()
				lctrl.SetItemState(self.ctrlindex, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
				self.GetRecord(record = self.idcontratoobra)
			else:
				if onguardar:
					self.FillListCtrl()
					lctrl.SetItemState(self.ctrlindex, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
					self.GetRecord(record = self.idcontratoobra)
				else:
					try:
						self.idcontratoobra = self.datointerno
						self.FillListCtrl()
						lctrl.SetItemState(self.ctrlindex, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
						self.GetRecord(record = self.idcontratoobra)
					except:
						pass
		else:
			Mensajes().Info(self, u"� El Registro no fue grabado !", u"Atenci�n")
			
	def UpdateRecord(self, querycancelar = ""):
		inx = self.GetControl(ID_CHOICECONTRATOOBRAEMPRESA).GetSelection()
		fkempresa = self.GetControl(ID_CHOICECONTRATOOBRAEMPRESA).GetClientData(inx)
		inx = self.GetControl(ID_CHOICECONTRATOOBRADESARROLLO).GetSelection()
		fkdesarrollo = self.GetControl(ID_CHOICECONTRATOOBRADESARROLLO).GetClientData(inx)
		inx = self.GetControl(ID_CHOICECONTRATOOBRAETAPA).GetSelection()
		fketapa = self.GetControl(ID_CHOICECONTRATOOBRAETAPA).GetClientData(inx)
		inx = self.GetControl(ID_CHOICECONTRATOOBRAPROVEEDOR).GetSelection()
		fkproveedor = self.GetControl(ID_CHOICECONTRATOOBRAPROVEEDOR).GetClientData(inx)
		nombreobra = self.GetControl(ID_TEXTCTRLCONTRATOOBRANOMBRE).GetValue().strip()
		valorcontrato = self.GetControl(ID_TEXTCTRLCONTRATOOBRAVALOR).GetValue().strip()
		estimacionproveedor = self.GetControl(ID_TEXTCTRLCONTRATOOBRAESTIMACION).GetValue().strip()
		f_dia, f_mes, f_ano = self.GetControl(ID_TEXTCTRLCONTRATOOBRAFECHA).GetValue().split('/')
		fecha = "%04d/%02d/%02d" % (int(f_ano), int(f_mes), int(f_dia))
		notas = self.GetControl(ID_TEXTCTRLCONTRATOOBRANOTAS).GetValue().strip()
		valor = self.GetControl(ID_RADIOBOXCONTRATOOBRAESTATUS).GetStringSelection()
		activo = 0
		if valor == "Activado":
			activo = 1
		setListForQuery = """
		fkempresa = %s, fkdesarrollo = %s, fketapa = %s, fkproveedor = %s, nombreobra = '%s',
		valorcontrato = %s, estimacionproveedor = %s, fecha = '%s', notas = '%s', activo = %s
		""" % (int(fkempresa), int(fkdesarrollo), int(fketapa), int(fkproveedor), nombreobra,
			   float(valorcontrato), float(estimacionproveedor), fecha, notas, int(activo))
		sql = "update %s set %s where idcontratoobra = %s" % (self.dbtable, setListForQuery, self.idcontratoobra)
		queTal, trash = self.QueryUpdateRecord(sql)
		if queTal:
			contenido = u"Edici�n del registro"
			sql = """
			insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension, Estatus)
			values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
			""" % (self.BlogGUID, self.usuario, contenido, "", "", "")
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
		
		return queTal
	
	def AddRecord(self):
		inx = self.GetControl(ID_CHOICECONTRATOOBRAEMPRESA).GetSelection()
		fkempresa = self.GetControl(ID_CHOICECONTRATOOBRAEMPRESA).GetClientData(inx)
		inx = self.GetControl(ID_CHOICECONTRATOOBRADESARROLLO).GetSelection()
		fkdesarrollo = self.GetControl(ID_CHOICECONTRATOOBRADESARROLLO).GetClientData(inx)
		inx = self.GetControl(ID_CHOICECONTRATOOBRAETAPA).GetSelection()
		fketapa = self.GetControl(ID_CHOICECONTRATOOBRAETAPA).GetClientData(inx)
		inx = self.GetControl(ID_CHOICECONTRATOOBRAPROVEEDOR).GetSelection()
		fkproveedor = self.GetControl(ID_CHOICECONTRATOOBRAPROVEEDOR).GetClientData(inx)
		nombreobra = self.GetControl(ID_TEXTCTRLCONTRATOOBRANOMBRE).GetValue().strip()
		valorcontrato = self.GetControl(ID_TEXTCTRLCONTRATOOBRAVALOR).GetValue().strip()
		estimacionproveedor = self.GetControl(ID_TEXTCTRLCONTRATOOBRAESTIMACION).GetValue().strip()
		f_dia, f_mes, f_ano = self.GetControl(ID_TEXTCTRLCONTRATOOBRAFECHA).GetValue().split('/')
		fecha = "%04d/%02d/%02d" % (int(f_ano), int(f_mes), int(f_dia))
		notas = self.GetControl(ID_TEXTCTRLCONTRATOOBRANOTAS).GetValue().strip()
		valor = self.GetControl(ID_RADIOBOXCONTRATOOBRAESTATUS).GetStringSelection()
		activo = 0
		if valor == "Activado":
			activo = 1
		sqlFields = """
		fkempresa, fkdesarrollo, fketapa, fkproveedor, nombreobra, valorcontrato, estimacionproveedor, fecha, notas, activo
		"""
		sqlValues = """
		%s, %s, %s, %s, '%s', %s, %s, '%s', '%s', %s
		""" % (int(fkempresa), int(fkdesarrollo), int(fketapa), int(fkproveedor), nombreobra,
			   float(valorcontrato), float(estimacionproveedor), fecha, notas, int(activo))
		sql = """
		insert into %s (%s) values (%s)
		""" % (self.dbtable, sqlFields, sqlValues) 
		sqlmax = "select max(idcontratoobra) from %s" % self.dbtable
		queTal, identity =  self.QueryUpdateRecord(sql, sqlmax, True)
		if queTal:
			self.GetControl(ID_TEXTCTRLCONTRATOOBRAID).SetValue(str(identity))
			sql = "select convert(varchar(100), BlogGUID) from %s where idcontratoobra = %s" % \
				(self.dbtable, identity)
			cu = r_cn.cursor()
			cu.execute(str(sql))
			blog = fetchone(cu)
			cu.close()
			if blog is not None:
				self.BlogGUID = blog[0]
				sql = """
				insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura,
				ContenidoText, ContenidoBinario, Extension, Estatus)
				values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
				""" % (self.BlogGUID, self.usuario, "Alta del Contrato de Obra", "", "", "")
				if not self.QueryUpdateRecord(sql):
					Mensajes().Info(self, u"Problemas al actualizar el blog.\n\n" % sql, u"Atenci�n")

		return queTal, identity
	
	def CleanForm(self):
		self.original.clear()
		for id, tipo in self.campos.iteritems():
			self.original[id] = ""
			ctrl = self.GetControl(id)
			if tipo in ("tc", "ch"):
				ctrl.SetBackgroundColour(wx.WHITE)
			elif tipo == "rb":
				ctrl.SetOwnBackgroundColour(wx.NullColour)
			ctrl.Refresh()
		self.original[ID_RADIOBOXCONTRATOOBRAESTATUS] = 1
		
		self.GetControl(ID_TEXTCTRLCONTRATOOBRAID).SetValue("")
		self.GetControl(ID_CHOICECONTRATOOBRAEMPRESA).SetSelection(SetChoiceIndex())
		self.GetControl(ID_CHOICECONTRATOOBRADESARROLLO).SetSelection(SetChoiceIndex())
		self.GetControl(ID_CHOICECONTRATOOBRAETAPA).SetSelection(SetChoiceIndex())
		self.GetControl(ID_CHOICECONTRATOOBRAPROVEEDOR).SetSelection(SetChoiceIndex())
		self.GetControl(ID_TEXTCTRLCONTRATOOBRANOMBRE).SetValue("")
		self.GetControl(ID_TEXTCTRLCONTRATOOBRAFECHA).SetValue("")
		self.GetControl(ID_TEXTCTRLCONTRATOOBRAVALOR).SetValue("")
		self.GetControl(ID_TEXTCTRLCONTRATOOBRAESTIMACION).SetValue("")
		self.GetControl(ID_TEXTCTRLCONTRATOOBRANOTAS).SetValue("")
		self.GetControl(ID_RADIOBOXCONTRATOOBRAESTATUS).SetStringSelection("Activado")
		
	def FillListCtrl(self):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLCONTRATOOBRA)
		lctrl.Enable(False); lctrl.Show(False); lctrl.ClearAll()
		estatusfiltro = self.GetControl(ID_CHOICECONTRATOOBRAESTATUSFILTRO).GetSelection()
		countfiltro = False
		self.estatusfiltro = ""
		if estatusfiltro == 1:
			self.estatusfiltro = "where activo = 1"
			countfiltro = True
		elif estatusfiltro == 2:
			self.estatusfiltro = "where activo = 0"
			countfiltro = True
		self.empresafiltro = ""
		ctrl = self.GetControl(ID_CHOICECONTRATOOBRAEMPRESAFILTRO); index = ctrl.GetSelection()
		if index > -1:
			self.idempresafiltro = ctrl.GetClientData(index)
			if self.idempresafiltro > 0:
				if countfiltro: y = "and"
				else: y = "where"
				self.empresafiltro = "%s fkempresa = %s" % (y, self.idempresafiltro)
		sql = """
		select idcontratoobra, nombreobra, convert(varchar(10), fecha, 103), valorcontrato, activo
		from %s %s %s order by nombreobra
		""" % (self.dbtable, self.estatusfiltro, self.empresafiltro)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		fila = 0
		if rows:
			lctrl.InsertColumn(0, u"Id", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"Nombre de la Obra")
			lctrl.InsertColumn(2, u"Fecha", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(3, u"Valor", wx.LIST_FORMAT_RIGHT)
			for row in rows:
				if not int(row[4]):
					if fila %2 != 0: bgcolor = [255,153,153]
					else:            bgcolor = [255,215,215]
				else:
					if fila %2 != 0: bgcolor = [204,204,255]
					else:            bgcolor = [230,230,255]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, self.GetString(row[1]))
				lctrl.SetStringItem(index, 2, self.GetString(row[2]))
				lctrl.SetStringItem(index, 3, self.GetString(amount_and_cents_with_commas(row[3])))
				lctrl.SetItemData(index, row[0])
				if int(row[0]) == self.idcontratoobra:
					self.ctrlindex = index
				fila += 1
			lctrl.SetColumnWidth(0, 50)
			lctrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(2, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(3, wx.LIST_AUTOSIZE)
		else:
			lctrl.InsertColumn(0, "       No Existen Registros", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 167)
			
		self.MenuSetter(ID_MENUCONTRATOOBRAARCHIVOAGREGAR, True)
		self.MenuSetter(ID_MENUCONTRATOOBRAARCHIVOELIMINAR, False)
		self.MenuSetter(ID_MENUCONTRATOOBRAARCHIVOGUARDAR, False)
		self.tb.EnableTool(ID_TOOLCONTRATOOBRAAGREGAR, True)
		self.tb.EnableTool(ID_TOOLCONTRATOOBRAELIMINAR, False)
		self.tb.EnableTool(ID_TOOLCONTRATOOBRAGUARDAR, False)
		self.GetControl(ID_NOTEBOOKCONTRATOOBRA).SetSelection(0)
		self.GetControl(ID_NOTEBOOKCONTRATOOBRA).Enable(False)
		lctrl.Show(True); lctrl.Enable(True)
		self.currentitemlst = []
		self.selecteditems = []
		self.validacontroles = False
		self.CleanForm()
		self.validacontroles = True
		wx.EndBusyCursor()
		#if self.currentitem:
			#lctrl.EnsureVisible(self.currentitem)
			
		salir = True
		self.NewFlag = False
		return salir, fila
	
	def HabilitaConvenios(self, bool = True):
		self.GetControl(ID_TEXTCONTRATOOBRACONVENIOID).Enable(bool)
		self.GetControl(ID_TEXTCTRLCONTRATOOBRACONVENIOID).Enable(bool)
		self.GetControl(ID_TEXTCONTRATOOBRACONVENIOFECHA).Enable(bool)
		self.GetControl(ID_TEXTCTRLCONTRATOOBRACONVENIOFECHA).Enable(bool)
		self.GetControl(ID_BITMAPBUTTONCONTRATOOBRACONVENIOFECHA).Enable(bool)
		self.GetControl(ID_TEXTCONTRATOOBRACONVENIOCANTIDAD).Enable(bool)
		self.GetControl(ID_TEXTCTRLCONTRATOOBRACONVENIOCANTIDAD).Enable(bool)
		self.GetControl(ID_TEXTCONTRATOOBRACONVENIOCONTRATO).Enable(bool)
		self.GetControl(ID_CHOICECONTRATOOBRACONVENIOCONTRATO).Enable(bool)
		self.GetControl(ID_TEXTCONTRATOOBRACONVENIONOTAS).Enable(bool)
		self.GetControl(ID_TEXTCTRLCONTRATOOBRACONVENIONOTAS).Enable(bool)
				
	def OnChangeNoteBook(self, event):
		control = self.GetControl(event.GetId())
		if control.GetSelection():
			idcontratoobra = self.GetControl(ID_TEXTCTRLCONTRATOOBRAID).GetValue()
			if idcontratoobra:
				valor = self.GetControl(ID_TEXTCTRLCONTRATOOBRAVALOR).GetValue()
				self.GetControl(ID_TEXTCTRLCONTRATOOBRACONVENIOVALORCONTRATO).\
					SetValue(str(amount_and_cents_with_commas(float(valor))))
				self.HabilitaConvenios(False)
				self.original2 = {}; self.datointerno2 = ""
				self.idcontratoconvenio, self.currentitem2, self.agregar2 = 0,0,0
				self.FillingARecord2, self.onguardar2, self.validacontroles2 = True, True, True
				nombreobra = self.GetControl(ID_TEXTCTRLCONTRATOOBRANOMBRE).GetValue()
				self.GetControl(ID_TEXTCONTRATOOBRANOMBRE2).SetLabel(nombreobra + " - ID " + idcontratoobra)
				self.FillListCtrl2()
			else:
				control.SetSelection(0)
				Mensajes().Info(self, u"Por favor guarde el contrato antes de ingresar a los convenios.", u"Aviso")
				
	def CleanForm2(self):
		self.original2.clear()
		for id, tipo in self.campos2.iteritems():
			self.original2[id] = ""
			ctrl = self.GetControl(id)
			ctrl.SetBackgroundColour(wx.WHITE)
			ctrl.Refresh()
		self.GetControl(ID_TEXTCTRLCONTRATOOBRACONVENIOID).SetValue("")
		self.GetControl(ID_TEXTCTRLCONTRATOOBRACONVENIOFECHA).SetValue("")
		self.GetControl(ID_TEXTCTRLCONTRATOOBRACONVENIOCANTIDAD).SetValue("")
		self.GetControl(ID_CHOICECONTRATOOBRACONVENIOCONTRATO).SetSelection(SetChoiceIndex())
		self.GetControl(ID_TEXTCTRLCONTRATOOBRACONVENIONOTAS).SetValue("")
		
	def FillListCtrl2(self):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLCONTRATOOBRACONVENIO)
		lctrl.Enable(False); lctrl.Show(False); lctrl.ClearAll()
		sql = """
		select idcontratoconvenio, convert(varchar(10), fecha, 103), cantidad, contrato
		from %s where fkcontratoobra = %s order by fecha
		""" % (self.dbtable2, self.idcontratoobra)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		fila, convenios, total = 0,0,0
		if rows:
			lctrl.InsertColumn(0, u"Id", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"Fecha", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(2, u"Cantidad", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(3, u"Contrato", wx.LIST_FORMAT_CENTER)
			for row in rows:
				if fila %2 != 0: bgcolor = [255,255,150]
				else:            bgcolor = [255,255,200]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				if str(row[3]) == "A":
					contrato = u"Aumenta"
					convenios += float(row[2])
				else:
					contrato = u"Disminuye"
					convenios -= float(row[2])
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, self.GetString(row[1]))
				lctrl.SetStringItem(index, 2, str(amount_and_cents_with_commas(row[2])))
				lctrl.SetStringItem(index, 3, contrato)
				lctrl.SetItemData(index, row[0])
				if int(row[0]) == self.idcontratoconvenio:
					self.ctrlindex2 = index
				fila += 1
			lctrl.SetColumnWidth(0, 45)
			lctrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(2, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(3, wx.LIST_AUTOSIZE)
		else:
			lctrl.InsertColumn(0, "       No Existen Registros", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 167)
		valor = self.GetControl(ID_TEXTCTRLCONTRATOOBRAVALOR).GetValue()
		total = float(valor) + convenios
		self.GetControl(ID_TEXTCTRLCONTRATOOBRACONVENIOCONVENIOS).\
			SetValue(str(amount_and_cents_with_commas(float(convenios))))
		self.GetControl(ID_TEXTCTRLCONTRATOOBRACONVENIOVAORTOTAL).\
			SetValue(str(amount_and_cents_with_commas(float(total))))
		self.GetControl(ID_BUTTONCONTRATOOBRACONVENIOAGREGAR).Enable(True)
		self.GetControl(ID_BUTTONCONTRATOOBRACONVENIOELIMINAR).Enable(False)
		self.GetControl(ID_BUTTONCONTRATOOBRACONVENIOGUARDAR).Enable(False)
		lctrl.Show(True); lctrl.Enable(True)
		self.currentitemlst2 = []
		self.selecteditems2 = []
		self.validacontroles2 = False
		self.CleanForm2()
		self.validacontroles2 = True
		wx.EndBusyCursor()
		if self.currentitem2:
			lctrl.EnsureVisible(self.currentitem2)
		salir = True
		self.NewFlag2 = False
		return salir, fila

	def OnChoice2(self, event):
		self.Text2()
	
	def OnText2(self, event):
		if self.validacontroles2:
			ctrlactual = event.GetId()
			if ctrlactual == ID_TEXTCTRLCONTRATOOBRACONVENIONOTAS:
				control = self.GetControl(ctrlactual)
				valor = control.GetValue().encode("iso8859-1")
				valornum = str(valor).replace('.',''); valornum = str(valornum).replace(':', '')
				if valor and not valornum.isdigit():
					if not str(valor).isupper():
						insertposition = control.GetInsertionPoint()
						if self.textevent2:
							self.textevent2 = False
							control.SetValue(str(valor).upper())
						control.SetInsertionPoint(insertposition)
					
			self.Text2()
		
	
	def Text2(self, VengodelaLista = False, texto = True):
		if self.validacontroles2:
			if self.onguardar2:
				self.textevent2 = True
				for id, tipo in self.campos2.iteritems():
					control = self.GetControl(id)
					if tipo == "tc":
						valor = control.GetValue().strip()
					elif tipo == "ch":
						valor = control.GetSelection()
						if valor < 0:
							valor = ""
					if valor == "" and not self.FillingARecord2 and not self.NewFlag2:
						self.NewFlag2 = True
						if not VengodelaLista:
							Mensajes().Info(self, u"� No debe quedar ning�n dato en blanco !", u"Atenci�n")
							return False
					
				if not self.FillingARecord2:
					self.RevisaCambios2()
	
		return True
			
	def RevisaCambios2(self, cambioguardia = False, cambiopartida = False):
		for id, tipo in self.campos2.iteritems():
			control = self.GetControl(id)
			if tipo == "tc":
				valor = control.GetValue()
				if valor and id == ID_TEXTCTRLCONTRATOOBRACONVENIOCANTIDAD:
					try:
						valor = float(valor)
					except:
						Mensajes().Info(self, u"� Error al ingresar la comisi�n !", u"Atenci�n")
						valor = self.original2[id]
						self.GetControl(id).SetValue(str(valor))
				if valor != self.original2[id]:
					control.SetBackgroundColour(wx.CYAN)
					cambioguardia = True
				else:
					control.SetBackgroundColour(wx.WHITE)
			elif tipo == "ch":
				valor = control.GetSelection()
				if valor > -1:
					if valor == 0:
						valor = "A"
					else:
						valor = "D"
					if valor != self.original2[id]:
						control.SetBackgroundColour(wx.CYAN)
						cambioguardia = True
					else:
						control.SetBackgroundColour(wx.WHITE)
				else:
					control.SetBackgroundColour(wx.WHITE)
					
			control.Refresh()
		
		if cambioguardia:
			self.GetControl(ID_BUTTONCONTRATOOBRACONVENIOAGREGAR).Enable(False)
			self.GetControl(ID_BUTTONCONTRATOOBRACONVENIOELIMINAR).Enable(False)
			self.GetControl(ID_BUTTONCONTRATOOBRACONVENIOGUARDAR).Enable(True)
		else:
			self.GetControl(ID_BUTTONCONTRATOOBRACONVENIOAGREGAR).Enable(True)
			self.GetControl(ID_BUTTONCONTRATOOBRACONVENIOELIMINAR).Enable(True)
			self.GetControl(ID_BUTTONCONTRATOOBRACONVENIOGUARDAR).Enable(False)
	
	def OnLCtrl2(self, event):
		self.currentitem2 = event.m_itemIndex
		self.agregar2 = False; self.FillingARecord2 = True
		datointerno2 = self.GetControl(ID_LISTCTRLCONTRATOOBRACONVENIO).GetItem(self.currentitem2, 0).GetText()
		self.datointerno2 = int(datointerno2)
		self.LCtrl2()
		self.FillingARecord2 = False

	def LCtrl2(self, onguardar = False):
		cambio = False
		if self.GetControl(ID_BUTTONCONTRATOOBRACONVENIOGUARDAR).IsEnabled():
			for id, tipo in self.campos2.iteritems():
				control = self.GetControl(id)
				if tipo == "tc":
					valor = control.GetValue()
					if valor != self.original2[id]:
						cambio = True
				elif tipo == "ch":
					valor = control.GetSelection()
					if valor > -1:
						if valor == 0:
							valor = "A"
						else:
							valor = "D"
					if valor != self.original2[id]:
						cambio = True
			
		if cambio:
			self.NewFlag2 = False
			self.Text2(True)
			if not self.NewFlag2:
				if onguardar:
					if Mensajes().YesNo(self,u"� Desea realmente grabar el convenio ?", u"Confirmaci�n"):
						self.GuardarDetalle2(onguardar)
					else:
						self.HabilitaConvenios(False)
				else:
					if self.GetControl(ID_TEXTCTRLCONTRATOOBRACONVENIOID).GetValue():
						Mensajes().Info(self, u"� No guardo los cambios del convenio %s !\n\n" \
										u"Por lo tanto, no ser ver� afectado el registro del contrato de obra." \
										% self.idcontratoconvenio, u"Atenci�n")
					else:
						Mensajes().Info(self, u"� No guardo el nuevo convenio !\n\n" \
										u"Por lo tanto, no quedar� registrado.", u"Atenci�n")
						
				for id, tipo in self.campos2.iteritems():
					ctrl = self.GetControl(id)
					ctrl.SetBackgroundColour(wx.WHITE)
					ctrl.Refresh()

		if self.datointerno2:
			if self.GetRecord2(record = self.datointerno2):
				self.GetControl(ID_BUTTONCONTRATOOBRACONVENIOAGREGAR).Enable(True)
				self.GetControl(ID_BUTTONCONTRATOOBRACONVENIOELIMINAR).Enable(True)
				self.GetControl(ID_BUTTONCONTRATOOBRACONVENIOGUARDAR).Enable(False)
				self.HabilitaConvenios()
				self.editable2 = True
			else:
				Mensajes().Warn(self, u"Escoja un registro v�lido", u"Atenci�n")
		else:
			self.FillListCtrl2()
			
	def GetRecord2(self, record):
		try:
			self.idcontratoconvenio = int(record)
		except:
			return False
		sql = """
		select convert(varchar(10), fecha, 103), cantidad, contrato, notas from %s where idcontratoconvenio = %s
		""" % (self.dbtable2, self.idcontratoconvenio)
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		cursor.close()
		self.original2[ID_TEXTCTRLCONTRATOOBRACONVENIOFECHA] = self.GetString(row[0])
		self.original2[ID_TEXTCTRLCONTRATOOBRACONVENIOCANTIDAD] = float(row[1])
		self.original2[ID_CHOICECONTRATOOBRACONVENIOCONTRATO] = self.GetString(row[2])
		self.original2[ID_TEXTCTRLCONTRATOOBRACONVENIONOTAS] = self.GetString(row[3])
		self.GetControl(ID_TEXTCTRLCONTRATOOBRACONVENIOID).SetValue(str(int(self.idcontratoconvenio)))
		self.GetControl(ID_TEXTCTRLCONTRATOOBRACONVENIOFECHA).SetValue(self.GetString(row[0]))
		self.GetControl(ID_TEXTCTRLCONTRATOOBRACONVENIOCANTIDAD).SetValue(str(float(row[1])))
		self.GetControl(ID_CHOICECONTRATOOBRACONVENIOCONTRATO).SetSelection(SetChoiceIndex())
		if self.GetString(row[2]) == "A":
			self.GetControl(ID_CHOICECONTRATOOBRACONVENIOCONTRATO).SetSelection(0)
		elif self.GetString(row[2]) == "D":
			self.GetControl(ID_CHOICECONTRATOOBRACONVENIOCONTRATO).SetSelection(1)
		self.GetControl(ID_TEXTCTRLCONTRATOOBRACONVENIONOTAS).SetValue(self.GetString(row[3]))
		return True
	
	def OnAgregar2(self, event):
		self.HabilitaConvenios()
		self.agregar2, self.NewFlag2, self.FillingARecord2 = True, True, True
		self.GetControl(ID_TEXTCTRLCONTRATOOBRACONVENIOID).SetValue("")
		self.validacontroles2 = False
		self.CleanForm2()
		self.validacontroles2 = True
		self.GetControl(ID_BUTTONCONTRATOOBRACONVENIOAGREGAR).Enable(False)
		self.GetControl(ID_BUTTONCONTRATOOBRACONVENIOELIMINAR).Enable(False)
		self.GetControl(ID_BUTTONCONTRATOOBRACONVENIOGUARDAR).Enable(True)
		self.FillingARecord2 = False
		self.GetControl(ID_BITMAPBUTTONCONTRATOOBRACONVENIOFECHA).SetFocus()
		
	def OnEliminar2(self, event):
		if self.idcontratoconvenio == "":
			Mensajes().Info(self, u"No se ha especificado el Registro a Eliminar", u"Atenci�n")
			return
		else:
			if Mensajes().YesNo(self,u"� Desea realmente eliminar el registro %s ?"
								% self.idcontratoconvenio, u"Confirmaci�n"):
				if self.DeleteRecord2():
					fecha = self.GetControl(ID_TEXTCTRLCONTRATOOBRACONVENIOFECHA).GetValue()
					cantidad = self.GetControl(ID_TEXTCTRLCONTRATOOBRACONVENIOCANTIDAD).GetValue()
					inx = self.GetControl(ID_CHOICECONTRATOOBRACONVENIOCONTRATO).GetSelection()
					if inx > -1:
						if inx == 0:
							contrato = "A"
							contratotxt = "Aumenta"
						else:
							contrato = "D"
							contratotxt = "Disminuye"
					else:
						contratotxt = u"Sin Definir Aumenta o Disminuye"
					contenido = u"Eliminaci�n de Convenio %s: %s %s %s" \
							  % (int(self.idcontratoconvenio), fecha, contratotxt,
								 str(amount_and_cents_with_commas(float(cantidad))))
					sql = """
					insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario,
					Extension, Estatus) values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
					""" % (self.BlogGUID, self.usuario, contenido, "", "", "")
					if not self.QueryUpdateRecord(sql):
						Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
					self.FillListCtrl2()
					self.validacontroles2 = False
					self.CleanForm2()
					self.validacontroles2 = True
					self.HabilitaConvenios(False)
					
		event.Skip()
		
	def DeleteRecord2(self):
		sql = "delete from %s where idcontratoconvenio = %s" % (self.dbtable2, self.idcontratoconvenio)
		try:
			cursor = r_cn.cursor()
			cursor.execute(str(sql))
			cursor.close()
			r_cn.commit()
			return True
		except:
			r_cn.rollback()
			Mensajes().Info(self,u"Sucedi� algo que impidi� eliminar este registro.\n" \
							u"Quiz� se deba a que hay otra informaci�n\nque depende de este registro.\n%s"
							% sql, u"Atenci�n")
			return False
		
	def OnGuardar2(self, event):
		F, N = self.FillingARecord2, self.NewFlag2
		self.FillingARecord2, self.NewFlag2 = False, False
		todobien = self.Text2()
		self.onguardar2 = False
		self.FillingARecord2, self.NewFlag2 = F, N
		if todobien:
			self.FillingARecord2 = True
			self.LCtrl2(True)
			self.FillingARecord2 = False
		self.onguardar2 = True
		event.Skip()
	
	def GuardarDetalle2(self, onguardar = False):
		self.SaveRecord2(onguardar)
	
	def SaveRecord2(self, onguardar = False):
		wx.BeginBusyCursor()
		if self.agregar2:
			bienGrabado, self.idcontratoconvenio = self.AddRecord2()
		else:
			bienGrabado = self.UpdateRecord2()
		wx.EndBusyCursor()
			
		if bienGrabado:
			lctrl = self.GetControl(ID_LISTCTRLCONTRATOOBRACONVENIO)
			if self.agregar2:
				self.FillListCtrl2()
				lctrl.SetItemState(self.ctrlindex2, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
				self.GetRecord2(record = self.idcontratoconvenio)
			else:
				if onguardar:
					self.FillListCtrl2()
					lctrl.SetItemState(self.ctrlindex2, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
					self.GetRecord2(record = self.idcontratoconvenio)
				else:
					try:
						self.idcontratoconvenio = self.datointerno2
						self.FillListCtrl2()
						lctrl.SetItemState(self.ctrlindex2, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
						self.GetRecord2(record = self.idcontratoconvenio)
					except:
						pass
		else:
			Mensajes().Info(self, u"� El Registro no fue grabado !", u"Atenci�n")
			
	def UpdateRecord2(self, querycancelar = ""):
		f_dia, f_mes, f_ano = self.GetControl(ID_TEXTCTRLCONTRATOOBRACONVENIOFECHA).GetValue().split('/')
		fecha = "%04d/%02d/%02d" % (int(f_ano), int(f_mes), int(f_dia))
		cantidad = self.GetControl(ID_TEXTCTRLCONTRATOOBRACONVENIOCANTIDAD).GetValue()
		inx = self.GetControl(ID_CHOICECONTRATOOBRACONVENIOCONTRATO).GetSelection()
		if inx > -1:
			if inx == 0:
				contrato = "A"
				contratotxt = "Aumenta"
			else:
				contrato = "D"
				contratotxt = "Disminuye"
		else:
			return False, ""
		notas = self.GetControl(ID_TEXTCTRLCONTRATOOBRACONVENIONOTAS).GetValue()
		setListForQuery = """
		fecha = '%s', cantidad = %s, contrato = '%s', notas = '%s'
		""" % (fecha, float(cantidad), contrato, notas)
		sql = "update %s set %s where idcontratoconvenio = %s" % (self.dbtable2, setListForQuery, self.idcontratoconvenio)
		queTal, trash = self.QueryUpdateRecord(sql)
		if queTal:
			fecha = self.GetControl(ID_TEXTCTRLCONTRATOOBRACONVENIOFECHA).GetValue()
			contenido = u"Edici�n de Convenio %s: %s %s %s" \
					  % (int(self.idcontratoconvenio), fecha, contratotxt,
						 str(amount_and_cents_with_commas(float(cantidad))))
			sql = """
			insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario,
			Extension, Estatus) values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
			""" % (self.BlogGUID, self.usuario, contenido, "", "", "")
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
			
		return queTal
	
	def AddRecord2(self):
		f_dia, f_mes, f_ano = self.GetControl(ID_TEXTCTRLCONTRATOOBRACONVENIOFECHA).GetValue().split('/')
		fecha = "%04d/%02d/%02d" % (int(f_ano), int(f_mes), int(f_dia))
		cantidad = self.GetControl(ID_TEXTCTRLCONTRATOOBRACONVENIOCANTIDAD).GetValue()
		inx = self.GetControl(ID_CHOICECONTRATOOBRACONVENIOCONTRATO).GetSelection()
		if inx > -1:
			if inx == 0:
				contrato = "A"
				contratotxt = "Aumenta"
			else:
				contrato = "D"
				contratotxt = "Disminuye"
		else:
			return False, ""
		notas = self.GetControl(ID_TEXTCTRLCONTRATOOBRACONVENIONOTAS).GetValue()
		sqlFields = """
		fkcontratoobra, fecha, cantidad, contrato, notas
		"""
		sqlValues = """
		%s, '%s', %s, '%s', '%s'
		""" % (int(self.idcontratoobra), fecha, float(cantidad), contrato, notas)
		sql = """
		insert into %s (%s) values (%s)
		""" % (self.dbtable2, sqlFields, sqlValues) 
		sqlmax = "select max(idcontratoconvenio) from %s" % self.dbtable2
		queTal, identity =  self.QueryUpdateRecord(sql, sqlmax, True)
		if queTal:
			self.GetControl(ID_TEXTCTRLCONTRATOOBRACONVENIOID).SetValue(str(identity))
			fecha = self.GetControl(ID_TEXTCTRLCONTRATOOBRACONVENIOFECHA).GetValue()
			contenido = u"Alta de Convenio %s: %s %s %s" \
					  % (int(identity), fecha, contratotxt, str(amount_and_cents_with_commas(float(cantidad))))
			sql = """
			insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario,
			Extension, Estatus) values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
			""" % (self.BlogGUID, self.usuario, contenido, "", "", "")
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")

		return queTal, identity
	
class GixElegirContratoObra(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Elegir Contrato del Proveedor de Obra", pos = wx.DefaultPosition,
				 size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE, contratoobraelegido = None):
		
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.ContratoObraElegido = contratoobraelegido
		self.idcontratoobra = 0
		ElegirContratoObra(self, True)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelected, id = ID_LISTCTRLELEGIRCONTRATOOBRA)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselected, id = ID_LISTCTRLELEGIRCONTRATOOBRA)
		self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnActivated, id = ID_LISTCTRLELEGIRCONTRATOOBRA)
		self.Bind(wx.EVT_BUTTON, self.OnClose, id = ID_BUTTONELEGIRCONTRATOOBRACANCELAR)
		self.Bind(wx.EVT_BUTTON, self.OnActivated, id = ID_BUTTONELEGIRCONTRATOOBRAELEGIR)
		wx.EVT_CLOSE(self, self.OnClose)
		self.GetControl(ID_LISTCTRLELEGIRCONTRATOOBRA).SetFocus()
		self.FillListCtrl()
		
	def OnClose(self, evt):
		self.Destroy()
		
	def OnSelected(self, evt):
		currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLELEGIRCONTRATOOBRA).GetItem(currentitem, 0).GetText()
		self.idcontratoobra = int(datointerno)
		self.GetControl(ID_BUTTONELEGIRCONTRATOOBRAELEGIR).Enable(True)
		evt.Skip()
		
	def OnDeselected(self, evt):
		self.idcontratoobra = 0
		self.GetControl(ID_BUTTONELEGIRCONTRATOOBRAELEGIR).Enable(False)
		evt.Skip()
	
	def OnActivated(self, evt):
		if self.ContratoObraElegido(idcontratoobra = self.idcontratoobra):
			self.Destroy()
		self.GetControl(ID_LISTCTRLELEGIRCONTRATOOBRA).SetFocus()
		
	def FillListCtrl(self):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLELEGIRCONTRATOOBRA)
		lctrl.Enable(False)
		lctrl.Show(False)
		lctrl.ClearAll()
		query = """
		select c.idcontratoobra, convert(varchar(10), c.fecha, 103), c.nombreobra, p.razonsocial,
		e.descripcion, d.descripcion, m.RazonSocial
		from gixcontratosobras c
		join gixproveedoresobras p on c.fkproveedor = p.idproveedor
		join ETAPA e on c.fketapa = e.codigo
		join DESARROLLO d on c.fkdesarrollo = d.codigo
		join cont_Empresas m on c.fkempresa = m.EmpresaID
		where c.activo = 1 order by c.fecha desc
		"""
		cu = r_cn.cursor()
		cu.execute(str(query))
		rows = fetchall(cu)
		cu.close()
		if rows:
			lctrl.InsertColumn(0, u"Id", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(1, u"Fecha", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(2, u"Obra")
			lctrl.InsertColumn(3, u"Proveedor")
			lctrl.InsertColumn(4, u"Etapa")
			lctrl.InsertColumn(5, u"Desarrollo")
			lctrl.InsertColumn(6, u"Empresa")
			for fila, row in enumerate(rows):
				if fila %2 != 0: bgcolor = [150,204,150]
				else:            bgcolor = [200,230,200]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, str(row[1]))
				lctrl.SetStringItem(index, 2, str(row[2]))
				lctrl.SetStringItem(index, 3, str(row[3]))
				lctrl.SetStringItem(index, 4, str(row[4]))
				lctrl.SetStringItem(index, 5, str(row[5]))
				lctrl.SetStringItem(index, 6, str(row[6]))
				lctrl.SetItemData(index, row[0])
			lctrl.SetColumnWidth(0, 40)
			lctrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(2, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(3, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(4, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(5, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(6, wx.LIST_AUTOSIZE)
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Contratos de Proveedores de Obra", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 200)
		self.GetControl(ID_BUTTONELEGIRCONTRATOOBRAELEGIR).Enable(False)
		lctrl.Enable(True)
		lctrl.Show(True)
		wx.EndBusyCursor()
		
class GixAplicacionPagoEstimacion(wx.Frame, GixBase):
	estatus = {"S":"SOLICITUD", "R":"REVISADO", "A":"AUTORIZADO", "E":"ELABORADO", "F":"FONDEADO", "B":"COBRADO",
		   "T":"RETENIDO", "C":"CANCELADO", "O":"OTROS NO APLICADO", "P":"OTROS APLICADO", "N":"OTROS CANCELADO"}
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize,
		     style = wx.DEFAULT_FRAME_STYLE, usuario = None):
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		panel = wx.Panel(self, -1)
		AplicacionPagoEstimacion(panel, True, True)
		anchos = [-1,110,132]
		self.CreateStatusBar(3)
		self.SetStatusWidths(anchos)
		self.SetStatusText(u"Recursos Financieros", 0)
		self.SetStatusText(u"Control de Obras", 1)
		self.SetStatusText(u"Aplicaci�n de Pagos", 2)
		
		self.GetControl(ID_SEARCHCTRLAPLICACIONPAGOESTIMACIONOBRAFILTRO).ShowCancelButton(True)
		self.GetControl(ID_SEARCHCTRLAPLICACIONPAGOESTIMACIONBENEFICIARIOFILTRO).ShowCancelButton(True)
		self.GetControl(ID_CHOICEAPLICACIONPAGOESTIMACIONESTIMACIONFILTRO).SetSelection(1)
		self.GetControl(ID_CHOICEAPLICACIONPAGOESTIMACIONPAGOFILTRO).SetSelection(1)
		
		self.GetControl(ID_TEXTCTRLAPLICACIONPAGOESTIMACIONTOTESTIMACION).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLAPLICACIONPAGOESTIMACIONTOTSALDO).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLAPLICACIONPAGOESTIMACIONTOTPAGO).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLAPLICACIONPAGOESTIMACIONTOTPORAPLICAR).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLAPLICACIONPAGOESTIMACIONIMPORTEESTIMACION).SetBackgroundColour(wx.Colour(204,204,255))
		self.GetControl(ID_TEXTCTRLAPLICACIONPAGOESTIMACIONSALDOESTIMACION).SetBackgroundColour(wx.Colour(204,204,255))
		self.GetControl(ID_TEXTCTRLAPLICACIONPAGOESTIMACIONIMPORTEPAGO).SetBackgroundColour(wx.Colour(204,204,255))
		self.GetControl(ID_TEXTCTRLAPLICACIONPAGOESTIMACIONPORAPLICARPAGO).SetBackgroundColour(wx.Colour(204,204,255))
		self.GetControl(ID_TEXTCTRLAPLICACIONPAGOESTIMACIONIMPORTEAPLICADO).SetBackgroundColour(wx.NamedColour("Medium Goldenrod"))
		self.GetControl(ID_LISTCTRLAPLICACIONPAGOESTIMACIONESTIMACION).SetFocus()
		
		self.GetControl(ID_TEXTAPLICACIONPAGOESTIMACIONIDESTIMACION).SetLabel("")
		self.GetControl(ID_TEXTAPLICACIONPAGOESTIMACIONIDPAGO).SetLabel("")
		
		wx.EVT_CHOICE(self, ID_CHOICEAPLICACIONPAGOESTIMACIONESTIMACIONFILTRO, self.OnChoiceFiltroEstimacion)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchObra, id = ID_SEARCHCTRLAPLICACIONPAGOESTIMACIONOBRAFILTRO)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanObra, id = ID_SEARCHCTRLAPLICACIONPAGOESTIMACIONOBRAFILTRO)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchObra, id = ID_SEARCHCTRLAPLICACIONPAGOESTIMACIONOBRAFILTRO)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelectedEstimacion, id = ID_LISTCTRLAPLICACIONPAGOESTIMACIONESTIMACION)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselectedEstimacion, id = ID_LISTCTRLAPLICACIONPAGOESTIMACIONESTIMACION)
		wx.EVT_CHOICE(self, ID_CHOICEAPLICACIONPAGOESTIMACIONPAGOFILTRO, self.OnChoiceFiltroPago)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchBeneficiario, id = ID_SEARCHCTRLAPLICACIONPAGOESTIMACIONBENEFICIARIOFILTRO)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanBeneficiario, id = ID_SEARCHCTRLAPLICACIONPAGOESTIMACIONBENEFICIARIOFILTRO)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchBeneficiario, id = ID_SEARCHCTRLAPLICACIONPAGOESTIMACIONBENEFICIARIOFILTRO)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelectedPago, id = ID_LISTCTRLAPLICACIONPAGOESTIMACIONBENEFICIARIO)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselectedPago, id = ID_LISTCTRLAPLICACIONPAGOESTIMACIONBENEFICIARIO)
		self.Bind(wx.EVT_BUTTON, self.OnAsignaImporte, id = ID_BITMAPBUTTONAPLICACIONPAGOESTIMACIONASIGNARIMPORTE)
		self.Bind(wx.EVT_BUTTON, self.OnAplicar, id = ID_BUTTONAPLICACIONPAGOESTIMACIONAPLICAR)
		wx.EVT_CLOSE(self, self.OnClose)
		
		self.idfacturaestimacion, self.importe, self.saldo = 0, 0, 0
		self.idcheque, self.cantidad, self.poraplicar = 0, 0, 0
		self.obra, self.beneficiario = "", ""
		self.importeaplicar = 0
		self.FillListCtrlEstimacion()
		self.FillListCtrlPago()
		
	def OnClose(self, evt):
		self.Destroy()
		
	def OnAsignaImporte(self, evt):
		self.AsignaImporte()
		
	def AsignaImporte(self):
		if self.saldo and self.poraplicar:
			self.importeaplicar = self.poraplicar
			if self.poraplicar > self.saldo:
				self.importeaplicar = self.saldo
			self.GetControl(ID_TEXTCTRLAPLICACIONPAGOESTIMACIONIMPORTEAPLICADO).SetValue(str(amount_and_cents_with_commas(self.importeaplicar)))
		else:
			self.importeaplicar = 0
			self.GetControl(ID_TEXTCTRLAPLICACIONPAGOESTIMACIONIMPORTEAPLICADO).SetValue("")
		
	def OnAplicar(self, evt):
		try:
			importeaplicar = self.GetControl(ID_TEXTCTRLAPLICACIONPAGOESTIMACIONIMPORTEAPLICADO).GetValue()
			self.importeaplicar = float(importeaplicar.replace(",", ""))
			if self.importeaplicar > self.saldo:
				Mensajes().Info(self, u"� La cantidad a aplicar no debe ser mayor al saldo !", u"Atenci�n")
			elif self.importeaplicar > self.poraplicar:
				Mensajes().Info(self, u"� No puede aplicar una cantidad mayor de la que dispone por aplicar !", u"Atenci�n")
			else:
				self.AplicaPago()
				self.FillListCtrlEstimacion()
				self.FillListCtrlPago()
		except:
			self.importeaplicar = 0
			Mensajes().Info(self, u"� Por favor revise la cantidad a aplicar !", u"Atenci�n")
			
	def AplicaPago(self):
		sql = """
		insert into gixfacturasestimacionpago (fkcheque, fkfacturaestimacion, importe) values (%s, %s, %s)
		""" % (int(self.idcheque), int(self.idfacturaestimacion), self.importeaplicar)
		if not self.QueryUpdateRecord(sql):
			Mensajes().Info(self, u"� Problemas al aplicar el pago !", u"Atenci�n")
	
	def RevisaAplicacion(self):
		if (self.saldo > 0 and self.poraplicar > 0):
			self.GetControl(ID_BUTTONAPLICACIONPAGOESTIMACIONAPLICAR).Enable(True)
		else:
			self.GetControl(ID_BUTTONAPLICACIONPAGOESTIMACIONAPLICAR).Enable(False)
		self.AsignaImporte()
		
	def OnSelectedEstimacion(self, evt):
		currentitem = evt.m_itemIndex
		lstctrl = self.GetControl(ID_LISTCTRLAPLICACIONPAGOESTIMACIONESTIMACION)
		datointerno = lstctrl.GetItem(currentitem, 0).GetText()
		importe = lstctrl.GetItem(currentitem, 3).GetText()
		saldo = lstctrl.GetItem(currentitem, 5).GetText()
		self.idfacturaestimacion = int(datointerno); self.importe = float(importe.replace(",", "")); self.saldo = float(saldo.replace(",", ""))
		self.GetControl(ID_TEXTCTRLAPLICACIONPAGOESTIMACIONIMPORTEESTIMACION).SetValue(importe)
		self.GetControl(ID_TEXTCTRLAPLICACIONPAGOESTIMACIONSALDOESTIMACION).SetValue(saldo)
		self.RevisaAplicacion()
		self.GetControl(ID_TEXTAPLICACIONPAGOESTIMACIONIDESTIMACION).SetLabel(u"Estimaci�n a Afectar Id. %s" % self.idfacturaestimacion)
		
	def OnDeselectedEstimacion(self, evt):
		self.ClearEstimacion()
		self.RevisaAplicacion()
		
	def ClearEstimacion(self):
		self.idfacturaestimacion, self.importe, self.saldo = 0, 0, 0
		self.GetControl(ID_TEXTCTRLAPLICACIONPAGOESTIMACIONIMPORTEESTIMACION).SetValue("")
		self.GetControl(ID_TEXTCTRLAPLICACIONPAGOESTIMACIONSALDOESTIMACION).SetValue("")
		self.GetControl(ID_TEXTAPLICACIONPAGOESTIMACIONIDESTIMACION).SetLabel("")
	
	def OnChoiceFiltroEstimacion(self, evt):
		self.FillListCtrlEstimacion()
		
	def OnDoSearchObra(self, evt):
		self.obra =  self.GetControl(ID_SEARCHCTRLAPLICACIONPAGOESTIMACIONOBRAFILTRO).GetValue()
		self.FillListCtrlEstimacion()

	def OnCleanObra(self, evt):
		self.obra = ""
		self.GetControl(ID_SEARCHCTRLAPLICACIONPAGOESTIMACIONOBRAFILTRO).SetValue("")
		self.FillListCtrlEstimacion()
		
	def FillListCtrlEstimacion(self):
		wx.BeginBusyCursor()
		estimaciones, pagado, saldo = 0, 0, 0
		filtroestimacion = self.GetControl(ID_CHOICEAPLICACIONPAGOESTIMACIONESTIMACIONFILTRO).GetSelection()
		filtroobra = ""
		if self.obra:
			filtroobra = "and c.nombreobra like '%s%s%s'" % ("%%", self.obra, "%%")
		self.ClearEstimacion()
		lctrl = self.GetControl(ID_LISTCTRLAPLICACIONPAGOESTIMACIONESTIMACION)
		lctrl.Enable(False); lctrl.Show(False); lctrl.ClearAll()
		query = """
		select e.idfacturaestimacion, convert(varchar(10), e.fecha, 103) as fecha, e.factura,
		(select isnull(sum(d.cantidad * d.importe), 0) from gixfacturasestimaciondetalle d
		where e.idfacturaestimacion = d.fkfacturaestimacion) as importe,
		(select isnull(sum(p.importe), 0) from gixfacturasestimacionpago p where e.idfacturaestimacion = p.fkfacturaestimacion) as pago,
		((select isnull(sum(d.cantidad * d.importe), 0) from gixfacturasestimaciondetalle d where e.idfacturaestimacion = d.fkfacturaestimacion) -
		(select isnull(sum(p.importe), 0) from gixfacturasestimacionpago p where e.idfacturaestimacion = p.fkfacturaestimacion)) as saldo,
		c.nombreobra, t.descripcion, d.descripcion
		from gixfacturasestimacion e
		join gixcontratosobras c on e.fkcontratoobra = c.idcontratoobra
		join ETAPA t on c.fketapa = t.codigo
		join DESARROLLO d on c.fkdesarrollo = d.codigo
		where e.cancelada <> 1 %s
		order by e.fecha desc
		""" % filtroobra
		cu = r_cn.cursor()
		cu.execute(str(query))
		rows = fetchall(cu)
		cu.close()
		if rows:
			lctrl.InsertColumn(0, u"Id", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(1, u"Fecha", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(2, u"Factura", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(3, u"Importe", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(4, u"Pagado", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(5, u"Saldo", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(6, u"Obra")
			lctrl.InsertColumn(7, u"Etapa")
			lctrl.InsertColumn(8, u"Desarrollo")
			fila = 0
			for row in rows:
				if filtroestimacion == 0 or (filtroestimacion == 1 and float(row[5]) != 0) or (filtroestimacion == 2 and float(row[5]) == 0):
					if float(row[5]) == 0:
						if fila %2 != 0: bgcolor = [150,204,150]
						else:            bgcolor = [200,230,200]
					else:
						if fila %2 != 0: bgcolor = [204,204,255]
						else:            bgcolor = [230,230,255]
					index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
					lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
					lctrl.SetStringItem(index, 0, str(row[0]))
					lctrl.SetStringItem(index, 1, str(row[1]))
					lctrl.SetStringItem(index, 2, str(row[2]))
					lctrl.SetStringItem(index, 3, str(amount_and_cents_with_commas(row[3])))
					lctrl.SetStringItem(index, 4, str(amount_and_cents_with_commas(row[4])))
					lctrl.SetStringItem(index, 5, str(amount_and_cents_with_commas(row[5])))
					lctrl.SetStringItem(index, 6, str(row[6]))
					lctrl.SetStringItem(index, 7, str(row[7]))
					lctrl.SetStringItem(index, 8, str(row[8]))
					lctrl.SetItemData(index, row[0])
					estimaciones += float(row[3]); pagado += float(row[4]); saldo += float(row[5]); fila += 1
					
			lctrl.SetColumnWidth(0, 45)
			lctrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(2, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(3, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(4, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(5, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(6, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(7, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(8, wx.LIST_AUTOSIZE)
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Estimaciones / Facturas", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 200)
			
		self.GetControl(ID_TEXTCTRLAPLICACIONPAGOESTIMACIONTOTESTIMACION).SetValue(str(amount_and_cents_with_commas(estimaciones)))
		self.GetControl(ID_TEXTCTRLAPLICACIONPAGOESTIMACIONTOTSALDO).SetValue(str(amount_and_cents_with_commas(saldo)))
		self.RevisaAplicacion()
		lctrl.Enable(True)
		lctrl.Show(True)
		wx.EndBusyCursor()
		
	def OnSelectedPago(self, evt):
		currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLAPLICACIONPAGOESTIMACIONBENEFICIARIO).GetItem(currentitem, 0).GetText()
		cantidad = self.GetControl(ID_LISTCTRLAPLICACIONPAGOESTIMACIONBENEFICIARIO).GetItem(currentitem, 4).GetText()
		poraplicar = self.GetControl(ID_LISTCTRLAPLICACIONPAGOESTIMACIONBENEFICIARIO).GetItem(currentitem, 6).GetText()
		self.idcheque = int(datointerno); self.cantidad = float(cantidad.replace(",", "")); self.poraplicar = float(poraplicar.replace(",", ""))
		self.GetControl(ID_TEXTCTRLAPLICACIONPAGOESTIMACIONIMPORTEPAGO).SetValue(cantidad)
		self.GetControl(ID_TEXTCTRLAPLICACIONPAGOESTIMACIONPORAPLICARPAGO).SetValue(poraplicar)
		self.RevisaAplicacion()
		self.GetControl(ID_TEXTAPLICACIONPAGOESTIMACIONIDPAGO).SetLabel(u"Pago a Aplicar Id. %s" % self.idcheque)
		self.GetControl(ID_BITMAPBUTTONAPLICACIONPAGOESTIMACIONASIGNARIMPORTE).Enable(True)
		
	def OnDeselectedPago(self, evt):
		self.ClearPago()
		self.RevisaAplicacion()
		
	def ClearPago(self):
		self.idcheque, self.cantidad, self.poraplicar = 0, 0, 0
		self.GetControl(ID_TEXTCTRLAPLICACIONPAGOESTIMACIONIMPORTEPAGO).SetValue("")
		self.GetControl(ID_TEXTCTRLAPLICACIONPAGOESTIMACIONPORAPLICARPAGO).SetValue("")
		self.GetControl(ID_TEXTAPLICACIONPAGOESTIMACIONIDPAGO).SetLabel("")
		self.GetControl(ID_BITMAPBUTTONAPLICACIONPAGOESTIMACIONASIGNARIMPORTE).Enable(False)
	
	def OnChoiceFiltroPago(self, evt):
		self.FillListCtrlPago()
		
	def OnDoSearchBeneficiario(self, evt):
		self.beneficiario =  self.GetControl(ID_SEARCHCTRLAPLICACIONPAGOESTIMACIONBENEFICIARIOFILTRO).GetValue()
		self.FillListCtrlPago()

	def OnCleanBeneficiario(self, evt):
		self.beneficiario = ""
		self.GetControl(ID_SEARCHCTRLAPLICACIONPAGOESTIMACIONBENEFICIARIOFILTRO).SetValue("")
		self.FillListCtrlPago()
		
	def FillListCtrlPago(self):
		wx.BeginBusyCursor()
		cantidad, pagos, poraplicar = 0, 0, 0
		filtropago = self.GetControl(ID_CHOICEAPLICACIONPAGOESTIMACIONPAGOFILTRO).GetSelection()
		filtrobeneficiario = ""
		if self.beneficiario:
			filtrobeneficiario = "and b.nombre like '%s%s%s'" % ("%%", self.beneficiario, "%%")
		self.ClearPago()
		lctrl = self.GetControl(ID_LISTCTRLAPLICACIONPAGOESTIMACIONBENEFICIARIO)
		lctrl.Enable(False); lctrl.Show(False); lctrl.ClearAll()
		query = """
		select e.idcheque, convert(varchar(10), e.fechacaptura, 103), convert(varchar(10), e.fechaprogramada, 103), e.numerochequeorigen, e.cantidad,
		(select isnull(sum(p.importe), 0) from gixfacturasestimacionpago p where e.idcheque = p.fkcheque),
		(e.cantidad - (select isnull(sum(p.importe), 0) from gixfacturasestimacionpago p where e.idcheque = p.fkcheque)),
		b.nombre, m.RazonSocial, e.estatus, e.usuariosolicitante
		from gixegresoscheques e
		join gixbeneficiarios b on e.idbeneficiario = b.idbeneficiario
		join cont_Empresas m on e.empresaid = m.EmpresaID
		where e.pagoestimacion = 1 and e.estatus not in ('C', 'N') %s
		order by e.fechaprogramada desc
		""" % filtrobeneficiario
		cu = r_cn.cursor()
		cu.execute(str(query))
		rows = fetchall(cu)
		cu.close()
		if rows:
			fila, header = 0, False
			for row in rows:
				if filtropago == 0 or (filtropago == 1 and float(row[6]) != 0) or (filtropago == 2 and float(row[6]) == 0):
					if not header:
						lctrl.InsertColumn(0, u"Id", wx.LIST_FORMAT_RIGHT)
						lctrl.InsertColumn(1, u"Captura", wx.LIST_FORMAT_CENTER)
						lctrl.InsertColumn(2, u"Programado", wx.LIST_FORMAT_CENTER)
						lctrl.InsertColumn(3, u"Cheque", wx.LIST_FORMAT_CENTER)
						lctrl.InsertColumn(4, u"Importe", wx.LIST_FORMAT_RIGHT)
						lctrl.InsertColumn(5, u"Aplicado", wx.LIST_FORMAT_RIGHT)
						lctrl.InsertColumn(6, u"Por Aplicar", wx.LIST_FORMAT_RIGHT)
						lctrl.InsertColumn(7, u"Beneficiario")
						lctrl.InsertColumn(8, u"Empresa")
						lctrl.InsertColumn(9, u"Estatus")
						lctrl.InsertColumn(10, u"Solicitante")
						header = True

					if float(row[6]) == 0:
						if fila %2 != 0: bgcolor = [150,204,150]
						else:            bgcolor = [200,230,200]
					else:
						if fila %2 != 0: bgcolor = [204,204,255]
						else:            bgcolor = [230,230,255]
					estatus = self.estatus[str(row[9])]
					index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
					lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
					lctrl.SetStringItem(index, 0, str(row[0]))
					lctrl.SetStringItem(index, 1, str(row[1]))
					lctrl.SetStringItem(index, 2, str(row[2]))
					lctrl.SetStringItem(index, 3, str(row[3]))
					lctrl.SetStringItem(index, 4, str(amount_and_cents_with_commas(row[4])))
					lctrl.SetStringItem(index, 5, str(amount_and_cents_with_commas(row[5])))
					lctrl.SetStringItem(index, 6, str(amount_and_cents_with_commas(row[6])))
					lctrl.SetStringItem(index, 7, str(row[7]))
					lctrl.SetStringItem(index, 8, str(row[8]))
					lctrl.SetStringItem(index, 9, estatus)
					lctrl.SetStringItem(index, 10, str(row[10]))
					lctrl.SetItemData(index, row[0])
					cantidad += float(row[4]); pagos += float(row[5]); poraplicar += float(row[6]); fila += 1
			
			if not header:
				lctrl.InsertColumn(0, "       No se Encontraron Pagos", wx.LIST_FORMAT_CENTER)
				lctrl.SetColumnWidth(0, 200)
			else:
				lctrl.SetColumnWidth(0, 50)
				lctrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
				lctrl.SetColumnWidth(2, wx.LIST_AUTOSIZE)
				lctrl.SetColumnWidth(3, wx.LIST_AUTOSIZE)
				lctrl.SetColumnWidth(4, wx.LIST_AUTOSIZE)
				lctrl.SetColumnWidth(5, wx.LIST_AUTOSIZE)
				lctrl.SetColumnWidth(6, wx.LIST_AUTOSIZE)
				lctrl.SetColumnWidth(7, wx.LIST_AUTOSIZE)
				lctrl.SetColumnWidth(8, wx.LIST_AUTOSIZE)
				lctrl.SetColumnWidth(9, wx.LIST_AUTOSIZE)
				lctrl.SetColumnWidth(10, wx.LIST_AUTOSIZE)
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Pagos", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 200)
			
		self.GetControl(ID_TEXTCTRLAPLICACIONPAGOESTIMACIONTOTPAGO).SetValue(str(amount_and_cents_with_commas(cantidad)))
		self.GetControl(ID_TEXTCTRLAPLICACIONPAGOESTIMACIONTOTPORAPLICAR).SetValue(str(amount_and_cents_with_commas(poraplicar)))
		self.RevisaAplicacion()
		lctrl.Enable(True)
		lctrl.Show(True)
		wx.EndBusyCursor()
		
class GixReporteFinancieroObra(wx.Frame, GixBase):
	def __init__(self, parent, id = -1, title = u"Reporte Financiero de Obras", pos = wx.DefaultPosition,
		     size = wx.DefaultSize, style = wx.DEFAULT_FRAME_STYLE, usuario = None):
		
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		self.lstctrlorder = {0:("o.idcontratoobra","desc",""), 1:("o.nombreobra","desc",""), 2:("o.fecha","desc","> "),
				     3:("o.valorcontrato","desc",""), 10:("v.razonsocial","desc",""),
				     11:("t.descripcion","desc",""), 12:("r.descripcion","desc","")}
		self.colctrlorder = (0,1,2,3,10,11,12)
		self.nombreobra, self.proveedor, self.etapa, self.desarrollo = "","","",""
		self.currentitem, self.contratoobra = 0, 0
		panel = wx.Panel(self, -1)
		ReporteFinancieroObraFuncion(panel, True)
		
		w, h = 1100, 700
		if wx.Platform == '__WXMSW__':
			w = 1025
			
		self.SetSize(wx.Size(w, h))

		self.colprev, self.colsort = 2, 2
		self.lstctrlsort = "o.fecha desc"
		self.choicefiltroestatus = {0:"", 1:" and o.activo = 1 ", 2:" and o.activo <> 1 "}
		self.choiceinxestatus = 1
		self.GetControl(ID_CHOICEFINANCIEROOBRAESTATUS).SetSelection(self.choiceinxestatus)
		self.GetControl(ID_FOREIGNFINANCIEROOBRAFILTRONOMBREOBRA).ShowCancelButton(True)
		self.GetControl(ID_FOREIGNFINANCIEROOBRAFILTROPROVEEDOR).ShowCancelButton(True)
		self.GetControl(ID_FOREIGNFINANCIEROOBRAFILTROETAPA).ShowCancelButton(True)
		self.GetControl(ID_FOREIGNFINANCIEROOBRAFILTRODESARROLLO).ShowCancelButton(True)
		self.Bind(wx.EVT_DATE_CHANGED, self.OnDatePicker, id = ID_DATEPICKERFINANCIEROOBRAFECHAINICIAL)
		self.Bind(wx.EVT_DATE_CHANGED, self.OnDatePicker, id = ID_DATEPICKERFINANCIEROOBRAFECHAFINAL)
		self.Bind(wx.EVT_CHOICE, self.OnChoiceCtrlEstatus, id = ID_CHOICEFINANCIEROOBRAESTATUS)
		wx.EVT_BUTTON(self, ID_BUTTONFINANCIEROOBRAIMPRESION, self.OnPrintExcel)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchNombreObra, id = ID_FOREIGNFINANCIEROOBRAFILTRONOMBREOBRA)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanNombreObra, id = ID_FOREIGNFINANCIEROOBRAFILTRONOMBREOBRA)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchNombreObra, id = ID_FOREIGNFINANCIEROOBRAFILTRONOMBREOBRA)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchProveedor, id = ID_FOREIGNFINANCIEROOBRAFILTROPROVEEDOR)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanProveedor, id = ID_FOREIGNFINANCIEROOBRAFILTROPROVEEDOR)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchProveedor, id = ID_FOREIGNFINANCIEROOBRAFILTROPROVEEDOR)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchEtapa, id = ID_FOREIGNFINANCIEROOBRAFILTROETAPA)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanEtapa, id = ID_FOREIGNFINANCIEROOBRAFILTROETAPA)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchEtapa, id = ID_FOREIGNFINANCIEROOBRAFILTROETAPA)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchDesarrollo, id = ID_FOREIGNFINANCIEROOBRAFILTRODESARROLLO)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanDesarrollo, id = ID_FOREIGNFINANCIEROOBRAFILTRODESARROLLO)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchDesarrollo, id = ID_FOREIGNFINANCIEROOBRAFILTRODESARROLLO)
		self.Bind(wx.EVT_LIST_COL_CLICK, self.OnSortListCtrl, id = ID_LISTCTRLFINANCIEROOBRA)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelected, id = ID_LISTCTRLFINANCIEROOBRA)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselected, id = ID_LISTCTRLFINANCIEROOBRA)
		self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnActivated, id = ID_LISTCTRLFINANCIEROOBRA)
		wx.EVT_CLOSE(self, self.OnClose)
		self.GetControl(ID_LISTCTRLFINANCIEROOBRA).SetFocus()
		self.FillListCtrl()
		
	def OnClose(self, evt):
		self.Destroy()
		
	def OnDatePicker(self, evt):
		idctrl = evt.GetId(); ctrl = self.GetControl(idctrl); fecha = ctrl.GetValue()
		if idctrl == ID_DATEPICKERFINANCIEROOBRAFECHAINICIAL:
			if fecha:
				fechainicial = self.GetFecha(fecha)
				self.EstatusFechaFinal(True)
				fecha = self.GetControl(ID_DATEPICKERFINANCIEROOBRAFECHAFINAL).GetValue()
				if fecha:
					fechafinal = self.GetFecha(fecha)
					if fechainicial > fechafinal:
						Mensajes().Info(self, u"� La Fecha Inicial no debe ser mayor a la Fecha Final !\n\n" \
								u"Se tomar� en cuenta unicamente la fecha inicial.", u"Atenci�n")
						self.EstatusFechaFinal(False)
			else:
				self.EstatusFechaFinal(False)
		else:
			if fecha:
				fechafinal = self.GetFecha(fecha)
				fecha = self.GetControl(ID_DATEPICKERFINANCIEROOBRAFECHAINICIAL).GetValue()
				if fecha:
					fechainicial = self.GetFecha(fecha)
					if fechainicial > fechafinal:
						Mensajes().Info(self, u"� La Fecha Inicial del Contrato no debe ser mayor a la Fecha Final !\n\n" \
								u"Se tomar� en cuenta unicamente la fecha inicial.", u"Atenci�n")
						self.EstatusFechaFinal(False)
				else:
					Mensajes().Info(self, u"� Inconsistencia en la fecha inicial !", u"Atenci�n")
					self.EstatusFechaFinal(False)
		self.FillListCtrl()
				
	def GetFecha(self, fecha):
		return "'%s/%02d/%02d'" % (fecha.GetYear(), (fecha.GetMonth()) + 1, fecha.GetDay())
	
	def EstatusFechaFinal(self, truefalse):
		self.GetControl(ID_TEXTFINANCIEROOBRAFECHAFINAL).Enable(truefalse)
		self.GetControl(ID_DATEPICKERFINANCIEROOBRAFECHAFINAL).Enable(truefalse)
				
	def OnChoiceCtrlEstatus(self, evt):
		self.choiceinxestatus = self.GetControl(ID_CHOICEFINANCIEROOBRAESTATUS).GetSelection()
		self.FillListCtrl()
		self.GetControl(ID_LISTCTRLFINANCIEROOBRA).SetFocus()
		
	def OnSelected(self, evt):
		self.currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLFINANCIEROOBRA).GetItem(self.currentitem, 0).GetText()
		self.contratoobra = int(datointerno)
		
	def OnDeselected(self, evt):
		self.currentitem, self.contratoobra = 0, 0
	
	def OnActivated(self, evt):
		pass
		
	def OnSortListCtrl(self, evt):
		self.colsort = evt.GetColumn()
		if self.colsort in self.colctrlorder:
			if self.lstctrlorder[self.colsort][1] == "desc":
				self.lstctrlsort = "%s asc" % self.lstctrlorder[self.colsort][0]
				self.lstctrlorder[self.colsort] = (self.lstctrlorder[self.colsort][0], "asc", "< ")
			else:
				self.lstctrlsort = "%s desc" % self.lstctrlorder[self.colsort][0]
				self.lstctrlorder[self.colsort] = (self.lstctrlorder[self.colsort][0], "desc", "> ")
			if self.colprev != self.colsort:
				self.lstctrlorder[self.colprev] = (self.lstctrlorder[self.colprev][0], self.lstctrlorder[self.colprev][1], "")
			self.FillListCtrl()
			self.colprev = self.colsort
		evt.Skip()
		
	def OnDoSearchNombreObra(self, evt):
		self.nombreobra =  self.GetControl(ID_FOREIGNFINANCIEROOBRAFILTRONOMBREOBRA).GetValue()
		self.FillListCtrl()

	def OnCleanNombreObra(self, evt):
		self.GetControl(ID_FOREIGNFINANCIEROOBRAFILTRONOMBREOBRA).SetValue("")
		self.nombreobra = ""
		self.FillListCtrl()

	def OnDoSearchProveedor(self, evt):
		self.proveedor =  self.GetControl(ID_FOREIGNFINANCIEROOBRAFILTROPROVEEDOR).GetValue()
		self.FillListCtrl()

	def OnCleanProveedor(self, evt):
		self.GetControl(ID_FOREIGNFINANCIEROOBRAFILTROPROVEEDOR).SetValue("")
		self.proveedor = ""
		self.FillListCtrl()

	def OnDoSearchEtapa(self, evt):
		self.etapa =  self.GetControl(ID_FOREIGNFINANCIEROOBRAFILTROETAPA).GetValue()
		self.FillListCtrl()

	def OnCleanEtapa(self, evt):
		self.GetControl(ID_FOREIGNFINANCIEROOBRAFILTROETAPA).SetValue("")
		self.etapa = ""
		self.FillListCtrl()

	def OnDoSearchDesarrollo(self, evt):
		self.desarrollo =  self.GetControl(ID_FOREIGNFINANCIEROOBRAFILTRODESARROLLO).GetValue()
		self.FillListCtrl()

	def OnCleanDesarrollo(self, evt):
		self.GetControl(ID_FOREIGNFINANCIEROOBRAFILTRODESARROLLO).SetValue("")
		self.desarrollo = ""
		self.FillListCtrl()

	def OnPrintExcel(self, event):
		self.connlite = sqlite3.connect(':memory:')
		self.culite = self.connlite.cursor()
		self.culite.execute("""create table financieroobra
		(id integer, obra text, fecha text, valor real, facturado real, porfacturar real, pagado real, porpagar real,
		avanceobra real, avancepagado real, estimado real, estimadoporfacturar real, proveedor text, etapa text, desarrollo text)""")
		self.FillListCtrl(printexcel = True)
		self.connlite.commit()
		tabla = "financieroobra"
		meta = ((14,u"Id") , (100,u"Obra"), (70,u"Fecha"), (20,u"Valor"), (20,u"Facturado"), (20,u"Por Facturar"), (20,u"Pagado"),
			(20,u"Por Pagar"), (100,u"% Obra"), (70,u"% Pagado"), (70,u"Estimado"), (70,u"Estimado por Facturar"),
			(100,u"Proveedor"), (100,u"Etapa"), (100,u"Desarrollo"))
		query = "select * from financieroobra"
		titulo = u"Reporte Financiero de Obras"
		self.DisplayGrid(tabla, meta, query, titulo, cu = self.culite)
		self.culite.close()
		self.connlite.close()

	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
		return dato
	
	def FillListCtrl(self, printexcel = False):
		fechafiltro = self.GetControl(ID_DATEPICKERFINANCIEROOBRAFECHAINICIAL).GetValue()
		fechacontrato = ""
		if fechafiltro:
			try:
				fechainicial = self.GetFecha(fechafiltro)
				fecharango = self.GetControl(ID_DATEPICKERFINANCIEROOBRAFECHAFINAL).GetValue()
				if fecharango:
					fechafinal = self.GetFecha(fecharango)
					if fechainicial > fechafinal:
						Mensajes().Info(self, u"� La Fecha Inicial no debe ser mayor a la Fecha Final !\n\n" \
								u"Se tomar� en cuenta unicamente la fecha inicial.", u"Atenci�n")
						self.EstatusFechaFinal(False)
						fechacontrato = " and convert(varchar(10), o.fecha, 111) = %s " % fechainicial
					else:
						fechacontrato = """
						and (convert(varchar(10), o.fecha, 111) >= %s
						and convert(varchar(10), o.fecha, 111) <= %s)
						""" % (fechainicial, fechafinal)
				else:
					fechacontrato = " and convert(varchar(10), o.fecha, 111) = %s " % fechainicial
			except:
				fechacontrato = ""
				
		wx.BeginBusyCursor()
		if not printexcel:
			lctrl = self.GetControl(ID_LISTCTRLFINANCIEROOBRA)
			lctrl.Enable(False)
			lctrl.Show(False)
			lctrl.ClearAll()
			
		query = """
		select o.idcontratoobra, o.nombreobra, convert(varchar(10), o.fecha, 103), o.valorcontrato,
		isnull(sum(d.cantidad * d.importe), 0), isnull(v.razonsocial, ''), isnull(t.descripcion, ''), 
		isnull(r.descripcion, ''), o.activo, o.estimacionproveedor
		from gixcontratosobras o
		left join gixfacturasestimacion e on o.idcontratoobra = e.fkcontratoobra
		left join gixfacturasestimaciondetalle d on e.idfacturaestimacion = d.fkfacturaestimacion
		left join gixproveedoresobras v on o.fkproveedor = v.idproveedor
		left join ETAPA t on o.fketapa = t.codigo
		left join DESARROLLO r on o.fkdesarrollo = r.codigo
		where e.cancelada <> 1 and
		(o.nombreobra like '%s' or o.nombreobra is null) and (v.razonsocial like '%s' or v.razonsocial is null) and
		(t.descripcion like '%s' or t.descripcion is null) and (r.descripcion like '%s' or r.descripcion is null)
		""" + str(self.choicefiltroestatus[self.choiceinxestatus]) + fechacontrato + """
		group by o.idcontratoobra, o.nombreobra, o.fecha, o.valorcontrato, v.razonsocial, t.descripcion, r.descripcion, o.activo, o.estimacionproveedor
		order by """ + self.lstctrlsort
		nombreobra, proveedor, etapa, desarrollo = '%%', '%%', '%%', '%%'
		if self.nombreobra:
			nombreobra = '%s%s%s' % ("%%", self.nombreobra, "%%")
		if self.proveedor:
			proveedor = '%s%s%s' % ("%%", self.proveedor, "%%")
		if self.etapa:
			etapa = '%s%s%s' % ("%%", self.etapa, "%%")
		if self.desarrollo:
			desarrollo = '%s%s%s' % ("%%", self.desarrollo, "%%")
		sql = (query % (nombreobra, proveedor, etapa, desarrollo))
		sqlx = sql.replace('\t', ' ')
		sql = sqlx.replace('\n', ' ')
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		totcontratos, totfacturado, totpagado, totporpagar, totestimado, totestimadoporfacturar, fila = 0,0,0,0,0,0,0
		if rows:
			if not printexcel:
				lctrl.InsertColumn(0, u"%sId" % self.lstctrlorder[0][2], wx.LIST_FORMAT_RIGHT)
				lctrl.InsertColumn(1, u"%sObra" % self.lstctrlorder[1][2])
				lctrl.InsertColumn(2, u"%sFecha" % self.lstctrlorder[2][2], wx.LIST_FORMAT_CENTER)
				lctrl.InsertColumn(3, u"%sValor" % self.lstctrlorder[3][2], wx.LIST_FORMAT_RIGHT)
				lctrl.InsertColumn(4, u"Facturado", wx.LIST_FORMAT_RIGHT)
				lctrl.InsertColumn(5, u"Por Facturar", wx.LIST_FORMAT_RIGHT)
				lctrl.InsertColumn(6, u"Pagado", wx.LIST_FORMAT_RIGHT)
				lctrl.InsertColumn(7, u"Por Pagar", wx.LIST_FORMAT_RIGHT)
				lctrl.InsertColumn(8, u"% Obra", wx.LIST_FORMAT_RIGHT)
				lctrl.InsertColumn(9, u"% Pagado", wx.LIST_FORMAT_RIGHT)
				lctrl.InsertColumn(10, u"Estimado del Proveedor", wx.LIST_FORMAT_RIGHT)
				lctrl.InsertColumn(11, u"Estimado por Facturar", wx.LIST_FORMAT_RIGHT)
				lctrl.InsertColumn(12, u"%sProveedor" % self.lstctrlorder[10][2])
				lctrl.InsertColumn(13, u"%sEtapa" % self.lstctrlorder[11][2])
				lctrl.InsertColumn(14, u"%sDesarrollo" % self.lstctrlorder[12][2])
				
			query1 = """
			select isnull(c.cantidad, 0), c.contrato from gixcontratosobras o
			left join gixcontratosconvenios c on o.idcontratoobra = c.fkcontratoobra
			where o.idcontratoobra = %s
			"""
			query2 = """
			select isnull(sum(p.importe), 0) from gixcontratosobras o
			left join gixfacturasestimacion e on o.idcontratoobra = e.fkcontratoobra
			left join gixfacturasestimacionpago p on e.idfacturaestimacion = p.fkfacturaestimacion
			where o.idcontratoobra = %s
			"""
			for row in rows:
				sql = (query1 % (int(row[0])))
				sqlx = sql.replace('\t', ' ')
				sql = sqlx.replace('\n', ' ')
				cu.execute(str(sql))
				rowsconvenios = fetchall(cu)
				convenios = float(0)
				if rowsconvenios:
					for rowconvenio in rowsconvenios:
						if self.GetString(rowconvenio[1]) == "A":
							convenios += float(rowconvenio[0])
						else:
							convenios -= float(rowconvenio[0])
				
				sql = (query2 % (int(row[0])))
				sqlx = sql.replace('\t', ' ')
				sql = sqlx.replace('\n', ' ')
				cu.execute(str(sql))
				rowpagado = fetchone(cu)
				pagado = float(0)
				if rowpagado[0]:
					pagado = float(rowpagado[0])
					
				nombreobra = str(row[1].strip()); proveedor = str(row[5].strip())
				etapa = str(row[6].strip()); desarrollo = str(row[7].strip())
				valorcontrato = convenios + float(row[3])
				porfacturar = valorcontrato - float(row[4]); porpagar = float(row[4]) - pagado
				avanceobra = (float(row[4]) * 100) / valorcontrato
				avancepagado = (pagado * 100) / float(row[4])
				estimadoporfacturar = float(row[9]) - float(row[4])
				
				if printexcel:
					rowlite = (int(row[0]), self.GetString(nombreobra), self.GetString(row[2]), float(valorcontrato),
						   float(row[4]), float(porfacturar), float(pagado), float(porpagar), float(avanceobra),
						   float(avancepagado), float(row[9]), float(estimadoporfacturar),
						   self.GetString(proveedor), self.GetString(etapa), self.GetString(desarrollo))
					self.culite.execute("insert into financieroobra values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", rowlite)
				else:
					if int(row[8]) == 1:
						if fila %2 != 0: bgcolor = [204,204,255]
						else:            bgcolor = [230,230,255]
					else:
						if fila %2 != 0: bgcolor = [255,153,153]
						else:            bgcolor = [255,215,215]
					index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
					lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
					lctrl.SetStringItem(index, 0, str(row[0]))
					lctrl.SetStringItem(index, 1, self.GetString(nombreobra))
					lctrl.SetStringItem(index, 2, self.GetString(row[2]))
					lctrl.SetStringItem(index, 3, str(amount_and_cents_with_commas(valorcontrato)))
					lctrl.SetStringItem(index, 4, str(amount_and_cents_with_commas(row[4])))
					lctrl.SetStringItem(index, 5, str(amount_and_cents_with_commas(porfacturar)))
					lctrl.SetStringItem(index, 6, str(amount_and_cents_with_commas(pagado)))
					lctrl.SetStringItem(index, 7, str(amount_and_cents_with_commas(porpagar)))
					lctrl.SetStringItem(index, 8, str(amount_and_cents_with_commas(avanceobra)))
					lctrl.SetStringItem(index, 9, str(amount_and_cents_with_commas(avancepagado)))
					lctrl.SetStringItem(index, 10, str(amount_and_cents_with_commas(row[9])))
					lctrl.SetStringItem(index, 11, str(amount_and_cents_with_commas(estimadoporfacturar)))
					lctrl.SetStringItem(index, 12, self.GetString(proveedor))
					lctrl.SetStringItem(index, 13, self.GetString(etapa))
					lctrl.SetStringItem(index, 14, self.GetString(desarrollo))
					lctrl.SetItemData(index, row[0])
					totcontratos += valorcontrato
					totfacturado += float(row[4])
					totpagado += pagado
					totporpagar += porpagar
					totestimado += float(row[9])
					totestimadoporfacturar += estimadoporfacturar
					fila += 1
					
			if not printexcel:
				lctrl.SetColumnWidth(0, 35)
				lctrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
				lctrl.SetColumnWidth(2, wx.LIST_AUTOSIZE)
				lctrl.SetColumnWidth(3, wx.LIST_AUTOSIZE)
				lctrl.SetColumnWidth(4, wx.LIST_AUTOSIZE)
				lctrl.SetColumnWidth(5, wx.LIST_AUTOSIZE)
				lctrl.SetColumnWidth(6, wx.LIST_AUTOSIZE)
				lctrl.SetColumnWidth(7, wx.LIST_AUTOSIZE)
				lctrl.SetColumnWidth(8, 60)
				lctrl.SetColumnWidth(9, 65)
				lctrl.SetColumnWidth(10, wx.LIST_AUTOSIZE_USEHEADER)
				lctrl.SetColumnWidth(11, wx.LIST_AUTOSIZE_USEHEADER)
				lctrl.SetColumnWidth(12, wx.LIST_AUTOSIZE)
				lctrl.SetColumnWidth(13, wx.LIST_AUTOSIZE)
				lctrl.SetColumnWidth(14, wx.LIST_AUTOSIZE)
				self.Habilita()
				
		elif printexcel:
			Mensajes().Info(self, u"� No se Encontraron Contratos !", u"Atenci�n")
			self.Habilita(True, False)
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Contratos", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 200)
			self.Habilita(True, False)
			
		cu.close()
		if not printexcel:
			lctrl.Enable(True)
			lctrl.Show(True)
			self.GetControl(ID_TEXTCTRLFINANCIEROOBRATOTALCONTRATO).SetBackgroundColour(wx.Colour(153,255,153))
			self.GetControl(ID_TEXTCTRLFINANCIEROOBRATOTALFACTURADO).SetBackgroundColour(wx.Colour(153,255,153))
			self.GetControl(ID_TEXTCTRLFINANCIEROOBRATOTALPAGADO).SetBackgroundColour(wx.Colour(153,255,153))
			self.GetControl(ID_TEXTCTRLFINANCIEROOBRATOTALPORPAGAR).SetBackgroundColour(wx.Colour(153,255,153))
			self.GetControl(ID_TEXTCTRLFINANCIEROOBRATOTALESTIMADO).SetBackgroundColour(wx.Colour(153,255,153))
			self.GetControl(ID_TEXTCTRLFINANCIEROOBRATOTALESTIMADOPORFACTURAR).SetBackgroundColour(wx.Colour(153,255,153))
			self.GetControl(ID_TEXTCTRLFINANCIEROOBRAALAVISTA).SetBackgroundColour(wx.Colour(153,255,153))
			self.GetControl(ID_TEXTCTRLFINANCIEROOBRATOTALCONTRATO).SetValue(str(amount_and_cents_with_commas(totcontratos)))
			self.GetControl(ID_TEXTCTRLFINANCIEROOBRATOTALFACTURADO).SetValue(str(amount_and_cents_with_commas(totfacturado)))
			self.GetControl(ID_TEXTCTRLFINANCIEROOBRATOTALPAGADO).SetValue(str(amount_and_cents_with_commas(totpagado)))
			self.GetControl(ID_TEXTCTRLFINANCIEROOBRATOTALPORPAGAR).SetValue(str(amount_and_cents_with_commas(totporpagar)))
			self.GetControl(ID_TEXTCTRLFINANCIEROOBRATOTALESTIMADO).SetValue(str(amount_and_cents_with_commas(totestimado)))
			self.GetControl(ID_TEXTCTRLFINANCIEROOBRATOTALESTIMADOPORFACTURAR).SetValue(str(amount_and_cents_with_commas(totestimadoporfacturar)))
			self.GetControl(ID_TEXTCTRLFINANCIEROOBRAALAVISTA).SetValue(str(fila))
			
		wx.EndBusyCursor()
		
	def Habilita(self, excel = True, excelbool = True):
		if excel:
			self.GetControl(ID_BUTTONFINANCIEROOBRAIMPRESION).Enable(excelbool)
	
class GixReporteEstimacionesFacturas(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Reporte de Estimaciones / Facturas", pos = wx.DefaultPosition,
		     size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE, usuario = None):
		
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.lstctrlorder = {0:("e.idfacturaestimacion","desc",""), 2:("e.fecha","asc","< "), 3:("e.factura","desc","")}
		self.colctrlorder = (0,2,3)
		self.nombreobra = ""
		self.currentitem, self.facturaestimacion = 0, 0
		ReporteEstimacionFacturaFuncion(self, True)
		self.colprev, self.colsort = 2, 2
		self.lstctrlsort = "e.fecha asc"
		self.choicefiltroestatus = {0:"", 1:" and e.cancelada <> 1 ", 2:" and e.cancelada = 1 "}
		self.choiceinxestatus = 1
		self.GetControl(ID_CHOICEESTIMACIONFACTURAESTATUS).SetSelection(self.choiceinxestatus)
		self.GetControl(ID_FOREIGNESTIMACIONFACTURAFILTRONOMBREOBRA).ShowCancelButton(True)
		self.Bind(wx.EVT_DATE_CHANGED, self.OnDatePicker, id = ID_DATEPICKERESTIMACIONFACTURAFECHAINICIAL)
		self.Bind(wx.EVT_DATE_CHANGED, self.OnDatePicker, id = ID_DATEPICKERESTIMACIONFACTURAFECHAFINAL)
		self.Bind(wx.EVT_CHOICE, self.OnChoiceCtrlEstatus, id = ID_CHOICEESTIMACIONFACTURAESTATUS)
		wx.EVT_BUTTON(self, ID_BUTTONESTIMACIONFACTURAIMPRESION, self.OnPrintExcel)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchNombreObra, id = ID_FOREIGNESTIMACIONFACTURAFILTRONOMBREOBRA)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanNombreObra, id = ID_FOREIGNESTIMACIONFACTURAFILTRONOMBREOBRA)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchNombreObra, id = ID_FOREIGNESTIMACIONFACTURAFILTRONOMBREOBRA)
		self.Bind(wx.EVT_LIST_COL_CLICK, self.OnSortListCtrl, id = ID_LISTCTRLESTIMACIONFACTURA)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelected, id = ID_LISTCTRLESTIMACIONFACTURA)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselected, id = ID_LISTCTRLESTIMACIONFACTURA)
		self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnActivated, id = ID_LISTCTRLESTIMACIONFACTURA)
		wx.EVT_CLOSE(self, self.OnClose)
		self.GetControl(ID_LISTCTRLESTIMACIONFACTURA).SetFocus()
		self.FillListCtrl()
		
	def OnClose(self, evt):
		self.Destroy()
		
	def OnDatePicker(self, evt):
		idctrl = evt.GetId(); ctrl = self.GetControl(idctrl); fecha = ctrl.GetValue()
		if idctrl == ID_DATEPICKERESTIMACIONFACTURAFECHAINICIAL:
			if fecha:
				fechainicial = self.GetFecha(fecha)
				self.EstatusFechaFinal(True)
				fecha = self.GetControl(ID_DATEPICKERESTIMACIONFACTURAFECHAFINAL).GetValue()
				if fecha:
					fechafinal = self.GetFecha(fecha)
					if fechainicial > fechafinal:
						Mensajes().Info(self, u"� La Fecha Inicial de la Estimaci�n/Factura no debe ser mayor a la Fecha Final !\n\n" \
								u"Se tomar� en cuenta unicamente la fecha inicial.", u"Atenci�n")
						self.EstatusFechaFinal(False)
			else:
				self.EstatusFechaFinal(False)
		else:
			if fecha:
				fechafinal = self.GetFecha(fecha)
				fecha = self.GetControl(ID_DATEPICKERESTIMACIONFACTURAFECHAINICIAL).GetValue()
				if fecha:
					fechainicial = self.GetFecha(fecha)
					if fechainicial > fechafinal:
						Mensajes().Info(self, u"� La Fecha Inicial de la Estimaci�n/Factura no debe ser mayor a la Fecha Final !\n\n" \
								u"Se tomar� en cuenta unicamente la fecha inicial.", u"Atenci�n")
						self.EstatusFechaFinal(False)
				else:
					Mensajes().Info(self, u"� Inconsistencia en la fecha inicial !", u"Atenci�n")
					self.EstatusFechaFinal(False)
		self.FillListCtrl()
				
	def GetFecha(self, fecha):
		return "'%s/%02d/%02d'" % (fecha.GetYear(), (fecha.GetMonth()) + 1, fecha.GetDay())
	
	def EstatusFechaFinal(self, truefalse):
		self.GetControl(ID_TEXTESTIMACIONFACTURAFECHAFINAL).Enable(truefalse)
		self.GetControl(ID_DATEPICKERESTIMACIONFACTURAFECHAFINAL).Enable(truefalse)
				
	def OnChoiceCtrlEstatus(self, evt):
		self.choiceinxestatus = self.GetControl(ID_CHOICEESTIMACIONFACTURAESTATUS).GetSelection()
		self.FillListCtrl()
		self.GetControl(ID_LISTCTRLESTIMACIONFACTURA).SetFocus()
		
	def OnSelected(self, evt):
		self.currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLESTIMACIONFACTURA).GetItem(self.currentitem, 0).GetText()
		self.facturaestimacion = int(datointerno)
		
	def OnDeselected(self, evt):
		self.currentitem, self.facturaestimacion = 0, 0
	
	def OnActivated(self, evt):
		pass
		
	def OnSortListCtrl(self, evt):
		self.colsort = evt.GetColumn()
		if self.colsort in self.colctrlorder:
			if self.lstctrlorder[self.colsort][1] == "desc":
				self.lstctrlsort = "%s asc" % self.lstctrlorder[self.colsort][0]
				self.lstctrlorder[self.colsort] = (self.lstctrlorder[self.colsort][0], "asc", "< ")
			else:
				self.lstctrlsort = "%s desc" % self.lstctrlorder[self.colsort][0]
				self.lstctrlorder[self.colsort] = (self.lstctrlorder[self.colsort][0], "desc", "> ")
			if self.colprev != self.colsort:
				self.lstctrlorder[self.colprev] = (self.lstctrlorder[self.colprev][0], self.lstctrlorder[self.colprev][1], "  ")
			self.FillListCtrl()
			self.colprev = self.colsort
		evt.Skip()
		
	def OnDoSearchNombreObra(self, evt):
		self.nombreobra =  self.GetControl(ID_FOREIGNESTIMACIONFACTURAFILTRONOMBREOBRA).GetValue()
		self.FillListCtrl()

	def OnCleanNombreObra(self, evt):
		self.GetControl(ID_FOREIGNESTIMACIONFACTURAFILTRONOMBREOBRA).SetValue("")
		self.nombreobra = ""
		self.FillListCtrl()

	def OnPrintExcel(self, event):
		self.connlite = sqlite3.connect(':memory:')
		self.culite = self.connlite.cursor()
		self.culite.execute("""create table facturasestimacion
		(id integer, obra text, fecha text, factura text, facturado real, pagado real,
		saldo real, acumfacturado real, acumpagado real, concepto text)""")
		self.FillListCtrl(printexcel = True)
		self.connlite.commit()
		tabla = "facturasestimacion"
		meta = ((14,"Id") , (100,u"Contrato / Obra"), (70,u"Fecha"), (20,u"Factura"), (20,u"Facturado"), (20,u"Pagado"),
			(20, "Saldo"), (100, "Acum.Facturado"), (70,u"Acum.Pagado"), (100,u"Concepto"))
		query = "select * from facturasestimacion"
		titulo = u"Reporte de Estimaciones / Facturas"
		self.DisplayGrid(tabla, meta, query, titulo, cu = self.culite)
		self.culite.close()
		self.connlite.close()

	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
		return dato
	
	def FillListCtrl(self, printexcel = False):
		fechafiltro = self.GetControl(ID_DATEPICKERESTIMACIONFACTURAFECHAINICIAL).GetValue()
		fechafactura = ""
		if fechafiltro:
			try:
				fechainicial = self.GetFecha(fechafiltro)
				fecharango = self.GetControl(ID_DATEPICKERESTIMACIONFACTURAFECHAFINAL).GetValue()
				if fecharango:
					fechafinal = self.GetFecha(fecharango)
					if fechainicial > fechafinal:
						Mensajes().Info(self, u"La Fecha Inicial de la Factura no debe ser mayor a la Fecha Final.\n\n" \
								u"Se tomar� en cuenta unicamente la fecha inicial.", u"Atenci�n")
						self.EstatusFechaFinal(False)
						return
					else:
						fechafactura = """
						and (convert(varchar(10), e.fecha, 111) >= %s
						and convert(varchar(10), e.fecha, 111) <= %s)
						""" % (fechainicial, fechafinal)
				else:
					fechafactura = " and convert(varchar(10), e.fecha, 111) = %s " % fechainicial
			except:
				fechafactura = ""
				
		wx.BeginBusyCursor()
		if not printexcel:
			lctrl = self.GetControl(ID_LISTCTRLESTIMACIONFACTURA)
			lctrl.Enable(False)
			lctrl.Show(False)
			lctrl.ClearAll()
			
		query = """
		select e.idfacturaestimacion, o.nombreobra, convert(varchar(10), e.fecha, 103), e.factura,
		isnull(sum(d.cantidad * d.importe), 0), e.cancelada, e.fkcontratoobra
		from gixfacturasestimacion e
		join gixcontratosobras o on e.fkcontratoobra = o.idcontratoobra
		left join gixfacturasestimaciondetalle d on e.idfacturaestimacion = d.fkfacturaestimacion
		where o.activo = 1 and (o.nombreobra like '%s' or o.nombreobra is null)
		""" + str(self.choicefiltroestatus[self.choiceinxestatus]) + fechafactura + """
		group by e.idfacturaestimacion, o.nombreobra, e.fecha, e.factura, e.cancelada, e.fkcontratoobra
		order by e.fkcontratoobra, """ + self.lstctrlsort
		nombreobra = '%%'
		if self.nombreobra:
			nombreobra = '%s%s%s' % ("%%", self.nombreobra, "%%")
		sql = (query % nombreobra)
		sqlx = sql.replace('\t', ' ')
		sql = sqlx.replace('\n', ' ')
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		totfacturado, totpagado, totporpagar, fila = 0,0,0,0
		contratoobra = 0; color = "green"
		if rows:
			if not printexcel:
				lctrl.InsertColumn(0, u"%sId" % self.lstctrlorder[0][2], wx.LIST_FORMAT_RIGHT)
				lctrl.InsertColumn(1, u"Contrato / Obra")
				lctrl.InsertColumn(2, u"%sFecha" % self.lstctrlorder[2][2], wx.LIST_FORMAT_CENTER)
				lctrl.InsertColumn(3, u"%sFactura" % self.lstctrlorder[3][2], wx.LIST_FORMAT_CENTER)
				lctrl.InsertColumn(4, u"Facturado", wx.LIST_FORMAT_RIGHT)
				lctrl.InsertColumn(5, u"Pagado", wx.LIST_FORMAT_RIGHT)
				lctrl.InsertColumn(6, u"Saldo", wx.LIST_FORMAT_RIGHT)
				lctrl.InsertColumn(7, u"Acum.Facturado", wx.LIST_FORMAT_RIGHT)
				lctrl.InsertColumn(8, u"Acum.Pagado", wx.LIST_FORMAT_RIGHT)
				lctrl.InsertColumn(9, u"Concepto")
				
			query1 = """
			select isnull(c.descripcion, '') from gixfacturasestimacion e
			left join gixfacturasestimaciondetalle d on e.idfacturaestimacion = d.fkfacturaestimacion
			left join gixconceptosestimacion c on d.fkconceptoestimacion = c.idconceptoestimacion
			where e.idfacturaestimacion = %s
			"""
			query2 = """
			select isnull(sum(p.importe), 0) from gixfacturasestimacion e
			left join gixfacturasestimacionpago p on e.idfacturaestimacion = p.fkfacturaestimacion
			where e.idfacturaestimacion = %s
			"""
			for row in rows:
				sql = (query1 % (int(row[0])))
				sqlx = sql.replace('\t', ' ')
				sql = sqlx.replace('\n', ' ')
				cu.execute(str(sql))
				rowsconceptos = fetchall(cu)
				conceptos = ""
				if rowsconceptos:
					for rowconcepto in rowsconceptos:
						if conceptos:
							conceptos += ", "
						conceptos += self.GetString(rowconcepto[0])
				
				sql = (query2 % (int(row[0])))
				sqlx = sql.replace('\t', ' ')
				sql = sqlx.replace('\n', ' ')
				cu.execute(str(sql))
				rowpagado = fetchone(cu)
				pagado = float(0)
				if rowpagado[0]:
					pagado = float(rowpagado[0])
					
				if int(row[6]) != contratoobra:
					contratoobra = int(row[6])
					acumfacturado, acumpagado = 0,0
					if color == "green": color = "blue"
					else: color = "green"
				
				nombreobra = str(row[1].strip())
				saldo = float(row[4]) - pagado
				acumfacturado += float(row[4]); acumpagado += pagado
				if printexcel:
					rowlite = (int(row[0]), self.GetString(nombreobra), self.GetString(row[2]), self.GetString(row[3]),
						   float(row[4]), float(pagado), float(saldo), float(acumfacturado), float(acumpagado),
						   self.GetString(conceptos))
					self.culite.execute("insert into facturasestimacion values (?,?,?,?,?,?,?,?,?,?)", rowlite)
				else:
					if color == "green":
						if int(row[5]) != 1:
							if fila %2 != 0: bgcolor = [185,245,185] # blue light->195,217,255 green->150,204,150
							else:            bgcolor = [232,250,238] # blue light->232,238,250 green->200,230,200
						else:
							if fila %2 != 0: bgcolor = [255,153,153]
							else:            bgcolor = [255,215,215]
					else:
						if int(row[5]) != 1:
							if fila %2 != 0: bgcolor = [195,217,255] # blue->204,204,255
							else:            bgcolor = [232,238,250] # blue->230,230,255
						else:
							if fila %2 != 0: bgcolor = [255,153,153]
							else:            bgcolor = [255,215,215]
							
					index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
					lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
					lctrl.SetStringItem(index, 0, str(row[0]))
					lctrl.SetStringItem(index, 1, self.GetString(nombreobra))
					lctrl.SetStringItem(index, 2, self.GetString(row[2]))
					lctrl.SetStringItem(index, 3, self.GetString(row[3]))
					lctrl.SetStringItem(index, 4, str(amount_and_cents_with_commas(row[4])))
					lctrl.SetStringItem(index, 5, str(amount_and_cents_with_commas(pagado)))
					lctrl.SetStringItem(index, 6, str(amount_and_cents_with_commas(saldo)))
					lctrl.SetStringItem(index, 7, str(amount_and_cents_with_commas(acumfacturado)))
					lctrl.SetStringItem(index, 8, str(amount_and_cents_with_commas(acumpagado)))
					lctrl.SetStringItem(index, 9, self.GetString(conceptos))
					lctrl.SetItemData(index, row[0])
					totfacturado += float(row[4])
					totpagado += pagado
					totporpagar =  totfacturado - totpagado
					fila += 1
					
			if not printexcel:
				lctrl.SetColumnWidth(0, 35)
				lctrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
				lctrl.SetColumnWidth(2, wx.LIST_AUTOSIZE)
				lctrl.SetColumnWidth(3, 60)
				lctrl.SetColumnWidth(4, wx.LIST_AUTOSIZE)
				lctrl.SetColumnWidth(5, wx.LIST_AUTOSIZE)
				lctrl.SetColumnWidth(6, wx.LIST_AUTOSIZE)
				lctrl.SetColumnWidth(7, wx.LIST_AUTOSIZE)
				lctrl.SetColumnWidth(8, wx.LIST_AUTOSIZE)
				lctrl.SetColumnWidth(9, wx.LIST_AUTOSIZE)
				self.Habilita()
				
		elif printexcel:
			Mensajes().Info(self, u"� No se Encontraron Estimaciones/Facturas !", u"Atenci�n")
			self.Habilita(True, False)
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Estimaciones/Facturas", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 200)
			self.Habilita(True, False)
			
		cu.close()
		if not printexcel:
			lctrl.Enable(True)
			lctrl.Show(True)
			self.GetControl(ID_TEXTCTRLESTIMACIONFACTURATOTALFACTURADO).SetBackgroundColour(wx.Colour(153,255,153))
			self.GetControl(ID_TEXTCTRLESTIMACIONFACTURATOTALPAGADO).SetBackgroundColour(wx.Colour(153,255,153))
			self.GetControl(ID_TEXTCTRLESTIMACIONFACTURATOTALPORPAGAR).SetBackgroundColour(wx.Colour(153,255,153))
			self.GetControl(ID_TEXTCTRLESTIMACIONFACTURAALAVISTA).SetBackgroundColour(wx.Colour(153,255,153))
			self.GetControl(ID_TEXTCTRLESTIMACIONFACTURATOTALFACTURADO).SetValue(str(amount_and_cents_with_commas(totfacturado)))
			self.GetControl(ID_TEXTCTRLESTIMACIONFACTURATOTALPAGADO).SetValue(str(amount_and_cents_with_commas(totpagado)))
			self.GetControl(ID_TEXTCTRLESTIMACIONFACTURATOTALPORPAGAR).SetValue(str(amount_and_cents_with_commas(totporpagar)))
			self.GetControl(ID_TEXTCTRLESTIMACIONFACTURAALAVISTA).SetValue(str(fila))
			
		wx.EndBusyCursor()
		
	def Habilita(self, excel = True, excelbool = True):
		if excel:
			self.GetControl(ID_BUTTONESTIMACIONFACTURAIMPRESION).Enable(excelbool)
	
class GixReporteEstimacionesPagos(wx.Dialog, GixBase):
	estatussolicitud = ["S","R","A","E","F","B","T","C"]; estatusotros = ["O","P","N"]
	def __init__(self, parent, id = -1, title = u"Reporte de Pagos de Estimaciones / Facturas", pos = wx.DefaultPosition,
		     size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE, usuario = None):
		
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.lstctrlorder = {0:("p.idpagofacturaestimacion","desc",""), 2:("e.fechaprogramada","asc","< "),
		                     3:("p.fkcheque","desc",""), 4:("f.factura","desc","")}
		self.colctrlorder = (0,2,3,4)
		self.nombreobra = ""; self.nombreproveedor = ""
		self.currentitem, self.pagoestimacion = 0, 0
		ReporteEstimacionPagoFuncion(self, True)
		self.colprev, self.colsort = 2, 2
		self.lstctrlsort = "e.fechaprogramada asc"
		self.choicefiltrovista = {0:"f.fkcontratoobra, ", 1:"v.razonsocial, "}
		self.choiceinxvista = 0
		self.GetControl(ID_CHOICEESTIMACIONPAGOFILTROVISTA).SetSelection(self.choiceinxvista)
		self.Bind(wx.EVT_CHOICE, self.OnChoiceCtrlVista, id = ID_CHOICEESTIMACIONPAGOFILTROVISTA)
		self.GetControl(ID_FOREIGNESTIMACIONPAGOFILTRONOMBREOBRA).ShowCancelButton(True)
		self.GetControl(ID_FOREIGNESTIMACIONPAGOFILTRONOMBREPROVEEDOR).ShowCancelButton(True)
		self.Bind(wx.EVT_DATE_CHANGED, self.OnDatePicker, id = ID_DATEPICKERESTIMACIONPAGOFECHAINICIAL)
		self.Bind(wx.EVT_DATE_CHANGED, self.OnDatePicker, id = ID_DATEPICKERESTIMACIONPAGOFECHAFINAL)
		wx.EVT_BUTTON(self, ID_BUTTONESTIMACIONPAGOIMPRESION, self.OnPrintExcel)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchNombreObra, id = ID_FOREIGNESTIMACIONPAGOFILTRONOMBREOBRA)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanNombreObra, id = ID_FOREIGNESTIMACIONPAGOFILTRONOMBREOBRA)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchNombreObra, id = ID_FOREIGNESTIMACIONPAGOFILTRONOMBREOBRA)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchNombreProveedor, id = ID_FOREIGNESTIMACIONPAGOFILTRONOMBREPROVEEDOR)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanNombreProveedor, id = ID_FOREIGNESTIMACIONPAGOFILTRONOMBREPROVEEDOR)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchNombreProveedor, id = ID_FOREIGNESTIMACIONPAGOFILTRONOMBREPROVEEDOR)
		self.Bind(wx.EVT_LIST_COL_CLICK, self.OnSortListCtrl, id = ID_LISTCTRLESTIMACIONPAGO)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelected, id = ID_LISTCTRLESTIMACIONPAGO)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselected, id = ID_LISTCTRLESTIMACIONPAGO)
		self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnActivated, id = ID_LISTCTRLESTIMACIONPAGO)
		wx.EVT_CLOSE(self, self.OnClose)
		self.GetControl(ID_LISTCTRLESTIMACIONPAGO).SetFocus()
		self.FillListCtrl()
		
	def OnClose(self, evt):
		self.Destroy()
		
	def OnChoiceCtrlVista(self, evt):
		self.choiceinxvista = self.GetControl(ID_CHOICEESTIMACIONPAGOFILTROVISTA).GetSelection()
		self.FillListCtrl()
		self.GetControl(ID_LISTCTRLESTIMACIONPAGO).SetFocus()
		
	def OnDatePicker(self, evt):
		idctrl = evt.GetId(); ctrl = self.GetControl(idctrl); fecha = ctrl.GetValue()
		if idctrl == ID_DATEPICKERESTIMACIONPAGOFECHAINICIAL:
			if fecha:
				fechainicial = self.GetFecha(fecha)
				self.EstatusFechaFinal(True)
				fecha = self.GetControl(ID_DATEPICKERESTIMACIONPAGOFECHAFINAL).GetValue()
				if fecha:
					fechafinal = self.GetFecha(fecha)
					if fechainicial > fechafinal:
						Mensajes().Info(self, u"� La Fecha Inicial del Pago no debe ser mayor a la Fecha Final !\n\n" \
								u"Se tomar� en cuenta unicamente la fecha inicial.", u"Atenci�n")
						self.EstatusFechaFinal(False)
			else:
				self.EstatusFechaFinal(False)
		else:
			if fecha:
				fechafinal = self.GetFecha(fecha)
				fecha = self.GetControl(ID_DATEPICKERESTIMACIONPAGOFECHAINICIAL).GetValue()
				if fecha:
					fechainicial = self.GetFecha(fecha)
					if fechainicial > fechafinal:
						Mensajes().Info(self, u"� La Fecha Inicial del Pago no debe ser mayor a la Fecha Final !\n\n" \
								u"Se tomar� en cuenta unicamente la fecha inicial.", u"Atenci�n")
						self.EstatusFechaFinal(False)
				else:
					Mensajes().Info(self, u"� Inconsistencia en la fecha inicial !", u"Atenci�n")
					self.EstatusFechaFinal(False)
		self.FillListCtrl()
				
	def GetFecha(self, fecha):
		return "'%s/%02d/%02d'" % (fecha.GetYear(), (fecha.GetMonth()) + 1, fecha.GetDay())
	
	def EstatusFechaFinal(self, truefalse):
		self.GetControl(ID_TEXTESTIMACIONPAGOFECHAFINAL).Enable(truefalse)
		self.GetControl(ID_DATEPICKERESTIMACIONPAGOFECHAFINAL).Enable(truefalse)
				
	def OnSelected(self, evt):
		self.currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLESTIMACIONPAGO).GetItem(self.currentitem, 0).GetText()
		self.pagoestimacion = int(datointerno)
		
	def OnDeselected(self, evt):
		self.currentitem, self.pagoestimacion = 0, 0
	
	def OnActivated(self, evt):
		pass
		
	def OnSortListCtrl(self, evt):
		self.colsort = evt.GetColumn()
		if self.colsort in self.colctrlorder:
			if self.lstctrlorder[self.colsort][1] == "desc":
				self.lstctrlsort = "%s asc" % self.lstctrlorder[self.colsort][0]
				self.lstctrlorder[self.colsort] = (self.lstctrlorder[self.colsort][0], "asc", "< ")
			else:
				self.lstctrlsort = "%s desc" % self.lstctrlorder[self.colsort][0]
				self.lstctrlorder[self.colsort] = (self.lstctrlorder[self.colsort][0], "desc", "> ")
			if self.colprev != self.colsort:
				self.lstctrlorder[self.colprev] = (self.lstctrlorder[self.colprev][0], self.lstctrlorder[self.colprev][1], "  ")
			self.FillListCtrl()
			self.colprev = self.colsort
		evt.Skip()
		
	def OnDoSearchNombreObra(self, evt):
		self.nombreobra =  self.GetControl(ID_FOREIGNESTIMACIONPAGOFILTRONOMBREOBRA).GetValue()
		self.FillListCtrl()

	def OnCleanNombreObra(self, evt):
		self.GetControl(ID_FOREIGNESTIMACIONPAGOFILTRONOMBREOBRA).SetValue("")
		self.nombreobra = ""
		self.FillListCtrl()

	def OnDoSearchNombreProveedor(self, evt):
		self.nombreproveedor =  self.GetControl(ID_FOREIGNESTIMACIONPAGOFILTRONOMBREPROVEEDOR).GetValue()
		self.FillListCtrl()

	def OnCleanNombreProveedor(self, evt):
		self.GetControl(ID_FOREIGNESTIMACIONPAGOFILTRONOMBREPROVEEDOR).SetValue("")
		self.nombreproveedor = ""
		self.FillListCtrl()

	def OnPrintExcel(self, event):
		self.connlite = sqlite3.connect(':memory:')
		self.culite = self.connlite.cursor()
		self.culite.execute("""create table pagosestimacion
		(id integer, obra text, fecha text, referencia text, factura text, pagado real, acumpagado real, nombreproveedor text)""")
		self.FillListCtrl(printexcel = True)
		self.connlite.commit()
		tabla = "pagosestimacion"
		meta = ((14,"Id") , (100,u"Contrato / Obra"), (70,u"Fecha"), (20,u"Referencia"), (20,u"Factura"),
		        (20,u"Pagado"), (20,u"Acum.Pagado"), (100,u"Proveedor"))
		query = "select * from pagosestimacion"
		titulo = u"Reporte de Pagos de Estimaciones / Facturas"
		self.DisplayGrid(tabla, meta, query, titulo, cu = self.culite)
		self.culite.close()
		self.connlite.close()

	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
		return dato
	
	def FillListCtrl(self, printexcel = False):
		#try:
			#gixmodel.memcache
		#except:
			#warnings.warn("<<Falta instalar memcache>>")
			#Mensajes().Info(self, u"� Falta instalar memcache !", u"Aviso")
			#self.Destroy()
			#return
		fechainicial, fechafinal = "", ""		
		fechafiltro = self.GetControl(ID_DATEPICKERESTIMACIONPAGOFECHAINICIAL).GetValue()
		if fechafiltro:
			try:
				fechainicial = self.GetFecha(fechafiltro)
				fecharango = self.GetControl(ID_DATEPICKERESTIMACIONPAGOFECHAFINAL).GetValue()
				if fecharango:
					fechafinal = self.GetFecha(fecharango)
					if fechainicial > fechafinal:
						Mensajes().Info(self, u"La Fecha Inicial del Pago no debe ser mayor a la Fecha Final.\n\n" \
								u"Se tomar� en cuenta unicamente la fecha inicial.", u"Atenci�n")
						self.EstatusFechaFinal(False)
						return
			except:
				fechainicial, fechafinal = "", ""
				
		wx.BeginBusyCursor()
		if not printexcel:
			lctrl = self.GetControl(ID_LISTCTRLESTIMACIONPAGO)
			lctrl.Enable(False)
			lctrl.Show(False)
			lctrl.ClearAll()
			
		orderby = str(self.choicefiltrovista[self.choiceinxvista]) + self.lstctrlsort
		nombreobra = self.nombreobra; nombreproveedor = self.nombreproveedor
		
		# esto es sin blackbox
		fechapago = ""
		if fechainicial:
			if fechafinal:
				fechapago = """
				and (convert(varchar(10), e.fechaprogramada, 111) >= %s
				and convert(varchar(10), e.fechaprogramada, 111) <= %s)
				""" % (fechainicial, fechafinal)
			else:
				fechapago = " and convert(varchar(10), e.fechaprogramada, 111) = %s " % fechainicial
		
		query = """
		select p.idpagofacturaestimacion, o.nombreobra, convert(varchar(10), e.fechaprogramada, 103),
		p.fkcheque, f.factura, p.importe, v.razonsocial, f.fkcontratoobra, e.estatus, o.fkproveedor
		from gixfacturasestimacionpago p
		join gixegresoscheques e on p.fkcheque = e.idcheque
		join gixfacturasestimacion f on p.fkfacturaestimacion = f.idfacturaestimacion
		join gixcontratosobras o on f.fkcontratoobra = o.idcontratoobra
		join gixproveedoresobras v on o.fkproveedor = v.idproveedor
		where (o.nombreobra like '%s' or o.nombreobra is null) and (v.razonsocial like '%s' or v.razonsocial is null)
		""" + fechapago + """
		order by """ + orderby
		nombreobrafiltro, nombreproveedorfiltro = '%%', '%%'
		if nombreobra:
			nombreobrafiltro = '%s%s%s' % ("%%", nombreobra, "%%")
		if nombreproveedor:
			nombreproveedorfiltro = '%s%s%s' % ("%%", nombreproveedor, "%%")
		sql = (query % (nombreobrafiltro, nombreproveedorfiltro))		
		sqlx = sql.replace('\t', ' ')
		sql = sqlx.replace('\n', ' ')
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = cu.fetchall()
		cu.close()
		# hasta aqui sin blackbox
		
		#dicx = dict(fechainicial = fechainicial, fechafinal = fechafinal, nombreobra = nombreobra,
			    #nombreproveedor = nombreproveedor, orderby = orderby)
		##req = BBRequest(request = "reporteestimacionpago", user="smartics", source="gix", args = dicx)
		#req = dict(request = "reporteestimacionpago", user="smartics", source="gix", args = dicx)
		#rkey = setParametersInMemcache(req, FORCETEST)
		#if not rkey:
			#warnings.warn("<<No se pudo obtener la llave para la funcion reporteestimacionpago>>")
			#Mensajes().Error(self, u"� Problemas con memcache !", u"Atenci�n")
			#self.Destroy()
			#return
		
		#ciclo = 0
		#while True:
			#rows = mcache.get(rkey)
			#if rows:
				#break
			#if ciclo > 7000:
				#wx.EndBusyCursor()
				#Mensajes().Error(self, u"� No Responde BlackBox !", u"Atenci�n")
				##self.Destroy()
				#return
			
			#ciclo += 1
			
		totpagado, fila = 0,0
		contratoobra, proveedorobra = 0,0; color = "green"
		if rows:
			if not printexcel:
				lctrl.InsertColumn(0, u"%sId" % self.lstctrlorder[0][2], wx.LIST_FORMAT_RIGHT)
				lctrl.InsertColumn(1, u"Contrato / Obra")
				lctrl.InsertColumn(2, u"%sFecha" % self.lstctrlorder[2][2], wx.LIST_FORMAT_CENTER)
				lctrl.InsertColumn(3, u"%sReferencia" % self.lstctrlorder[3][2], wx.LIST_FORMAT_CENTER)
				lctrl.InsertColumn(4, u"%sFactura" % self.lstctrlorder[4][2], wx.LIST_FORMAT_CENTER)
				lctrl.InsertColumn(5, u"Cantidad", wx.LIST_FORMAT_RIGHT)
				lctrl.InsertColumn(6, u"Acumulado", wx.LIST_FORMAT_RIGHT)
				lctrl.InsertColumn(7, u"Proveedor")
				
			for row in rows:
				if self.nombreproveedor and color == "blue":
					pass
				elif self.choiceinxvista == 0:
					if int(row[7]) != contratoobra:
						contratoobra = int(row[7])
						acumpagado = 0
						if color == "green": color = "blue"
						else: color = "green"
				else:
					if int(row[9]) != proveedorobra:
						proveedorobra = int(row[9])
						acumpagado = 0
						if color == "green": color = "blue"
						else: color = "green"
				
				nombreobra = str(row[1].strip())
				if self.GetString(row[8]) in self.estatussolicitud:
					referencia = str(int(row[3])) + " - SOLICITUD"
				elif self.GetString(row[8]) in self.estatusotros:
					referencia = str(int(row[3])) + " - OTROS"
				else:
					referencia = str(int(row[3])) + " - **"
				
				acumpagado += float(row[5])
				nombreproveedor = str(row[6].strip())
				if printexcel:
					rowlite = (int(row[0]), self.GetString(nombreobra), self.GetString(row[2]), self.GetString(referencia),
					           self.GetString(row[4]), float(row[5]), float(acumpagado), self.GetString(nombreproveedor))
					self.culite.execute("insert into pagosestimacion values (?,?,?,?,?,?,?,?)", rowlite)
				else:
					if color == "green":
						if True:
							if fila %2 != 0: bgcolor = [185,245,185] # blue light->195,217,255 green->150,204,150
							else:            bgcolor = [232,250,238] # blue light->232,238,250 green->200,230,200
						else:
							if fila %2 != 0: bgcolor = [255,153,153]
							else:            bgcolor = [255,215,215]
					else:
						if True:
							if fila %2 != 0: bgcolor = [195,217,255] # blue->204,204,255
							else:            bgcolor = [232,238,250] # blue->230,230,255
						else:
							if fila %2 != 0: bgcolor = [255,153,153]
							else:            bgcolor = [255,215,215]
							
					index = lctrl.InsertStringItem(sys.maxint, str(int(row[0])))
					lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
					lctrl.SetStringItem(index, 0, str(int(row[0])))
					lctrl.SetStringItem(index, 1, self.GetString(nombreobra))
					lctrl.SetStringItem(index, 2, self.GetString(row[2]))
					lctrl.SetStringItem(index, 3, self.GetString(referencia))
					lctrl.SetStringItem(index, 4, self.GetString(row[4]))
					lctrl.SetStringItem(index, 5, str(amount_and_cents_with_commas(row[5])))
					lctrl.SetStringItem(index, 6, str(amount_and_cents_with_commas(acumpagado)))
					lctrl.SetStringItem(index, 7, self.GetString(nombreproveedor))
					lctrl.SetItemData(index, row[0])
					totpagado += float(row[5])
					fila += 1
					
			if not printexcel:
				lctrl.SetColumnWidth(0, 50)
				lctrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
				lctrl.SetColumnWidth(2, wx.LIST_AUTOSIZE)
				lctrl.SetColumnWidth(3, wx.LIST_AUTOSIZE)
				lctrl.SetColumnWidth(4, 60)
				lctrl.SetColumnWidth(5, wx.LIST_AUTOSIZE)
				lctrl.SetColumnWidth(6, wx.LIST_AUTOSIZE)
				lctrl.SetColumnWidth(7, wx.LIST_AUTOSIZE)
				self.Habilita()
				
		elif printexcel:
			Mensajes().Info(self, u"� No se Encontraron Pagos !", u"Atenci�n")
			self.Habilita(True, False)
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Pagos", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 200)
			self.Habilita(True, False)
			
		if not printexcel:
			lctrl.Enable(True)
			lctrl.Show(True)
			self.GetControl(ID_TEXTCTRLESTIMACIONPAGOTOTALPAGADO).SetBackgroundColour(wx.Colour(153,255,153))
			self.GetControl(ID_TEXTCTRLESTIMACIONPAGOALAVISTA).SetBackgroundColour(wx.Colour(153,255,153))
			self.GetControl(ID_TEXTCTRLESTIMACIONPAGOTOTALPAGADO).SetValue(str(amount_and_cents_with_commas(totpagado)))
			self.GetControl(ID_TEXTCTRLESTIMACIONPAGOALAVISTA).SetValue(str(fila))
			
		wx.EndBusyCursor()
		
	def Habilita(self, excel = True, excelbool = True):
		if excel:
			self.GetControl(ID_BUTTONESTIMACIONPAGOIMPRESION).Enable(excelbool)

class GixPagosDeClientesFunc2(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Elegir Inmueble", pos = wx.DefaultPosition,
	             size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE, inmuebleelegido = None, etapa = 0):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.InmuebleElegido = inmuebleelegido
		self.codigoinmueble, self.etapa = 0, etapa
		PagosDeClientesFunc2(self, True)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelected, id = ID_LISTCTRLPAGOCLIENTESFUNC2)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselected, id = ID_LISTCTRLPAGOCLIENTESFUNC2)
		self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnActivated, id = ID_LISTCTRLPAGOCLIENTESFUNC2)
		self.Bind(wx.EVT_BUTTON, self.OnClose, id = ID_BUTTONPAGOCLIENTESFUNC2CANCELAR)
		self.Bind(wx.EVT_BUTTON, self.OnActivated, id = ID_BUTTONPAGOCLIENTESFUNC2ELEGIR)
		wx.EVT_CLOSE(self, self.OnClose)
		self.FillListCtrl()
		self.SetFocus()
		
	def OnClose(self, evt):
		self.Destroy()
	
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
		return dato.strip()

	def OnSelected(self, evt):
		currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLPAGOCLIENTESFUNC2).GetItem(currentitem, 0).GetText()
		self.codigoinmueble = int(datointerno)
		self.GetControl(ID_BUTTONPAGOCLIENTESFUNC2ELEGIR).Enable(True)
		evt.Skip()
		
	def OnDeselected(self, evt):
		self.codigoinmueble = 0
		self.GetControl(ID_BUTTONPAGOCLIENTESFUNC2ELEGIR).Enable(False)
		evt.Skip()
	
	def OnActivated(self, evt):
		if self.InmuebleElegido(codigoinmueble = self.codigoinmueble):
			self.Destroy()
		self.GetControl(ID_LISTCTRLPAGOCLIENTESFUNC2).SetFocus()
		
	def FillListCtrl(self):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLPAGOCLIENTESFUNC2)
		lctrl.Enable(False)
		lctrl.Show(False)
		lctrl.ClearAll()
		sql = """
		select i.codigo, i.inmueble, i.iden1, i.iden2, i.condominio, i.esquina from INMUEBLE i
		join CUENTA c on c.fk_inmueble = i.codigo
		where i.fk_etapa = %s and i.precio is not null
		order by i.inmueble, i.iden2, i.iden1
		""" % self.etapa
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			lctrl.InsertColumn(0, u"C�digo", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(1, u"Inmueble", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(2, u"Lote", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(3, u"Manzana", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(4, u"Condominio")
			lctrl.InsertColumn(5, u"Esquina", wx.LIST_FORMAT_CENTER)
			for fila, row in enumerate(rows):
				if fila %2 != 0: bgcolor = [150,204,150]
				else:            bgcolor = [200,230,200]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				if int(row[5]): esquina = "S"
				else: esquina = "N"
				if row[4]: condominio = self.GetString(row[4])
				else: condominio = ""
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, str(row[1]))
				lctrl.SetStringItem(index, 2, str(row[2]))
				lctrl.SetStringItem(index, 3, str(row[3]))
				lctrl.SetStringItem(index, 4, condominio)
				lctrl.SetStringItem(index, 5, str(esquina))
				lctrl.SetItemData(index, row[0])
			lctrl.SetColumnWidth(0, 70)
			lctrl.SetColumnWidth(1, 70)
			lctrl.SetColumnWidth(2, 70)
			lctrl.SetColumnWidth(3, 70)
			lctrl.SetColumnWidth(4, 80)
			lctrl.SetColumnWidth(5, 70)
			lctrl.SetItemState(0, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
			lctrl.EnsureVisible(0)
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Inmuebles", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 200)
			self.GetControl(ID_BUTTONPAGOCLIENTESFUNC2ELEGIR).Enable(False)
		lctrl.Enable(True)
		lctrl.Show(True)
		wx.EndBusyCursor()
		
ID_LISTCTRLPAGARESICLAR = wx.NewId()
ID_BUTTONPAGARESELEGIR = wx.NewId()
ID_BUTTONPAGARESCANCELAR = wx.NewId()

def pagaresIclar( parent, call_fit = True, set_sizer = True ):
	item0 = wx.BoxSizer( wx.VERTICAL )
    
	item0.Add( [ 20, 5 ] , 0, wx.ALIGN_CENTER|wx.ALL, 5 )

	item1 = wx.ListCtrl( parent, ID_LISTCTRLPAGARESICLAR, wx.DefaultPosition, [330,450], wx.LC_REPORT|wx.SUNKEN_BORDER )
	item0.Add( item1, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT|wx.BOTTOM, 5 )

	item2 = wx.StaticLine( parent, ID_LINE, wx.DefaultPosition, [20,-1], wx.LI_HORIZONTAL )
	item0.Add( item2, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.ALL, 5 )

	item3 = wx.BoxSizer( wx.HORIZONTAL )
    
	item4 = wx.Button( parent, ID_BUTTONPAGARESELEGIR, u"Elegir", wx.DefaultPosition, wx.DefaultSize, 0 )
	item4.SetToolTip( wx.ToolTip(u"Elegir Documento Pagar�") )
	item3.Add( item4, 0, wx.ALIGN_CENTER|wx.LEFT|wx.TOP|wx.BOTTOM, 5 )

	item5 = wx.Button( parent, ID_BUTTONPAGARESCANCELAR, u"Cancelar", wx.DefaultPosition, wx.DefaultSize, 0 )
	item5.SetToolTip( wx.ToolTip(u"Cancelar y Salir") )
	item3.Add( item5, 0, wx.ALIGN_CENTER|wx.ALL, 5 )

	item0.Add( item3, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT|wx.BOTTOM, 5 )

	if set_sizer == True:
		parent.SetSizer( item0 )
		if call_fit == True:
			item0.SetSizeHints( parent )
    
	return item0

class GixPagaresIclar(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Elegir Documento Pagar�", pos = wx.DefaultPosition,
	             size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE, funcion = None, documentoelegido = 0  ):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.DocumentoElegido = documentoelegido
		self.funcion = funcion
		self.codigopagare = 0
		self.importepagareiclar = 0
		self.dicGrupo = dict()
		pagaresIclar(self, True)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelected, id = ID_LISTCTRLPAGARESICLAR)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselected, id = ID_LISTCTRLPAGARESICLAR)
		self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnActivated, id = ID_LISTCTRLPAGARESICLAR)
		self.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.OnContexto, id = ID_LISTCTRLPAGARESICLAR)
		self.Bind(wx.EVT_BUTTON, self.OnClose, id = ID_BUTTONPAGARESCANCELAR)
		self.Bind(wx.EVT_BUTTON, self.OnActivated, id = ID_BUTTONPAGARESELEGIR)
		wx.EVT_CLOSE(self, self.OnClose)
		self.FillListCtrl()
		self.SetFocus()		
		
	def OnClose(self, evt):
		self.Destroy()
		
	def OnContexto( self, evt):
		try:
			assert self.codigopagare and self.importepagareiclar > 0
		except:
			return
		menu = wx.Menu()
		try:
			assert self.codigopagare in self.dicGrupo
		
			self.Bind( wx.EVT_MENU, self.QuitarAGrupo, menu.Append(-1, u"Quitar a grupo de documentos" ))
			self.Bind( wx.EVT_MENU, self.VerGrupo, menu.Append(-1, u"Ver grupo de documentos" ))
			self.Bind( wx.EVT_MENU, self.ModificarEnGrupo, menu.Append(-1, u"Modificar importe en grupo" ))
		except:
			self.Bind( wx.EVT_MENU, self.AgregarAGrupo, menu.Append(-1, u"Agregar a grupo de documentos" ))
		self.PopupMenu( menu )
			
	def AgregarAGrupo( self, evt ):
		self.dicGrupo[self.codigopagare] = dict( importepagareiclar = self.importepagareiclar, fechavencimientopagareiclar = self.fechavencimientopagareiclar)
		
	def ModificarEnGrupo( self, evt ):
		importe = wx.GetTextFromUser("Monto a considerar", u"Atenci�n", default_value = str(self.dicGrupo[self.codigopagare]["importepagareiclar"]))
		try:
			assert float(importe) <= self.dicGrupo[self.codigopagare]["importepagareiclar"]
			self.dicGrupo[self.codigopagare]["importepagareiclar"] = float(importe) 
		except:
			Mensajes().Info( self, u"Importe inv�lido", u"Atenci�n")
		return
			
	def QuitarAGrupo( self, evt ):
		self.dicGrupo.pop( self.codigopagare )
	
	def VerGrupo( self, evt):
		grupo = []
		total = 0
		for x in self.dicGrupo:
			grupo.append( "Doc. %s\t%s\t%s" % (x, self.dicGrupo.get(x).get("fechavencimientopagareiclar" ), self.dicGrupo.get(x).get("importepagareiclar")))
			total += self.dicGrupo.get(x).get("importepagareiclar")
			
		grupo.append( "\n\nTotal:\t\t %s" % ( total,))
		Mensajes().Info( self, "\n".join(grupo), u"Documentos")
	
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
		return dato.strip()

	def OnSelected(self, evt):
		currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLPAGARESICLAR).GetItem(currentitem, 0).GetText()
		self.codigopagare= int(datointerno)
		sql = "select saldo, convert(varchar(10), fechadevencimiento,101) from documento_pagare where codigo = %s" % ( self.codigopagare )
		
		cu = r_cn.cursor()
		cu.execute( sql )
		row = fetchone( cu )
		try:
			self.importepagareiclar = float( row[0] )
			self.fechavencimientopagareiclar = str(row[1])
		except:
			self.importepagareiclar = 0
			self.fechavencimientopagareiclar = ""
		cu.close()
			
		self.GetControl(ID_BUTTONPAGARESELEGIR).Enable(True)
		evt.Skip()
		
	def OnDeselected(self, evt):
		self.codigopagare = 0
		self.importepagareiclar = 0
		self.fechavencimientopagareiclar = ""
		self.GetControl(ID_BUTTONPAGARESELEGIR).Enable(False)
		evt.Skip()
	
	def OnActivated(self, evt):
		#if self.codigopagare <> 0:
		if self.funcion( codigopagare = self.codigopagare, importepagareiclar = self.importepagareiclar, fechavencimientopagareiclar = self.fechavencimientopagareiclar, dicGrupo = self.dicGrupo):
			#Mensajes().Info(self, " documento pagare %s, saldo %s" % ( self.codigopagare, self.importepagareiclar), u"Atenci�n")
			self.Destroy()
		self.GetControl(ID_LISTCTRLPAGARESICLAR).SetFocus()
		
	def FillListCtrl(self):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLPAGARESICLAR)
		lctrl.Enable(False)
		lctrl.Show(False)
		lctrl.ClearAll()
		#select e.codigo, e.nombre, e.rfc, 'xxxxxxxxxxxx' from CLIENTE e
		#left join referencias_rap on e.codigo = r.cliente
		sql = """
		select d.codigo, convert(varchar(10), d.fechadevencimiento, 111),
		d.cargo, d.saldo
		from documento_pagare d join cuenta_pagare c on d.fk_cuenta = c.codigo where c.fk_documento = %s order by d.codigo
		""" % (self.DocumentoElegido)
		cu = r_cn.cursor()
		sql = sql.replace("\n"," ")
		sql = sql.replace("\t"," ")
		
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			lctrl.InsertColumn(0, u"C�digo", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(1, u"Fecha Venc")
			lctrl.InsertColumn(2, u"Cantidad", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(3, u"Saldo", wx.LIST_FORMAT_RIGHT)
			for fila, row in enumerate(rows):
				if fila %2 != 0: bgcolor = [150,204,150]
				else:            bgcolor = [200,230,200]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, str(row[1]))
				lctrl.SetStringItem(index, 2, amount_and_cents_with_commas(float(row[2])))
				lctrl.SetStringItem(index, 3, amount_and_cents_with_commas(float(row[3])))
				lctrl.SetItemData(index, row[0])
			lctrl.SetColumnWidth(0, 70)
			lctrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(2, wx.LIST_AUTOSIZE)
			lctrl.SetItemState(0, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
			lctrl.EnsureVisible(0)
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Documentos Pagares", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 200)
			self.GetControl(ID_BUTTONPAGARESELEGIR).Enable(False)
		lctrl.Enable(True)
		lctrl.Show(True)
		wx.EndBusyCursor()
		
class GixPagosDeClientesFunc3(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Elegir Cliente", pos = wx.DefaultPosition,
	             size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE, clienteelegido = None,
	             etapa = 0, nombrefiltro = None):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.ClienteElegido = clienteelegido
		self.codigocliente, self.etapa, self.nombrefiltro = 0, etapa, nombrefiltro
		PagosDeClientesFunc3(self, True)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelected, id = ID_LISTCTRLPAGOCLIENTESFUNC3)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselected, id = ID_LISTCTRLPAGOCLIENTESFUNC3)
		self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnActivated, id = ID_LISTCTRLPAGOCLIENTESFUNC3)
		self.Bind(wx.EVT_BUTTON, self.OnClose, id = ID_BUTTONPAGOCLIENTESFUNC3CANCELAR)
		self.Bind(wx.EVT_BUTTON, self.OnActivated, id = ID_BUTTONPAGOCLIENTESFUNC3ELEGIR)
		wx.EVT_CLOSE(self, self.OnClose)
		self.FillListCtrl()
		self.SetFocus()
		
	def OnClose(self, evt):
		self.Destroy()
	
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
		return dato.strip()

	def OnSelected(self, evt):
		currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLPAGOCLIENTESFUNC3).GetItem(currentitem, 0).GetText()
		self.codigocliente = int(datointerno)
		self.GetControl(ID_BUTTONPAGOCLIENTESFUNC3ELEGIR).Enable(True)
		evt.Skip()
		
	def OnDeselected(self, evt):
		self.codigocliente = 0
		self.GetControl(ID_BUTTONPAGOCLIENTESFUNC3ELEGIR).Enable(False)
		evt.Skip()
	
	def OnActivated(self, evt):
		if self.ClienteElegido(codigocliente = self.codigocliente):
			self.Destroy()
		self.GetControl(ID_LISTCTRLPAGOCLIENTESFUNC3).SetFocus()
		
	def FillListCtrl(self):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLPAGOCLIENTESFUNC3)
		lctrl.Enable(False)
		lctrl.Show(False)
		lctrl.ClearAll()
		#select e.codigo, e.nombre, e.rfc, 'xxxxxxxxxxxx' from CLIENTE e
		#left join referencias_rap on e.codigo = r.cliente
		sql = """
		select e.codigo, e.nombre, e.rfc from CLIENTE e
		join CUENTA c on c.fk_cliente = e.codigo
		where c.fk_etapa = %s %s
		group by e.codigo, e.nombre, e.rfc order by e.nombre
		""" % (self.etapa, self.nombrefiltro)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			lctrl.InsertColumn(0, u"C�digo", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(1, u"Nombre")
			lctrl.InsertColumn(2, u"R.F.C.")
			for fila, row in enumerate(rows):
				if fila %2 != 0: bgcolor = [150,204,150]
				else:            bgcolor = [200,230,200]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, self.GetString(row[1]))
				lctrl.SetStringItem(index, 2, self.GetString(row[2]))
				lctrl.SetItemData(index, row[0])
			lctrl.SetColumnWidth(0, 70)
			lctrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(2, wx.LIST_AUTOSIZE)
			lctrl.SetItemState(0, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
			lctrl.EnsureVisible(0)
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Clientes", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 200)
			self.GetControl(ID_BUTTONPAGOCLIENTESFUNC3ELEGIR).Enable(False)
		lctrl.Enable(True)
		lctrl.Show(True)
		wx.EndBusyCursor()
		
class GixPagosDeClientesFunc4(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Buscar Cuentas", pos = wx.DefaultPosition,
	             size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE, cuentaelegida = None,
	             etapa = 0, codigocliente = None):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.CuentaElegida = cuentaelegida
		self.codigocuenta, self.codigocliente, self.etapa = 0, codigocliente, etapa
		PagosDeClientesFunc4(self, True)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelected, id = ID_LISTCTRLPAGOCLIENTESFUNC4)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselected, id = ID_LISTCTRLPAGOCLIENTESFUNC4)
		self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnActivated, id = ID_LISTCTRLPAGOCLIENTESFUNC4)
		self.Bind(wx.EVT_BUTTON, self.OnClose, id = ID_BUTTONPAGOCLIENTESFUNC4CANCELAR)
		self.Bind(wx.EVT_BUTTON, self.OnActivated, id = ID_BUTTONPAGOCLIENTESFUNC4ELEGIR)
		wx.EVT_CLOSE(self, self.OnClose)
		self.FillListCtrl()
		self.SetFocus()
		
	def OnClose(self, evt):
		self.Destroy()
	
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
		return dato.strip()

	def OnSelected(self, evt):
		currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLPAGOCLIENTESFUNC4).GetItem(currentitem, 0).GetText()
		self.codigocuenta = int(datointerno)
		self.GetControl(ID_BUTTONPAGOCLIENTESFUNC4ELEGIR).Enable(True)
		evt.Skip()
		
	def OnDeselected(self, evt):
		self.codigocuenta = 0
		self.GetControl(ID_BUTTONPAGOCLIENTESFUNC4ELEGIR).Enable(False)
		evt.Skip()
	
	def OnActivated(self, evt):
		if self.CuentaElegida(codigocuenta = self.codigocuenta):
			self.Destroy()
		self.GetControl(ID_LISTCTRLPAGOCLIENTESFUNC4).SetFocus()
		
	def FillListCtrl(self):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLPAGOCLIENTESFUNC4)
		lctrl.Enable(False)
		lctrl.Show(False)
		lctrl.ClearAll()
		sql = """
		select c.codigo, c.saldo, isnull(i.codigo, 0), isnull(i.iden1, ''), isnull(i.iden2, ''), isnull(i.inmueble, '')
		from CUENTA c
		left join INMUEBLE i on i.codigo = c.fk_inmueble
		where c.fk_cliente = %s and c.fk_etapa = %s and c.saldo > 0 order by c.codigo
		""" % (self.codigocliente, self.etapa)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			lctrl.InsertColumn(0, u"Cuenta", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(1, u"Saldo", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(2, u"Inmueble", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(3, u"Lote", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(4, u"Manzana", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(5, u"Tipo", wx.LIST_FORMAT_CENTER)
			for fila, row in enumerate(rows):
				inmueble = ""
				if int(row[2]) > 0: inmueble = int(row[2])
				if fila %2 != 0: bgcolor = [150,204,150]
				else:            bgcolor = [200,230,200]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, str(amount_and_cents_with_commas(float(row[1]))))
				lctrl.SetStringItem(index, 2, str(inmueble))
				lctrl.SetStringItem(index, 3, str(row[3]))
				lctrl.SetStringItem(index, 4, str(row[4]))
				lctrl.SetStringItem(index, 5, str(row[5]))
				lctrl.SetItemData(index, row[0])
			lctrl.SetColumnWidth(0, 70)
			lctrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(2, 70)
			lctrl.SetColumnWidth(3, 70)
			lctrl.SetColumnWidth(4, 70)
			lctrl.SetColumnWidth(5, 70)
			lctrl.SetItemState(0, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
			lctrl.EnsureVisible(0)
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Cuentas", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 200)
			self.GetControl(ID_BUTTONPAGOCLIENTESFUNC4ELEGIR).Enable(False)
		lctrl.Enable(True)
		lctrl.Show(True)
		wx.EndBusyCursor()

class GixPagosDeClientesFunc5(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Elegir Prerecibo", pos = wx.DefaultPosition,
	             size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE, prereciboelegido = None, etapa = 0):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.PrereciboElegido = prereciboelegido
		self.codigoprerecibo, self.etapa = 0, etapa
		PagosDeClientesFunc5(self, True)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelected, id = ID_LISTCTRLPAGOCLIENTESFUNC5)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselected, id = ID_LISTCTRLPAGOCLIENTESFUNC5)
		self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnActivated, id = ID_LISTCTRLPAGOCLIENTESFUNC5)
		self.Bind(wx.EVT_BUTTON, self.OnClose, id = ID_BUTTONPAGOCLIENTESFUNC5CANCELAR)
		self.Bind(wx.EVT_BUTTON, self.OnActivated, id = ID_BUTTONPAGOCLIENTESFUNC5ELEGIR)
		self.Bind(wx.EVT_BUTTON, self.OnEliminar, id = ID_BUTTONPAGOCLIENTESFUNC5ELIMINAR)
		wx.EVT_CLOSE(self, self.OnClose)
		self.FillListCtrl()
		self.SetFocus()
		
	def OnClose(self, evt):
		self.Destroy()
	
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
		return dato.strip()

	def OnSelected(self, evt):
		currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLPAGOCLIENTESFUNC5).GetItem(currentitem, 3).GetText()
		self.codigoprerecibo = int(datointerno)
		datointerno = self.GetControl(ID_LISTCTRLPAGOCLIENTESFUNC5).GetItem(currentitem, 3).GetText()
		self.codigoprerecibo = int(datointerno)
		self.GetControl(ID_BUTTONPAGOCLIENTESFUNC5ELEGIR).Enable(True)
		evt.Skip()
		
	def OnDeselected(self, evt):
		self.codigoprerecibo = 0
		self.GetControl(ID_BUTTONPAGOCLIENTESFUNC5ELEGIR).Enable(False)
		evt.Skip()
	
	def OnActivated(self, evt):
		if self.PrereciboElegido(codigoprerecibo = self.codigoprerecibo):
			self.Destroy()
		self.GetControl(ID_LISTCTRLPAGOCLIENTESFUNC5).SetFocus()
		
	def OnEliminar(self, evt):
		if Mensajes().YesNo(self, u"� Desea realmente eliminar el prerecibo %s ?" % self.codigoprerecibo, u"Confirmaci�n"):
			cu = r_cn.cursor()
			cu.execute('delete from prerecibo where codigo = %s' % self.codigoprerecibo)
			cu.close()
			self.FillListCtrl()
			self.SetFocus()
		
	def FillListCtrl(self):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLPAGOCLIENTESFUNC5)
		lctrl.Enable(False)
		lctrl.Show(False)
		lctrl.ClearAll()
		sql = """
		select c.codigo, t.nombre, e.descripcion, p.codigo, p.cantidad,
		convert(varchar(10), p.fecha, 103), p.referencia from prerecibo p
		join CUENTA c on c.codigo = p.fk_cuenta
		join CLIENTE t on t.codigo = c.fk_cliente
		join ETAPA e on e.codigo = c.fk_etapa
		where c.fk_etapa = %s and fk_recibo is null order by c.codigo, p.codigo
		""" % self.etapa
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			lctrl.InsertColumn(0, u"Cuenta", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"Cliente")
			lctrl.InsertColumn(2, u"Etapa")
			lctrl.InsertColumn(3, u"Prerecibo", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(4, u"Monto", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(5, u"Fecha", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(6, u"Referencia")
			for fila, row in enumerate(rows):
				if fila %2 != 0: bgcolor = [150,204,150]
				else:            bgcolor = [200,230,200]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, self.GetString(row[1]))
				lctrl.SetStringItem(index, 2, self.GetString(row[2]))
				lctrl.SetStringItem(index, 3, str(row[3]))
				lctrl.SetStringItem(index, 4, str(amount_and_cents_with_commas(float(row[4]))))
				lctrl.SetStringItem(index, 5, str(row[5]))
				lctrl.SetStringItem(index, 6, self.GetString(row[6]))
				lctrl.SetItemData(index, row[0])
			lctrl.SetColumnWidth(0, 70)
			lctrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(2, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(3, 70)
			lctrl.SetColumnWidth(4, 90)
			lctrl.SetColumnWidth(5, 90)
			lctrl.SetColumnWidth(6, 100)
			lctrl.SetItemState(0, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
			lctrl.EnsureVisible(0)
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Prerecibos", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 200)
			self.GetControl(ID_BUTTONPAGOCLIENTESFUNC5ELEGIR).Enable(False)
		lctrl.Enable(True)
		lctrl.Show(True)
		wx.EndBusyCursor()

class GixPagosDeClientesFunc1(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = "", pos = wx.DefaultPosition, size = wx.DefaultSize,
	             style = wx.DEFAULT_DIALOG_STYLE, usuario = None):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.usuario = usuario
		self.empresa, self.desarrollo, self.etapa, self.dicabonar, self.dicinteres = 0, 0, 0, {}, {}
		self.docconsaldo, self.lstdocapagar, self.docapagar, self.docsaldo, self.prerecibo = 0, [], 0, 0, 0
		self.DicDatesAndTxt = {ID_BITMAPBUTTONPAGOCLIENTESFUNC1ELEGIRFECHAPAGO : ID_TEXTCTRLPAGOCLIENTESFUNC1FECHAPAGO}
		PagosDeClientesFunc1(self, True)
		self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1FECHAPAGO).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1NUMERORECIBO).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1CODIGORECIBO).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1TOTALPAGAR).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1PRERECIBO).SetBackgroundColour(wx.NamedColour("Medium Goldenrod"))
		self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1MONTOPRERECIBO).SetBackgroundColour(wx.NamedColour("Medium Goldenrod"))
		self.Bind(wx.EVT_CHOICE, self.OnChoiceCtrlEmpresa, id = ID_CHOICEPAGOCLIENTESFUNC1EMPRESA)
		self.Bind(wx.EVT_CHOICE, self.OnChoiceCtrlDesarrollo, id = ID_CHOICEPAGOCLIENTESFUNC1DESARROLLO)
		self.Bind(wx.EVT_CHOICE, self.OnChoiceCtrlEtapa, id = ID_CHOICEPAGOCLIENTESFUNC1ETAPA)
		for v in self.DicDatesAndTxt.keys():
			self.Bind(wx.EVT_BUTTON, self.OnFechaButton, id = v)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONPAGOCLIENTESFUNC1ELEGIRINMUEBLE, self.OnElegirInmueble)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnElegirCliente, id = ID_TEXTCTRLPAGOCLIENTESFUNC1NOMBRECLIENTE)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONPAGOCLIENTESFUNC1ELEGIRCLIENTE, self.OnElegirCliente)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelectedDocConSaldo, id = ID_LISTCTRLPAGOCLIENTESFUNC1DOCUMENTOSCONSALDO)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselectedDocConSaldo, id = ID_LISTCTRLPAGOCLIENTESFUNC1DOCUMENTOSCONSALDO)
		self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnPasarAPagar, id = ID_LISTCTRLPAGOCLIENTESFUNC1DOCUMENTOSCONSALDO)
		self.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.OnContextoDocumento, id = ID_LISTCTRLPAGOCLIENTESFUNC1DOCUMENTOSCONSALDO)
		wx.EVT_BUTTON(self, ID_BUTTONPAGOCLIENTESFUNC1PASARAPAGAR, self.OnPasarAPagar)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelectedDocAPagar, id = ID_LISTCTRLPAGOCLIENTESFUNC1DOCUMENTOSAPAGAR)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselectedDocAPagar, id = ID_LISTCTRLPAGOCLIENTESFUNC1DOCUMENTOSAPAGAR)
		self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnModificaAbono, id = ID_LISTCTRLPAGOCLIENTESFUNC1DOCUMENTOSAPAGAR)
		wx.EVT_BUTTON(self, ID_BUTTONPAGOCLIENTESFUNC1QUITARDOCUMENTO, self.OnQuitarDocumento)
		wx.EVT_BUTTON(self, ID_BUTTONPAGOCLIENTESFUNC1MODIFICAABONO, self.OnModificaAbono)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONPAGOCLIENTESFUNC1PASARAABONAR, self.OnPasarAAbonar)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONPAGOCLIENTESFUNC1INTERESMORATORIO, self.OnInteresMoratorio)
		wx.EVT_BUTTON(self, ID_BUTTONPAGOCLIENTESFUNC1PONERCERO, self.OnPonerEnCeroInteres)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONPAGOCLIENTESFUNC1ELEGIRPRERECIBO, self.OnElegirPrerecibo)
		wx.EVT_BUTTON(self, ID_BUTTONPAGOCLIENTESFUNC1APLICAR, self.OnAplicar)
		wx.EVT_BUTTON(self, ID_BUTTONPAGOCLIENTESFUNC1CANCELAR, self.OnClose)
		wx.EVT_CLOSE(self, self.OnClose)
		self.ObtenerFechaDelDia()
		self.ObtenerEmpresas()
		if True:
			self.GetControl(ID_CHOICEPAGOCLIENTESFUNC1EMPRESA).SetSelection(3)
			event = wx.CommandEvent( wx.wxEVT_COMMAND_CHOICE_SELECTED , ID_CHOICEPAGOCLIENTESFUNC1EMPRESA)
			self.GetEventHandler().ProcessEvent( event )
			self.GetControl(ID_CHOICEPAGOCLIENTESFUNC1DESARROLLO).SetSelection(self.last_desarrollo)
			event = wx.CommandEvent( wx.wxEVT_COMMAND_CHOICE_SELECTED , ID_CHOICEPAGOCLIENTESFUNC1DESARROLLO)
			self.GetEventHandler().ProcessEvent( event )
			self.GetControl(ID_CHOICEPAGOCLIENTESFUNC1ETAPA).SetSelection(0)
			event = wx.CommandEvent( wx.wxEVT_COMMAND_CHOICE_SELECTED , ID_CHOICEPAGOCLIENTESFUNC1ETAPA)
			self.GetEventHandler().ProcessEvent( event )
			
			event = wx.CommandEvent( wx.wxEVT_COMMAND_BUTTON_CLICKED , ID_BITMAPBUTTONPAGOCLIENTESFUNC1ELEGIRCLIENTE)
			self.GetEventHandler().ProcessEvent( event )
		
	def OnClose(self, evt):
		self.Destroy()
		
	
	def clipboard(self,value):
		if value:
			txt = wx.TextDataObject( value )
			if wx.TheClipboard.Open():
				wx.TheClipboard.SetData( txt )
				wx.TheClipboard.Close()
	
	def rap_clipboard(self,event):
		try:
			assert self.referencia_rap <> ""
			self.clipboard( self.referencia_rap)
		except:
			pass
		return
	
	def OnContextoDocumento( self, evt ):
		cu = r_cn.cursor()
		try:
			self.docconsaldo
			sql = "select fk_tipo, saldo, cargo, abono, codigo, fk_cuenta  from documento where codigo = %s" % ( self.docconsaldo, )
			cu.execute(str(sql))
			row = fetchone(cu)
			cuentabase = int(row[5])
			self.saldopagare = 0
			self.saldopagare = float( row[1])
			tipodocto = int( row[0])
			assert tipodocto >0
			#assert tipodocto == 17
			assert float(row[1]) > 0.0
			
			sql = "select referencia from referencias_rap where cuenta = %s" % ( cuentabase, )
			cu.execute(sql)
			row = fetchone(cu)
			rap = ""
			if row:
				rap = row[0]
				self.referencia_rap = rap
				
			
			#sql = "select count(*) from cuenta_pagare where fk_documento = %s" % ( self.docconsaldo , )
			sql = "select count(*) from cuenta_pagare where fk_documento in ( select distinct codigo from documento where fk_cuenta = %s )" % ( cuentabase, )
			cu.execute(str(sql))
			row = fetchone(cu)
			en_cuenta_pagare = int(row[0])
			
			
			
			menu = wx.Menu()
			if rap:
				self.Bind( wx.EVT_MENU, self.rap_clipboard, menu.Append(-1, u"->pp RAP %s" % (rap,)))				
			if en_cuenta_pagare == 0:
				if tipodocto == 17:
					self.Bind( wx.EVT_MENU, self.ModificarDocumento17, menu.Append(-1, u"Modificar cantidad documento tipo 17"))
				self.Bind( wx.EVT_MENU, self.GenerarCuentaPagare, menu.Append(-1, u"Generar cuenta especial con documentos para pagar�"))
			else:
				if tipodocto == 17:
					self.Bind( wx.EVT_MENU, self.RestructurarCuentaPagare, menu.Append(-1, u"Restructurar pagar�s"))

			
			sql = "select count(*) from documento where fk_cuenta = %s and fk_tipo = 17" % ( cuentabase, )
			cu.execute(sql)
			row = fetchone(cu)
			cuantosdoctos17 = int(row[0])
			
			sql = """
			select isnull(t.montocredito,0), isnull(t.montosubsidio,0), isnull(c.saldo,0) from tramites_ventas_movimientos t 
			join inmueble i on t.fk_inmueble = i.codigo  
			join cuenta c on i.codigo = c.fk_inmueble
			join documento d on c.codigo = d.fk_cuenta 
			where d.codigo = %s and t.fk_tramite = 102 """ % ( self.docconsaldo , )
			
			sql = self.PreparaQuery( sql )
			cu.execute(sql)
			row = fetchone(cu)
			if row:
				
				self.montocredito = float(row[0])
				self.montosubsidio = float(row[1])
				self.saldo_de_la_cuenta = float(row[2])
				if cuantosdoctos17 == 0:
					self.Bind( wx.EVT_MENU, self.GenerarDocPagare, menu.Append(-1, u"Generar Documento especial"))
				
			if tipodocto == 17:
				self.Bind(wx.EVT_MENU, self.EligePagare, menu.Append(-1, u"Elegir documento pagar� Iclar"))
			cu.close()
			self.PopupMenu( menu )
		except:
			cu.close()
			return
		
		cu.close()
		return
	
	def EligePagare(self,evt):

		dlg = GixPagaresIclar(self, funcion = self.PagareIclarElegido, documentoelegido = self.docconsaldo )
		
		#dlg = GixPagaresIclar(self, funcion = self.PagareIclarElegido, documentoelegido = 79465) # puesto a huevo para probar que jala

		dlg.CenterOnParent()
		dlg.Show(True)
		
		

	def ModificarDocumento17( self, evt):
		
		sql = "select fk_cuenta, saldo, fk_tipo from documento where codigo = %s" % ( self.docconsaldo, )
		cu = r_cn.cursor()
		cu.execute( sql )
		row = fetchone(cu)
		if row:
			cuenta = int(row[0])
			documento17 = self.docconsaldo
			saldo17 = float(row[1])
			tipo17 = int(row[2])
			try:
				assert tipo17 == 17
			except:
				Mensajes().Info(self, u"Escogi� el documento equivocado para esta operaci�n", u"Atenci�n")
				cu.close()
				return
			
			sql = "select codigo, cantidad, cargoabono from movimiento where fk_documento = %s" % ( documento17, )
			cu.execute( sql )
			row = fetchone( cu )
			if row:
				movimiento17 = int(row[0])
				movimiento17cantidad = float(row[1])
				try:
					assert movimiento17cantidad == saldo17
					assert str(row[2]) == "C"
				except:
					Mensajes().Info(self, "Error raro", u"Atenci�n")
					cu.close()
					return
			sql = "select codigo from documento where fk_tipo = 2 and fk_cuenta = %s " % ( cuenta, )
			cu.execute(sql)
			row = fetchone( cu )
			if row:
				documento2 = row[0]
				sql = "select codigo, numrecibo from movimiento where cargoabono = 'A' and fk_documento = %s and cantidad = %s" % ( documento2, movimiento17cantidad)
				cu.execute( sql )
				row = fetchone(cu)
				if row:
					movimiento2 = int(row[0])
					recibo2 = int(row[1])
					sql = "select codigo from recibo where codigo = %s and abonocapital = %s" % ( recibo2, movimiento17cantidad)
					cu.execute( sql )
					row = fetchone(cu)
					if row:
						if Mensajes().YesNo( self, u"La cantidad del documento 17\n y el abono al documento 2 es\n %s\n. Procedo a cambiar la cantidad?" % movimiento17cantidad, u"Atenci�n"):
							monto = wx.GetTextFromUser("Nuevo importe", u"Atenci�n", default_value = str(movimiento17cantidad))
							try:
								assert float(monto)
							except:
								Mensajes().Info(self, u"Importe mal", u"Atenci�n")
								cu.close()
								return
							if Mensajes().YesNo( self, u"No se crear�n nuevos datos\n solo se sustituir� la cantidad\n donde sea necesario.\nProcedo ?", u"Atenci�n"):
								cu.close()
								if self.GrabaCambioCantidadDocumento17( cuenta, documento17, documento2, movimiento17, movimiento2, recibo2, movimiento17cantidad, float(monto)):
									self.HabilitaDeshabilita(True)
									self.FillDocumentosAPagar()
								else:
									Mensajes().Info( self, u"No se pudo efectuar la grabaci�n", u"Atenci�n")
						
					cu.close()
					return
						
						
	def GrabaCambioCantidadDocumento17(self, cuenta, documento17, documento2, movimiento17, movimiento2, recibo2, importe_actual, importe_nuevo):			
		cu = r_cn.cursor()
		sql = "select saldo + %s - %s from documento where codigo = %s " % ( importe_actual, importe_nuevo, documento2 )
		cu.execute(sql)
		row = fetchone(cu)
		if row:
			if float(row[0]) < 0:
				cu.close()
				Mensajes().Info( self, u"La nueva cantidad haria\n que el saldo del documento\n tipo 2 fuera inferior a 0", u"Atenci�n")
				return False
		else:
			cu.close()
			return False
		cu.close()
		
		try:
			#primero documento para la tipo2
			# al campo saldo sumale la cantidad actual y restale la nueva
			# al campo abono sumale la cantidad actual y restale la nueva
			
			cu = r_cn.cursor()
			
			sql = "update documento set saldo = saldo + %s - %s, abono = abono + %s - %s where codigo = %s" % ( importe_actual, importe_nuevo, importe_actual, importe_nuevo, documento2 )
			cu.execute(sql)
			
			#actualiza movimiento en tipo 2
			
			sql = "update movimiento set cantidad = %s where codigo = %s" % ( importe_nuevo, movimiento2)
			cu.execute(sql)
		
			#actualiza el recibo
			
			sql = "update recibo set abonocapital = %s, totalrecibo = %s where codigo = %s" % ( importe_nuevo, importe_nuevo, recibo2)
			cu.execute( sql )
			
			#actualiza movimiento 17
			sql = "update movimiento set cantidad = %s where codigo = %s" % ( importe_nuevo, movimiento17)
			
			#actualiza documento 17
			sql = "update documento set saldo = %s, cargo = %s where codigo = %s" % ( importe_nuevo, importe_nuevo, documento17 )
			cu.execute( sql )
			
			cu.close()
			r_cn.commit()
			return True
		except:
			r_cn.rollback()
			Mensajes().Info( self, u"Hubo un problema de\n transacci�n hacia la base de datos", u"Atenci�n")
			return False
		
	
	def GenerarDocPagare(self, evt):
		"""
		  Aqui se genera el documento tipo 17 a la cuenta normal del cliente
		"""
		acwc = amount_and_cents_with_commas
		def rjam( amount, longitud = 18 ):
			famount = acwc( amount)
			if len(famount) > longitud:
				return "***"
			cuantos = longitud - len(famount)
			return "                                           "[:cuantos] + famount
		
		 
		monto_sugerido = self.saldo_de_la_cuenta - self.montosubsidio - self.montocredito
		Mensajes().Info(self , u"Saldo cuenta:\t %s\nMonto Cr�dito: \t%s\nMonto Subsidio:\t %s\n\nMonto Sugerido\t : %s" % ( rjam(self.saldo_de_la_cuenta), rjam(self.montocredito), rjam(self.montosubsidio), rjam(monto_sugerido)), u"Atenci�n")
		if Mensajes().YesNo(self, "Procedo?", u"Aviso"):
			monto = wx.GetTextFromUser("Monto a considerar", u"Atenci�n", default_value = str(monto_sugerido))
			m_error = u"Monto equivocado. Abandono opci�n"
			try:
				f_monto = float( monto )
				d_monto = Decimal(monto)
				try:
					assert self.saldo_de_la_cuenta >= f_monto
				except AssertionError, error:
					m_error = u"La cantidad es superior al saldo\n de la cuenta"
					
				sql = "select fk_cuenta, saldo, fk_tipo from documento where codigo = %s" % self.docconsaldo
				cu = r_cn.cursor()
				cu.execute(sql)
				row = fetchone(cu)
				try:
					cuenta = int(row[0])
				except:
					m_error = "Cuenta inexistente"
					raise
				try:
					assert float(row[1]) >= f_monto
				except:
					m_error = "El monto digitado es superior al saldo del documento tipo 2 "
					raise
				try:
					assert int(row[2]) == 2
				except:
					m_error = "Esta operacion solo es posible con click derecho desde el documento tipo 2"
					raise
				
				sql = "select convert(varchar(10), getdate(), 111)"
				cu.execute(sql)
				row = fetchone(cu)
				fechahoy = str(row[0])
				fechahoy = fechahoy.replace("/","")
				cu.close()
				if True: # poner en True cuando se quiera realmente afectar...
					try:
						cu = r_cn.cursor()
						sql = "exec CrearDocumentoSP2 0, '%s', '%s', %s, '1/1',17,%s,''" % ( fechahoy, '21001231', f_monto, cuenta )
						cu.execute( sql )
						#aqui va lo de abonar al documento tipo 2 la cantidad del docto 17
						if True:
							sql = """
							insert into gixreservacionrecibo (codigorecibo, fk_desarrollo, consdesarrollo, usuario)
							select max(codigorecibo) + 1, %s,
							(select isnull(max(consdesarrollo),0) + 1 from gixreservacionrecibo where fk_desarrollo = %s), '%s'
							from gixreservacionrecibo
							""" % (int(self.desarrollo), int(self.desarrollo), self.usuario)
							sql = (sql.replace('\n', ' ')).replace('\t', ' ')
							cu.execute(str(sql))
							cu.execute('select scope_identity()')
							pkreservacionrecibo = int(fetchone(cu)[0])
							sql = """
							select codigorecibo, consdesarrollo from gixreservacionrecibo where pkreservacionrecibo = %s
							""" % pkreservacionrecibo
							sql = (sql.replace('\n', ' ')).replace('\t', ' ')
							cu.execute(str(sql))
							row = fetchone(cu)
							codigorecibo = int(row[0]); consdesarrollo = int(row[1])
							
							sql = """
							insert into MOVIMIENTO
							(codigo, cantidad, fecha, relaciondepago, cargoabono, numrecibo,
							fechavencimientodoc, fk_documento, fk_tipo)
							select max(codigo) + 1, %s, convert(varchar(10), getdate(), 101),
							'%s', 'A', %s, convert(varchar(10), getdate(), 101), %s, 4 from MOVIMIENTO
							""" % (f_monto, 'Por gix', int(codigorecibo), self.docconsaldo)
							sql = ((sql.replace('\n', ' ')).replace('\t', ' ')).encode("iso8859-1")
							cu.execute(sql)
							
							sql = """
							update DOCUMENTO set saldo = saldo - %s, abono = abono + %s 
							 where codigo = %s
							""" % (f_monto, f_monto , self.docconsaldo)
							sql = (sql.replace('\n', ' ')).replace('\t', ' ')
							cu.execute(str(sql))
							sql = "update CUENTA set saldo = saldo - %s where codigo = %s" % (f_monto, cuenta)
							cu.execute(str(sql))
							
							sql = """
							insert into RECIBO
							(codigo, fechaemision, abonocapital, interesmoratorio, totalrecibo, referencia,
							status, fk_desarrollo, consdesarrollo)
							values (%s, convert(varchar(10),getdate(),101), %s, %s, %s, '%s', 'A', %s, %s)
							""" % (codigorecibo, f_monto, 0, f_monto,
							       '', self.desarrollo, consdesarrollo)
							sql = ((sql.replace('\n', ' ')).replace('\t', ' ')).encode("iso8859-1")
							cu.execute(str(sql))
						
						#fin de abono a documento tipo 2
						cu.close()
						r_cn.commit()
					except:
						r_cn.rollback()
						m_error = "Error al generarse documento especial ( tipo 17 ). Avise a sistemas"
						raise
				
				
			except:
				Mensajes().Info(self, m_error, u"Atenci�n")
			
			#event = wx.CommandEvent( wx.wxEVT_COMMAND_BUTTON_CLICKED , ID_BITMAPBUTTONPAGOCLIENTESFUNC1ELEGIRCLIENTE)
			#self.GetEventHandler().ProcessEvent( event )
			#event = wx.CommandEvent( wx.wxEVT_COMMAND_BUTTON_CLICKED , ID_BUTTONPAGOCLIENTESFUNC2ELEGIR)
			#self.GetEventHandler().ProcessEvent( event )
			self.HabilitaDeshabilita(True)
			self.FillDocumentosAPagar()
			return
	
	def RestructurarCuentaPagare( self, evt):
		cuantos_pagos = wx.GetNumberFromUser(message = u"Digite n�mero de pagos", prompt = u"Restructura", caption = "" , value = 1, min = 1, max = 100)
		try:
			assert cuantos_pagos > 0
		except:
			Mensajes().Info( self, u"Cantidad de pagos inadecuada, abandono opci�n", u"Atenci�n")
			return
		cu = r_cn.cursor()
		sql = "select codigo from cuenta_pagare where fk_documento = %s" % ( self.docconsaldo, )
		cu.execute( sql )
		codigo_cuenta_pagare = fetchone(cu)[0]
		cu.execute( "select getdate()" )
		hoy = fetchone(cu)[0]
		hoy = "%04d%02d%02d" % ( hoy.year, hoy.month, hoy.day )
		
		fecha_vencimiento = wx.GetTextFromUser(u"Fecha del primer vencimiento AAAAMMDD", u"Digite la fecha" , default_value = hoy)
		fecha = None
		try:
			fecha = datetime( int(fecha_vencimiento[:4]), int(fecha_vencimiento[4:6]), int(fecha_vencimiento[6:]))
			assert fecha.day < 29
		except:
			Mensajes().Info( self, u"Fecha inapropiada abandono opci�n", u"Atenci�n")
			return
		
		sql = "select sum(saldo) from documento_pagare where fk_cuenta = %s" % ( codigo_cuenta_pagare, )
		cu.execute( sql )
		saldo  = float(fetchone(cu)[0])
		
		sql = "select saldo from cuenta_pagare where codigo = %s" % ( codigo_cuenta_pagare,)
		cu.execute( sql )
		saldocuenta  = float(fetchone(cu)[0])
		cu.close()
		try:
			assert abs(saldocuenta - saldo) < .5
		except:
			Mensajes().Info( self, u"No se puede efectuar la restructura \nporque difieren los saldos de\n la cuenta_pagare y documento_pagare", u"Atenci�n")
			return
		try:
			assert abs(saldocuenta - self.saldopagare ) < .5
		except:
			Mensajes().Info( self, u"No se puede efectuar la restructura \nporque difieren los saldos de\n documento 17 y cuenta_pagare", u"Atenci�n")
			return
			
		
		importe = saldo / cuantos_pagos * 1.0
		
		if Mensajes().YesNo(self, u"Se va a efectuar reestructura \neliminando los documentos sin abono\n y creando %s documentos de %s cada uno.\n Procedo ?" % (cuantos_pagos, importe), u"Atenci�n"):
			if self.GeneracionDocumentosPagare( self.docconsaldo, importe, cuantos_pagos , fecha, True):
				Mensajes().Info( self, u"Restructura efectuada"  , "Aviso")
			else:
				Mensajes().Info( self, u"No se pudo efectuar la restructura"  , "Aviso")
				
		return
	
	def GenerarCuentaPagare(self, evt):
		
		cuantos_pagos = 0
		cuantos_pagos = wx.GetNumberFromUser(message = u"Digite n�mero de pagos", prompt = u"Pagos", caption = "" , value = 1, min = 1, max = 100)
		try:
			assert cuantos_pagos > 0
		except:
			Mensajes().Info( self, u"Cantidad de pagos inadecuada, abandono opci�n", u"Atenci�n")
			return
		cu = r_cn.cursor()
		cu.execute( "select getdate()" )
		hoy = fetchone(cu)[0]
		cu.close()
		hoy = "%04d%02d%02d" % ( hoy.year, hoy.month, hoy.day )
		
		fecha_vencimiento = wx.GetTextFromUser(u"Fecha del primer vencimiento AAAAMMDD", u"Digite la fecha" , default_value = hoy)
		fecha = None
		try:
			fecha = datetime( int(fecha_vencimiento[:4]), int(fecha_vencimiento[4:6]), int(fecha_vencimiento[6:]))
			assert fecha.day < 29
		except:
			Mensajes().Info( self, u"Fecha inapropiada abandono opci�n", u"Atenci�n")
			return
		
		importe = self.saldopagare / cuantos_pagos * 1.0
		
		if Mensajes().YesNo(self, u"Se va a crear cuenta especial\n y %s documentos de %s cada uno.\n Procedo ?" % (cuantos_pagos, importe), u"Atenci�n"):
			if self.GeneracionDocumentosPagare( self.docconsaldo, importe, cuantos_pagos , fecha):
				Mensajes().Info( self, u"Cuenta especial y documentos generados"  , "Aviso")
			else:
				Mensajes().Info( self, u"No se pudo efectuar la creaci�n de cuenta especial y documentos"  , "Aviso")
				
		return
	
	def GeneracionDocumentosPagare( self, doc, importe, num_pagos, fecha, restructura = False ):
		
		try:
			
			cu = r_cn.cursor()
			sql = "select isnull( max( codigo ), 0 ) + 1 from documento_pagare"
			cu.execute(str(sql))
			row = fetchone(cu)
			documento = int( row[0] ) 
			sql = "select isnull( max( codigo ), 0 ) + 1 from movimiento_pagare"
			cu.execute(str(sql))
			row = fetchone(cu)
			movimiento = int( row[0] ) 
			sql = "select fk_cuenta, saldo from documento where codigo = %s" % ( doc, )
			cu.execute(str(sql))
			row = fetchone(cu)
			cuenta = int( row[0] )
			saldo = float( row[1] )
			if restructura:
				sql = "select codigo from cuenta_pagare where fk_documento = %s" %( doc, )
				cu.execute( str( sql ))
				row = fetchone(cu)
				cuenta_pagare = int( row[0] )
				
				# elimina primero de movimiento_pagare para los que son con saldo = cargo o sea documentos sin ningun abono
				sql = """delete movimiento_pagare where fk_documento in 
				( select distinct codigo from documento_pagare where fk_cuenta = %s
				and saldo = cargo)""" % ( cuenta_pagare, )
				sql = self.PreparaQuery( sql )
				cu.execute( sql )
				
				#complementando lo anterior para documento_pagare
				
				sql = """
				delete documento_pagare where fk_cuenta = %s and saldo = cargo
				""" % ( cuenta_pagare, )
				sql = self.PreparaQuery( sql )
				cu.execute( sql )
				
				# se obtienen las parcialmente pagadas y si hay van a un diccionario que luego se barre 
				# para actualizar
				
				sql = """
				select codigo, abono from documento_pagare where 
				fk_cuenta = %s and cargo > abono and abono > 0 and saldo > 0 """ % ( cuenta_pagare, )
				sql = self.PreparaQuery( sql )
				cu.execute( sql )
				dicVal = dict()
				
				for row in fetchall(cu):
					dicVal[int(row[0])] = float(row[1] )
					
				for key in dicVal:
					
					#actualiza documento_pagare para los pagados parcialmente igualando cargo a abono
					sql = """
					update documento_pagare set saldo = 0, cargo = abono where codigo = %s  
					""" % ( key , )
					sql = self.PreparaQuery( sql )
					cu.execute( sql )
				
					#actualiza movimiento_pagare para los pagados parcialmente igualando cargo a abono
					sql = """
					update movimiento_pagare set cantidad = %s 
					where cargoabono = 'C' and fk_documento = %s """ % ( dicVal[key] , key) 
					sql = self.PreparaQuery( sql )
					cu.execute( sql )
				
			else:
				sql = "insert into cuenta_pagare( fecha, fk_documento, fk_cuenta, saldo ) values ( convert( varchar(10), getdate(), 110), %s, %s, %s ) " % ( doc, cuenta, saldo )
				cu.execute( str(sql))
				sql = "select isnull(max(codigo),0) from cuenta_pagare"
				cu.execute(str(sql))
				row = fetchone(cu)
				cuenta_pagare = int( row[0] )
			anio, mes, dia = fecha.year, fecha.month, fecha.day
			
			for x in range(num_pagos):
				sig_docto = documento + x
				sig_movto = movimiento + x
				f_ven = "%04d%02d%02d" % ( anio, mes, dia)
				sql = """
				insert into documento_pagare(codigo, fechadeelaboracion, fechadevencimiento,
				fechadevencimientovar, saldo, cargo, abono, fk_cuenta, fk_tipo)
				values( %s, convert( varchar(10), getdate(), 110 ), '%s', '%s', %s, %s,0,%s,17)
				""" % ( sig_docto, f_ven, f_ven, importe, importe, cuenta_pagare)
			
				sql = self.PreparaQuery( sql )
				cu.execute( sql )
			
				sql = """
				insert into movimiento_pagare(codigo,cantidad, fecha, relaciondepago, cargoabono,
				numrecibo,fechavencimientodoc, fk_documento, fk_tipo) 
				values( %s, %s, convert( varchar(10), getdate(),110), '%s/%s', 'C', NULL, '%s',%s,17)
				""" % ( sig_movto, importe, x+1, num_pagos, f_ven, sig_docto )
			
				sql = self.PreparaQuery( sql )
				
				cu.execute( sql )
			
				mes += 1
				if mes > 12:
					mes = 1
					anio += 1
			cu.close()
			r_cn.commit()
			return True
		except:
			r_cn.rollback()
			return False
	
	
	def ObtenerFechaDelDia(self):
		sql = "select convert(varchar(10), getdate(), 103)"
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1FECHAPAGO).SetValue("%s" % str(row[0]))

	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
		return dato.strip()

	def PreparaQuery(self, sql):
		sqlx = sql.replace('\t', ' '); sql = sqlx.replace('\n', ' ')
		return sql

	def ObtenerEmpresas(self):
		self.empresa, self.desarrollo, self.etapa = 0, 0, 0
		control = self.GetControl(ID_CHOICEPAGOCLIENTESFUNC1EMPRESA)
		control.Enable(False)
		control.Show(False)
		control.Clear()
		sql = """
		select EmpresaID, RazonSocial from cont_Empresas where activarecfin = 'S' order by RazonSocial
		"""
		sql = self.PreparaQuery(sql)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(self.GetString(row[1]), int(row[0]))
		control.Show(True)
		control.Enable(True)
		
	def OnChoiceCtrlEmpresa(self, evt):
		choiceinxempresa = self.GetControl(ID_CHOICEPAGOCLIENTESFUNC1EMPRESA).GetSelection()
		self.empresa = self.GetControl(ID_CHOICEPAGOCLIENTESFUNC1EMPRESA).GetClientData(choiceinxempresa)
		self.GetControl(ID_TEXTPAGOCLIENTESFUNC1DESARROLLO).Enable(True)
		self.GetControl(ID_CHOICEPAGOCLIENTESFUNC1DESARROLLO).Enable(True)
		self.ObtenerDesarrollos()
		self.GetControl(ID_CHOICEPAGOCLIENTESFUNC1ETAPA).Clear()
		self.GetControl(ID_CHOICEPAGOCLIENTESFUNC1ETAPA).Enable(False)
		self.GetControl(ID_TEXTPAGOCLIENTESFUNC1ETAPA).Enable(False)
		self.HabilitaDeshabilita(False)
		
	def ObtenerDesarrollos(self):
		self.desarrollo, self.etapa = 0, 0
		control = self.GetControl(ID_CHOICEPAGOCLIENTESFUNC1DESARROLLO)
		control.Enable(False)
		control.Show(False)
		control.Clear()
		sql = """
		select codigo, descripcion from DESARROLLO where fk_empresa = %s order by descripcion
		""" % self.empresa
		sql = self.PreparaQuery(sql)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for x,row in enumerate(rows):
				control.Append(self.GetString(row[1]), int(row[0]))
		control.Show(True)
		control.Enable(True)
		self.last_desarrollo = x # basado en cero esta bien pues sirve para el choice
		
	def OnChoiceCtrlDesarrollo(self, evt):
		choiceinxdesarrollo = self.GetControl(ID_CHOICEPAGOCLIENTESFUNC1DESARROLLO).GetSelection()
		self.desarrollo = self.GetControl(ID_CHOICEPAGOCLIENTESFUNC1DESARROLLO).GetClientData(choiceinxdesarrollo)
		self.GetControl(ID_TEXTPAGOCLIENTESFUNC1ETAPA).Enable(True)
		self.GetControl(ID_CHOICEPAGOCLIENTESFUNC1ETAPA).Enable(True)
		self.ObtenerEtapas()
		self.HabilitaDeshabilita(False)
		
	def ObtenerEtapas(self):
		self.etapa = 0
		control = self.GetControl(ID_CHOICEPAGOCLIENTESFUNC1ETAPA)
		control.Enable(False)
		control.Show(False)
		control.Clear()
		sql = """
		select codigo, descripcion from ETAPA where fk_desarrollo = %s order by descripcion
		""" % self.desarrollo
		sql = self.PreparaQuery(sql)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(self.GetString(row[1]), int(row[0]))
		control.Show(True)
		control.Enable(True)
		
	def OnChoiceCtrlEtapa(self, evt):
		choiceinxetapa = self.GetControl(ID_CHOICEPAGOCLIENTESFUNC1ETAPA).GetSelection()
		self.etapa = self.GetControl(ID_CHOICEPAGOCLIENTESFUNC1ETAPA).GetClientData(choiceinxetapa)
		self.HabilitaDeshabilita(True)
		
	def HabilitaDeshabilita(self, sw):
		self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1NUMERORECIBO).SetValue("")
		self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1CODIGORECIBO).SetValue("")
		self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1NUMEROCUENTA).SetValue("")
		self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1NUMEROCLIENTE).SetValue("")
		self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1SALDOACTUAL).SetValue("")
		self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1SALDOPOSTERIOR).SetValue("")
		self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1TIPOINMUEBLE).SetValue("")
		self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1IDINMUEBLE).SetValue("")
		self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1PRERECIBO).SetValue("")
		self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1MONTOPRERECIBO).SetValue("")
		self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1NUMEROINMUEBLE).SetValue("")
		self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1NOMBRECLIENTE).SetValue("")
		self.GetControl(ID_BITMAPBUTTONPAGOCLIENTESFUNC1ELEGIRFECHAPAGO).Enable(sw)
		self.GetControl(ID_BITMAPBUTTONPAGOCLIENTESFUNC1ELEGIRINMUEBLE).Enable(sw)
		self.GetControl(ID_BITMAPBUTTONPAGOCLIENTESFUNC1ELEGIRCLIENTE).Enable(sw)
		self.GetControl(ID_BITMAPBUTTONPAGOCLIENTESFUNC1ELEGIRPRERECIBO).Enable(sw)
		lctrl = self.GetControl(ID_LISTCTRLPAGOCLIENTESFUNC1DOCUMENTOSCONSALDO)
		lctrl.ClearAll(); lctrl.InsertColumn(0, "", wx.LIST_FORMAT_CENTER); lctrl.SetColumnWidth(0, 0)
		self.GetControl(ID_BUTTONPAGOCLIENTESFUNC1PASARAPAGAR).Enable(False)
		lctrl = self.GetControl(ID_LISTCTRLPAGOCLIENTESFUNC1DOCUMENTOSAPAGAR)
		lctrl.ClearAll(); lctrl.InsertColumn(0, "", wx.LIST_FORMAT_CENTER); lctrl.SetColumnWidth(0, 0)
		self.GetControl(ID_BUTTONPAGOCLIENTESFUNC1QUITARDOCUMENTO).Enable(False)
		self.GetControl(ID_BUTTONPAGOCLIENTESFUNC1MODIFICAABONO).Enable(False)
		self.GetControl(ID_BITMAPBUTTONPAGOCLIENTESFUNC1PASARAABONAR).Enable(False)
		self.docconsaldo, self.lstdocapagar, self.dicabonar, self.dicinteres = 0, [], {}, {}
		self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1PAGOCAPITAL).SetValue("")
		self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1INTERESMORATORIO).SetValue("")
		self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1TOTALPAGAR).SetValue("")
		
	def FillDocumentosConSaldo(self, cuenta):
		wx.BeginBusyCursor()
		self.docconsaldo = 0
		lctrl = self.GetControl(ID_LISTCTRLPAGOCLIENTESFUNC1DOCUMENTOSAPAGAR)
		lctrl.ClearAll(); lctrl.InsertColumn(0, "", wx.LIST_FORMAT_CENTER); lctrl.SetColumnWidth(0, 0)
		lctrl = self.GetControl(ID_LISTCTRLPAGOCLIENTESFUNC1DOCUMENTOSCONSALDO)
		lctrl.ClearAll(); lctrl.InsertColumn(0, "", wx.LIST_FORMAT_CENTER); lctrl.SetColumnWidth(0, 0)
		cu = r_cn.cursor()
		cu.execute(str("select top 1 porcentaje from CPP order by fecha desc"))
		row = fetchone(cu)
		cu.close()
		cpp = float(row[0])
		lctrl.Enable(False)
		lctrl.Show(False)
		docapagarfiltro = ""
		if len(self.lstdocapagar) > 0:
			if len(self.lstdocapagar) == 1:
				docapagarfiltro = "and d.codigo <> %s" % self.lstdocapagar[0]
			else:
				docapagarfiltro = "and d.codigo not in %s" % str(tuple(map(int, self.lstdocapagar)))
		sql = """
		select d.codigo, convert(varchar(10), d.fechadevencimiento, 103), d.saldo, d.cargo, d.abono,
		d.fk_tipo, datediff(day, d.fechadevencimiento, getdate())
		from DOCUMENTO d
		join TIPO t on t.codigo = d.fk_tipo
		where d.fk_cuenta = %s and d.saldo > 0 and t.descripcion2 = 'C' %s order by d.codigo
		""" % (cuenta, docapagarfiltro)
		sql = self.PreparaQuery(sql)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			lctrl.InsertColumn(0, u"C�digo", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(1, u"Fecha Venc.", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(2, u"Saldo", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(3, u"Cargo", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(4, u"Abono", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(5, u"Moratorios", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(6, u"Tipo", wx.LIST_FORMAT_CENTER)
			for fila, row in enumerate(rows):
				if fila %2 != 0: bgcolor = [204,204,255]
				else:            bgcolor = [230,230,255]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				moratorios = (((((cpp / 100) * 2) / 360) * int(row[6])) * float(row[2]))
				if moratorios < 0:
					moratorios = 0
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, str(row[1]))
				lctrl.SetStringItem(index, 2, str(amount_and_cents_with_commas(float(row[2]))))
				lctrl.SetStringItem(index, 3, str(amount_and_cents_with_commas(float(row[3]))))
				lctrl.SetStringItem(index, 4, str(amount_and_cents_with_commas(float(row[4]))))
				lctrl.SetStringItem(index, 5, str(amount_and_cents_with_commas(float(moratorios))))
				lctrl.SetStringItem(index, 6, str(row[5]))
				lctrl.SetItemData(index, row[0])
			lctrl.SetColumnWidth(0, 70)
			lctrl.SetColumnWidth(1, 100)
			lctrl.SetColumnWidth(2, 100)
			lctrl.SetColumnWidth(3, 100)
			lctrl.SetColumnWidth(4, 100)
			lctrl.SetColumnWidth(5, 100)
			lctrl.SetColumnWidth(6, 50)
			lctrl.SetItemState(0, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
			lctrl.EnsureVisible(0)
			self.GetControl(ID_BUTTONPAGOCLIENTESFUNC1PASARAPAGAR).Enable(True)
			lctrl.Enable(True)
			lctrl.Show(True)
			lctrl.SetFocus()
		else:
			lctrl.InsertColumn(0, "   No se Encontraron Documentos con Saldo", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 250)
			self.GetControl(ID_BUTTONPAGOCLIENTESFUNC1PASARAPAGAR).Enable(False)
			lctrl.Enable(True)
			lctrl.Show(True)
		wx.EndBusyCursor()
		
	def OnElegirInmueble(self, evt):
		sql = """
		select i.codigo, i.inmueble, i.iden1, i.iden2, i.condominio, i.esquina from INMUEBLE i
		join CUENTA c on c.fk_inmueble = i.codigo
		where i.fk_etapa = %s and i.precio is not null
		order by i.inmueble, i.iden2, i.iden1
		""" % self.etapa
		sql = self.PreparaQuery(sql)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			dlg = GixPagosDeClientesFunc2(self, inmuebleelegido = self.InmuebleElegido, etapa = self.etapa)
			dlg.CenterOnParent()
			dlg.Show(True)
		else:
			Mensajes().Info(self, u"� No se encontraron inmuebles !", u"Atenci�n")
	
	def InmuebleElegido(self, codigoinmueble):
		sql = """
		select i.inmueble, i.iden1 + ' - ' + i.iden2, c.codigo, e.codigo, e.nombre, c.saldo
		from INMUEBLE i
		join CUENTA c on c.fk_inmueble = i.codigo
		join CLIENTE e on e.codigo = c.fk_cliente
		where i.codigo = %s
		""" % codigoinmueble
		sql = self.PreparaQuery(sql)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row is not None:
			self.HabilitaDeshabilita(True)
			self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1NUMEROCUENTA).SetValue(str(row[2]))
			self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1NUMEROCLIENTE).SetValue(str(row[3]))
			self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1NUMEROINMUEBLE).SetValue(str(codigoinmueble))
			self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1IDINMUEBLE).SetValue(self.GetString(row[1]))
			self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1TIPOINMUEBLE).SetValue(str(row[0]))
			self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1NOMBRECLIENTE).SetValue(self.GetString(row[4]))
			self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1SALDOACTUAL).SetValue(str(amount_and_cents_with_commas(float(row[5]))))
			self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1SALDOPOSTERIOR).SetValue(str(amount_and_cents_with_commas(float(row[5]))))
			self.FillDocumentosConSaldo(int(row[2]))
			self.lstdocapagar, self.dicabonar, self.dicinteres = [], {}, {}
			return True
		else:
			Mensajes().Info(self, u"El inmueble elegido no tiene cuenta relacionada", u"Aviso")
			return False
		
	def OnElegirCliente(self, evt):
		nombre = self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1NOMBRECLIENTE).GetValue()
		nombrefiltro = ""
		if nombre:
			nombrefiltro = "and e.nombre like '%s%s%s'" % ("%%", nombre.encode("iso8859-1"), "%%")
		sql = """
		select e.codigo, e.nombre, e.rfc from CLIENTE e
		join CUENTA c on c.fk_cliente = e.codigo
		where c.fk_etapa = %s %s
		group by e.codigo, e.nombre, e.rfc order by e.nombre
		""" % (self.etapa, nombrefiltro)
		sql = self.PreparaQuery(sql)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			dlg = GixPagosDeClientesFunc3(self, clienteelegido = self.ClienteElegido,
			                              etapa = self.etapa, nombrefiltro = nombrefiltro)
			dlg.CenterOnParent()
			dlg.Show(True)
		else:
			Mensajes().Info(self, u"� No se encontraron clientes !", u"Atenci�n")
	
	def PagareIclarElegido( self, codigopagare, importepagareiclar, fechavencimientopagareiclar, dicGrupo ):
		if codigopagare == 0 and len(dicGrupo) == 0:
			return False
		self.dicGrupo = dicGrupo
		if len(self.dicGrupo) == 0:
			self.dicGrupo[codigopagare] = dict( importepagareiclar = importepagareiclar, fechavencimientopagareiclar = fechavencimientopagareiclar)
			
		for x in self.dicGrupo:
			fkcuentapagare, cuentabasepagare, interespagareiclar = self.ComplementoPagare( x )
			self.dicGrupo[x]["fkcuentapagare"] = fkcuentapagare
			self.dicGrupo[x]["cuentabasepagare"] = cuentabasepagare
			self.dicGrupo[x]["interespagareiclar"] = interespagareiclar
			
		event = wx.CommandEvent( wx.wxEVT_COMMAND_BUTTON_CLICKED , ID_BUTTONPAGOCLIENTESFUNC1PASARAPAGAR)
		self.GetEventHandler().ProcessEvent( event )
		
		return True
	
	def ComplementoPagare( self, codigopagare ):
		interespagareiclar = 0
		importepagareiclar = self.dicGrupo.get( codigopagare )["importepagareiclar"]
		cu = r_cn.cursor()
		sql = "select fk_cuenta from documento_pagare where codigo = %s" % ( codigopagare,)
		cu.execute(sql)
		row = fetchone(cu)
		if row:
			fkcuentapagare = int(row[0])
		cu.execute(str("select top 1 porcentaje from CPP order by fecha desc"))
		row = fetchone(cu)
		cpp = float(row[0])
		sql = "select datediff(day, d.fechadevencimiento, getdate()) from documento_pagare d where d.codigo = %s" % ( codigopagare, )
		cu.execute(sql)
		row = fetchone(cu)
		dias = int(row[0])
		sql = "select fk_cuenta from documento where codigo = %s" % ( self.docconsaldo , )
		cu.execute(sql)
		row = fetchone(cu)
		cuentabasepagare = int(row[0])  # la cuenta en documento 17
		
		cu.close()
		if dias > 0:
			pass
			moratorios = cpp / 100.0 * 2.0 / 360.0 * float(dias) * importepagareiclar
			if moratorios > 0:
				interespagareiclar = moratorios
				
		return ( fkcuentapagare, cuentabasepagare, interespagareiclar )
		
	def ClienteElegido(self, codigocliente):
		sql = """
		select count(*) from CUENTA c
		where c.fk_cliente = %s and c.saldo > 0
		""" % codigocliente
		sql = self.PreparaQuery(sql)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row[0]:
			if row[0] > 1:
				dlg = GixPagosDeClientesFunc4(self, cuentaelegida = self.CuentaElegida,
				                              etapa = self.etapa, codigocliente = codigocliente)
				dlg.CenterOnParent()
				dlg.Show(True)
				return True
			else:
				sql = """
				select isnull(i.inmueble, ''), isnull(i.iden1 + ' - ' + i.iden2, ''),
				c.codigo, isnull(i.codigo, ''), e.nombre, c.saldo
				from CLIENTE e
				join CUENTA c on c.fk_cliente = e.codigo
				left join INMUEBLE i on i.codigo = c.fk_inmueble
				where e.codigo = %s and c.saldo > 0
				""" % codigocliente
				sql = self.PreparaQuery(sql)
				cu = r_cn.cursor()
				cu.execute(str(sql))
				row = fetchone(cu)
				cu.close()
				if row is not None:
					self.HabilitaDeshabilita(True)
					self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1NUMEROCUENTA).SetValue(str(row[2]))
					self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1NUMEROCLIENTE).SetValue(str(codigocliente))
					self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1NUMEROINMUEBLE).SetValue(str(row[3]))
					self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1IDINMUEBLE).SetValue(self.GetString(row[1]))
					self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1TIPOINMUEBLE).SetValue(str(row[0]))
					self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1NOMBRECLIENTE).SetValue(self.GetString(row[4]))
					self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1SALDOACTUAL).SetValue(str(amount_and_cents_with_commas(float(row[5]))))
					self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1SALDOPOSTERIOR).SetValue(str(amount_and_cents_with_commas(float(row[5]))))
					self.FillDocumentosConSaldo(int(row[2]))
					self.lstdocapagar, self.dicabonar, self.dicinteres = [], {}, {}
					return True
		else:
			Mensajes().Info(self, u"El cliente elegido no tiene cuenta y/o documentos\n" \
			                u"o su saldo se encuentra en ceros.", u"Aviso")
			return False
		
	def CuentaElegida(self, codigocuenta):
		sql = """
		select isnull(i.inmueble, ''), isnull(i.iden1 + ' - ' + i.iden2, ''), e.codigo,
		isnull(i.codigo, ''), e.nombre, c.saldo
		from CUENTA c
		join CLIENTE e on e.codigo = c.fk_cliente
		left join INMUEBLE i on i.codigo = c.fk_inmueble
		where c.codigo = %s
		""" % codigocuenta
		sql = self.PreparaQuery(sql)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row is not None:
			self.HabilitaDeshabilita(True)
			self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1NUMEROCUENTA).SetValue(str(codigocuenta))
			self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1NUMEROCLIENTE).SetValue(str(row[2]))
			self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1NUMEROINMUEBLE).SetValue(str(row[3]))
			self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1IDINMUEBLE).SetValue(self.GetString(row[1]))
			self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1TIPOINMUEBLE).SetValue(str(row[0]))
			self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1NOMBRECLIENTE).SetValue(self.GetString(row[4]))
			self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1SALDOACTUAL).SetValue(str(amount_and_cents_with_commas(float(row[5]))))
			self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1SALDOPOSTERIOR).SetValue(str(amount_and_cents_with_commas(float(row[5]))))
			self.FillDocumentosConSaldo(int(codigocuenta))
			self.lstdocapagar, self.dicabonar, self.dicinteres = [], {}, {}
			return True

	def OnElegirPrerecibo(self, evt):
		sql = """
		select c.codigo, t.nombre, e.descripcion, p.codigo, p.cantidad, p.fecha, p.referencia
		from prerecibo p
		join CUENTA c on c.codigo = p.fk_cuenta
		join CLIENTE t on t.codigo = c.fk_cliente
		join ETAPA e on e.codigo = c.fk_etapa
		where c.fk_etapa = %s and fk_recibo is null
		""" % self.etapa
		sql = self.PreparaQuery(sql)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			dlg = GixPagosDeClientesFunc5(self, prereciboelegido = self.PrereciboElegido, etapa = self.etapa)
			dlg.CenterOnParent()
			dlg.Show(True)
		else:
			Mensajes().Info(self, u"� No se encontraron prerecibos !", u"Atenci�n")
	
	def PrereciboElegido(self, codigoprerecibo):
		sql = """
		select i.inmueble, i.iden1 + ' - ' + i.iden2, c.codigo, e.codigo, e.nombre, c.saldo, p.cantidad, i.codigo
		from prerecibo p
		join CUENTA c on c.codigo = p.fk_cuenta
		join INMUEBLE i on i.codigo = c.fk_inmueble
		join CLIENTE e on e.codigo = c.fk_cliente
		where p.codigo = %s
		""" % codigoprerecibo
		sql = self.PreparaQuery(sql)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row is not None:
			self.prerecibo = codigoprerecibo
			self.HabilitaDeshabilita(True)
			self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1NUMEROCUENTA).SetValue(str(row[2]))
			self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1NUMEROCLIENTE).SetValue(str(row[3]))
			self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1NUMEROINMUEBLE).SetValue(str(row[7]))
			self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1IDINMUEBLE).SetValue(self.GetString(row[1]))
			self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1TIPOINMUEBLE).SetValue(str(row[0]))
			self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1NOMBRECLIENTE).SetValue(self.GetString(row[4]))
			self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1SALDOACTUAL).SetValue(str(amount_and_cents_with_commas(float(row[5]))))
			self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1SALDOPOSTERIOR).SetValue(str(amount_and_cents_with_commas(float(row[5]))))
			self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1PRERECIBO).SetValue(str(codigoprerecibo))
			self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1MONTOPRERECIBO).SetValue(str(amount_and_cents_with_commas(float(row[6]))))
			self.FillDocumentosConSaldo(int(row[2]))
			self.lstdocapagar, self.dicabonar, self.dicinteres = [], {}, {}
			return True
		else:
			self.prerecibo = 0
			Mensajes().Info(self, u"El prerecibo elegido no tiene cuenta relacionada", u"Aviso")
			return False

	def FillDocumentosAPagar(self):
		wx.BeginBusyCursor()
		self.docapagar, self.docsaldo = 0, 0
		self.GetControl(ID_BUTTONPAGOCLIENTESFUNC1APLICAR).Enable(False)
		self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1PAGOCAPITAL).SetValue("0.00")
		self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1INTERESMORATORIO).SetValue("0.00")
		self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1TOTALPAGAR).SetValue("0.00")
		cu = r_cn.cursor()
		cu.execute(str("select top 1 porcentaje from CPP order by fecha desc"))
		row = fetchone(cu)
		cu.close()
		cpp = float(row[0])
		lctrl = self.GetControl(ID_LISTCTRLPAGOCLIENTESFUNC1DOCUMENTOSAPAGAR)
		lctrl.Enable(False)
		lctrl.Show(False)
		lctrl.ClearAll()
		docapagarfiltro = "= -1"
		if len(self.lstdocapagar) > 0:
			if len(self.lstdocapagar) == 1:
				docapagarfiltro = "= %s" % self.lstdocapagar[0]
			else:
				docapagarfiltro = "in %s" % str(tuple(map(int, self.lstdocapagar)))
		sql = """
		select d.codigo, convert(varchar(10), d.fechadevencimiento, 103), d.saldo, d.cargo,
		t.descripcion1, d.fk_tipo, datediff(day, d.fechadevencimiento, getdate()), d.fk_cuenta
		from DOCUMENTO d
		join TIPO t on t.codigo = d.fk_tipo
		where d.codigo %s order by d.codigo
		""" % docapagarfiltro
		sql = self.PreparaQuery(sql)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			pagocapital, interesmoratorio, totalpagar = 0, 0, 0
			lctrl.InsertColumn(0, u"C�digo", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(1, u"Fecha Venc.", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(2, u"Saldo", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(3, u"Cargo", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(4, u"A ABONAR", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(5, u"Moratorios", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(6, u"Desc. Tipo", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(7, u"Tipo", wx.LIST_FORMAT_CENTER)
			for fila, row in enumerate(rows):
				if fila %2 != 0: bgcolor = [204,204,255]
				else:            bgcolor = [230,230,255]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				if int(row[5]) == 2:
					cu = r_cn.cursor()
					sql = "select relaciondepago from MOVIMIENTO where fk_documento = %s" % int(row[0])
					cu.execute(str(sql))
					movto = fetchone(cu)
					cu.close()
					descripciontipo = self.GetString(movto[0])
				else:
					descripciontipo = self.GetString(row[4])
				if self.dicabonar.has_key(int(row[0])):
					aabonar = self.dicabonar[int(row[0])]
				else:
					aabonar = float(row[2])
					self.dicabonar[int(row[0])] = aabonar
				moratorios = (((((cpp / 100) * 2) / 360) * int(row[6])) * float(row[2]))
				if moratorios < 0:
					moratorios = 0
				if self.dicinteres.has_key(int(row[7])):
					interesmoratorio = self.dicinteres[int(row[7])]
				else:
					interesmoratorio += moratorios
				pagocapital += aabonar; totalpagar = pagocapital + interesmoratorio
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, str(row[1]))
				lctrl.SetStringItem(index, 2, str(amount_and_cents_with_commas(float(row[2]))))
				lctrl.SetStringItem(index, 3, str(amount_and_cents_with_commas(float(row[3]))))
				lctrl.SetStringItem(index, 4, str(amount_and_cents_with_commas(float(aabonar))))
				lctrl.SetStringItem(index, 5, str(amount_and_cents_with_commas(float(moratorios))))
				lctrl.SetStringItem(index, 6, self.GetString(descripciontipo))
				lctrl.SetStringItem(index, 7, str(row[5]))
				lctrl.SetItemData(index, row[0])
			lctrl.SetColumnWidth(0, 70)
			lctrl.SetColumnWidth(1, 100)
			lctrl.SetColumnWidth(2, 100)
			lctrl.SetColumnWidth(3, 100)
			lctrl.SetColumnWidth(4, 100)
			lctrl.SetColumnWidth(5, 100)
			lctrl.SetColumnWidth(6, 200)
			lctrl.SetColumnWidth(7, 50)
			self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1PAGOCAPITAL).SetValue(self.GetString(amount_and_cents_with_commas(float(pagocapital))).rjust(20))
			self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1INTERESMORATORIO).SetValue(self.GetString(amount_and_cents_with_commas(float(interesmoratorio))).rjust(20))
			self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1TOTALPAGAR).SetValue(self.GetString(amount_and_cents_with_commas(float(totalpagar))).rjust(20))
			saldoactual = self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1SALDOACTUAL).GetValue()
			saldoposterior = float(saldoactual.replace(',','')) - pagocapital
			self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1SALDOPOSTERIOR).SetValue(self.GetString(amount_and_cents_with_commas(float(saldoposterior))))
			if totalpagar > 0:
				self.GetControl(ID_BUTTONPAGOCLIENTESFUNC1APLICAR).Enable(True)
			lctrl.SetItemState(0, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
			lctrl.EnsureVisible(0)
			lctrl.Enable(True)
			lctrl.Show(True)
			lctrl.SetFocus()
		else:
			lctrl.InsertColumn(0, "   No se Encontraron Documentos a Pagar", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 250)
			self.GetControl(ID_BUTTONPAGOCLIENTESFUNC1QUITARDOCUMENTO).Enable(False)
			self.GetControl(ID_BUTTONPAGOCLIENTESFUNC1MODIFICAABONO).Enable(False)
			self.GetControl(ID_BITMAPBUTTONPAGOCLIENTESFUNC1PASARAABONAR).Enable(False)
			lctrl.Enable(True)
			lctrl.Show(True)
		wx.EndBusyCursor()

	def OnSelectedDocConSaldo(self, evt):
		currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLPAGOCLIENTESFUNC1DOCUMENTOSCONSALDO).GetItem(currentitem, 0).GetText()
		self.docconsaldo = int(datointerno)
		self.GetControl(ID_BUTTONPAGOCLIENTESFUNC1PASARAPAGAR).Enable(True)
		
	def OnDeselectedDocConSaldo(self, evt):
		self.docconsaldo = 0
		self.GetControl(ID_BUTTONPAGOCLIENTESFUNC1PASARAPAGAR).Enable(False)
		
	def OnPasarAPagar(self, evt):
		if self.docconsaldo:
			self.lstdocapagar.append(self.docconsaldo)
			cuenta = self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1NUMEROCUENTA).GetValue()
			try:
				totimporte = 0
				totinteres = 0
				for x in self.dicGrupo:
					totimporte += self.dicGrupo[x]["importepagareiclar"]
					totinteres += self.dicGrupo[x]["interespagareiclar"]
					cuentabasepagare = self.dicGrupo[x]["cuentabasepagare"]
					
				assert totimporte > 0
				self.dicabonar[self.docconsaldo] = totimporte
				self.dicinteres[cuentabasepagare] = totinteres
			except:
				pass
					
			self.FillDocumentosConSaldo(int(cuenta))
			self.FillDocumentosAPagar()

	def OnSelectedDocAPagar(self, evt):
		currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLPAGOCLIENTESFUNC1DOCUMENTOSAPAGAR).GetItem(currentitem, 0).GetText()
		self.docapagar = int(datointerno)
		datointerno = self.GetControl(ID_LISTCTRLPAGOCLIENTESFUNC1DOCUMENTOSAPAGAR).GetItem(currentitem, 2).GetText()
		self.docsaldo = float(datointerno.replace(',',''))
		self.GetControl(ID_BUTTONPAGOCLIENTESFUNC1QUITARDOCUMENTO).Enable(True)
		self.GetControl(ID_BUTTONPAGOCLIENTESFUNC1MODIFICAABONO).Enable(True)
		self.GetControl(ID_BITMAPBUTTONPAGOCLIENTESFUNC1PASARAABONAR).Enable(True)
		
	def OnDeselectedDocAPagar(self, evt):
		self.docapagar, self.docsaldo = 0, 0
		self.GetControl(ID_BUTTONPAGOCLIENTESFUNC1QUITARDOCUMENTO).Enable(False)
		self.GetControl(ID_BUTTONPAGOCLIENTESFUNC1MODIFICAABONO).Enable(False)
		self.GetControl(ID_BITMAPBUTTONPAGOCLIENTESFUNC1PASARAABONAR).Enable(False)
		
	def OnQuitarDocumento(self, evt):
		if self.docapagar:
			self.lstdocapagar.remove(self.docapagar); self.dicabonar.pop(self.docapagar); self.dicinteres = {}
			cuenta = self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1NUMEROCUENTA).GetValue()
			self.FillDocumentosConSaldo(int(cuenta))
			self.FillDocumentosAPagar()
			
	def OnModificaAbono(self, evt):
		while True:
			dlg = wx.TextEntryDialog(self, u"Digite el abono del documento %s" % self.docapagar,
				                 u"Modificando la Cantidad a Abonar", defaultValue = "", style = wx.OK)
			dlg.Centre(wx.BOTTOM)
			dlg.ShowModal()
			abono = dlg.GetValue()
			dlg.Destroy()
			if abono:
				try:
					x = float(abono) * 1
					if x > 0:
						if x > self.docsaldo:
							Mensajes().Info(self, u"� No puede abonar m�s del saldo del documento !", u"Atenci�n")
						else:
							self.dicabonar[self.docapagar] = float(abono)
							self.FillDocumentosAPagar()
							break
					elif x == 0:
						Mensajes().Info(self, u"� No puede introducir cantidades en cero !", u"Atenci�n")
					else:
						Mensajes().Info(self, u"� No puede introducir cantidades en negativo !", u"Atenci�n")
				except:
					Mensajes().Error(self, u"� Cantidad mal introducida >> %s !" % abono, u"Error")
			else:
				break
		
	def OnPasarAAbonar(self, evt):
		abono = self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1MONTOPRERECIBO).GetValue()
		if abono:
			abono = abono.replace(',','')
			try:
				x = float(abono) * 1
				if x > 0:
					if x > self.docsaldo:
						Mensajes().Info(self, u"� No puede abonar m�s del saldo del documento !", u"Atenci�n")
					else:
						self.dicabonar[self.docapagar] = float(abono)
						self.FillDocumentosAPagar()
				elif x == 0:
					Mensajes().Info(self, u"� No puede abonar cantidades en cero !", u"Atenci�n")
				else:
					Mensajes().Info(self, u"� No puede abonar cantidades en negativo !", u"Atenci�n")
			except:
				Mensajes().Error(self, u"� Cantidad no valida >> %s !" % abono, u"Error")
		else:
			Mensajes().Info(self, u"� No hay nada que abonar !", u"Atenci�n")
		
	def OnPonerEnCeroInteres(self, evt):
		cuenta = self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1NUMEROCUENTA).GetValue()
		if cuenta:
			self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1INTERESMORATORIO).SetValue(("0.00").rjust(24))
			pagocapital = self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1PAGOCAPITAL).GetValue()
			totalpagar = 0
			if pagocapital:
				totalpagar = float(pagocapital.replace(',',''))
			self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1TOTALPAGAR).SetValue(self.GetString(amount_and_cents_with_commas(float(totalpagar))).rjust(20))
			self.dicinteres[int(cuenta)] = 0
		else:
			Mensajes().Info(self, u"� Primero elija la cuenta !", u"Atenci�n")
		
	def OnInteresMoratorio(self, evt):
		cuenta = self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1NUMEROCUENTA).GetValue()
		if cuenta:
			while True:
				dlg = wx.TextEntryDialog(self, u"Digite el Interes, Cuenta %s" % int(cuenta),
					                 u"Modificando el Interes Moratorio", defaultValue = "", style = wx.OK)
				dlg.Centre(wx.BOTTOM)
				dlg.ShowModal()
				interes = dlg.GetValue()
				dlg.Destroy()
				if interes:
					try:
						x = float(interes) * 1
						if x > 0:
							self.dicinteres[int(cuenta)] = float(interes)
							pagocapital = self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1PAGOCAPITAL).GetValue()
							totalpagar = float(pagocapital.replace(',','')) + float(interes)
							self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1INTERESMORATORIO).SetValue(self.GetString(amount_and_cents_with_commas(float(interes))).rjust(20))
							self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1TOTALPAGAR).SetValue(self.GetString(amount_and_cents_with_commas(float(totalpagar))).rjust(20))
							break
						elif x == 0:
							Mensajes().Info(self, u"� No puede introducir cantidades en cero !", u"Atenci�n")
						else:
							Mensajes().Info(self, u"� No puede introducir cantidades en negativo !", u"Atenci�n")
					except:
						Mensajes().Error(self, u"� Cantidad mal introducida >> %s !" % interes, u"Error")
				else:
					break
		else:
			Mensajes().Info(self, u"� Primero elija la cuenta !", u"Atenci�n")
			
	def OnAplicar(self, evt):
		pagareiclar = False
		try:
			#assert self.codigopagare > 0
			#assert self.fechavencimientopagareiclar <> ""
			#assert self.fkcuentapagare > 0
			assert len(self.dicGrupo) > 0
			pagareiclar = True
		except:
			pass
		montoprerecibo = self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1MONTOPRERECIBO).GetValue()
		pagocapital = self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1PAGOCAPITAL).GetValue()
		if float(pagocapital.replace(',','')) > 0:
			todook = True
			if montoprerecibo:
				if float(pagocapital.replace(',','')) != float(montoprerecibo.replace(',','')):
					if not Mensajes().YesNo(self, u"El monto del prerecibo es diferente al monto a abonar.\n\n" \
					                        u"� Realmente desea aplicar el abono ?", u"Confirmaci�n"):
						todook = False
		else:
			Mensajes().Info(self, u"� Verifique la cantidad que desea abonar !\n\n" \
			                u"Recuerde que no puede abonar cantidades en\n" \
			                u"cero o negativas.", u"Atenci�n")
			todook = False
			
		if todook and self.lstdocapagar and self.dicabonar:
			try:
				cu = r_cn.cursor()
				sql = "select count(*) from gixreservacionrecibo where fk_desarrollo = %s" % int(self.desarrollo)
				cu.execute(str(sql))
				row = fetchone(cu)
				if int(row[0]) > 0:
					sql = """
					insert into gixreservacionrecibo (codigorecibo, fk_desarrollo, consdesarrollo, usuario)
					select max(codigorecibo) + 1, %s,
					(select max(consdesarrollo) + 1 from gixreservacionrecibo where fk_desarrollo = %s), '%s'
					from gixreservacionrecibo
					""" % (int(self.desarrollo), int(self.desarrollo), self.usuario)
					sql = (sql.replace('\n', ' ')).replace('\t', ' ')
					cu.execute(str(sql))
					r_cn.commit()
					cu.execute('select scope_identity()')
					pkreservacionrecibo = int(fetchone(cu)[0])
					sql = """
					select codigorecibo, consdesarrollo from gixreservacionrecibo where pkreservacionrecibo = %s
					""" % pkreservacionrecibo
					sql = (sql.replace('\n', ' ')).replace('\t', ' ')
					cu.execute(str(sql))
					row = fetchone(cu)
					codigorecibo = int(row[0]); consdesarrollo = int(row[1])
					self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1NUMERORECIBO).SetValue(str(consdesarrollo))
					self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1CODIGORECIBO).SetValue(str(codigorecibo))
					lstctrl = self.GetControl(ID_LISTCTRLPAGOCLIENTESFUNC1DOCUMENTOSAPAGAR)
					for index in range(0, lstctrl.GetItemCount()):
						q = lstctrl.GetItem(index, 4).GetText()
						cantidad = float(q.replace(',',''))
						relacionpago = lstctrl.GetItem(index, 6).GetText()
						if len(relacionpago) > 20: relacionpago = relacionpago[:20]
						fk_documento = lstctrl.GetItem(index, 0).GetText()
						fecha = lstctrl.GetItem(index, 1).GetText()
						dia, mes, anio = fecha.split("/"); fechavencimiento = "%02s/%02s/%s" % (mes, dia, anio)
						sql = """
						insert into MOVIMIENTO
						(codigo, cantidad, fecha, relaciondepago, cargoabono, numrecibo,
						fechavencimientodoc, fk_documento, fk_tipo)
						select max(codigo) + 1, %s, convert(varchar(10), getdate(), 101),
						'%s', 'A', %s, '%s', %s, 4 from MOVIMIENTO
						""" % (cantidad, relacionpago, int(codigorecibo), fechavencimiento, int(fk_documento))
						sql = ((sql.replace('\n', ' ')).replace('\t', ' ')).encode("iso8859-1")
						cu.execute(sql)
						
						if pagareiclar:
							if False:
								sql = """
								insert into MOVIMIENTO_PAGARE
								(codigo, cantidad, fecha, relaciondepago, cargoabono, numrecibo,
								fechavencimientodoc, fk_documento, fk_tipo)
								select isnull(max(codigo),0) + 1, %s, convert(varchar(10), getdate(), 101),
								'%s', 'A', %s, '%s', %s, 4 from MOVIMIENTO
								""" % (cantidad, relacionpago, int(codigorecibo), self.fechavencimientopagareiclar, int(self.codigopagare))
								#sql = ((sql.replace('\n', ' ')).replace('\t', ' ')).encode("iso8859-1")							
								#cu.execute(str(sql))
						
						sql = """
						select convert(varchar(10), d.fechadevencimiento, 111),
						convert(varchar(10), d.fechadevencimientovar, 111), d.saldo, d.cargo, d.abono,
						convert(varchar(10), getdate(), 111), c.codigo, c.saldo
						from DOCUMENTO d
						join CUENTA c on d.fk_cuenta = c.codigo
						where d.codigo = %s
						""" % int(fk_documento)
						sql = (sql.replace('\n', ' ')).replace('\t', ' ')
						cu.execute(str(sql))
						row = fetchone(cu)
						abono = float(row[4]) + cantidad; saldo = float(row[3]) - abono
						cuenta = int(row[6]); saldocuenta = float(row[7]) - cantidad
						fechadevencimientovar = row[0]
						if row[0] < row[5]:
							fechadevencimientovar = row[5]
						sql = """
						update DOCUMENTO set saldo = %s, abono = %s, fechadevencimientovar = '%s' where codigo = %s
						""" % (saldo, abono, fechadevencimientovar, int(fk_documento))
						sql = (sql.replace('\n', ' ')).replace('\t', ' ')
						cu.execute(str(sql))
						sql = "update CUENTA set saldo = %s where codigo = %s" % (saldocuenta, cuenta)
						cu.execute(str(sql))
						if pagareiclar:
							#sql = "update documento_pagare set saldo = saldo - %s, abono = abono + %s where codigo = %s" % ( cantidad, cantidad, self.codigopagare)
							#cu.execute(str(sql))
							#sql = "update CUENTA_PAGARE set saldo = saldo - %s where codigo = %s" % (cantidad, self.fkcuentapagare)
							#cu.execute(str(sql))
							for docu in self.dicGrupo:
								importepagareiclar = self.dicGrupo[docu]["importepagareiclar"]
								fkcuentapagare = self.dicGrupo[docu]["fkcuentapagare"]
								sql = "update documento_pagare set saldo = saldo - %s, abono = abono + %s where codigo = %s" % (   importepagareiclar, importepagareiclar, docu)
								cu.execute(str(sql))
								sql = "update CUENTA_PAGARE set saldo = saldo - %s where codigo = %s" % (importepagareiclar, fkcuentapagare)
								cu.execute(str(sql))
						
					fecha = self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1FECHAPAGO).GetValue()
					dia, mes, anio = fecha.split("/"); fechapago = "%s/%02s/%02s" % (anio, mes, dia)
					referencia = "Ninguna"
					ref = self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1REFERENCIA).GetValue()
					if ref: referencia = "%s" % self.GetString(ref)
					ac = self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1PAGOCAPITAL).GetValue()
					im = self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1INTERESMORATORIO).GetValue()
					tr = self.GetControl(ID_TEXTCTRLPAGOCLIENTESFUNC1TOTALPAGAR).GetValue()
					abonocapital = ac.replace(',',''); interesmoratorio = im.replace(',',''); totalrecibo = tr.replace(',','')
					sql = """
					insert into RECIBO
					(codigo, fechaemision, abonocapital, interesmoratorio, totalrecibo, referencia,
					status, fk_desarrollo, consdesarrollo)
					values (%s, '%s', %s, %s, %s, '%s', 'A', %s, %s)
					""" % (codigorecibo, fechapago, float(abonocapital), float(interesmoratorio), float(totalrecibo),
					       referencia, self.desarrollo, consdesarrollo)
					sql = ((sql.replace('\n', ' ')).replace('\t', ' ')).encode("iso8859-1")
					cu.execute(str(sql))
					if pagareiclar:
						sql = """
						insert into RECIBO_PAGARE
						(codigo, fechaemision, abonocapital, interesmoratorio, totalrecibo, referencia,
						status, fk_desarrollo, consdesarrollo)
						values (%s, '%s', %s, %s, %s, '%s', 'A', %s, %s)
						""" % (codigorecibo, fechapago, float(abonocapital), float(interesmoratorio), float(totalrecibo),
						       referencia, self.desarrollo, consdesarrollo)
						sql = ((sql.replace('\n', ' ')).replace('\t', ' ')).encode("iso8859-1")
						cu.execute(str(sql))
						
					if self.prerecibo:
						sql = "update prerecibo set fk_recibo = %s where codigo = %s" % (codigorecibo, self.prerecibo)
						cu.execute(str(sql))
					sql = """
					update gixreservacionrecibo set utilizado = 1, referenciado = 1 where pkreservacionrecibo = %s
					""" % pkreservacionrecibo
					sql = (sql.replace('\n', ' ')).replace('\t', ' ')
					cu.execute(str(sql))
					cu.close()
					r_cn.commit()
				else:
					Mensajes().Info(self, u"� No se grabo el recibo !\n\n" \
					                u"Se requiere inicializar la reservaci�n de recibos\n" \
					                u"para el desarrollo %s." % int(self.desarrollo), u"Atenci�n")
					cu.close()
					todook = False
			except:
				r_cn.rollback()
				Mensajes().Info(self, u"� No se grabo el recibo !\n\n" \
			                        u"Se experimentaron problemas con el coordinador central.", u"Atenci�n")
				todook = False
				
			if pagareiclar:
				self.codigopagare = 0
				self.fechavencimientopagareiclar = ""
				self.fkcuentapagare = 0
				self.dicGrupo = dict()
				
			if todook:
				msg = u"Desea imprimir el recibo"
				while True:
					if Mensajes().YesNo(self, u"� %s ?" % msg,
					                    u"Recibo generado: %s  C�digo: %s" % (consdesarrollo, codigorecibo)):
						self.ImprimeRecibo(codigorecibo)
						msg = u"Desea repetir la impresi�n del recibo"
					else:
						self.HabilitaDeshabilita(True)
						self.FillDocumentosAPagar()
						break
					
	def ImprimeRecibo(self, codigorecibo):
		try:
			pisa
		except:
			Mensajes().Info(self, u"� Por favor instale el m�dulo pisa !", u"Aviso")
			return
		try:
			gridcontenthtml = self.GetHtmlReciboFromGrid(consecutivorecibo = codigorecibo)
			if gridcontenthtml:
				wx.BeginBusyCursor()
				archivo = self.GetPdfFileName("reciboiclar")
				gridcontenthtml = gridcontenthtml.encode("utf-8")
				pdf = pisa.CreatePDF(cStringIO.StringIO(gridcontenthtml), file(archivo, "wb"))
				if not pdf.err:
					try:
						pdf.dest.close()
					except:
						warnings.warn("<<pdf.dest.close() no se pudo.>>")
					try:
						os.startfile(str(archivo))
					except:
						if sys.platform == "darwin":
							command = "open %s" % archivo
						else:
							command = "xdg-open %s" % archivo
							
						#os.system("open %s" % archivo)
						#commmand_line = "open %s" % archivo
						
						try:
							p = subprocess.Popen(command, shell = True)
							pid, sts = os.waitpid(p.pid, 0)						
						except:
							pass
						
				wx.EndBusyCursor()
			else:
				Mensajes().Info(self, u"� No se encontr� informaci�n referente al recibo !", u"Atenci�n")
		except:
			wx.EndBusyCursor()
			Mensajes().Info(self, u"� Se presento un problema al generar el recibo !", u"Atenci�n")

	def GetHtmlReciboFromGrid(self, consecutivorecibo = 0):
		sql = """
		select convert(varchar(10), r.fechaemision, 103), r.abonocapital, r.interesmoratorio, r.totalrecibo, r.referencia,
		r.consdesarrollo, convert(varchar(10), r.fechacaptura, 103), c.codigo, c.fk_inmueble, c.fk_cliente, c.saldo,
		isnull(i.iden1, ''), isnull(i.iden2, ''), e.nombre, t.descripcion, o.descripcion
		from RECIBO r
		join MOVIMIENTO m on m.numrecibo = r.codigo
		join DOCUMENTO d on d.codigo = m.fk_documento
		join CUENTA c on c.codigo = d.fk_cuenta
		left join INMUEBLE i on i.codigo = c.fk_inmueble
		join CLIENTE e on e.codigo = c.fk_cliente
		join ETAPA t on t.codigo = c.fk_etapa
		join DESARROLLO o on o.codigo = t.fk_desarrollo
		where r.codigo = %s
		""" % consecutivorecibo
		sql = (sql.replace('\n', ' ')).replace('\t', ' ')
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row is not None:
			a = u"�"; e = u"�"; i = u"�"; o = u"�"; u = u"�"
			meses = ("", "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto",
			         "Septiembre", "Octubre", "Noviembre", "Diciembre")
			dia, mes, ano = row[0].split("/")
			fechaemision = "%s %s, %s" % (meses[int(mes)], dia, ano)
			abonocapital = float(row[1]); interesmoratorio = float(row[2]); totalrecibo = float(row[3])
			referencia = self.GetString(row[4]); consdesarrollo = int(row[5])
			fechaaplicacion = "X"
			if row[6]:
				dia, mes, ano = row[6].split("/")
				fechaaplicacion = "%s %s, %s" % (meses[int(mes)], dia, ano)
			cuenta = int(row[7]); inmueble = int(row[8]); cliente = int(row[9]); saldo = float(row[10])
			idinmueble = "%s %s - %s" % (self.GetString(row[11]), self.GetString(row[12]), self.GetString(row[14]))
			nombrecliente = self.GetString(row[13])
			desarrollo = self.GetString(row[15])
			aux = saldo + abonocapital
			#saldoactual = "X"
			#saldoposterior = "X"
			saldoactual = str(amount_and_cents_with_commas(aux))
			saldoposterior = str(amount_and_cents_with_commas(saldo))
			abonocapital = str(amount_and_cents_with_commas(abonocapital))
			interesmoratorio = str(amount_and_cents_with_commas(interesmoratorio))
			totalrecibo = str(amount_and_cents_with_commas(totalrecibo))
			
			header = """
			<table
			 style="width: 993px; height: 200px; text-align: left; margin-left: auto; margin-right: auto;"
			 border="0" cellpadding="2" cellspacing="2">
			  <tbody>
			    <tr>
			      <td style="text-align: center;">
			      <IMG SRC="images/LogoIclar.jpg" NAME="Logo" ALIGN=LEFT WIDTH=160 HEIGHT=160 BORDER=0>
			      </td>
			      <td style="text-align: center;"><big><big><span
			 style="font-weight: bold;"><big>Desarrolladora Urbana Integral,</big></span><br>
			      <span style="font-weight: bold;"><big>S.A. de C.V.</big></span><br><br>
			      </big><big style="font-weight: bold;"><big><small>""" + desarrollo + """</small></big></big></big></td>
			    </tr>
			  </tbody>
			</table>
			<div style="text-align: right;"><big><big>&nbsp;<span
			 style="font-weight: bold;">RECIBO:&nbsp;""" + str(consdesarrollo) + """</span></big></big><br>
			</div>
			<hr style="width: 100%; height: 2px;">
			<table style="text-align: left; width: 985px; height: 82px; margin-left: auto; margin-right: auto;"
			border="0" cellpadding="2" cellspacing="2">
			  <tbody>
			    <tr>
			      <td></td>
			      <td style="text-align: right; width: 190px;"><big>Cuenta:</big></td>
			      <td style="text-align: left; font-weight: bold; width: 183px;"><big>""" + str(cuenta) + """</big></td>
			      <td style="text-align: right; width: 219px;"><big>Fecha de Aplicaci""" + o + """n:</big></td>
			      <td style="font-weight: bold; width: 357px;"><big>""" + fechaaplicacion + """</big></td>
			      <td></td>
			    </tr>
			    <tr>
			      <td></td>
			      <td style="text-align: right; width: 190px;"><big>Inmueble:</big></td>
			      <td style="text-align: left; font-weight: bold; width: 183px;"><big>""" + str(inmueble) + """</big></td>
			      <td style="text-align: right; width: 219px;"><big>Id. del Inmueble:</big></td>
			      <td style="font-weight: bold; width: 357px"><big>""" + idinmueble + """</big></td>
			      <td></td>
			    </tr>
			    <tr>
			      <td></td>
			      <td style="text-align: right; width: 190px;"><big>Cliente:</big></td>
			      <td style="text-align: left; font-weight: bold; width: 183px;"><big>""" + str(cliente) + """</big></td>
			      <td style="text-align: right; width: 219px;"><big>Fecha de Pago:</big></td>
			      <td style="font-weight: bold; width: 357px"><big>""" + fechaemision + """</big></td>
			      <td></td>
			    </tr>
			  </tbody>
			</table>
			<br>
			<big>Nombre del Cliente: <span style="font-weight: bold;">""" + nombrecliente + """</span></big><br>
			<br>
			<div style="text-align: center;"><big>Saldo Actual:<span style="font-weight: bold;"> $""" + saldoactual + """</span>
			&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Saldo
			Posterior al Pago:<span style="font-weight: bold;">
			$""" + saldoposterior + """</span></big><br>
			</div>
			<hr style="height: 1px; width: 100%;" noshade="noshade">
			<div style="text-align: right;"><span
			 style="font-weight: bold; font-style: italic;"></span><span
			 style="font-weight: bold; font-style: italic;"></span><span
			 style="font-style: italic;"><span
			 style="font-weight: bold;">Movimiento&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp; &nbsp;&nbsp;&nbsp; Importe</span></span>&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp; <span
			 style="font-style: italic;"><span
			 style="font-weight: bold;">Mensualidad&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Mes a
			Pagar&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;</span></span>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span
			 style="font-style: italic;"><span
			 style="font-weight: bold;">&nbsp;&nbsp;&nbsp;&nbsp;
			Documento</span></span><br>
			<span style="font-style: italic;"><span
			 style="font-weight: bold;"></span></span></div>
			<span style="font-style: italic;"><span
			 style="font-weight: bold;"></span></span>
			<hr style="width: 100%; height: 2px;">
			"""
			
			sql = """
			select codigo, cantidad, relaciondepago, convert(varchar(10), fechavencimientodoc, 103), fk_documento
			from MOVIMIENTO
			where cargoabono = 'A' and fk_tipo = 4 and numrecibo = %s
			order by fechavencimientodoc
			""" % consecutivorecibo
			sql = (sql.replace('\n', ' ')).replace('\t', ' ')
			cu = r_cn.cursor()
			cu.execute(str(sql))
			rows = fetchall(cu)
			cu.close()
			detail = ""; detaillines = 12; cont = 0
			if rows:
				for cont, row in enumerate(rows):
					movimiento = str(row[0])
					importe = str(amount_and_cents_with_commas(row[1]))
					mensualidad = self.GetString(row[2])
					mesapagar = str(row[3])
					documento = str(row[4])
					line = """
					<table
					 style="text-align: left; margin-left: auto; margin-right: auto; width: 990px; height: 20px;"
					 border="0" cellpadding="2" cellspacing="2">
					  <tbody>
					    <tr>
					      <td style="width: 200px; text-align: right;"><big>""" + movimiento + """</big></td>
					      <td style="text-align: right;"><big>""" + importe + """</big></td>
					      <td style="text-align: center;"><big>""" + mensualidad + """</big></td>
					      <td style="text-align: center;"><big>""" + mesapagar + """</big></td>
					      <td style="text-align: right;"><big>""" + documento + """</big></td>
					    </tr>
					  </tbody>
					</table>
					"""
					detail += line
					
			if cont > 7: detaillines -= 1
			for aux in range(cont, detaillines):
				detail += "<br>"

			footer = """
			<big><br>
			</big><big>
			</big><big></big>
			<table
			 style="width: 981px; height: 76px; text-align: left; margin-left: auto; margin-right: 0px;"
			 border="0" cellpadding="2" cellspacing="2">
			  <tbody>
			    <tr>
			      <td></td>
			      <td></td>
			      <td></td>
			      <td style="text-align: right;"><big>Pago a Capital:</big></td>
			      <td style="text-align: right;"><big><span
			 style="font-weight: bold;">$""" + abonocapital + """</span></big></td>
			    </tr>
			    <tr>
			      <td></td>
			      <td></td>
			      <td></td>
			      <td style="text-align: right;"><big>Intereses Moratorios:</big></td>
			      <td style="text-align: right;"><big><span
			 style="font-weight: bold;">""" + interesmoratorio + """</span></big></td>
			    </tr>
			    <tr>
			      <td></td>
			      <td></td>
			      <td></td>
			      <td style="text-align: right;"><big>Total a Pagar:</big></td>
			      <td style="text-align: right;"><big><span
			 style="font-weight: bold;">$""" + totalrecibo + """</span></big></td>
			    </tr>
			  </tbody>
			</table>
			<big><span style="font-weight: bold;">
			</span></big>
			<hr style="width: 100%; height: 2px;"><big>Referencia:
			<span style="font-weight: bold;">""" + referencia + """</span><br>
			</big>
			<div style="text-align: right;"><big>Id. del Recibo:
			<span style="font-weight: bold;">""" + str(consecutivorecibo) + """</span></big><br>
			</div>
			<span style="font-style: italic;"><span
			 style="font-weight: bold;"><big>&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;</big>Firma del Cajero</span></span><br>
			<hr style="width: 100%; height: 2px;"><span
			 style="font-weight: bold;">Observaciones:</span><br>
			1) El pago deber""" + a + """ hacerse con deposito bancario seg""" + u + """n la referencia que
			le corresponda a su vivienda.<br>
			2) El horario de oficina es de 9:00 a 19:30 horas de Lunes a Sabado.<br>
			3) Si el d""" + i + """a de vencimiento es inh""" + a + """bil bancario, el pago deber""" + a + """ hacerse
			el d""" + i + """a h""" + a + """bil inmediato anterior.<br>
			4) Los intereses moratorios se calculan a la fecha de corte de """ + e + """ste
			estado de cuenta.<br>
			5)
			Favor de pagar con cheque cruzado a nombre de Desarrolladora Urbana Integral,
			S.A. de C.V. y """ + e + """ste recibo causar""" + a + """ efecto salvo buen cobro del cheque.<br>
			<hr style="width: 100%; height: 2px;">&nbsp;<span
			 style="font-style: italic; font-weight: bold;"></span><span
			 style="font-style: italic; font-weight: bold;"></span>
			"""
			
			bgnd = """
			<style>
			@page {
			  size: letter;
			  margin: 1cm;
			}
			</style>
			"""
			html = '<html>' + bgnd + '<head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /></head><body>' + \
			     header + detail + footer + '</body></html>'
			return html
		else:
			return ""

class GixRecibosPagoPinaresFunc1(wx.Frame, GixBase):
	def __init__(self, parent, id = -1, title = "", pos = wx.DefaultPosition, size = wx.DefaultSize,
	             style = wx.DEFAULT_FRAME_STYLE, usuario = None):
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		self.lstctrlorder = {0:("c.codigo","desc",""), 1:("c.fecha","desc","> "), 2:("i.iden1, i.iden2","desc",""),
		                     3:("i.iden2, i.iden1","desc",""), 4:("c.saldo","desc",""), 5:("e.descripcion","desc",""),
		                     6:("t.nombre","desc","")}
		self.DicDatesAndTxt = {ID_BITMAPBUTTONRECIBOPAGOPINARESFUNC1FECHAINICIALELEGIR : ID_TEXTCTRLRECIBOPAGOPINARESFUNC1FECHAINICIALFILTRO,
				       ID_BITMAPBUTTONRECIBOPAGOPINARESFUNC1FECHAFINALELEGIR: ID_TEXTCTRLRECIBOPAGOPINARESFUNC1FECHAFINALFILTRO}
		self.usuario = usuario
		self.cliente = ""
		self.empresa, self.desarrollo = 1, 5
		self.currentitem, self.cuenta, self.etapa = 0, 0, 0
		panel = wx.Panel(self, -1)
		ReciboPagoPinaresFunc1(panel, True, True)
		self.colprev, self.colsort = 1, 1
		self.lstctrlsort = "c.fecha desc"
		self.choicefiltroinmueble = {0:"", 1:"c.saldo > 0", 2:"c.saldo = 0", 3:"c.saldo < 0"}
		self.choiceinxinmueble = 1
		self.GetControl(ID_CHOICERECIBOPAGOPINARESFUNC1INMUEBLEFILTRO).SetSelection(self.choiceinxinmueble)
		self.Bind(wx.EVT_CHOICE, self.OnChoiceCtrlInmueble, id = ID_CHOICERECIBOPAGOPINARESFUNC1INMUEBLEFILTRO)
		self.ObtenerEtapas()
		self.Bind(wx.EVT_CHOICE, self.OnChoiceCtrlEtapa, id = ID_CHOICERECIBOPAGOPINARESFUNC1ETAPAFILTRO)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONRECIBOPAGOPINARESFUNC1LIMPIARETAPAFILTRO, self.OnLimpiarEtapaFiltro)
		for v in self.DicDatesAndTxt.keys():
			self.Bind(wx.EVT_BUTTON, self.OnFechaButton, id = v )
			
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONRECIBOPAGOPINARESFUNC1FECHAINICIALLIMPIAR, self.OnLimpiaFecha)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONRECIBOPAGOPINARESFUNC1FECHAFINALLIMPIAR, self.OnLimpiaFecha)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLRECIBOPAGOPINARESFUNC1FECHAINICIALFILTRO)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLRECIBOPAGOPINARESFUNC1FECHAFINALFILTRO)
		self.GetControl(ID_SEARCHCTRLRECIBOPAGOPINARESFUNC1CLIENTEFILTRO).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchCliente, id = ID_SEARCHCTRLRECIBOPAGOPINARESFUNC1CLIENTEFILTRO)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanCliente, id = ID_SEARCHCTRLRECIBOPAGOPINARESFUNC1CLIENTEFILTRO)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchCliente, id = ID_SEARCHCTRLRECIBOPAGOPINARESFUNC1CLIENTEFILTRO)
		
		self.Bind(wx.EVT_LIST_COL_CLICK, self.OnSortListCtrl, id = ID_LISTCTRLRECIBOPAGOPINARESFUNC1)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelected, id = ID_LISTCTRLRECIBOPAGOPINARESFUNC1)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselected, id = ID_LISTCTRLRECIBOPAGOPINARESFUNC1)
		wx.EVT_BUTTON(self, ID_BUTTONRECIBOPAGOPINARESFUNC1RECIBO, self.OnRecibo)
		wx.EVT_BUTTON(self, ID_BUTTONRECIBOPAGOPINARESFUNC1EDITAR, self.OnEdit)
		wx.EVT_BUTTON(self, ID_BUTTONRECIBOPAGOPINARESFUNC1SALIR, self.OnClose)
		wx.EVT_CLOSE(self, self.OnClose)
		self.GetControl(ID_LISTCTRLRECIBOPAGOPINARESFUNC1).SetFocus()
		#if wx.Platform == '__WXMSW__':
		self.FillListCtrl()
		
	def OnClose(self, evt):
		self.Destroy()
		
	def ObtenerEtapas(self):
		control = self.GetControl(ID_CHOICERECIBOPAGOPINARESFUNC1ETAPAFILTRO)
		control.Enable(False)
		control.Show(False)
		control.Clear()
		sql = """
		select codigo, descripcion from ETAPA
		where fk_desarrollo = %s order by descripcion
		""" % self.desarrollo
		cu = r_cngcmex.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(str(row[1]).decode("iso8859-1"), int(row[0]))
				
		control.Show(True)
		control.Enable(True)
		control.SetSelection(-1)
		
	def OnChoiceCtrlEtapa(self, evt):
		choiceinxetapa = self.GetControl(ID_CHOICERECIBOPAGOPINARESFUNC1ETAPAFILTRO).GetSelection()
		self.etapa = self.GetControl(ID_CHOICERECIBOPAGOPINARESFUNC1ETAPAFILTRO).GetClientData(choiceinxetapa)
		self.FillListCtrl()
		self.GetControl(ID_LISTCTRLRECIBOPAGOPINARESFUNC1).SetFocus()
		
	def OnLimpiarEtapaFiltro(self, evt):
		self.GetControl(ID_CHOICERECIBOPAGOPINARESFUNC1ETAPAFILTRO).SetSelection(SetChoiceIndex())
		self.etapa = 0
		self.FillListCtrl()
		
	def OnChoiceCtrlInmueble(self, evt):
		self.choiceinxinmueble = self.GetControl(ID_CHOICERECIBOPAGOPINARESFUNC1INMUEBLEFILTRO).GetSelection()
		self.FillListCtrl()
		self.GetControl(ID_LISTCTRLRECIBOPAGOPINARESFUNC1).SetFocus()
		
	def OnText(self, evt):
		id = evt.GetId()
		if id == ID_TEXTCTRLRECIBOPAGOPINARESFUNC1FECHAINICIALFILTRO:
			self.Habilita()
		self.FillListCtrl()
		
	def OnLimpiaFecha(self, evt):
		id = evt.GetId()
		if id == ID_BITMAPBUTTONRECIBOPAGOPINARESFUNC1FECHAINICIALLIMPIAR:
			self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC1FECHAINICIALFILTRO).SetValue("")
			self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC1FECHAFINALFILTRO).SetValue("")
			self.Habilita()
		else:
			self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC1FECHAFINALFILTRO).SetValue("")
		self.FillListCtrl()
		
	def OnSelected(self, evt):
		self.currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLRECIBOPAGOPINARESFUNC1).GetItem(self.currentitem, 0).GetText()
		self.cuenta = int(datointerno)
		self.GetControl(ID_BUTTONRECIBOPAGOPINARESFUNC1EDITAR).Enable(True)
		
	def OnDeselected(self, evt):
		self.currentitem, self.cuenta = 0, 0
		self.GetControl(ID_BUTTONRECIBOPAGOPINARESFUNC1EDITAR).Enable(False)
	
	def OnRecibo(self, evt):
		titulo = u"Arcadia (Pinares Tapalpa) - Aplicaci�n de Pagos y Generaci�n de Recibos"
		dlg = GixRecibosPagoPinaresFunc3(self, -1, titulo, wx.Point(20,20), wx.Size(770,420),
		                                 usuario = self.usuario)
		dlg.Centre(wx.BOTH)
		dlg.ShowModal()
		
	def OnEdit(self, evt):
		titulo = u"Arcadia (Pinares Tapalpa) - Aplicaci�n de Pagos y Generaci�n de Recibos"
		dlg = GixRecibosPagoPinaresFunc2(self, -1, titulo, wx.Point(20,20), wx.Size(770,420),
		                                 usuario = self.usuario, cuenta = self.cuenta)
		dlg.Centre(wx.BOTH)
		dlg.ShowModal()
		
	def OnSortListCtrl(self, evt):
		self.colsort = evt.GetColumn()
		if self.lstctrlorder[self.colsort][1] == "desc":
			self.lstctrlsort = "%s asc" % self.lstctrlorder[self.colsort][0]
			self.lstctrlorder[self.colsort] = (self.lstctrlorder[self.colsort][0], "asc", "< ")
		else:
			self.lstctrlsort = "%s desc" % self.lstctrlorder[self.colsort][0]
			self.lstctrlorder[self.colsort] = (self.lstctrlorder[self.colsort][0], "desc", "> ")
		if self.colprev != self.colsort:
			self.lstctrlorder[self.colprev] = (self.lstctrlorder[self.colprev][0], self.lstctrlorder[self.colprev][1], "")
		self.FillListCtrl()
		self.colprev = self.colsort
		evt.Skip()
		
	def OnDoSearchCliente(self, evt):
		self.cliente =  self.GetControl(ID_SEARCHCTRLRECIBOPAGOPINARESFUNC1CLIENTEFILTRO).GetValue()
		self.FillListCtrl()

	def OnCleanCliente(self, evt):
		self.GetControl(ID_SEARCHCTRLRECIBOPAGOPINARESFUNC1CLIENTEFILTRO).SetValue("")
		self.cliente = ""
		self.FillListCtrl()
		
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
				
		return dato.strip()

	def FillListCtrl(self):
		listctrlfiltro = ""
		fechafiltro = self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC1FECHAINICIALFILTRO).GetValue()
		if fechafiltro:
			try:
				fecha_dia, fecha_mes, fecha_ano = \
						 self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC1FECHAINICIALFILTRO).GetValue().split('/')
				fechainicial = "'%s/%02d/%02d'" % (fecha_ano, int(fecha_mes), int(fecha_dia))
				fecharango = self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC1FECHAFINALFILTRO).GetValue()
				if fecharango:
					rango_dia, rango_mes, rango_ano = \
							 self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC1FECHAFINALFILTRO).GetValue().split('/')
					fechafinal = "'%s/%02d/%02d'" % (rango_ano, int(rango_mes), int(rango_dia))
					if fechainicial > fechafinal:
						Mensajes().Info(self, u"La Fecha Inicial no debe ser mayor a la Fecha Final.\n\n" \
						                u"Se tomar� en cuenta unicamente la fecha inicial.", u"Atenci�n")
						self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC1FECHAFINALFILTRO).SetValue("")
						return
					else:
						listctrlfiltro = """
						and (convert(varchar(10), c.fecha, 111) >= %s
						and convert(varchar(10), c.fecha, 111) <= %s)
						""" % (fechainicial, fechafinal)
				else:
					listctrlfiltro = "and convert(varchar(10), c.fecha, 111) = %s" % fechainicial
			except:
				listctrlfiltro = ""
		if self.choiceinxinmueble > 0:
			listctrlfiltro += " and %s" % str(self.choicefiltroinmueble[self.choiceinxinmueble])
		if self.cliente:
			listctrlfiltro += " and t.nombre like '%s%s%s'" % ("%%", str(self.cliente), "%%")
		if self.etapa:
			listctrlfiltro += " and e.codigo = %s" % int(self.etapa)
		query = """
		select c.codigo, convert(varchar(10), c.fecha, 103), i.iden1, i.iden2,
		c.saldo, rtrim(ltrim(e.descripcion)), rtrim(ltrim(t.nombre))
		from CUENTA c
		join CLIENTE t on c.fk_cliente = t.codigo
		join INMUEBLE i on c.fk_inmueble = i.codigo
		join ETAPA e on i.fk_etapa = e.codigo
		join DESARROLLO d on e.fk_desarrollo = d.codigo
		where d.codigo = %s and d.fk_empresa = %s
		%s order by %s
		""" % (self.desarrollo, self.empresa, listctrlfiltro, self.lstctrlsort)
		sqlx = query.replace('\t', ' ')
		sql = sqlx.replace('\n', ' ')
		cu = r_cngcmex.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		fila, total = 0, 0
		lctrl = self.GetControl(ID_LISTCTRLRECIBOPAGOPINARESFUNC1)
		if rows:
			lctrl.ClearAll()
			lctrl.InsertColumn(0, u"%sCuenta" % self.lstctrlorder[0][2], wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"%sFecha" % self.lstctrlorder[1][2], wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(2, u"%sManzana" % self.lstctrlorder[2][2], wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(3, u"%sLote" % self.lstctrlorder[3][2], wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(4, u"%sSaldo" % self.lstctrlorder[4][2], wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(5, u"%sEtapa" % self.lstctrlorder[5][2])
			lctrl.InsertColumn(6, u"%sCliente" % self.lstctrlorder[6][2])
			for row in rows:
				if float(row[4]) > 0:
					if fila %2 != 0: bgcolor = [204,204,255]
					else:            bgcolor = [230,230,255]
				elif float(row[4]) == 0:
					if fila %2 != 0: bgcolor = [248,181,68]
					else:            bgcolor = [251,212,146]
				else:
					if fila %2 != 0: bgcolor = [255,153,153]
					else:            bgcolor = [255,215,215]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				etapa = str(row[5].strip())
				cliente = str(row[6].strip())
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, str(row[1]))
				lctrl.SetStringItem(index, 2, self.GetString(row[2]))
				lctrl.SetStringItem(index, 3, str(row[3]))
				lctrl.SetStringItem(index, 4, str(amount_and_cents_with_commas(row[4])))
				lctrl.SetStringItem(index, 5, self.GetString(etapa))
				lctrl.SetStringItem(index, 6, self.GetString(cliente))
				lctrl.SetItemData(index, row[0])
				fila += 1
				total += float(row[4])
				
			lctrl.SetColumnWidth(0, 60)
			lctrl.SetColumnWidth(1, 90)
			lctrl.SetColumnWidth(2, 70)
			lctrl.SetColumnWidth(3, 70)
			lctrl.SetColumnWidth(4, 90)
			lctrl.SetColumnWidth(5, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(6, wx.LIST_AUTOSIZE)
			self.Habilita()
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Cuentas", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 200)
			self.Habilita()
			
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC1TOTALREGISTROS).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC1TOTALREGISTROS).SetValue(str(int(fila)))
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC1TOTALSALDO).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC1TOTALSALDO).SetValue(str(amount_and_cents_with_commas(total)))
		
	def Habilita(self):
		sw = False
		if self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC1FECHAINICIALFILTRO).GetValue():
			sw = True
		self.GetControl(ID_TEXTRECIBOPAGOPINARESFUNC1FECHAFINALFILTRO).Enable(sw)
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC1FECHAFINALFILTRO).Enable(sw)
		self.GetControl(ID_BITMAPBUTTONRECIBOPAGOPINARESFUNC1FECHAFINALELEGIR).Enable(sw)
		self.GetControl(ID_BITMAPBUTTONRECIBOPAGOPINARESFUNC1FECHAFINALLIMPIAR).Enable(sw)

class GixRecibosPagoPinaresFunc2(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = "", pos = wx.DefaultPosition, size = wx.DefaultSize,
	             style = wx.DEFAULT_DIALOG_STYLE, usuario = None, cuenta = None):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.parent = parent
		self.usuario = usuario
		self.cuenta = cuenta
		self.currentdocumento, self.documento, self.currentrecibo, self.consecutivorecibo = 0, 0, 0, 0
		ReciboPagoPinaresFunc2(self, True)
		self.ObtenerEncabezado()
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelectedDocumento, id = ID_LISTCTRLRECIBOPAGOPINARESFUNC2DOCUMENTOS)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselectedDocumento, id = ID_LISTCTRLRECIBOPAGOPINARESFUNC2DOCUMENTOS)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelectedRecibo, id = ID_LISTCTRLRECIBOPAGOPINARESFUN2RECIBOS)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselectedRecibo, id = ID_LISTCTRLRECIBOPAGOPINARESFUN2RECIBOS)
		wx.EVT_BUTTON(self, ID_BUTTONRECIBOPAGOPINARESFUNC2RECIBO, self.OnImprimirRecibo)
		wx.EVT_BUTTON(self, ID_BUTTONRECIBOPAGOPINARESFUNC2SALIR, self.OnClose)
		wx.EVT_CLOSE(self, self.OnClose)
		self.GetControl(ID_LISTCTRLRECIBOPAGOPINARESFUNC2DOCUMENTOS).SetFocus()
		self.FillListCtrlDocumentos()
		
	def OnClose(self, evt):
	        self.EndModal(1)
		#self.parent.SetFocus()
		self.Destroy()
		
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
		return dato.strip()
		
	def ObtenerEncabezado(self):
		control = self.GetControl(ID_TEXTRECIBOPAGOPINARESFUNC2PINARES)
		control.Enable(False)
		control.Show(False)
		control.SetLabel(u"Error, no se localiz� informaci�n de la cuenta")
		sql = """
		select i.iden1, i.iden2, e.descripcion, t.nombre from CUENTA c
		join INMUEBLE i on c.fk_inmueble = i.codigo
		join ETAPA e on i.fk_etapa = e.codigo
		join CLIENTE t on c.fk_cliente = t.codigo
		where c.codigo = %s
		""" % self.cuenta
		cu = r_cngcmex.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row is not None:
			encabezado = u"%s - %s%s %s - %s" % (self.cuenta, self.GetString(row[0]), self.GetString(row[1]), \
			                                     self.GetString(row[2]), self.GetString(row[3]))
			control.SetLabel(encabezado)
			
		control.Show(True)
		control.Enable(True)
		
	def OnSelectedDocumento(self, evt):
		self.currentdocumento = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLRECIBOPAGOPINARESFUNC2DOCUMENTOS).GetItem(self.currentdocumento, 0).GetText()
		self.documento = int(datointerno)
		encabezado = "Recibo(s) del Documento %s:" % self.documento
		self.GetControl(ID_TEXTRECIBOPAGOPINARESFUNC2ENCABEZADORECIBO).SetLabel(encabezado)
		self.FillListCtrlRecibos()
		
	def OnDeselectedDocumento(self, evt):
		self.currentitem, self.documento = 0, 0
		self.GetControl(ID_TEXTRECIBOPAGOPINARESFUNC2ENCABEZADORECIBO).SetLabel("Recibo(s):")
		self.GetControl(ID_LISTCTRLRECIBOPAGOPINARESFUN2RECIBOS).ClearAll()
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC2TOTALRECIBOS).SetValue("")
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC2TOTALABONOS).SetValue("")
		
	def FillListCtrlDocumentos(self):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLRECIBOPAGOPINARESFUNC2DOCUMENTOS)
		lctrl.Enable(False)
		lctrl.Show(False)
		lctrl.ClearAll()
		query = """
		select codigo, convert(varchar(10), fechadeelaboracion, 103), convert(varchar(10), fechadevencimiento, 103),
		cargo, abono, saldo from DOCUMENTO where fk_cuenta = %s order by fechadevencimiento, codigo
		""" % self.cuenta
		sqlx = query.replace('\t', ' ')
		sql = sqlx.replace('\n', ' ')
		cu = r_cngcmex.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		fila, total = 0, 0
		if rows:
			lctrl.InsertColumn(0, u"Id", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"Elaborado", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(2, u"Vencimiento", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(3, u"Cargo", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(4, u"Abono", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(5, u"Saldo", wx.LIST_FORMAT_RIGHT)
			for row in rows:
				if float(row[5]) > 0:
					if fila %2 != 0: bgcolor = [204,204,255]
					else:            bgcolor = [230,230,255]
				elif float(row[5]) == 0:
					if fila %2 != 0: bgcolor = [248,181,68]
					else:            bgcolor = [251,212,146]
				else:
					if fila %2 != 0: bgcolor = [255,153,153]
					else:            bgcolor = [255,215,215]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, str(row[1]))
				lctrl.SetStringItem(index, 2, str(row[2]))
				lctrl.SetStringItem(index, 3, str(amount_and_cents_with_commas(row[3])))
				lctrl.SetStringItem(index, 4, str(amount_and_cents_with_commas(row[4])))
				lctrl.SetStringItem(index, 5, str(amount_and_cents_with_commas(row[5])))
				lctrl.SetItemData(index, row[0])
				fila += 1
				total += float(row[5])
			lctrl.SetColumnWidth(0, 60)
			lctrl.SetColumnWidth(1, 90)
			lctrl.SetColumnWidth(2, 90)
			lctrl.SetColumnWidth(3, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(4, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(5, wx.LIST_AUTOSIZE)
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Documentos", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 200)
		lctrl.Enable(True)
		lctrl.Show(True)
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC2TOTALDOCUMENTOS).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC2TOTALDOCUMENTOS).SetValue(str(int(fila)))
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC2TOTALSALDO).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC2TOTALSALDO).SetValue(str(amount_and_cents_with_commas(total)))
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC2TOTALRECIBOS).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC2TOTALABONOS).SetBackgroundColour(wx.Colour(153,255,153))
		wx.EndBusyCursor()
		
	def OnSelectedRecibo(self, evt):
		self.currentrecibo = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLRECIBOPAGOPINARESFUN2RECIBOS).GetItem(self.currentrecibo, 0).GetText()
		self.consecutivorecibo = int(datointerno)
		self.GetControl(ID_BUTTONRECIBOPAGOPINARESFUNC2RECIBO).Enable(True)
		
	def OnDeselectedRecibo(self, evt):
		self.currentrecibo, self.consecutivorecibo = 0, 0
		self.GetControl(ID_BUTTONRECIBOPAGOPINARESFUNC2RECIBO).Enable(False)
		
	def FillListCtrlRecibos(self):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLRECIBOPAGOPINARESFUN2RECIBOS)
		lctrl.Enable(False)
		lctrl.Show(False)
		lctrl.ClearAll()
		query = """
		select r.codigo, r.consdesarrollo, convert(varchar(10), r.fechaemision, 103),
		m.cantidad, m.relaciondepago, r.referencia, r.status
		from RECIBO r 
		join MOVIMIENTO m on r.codigo = m.numrecibo
		where m.fk_documento = %s and m.cargoabono = 'A' order by r.fechaemision desc, r.codigo desc
		""" % self.documento
		sqlx = query.replace('\t', ' ')
		sql = sqlx.replace('\n', ' ')
		cu = r_cngcmex.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		fila, total = 0, 0
		if rows:
			lctrl.InsertColumn(0, u"Id", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"Recibo", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(2, u"Emisi�n", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(3, u"Cantidad", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(4, u"Relaci�n", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(5, u"Referencia")
			for row in rows:
				if str(row[6]) == "A":
					if fila %2 != 0: bgcolor = [204,204,255]
					else:            bgcolor = [230,230,255]
					fila += 1
					total += float(row[3])
				else:
					if fila %2 != 0: bgcolor = [255,153,153]
					else:            bgcolor = [255,215,215]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, str(row[1]))
				lctrl.SetStringItem(index, 2, str(row[2]))
				lctrl.SetStringItem(index, 3, str(amount_and_cents_with_commas(row[3])))
				lctrl.SetStringItem(index, 4, self.GetString(row[4]))
				lctrl.SetStringItem(index, 5, self.GetString(row[5]))
				lctrl.SetItemData(index, row[0])
				
			lctrl.SetColumnWidth(0, 60)
			lctrl.SetColumnWidth(1, 60)
			lctrl.SetColumnWidth(2, 90)
			lctrl.SetColumnWidth(3, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(4, 130)
			lctrl.SetColumnWidth(5, wx.LIST_AUTOSIZE)
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Recibos", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 200)
			
		lctrl.Enable(True)
		lctrl.Show(True)
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC2TOTALRECIBOS).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC2TOTALRECIBOS).SetValue(str(int(fila)))
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC2TOTALABONOS).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC2TOTALABONOS).SetValue(str(amount_and_cents_with_commas(total)))
		self.currentrecibo, self.consecutivorecibo = 0, 0
		self.GetControl(ID_BUTTONRECIBOPAGOPINARESFUNC2RECIBO).Enable(False)
		wx.EndBusyCursor()

	def OnImprimirRecibo(self, evt):
		if Mensajes().YesNo(self, u"� Desea realmente imprimir el recibo no. %s ?" % self.consecutivorecibo, u"Confirmaci�n"):
			self.ImprimeRecibo()
			
	def ImprimeRecibo(self):
		try:
			pisa
		except:
			Mensajes().Info(self, u"� Por favor instale el m�dulo pisa !", u"Aviso")
			return
		try:
			gridcontenthtml = self.GetHtmlReciboFromGrid(consecutivorecibo = self.consecutivorecibo)
			if gridcontenthtml:
				wx.BeginBusyCursor()
				archivo = self.GetPdfFileName("recibo")
				gridcontenthtml = gridcontenthtml.encode("utf-8")
				pdf = pisa.CreatePDF(cStringIO.StringIO(gridcontenthtml), file(archivo, "wb"))
				if not pdf.err:
					try:
						pdf.dest.close()
					except:
						warnings.warn("<<pdf.dest.close() no se pudo.>>")
					try:
						os.startfile(str(archivo))
					except:
						os.system("open %s" % archivo)
				wx.EndBusyCursor()
			else:
				Mensajes().Info(self, u"� No se encontr� informaci�n referente al recibo !", u"Atenci�n")
		except:
			wx.EndBusyCursor()
			Mensajes().Info(self, u"� Se presento un problema al generar el recibo !", u"Atenci�n")

	def GetHtmlReciboFromGrid(self, consecutivorecibo = 0):
		sql = """
		select convert(varchar(10), r.fechaemision, 103), r.abonocapital, r.interesmoratorio, r.totalrecibo, r.referencia,
		r.consdesarrollo, convert(varchar(10), r.fechaaplicacion, 103), c.codigo, c.fk_inmueble, c.fk_cliente, c.saldo,
		i.iden1, i.iden2, e.nombre, t.descripcion
		from RECIBO r
		join MOVIMIENTO m on m.numrecibo = r.codigo
		join DOCUMENTO d on d.codigo = m.fk_documento
		join CUENTA c on c.codigo = d.fk_cuenta
		join INMUEBLE i on i.codigo = c.fk_inmueble
		join CLIENTE e on e.codigo = c.fk_cliente
		join ETAPA t on t.codigo = i.fk_etapa
		where r.codigo = %s
		""" % consecutivorecibo
		cu = r_cngcmex.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row is not None:
			a = u"�"; e = u"�"; i = u"�"; o = u"�"; u = u"�"
			meses = ("", "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto",
			         "Septiembre", "Octubre", "Noviembre", "Diciembre")
			dia, mes, ano = row[0].split("/")
			fechaemision = "%s %s, %s" % (meses[int(mes)], dia, ano)
			abonocapital = float(row[1]); interesmoratorio = float(row[2]); totalrecibo = float(row[3])
			referencia = self.GetString(row[4]); consdesarrollo = int(row[5])
			fechaaplicacion = "X"
			if row[6]:
				dia, mes, ano = row[6].split("/")
				fechaaplicacion = "%s %s, %s" % (meses[int(mes)], dia, ano)
			cuenta = int(row[7]); inmueble = int(row[8]); cliente = int(row[9]); saldo = float(row[10])
			idinmueble = "%s %s - %s" % (self.GetString(row[11]), self.GetString(row[12]), self.GetString(row[14]))
			nombrecliente = self.GetString(row[13])
			aux = saldo + abonocapital
			saldoactual = "X"
			saldoposterior = "X"
			abonocapital = str(amount_and_cents_with_commas(abonocapital))
			interesmoratorio = str(amount_and_cents_with_commas(interesmoratorio))
			totalrecibo = str(amount_and_cents_with_commas(totalrecibo))
			
			header = """
			<table
			 style="width: 993px; height: 200px; text-align: left; margin-left: auto; margin-right: auto;"
			 border="0" cellpadding="2" cellspacing="2">
			  <tbody>
			    <tr>
			      <td style="text-align: center;">
			      <IMG SRC="images/LogoPinares2009.jpg" NAME="Logo" ALIGN=LEFT WIDTH=213 HEIGHT=160 BORDER=0>
			      </td>
			      <td style="text-align: center;"><big><big><span
			 style="font-weight: bold;"><big>Arcadia Promotora, S. de R.L. de C.V.</big></span><br>
			      </big><big style="font-weight: bold;"><big><small><small>R.F.C.
			APR-910816-FJ3</small></small></big></big></big></td>
			    </tr>
			  </tbody>
			</table>
			<div style="text-align: right;"><big><big>&nbsp;<span
			 style="font-weight: bold;">RECIBO:&nbsp;""" + str(consdesarrollo) + """</span></big></big><br>
			</div>
			<hr style="width: 100%; height: 2px;">
			<table style="text-align: left; width: 985px; height: 82px; margin-left: auto; margin-right: auto;"
			border="0" cellpadding="2" cellspacing="2">
			  <tbody>
			    <tr>
			      <td></td>
			      <td style="text-align: right; width: 190px;"><big>Cuenta:</big></td>
			      <td style="text-align: left; font-weight: bold; width: 183px;"><big>""" + str(cuenta) + """</big></td>
			      <td style="text-align: right; width: 219px;"><big>Fecha de Aplicaci""" + o + """n:</big></td>
			      <td style="font-weight: bold; width: 357px;"><big>""" + fechaaplicacion + """</big></td>
			      <td></td>
			    </tr>
			    <tr>
			      <td></td>
			      <td style="text-align: right; width: 190px;"><big>Inmueble:</big></td>
			      <td style="text-align: left; font-weight: bold; width: 183px;"><big>""" + str(inmueble) + """</big></td>
			      <td style="text-align: right; width: 219px;"><big>Id. del Inmueble:</big></td>
			      <td style="font-weight: bold; width: 357px"><big>""" + idinmueble + """</big></td>
			      <td></td>
			    </tr>
			    <tr>
			      <td></td>
			      <td style="text-align: right; width: 190px;"><big>Cliente:</big></td>
			      <td style="text-align: left; font-weight: bold; width: 183px;"><big>""" + str(cliente) + """</big></td>
			      <td style="text-align: right; width: 219px;"><big>Fecha de Pago:</big></td>
			      <td style="font-weight: bold; width: 357px"><big>""" + fechaemision + """</big></td>
			      <td></td>
			    </tr>
			  </tbody>
			</table>
			<br>
			<big>Nombre del Cliente: <span style="font-weight: bold;">""" + nombrecliente + """</span></big><br>
			<br>
			<div style="text-align: center;"><big>Saldo Actual:<span style="font-weight: bold;"> $""" + saldoactual + """</span>
			&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Saldo
			Posterior al Pago:<span style="font-weight: bold;">
			$""" + saldoposterior + """</span></big><br>
			</div>
			<hr style="height: 1px; width: 100%;" noshade="noshade">
			<div style="text-align: right;"><span
			 style="font-weight: bold; font-style: italic;"></span><span
			 style="font-weight: bold; font-style: italic;"></span><span
			 style="font-style: italic;"><span
			 style="font-weight: bold;">Movimiento&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp; &nbsp;&nbsp;&nbsp; Importe</span></span>&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp; <span
			 style="font-style: italic;"><span
			 style="font-weight: bold;">Mensualidad&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Mes a
			Pagar&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;</span></span>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span
			 style="font-style: italic;"><span
			 style="font-weight: bold;">&nbsp;&nbsp;&nbsp;&nbsp;
			Documento</span></span><br>
			<span style="font-style: italic;"><span
			 style="font-weight: bold;"></span></span></div>
			<span style="font-style: italic;"><span
			 style="font-weight: bold;"></span></span>
			<hr style="width: 100%; height: 2px;">
			"""
			
			sql = """
			select codigo, cantidad, relaciondepago, convert(varchar(10), fechavencimientodoc, 103), fk_documento
			from MOVIMIENTO
			where cargoabono = 'A' and fk_tipo = 4 and numrecibo = %s
			order by fechavencimientodoc
			""" % consecutivorecibo
			cu = r_cngcmex.cursor()
			cu.execute(str(sql))
			rows = fetchall(cu)
			cu.close()
			detail = ""; detaillines = 15; cont = 0
			if rows:
				for cont, row in enumerate(rows):
					movimiento = str(row[0])
					importe = str(amount_and_cents_with_commas(row[1]))
					mensualidad = self.GetString(row[2])
					mesapagar = str(row[3])
					documento = str(row[4])
					line = """
					<table
					 style="text-align: left; margin-left: auto; margin-right: auto; width: 990px; height: 20px;"
					 border="0" cellpadding="2" cellspacing="2">
					  <tbody>
					    <tr>
					      <td style="width: 200px; text-align: right;"><big>""" + movimiento + """</big></td>
					      <td style="text-align: right;"><big>""" + importe + """</big></td>
					      <td style="text-align: center;"><big>""" + mensualidad + """</big></td>
					      <td style="text-align: center;"><big>""" + mesapagar + """</big></td>
					      <td style="text-align: right;"><big>""" + documento + """</big></td>
					    </tr>
					  </tbody>
					</table>
					"""
					detail += line
					
			if cont > 7: detaillines -= 1
			for aux in range(cont, detaillines):
				detail += "<br>"

			footer = """
			<big><br>
			</big><big>
			</big><big></big>
			<table
			 style="width: 981px; height: 76px; text-align: left; margin-left: auto; margin-right: 0px;"
			 border="0" cellpadding="2" cellspacing="2">
			  <tbody>
			    <tr>
			      <td></td>
			      <td></td>
			      <td></td>
			      <td style="text-align: right;"><big>Pago a Capital:</big></td>
			      <td style="text-align: right;"><big><span
			 style="font-weight: bold;">$""" + abonocapital + """</span></big></td>
			    </tr>
			    <tr>
			      <td></td>
			      <td></td>
			      <td></td>
			      <td style="text-align: right;"><big>Intereses Moratorios:</big></td>
			      <td style="text-align: right;"><big><span
			 style="font-weight: bold;">""" + interesmoratorio + """</span></big></td>
			    </tr>
			    <tr>
			      <td></td>
			      <td></td>
			      <td></td>
			      <td style="text-align: right;"><big>Total a Pagar:</big></td>
			      <td style="text-align: right;"><big><span
			 style="font-weight: bold;">$""" + totalrecibo + """</span></big></td>
			    </tr>
			  </tbody>
			</table>
			<big><span style="font-weight: bold;">
			</span></big>
			<hr style="width: 100%; height: 2px;"><big>Referencia:
			<span style="font-weight: bold;">""" + referencia + """</span><br>
			</big>
			<div style="text-align: right;"><big>Id. del Recibo:
			<span style="font-weight: bold;">""" + str(consecutivorecibo) + """</span></big><br>
			</div>
			<span style="font-style: italic;"><span
			 style="font-weight: bold;"><big>&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;</big>Firma del Cajero</span></span><br>
			<hr style="width: 100%; height: 2px;"><span
			 style="font-weight: bold;">Observaciones:</span><br>
			1) El pago deber""" + a + """ hacerse con deposito bancario seg""" + u + """n la referencia que
			le corresponda a su terreno.<br>
			2) El horario de oficina es de 9:00 a 14:00 y de 16:00 a 18:30 horas de
			Lunes a Viernes.<br>
			3) Si el d""" + i + """a de vencimiento es inh""" + a + """bil bancario, el pago deber""" + a + """ hacerse
			el d""" + i + """a h""" + a + """bil inmediato anterior.<br>
			4) Los intereses moratorios se calculan a la fecha de corte de """ + e + """ste
			estado de cuenta.<br>
			5) El presente estado de cuenta solo ser""" + a + """ valido como recibo si
			presenta la firma del cajero.<br>
			6)
			Favor de pagar con cheque cruzado a nombre de Arcadia Promotora, S. de
			R.L. de C.V. y """ + e + """ste recibo causar""" + a + """ efecto salvo buen cobro del cheque.<br>
			<hr style="width: 100%; height: 2px;">&nbsp;<span
			 style="font-style: italic; font-weight: bold;"></span><span
			 style="font-style: italic; font-weight: bold;"></span>
			"""
			
			html = '<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /></head><body>' + \
			     header + detail + footer + '</body></html>'
			return html
		else:
			return ""

class GixRecibosPagoPinaresFunc3(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = "", pos = wx.DefaultPosition, size = wx.DefaultSize,
	             style = wx.DEFAULT_DIALOG_STYLE, usuario = None):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.lstctrlorder = {0:("c.codigo","desc",""), 1:("c.fecha","desc","> "), 2:("i.iden1, i.iden2","desc",""),
		                     3:("i.iden2, i.iden1","desc",""), 4:("c.saldo","desc",""), 5:("e.descripcion","desc",""),
		                     6:("t.nombre","desc","")}
		self.DicDatesAndTxt = {ID_BITMAPBUTTONRECIBOPAGOPINARESFUNC3FECHAINICIALELEGIR : ID_TEXTCTRLRECIBOPAGOPINARESFUNC3FECHAINICIALFILTRO,
				       ID_BITMAPBUTTONRECIBOPAGOPINARESFUNC3FECHAFINALELEGIR: ID_TEXTCTRLRECIBOPAGOPINARESFUNC3FECHAFINALFILTRO,
		                       ID_BITMAPBUTTONRECIBOPAGOPINARESFUNC3ELEGIRFECHARECIBO: ID_TEXTCTRLRECIBOPAGOPINARESFUNC3FECHARECIBO}
		self.specialuser = ["ADRIANA", "MARTHA"]
		self.usuario = usuario
		self.cliente = ""
		self.empresa, self.desarrollo, self.etapa = 1, 5, 0
		self.currentitemdocumento = []; self.datointernodocumento = []
		self.currentitemrecibo = []; self.datointernorecibo = []
		self.documentosrecibo = {}
		ReciboPagoPinaresFunc3(self, True)
		self.colprev, self.colsort = 1, 1
		self.lstctrlsort = "c.fecha desc"
		self.choicefiltroinmueble = {0:"", 1:"c.saldo > 0", 2:"c.saldo = 0", 3:"c.saldo < 0"}
		self.choiceinxinmueble = 1
		self.GetControl(ID_CHOICERECIBOPAGOPINARESFUNC3INMUEBLEFILTRO).SetSelection(self.choiceinxinmueble)
		self.Bind(wx.EVT_CHOICE, self.OnChoiceCtrlInmueble, id = ID_CHOICERECIBOPAGOPINARESFUNC3INMUEBLEFILTRO)
		self.ObtenerEtapas()
		self.Bind(wx.EVT_CHOICE, self.OnChoiceCtrlEtapa, id = ID_CHOICERECIBOPAGOPINARESFUNC3ETAPAFILTRO)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONRECIBOPAGOPINARESFUNC3LIMPIARETAPAFILTRO, self.OnLimpiarEtapaFiltro)
		for v in self.DicDatesAndTxt.keys():
			self.Bind(wx.EVT_BUTTON, self.OnFechaButton, id = v )
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONRECIBOPAGOPINARESFUNC3FECHAINICIALLIMPIAR, self.OnLimpiaFecha)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONRECIBOPAGOPINARESFUNC3FECHAFINALLIMPIAR, self.OnLimpiaFecha)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLRECIBOPAGOPINARESFUNC3FECHAINICIALFILTRO)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLRECIBOPAGOPINARESFUNC3FECHAFINALFILTRO)
		self.GetControl(ID_SEARCHCTRLRECIBOPAGOPINARESFUNC3CLIENTEFILTRO).ShowCancelButton(True)
		self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.OnDoSearchCliente, id = ID_SEARCHCTRLRECIBOPAGOPINARESFUNC3CLIENTEFILTRO)
		self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCleanCliente, id = ID_SEARCHCTRLRECIBOPAGOPINARESFUNC3CLIENTEFILTRO)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearchCliente, id = ID_SEARCHCTRLRECIBOPAGOPINARESFUNC3CLIENTEFILTRO)
		
		self.Bind(wx.EVT_LIST_COL_CLICK, self.OnSortListCtrl, id = ID_LISTCTRLRECIBOPAGOPINARESFUNC3)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelected, id = ID_LISTCTRLRECIBOPAGOPINARESFUNC3)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselected, id = ID_LISTCTRLRECIBOPAGOPINARESFUNC3)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelectedDocumento, id = ID_LISTCTRLRECIBOPAGOPINARESFUNC3DOCUMENTOS)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselectedDocumento, id = ID_LISTCTRLRECIBOPAGOPINARESFUNC3DOCUMENTOS)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnSelectedRecibo, id = ID_LISTCTRLRECIBOPAGOPINARESFUNC3RECIBO)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDeselectedRecibo, id = ID_LISTCTRLRECIBOPAGOPINARESFUNC3RECIBO)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONRECIBOPAGOPINARESFUNC3AGREGARDOCUMENTO, self.OnAgregar)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONRECIBOPAGOPINARESFUNC3ELIMINARDOCUMENTO, self.OnEliminarDocumento)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONRECIBOPAGOPINARESFUNC3EDITAR, self.OnEditarRecibo)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONRECIBOPAGOPINARESFUNC3APLICAR, self.OnAplicarRecibo)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONRECIBOPAGOPINARESFUNC3RECALCULARMORATORIOS, self.OnRecalcularMoratorios)
		wx.EVT_BUTTON(self, ID_BUTTONRECIBOPAGOPINARESFUNC3EDITAR, self.OnEdit)
		wx.EVT_BUTTON(self, ID_BUTTONRECIBOPAGOPINARESFUNC3SALIR, self.OnClose)
		self.Bind(wx.EVT_TEXT, self.OnFechaRecibo, id = ID_TEXTCTRLRECIBOPAGOPINARESFUNC3FECHARECIBO)
		self.Bind(wx.EVT_TEXT, self.OnMoratorios, id = ID_TEXTCTRLRECIBOPAGOPINARESFUNC3RECIBOMORATORIOS)
		wx.EVT_CLOSE(self, self.OnClose)
		self.GetControl(ID_LISTCTRLRECIBOPAGOPINARESFUNC3).SetFocus()
		#if wx.Platform == '__WXMSW__':
		self.FillListCtrl()
		
	def OnClose(self, evt):
	        self.EndModal(1)
		self.Destroy()
		
	def ObtenerEtapas(self):
		control = self.GetControl(ID_CHOICERECIBOPAGOPINARESFUNC3ETAPAFILTRO)
		control.Enable(False)
		control.Show(False)
		control.Clear()
		sql = """
		select codigo, descripcion from ETAPA
		where fk_desarrollo = %s order by descripcion
		""" % self.desarrollo
		cu = r_cngcmex.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				control.Append(str(row[1]).decode("iso8859-1"), int(row[0]))
				
		control.Show(True)
		control.Enable(True)
		control.SetSelection(-1)
		
	def OnChoiceCtrlEtapa(self, evt):
		choiceinxetapa = self.GetControl(ID_CHOICERECIBOPAGOPINARESFUNC3ETAPAFILTRO).GetSelection()
		self.etapa = self.GetControl(ID_CHOICERECIBOPAGOPINARESFUNC3ETAPAFILTRO).GetClientData(choiceinxetapa)
		self.FillListCtrl()
		self.GetControl(ID_LISTCTRLRECIBOPAGOPINARESFUNC3).SetFocus()
		
	def OnLimpiarEtapaFiltro(self, evt):
		self.GetControl(ID_CHOICERECIBOPAGOPINARESFUNC3ETAPAFILTRO).SetSelection(SetChoiceIndex())
		self.etapa = 0
		self.FillListCtrl()
		
	def OnChoiceCtrlInmueble(self, evt):
		self.choiceinxinmueble = self.GetControl(ID_CHOICERECIBOPAGOPINARESFUNC3INMUEBLEFILTRO).GetSelection()
		self.FillListCtrl()
		self.GetControl(ID_LISTCTRLRECIBOPAGOPINARESFUNC3).SetFocus()
		
	def OnText(self, evt):
		id = evt.GetId()
		if id == ID_TEXTCTRLRECIBOPAGOPINARESFUNC3FECHAINICIALFILTRO:
			self.Habilita()
		self.FillListCtrl()
		
	def OnLimpiaFecha(self, evt):
		id = evt.GetId()
		if id == ID_BITMAPBUTTONRECIBOPAGOPINARESFUNC3FECHAINICIALLIMPIAR:
			self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3FECHAINICIALFILTRO).SetValue("")
			self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3FECHAFINALFILTRO).SetValue("")
			self.Habilita()
		else:
			self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3FECHAFINALFILTRO).SetValue("")
		self.FillListCtrl()
		
	def OnSortListCtrl(self, evt):
		self.colsort = evt.GetColumn()
		if self.lstctrlorder[self.colsort][1] == "desc":
			self.lstctrlsort = "%s asc" % self.lstctrlorder[self.colsort][0]
			self.lstctrlorder[self.colsort] = (self.lstctrlorder[self.colsort][0], "asc", "< ")
		else:
			self.lstctrlsort = "%s desc" % self.lstctrlorder[self.colsort][0]
			self.lstctrlorder[self.colsort] = (self.lstctrlorder[self.colsort][0], "desc", "> ")
		if self.colprev != self.colsort:
			self.lstctrlorder[self.colprev] = (self.lstctrlorder[self.colprev][0], self.lstctrlorder[self.colprev][1], "")
		self.FillListCtrl()
		self.colprev = self.colsort
		evt.Skip()
		
	def OnDoSearchCliente(self, evt):
		self.cliente =  self.GetControl(ID_SEARCHCTRLRECIBOPAGOPINARESFUNC3CLIENTEFILTRO).GetValue()
		self.FillListCtrl()

	def OnCleanCliente(self, evt):
		self.GetControl(ID_SEARCHCTRLRECIBOPAGOPINARESFUNC3CLIENTEFILTRO).SetValue("")
		self.cliente = ""
		self.FillListCtrl()

	def OnEdit(self, evt):
		titulo = u"Arcadia (Pinares Tapalpa) - Aplicaci�n de Pagos y Generaci�n de Recibos"
		dlg = GixRecibosPagoPinaresFunc2(self, -1, titulo, wx.Point(20,20), wx.Size(770,420),
		                                 usuario = self.usuario, cuenta = self.cuenta)
		dlg.Centre(wx.BOTH)
		dlg.ShowModal()
		
	def OnSelected(self, evt):
		currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLRECIBOPAGOPINARESFUNC3).GetItem(currentitem, 0).GetText()
		clienteinterno = self.GetControl(ID_LISTCTRLRECIBOPAGOPINARESFUNC3).GetItem(currentitem, 6).GetText()
		self.cuenta = int(datointerno)
		encabezado = u"Documento(s) de la Cuenta %s: %s" % (self.cuenta, clienteinterno)
		self.GetControl(ID_TEXTRECIBOPAGOPINARESFUNC3DOCUMENTOS).SetLabel(encabezado)
		self.GetControl(ID_BUTTONRECIBOPAGOPINARESFUNC3EDITAR).Enable(True)
		self.FillListCtrlDocumentos()
		
	def OnDeselected(self, evt):
		self.cuenta = 0
		self.LimpiaDocumentos()
		self.LimpiaRecibo()
		self.GetControl(ID_BUTTONRECIBOPAGOPINARESFUNC3EDITAR).Enable(False)
		
	def LimpiaDocumentos(self):
		self.GetControl(ID_TEXTRECIBOPAGOPINARESFUNC3DOCUMENTOS).SetLabel(u"Documento(s) de la Cuenta:")
		self.GetControl(ID_BITMAPBUTTONRECIBOPAGOPINARESFUNC3AGREGARDOCUMENTO).Enable(False)
		self.GetControl(ID_LISTCTRLRECIBOPAGOPINARESFUNC3DOCUMENTOS).ClearAll()
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3TOTALDOCUMENTOS).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3TOTALDOCUMENTOS).SetValue("")
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3TOTALMORATORIOS).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3TOTALMORATORIOS).SetValue("")
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3TOTALSALDODOCUMENTOS).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3TOTALSALDODOCUMENTOS).SetValue("")
		
	def LimpiaRecibo(self):
		self.documentosrecibo = {}
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3FECHARECIBO).SetValue("")
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3RECIBOREFERENCIA).SetValue("")
		self.GetControl(ID_TEXTRECIBOPAGOPINARESFUNC3RECIBO).SetLabel(u"Detalle del Recibo:")
		self.GetControl(ID_BITMAPBUTTONRECIBOPAGOPINARESFUNC3ELIMINARDOCUMENTO).Enable(False)
		self.GetControl(ID_BITMAPBUTTONRECIBOPAGOPINARESFUNC3EDITAR).Enable(False)
		self.GetControl(ID_BITMAPBUTTONRECIBOPAGOPINARESFUNC3APLICAR).Enable(False)
		self.GetControl(ID_LISTCTRLRECIBOPAGOPINARESFUNC3RECIBO).ClearAll()
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3RECIBOPAGO).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3RECIBOPAGO).SetValue("")
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3RECIBOMORATORIOS).SetBackgroundColour(wx.Colour(251,212,146))
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3RECIBOMORATORIOS).SetValue("")
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3RECIBOTOTAL).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3RECIBOTOTAL).SetValue("")
		self.GetControl(ID_LISTCTRLRECIBOPAGOPINARESFUNC3RECIBO).Show(True)
		
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
				
		return dato.strip()
	
	def FillListCtrl(self):
		listctrlfiltro = ""
		fechafiltro = self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3FECHAINICIALFILTRO).GetValue()
		if fechafiltro:
			try:
				fecha_dia, fecha_mes, fecha_ano = \
						 self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3FECHAINICIALFILTRO).GetValue().split('/')
				fechainicial = "'%s/%02d/%02d'" % (fecha_ano, int(fecha_mes), int(fecha_dia))
				fecharango = self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3FECHAFINALFILTRO).GetValue()
				if fecharango:
					rango_dia, rango_mes, rango_ano = \
							 self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3FECHAFINALFILTRO).GetValue().split('/')
					fechafinal = "'%s/%02d/%02d'" % (rango_ano, int(rango_mes), int(rango_dia))
					if fechainicial > fechafinal:
						Mensajes().Info(self, u"La Fecha Inicial no debe ser mayor a la Fecha Final.\n\n" \
						                u"Se tomar� en cuenta unicamente la fecha inicial.", u"Atenci�n")
						self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3FECHAFINALFILTRO).SetValue("")
						return
					else:
						listctrlfiltro = """
						and (convert(varchar(10), c.fecha, 111) >= %s
						and convert(varchar(10), c.fecha, 111) <= %s)
						""" % (fechainicial, fechafinal)
				else:
					listctrlfiltro = "and convert(varchar(10), c.fecha, 111) = %s" % fechainicial
			except:
				listctrlfiltro = ""
				
		if self.choiceinxinmueble > 0:
			listctrlfiltro += " and %s" % str(self.choicefiltroinmueble[self.choiceinxinmueble])
			
		if self.cliente:
			listctrlfiltro += " and t.nombre like '%s%s%s'" % ("%%", str(self.cliente), "%%")
			
		if self.etapa:
			listctrlfiltro += " and e.codigo = %s" % int(self.etapa)
			
		query = """
		select c.codigo, convert(varchar(10), c.fecha, 103), i.iden1, i.iden2,
		c.saldo, rtrim(ltrim(e.descripcion)), rtrim(ltrim(t.nombre))
		from CUENTA c
		join CLIENTE t on c.fk_cliente = t.codigo
		join INMUEBLE i on c.fk_inmueble = i.codigo
		join ETAPA e on i.fk_etapa = e.codigo
		join DESARROLLO d on e.fk_desarrollo = d.codigo
		where d.codigo = %s and d.fk_empresa = %s
		%s order by %s
		""" % (self.desarrollo, self.empresa, listctrlfiltro, self.lstctrlsort)
		sqlx = query.replace('\t', ' ')
		sql = sqlx.replace('\n', ' ')
		cu = r_cngcmex.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		fila = 0
		lctrl = self.GetControl(ID_LISTCTRLRECIBOPAGOPINARESFUNC3)
		lctrl.ClearAll()
		if rows:
			lctrl.InsertColumn(0, u"%sCuenta" % self.lstctrlorder[0][2], wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"%sFecha" % self.lstctrlorder[1][2], wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(2, u"%sManzana" % self.lstctrlorder[2][2], wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(3, u"%sLote" % self.lstctrlorder[3][2], wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(4, u"%sSaldo" % self.lstctrlorder[4][2], wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(5, u"%sEtapa" % self.lstctrlorder[5][2])
			lctrl.InsertColumn(6, u"%sCliente" % self.lstctrlorder[6][2])
			wx.BeginBusyCursor()
			for row in rows:
				if float(row[4]) > 0:
					if fila %2 != 0: bgcolor = [204,204,255]
					else:            bgcolor = [230,230,255]
				elif float(row[4]) == 0:
					if fila %2 != 0: bgcolor = [248,181,68]
					else:            bgcolor = [251,212,146]
				else:
					if fila %2 != 0: bgcolor = [255,153,153]
					else:            bgcolor = [255,215,215]
					
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				etapa = str(row[5].strip())
				cliente = str(row[6].strip())
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, str(row[1]))
				lctrl.SetStringItem(index, 2, self.GetString(row[2]))
				lctrl.SetStringItem(index, 3, str(row[3]))
				lctrl.SetStringItem(index, 4, str(amount_and_cents_with_commas(row[4])))
				lctrl.SetStringItem(index, 5, self.GetString(etapa))
				lctrl.SetStringItem(index, 6, self.GetString(cliente))
				lctrl.SetItemData(index, row[0])
				fila += 1
				
			wx.EndBusyCursor()
			lctrl.SetColumnWidth(0, 60)
			lctrl.SetColumnWidth(1, 90)
			lctrl.SetColumnWidth(2, 70)
			lctrl.SetColumnWidth(3, 70)
			lctrl.SetColumnWidth(4, 90)
			lctrl.SetColumnWidth(5, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(6, wx.LIST_AUTOSIZE)
			self.Habilita()
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Cuentas", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 200)
			self.Habilita()
			
		self.LimpiaDocumentos()
		self.LimpiaRecibo()
		
	def Habilita(self):
		sw = False
		if self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3FECHAINICIALFILTRO).GetValue():
			sw = True
		self.GetControl(ID_TEXTRECIBOPAGOPINARESFUNC3FECHAFINALFILTRO).Enable(sw)
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3FECHAFINALFILTRO).Enable(sw)
		self.GetControl(ID_BITMAPBUTTONRECIBOPAGOPINARESFUNC3FECHAFINALELEGIR).Enable(sw)
		self.GetControl(ID_BITMAPBUTTONRECIBOPAGOPINARESFUNC3FECHAFINALLIMPIAR).Enable(sw)

	def OnSelectedDocumento(self, evt):
		currentitem = evt.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLRECIBOPAGOPINARESFUNC3DOCUMENTOS).GetItem(currentitem, 0).GetText()
		self.currentitemdocumento.append(currentitem)
		self.datointernodocumento.append(int(datointerno))
		self.GetControl(ID_BITMAPBUTTONRECIBOPAGOPINARESFUNC3AGREGARDOCUMENTO).Enable(True)
		
	def OnDeselectedDocumento(self, evt):
		self.currentitemdocumento = []
		self.datointernodocumento = []
		self.GetControl(ID_BITMAPBUTTONRECIBOPAGOPINARESFUNC3AGREGARDOCUMENTO).Enable(False)
	
	def FillListCtrlDocumentos(self, recibo = False):
		try:
			lctrl = self.GetControl(ID_LISTCTRLRECIBOPAGOPINARESFUNC3DOCUMENTOS)
			lctrl.ClearAll()
		except:
			Mensajes().Info(self, u"� Problemas al instanciar lctrl !", u"Atenci�n")
			
		try:
			filtro = ""
			if recibo and self.documentosrecibo:
				filtro = "and codigo not in (%s)" % (",".join(map(str, self.documentosrecibo)),)
		except:
			Mensajes().Info(self, u"� Problemas en el filtro !", u"Atenci�n")
				
		try:
			cu = r_cngcmex.cursor()
		except:
			Mensajes().Info(self, u"� Problemas en la conexi�n !", u"Atenci�n")
				
		try:
			cu.execute("select top 1 porcentaje from CPP order by fecha desc")
		except:
			Mensajes().Info(self, u"� Problemas en el execute primer query !", u"Atenci�n")
			
		try:
			row = fetchone(cu)
			cpp = float(row[0])
		except:
			Mensajes().Info(self, u"� Problemas en el primer query !", u"Atenci�n")
			
		try:
			query = """
			select codigo, convert(varchar(10), fechadevencimiento, 103),
			cargo, abono, saldo, datediff(day, fechadevencimiento, getdate()),
			convert(varchar(10), fechadevencimiento, 111), convert(varchar(10), getdate(), 111), year(fechadeelaboracion ) from DOCUMENTO
			where fk_cuenta = %s and saldo > 0 %s order by fechadevencimiento, codigo
			""" % (self.cuenta, filtro)
			sqlx = query.replace('\t', ' ')
			sql = sqlx.replace('\n', ' ')
			cu.execute(str(sql))
			rows = fetchall(cu)
			cu.close()
			fila, total, totmoratorios = 0, 0, 0
		except:
			Mensajes().Info(self, u"� Problemas en el segundo query !", u"Atenci�n")
			
		try:
			if rows:
				wx.BeginBusyCursor()
				lctrl.InsertColumn(0, u"Id", wx.LIST_FORMAT_CENTER)
				lctrl.InsertColumn(1, u"Vencimiento", wx.LIST_FORMAT_CENTER)
				lctrl.InsertColumn(2, u"Cargo", wx.LIST_FORMAT_RIGHT)
				lctrl.InsertColumn(3, u"Abono", wx.LIST_FORMAT_RIGHT)
				lctrl.InsertColumn(4, u"Saldo", wx.LIST_FORMAT_RIGHT)
				lctrl.InsertColumn(5, u"Moratorios", wx.LIST_FORMAT_RIGHT)
				for row in rows:
					if float(row[4]) > 0:
						if fila %2 != 0: bgcolor = [204,204,255]
						else:            bgcolor = [230,230,255]
					elif float(row[4]) == 0:
						if fila %2 != 0: bgcolor = [248,181,68]
						else:            bgcolor = [251,212,146]
					else:
						if fila %2 != 0: bgcolor = [255,153,153]
						else:            bgcolor = [255,215,215]
						
					index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
					lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
					factor_especial = 2
					interes = cpp
					if int(row[8]) > 2014:
						interes = 25.0
						factor_especial = 1.0
					moratorios = (((((interes / 100) * factor_especial) / 360) * int(row[5])) * float(row[4]))
					#warnings.warn("<<valor de row[5] %s>>" % int(row[5]))
					if moratorios < 0 or str(row[6]) >= str(row[7]):
						moratorios = 0
						
					lctrl.SetStringItem(index, 0, str(row[0]))
					lctrl.SetStringItem(index, 1, str(row[1]))
					lctrl.SetStringItem(index, 2, str(amount_and_cents_with_commas(row[2])))
					lctrl.SetStringItem(index, 3, str(amount_and_cents_with_commas(row[3])))
					lctrl.SetStringItem(index, 4, str(amount_and_cents_with_commas(row[4])))
					lctrl.SetStringItem(index, 5, str(amount_and_cents_with_commas(moratorios)))
					lctrl.SetItemData(index, row[0])
					fila += 1
					total += round(float(row[4]), 2)
					totmoratorios += round(float(moratorios), 2)
					
				wx.EndBusyCursor()
				lctrl.SetColumnWidth(0, 60)
				lctrl.SetColumnWidth(1, 90)
				lctrl.SetColumnWidth(2, 80)
				lctrl.SetColumnWidth(3, 80)
				lctrl.SetColumnWidth(4, 80)
				lctrl.SetColumnWidth(5, 70)
			else:
				lctrl.InsertColumn(0, "       No se Encontraron Documentos", wx.LIST_FORMAT_CENTER)
				lctrl.SetColumnWidth(0, 200)
		except:
			Mensajes().Info(self, u"� Problemas en el ciclo !", u"Atenci�n")
			
		self.currentitemdocumento = []
		self.datointernodocumento = []
		self.currentitemrecibo = []
		self.datointernorecibo = []
		self.GetControl(ID_BITMAPBUTTONRECIBOPAGOPINARESFUNC3AGREGARDOCUMENTO).Enable(False)
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3TOTALDOCUMENTOS).SetValue(str(int(fila)))
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3TOTALMORATORIOS).SetValue(str(amount_and_cents_with_commas(totmoratorios)))
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3TOTALSALDODOCUMENTOS).SetValue(str(amount_and_cents_with_commas(total)))
		
	def OnAgregar(self, evt):
		if len(self.datointernodocumento) > 0:
			cu = r_cngcmex.cursor()
			for datointerno in self.datointernodocumento:
				sql = """
				select d.saldo, convert(varchar(10), d.fechadevencimiento, 111),
				isnull(m.relaciondepago, isnull(t.descripcion1, ''))
				from DOCUMENTO d
				left join MOVIMIENTO m on d.codigo = m.fk_documento and m.fk_tipo = 2
				left join TIPO t on d.fk_tipo = t.codigo
				where d.codigo = %s
				""" % int(datointerno)
				cu.execute(str(sql))
				row = fetchone(cu)
				self.documentosrecibo[int(datointerno)] = (float(row[0]), str(row[1]), row[2])
			cu.close()
			self.FillListCtrlRecibos()
			self.FillListCtrlDocumentos(recibo = True)
			
	def OnEliminarDocumento(self, evt):
		if len(self.datointernorecibo) > 0:
			for datointerno in self.datointernorecibo:
				if self.documentosrecibo.has_key(datointerno):
					self.documentosrecibo.pop(datointerno)
			self.FillListCtrlRecibos()
			self.FillListCtrlDocumentos(recibo = True)
			
	def OnEditarRecibo(self, evt):
		if self.datointerno:
			dlg = wx.TextEntryDialog(self, u"Digite el Importe", u"Importe a Pagar del Documento %s"
				                 % self.datointerno, defaultValue = "", style = wx.OK)
			dlg.SetSize(wx.Size(350,-1))
			dlg.Centre(wx.BOTH)
			dlg.ShowModal()
			importe = dlg.GetValue()
			dlg.Destroy()
			if importe:
				fechavencimiento = self.documentosrecibo[int(self.datointerno)][1]
				relacion = self.documentosrecibo[int(self.datointerno)][2]
				self.documentosrecibo[int(self.datointerno)] = (float(importe), fechavencimiento, relacion)
				self.FillListCtrlRecibos()

	def OnAplicarRecibo(self, evt):
		if Mensajes().YesNo(self, u"� Desea realmente generar y aplicar el recibo ?", u"Confirmaci�n"):
			todobien = False
			sql = "exec dbo.NumeroReciboDesSP %s" % self.desarrollo
			cu = r_cngcmex.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			if row is not None:
				self.numerorecibo = int(row[0])
				sql = "exec dbo.NumeroReciboSP"
				cu.execute(str(sql))
				row = fetchone(cu)
				if row is not None:
					self.consecutivorecibo = int(row[0])
					encabezado = u"Detalle del Recibo %s - Id %s:" % (self.numerorecibo, self.consecutivorecibo)
					self.GetControl(ID_TEXTRECIBOPAGOPINARESFUNC3RECIBO).SetLabel(encabezado)
					try:
						fechadia, fechames, fechaano = self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3FECHARECIBO).GetValue().split("/")
						fecharecibo = "%s/%02d/%02d" % (int(str(fechaano)), int(str(fechames)), int(str(fechadia)))
						abonocapital = self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3RECIBOPAGO).GetValue()
						moratorios = self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3RECIBOMORATORIOS).GetValue()
						totalrecibo = self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3RECIBOTOTAL).GetValue()
						referencia = self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3RECIBOREFERENCIA).GetValue().encode("iso8859-1")
						for documento, datos in self.documentosrecibo.iteritems():
							sql = "exec dbo.InsertarMovimientoSP %s, '%s', '%s', %s, %s, %s, '%s', '%s'" % \
							    (datos[0], fecharecibo, "A", documento, 4, self.consecutivorecibo,
							     datos[2], datos[1])
							cu.execute(str(sql))
							sql = "exec dbo.AbonaDocyCtaSP %s, %s" % (documento, datos[0])
							cu.execute(str(sql))
						sql = "exec dbo.InsertarReciboSP %s, '%s', %s, %s, %s, '%s', %s" % \
					            (self.numerorecibo, str(fecharecibo), float(abonocapital.replace(",","")),
					             float(moratorios.replace(",","")), float(totalrecibo.replace(",","")),
					             str(referencia), int(self.desarrollo))
						cu.execute(str(sql))
						todobien = True
					except:
						Mensajes().Info(self, u"� Revise la fecha del recibo !", u"Atenci�n")
				else:
					Mensajes().Error(self, u"� Problemas con RECIBOS (Id) !", u"Error, Petici�n Abortada")
			else:
				Mensajes().Error(self, u"� Problemas con RECIBOS (Des) !", u"Error, Petici�n Abortada")
					
			cu.close()
			if todobien:
				r_cngcmex.commit()
				if Mensajes().YesNo(self, u"Recibo: %s - Id: %s\n\n� Desea imprimir el recibo ?" % \
			                            (self.numerorecibo, self.consecutivorecibo), 
			                            u"Recibo Generado y Aplicado"):
					self.ImprimeRecibo()
					
				self.LimpiaRecibo()
				self.FillListCtrlDocumentos()
			else:
				try:
					r_cngcmex.rollback()
				except:
					pass
				
	def ImprimeRecibo(self):
		try:
			pisa
		except:
			Mensajes().Info(self, u"� Por favor instale el m�dulo pisa !", u"Aviso")
			return
		try:
			gridcontenthtml = self.GetHtmlReciboFromGrid(consecutivorecibo = self.consecutivorecibo)
			if gridcontenthtml:
				wx.BeginBusyCursor()
				archivo = self.GetPdfFileName("recibo")
				gridcontenthtml = gridcontenthtml.encode("utf-8")
				pdf = pisa.CreatePDF(cStringIO.StringIO(gridcontenthtml), file(archivo, "wb"))
				if not pdf.err:
					try:
						pdf.dest.close()
					except:
						warnings.warn("<<pdf.dest.close() no se pudo.>>")
					try:
						os.startfile(str(archivo))
					except:
						os.system("open %s" % archivo)
				wx.EndBusyCursor()
			else:
				Mensajes().Info(self, u"� No se encontr� informaci�n referente al recibo !", u"Atenci�n")
		except:
			wx.EndBusyCursor()
			Mensajes().Info(self, u"� Se presento un problema al generar el recibo !", u"Atenci�n")
		
	def GetHtmlReciboFromGrid(self, consecutivorecibo = 0):
		sql = """
		select convert(varchar(10), r.fechaemision, 103), r.abonocapital, r.interesmoratorio, r.totalrecibo, r.referencia,
		r.consdesarrollo, convert(varchar(10), r.fechaaplicacion, 103), c.codigo, c.fk_inmueble, c.fk_cliente, c.saldo,
		i.iden1, i.iden2, e.nombre, t.descripcion
		from RECIBO r
		join MOVIMIENTO m on m.numrecibo = r.codigo
		join DOCUMENTO d on d.codigo = m.fk_documento
		join CUENTA c on c.codigo = d.fk_cuenta
		join INMUEBLE i on i.codigo = c.fk_inmueble
		join CLIENTE e on e.codigo = c.fk_cliente
		join ETAPA t on t.codigo = i.fk_etapa
		where r.codigo = %s
		""" % consecutivorecibo
		cu = r_cngcmex.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row is not None:
			a = u"�"; e = u"�"; i = u"�"; o = u"�"; u = u"�"
			meses = ("", "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto",
			         "Septiembre", "Octubre", "Noviembre", "Diciembre")
			dia, mes, ano = row[0].split("/")
			fechaemision = "%s %s, %s" % (meses[int(mes)], dia, ano)
			abonocapital = float(row[1]); interesmoratorio = float(row[2]); totalrecibo = float(row[3])
			referencia = self.GetString(row[4]); consdesarrollo = int(row[5])
			fechaaplicacion = "X"
			if row[6]:
				dia, mes, ano = row[6].split("/")
				fechaaplicacion = "%s %s, %s" % (meses[int(mes)], dia, ano)
			cuenta = int(row[7]); inmueble = int(row[8]); cliente = int(row[9]); saldo = float(row[10])
			idinmueble = "%s %s - %s" % (self.GetString(row[11]), self.GetString(row[12]), self.GetString(row[14]))
			nombrecliente = self.GetString(row[13])
			aux = saldo + abonocapital
			saldoactual = str(amount_and_cents_with_commas(aux))
			saldoposterior = str(amount_and_cents_with_commas(saldo))
			abonocapital = str(amount_and_cents_with_commas(abonocapital))
			interesmoratorio = str(amount_and_cents_with_commas(interesmoratorio))
			totalrecibo = str(amount_and_cents_with_commas(totalrecibo))
			
			header = """
			<table
			 style="width: 993px; height: 200px; text-align: left; margin-left: auto; margin-right: auto;"
			 border="0" cellpadding="2" cellspacing="2">
			  <tbody>
			    <tr>
			      <td style="text-align: center;">
			      <IMG SRC="images/LogoPinares2009.jpg" NAME="Logo" ALIGN=LEFT WIDTH=213 HEIGHT=160 BORDER=0>
			      </td>
			      <td style="text-align: center;"><big><big><span
			 style="font-weight: bold;"><big>Arcadia Promotora, S. de R.L. de C.V.</big></span><br>
			      </big><big style="font-weight: bold;"><big><small><small>R.F.C.
			APR-910816-FJ3</small></small></big></big></big></td>
			    </tr>
			  </tbody>
			</table>
			<div style="text-align: right;"><big><big>&nbsp;<span
			 style="font-weight: bold;">RECIBO:&nbsp;""" + str(consdesarrollo) + """</span></big></big><br>
			</div>
			<hr style="width: 100%; height: 2px;">
			<table style="text-align: left; width: 985px; height: 82px; margin-left: auto; margin-right: auto;"
			border="0" cellpadding="2" cellspacing="2">
			  <tbody>
			    <tr>
			      <td></td>
			      <td style="text-align: right; width: 190px;"><big>Cuenta:</big></td>
			      <td style="text-align: left; font-weight: bold; width: 183px;"><big>""" + str(cuenta) + """</big></td>
			      <td style="text-align: right; width: 219px;"><big>Fecha de Aplicaci""" + o + """n:</big></td>
			      <td style="font-weight: bold; width: 357px;"><big>""" + fechaaplicacion + """</big></td>
			      <td></td>
			    </tr>
			    <tr>
			      <td></td>
			      <td style="text-align: right; width: 190px;"><big>Inmueble:</big></td>
			      <td style="text-align: left; font-weight: bold; width: 183px;"><big>""" + str(inmueble) + """</big></td>
			      <td style="text-align: right; width: 219px;"><big>Id. del Inmueble:</big></td>
			      <td style="font-weight: bold; width: 357px"><big>""" + idinmueble + """</big></td>
			      <td></td>
			    </tr>
			    <tr>
			      <td></td>
			      <td style="text-align: right; width: 190px;"><big>Cliente:</big></td>
			      <td style="text-align: left; font-weight: bold; width: 183px;"><big>""" + str(cliente) + """</big></td>
			      <td style="text-align: right; width: 219px;"><big>Fecha de Pago:</big></td>
			      <td style="font-weight: bold; width: 357px"><big>""" + fechaemision + """</big></td>
			      <td></td>
			    </tr>
			  </tbody>
			</table>
			<br>
			<big>Nombre del Cliente: <span style="font-weight: bold;">""" + nombrecliente + """</span></big><br>
			<br>
			<div style="text-align: center;"><big>Saldo Actual:<span style="font-weight: bold;"> $""" + saldoactual + """</span>
			&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Saldo
			Posterior al Pago:<span style="font-weight: bold;">
			$""" + saldoposterior + """</span></big><br>
			</div>
			<hr style="height: 1px; width: 100%;" noshade="noshade">
			<div style="text-align: right;"><span
			 style="font-weight: bold; font-style: italic;"></span><span
			 style="font-weight: bold; font-style: italic;"></span><span
			 style="font-style: italic;"><span
			 style="font-weight: bold;">Movimiento&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp; &nbsp;&nbsp;&nbsp; Importe</span></span>&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp; <span
			 style="font-style: italic;"><span
			 style="font-weight: bold;">Mensualidad&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Mes a
			Pagar&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;</span></span>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span
			 style="font-style: italic;"><span
			 style="font-weight: bold;">&nbsp;&nbsp;&nbsp;&nbsp;
			Documento</span></span><br>
			<span style="font-style: italic;"><span
			 style="font-weight: bold;"></span></span></div>
			<span style="font-style: italic;"><span
			 style="font-weight: bold;"></span></span>
			<hr style="width: 100%; height: 2px;">
			"""
			
			sql = """
			select codigo, cantidad, relaciondepago, convert(varchar(10), fechavencimientodoc, 103), fk_documento
			from MOVIMIENTO
			where cargoabono = 'A' and fk_tipo = 4 and numrecibo = %s
			order by fechavencimientodoc
			""" % consecutivorecibo
			cu = r_cngcmex.cursor()
			cu.execute(str(sql))
			rows = fetchall(cu)
			cu.close()
			detail = ""; detaillines = 15; cont = 0
			if rows:
				for cont, row in enumerate(rows):
					movimiento = str(row[0])
					importe = str(amount_and_cents_with_commas(row[1]))
					mensualidad = self.GetString(row[2])
					mesapagar = str(row[3])
					documento = str(row[4])
					line = """
					<table
					 style="text-align: left; margin-left: auto; margin-right: auto; width: 990px; height: 20px;"
					 border="0" cellpadding="2" cellspacing="2">
					  <tbody>
					    <tr>
					      <td style="width: 200px; text-align: right;"><big>""" + movimiento + """</big></td>
					      <td style="text-align: right;"><big>""" + importe + """</big></td>
					      <td style="text-align: center;"><big>""" + mensualidad + """</big></td>
					      <td style="text-align: center;"><big>""" + mesapagar + """</big></td>
					      <td style="text-align: right;"><big>""" + documento + """</big></td>
					    </tr>
					  </tbody>
					</table>
					"""
					detail += line
					
			if cont > 7: detaillines -= 1
			for aux in range(cont, detaillines):
				detail += "<br>"

			footer = """
			<big><br>
			</big><big>
			</big><big></big>
			<table
			 style="width: 981px; height: 76px; text-align: left; margin-left: auto; margin-right: 0px;"
			 border="0" cellpadding="2" cellspacing="2">
			  <tbody>
			    <tr>
			      <td></td>
			      <td></td>
			      <td></td>
			      <td style="text-align: right;"><big>Pago a Capital:</big></td>
			      <td style="text-align: right;"><big><span
			 style="font-weight: bold;">$""" + abonocapital + """</span></big></td>
			    </tr>
			    <tr>
			      <td></td>
			      <td></td>
			      <td></td>
			      <td style="text-align: right;"><big>Intereses Moratorios:</big></td>
			      <td style="text-align: right;"><big><span
			 style="font-weight: bold;">""" + interesmoratorio + """</span></big></td>
			    </tr>
			    <tr>
			      <td></td>
			      <td></td>
			      <td></td>
			      <td style="text-align: right;"><big>Total a Pagar:</big></td>
			      <td style="text-align: right;"><big><span
			 style="font-weight: bold;">$""" + totalrecibo + """</span></big></td>
			    </tr>
			  </tbody>
			</table>
			<big><span style="font-weight: bold;">
			</span></big>
			<hr style="width: 100%; height: 2px;"><big>Referencia:
			<span style="font-weight: bold;">""" + referencia + """</span><br>
			</big>
			<div style="text-align: right;"><big>Id. del Recibo:
			<span style="font-weight: bold;">""" + str(consecutivorecibo) + """</span></big><br>
			</div>
			<span style="font-style: italic;"><span
			 style="font-weight: bold;"><big>&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;</big>Firma del Cajero</span></span><br>
			<hr style="width: 100%; height: 2px;"><span
			 style="font-weight: bold;">Observaciones:</span><br>
			1) El pago deber""" + a + """ hacerse con deposito bancario seg""" + u + """n la referencia que
			le corresponda a su terreno.<br>
			2) El horario de oficina es de 9:00 a 14:00 y de 16:00 a 18:30 horas de
			Lunes a Viernes.<br>
			3) Si el d""" + i + """a de vencimiento es inh""" + a + """bil bancario, el pago deber""" + a + """ hacerse
			el d""" + i + """a h""" + a + """bil inmediato anterior.<br>
			4) Los intereses moratorios se calculan a la fecha de corte de """ + e + """ste
			estado de cuenta.<br>
			5) El presente estado de cuenta solo ser""" + a + """ valido como recibo si
			presenta la firma del cajero.<br>
			6)
			Favor de pagar con cheque cruzado a nombre de Arcadia Promotora, S. de
			R.L. de C.V. y """ + e + """ste recibo causar""" + a + """ efecto salvo buen cobro del cheque.<br>
			<hr style="width: 100%; height: 2px;">&nbsp;<span
			 style="font-style: italic; font-weight: bold;"></span><span
			 style="font-style: italic; font-weight: bold;"></span>
			"""
			
			html = '<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /></head><body>' + \
			     header + detail + footer + '</body></html>'
			return html
		else:
			return ""
				
	def OnFechaRecibo(self, evt):
		ctrl = self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3FECHARECIBO)
		fechadeposito = ctrl.GetValue()
		if fechadeposito:
			try:
				fechadia, fechames, fechaano = fechadeposito.split("/")
				fecharecibo = "%s/%02d/%02d" % (fechaano, int(fechames), int(fechadia))
			except:
				ctrl.SetValue("")
		self.FillListCtrlRecibos()
					
	def OnMoratorios(self, evt):
		try:
			pago = self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3RECIBOPAGO).GetValue()
			moratorios = self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3RECIBOMORATORIOS).GetValue()
			if not moratorios:
				moratorios = 0
			total = float(pago.replace(",","")) + float(moratorios.replace(",",""))
			self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3RECIBOTOTAL).SetValue(str(amount_and_cents_with_commas(total)))
		except:
			self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3RECIBOMORATORIOS).SetValue("")
			
	def OnRecalcularMoratorios(self, evt):
		self.FillListCtrlRecibos()
			
	def OnSelectedRecibo(self, evt):
		currentitem = evt.m_itemIndex
		self.datointerno = self.GetControl(ID_LISTCTRLRECIBOPAGOPINARESFUNC3RECIBO).GetItem(currentitem, 0).GetText()
		self.currentitemrecibo.append(currentitem)
		self.datointernorecibo.append(int(self.datointerno))
		self.GetControl(ID_BITMAPBUTTONRECIBOPAGOPINARESFUNC3ELIMINARDOCUMENTO).Enable(True)
		self.GetControl(ID_BITMAPBUTTONRECIBOPAGOPINARESFUNC3EDITAR).Enable(True)
		
	def OnDeselectedRecibo(self, evt):
		self.currentitemrecibo = []
		self.datointernorecibo = []
		self.datointerno = 0
		self.GetControl(ID_BITMAPBUTTONRECIBOPAGOPINARESFUNC3ELIMINARDOCUMENTO).Enable(False)
		self.GetControl(ID_BITMAPBUTTONRECIBOPAGOPINARESFUNC3EDITAR).Enable(False)
	
	def FillListCtrlRecibos(self):
		lctrl = self.GetControl(ID_LISTCTRLRECIBOPAGOPINARESFUNC3RECIBO)
		lctrl.ClearAll()
		cu = r_cngcmex.cursor()
		cu.execute(str("select top 1 porcentaje from CPP order by fecha desc"))
		row = fetchone(cu)
		cpp = float(row[0])
		fechadeposito = self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3FECHARECIBO).GetValue()
		if fechadeposito:
			try:
				fechadia, fechames, fechaano = fechadeposito.split("/")
				fechadeposito = "%s/%02d/%02d" % (fechaano, int(fechames), int(fechadia))
				query = """
				select codigo, convert(varchar(10), fechadevencimiento, 103),
				saldo, datediff(day, fechadevencimiento, '%s'),
				convert(varchar(10), fechadevencimiento, 111), '%s' from DOCUMENTO
				where fk_cuenta = %s and saldo > 0 order by fechadevencimiento, codigo
				""" % (str(fechadeposito), str(fechadeposito), self.cuenta)
			except:
				query = """
				select codigo, convert(varchar(10), fechadevencimiento, 103),
				saldo, datediff(day, fechadevencimiento, getdate()),
				convert(varchar(10), fechadevencimiento, 111),
				convert(varchar(10), getdate(), 111) from DOCUMENTO
				where fk_cuenta = %s and saldo > 0 order by fechadevencimiento, codigo
				""" % self.cuenta
		else:
			query = """
			select codigo, convert(varchar(10), fechadevencimiento, 103),
			saldo, datediff(day, fechadevencimiento, getdate()),
			convert(varchar(10), fechadevencimiento, 111),
			convert(varchar(10), getdate(), 111) from DOCUMENTO
			where fk_cuenta = %s and saldo > 0 order by fechadevencimiento, codigo
			""" % self.cuenta
			
		sqlx = query.replace('\t', ' ')
		sql = sqlx.replace('\n', ' ')
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		fila, totpago, totmoratorios, tottotal = 0, 0, 0, 0
		if rows:
			lctrl.InsertColumn(0, u"Id", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"Vencimiento", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(2, u"Saldo", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(3, u"Moratorios", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(4, u"A Pagar", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(5, u"Referencia", wx.LIST_FORMAT_CENTER)
			wx.BeginBusyCursor()
			for row in rows:
				if int(row[0]) in self.documentosrecibo:
					if fila %2 != 0: bgcolor = [248,181,68]
					else:            bgcolor = [251,212,146]
					
					index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
					lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
					moratorios = (((((cpp / 100) * 2) / 360) * int(row[3])) * float(row[2]))
					if moratorios < 0 or str(row[4]) >= str(row[5]):
						moratorios = 0
						
					lctrl.SetStringItem(index, 0, str(row[0]))
					lctrl.SetStringItem(index, 1, str(row[1]))
					lctrl.SetStringItem(index, 2, str(amount_and_cents_with_commas(row[2])))
					lctrl.SetStringItem(index, 3, str(amount_and_cents_with_commas(moratorios)))
					lctrl.SetStringItem(index, 4, str(amount_and_cents_with_commas(self.documentosrecibo[int(row[0])][0]+moratorios)))
					lctrl.SetStringItem(index, 5, str(self.documentosrecibo[int(row[0])][2]).decode("iso8859-1"))
					lctrl.SetItemData(index, row[0])
					pago = round(float(self.documentosrecibo[int(row[0])][0]), 2)
					moratorios = round(float(moratorios), 2)
					fila += 1
					totpago += pago
					totmoratorios += moratorios
					tottotal += pago + moratorios
					
			wx.EndBusyCursor()
			lctrl.SetColumnWidth(0, 60)
			lctrl.SetColumnWidth(1, 90)
			lctrl.SetColumnWidth(2, 90)
			lctrl.SetColumnWidth(3, 80)
			lctrl.SetColumnWidth(4, 90)
			lctrl.SetColumnWidth(5, wx.LIST_AUTOSIZE)
			colwidth = lctrl.GetColumnWidth(5)
			if colwidth < 90:
				lctrl.SetColumnWidth(5, 90)
		else:
			lctrl.InsertColumn(0, "       Sin Documentos", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 200)
			
		self.currentitemrecibo = []
		self.datointernorecibo = []
		sw = False
		if fila > 0:
			sw = True
			
		if self.usuario in self.specialuser:
			self.GetControl(ID_BITMAPBUTTONRECIBOPAGOPINARESFUNC3APLICAR).Enable(sw)
			
		self.GetControl(ID_BITMAPBUTTONRECIBOPAGOPINARESFUNC3RECALCULARMORATORIOS).Enable(sw)
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3RECIBOMORATORIOS).Enable(sw)
		self.GetControl(ID_BITMAPBUTTONRECIBOPAGOPINARESFUNC3ELIMINARDOCUMENTO).Enable(False)
		self.GetControl(ID_BITMAPBUTTONRECIBOPAGOPINARESFUNC3EDITAR).Enable(False)
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3RECIBOPAGO).SetValue(str(amount_and_cents_with_commas(totpago)))
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3RECIBOMORATORIOS).SetValue(str(amount_and_cents_with_commas(totmoratorios)))
		self.GetControl(ID_TEXTCTRLRECIBOPAGOPINARESFUNC3RECIBOTOTAL).SetValue(str(amount_and_cents_with_commas(tottotal)))
		
class GixPresupAnalisisCostosFunc2(wx.Dialog, GixBase):
	DicDatesAndTxt = {ID_BITMAPBUTTONPRESUPANALISISCOSTOSFUNC2FECHA : ID_TEXTCTRLPRESUPANALISISCOSTOSFUNC2FECHA}
	def __init__(self, parent, id = -1, title = u"Agregando An�lisis de Costos", pos = wx.DefaultPosition,
		     size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE, usuario = None, agregarpresupuesto = None):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.inxlst = []; self.cholst = []
		self.AgregarPresupuesto = agregarpresupuesto
		PresupAnalisisCostosFunc2(self, True)
		self.ObtenerDesarrollos()
		for v in self.DicDatesAndTxt.keys():
			self.Bind(wx.EVT_BUTTON, self.OnFechaButton, id = v )
		self.Bind(wx.EVT_CHOICE, self.OnChoiceCtrl, id = ID_CHOICEPRESUPANALISISCOSTOSFUNC2DESARROLLO)
		wx.EVT_BUTTON(self, ID_BUTTONPRESUPANALISISCOSTOSFUNC2ACEPTAR, self.OnAceptar)
		wx.EVT_BUTTON(self, ID_BUTTONPRESUPANALISISCOSTOSFUNC2CANCELAR, self.OnClose)
		wx.EVT_CLOSE(self, self.OnClose)
		self.GetControl(ID_TEXTCTRLPRESUPANALISISCOSTOSFUNC2DESCRIPCION).SetMaxLength(50)
		self.GetControl(ID_BITMAPBUTTONPRESUPANALISISCOSTOSFUNC2FECHA).SetFocus()
		
	def OnClose(self, evt):
		self.EndModal(1)
		self.Destroy()
		
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
		return dato
	
	def ObtenerDesarrollos(self):
		control = self.GetControl(ID_CHOICEPRESUPANALISISCOSTOSFUNC2DESARROLLO); control.Clear()
		sql = """
		select codigo, descripcion, ciudad, estado from DESARROLLO order by descripcion
		"""
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				desarrollo = self.GetString(row[1]) + " - " + self.GetString(row[2])
				if self.GetString(row[3]):
					desarrollo += ", " + self.GetString(row[3])
				control.Append(desarrollo, int(row[0]))
				
	def ObtenerCentrosDeCosto(self, codigodesarrollo = 0):
		lb = self.GetControl(ID_CHECKLISTBOXPRESUPANALISISCOSTOSFUNC2CENTROCOSTO); lb.Clear()
		self.inxlst, self.cholst = self.FillCentrosDeCosto(codigodesarrollo)
		if self.cholst:
			self.GetControl(ID_TEXTPRESUPANALISISCOSTOSFUNC2CENTROCOSTO).Enable(True)
			self.GetControl(ID_CHECKLISTBOXPRESUPANALISISCOSTOSFUNC2CENTROCOSTO).Enable(True)
			for inx, x in enumerate(self.cholst):
				lb.Append(x)
				#lb.Check(inx, True)
		else:
			self.GetControl(ID_TEXTPRESUPANALISISCOSTOSFUNC2CENTROCOSTO).Enable(False)
			self.GetControl(ID_CHECKLISTBOXPRESUPANALISISCOSTOSFUNC2CENTROCOSTO).Enable(False)
			
	def FillCentrosDeCosto(self, codigodesarrollo = 0):
		empresactrl = self.GetControl(ID_TEXTPRESUPANALISISCOSTOSFUNC2EMPRESA)
		query = """
		select c.CentroCostoID, c.Descripcion + ' - ' + convert(varchar(7), c.CentroCostoID), e.RazonSocial
		from Desarrollo d
		join gixcentroscostos c on d.fk_empresa = c.EmpresaID
		join cont_Empresas e on c.EmpresaID = e.EmpresaID
		where d.codigo = %s order by c.Descripcion
		""" % codigodesarrollo
		inxlst = []; cholst = []; empresa = ""
		try:
			cu = r_cn.cursor()
			cu.execute(query)
			rows = fetchall(cu)
			cu.close()
			if rows:
				for row in rows:
					inxlst.append(int(row[0]))
					cholst.append(self.GetString(row[1]))
				empresa = self.GetString(row[2])
				
				if 6 not in inxlst:
					inxlst.append(6)
					cholst.append("ADMINISTRACION(ACO)")
			else:
				pass
		except:
			Mensajes().Info(self, u"� Problemas al rastrear centros de costo del desarrollo !", u"Atenci�n")
		
		self.GetControl(ID_TEXTPRESUPANALISISCOSTOSFUNC2EMPRESA).SetLabel(empresa)
		return inxlst, cholst
		
	def OnChoiceCtrl(self, evt):
		choicectrl = self.GetControl(ID_CHOICEPRESUPANALISISCOSTOSFUNC2DESARROLLO)
		choiceinxdesarrollo = choicectrl.GetSelection()
		codigodesarrollo = choicectrl.GetClientData(choiceinxdesarrollo)
		self.ObtenerCentrosDeCosto(int(codigodesarrollo))
	
	def GetFecha(self, fecha):
		fecha_dia, fecha_mes, fecha_ano = fecha.split('/')
		fecha = "%s/%02d/%02d" % (fecha_ano, int(fecha_mes), int(fecha_dia))
		return fecha
	
	def OnAceptar(self, evt):
		choiceinxdesarrollo = -1; datepickerfecha = ""
		descripcion = self.GetControl(ID_TEXTCTRLPRESUPANALISISCOSTOSFUNC2DESCRIPCION).GetValue()
		choicectrl = self.GetControl(ID_CHOICEPRESUPANALISISCOSTOSFUNC2DESARROLLO)
		choiceinxdesarrollo = choicectrl.GetSelection()
		textctrlfecha = self.GetControl(ID_TEXTCTRLPRESUPANALISISCOSTOSFUNC2FECHA).GetValue()
		lb = self.GetControl(ID_CHECKLISTBOXPRESUPANALISISCOSTOSFUNC2CENTROCOSTO)
		selecciones = []
		for inx, x in enumerate(self.cholst):
			if lb.IsChecked(inx):
				selecciones.append(self.inxlst[inx])
		if textctrlfecha:
			if descripcion:
				if choiceinxdesarrollo > -1:
					if selecciones:
						centroscosto = ""
						for cc in selecciones:
							if centroscosto:
								centroscosto += ",%s" % str(int(cc))
							else:
								centroscosto = str(int(cc))
						fecha = self.GetFecha(str(textctrlfecha))
						codigodesarrollo = choicectrl.GetClientData(choiceinxdesarrollo)
						sql = """
						insert into gixpresupanalisiscostospresupuesto
						(fecha, descripcion, codigodesarrollo, centroscosto)
						values ('%s', '%s', %s, '%s')
						""" % (fecha, descripcion, codigodesarrollo, centroscosto)
						sqlmax = "select max(idpresupuestopresup) from gixpresupanalisiscostospresupuesto"
						todobien, idpresupuestopresup = self.QueryUpdateRecord(sql, sqlmax, True)
						if todobien:
							self.AgregarPresupuesto(idpresupuestopresup)
							self.EndModal(1)
							self.Destroy()
						else:
							Mensajes().Info(self, u"� Problemas al agregar nuevo an�lisis !", u"Atenci�n")
					else:
						Mensajes().Info(self, u"� Debe elegir al menos un Centro de Costo !", u"Atenci�n")
				else:
					Mensajes().Info(self, u"� Por favor elija el Desarrollo !", u"Atenci�n")
			else:
				Mensajes().Info(self, u"� Por favor digite la Descripci�n del an�lisis !", u"Atenci�n")
		else:
			Mensajes().Info(self, u"� Por favor elija la Fecha del an�lisis !", u"Atenci�n")

class GixPresupAnalisisCostosFunc5(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Rango de Fechas para el C�lculo del Concepto", pos = wx.DefaultPosition,
		     size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE, usuario = None, concepto = None, idtotalpresup = 0):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.concepto = concepto
		self.idtotalpresup = int(idtotalpresup)
		PresupAnalisisCostosFunc5(self, True)
		self.GetControl(ID_TEXTPRESUPANALISISCOSTOSFUNC5CONCEPTO).SetLabel(self.concepto)
		wx.EVT_CLOSE(self, self.OnClose)
		self.Bind(wx.EVT_CHOICE, self.OnChoiceMesInicial, id = ID_CHOICEPRESUPANALISISCOSTOSFUNC5MESINICIAL)
		self.Bind(wx.EVT_CHOICE, self.OnChoiceMesFinal, id = ID_CHOICEPRESUPANALISISCOSTOSFUNC5MESFINAL)
		wx.EVT_BUTTON(self, ID_BUTTONPRESUPANALISISCOSTOSFUNC5ACEPTAR, self.OnAceptar)
		wx.EVT_BUTTON(self, ID_BUTTONPRESUPANALISISCOSTOSFUNC5CANCELAR, self.OnClose)
		self.ObtenerRangoFechas()
		
	def OnClose(self, evt):
		self.EndModal(1)
		self.Destroy()
		
	def HabilitaAnioInicial(self, sw):
		self.GetControl(ID_TEXTPRESUPANALISISCOSTOSFUNC5ANIOINICIAL).Enable(sw)
		self.GetControl(ID_SPINCTRLPRESUPANALISISCOSTOSFUNC5ANIOINICIAL).Enable(sw)
		if not sw:
			self.GetControl(ID_SPINCTRLPRESUPANALISISCOSTOSFUNC5ANIOINICIAL).SetValue(0)

	def HabilitaAnioFinal(self, sw):
		self.GetControl(ID_TEXTPRESUPANALISISCOSTOSFUNC5ANIOFINAL).Enable(sw)
		self.GetControl(ID_SPINCTRLPRESUPANALISISCOSTOSFUNC5ANIOFINAL).Enable(sw)
		if not sw:
			self.GetControl(ID_SPINCTRLPRESUPANALISISCOSTOSFUNC5ANIOFINAL).SetValue(0)
		
	def ObtenerRangoFechas(self):
		sql = """
		select mesinicial, anioinicial, mesfinal, aniofinal from gixpresupanalisiscostostotal
		where idtotalpresup = %s
		""" % int(self.idtotalpresup)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row is not None:
			self.GetControl(ID_CHOICEPRESUPANALISISCOSTOSFUNC5MESINICIAL).SetSelection(int(row[0]))
			self.GetControl(ID_SPINCTRLPRESUPANALISISCOSTOSFUNC5ANIOINICIAL).SetValue(int(row[1]))
			if int(row[0]): self.HabilitaAnioInicial(True)
			else: self.HabilitaAnioInicial(False)
			self.GetControl(ID_CHOICEPRESUPANALISISCOSTOSFUNC5MESFINAL).SetSelection(int(row[2]))
			self.GetControl(ID_SPINCTRLPRESUPANALISISCOSTOSFUNC5ANIOFINAL).SetValue(int(row[3]))
			if int(row[2]): self.HabilitaAnioFinal(True)
			else: self.HabilitaAnioFinal(False)
		else:
			Mensajes().Info(self, u"No se encontr� informaci�n del concepto", u"Atenci�n")
			self.Destroy()
			
	def OnChoiceMesInicial(self, evt):
		mesinicial = self.GetControl(ID_CHOICEPRESUPANALISISCOSTOSFUNC5MESINICIAL).GetSelection()
		if mesinicial: self.HabilitaAnioInicial(True)
		else: self.HabilitaAnioInicial(False)
	
	def OnChoiceMesFinal(self, evt):
		mesfinal = self.GetControl(ID_CHOICEPRESUPANALISISCOSTOSFUNC5MESFINAL).GetSelection()
		if mesfinal: self.HabilitaAnioFinal(True)
		else: self.HabilitaAnioFinal(False)
			
	def OnAceptar(self, evt):
		mesinicial = self.GetControl(ID_CHOICEPRESUPANALISISCOSTOSFUNC5MESINICIAL).GetSelection()
		anioinicial = self.GetControl(ID_SPINCTRLPRESUPANALISISCOSTOSFUNC5ANIOINICIAL).GetValue()
		mesfinal = self.GetControl(ID_CHOICEPRESUPANALISISCOSTOSFUNC5MESFINAL).GetSelection()
		aniofinal = self.GetControl(ID_SPINCTRLPRESUPANALISISCOSTOSFUNC5ANIOFINAL).GetValue()
		sql = """
		update gixpresupanalisiscostostotal
		set mesinicial = %s, anioinicial = %s, mesfinal = %s, aniofinal = %s
		where idtotalpresup = %s
		""" % (mesinicial, anioinicial, mesfinal, aniofinal, self.idtotalpresup)
		if not self.QueryUpdateRecord(sql):
			Mensajes().Info(self, u"� No se actualiz� la informaci�n del concepto !", u"Atenci�n")

		self.EndModal(1)
		self.Destroy()
		
class GixPresupAnalisisCostosFunc4(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Partidas y Movimientos que Conforman el Concepto", pos = wx.DefaultPosition,
		     size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE, usuario = None, idpresupuestopresup = 0,
	             concepto = None, idtotalpresup = 0, importeejercido = None):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.idpresupuestopresup = idpresupuestopresup
		self.concepto = concepto
		self.conceptoimporte = "%s  $ %s" % (concepto, importeejercido)
		self.idtotalpresup = idtotalpresup
		self.partidas, self.centroscosto = [], []
		self.empresaid, self.totalconcepto, self.totalegreso, self.totalingreso, self.totalpartida = 0, 0, 0, 0, 0
		PresupAnalisisCostosFunc4(self, True)
		self.ObtenerEmpresa(); self.ObtenerFiltroFechas()
		self.GetControl(ID_TEXTPRESUPANALISISCOSTOSFUNC4CONCEPTO).SetLabel(self.conceptoimporte)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnLCtrlSelected, id = ID_LISTCTRLPRESUPANALISISCOSTOSFUNC4ANALISIS)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnLCtrlDeselected, id = ID_LISTCTRLPRESUPANALISISCOSTOSFUNC4ANALISIS)
		wx.EVT_CLOSE(self, self.OnClose)
		self.GetControl(ID_TEXTCTRLPRESUPANALISISCOSTOSFUNC4IMPORTETOTAL).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLPRESUPANALISISCOSTOSFUNC4TOTALMOVIMIENTOS).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLPRESUPANALISISCOSTOSFUNC4TOTALINGRESOS).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLPRESUPANALISISCOSTOSFUNC4TOTALPARTIDA).SetBackgroundColour(wx.Colour(153,255,153))
		self.ObtenerPartidasDelAnalisis()
		self.GetControl(ID_LISTCTRLPRESUPANALISISCOSTOSFUNC4ANALISIS).SetFocus()
		
	def OnClose(self, evt):
		self.EndModal(1)
		self.Destroy()
		
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
		return dato
	
	def ObtenerFiltroFechas(self):
		sql = """
		select mesinicial, anioinicial, mesfinal, aniofinal
		from gixpresupanalisiscostostotal where idtotalpresup = %s
		""" % int(self.idtotalpresup)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		self.fechafiltroingreso, self.fechafiltroegreso = "", ""
		if row is not None:
			if int(row[0]):
				self.fechafiltroingreso = "i.fechamovto >= '%s/%02d/01'" % (int(row[1]), int(row[0]))
				self.fechafiltroegreso = "e.fechaprogramada >= '%s/%02d/01'" % (int(row[1]), int(row[0]))
			if int(row[2]):
				fechafinalingreso = "i.fechamovto <= '%s/%02d/01'" % (int(row[3]), int(row[2]))
				fechafinalegreso = "e.fechaprogramada <= '%s/%02d/01'" % (int(row[3]), int(row[2]))
				if self.fechafiltroingreso:
					self.fechafiltroingreso = "(%s and %s)" % (self.fechafiltroingreso, fechafinalingreso)
					self.fechafiltroegreso = "(%s and %s)" % (self.fechafiltroegreso, fechafinalegreso)
				else:
					self.fechafiltroingreso = "%s" % fechafinalingreso
					self.fechafiltroegreso = "%s" % fechafinalegreso
			if self.fechafiltroingreso:
				self.fechafiltroingreso = "and %s" % self.fechafiltroingreso
				self.fechafiltroegreso = "and %s" % self.fechafiltroegreso
		else:
			Mensajes().Info(self, u"No se encontr� informaci�n del concepto", u"Atenci�n")
			self.Destroy()
	
	def ObtenerEmpresa(self):
		sql = """
		select e.RazonSocial, e.EmpresaID, a.centroscosto
		from gixpresupanalisiscostospresupuesto a
		join DESARROLLO d on d.codigo = a.codigodesarrollo
		join cont_Empresas e on e.EmpresaID = d.fk_empresa
		where a.idpresupuestopresup = %s
		""" % int(self.idpresupuestopresup)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row is not None:
			empresa = self.GetString(row[0])
			if row[2]:
				self.centroscosto = row[2].split(","); self.centroscosto.sort(); centroscosto = ""
				for cc in self.centroscosto:
					if centroscosto == "": centroscosto = cc
					else: centroscosto += ", %s" % cc
				empresa += "  -  Centros de Costo: %s" % centroscosto
			self.GetControl(ID_TEXTPRESUPANALISISCOSTOSFUNC4EMPRESA).SetLabel(empresa)
			self.empresaid = int(row[1])
		else:
			self.centroscosto = []
			self.GetControl(ID_TEXTPRESUPANALISISCOSTOSFUNC4EMPRESA).SetLabel("")
			self.empresaid = 0

	def CalculaImporte(self, partidaid):
		cu = r_cn.cursor()
		sql = "select naturaleza from gixpartidasegresos where PartidaID = %s" % partidaid
		cu.execute(str(sql))
		naturaleza = str(fetchone(cu)[0])
		sql = """
		select top 1 saldoinicial + totalabonos - totalcargos
		from gixpartidasxperiodo where partidaid = %s order by partidaid, periodo desc
		""" % partidaid
		try:
			cu.execute(str(sql))
			saldopartida = fetchone(cu)
			if saldopartida:
				saldopartida = float(saldopartida[0])
				if naturaleza == "E":
					saldopartida *= -1
			else:
				saldopartida = 0
		except:
			saldopartida = 0

		cu.close()
		return saldopartida

	def ObtenerPartidasDelAnalisis(self):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLPRESUPANALISISCOSTOSFUNC4ANALISIS)
		lctrl.Enable(False); lctrl.Show(False); lctrl.ClearAll()
		sql = """
		select a.idpartidapresup, rtrim(ltrim(p.ClavePartida)), rtrim(ltrim(p.Descripcion)),
		p.Naturaleza, p.CentroCostoID, a.fkPartidaID
		from gixpresupanalisiscostospartidas a
		join gixpartidasegresos p on a.fkPartidaID = p.PartidaID
		where a.fktotalpresup = %s order by p.Descripcion, p.ClavePartida
		""" % self.idtotalpresup
		sqlx = sql.replace('\t', ' ')
		sql = sqlx.replace('\n', ' ')
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		self.partidas = []
		fila = 0
		if rows:
			lctrl.InsertColumn(0, u"Id", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"C�digo", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(2, u"Descripci�n de la Partida")
			lctrl.InsertColumn(3, u"Importe", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(4, u"Naturaleza", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(5, u"Partida Id", wx.LIST_FORMAT_CENTER)
			naturaleza = {"E":"EGRESO", "I":"INGRESO"}
			self.totalconcepto = 0
			for fila, row in enumerate(rows):
				if int(row[0]) in self.partidas:
					Mensajes().Error(self, u"Partida repetida: %s\n%s - %s" % 
					                 (int(row[0]), self.GetString(row[1]), self.GetString(row[2])), u"Atenci�n")
				else:
					importe = self.CalculaImporte(int(row[5]))
					self.totalconcepto += importe
					self.partidas.append(int(row[0]))
					if fila %2 != 0: bgcolor = [150,204,150]
					else:            bgcolor = [200,230,200]
					index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
					lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
					descripcion = self.GetString(row[2]) + " - " + str(row[4])
					lctrl.SetStringItem(index, 0, str(row[0]))
					lctrl.SetStringItem(index, 1, str(row[1]))
					lctrl.SetStringItem(index, 2, descripcion)
					lctrl.SetStringItem(index, 3, self.GetString(amount_and_cents_with_commas(importe)))
					lctrl.SetStringItem(index, 4, self.GetString(naturaleza[row[3]]))
					lctrl.SetStringItem(index, 5, str(row[5]))
					lctrl.SetItemData(index, row[0])
			lctrl.SetColumnWidth(0, 50)
			lctrl.SetColumnWidth(1, 100)
			lctrl.SetColumnWidth(2, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(3, 150)
			lctrl.SetColumnWidth(4, 90)
			lctrl.SetColumnWidth(5, 100)
			self.GetControl(ID_TEXTCTRLPRESUPANALISISCOSTOSFUNC4IMPORTETOTAL).SetValue(self.GetString(amount_and_cents_with_commas(self.totalconcepto)).rjust(30))
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Partidas", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 250)
			
		lctrl.Enable(True)
		lctrl.Show(True)
		wx.EndBusyCursor()
		
	def OnLCtrlSelected(self, evt):
		datointerno = self.GetControl(ID_LISTCTRLPRESUPANALISISCOSTOSFUNC4ANALISIS).GetItem(evt.m_itemIndex, 5).GetText()
		try:
			partidaid = int(str(datointerno).split(".")[0])
		except:
			partidaid = int(str(datointerno))
			
		self.ObtenerIngresos(partidaid); self.ObtenerEgresos(partidaid)
		self.totalpartida = self.totalingreso - self.totalegreso
		if self.totalpartida < 0:
			self.totalpartida *= -1
		self.GetControl(ID_TEXTCTRLPRESUPANALISISCOSTOSFUNC4TOTALPARTIDA).SetValue(self.GetString(amount_and_cents_with_commas(self.totalpartida)).rjust(30))
	
	def OnLCtrlDeselected(self, evt):
		self.GetControl(ID_TEXTCTRLPRESUPANALISISCOSTOSFUNC4TOTALMOVIMIENTOS).SetValue("")
		lctrl = self.GetControl(ID_LISTCTRLPRESUPANALISISCOSTOSFUNC4MOVIMIENTOS)
		lctrl.ClearAll()
		lctrl.InsertColumn(0, "", wx.LIST_FORMAT_CENTER)
		lctrl.SetColumnWidth(0, 0)
		self.GetControl(ID_TEXTCTRLPRESUPANALISISCOSTOSFUNC4TOTALINGRESOS).SetValue("")
		lctrl = self.GetControl(ID_LISTCTRLPRESUPANALISISCOSTOSFUNC4INGRESOS)
		lctrl.ClearAll()
		lctrl.InsertColumn(0, "", wx.LIST_FORMAT_CENTER)
		lctrl.SetColumnWidth(0, 0)
		self.GetControl(ID_TEXTCTRLPRESUPANALISISCOSTOSFUNC4TOTALPARTIDA).SetValue("")
		self.totalpartida, self.totalingreso, self.totalegreso = 0, 0, 0
		
	def ObtenerEgresos(self, partidaid):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLPRESUPANALISISCOSTOSFUNC4MOVIMIENTOS)
		lctrl.Enable(False); lctrl.Show(False); lctrl.ClearAll()
		self.GetControl(ID_TEXTCTRLPRESUPANALISISCOSTOSFUNC4TOTALMOVIMIENTOS).SetValue("")
		sql = """
		select e.idcheque, convert(varchar(10), e.fechaprogramada, 103), d.cantidad, e.numerochequeorigen,
		isnull(b.nombre, ''), e.concepto, e.observaciones, e.estatus, isnull(c.nombre, ''), e.devolucion
		from gixegresoschequespartidas d
		join gixegresoscheques e on d.idcheque = e.idcheque
		left join gixbeneficiarios b on e.idbeneficiario = b.idbeneficiario
		left join CLIENTE c on e.idbeneficiario = c.codigo
		where (d.partida = %s or d.subpartida1 = %s or d.subpartida2 = %s or d.subpartida3 = %s or
		d.subpartida4 = %s or d.subpartida5 = %s) and e.estatus in ('F', 'B', 'P') %s
		order by e.fechaprogramada desc, e.idcheque desc
		""" % (partidaid, partidaid, partidaid, partidaid, partidaid, partidaid, self.fechafiltroegreso)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = cu.fetchall()
		cu.close()
		fila = 0
		if rows:
			lctrl.InsertColumn(0, u"Id", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"Fecha", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(2, u"Cantidad", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(3, u"Cheque", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(4, u"Beneficiario")
			lctrl.InsertColumn(5, u"Concepto")
			lctrl.InsertColumn(6, u"Observaciones")
			self.totalegreso = 0
			for fila, row in enumerate(rows):
				self.totalegreso += float(row[2])
				if fila %2 != 0: bgcolor = "WHITE"
				else:            bgcolor = "LIGHT BLUE"
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.NamedColour(bgcolor))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, str(row[1]))
				lctrl.SetStringItem(index, 2, self.GetString(amount_and_cents_with_commas(float(row[2]))))
				lctrl.SetStringItem(index, 3, self.GetString(row[3]))
				lctrl.SetStringItem(index, 4, self.GetString(row[4]))
				lctrl.SetStringItem(index, 5, self.GetString(row[5]))
				lctrl.SetStringItem(index, 6, self.GetString(row[6]))
				lctrl.SetItemData(index, row[0])
			lctrl.SetColumnWidth(0, 50)
			lctrl.SetColumnWidth(1, 100)
			lctrl.SetColumnWidth(2, 120)
			lctrl.SetColumnWidth(3, 100)
			lctrl.SetColumnWidth(4, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(5, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(6, wx.LIST_AUTOSIZE)
			self.GetControl(ID_TEXTCTRLPRESUPANALISISCOSTOSFUNC4TOTALMOVIMIENTOS).SetValue(self.GetString(amount_and_cents_with_commas(self.totalegreso)).rjust(30))
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Egresos que Afecten la Partida", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 330)
			
		lctrl.Enable(True)
		lctrl.Show(True)
		wx.EndBusyCursor()

	def ObtenerIngresos(self, partidaid):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLPRESUPANALISISCOSTOSFUNC4INGRESOS)
		lctrl.Enable(False); lctrl.Show(False); lctrl.ClearAll()
		self.GetControl(ID_TEXTCTRLPRESUPANALISISCOSTOSFUNC4TOTALINGRESOS).SetValue("")
		sql = """
		select i.idreferenciamovto, convert(varchar(10), i.fechamovto, 103), d.cantidad,
		d.tipomovto, i.referencia, d.movimientos
		from gixingresospartidas d
		join gixbancosmovimientos i on d.idreferenciamovto = i.idreferenciamovto
		where (d.partida = %s or d.subpartida1 = %s or d.subpartida2 = %s or d.subpartida3 = %s or
		d.subpartida4 = %s or d.subpartida5 = %s) and i.eliminado = 'N' and i.clasificado = 'S' %s
		order by i.fechamovto desc, i.idreferenciamovto desc
		""" % (partidaid, partidaid, partidaid, partidaid, partidaid, partidaid, self.fechafiltroingreso)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = cu.fetchall()
		cu.close()
		fila = 0
		if rows:
			lctrl.InsertColumn(0, u"Id", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"Fecha", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(2, u"Cantidad", wx.LIST_FORMAT_RIGHT)
			lctrl.InsertColumn(3, u"Tipo", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(4, u"Referencia")
			lctrl.InsertColumn(5, u"Movimientos", wx.LIST_FORMAT_CENTER)
			self.totalingreso = 0
			for fila, row in enumerate(rows):
				if str(row[3]) == "A":
					tipo = "ABONO"
					self.totalingreso += float(row[2])
				else:
					tipo = "CARGO"
					self.totalingreso -= float(row[2])
				if fila %2 != 0: bgcolor = "WHITE"
				else:            bgcolor = "LIGHT BLUE"
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.NamedColour(bgcolor))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, str(row[1]))
				lctrl.SetStringItem(index, 2, self.GetString(amount_and_cents_with_commas(float(row[2]))))
				lctrl.SetStringItem(index, 3, self.GetString(tipo))
				lctrl.SetStringItem(index, 4, self.GetString(row[4]))
				lctrl.SetStringItem(index, 5, str(row[5]))
				lctrl.SetItemData(index, row[0])
			lctrl.SetColumnWidth(0, 50)
			lctrl.SetColumnWidth(1, 100)
			lctrl.SetColumnWidth(2, 120)
			lctrl.SetColumnWidth(3, 100)
			lctrl.SetColumnWidth(4, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(5, 100)
			self.GetControl(ID_TEXTCTRLPRESUPANALISISCOSTOSFUNC4TOTALINGRESOS).SetValue(self.GetString(amount_and_cents_with_commas(self.totalingreso)).rjust(30))
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Ingresos que Afecten la Partida", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 330)
			
		lctrl.Enable(True)
		lctrl.Show(True)
		wx.EndBusyCursor()

class GixPresupAnalisisCostosFunc3(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Configuraci�n de las Partidas del Concepto", pos = wx.DefaultPosition,
		     size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE, usuario = None, idpresupuestopresup = 0,
	             concepto = None, idtotalpresup = 0):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.parent = parent
		self.idpresupuestopresup = idpresupuestopresup
		self.concepto = concepto
		self.idtotalpresup = idtotalpresup
		self.partidas, self.centroscosto = [], []
		self.empresaid, self.ultimo, self.partidaid, self.idpartidapresup = 0, 0, 0, 0
		self.SubpartidasDict = {}    # para no repetir la carga
		self.VengoDelSelect = False
		PresupAnalisisCostosFunc3(self, True)
		self.ObtenerEmpresa()
		self.GetControl(ID_TEXTPRESUPANALISISCOSTOSFUNC3CONCEPTO).SetLabel(concepto)
		self.tree = self.GetControl(ID_TREECTRLPRESUPANALISISCOSTOSFUN3PARTIDAS)
		self.tree.Bind(wx.EVT_TREE_ITEM_EXPANDING, self.OnExpanding)
		self.tree.Bind(wx.EVT_TREE_SEL_CHANGED, self.OnSelChanged)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONPRESUPANALISISCOSTOSFUN3AGREGAR, self.OnAgregarPartida)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONPRESUPANALISISCOSTOSFUN3REMOVER, self.OnRemoverPartida)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnLCtrlSelected, id = ID_LISTCTRLPRESUPANALISISCOSTOSFUN3ANALISIS)
		self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnLCtrlDeselected, id = ID_LISTCTRLPRESUPANALISISCOSTOSFUN3ANALISIS)

		wx.EVT_CLOSE(self, self.OnClose)
		self.ObtenerPartidasDelAnalisis()
		if self.centroscosto:
			self.ObtenerPartidasDisponibles()
			
		self.GetControl(ID_TREECTRLPRESUPANALISISCOSTOSFUN3PARTIDAS).SetFocus()
		
	def OnClose(self, evt):
		self.EndModal(1)
		self.Destroy()
		
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
		return dato
	
	def ObtenerEmpresa(self):
		sql = """
		select e.RazonSocial, e.EmpresaID, a.centroscosto
		from gixpresupanalisiscostospresupuesto a
		join DESARROLLO d on d.codigo = a.codigodesarrollo
		join cont_Empresas e on e.EmpresaID = d.fk_empresa
		where a.idpresupuestopresup = %s
		""" % int(self.idpresupuestopresup)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row is not None:
			empresa = self.GetString(row[0])
			if row[2]:
				self.centroscosto = row[2].split(","); self.centroscosto.sort(); centroscosto = ""
				for cc in self.centroscosto:
					if centroscosto == "": centroscosto = cc
					else: centroscosto += ", %s" % cc
				empresa += "  -  Centros de Costo: %s" % centroscosto
			self.GetControl(ID_TEXTPRESUPANALISISCOSTOSFUNC3EMPRESA).SetLabel(empresa)
			self.empresaid = int(row[1])
		else:
			self.centroscosto = []
			self.GetControl(ID_TEXTPRESUPANALISISCOSTOSFUNC3EMPRESA).SetLabel("")
			self.empresaid = 0
			
	def OnAgregarPartida(self, evt):
		sql = """
		select idpartidapresup from gixpresupanalisiscostospartidas where fktotalpresup = %s and fkPartidaID = %s
		""" % (self.idtotalpresup, self.partidaid)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row is not None:
			Mensajes().Info(self, u"� La partida que desea agregar al an�lisis ya existe !", u"Atenci�n")
		else:
			sql = """
			insert into gixpresupanalisiscostospartidas (fktotalpresup, fkPartidaID) values (%s, %s)
			""" % (self.idtotalpresup, self.partidaid)
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"� No se agrego la partida al an�lisis !", u"Atenci�n")
			else:
				self.ObtenerPartidasDelAnalisis()
	
	def OnRemoverPartida(self, evt):
		sql = """
		delete from gixpresupanalisiscostospartidas where idpartidapresup = %s
		""" % self.idpartidapresup
		try:
			cu = r_cn.cursor()
			cu.execute(str(sql))
			cu.close()
			r_cn.commit()
			self.ObtenerPartidasDelAnalisis()
		except:
			r_cn.rollback()
			Mensajes().Info(self, u"� No se removio la partida del an�lisis !", u"Atenci�n")
			
	def ObtenerPartidasDelAnalisis(self):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLPRESUPANALISISCOSTOSFUN3ANALISIS)
		lctrl.Enable(False); lctrl.Show(False); lctrl.ClearAll()
		sql = """
		select a.idpartidapresup, rtrim(ltrim(p.ClavePartida)), rtrim(ltrim(p.Descripcion)), p.Naturaleza, p.CentroCostoID
		from gixpresupanalisiscostospartidas a
		join gixpartidasegresos p on a.fkPartidaID = p.PartidaID
		where a.fktotalpresup = %s order by p.CentroCostoID, p.ClavePartida
		""" % self.idtotalpresup
		sqlx = sql.replace('\t', ' ')
		sql = sqlx.replace('\n', ' ')
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		self.partidas = []
		fila = 0
		if rows:
			lctrl.InsertColumn(0, u"Id", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"C�digo", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(2, u"Descripci�n")
			lctrl.InsertColumn(3, u"Naturaleza", wx.LIST_FORMAT_CENTER)
			naturaleza = {"E":"EGRESO", "I":"INGRESO"}
			for row in rows:
				if int(row[0]) in self.partidas:
					Mensajes().Error(self, u"Partida repetida: %s\n%s - %s" % 
					                 (int(row[0]), self.GetString(row[1]), self.GetString(row[2])), u"Atenci�n")
				else:
					self.partidas.append(int(row[0]))
					if fila %2 != 0: bgcolor = [204,204,255]
					else:            bgcolor = [230,230,255]
					index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
					lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
					descripcion = self.GetString(row[2]) + " - " + str(row[4])
					lctrl.SetStringItem(index, 0, str(row[0]))
					lctrl.SetStringItem(index, 1, str(row[1]))
					lctrl.SetStringItem(index, 2, descripcion)
					lctrl.SetStringItem(index, 3, self.GetString(naturaleza[row[3]]))
					lctrl.SetItemData(index, row[0])
					fila += 1
			lctrl.SetColumnWidth(0, 50)
			lctrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(2, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(3, 90)
		else:
			lctrl.InsertColumn(0, "       No se Encontraron Partidas", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 200)
		lctrl.Enable(True)
		lctrl.Show(True)
		self.currentitem, self.consecutivorecibo = 0, 0
		self.GetControl(ID_BITMAPBUTTONPRESUPANALISISCOSTOSFUN3REMOVER).Enable(False)
		wx.EndBusyCursor()
		
	def OnLCtrlSelected(self, evt):
		lctrl = self.GetControl(ID_LISTCTRLPRESUPANALISISCOSTOSFUN3ANALISIS)
		datointerno = lctrl.GetItem(evt.m_itemIndex, 0).GetText()
		try:
			self.idpartidapresup = int(str(datointerno).split(".")[0])
		except:
			self.idpartidapresup = int(str(datointerno))
			
		self.GetControl(ID_BITMAPBUTTONPRESUPANALISISCOSTOSFUN3REMOVER).Enable(True)

	def OnLCtrlDeselected(self, evt):
		self.idpartidapresup = 0
		self.GetControl(ID_BITMAPBUTTONPRESUPANALISISCOSTOSFUN3REMOVER).Enable(False)

	def ObtenerPartidasDisponibles(self):
		wx.BeginBusyCursor()
		tree = self.tree
		self.filtronaturaleza = ""
		if len(self.centroscosto) == 1:
			ccfiltro = "= %s" % self.centroscosto[0]
		else:
			ccfiltro = "in %s" % str(tuple(map(int, self.centroscosto)))
		sql = """
		select e.EmpresaID, e.RazonSocial, c.CentroCostoID, c.Descripcion, p.PartidaID, p.ClavePartida,
		p.Descripcion, p.HijaDePartidaID, p.Afectable, p.naturaleza from gixpartidasegresos p
		join gixcentroscostos c on p.CentroCostoID = c.CentroCostoID and p.EmpresaID = c.EmpresaID
		join cont_Empresas e on p.EmpresaID = e.EmpresaID where p.HijaDePartidaID is null and
		p.EmpresaID in (%s, 9) and p.CentroCostoID %s %s order by 2,4,7
		""" % (self.empresaid, ccfiltro, self.filtronaturaleza)
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		rows = fetchall(cursor)
		cursor.close()
		if rows:
			tree.DeleteAllItems()
			isz = (16,16)
			il = wx.ImageList(16,16)
			self.fldridx     = il.Add(wx.ArtProvider.GetBitmap(wx.ART_FOLDER,      wx.ART_OTHER, isz))
			self.fldropenidx = il.Add(wx.ArtProvider.GetBitmap(wx.ART_FILE_OPEN,   wx.ART_OTHER, isz))
			self.fileidx     = il.Add(wx.ArtProvider.GetBitmap(wx.ART_NORMAL_FILE, wx.ART_OTHER, isz))
			self.filesel     = il.Add(wx.ArtProvider.GetBitmap(wx.ART_FIND,        wx.ART_OTHER, isz))
			tree.AssignImageList(il)
			root = tree.AddRoot("EMPRESAS")
			tree.SetItemImage(root, self.fldridx, wx.TreeItemIcon_Normal)
			tree.SetItemImage(root, self.fldropenidx, wx.TreeItemIcon_Expanded)
			tree.SetPyData(root, None)
			prevEmpresa = ""
			prevCentroCosto = ""
			for row in rows:
				laempresa = self.GetStringFromField(row[1])
				elcentrocosto = self.GetStringFromField(row[3]) + " - " + str(int(row[2]))
				lapartida = self.GetStringFromField(row[6]) #+ " - " + str(int(row[4])) #self.GetStringFromField(row[9])
				if laempresa != prevEmpresa:
					empresas = tree.AppendItem( root, "%s" % laempresa)
					#tree.SetItemBold(empresas)
					tree.SetItemTextColour(empresas, wx.BLUE)
					tree.SetPyData(empresas, "E%s" % row[0])
					tree.SetItemImage(empresas, self.fldridx, wx.TreeItemIcon_Normal)
					tree.SetItemImage(empresas, self.fldropenidx, wx.TreeItemIcon_Expanded)
					prevEmpresa = laempresa
					self.empresa = empresas
					
				if elcentrocosto != prevCentroCosto:
					centroscostos = tree.AppendItem( empresas, "%s" % elcentrocosto)
					tree.SetPyData(centroscostos, "T%s" % row[2])
					tree.SetItemImage(centroscostos, self.fldridx, wx.TreeItemIcon_Normal)
					tree.SetItemImage(centroscostos, self.fldropenidx, wx.TreeItemIcon_Expanded)
					prevCentroCosto = elcentrocosto
					
				partidas = tree.AppendItem(centroscostos, "%s" % lapartida)
				tree.SetPyData(partidas, "C%s" % str(row[4]))
				if row[4] == self.ultimo:
					self.partidamayor = partidas
				
				if row[8]:
					tree.SetItemImage(partidas, self.fileidx, wx.TreeItemIcon_Normal)
					#tree.SetItemImage(partidas, self.filesel, wx.TreeItemIcon_Selected)
				else:
					tree.SetItemImage(partidas, self.fldridx, wx.TreeItemIcon_Normal)
					tree.SetItemImage(partidas, self.fldridx, wx.TreeItemIcon_Selected)
					tree.SetItemImage(partidas, self.fldropenidx, wx.TreeItemIcon_Expanded)
					tree.SetItemImage(partidas, self.fldropenidx, wx.TreeItemIcon_SelectedExpanded)
					sqlhija = """
					select count(*) from gixpartidasegresos where HijaDePartidaID = %s
					""" % str(int(row[4]))
					cursor = r_cn.cursor()
					cursor.execute(str(sqlhija))
					rowscount = fetchone(cursor)[0]
					cursor.close()
					if rowscount:
						tree.SetItemHasChildren(partidas)
					else:
						tree.SetItemHasChildren(partidas, 0)
								
		wx.EndBusyCursor()
		item = tree.GetFirstVisibleItem()
		if item:
			tree.SelectItem(item)
			
	def OnSelChanged(self, event):
		data = self.tree.GetPyData(event.GetItem())
		ctrl = self.GetControl(ID_BITMAPBUTTONPRESUPANALISISCOSTOSFUN3AGREGAR)
		self.partidaid = 0
		if data:
			if data[0] in ("C", "S"):
				self.partidaid = int(str(data[1:]))
				ctrl.Enable(True)
			else:
				ctrl.Enable(False)
		else:
			ctrl.Enable(False)
			
	def OnExpanding(self, event):
		tree = self.tree
		item = event.GetItem()
		valor = tree.GetPyData(item)
		if valor:
			if valor[0] in ("C", "S"):
				if not self.SubpartidasDict.has_key(str(valor)):
					self.CargaDict(item, valor)
			elif valor[0] in ("T"):
				self.CentroCostoID = int(valor[1:])
			else:
				self.PartidaEmpresaID = int(valor[1:])
	
	def CargaDict(self, item, valor):
		wx.BeginBusyCursor()
		tree = self.tree
		self.SubpartidasDict[str(valor)] = True
		sql = """
		select PartidaID, ClavePartida, Descripcion, HijaDePartidaID, Afectable
		from gixpartidasegresos where HijaDePartidaID = %s order by 3
		""" % int(valor[1:])
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		rows = fetchall(cursor)
		cursor.close()
		if rows:
			for row in rows:
				lapartida = self.GetStringFromField(row[2])
				subpartidas = tree.AppendItem(item, "%s" % lapartida)
				tree.SetPyData(subpartidas, "S%s" % row[0])
				if not self.VengoDelSelect:
					tree.SelectItem(subpartidas)
				
				if row[4]:
					tree.SetItemImage(subpartidas, self.fileidx, wx.TreeItemIcon_Normal)
					#tree.SetItemImage(subcuentas, self.filesel, wx.TreeItemIcon_Selected)
				else:
					tree.SetItemImage(subpartidas, self.fldridx, wx.TreeItemIcon_Normal)
					tree.SetItemImage(subpartidas, self.fldridx, wx.TreeItemIcon_Selected)
					tree.SetItemImage(subpartidas, self.fldropenidx, wx.TreeItemIcon_Expanded)
					tree.SetItemImage(subpartidas, self.fldropenidx, wx.TreeItemIcon_SelectedExpanded)
					sqlhija = """
					select count(*) from gixpartidasegresos where HijaDePartidaID = %s
					""" % str(int(row[0]))
					cursor = r_cn.cursor()
					cursor.execute(str(sqlhija))
					rowscount = fetchone(cursor)[0]
					cursor.close()
					if rowscount:
						tree.SetItemHasChildren(subpartidas)
					else:
						tree.SetItemHasChildren(subpartidas, 0)
						
		wx.EndBusyCursor()

class GixPresupAnalisisCostos(wx.Frame, GixBase):
	ciclo = 0; intervalo = 1500; tc = []
	usuariosupdate = ("CESAR")
	ingresos = [3,4]; costos = [5,6,7,8,9,10,11,12,13,14,15,16,17]
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize,
		     style = wx.DEFAULT_FRAME_STYLE, usuario = None ):
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		self.usuario = usuario; self.idpresupuestopresup, self.rowgrid = 0, 0
		panel = wx.Panel(self, -1)
		PresupAnalisisCostosFunc1(panel, True, True)
		anchos = [-1,130]
		self.CreateStatusBar(2)
		self.SetStatusWidths(anchos)
		self.SetStatusText(u"Presupuestos", 0)
		self.SetStatusText(u"An�lisis de Costos", 1)
		if wx.Platform == '__WXMSW__':
			self.SetSize(wx.Size(940, 675))
			
		self.ObtenerDesarrollos()
		self.GetControl(ID_CHOICEPRESUPANALISISCOSTOSDESARROLLO).SetSelection(-1)
		
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONPRESUPANALISISCOSTOSAGREGAR, self.OnAgregarPresupuesto)
		#wx.EVT_BUTTON(self, ID_BITMAPBUTTONPRESUPANALISISCOSTOSGUARDAR, self.OnGuardarPresupuesto)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONPRESUPANALISISCOSTOSELIMINAR, self.OnEliminarPresupuesto)
		self.Bind(wx.EVT_CHOICE, self.OnChoiceDesarrollo, id = ID_CHOICEPRESUPANALISISCOSTOSDESARROLLO)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONPRESUPANALISISCOSTOSEXCEL, self.OnExcel)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONPRESUPANALISISCOSTOSREFRESCAR, self.OnRefrescarGrid)
		wx.EVT_BUTTON(self, ID_BUTTONPRESUPANALISISCOSTOSCALCULAR, self.OnCalcular)
		wx.EVT_BUTTON(self, ID_BUTTONPRESUPANALISISCOSTOSPARTIDAS, self.OnPartidas)
		wx.EVT_BUTTON(self, ID_BUTTONPRESUPANALISISCOSTOSDETALLE, self.OnConceptoDetalle)
		wx.EVT_CLOSE(self, lambda _: self.Destroy())
		
		self.grid = self.GetControl(ID_GRIDPRESUPANALISISCOSTOS)
		self.grid.Bind(gridlib.EVT_GRID_CELL_CHANGE, self.OnGridCellChange)
		self.grid.Bind(gridlib.EVT_GRID_SELECT_CELL, self.OnGridEvent)
		self.grid.Bind(gridlib.EVT_GRID_CELL_LEFT_DCLICK, self.OnGridDetalle)
		self.grid.Bind(gridlib.EVT_GRID_CELL_RIGHT_CLICK, self.OnGridRightClick)
		
		self.grid.SetColLabelSize(70)
		self.grid.SetRowLabelSize(0)
		
		self.GetControl(ID_CHOICEPRESUPANALISISCOSTOSDESARROLLO).SetFocus()
		
	def ObtenerDesarrollos(self):
		control = self.GetControl(ID_CHOICEPRESUPANALISISCOSTOSDESARROLLO); control.Clear()
		sql = """
		select p.idpresupuestopresup, convert(varchar(10), p.fecha, 103), p.descripcion, d.ciudad, d.estado
		from gixpresupanalisiscostospresupuesto p
		join DESARROLLO d on p.codigodesarrollo = d.codigo
		order by d.descripcion, p.fecha
		"""
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		if rows:
			for row in rows:
				desarrollo = self.GetString(row[2]) + " - " + self.GetString(row[3])
				if self.GetString(row[4]):
					desarrollo += ", " + self.GetString(row[4])
				desarrollo += " - " + self.GetString(row[1])
				control.Append(desarrollo, int(row[0]))
				
	def DespliegaDesarrollo(self, idpresupuestopresup):
		ctrl = self.GetControl(ID_CHOICEPRESUPANALISISCOSTOSDESARROLLO)
		for inx in range(0, ctrl.GetCount()):
			if idpresupuestopresup == ctrl.GetClientData(inx):
				ctrl.SetSelection(inx)
				break
			
	def HabilitaControles(self, habilita = True):
		#self.GetControl(ID_BITMAPBUTTONPRESUPANALISISCOSTOSGUARDAR).Enable(habilita)
		self.GetControl(ID_BITMAPBUTTONPRESUPANALISISCOSTOSELIMINAR).Enable(habilita)
		self.GetControl(ID_BITMAPBUTTONPRESUPANALISISCOSTOSREFRESCAR).Enable(habilita)
		self.GetControl(ID_BITMAPBUTTONPRESUPANALISISCOSTOSEXCEL).Enable(habilita)
		self.GetControl(ID_BUTTONPRESUPANALISISCOSTOSCALCULAR).Enable(habilita)
	
	def GeneraConceptos(self, idpresupuestopresup):
		sql = """
		select idconceptopresup from gixpresupanalisiscostosconcepto order by consecutivo
		"""
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		if rows:
			for row in rows:
				sql = """
				insert into gixpresupanalisiscostostotal
				(fkpresupuestopresup, fkconceptopresup, total, porcasa, porcentaje, importeejercido,
				porcentajeejercido, importeejercer) values (%s, %s, 0, 0, 0, 0, 0, 0)
				""" % (idpresupuestopresup, int(row[0]))
				if not self.QueryUpdateRecord(sql):
					Mensajes().Info(self, u"� No se grabo el registro !", u"Atenci�n")
		else:
			Mensajes().Info(self, u"� No existen conceptos para elaborar el presupuesto !", u"Atenci�n")
			
		cu.close()
		
	def AgregarPresupuesto(self, idpresupuestopresup):
		self.idpresupuestopresup = idpresupuestopresup
		self.ObtenerDesarrollos(); self.DespliegaDesarrollo(idpresupuestopresup); self.HabilitaControles()
		self.GeneraConceptos(idpresupuestopresup); self.FillGridCtrl()
		
	def OnAgregarPresupuesto(self, evt):
		dlg = GixPresupAnalisisCostosFunc2(self, usuario = self.usuario, agregarpresupuesto = self.AgregarPresupuesto)
		dlg.CenterOnScreen()
		dlg.ShowModal()
		
	def OnGuardarPresupuesto(self, evt):
		if Mensajes().YesNo(self, u"� Desea realmente guardar el presupuesto ?", u"Confirmaci�n"):
			pass
		
	def OnEliminarPresupuesto(self, evt):
		if Mensajes().YesNo(self, u"� Desea realmente eliminar el presupuesto ?", u"Confirmaci�n"):
			sqld = "delete from gixpresupanalisiscostostotal where fkpresupuestopresup = %s" % self.idpresupuestopresup
			sqlm = "delete from gixpresupanalisiscostospresupuesto where idpresupuestopresup = %s" % self.idpresupuestopresup
			eliminado = True
			try:
				cu = r_cn.cursor()
				cu.execute(str(sqld))
				cu.execute(str(sqlm))
				cu.close()
				r_cn.commit()
			except:
				r_cn.rollback()
				Mensajes().Info(self,u"Sucedi� algo que impidi� eliminar el presupuesto.\n" \
						u"Quiz� se deba a que hay otra informaci�n\nque depende del presupuesto.\n%s\n\n%s" \
						% (sqld, sqlm), u"Atenci�n")
				eliminado = False
			if eliminado:
				self.ObtenerDesarrollos()
				self.GetControl(ID_CHOICEPRESUPANALISISCOSTOSDESARROLLO).SetSelection(SetChoiceIndex())
				self.HabilitaControles(False)
				filas = self.grid.GetNumberRows(); cols = self.grid.GetNumberCols()
				if filas: self.grid.DeleteRows(0, filas)
				if cols: self.grid.DeleteCols(0, cols)
				self.GetControl(ID_CHOICEPRESUPANALISISCOSTOSDESARROLLO).SetFocus()
		
	def OnChoiceDesarrollo(self, event):
		ctrl = self.GetControl(event.GetId()); index = ctrl.GetSelection()
		if index > -1:
			self.idpresupuestopresup = ctrl.GetClientData(index)
			if not self.GetControl(ID_BITMAPBUTTONPRESUPANALISISCOSTOSREFRESCAR).IsEnabled():
				self.HabilitaControles()
			self.FillGridCtrl()
			self.GetControl(ID_GRIDPRESUPANALISISCOSTOS).SetFocus()
			
	def OnExcel(self, event):
		query = """
		select c.concepto, t.total, t.porcasa, t.porcentaje, t.importeejercido, t.porcentajeejercido, t.importeejercer
		from gixpresupanalisiscostostotal t
		join gixpresupanalisiscostosconcepto c on t.fkconceptopresup = c.idconceptopresup
		where t.fkpresupuestopresup = %s order by t.idtotalpresup
		""" % self.idpresupuestopresup
		meta = ((250, u"Concepto"), (80, u"T o t a l", wx.ALIGN_RIGHT),
			(80, u"Por Casa", wx.ALIGN_RIGHT), (80, u"%", wx.ALIGN_RIGHT),
			(80, u"Importe Ejercido", wx.ALIGN_RIGHT),
			(80, u"Porcentaje Ejercido", wx.ALIGN_RIGHT),
			(80, u"Importe por Ejercer", wx.ALIGN_RIGHT))
		tabla = "gixpresupanalisiscostostotal"; titulo = u"Presupuesto - An�lisis de Costos"
		self.DisplayGrid(tabla, meta, query, titulo)
		
	def OnRefrescarGrid(self, evt):
		self.FillGridCtrl()
		
	def StrToFloat(self, valor):
		try:
			cantidad = float(str(valor).replace(",",""))
		except:
			cantidad = float(0)
			
		return cantidad
	
	def GetString(self, valor):
		try:
			cantidad = str(valor).replace(",","")
		except:
			cantidad = valor
			
		return cantidad
	
	def PreparaQuery(self, sql):
		sqlx = sql.replace('\t', ' '); sql = sqlx.replace('\n', ' ')
		return sql
	
	def CalculaImporteEjercido(self):
		sql = """
		select t.idtotalpresup, c.concepto, t.total, t.porcasa, t.porcentaje, t.importeejercido,
		t.porcentajeejercido, t.importeejercer, c.consecutivo, t.mesinicial, t.anioinicial, t.mesfinal, t.aniofinal
		from gixpresupanalisiscostostotal t
		join gixpresupanalisiscostosconcepto c on t.fkconceptopresup = c.idconceptopresup
		where t.fkpresupuestopresup = %s and (c.consecutivo >= 2000 and c.consecutivo < 5000) order by c.consecutivo
		""" % self.idpresupuestopresup
		cu = r_cn.cursor()
		cu.execute(str(sql))
		conceptos = fetchall(cu)
		cu.close()
		if conceptos:
			for concepto in conceptos:
				fechafiltro = ""
				if int(concepto[9]):
					fechafiltro = "periodo >= '%s/%02d/01'" % (int(concepto[10]), int(concepto[9]))
				if int(concepto[11]):
					fechafinal = "periodo <= '%s/%02d/01'" % (int(concepto[12]), int(concepto[11]))
					if fechafiltro:
						fechafiltro = "(%s and %s)" % (fechafiltro, fechafinal)
					else:
						fechafiltro = "%s" % fechafinal
				if fechafiltro:
					fechafiltro = "and %s" % fechafiltro
					
				sql = "select fkPartidaID from gixpresupanalisiscostospartidas where fktotalpresup = %s" % int(concepto[0])
				cu = r_cn.cursor()
				cu.execute(str(sql))
				partidasid = fetchall(cu)
				cu.close()
				if partidasid:
					importeejercido, porcentajeejercido, importeejercer = 0,0,0
					for partidaid in partidasid:
						sql = "select naturaleza from gixpartidasegresos where PartidaID = %s" % partidaid[0]
						cu = r_cn.cursor()
						cu.execute(str(sql))
						naturaleza = str(fetchone(cu)[0])
						cu.close()
						if fechafiltro:
							sql = """
							select sum(totalabonos - totalcargos)
							from gixpartidasxperiodo where partidaid = %s %s
							""" % (partidaid[0], fechafiltro)
							#order by partidaid, periodo

						else:
							sql = """
							select top 1 saldoinicial + totalabonos - totalcargos
							from gixpartidasxperiodo where partidaid = %s
							order by partidaid, periodo desc
							""" % partidaid[0]
						try:
							cu = r_cn.cursor()
							cu.execute(str(sql))
							
							#if fechafiltro:
								#saldopartida = 0
								#periodos = fetchall(cu)
								#if periodos:
									#for periodo in periodos:
										#saldopartida += float(periodo[0])
							#else:
								#saldopartida = fetchone(cu)
								#saldopartida = float(saldopartida[0])

							saldopartida = 0
							try:
								saldopartida = fetchone(cu)
								if saldopartida[0]:
									saldopartida = float(saldopartida[0])
								else:
									saldopartida = 0
									
								cu.close()
							except:
								saldopartida = 0
								cu.close()
								
							if saldopartida:
								if naturaleza == "E":
									saldopartida *= -1
							else:
								saldopartida = 0
						except:
							saldopartida = 0
							
						importeejercido += saldopartida
						
					if concepto[2]:
						porcentajeejercido = "%.2f" % ((importeejercido * 100) / float(concepto[2]))
						
					importeejercer = float(concepto[2]) - importeejercido
						
					sql = """
					update gixpresupanalisiscostostotal
					set importeejercido = %s, porcentajeejercido = %s, importeejercer = %s
					where idtotalpresup = %s
					""" % (importeejercido, porcentajeejercido, importeejercer, int(concepto[0]))
					todook, trash = self.QueryUpdateRecord(self.PreparaQuery(sql))
					if not todook:
						Mensajes().Info(self, u"� Problemas al actualizar el an�lisis (A) !", u"Atenci�n")
				else:
					importeejercer = float(concepto[2])
					sql = """
					update gixpresupanalisiscostostotal
					set importeejercido = 0, porcentajeejercido = 0, importeejercer = %s
					where idtotalpresup = %s
					""" % (importeejercer, int(concepto[0]))
					todook, trash = self.QueryUpdateRecord(self.PreparaQuery(sql))
					if not todook:
						Mensajes().Info(self, u"� Problemas al actualizar el an�lisis (B) !", u"Atenci�n")

	def CalculaDetalle(self, calculo = True):
		formato = {3: ("INFONAVIT", "self.EnteroComas(%s)"), 4: ("CLIENTES", "amount_and_cents_with_commas(%s)")}
		totalcasas = self.StrToFloat(self.grid.GetCellValue(2, 2))
		totalingreso = self.StrToFloat(self.grid.GetCellValue(18, 2))
		totalcosto = self.StrToFloat(self.grid.GetCellValue(19, 2))
		totalporcentajecosto = 0
		if totalingreso > 0:
			totalporcentajecosto = "%.2f" % ((totalcosto / totalingreso) * 100)
		for col in range(3, 5):
			totingreso, totcosto, totutilidad = 0, 0, 0
			if col == 4:
				totingreso = 100
			for fila in range(0, 18):
				totalconcepto = self.grid.GetCellValue(fila, 2)
				if not totalconcepto or not totalconcepto.isdigit():
					totalconcepto = 0

				totalcelda = 0
				if (fila == 2) or (col == 4 and fila in (0, 1)):
					self.grid.SetCellValue(fila, col, str(""))
				elif calculo:
					if col == 3:
						if totalcasas > 0:
							totalcelda = int(round(float(totalconcepto) / float(totalcasas)))
						self.grid.SetCellValue(fila, col, str(eval(formato[col][1] % totalcelda)))
					elif fila in (3, 4):
						self.grid.SetCellValue(fila, col, str(formato[fila][0]))
					else:
						if totalcosto > 0:
							totalcelda = (float(totalconcepto) * float(totalporcentajecosto)) / float(totalcosto)
						self.grid.SetCellValue(fila, col, str(eval(formato[col][1] % totalcelda)))
				else:
					self.grid.SetCellValue(fila, col, str(0))
					
				if col == 3 and fila in self.ingresos:
					totingreso += totalcelda
				elif fila in self.costos:
					totcosto += totalcelda
					
			totutilidad = totingreso - totcosto
			self.grid.SetCellValue(18, col, str(eval(formato[col][1] % totingreso)))
			self.grid.SetCellValue(19, col, str(eval(formato[col][1] % totcosto)))
			self.grid.SetCellValue(20, col, str(eval(formato[col][1] % totutilidad)))
			
	def CalculaTotales(self):
		totingreso, totcosto, totutilidad = 0, 0, 0
		totalcasas = float(self.grid.GetCellValue(2, 2,))
		for fila in range(0, 18):
			totalconcepto = self.grid.GetCellValue(fila, 2)
			if not totalconcepto or not totalconcepto.isdigit():
				totalconcepto = 0
			if fila in self.ingresos:
				totingreso += int(totalconcepto)
			elif fila in self.costos:
				totcosto += int(totalconcepto)
				
		totutilidad = totingreso - totcosto
		self.grid.SetCellValue(18, 2, str(self.EnteroComas(totingreso)))
		self.grid.SetCellValue(19, 2, str(self.EnteroComas(totcosto)))
		self.grid.SetCellValue(20, 2, str(self.EnteroComas(totutilidad)))
		if totalcasas > 0:
			self.CalculaDetalle()
		else:
			self.CalculaDetalle(False)

		for col in (5, 7):
			totingreso, totcosto, totutilidad = 0, 0, 0
			for fila in range(0, 18):
				totalconcepto = self.GetString(self.grid.GetCellValue(fila, col))
				try:
					totalconcepto = int(totalconcepto)
				except:
					totalconcepto = 0
				if fila in self.ingresos:
					totingreso += int(totalconcepto)
					self.grid.SetCellValue(fila, col, str(self.EnteroComas(totalconcepto)))
				elif fila in self.costos:
					totcosto += int(totalconcepto)
					self.grid.SetCellValue(fila, col, str(self.EnteroComas(totalconcepto)))
					
			totutilidad = totingreso - totcosto
			self.grid.SetCellValue(18, col, str(self.EnteroComas(totingreso)))
			self.grid.SetCellValue(19, col, str(self.EnteroComas(totcosto)))
			self.grid.SetCellValue(20, col, str(self.EnteroComas(totutilidad)))
			
	def OnCalcular(self, evt):
		if Mensajes().YesNo(self, u"Al calcular el presupuesto se tomaran los saldos\n" \
		                    u"actuales de las partidas.\n\n"
		                    u"� Desea realmente calcular el presupuesto ?", u"Confirmaci�n"):
			self.CalculaImporteEjercido()
			self.FillGridCtrl()
			
	def OnPartidas(self, event):
		fila = self.grid.GetGridCursorRow(); concepto = self.grid.GetCellValue(fila, 1)
		if fila > 2 and fila < 18:
			idtotalpresup = self.grid.GetCellValue(fila, 0)
			#Mensajes().Info(self, u"Estoy en %s, id = %s" % (concepto, idtotalpresup), u"Oops")
			dlg = GixPresupAnalisisCostosFunc3(self, usuario = self.usuario, idpresupuestopresup = self.idpresupuestopresup,
			                                   concepto = concepto, idtotalpresup = idtotalpresup)
			dlg.CenterOnScreen()
			dlg.ShowModal()
		else:
			Mensajes().Info(self, u"� Seleccione un Ingreso o Costo !", u"Atenci�n")
			
	def OnGridEvent(self, event):
		self.GridEvent(event.GetRow())
		event.Skip()
		
	def GridEvent(self, row):
		self.rowgrid = row
		if row in (0,1,2,18,19,20):
			self.GetControl(ID_BUTTONPRESUPANALISISCOSTOSPARTIDAS).Enable(False)
			self.GetControl(ID_BUTTONPRESUPANALISISCOSTOSDETALLE).Enable(False)
			return False
		else:
			self.GetControl(ID_BUTTONPRESUPANALISISCOSTOSPARTIDAS).Enable(True)
			self.GetControl(ID_BUTTONPRESUPANALISISCOSTOSDETALLE).Enable(True)
			return True
			
	def OnGridCellChange(self, event):
		fila = self.grid.GetGridCursorRow(); idtotalpresup = self.grid.GetCellValue(fila, 0)
		totalconcepto = self.grid.GetCellValue(fila, 2)
		if not totalconcepto or not totalconcepto.isdigit():
			totalconcepto = 0
		if idtotalpresup.isdigit():
			#self.CalculaImporteEjercido()
			self.CalculaTotales()
			for fila in range(0, 18):
				idtotalpresup = self.grid.GetCellValue(fila, 0)
				total = self.StrToFloat(self.grid.GetCellValue(fila, 2))
				porcasa = self.StrToFloat(self.grid.GetCellValue(fila, 3))
				porcentaje = self.StrToFloat(self.grid.GetCellValue(fila, 4))
				importeejercido = self.StrToFloat(self.grid.GetCellValue(fila, 5))
				porcentajeejercido = self.StrToFloat(self.grid.GetCellValue(fila, 6))
				importeejercer = self.StrToFloat(self.grid.GetCellValue(fila, 7))
				sql = """
				update gixpresupanalisiscostostotal
				set total = %s, porcasa = %s, porcentaje = %s, importeejercido = %s, porcentajeejercido = %s, importeejercer = %s
				where idtotalpresup = %s
				""" % (float(total), float(porcasa), float(porcentaje), float(importeejercido), float(porcentajeejercido),
				       float(importeejercer), int(idtotalpresup))
				queTal, trash = self.QueryUpdateRecord(sql)
				if not queTal:
					Mensajes().Info(self, u"� El registro no fu� grabado !", u"Atenci�n")
		else:
			Mensajes().Info(self, u"� El registro no fu� grabado !", u"Atenci�n")
			
	def OnGridDetalle(self, event):
		if self.GridEvent(event.GetRow()):
			self.LanzaDetalleConcepto()
			
	def OnConceptoDetalle(self, event):
		if self.GridEvent(self.rowgrid):
			self.LanzaDetalleConcepto()
			
	def LanzaDetalleConcepto(self):
		idtotalpresup = self.grid.GetCellValue(self.rowgrid, 0); concepto = self.grid.GetCellValue(self.rowgrid, 1)
		importeejercido = self.grid.GetCellValue(self.rowgrid, 5)
		dlg = GixPresupAnalisisCostosFunc4(self, usuario = self.usuario, idpresupuestopresup = self.idpresupuestopresup,
	                                           concepto = concepto, idtotalpresup = idtotalpresup, importeejercido = importeejercido)
		dlg.CenterOnScreen()
		dlg.ShowModal()
		
	def OnGridRightClick(self, event):
		if self.rowgrid not in (0,1,2,18,19,20):
			concepto = self.grid.GetCellValue(self.rowgrid, 1)
			if not hasattr(self, "ID_POPUPPRESUPANALISISCOSTOSPARTIDAS"):
				ID_POPUPPRESUPANALISISCOSTOSPARTIDAS = wx.NewId(); ID_POPUPPRESUPANALISISCOSTOSDETALLE = wx.NewId()
				ID_POPUPPRESUPANALISISCOSTOSFECHAS = wx.NewId(); ID_POPUPPRESUPANALISISCOSTOSTITULOCONCEPTO = wx.NewId()
				self.Bind(wx.EVT_MENU, self.OnPartidas, id = ID_POPUPPRESUPANALISISCOSTOSPARTIDAS)
				self.Bind(wx.EVT_MENU, self.OnConceptoDetalle, id = ID_POPUPPRESUPANALISISCOSTOSDETALLE)
				self.Bind(wx.EVT_MENU, self.OnConceptoFecha, id = ID_POPUPPRESUPANALISISCOSTOSFECHAS)
				self.Bind(wx.EVT_MENU, self.OnTituloConcepto, id = ID_POPUPPRESUPANALISISCOSTOSTITULOCONCEPTO)
			popup = wx.Menu()
			popup.Append(ID_POPUPPRESUPANALISISCOSTOSTITULOCONCEPTO, u"%s" % concepto)
			popup.AppendSeparator()
			popup.Append(ID_POPUPPRESUPANALISISCOSTOSPARTIDAS, u"Partidas")
			popup.Append(ID_POPUPPRESUPANALISISCOSTOSDETALLE, u"Detalle")
			if self.rowgrid == 15:
				popup.AppendSeparator()
				popup.Append(ID_POPUPPRESUPANALISISCOSTOSFECHAS, u"Rango de Fechas para C�lculo")

			self.PopupMenu(popup)
			popup.Destroy()
			
	def OnTituloConcepto(self, event):
		pass
			
	def OnConceptoFecha(self, event):
		idtotalpresup = self.grid.GetCellValue(self.rowgrid, 0); concepto = self.grid.GetCellValue(self.rowgrid, 1)
		dlg = GixPresupAnalisisCostosFunc5(self, usuario = self.usuario, concepto = concepto, idtotalpresup = idtotalpresup)
		dlg.CenterOnScreen()
		dlg.ShowModal()
				
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
		return dato
	
	def EnteroComas(self, cantidad = 0):
		valor = str(int(cantidad))
		resultado = valor
		if int(cantidad) < 0:
			valor = str(int(cantidad) * -1)
			
		if len(valor) == 12:
			resultado = valor[:3] + "," + valor[3:6] + "," + valor[6:9] + "," + valor[9:12]
		elif len(valor) == 11:
			resultado = valor[:2] + "," + valor[2:5] + "," + valor[5:8] + "," + valor[8:11]
		elif len(valor) == 10:
			resultado = valor[:1] + "," + valor[1:4] + "," + valor[4:7] + "," + valor[7:10]
		elif len(valor) == 9:
			resultado = valor[:3] + "," + valor[3:6] + "," + valor[6:9]
		elif len(valor) == 8:
			resultado = valor[:2] + "," + valor[2:5] + "," + valor[5:8]
		elif len(valor) == 7:
			resultado = valor[:1] + "," + valor[1:4] + "," + valor[4:7]
		elif len(valor) == 6:
			resultado = valor[:3] + "," + valor[3:6]
		elif len(valor) == 5:
			resultado = valor[:2] + "," + valor[2:5]
		elif len(valor) == 4:
			resultado = valor[:1] + "," + valor[1:4]
			
		if int(cantidad) < 0:
			resultado = "-" + resultado
			
		return resultado
	
	def SetColumnsAutoSize(self):
		for col in (0,8):
			self.grid.SetColSize(col, 15)
		self.grid.AutoSizeColumn(1)
		for col in (2,3,4,5,6,7):
			self.grid.SetColSize(col, 100)
				
	def FillGridCtrl(self):
		wx.BeginBusyCursor()
		sql = """
		select t.idtotalpresup, c.concepto, t.total, t.porcasa, t.porcentaje, t.importeejercido,
		t.porcentajeejercido, t.importeejercer, c.consecutivo
		from gixpresupanalisiscostostotal t
		join gixpresupanalisiscostosconcepto c on t.fkconceptopresup = c.idconceptopresup
		where t.fkpresupuestopresup = %s order by c.consecutivo
		""" % self.idpresupuestopresup
		metapiece = ((10, u""), (250, u"Informaci�n General\n(Concepto)"), (80, u"T o t a l\n(Presupuesto)", wx.ALIGN_RIGHT),
			     (80, u"Por Casa", wx.ALIGN_RIGHT), (80, u"%", wx.ALIGN_RIGHT),
			     (80, u"Importe\nEjercido\ndel\nPresupuesto", wx.ALIGN_RIGHT),
			     (80, u"Porcentaje\nEjercido\ndel\nPresupuesto", wx.ALIGN_RIGHT),
			     (80, u"Importe por\nEjercer\ndel\nPresupuesto", wx.ALIGN_RIGHT), (10, u""))
		elements = len(metapiece)
		filas = self.grid.GetNumberRows()
		cols = self.grid.GetNumberCols()
		if filas: self.grid.DeleteRows(0, filas)
		if cols: self.grid.DeleteCols(0, cols)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		fila = 0
		if rows:
			self.grid.InsertRows(0, 1)
			self.grid.InsertCols(0, elements)
			for colindex, metacols in enumerate(metapiece):
				self.grid.SetColSize(colindex, metacols[0])
				self.grid.SetColLabelValue(colindex, metacols[1])
			self.grid.ForceRefresh()
			if len(rows) > 1:
				self.grid.AppendRows(len(rows) - 1)
				
			for fila, row in enumerate(rows):
				for col in range(0, colindex + 1):
					if fila in (0,1,2):
						self.grid.SetCellBackgroundColour(fila, col, wx.NamedColour("Medium Goldenrod"))
					elif fila in (3,4):
						self.grid.SetCellBackgroundColour(fila, col, wx.Colour(185, 245, 185))
					elif fila in (5,6,7,8,9,10,11):
						self.grid.SetCellBackgroundColour(fila, col, wx.Colour(222, 228, 255))
					elif fila in (12,13,14,15,16,17):
						self.grid.SetCellBackgroundColour(fila, col, wx.Colour(195, 217, 255))
						
					if fila in (18,19,20):
						self.grid.SetCellBackgroundColour(fila, col, wx.Colour(248, 181, 68))
						self.grid.SetReadOnly(fila, col, True)
						if col in (0,8):
							self.grid.SetCellRenderer(fila, col, NullGridRenderer())
					elif col in (1,3,4,5,6,7):
						self.grid.SetReadOnly(fila, col, True)
					elif col == 2:
						self.grid.SetCellTextColour(fila, col, wx.NamedColour("Navy"))
						if self.usuario in self.usuariosupdate:
							self.grid.SetColFormatNumber(col)
							self.grid.SetCellEditor(fila, col, gridlib.GridCellNumberEditor(-1))
						else:
							self.grid.SetReadOnly(fila, col, True)
					elif col in (0,8):
						self.grid.SetCellRenderer(fila, col, NullGridRenderer())
						self.grid.SetReadOnly(fila, col, True)
					
					if len(metapiece[col]) in (3,4):
						col_selected = metapiece[col]
						hAlignmnt = col_selected[2]
						self.grid.SetCellAlignment(fila, col, hAlignmnt, wx.ALIGN_CENTER)
						
					funcion = ""    
					if len(metapiece[col]) == 4:
						funcion = col_selected[3]
	
					if row[col] == None:
						self.grid.SetCellValue(fila, col, '')
					else:
						try:
							if funcion == "":
								valor = str(row[col])
								if col in (2,3,5,7):
									self.grid.SetCellValue(fila, col, str(int(row[col])))
								elif col in (4,6):
									self.grid.SetCellValue(fila, col, str(float(row[col])))
								else:
									self.grid.SetCellValue(fila, col, str(valor))
							else:
								try:
									lafuncion = funcion % row[col]
									self.grid.SetCellValue(fila, col, eval(lafuncion))
								except:
									self.grid.SetCellValue(fila,col, '**')
						except:
							self.grid.SetCellValue(fila, col, row[col].decode("iso8859-1"))
			
			self.grid.SetFocus()
			self.SetColumnsAutoSize()
			self.grid.SetGridCursor(0, 2)
			self.grid.MakeCellVisible(0, 2)
			
		wx.EndBusyCursor()
		self.CalculaTotales()
		self.GridEvent(0)
			
class Track:
	"""
	A song in some music library
	"""
	def __init__(self, **kwargs):
		self.isChecked = False
		self.attributeNames = kwargs.keys()
		self.attributeNames.extend(["trackColour", "font", "isChecked"])
		self.__dict__.update(kwargs)
    
	def clone(self):
		"Return a deep copy of this object"
		d = {}
		for x in self.attributeNames:
			d[x] = getattr(self, x, None)
		return Track(**d)
    
	def dateLastPlayed(self):
		"Return just the date that the track was played"
		return self.lastPlayed.date()
    
	def SetDateLastPlayed(self, value):
		"Modify just the date that the track was played. The time is preserved"
		self.lastPlayed = datetime.combine(value, self.lastPlayed.time())
    
	def SetFontFace(self, value):
		"Remember a font to display this object. This really shouldn't be in the model"
		if value is None or value == "":
			self.font = None
		else:
			self.font = wx.FFont(11, wx.DEFAULT, face=value)

class GixListView(wx.Frame, GixBase):
	def __init__(self, *args, **kwds):
		self.PreInit()
		# begin wxGlade: MyFrame.__init__
		kwds["style"] = wx.DEFAULT_FRAME_STYLE
		wx.Frame.__init__(self, *args, **kwds)
		self.notebook_1 = wx.Notebook(self, -1, style=0)
		self.notebook_1_pane_6 = wx.Panel(self.notebook_1, -1)
		self.notebook_1_pane_5 = wx.Panel(self.notebook_1, -1)
		self.notebook_1_pane_4 = wx.Panel(self.notebook_1, -1)
		self.notebook_1_pane_3 = wx.Panel(self.notebook_1, -1)
		self.notebook_1_pane_2 = wx.Panel(self.notebook_1, -1)
		self.notebook_1_pane_1 = wx.Panel(self.notebook_1, -1)
		self.sizer_5_staticbox = wx.StaticBox(self.notebook_1_pane_1, -1, "Commands")
		self.sizer_6_staticbox = wx.StaticBox(self.notebook_1_pane_1, -1, "Select")
		self.sizer_11_copy_staticbox = wx.StaticBox(self.notebook_1_pane_1, -1, "Search")
		self.sizer_4_copy_staticbox = wx.StaticBox(self.notebook_1_pane_2, -1, "List View")
		self.sizer_5_copy_staticbox = wx.StaticBox(self.notebook_1_pane_2, -1, "Commands")
		self.sizer_6_copy_staticbox = wx.StaticBox(self.notebook_1_pane_2, -1, "Select")
		self.sizer_11_staticbox = wx.StaticBox(self.notebook_1_pane_2, -1, "Search")
		self.sizer_7_copy_staticbox = wx.StaticBox(self.notebook_1_pane_3, -1, "Commands")
		self.sizer_8_copy_staticbox = wx.StaticBox(self.notebook_1_pane_3, -1, "Select")
		self.sizer_9_copy_staticbox = wx.StaticBox(self.notebook_1_pane_4, -1, "Commands")
		self.sizer_10_copy_staticbox = wx.StaticBox(self.notebook_1_pane_4, -1, "Select")
		self.sizer_11_copy_copy_staticbox = wx.StaticBox(self.notebook_1_pane_4, -1, "Search")
		self.sizer_7_staticbox = wx.StaticBox(self.notebook_1_pane_5, -1, "Group Commands")
		self.sizer_9_copy_copy_staticbox = wx.StaticBox(self.notebook_1_pane_5, -1, "Commands")
		self.sizer_10_copy_copy_staticbox = wx.StaticBox(self.notebook_1_pane_5, -1, "Select")
		self.sizer_11_copy_copy_1_staticbox = wx.StaticBox(self.notebook_1_pane_5, -1, "Search")
		self.sizer_18_staticbox = wx.StaticBox(self.notebook_1_pane_6, -1, "Printing Commands")
		self.sizer_10_staticbox = wx.StaticBox(self.notebook_1_pane_6, -1, "Sources")
		self.sizer_15_staticbox = wx.StaticBox(self.notebook_1_pane_6, -1, "Options")
		self.sizer_17_staticbox = wx.StaticBox(self.notebook_1_pane_6, -1, "Headers")
		self.sizer_9_staticbox = wx.StaticBox(self.notebook_1_pane_6, -1, "Watermark")
		self.sizer_4_staticbox = wx.StaticBox(self.notebook_1_pane_1, -1, "List View")
		self.frame_1_statusbar = self.CreateStatusBar(1, 0)
		self.text_ctrl_1_copy = wx.TextCtrl(self.notebook_1_pane_1, -1, "This is a minimal example of an ObjectListView. The programmer defines the columns that should be shown -- this includes the attribute that should be should be displayed in the column. Once the columns are defined, the programmer gives the control a collection of model objects. The ObjectListView then manages the displaying and sorting of the list by itself. This tab shows what is possible using only the columns definitions, without handling any callbacks. The 'Album' column is a space filling column -- it will automatically shrink or expand to fill any available space.", style=wx.TE_MULTILINE|wx.TE_READONLY|wx.TE_LINEWRAP|wx.TE_WORDWRAP)
		self.olvSimple = ObjectListView(self.notebook_1_pane_1, -1, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
		self.radio_btn_1 = wx.RadioButton(self.notebook_1_pane_1, -1, "Detail")
		self.radio_btn_2 = wx.RadioButton(self.notebook_1_pane_1, -1, "List")
		self.radio_btn_3 = wx.RadioButton(self.notebook_1_pane_1, -1, "Small Icon")
		self.radio_btn_4 = wx.RadioButton(self.notebook_1_pane_1, -1, "Large Icon")
		self.button_1 = wx.Button(self.notebook_1_pane_1, -1, "Repopulate")
		self.button_2 = wx.Button(self.notebook_1_pane_1, -1, "Add 1000")
		self.button_6 = wx.Button(self.notebook_1_pane_1, -1, "&Update selected")
		self.button_7 = wx.Button(self.notebook_1_pane_1, -1, "Clear List")
		self.button_3 = wx.Button(self.notebook_1_pane_1, -1, "All")
		self.button_4 = wx.Button(self.notebook_1_pane_1, -1, "U2's")
		self.button_5 = wx.Button(self.notebook_1_pane_1, -1, "None")
		self.searchCtrlSimple = wx.SearchCtrl(self.notebook_1_pane_1)
		self.text_ctrl_1_copy_copy = wx.TextCtrl(self.notebook_1_pane_2, -1, "This is a more complete example of what an ObjectListView can do. It uses callbacks to: decided the image for the Artist and Rating columns; to format the rows, taking into account any colour or font set for the row (changes to the \"Colour\" and \"Font\" values will effect their row). It also shows listening for cell edit events (the second row cannot be edited; the Artist and Album are text boxes that autocomplete, and the Genre is combo box that also alsocompletes. The Colour and Font columns have custom editors installed.", style=wx.TE_MULTILINE|wx.TE_READONLY|wx.TE_LINEWRAP|wx.TE_WORDWRAP)
		self.olvComplex = ObjectListView(self.notebook_1_pane_2, -1, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
		self.radio_btn_1_copy = wx.RadioButton(self.notebook_1_pane_2, -1, "Detail")
		self.radio_btn_2_copy = wx.RadioButton(self.notebook_1_pane_2, -1, "List")
		self.radio_btn_3_copy = wx.RadioButton(self.notebook_1_pane_2, -1, "Small Icon")
		self.radio_btn_4_copy = wx.RadioButton(self.notebook_1_pane_2, -1, "Large Icon")
		self.button_1_copy = wx.Button(self.notebook_1_pane_2, -1, "Repopulate")
		self.button_2_copy = wx.Button(self.notebook_1_pane_2, -1, "Add 1000")
		self.button_6_copy = wx.Button(self.notebook_1_pane_2, -1, "&Update selected")
		self.button_7_copy_1 = wx.Button(self.notebook_1_pane_2, -1, "Clear List")
		self.button_3_copy = wx.Button(self.notebook_1_pane_2, -1, "All")
		self.button_4_copy = wx.Button(self.notebook_1_pane_2, -1, "U2's")
		self.button_5_copy = wx.Button(self.notebook_1_pane_2, -1, "None")
		self.searchCtrlComplex = wx.SearchCtrl(self.notebook_1_pane_2)
		self.text_ctrl_1_copy_1_copy = wx.TextCtrl(self.notebook_1_pane_3, -1, "A VirtualObjectListView can handle a large number of rows in virtually constant time. It uses the same manner of defining columns and the aspect the columns should show, but is different in its manner of accessing model objects. Instead of passing it a collection of objects, the programmer tells the control how many objects are in the list, and provides a callback that will provide the model objects when they are required. The downside of a virtual list is that it cannot iterate through its items, so it cannot sort its items.\nThe list below has 10 million rows. Do not try this with a normal list view.", style=wx.TE_MULTILINE|wx.TE_READONLY|wx.TE_LINEWRAP|wx.TE_WORDWRAP)
		self.olvVirtual = VirtualObjectListView(self.notebook_1_pane_3, -1, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
		self.button_7_copy = wx.Button(self.notebook_1_pane_3, -1, "Repopulate")
		self.button_8_copy = wx.Button(self.notebook_1_pane_3, -1, "Add 1000")
		self.button_9_copy = wx.Button(self.notebook_1_pane_3, -1, "Update Selected")
		self.button_7_copy_2 = wx.Button(self.notebook_1_pane_3, -1, "Clear List")
		self.button_10_copy = wx.Button(self.notebook_1_pane_3, -1, "All")
		self.button_11_copy = wx.Button(self.notebook_1_pane_3, -1, "None")
		self.text_ctrl_1_copy_2 = wx.TextCtrl(self.notebook_1_pane_4, -1, "A FastObjectListView is a compromise between the functionality of an ObjectListView and the speed of a VirtualObjectListView. In many cases, it can be used as a drop in replacement for an ObjectListView. It supports sorting and model-level operations: SelectObject(), RefreshObject(). For a large number of objects, it is much faster than a normal list view.", style=wx.TE_MULTILINE|wx.TE_READONLY|wx.TE_LINEWRAP|wx.TE_WORDWRAP)
		self.olvFast = FastObjectListView(self.notebook_1_pane_4, -1, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
		self.button_12_copy = wx.Button(self.notebook_1_pane_4, -1, "Repopulate")
		self.button_13_copy = wx.Button(self.notebook_1_pane_4, -1, "Add 1000")
		self.button_14_copy = wx.Button(self.notebook_1_pane_4, -1, "Update Selected")
		self.button_7_copy_3 = wx.Button(self.notebook_1_pane_4, -1, "Clear List")
		self.button_15_copy = wx.Button(self.notebook_1_pane_4, -1, "All")
		self.button_16_copy = wx.Button(self.notebook_1_pane_4, -1, "U2's")
		self.button_17_copy = wx.Button(self.notebook_1_pane_4, -1, "None")
		self.searchCtrlFast = wx.SearchCtrl(self.notebook_1_pane_4)
		self.text_ctrl_1_copy_2_copy = wx.TextCtrl(self.notebook_1_pane_5, -1, "A GroupListView can partition its objects into logical divisions, and then present those groups to the user. The groups are collapsible. ", style=wx.TE_MULTILINE|wx.TE_READONLY|wx.TE_LINEWRAP|wx.TE_WORDWRAP)
		self.olvGroup = GroupListView(self.notebook_1_pane_5, -1, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
		self.cbShowGroups = wx.CheckBox(self.notebook_1_pane_5, -1, "Show Groups")
		self.cbLockGroup = wx.CheckBox(self.notebook_1_pane_5, -1, "Lock Group")
		self.cbShowItemCount = wx.CheckBox(self.notebook_1_pane_5, -1, "Show Item Counts")
		self.button_8 = wx.Button(self.notebook_1_pane_5, -1, "Expand All")
		self.button_9 = wx.Button(self.notebook_1_pane_5, -1, "Collapse All")
		self.button_12_copy_copy = wx.Button(self.notebook_1_pane_5, -1, "Repopulate")
		self.button_13_copy_copy = wx.Button(self.notebook_1_pane_5, -1, "Add 1000")
		self.button_14_copy_copy = wx.Button(self.notebook_1_pane_5, -1, "Update Selected")
		self.button_7_copy_3_copy = wx.Button(self.notebook_1_pane_5, -1, "Clear List")
		self.button_15_copy_copy = wx.Button(self.notebook_1_pane_5, -1, "All")
		self.button_16_copy_copy = wx.Button(self.notebook_1_pane_5, -1, "U2's")
		self.button_17_copy_copy = wx.Button(self.notebook_1_pane_5, -1, "None")
		self.searchCtrlGroup = wx.SearchCtrl(self.notebook_1_pane_5)
		self.text_ctrl_1_copy_2_copy_copy = wx.TextCtrl(self.notebook_1_pane_6, -1, "A ListCtrlPrinter takes an ObjectListView (or even a plain ListCtrl) and turns it into a nice report, which can be printed and previewed. Using it is as simple as:\n    printer = ListCtrlPrinter(self.listCtrlToPrint, \"My Title\")\n    printer.PrintPreview()\n\nNOTE: The panel to the right is a wx.PreviewCanvas, which expects to live inside a print preview window, but here it is embedded in a tab control. It mostly works but sometimes throws exceptions (in particular, if you use scroll using a mouse wheel). These exceptions can be safely ignored. In a real app, this panel would be part of the preview frame and thus work properly.", style=wx.TE_MULTILINE|wx.TE_READONLY|wx.TE_LINEWRAP|wx.TE_WORDWRAP)
		self.button_10 = wx.Button(self.notebook_1_pane_6, -1, "Print Preview")
		self.button_11 = wx.Button(self.notebook_1_pane_6, -1, "Page Setup")
		self.button_12 = wx.Button(self.notebook_1_pane_6, -1, "Print")
		self.cbSimple = wx.CheckBox(self.notebook_1_pane_6, -1, "Simple")
		self.cbComplex = wx.CheckBox(self.notebook_1_pane_6, -1, "Complex")
		self.cbFast = wx.CheckBox(self.notebook_1_pane_6, -1, "Fast")
		self.cbGroups = wx.CheckBox(self.notebook_1_pane_6, -1, "Groups")
		self.radioBoxFormatting = wx.RadioBox(self.notebook_1_pane_6, -1, "Formatting", choices=["Minimal", "Normal", "Over the top"], majorDimension=0, style=wx.RA_SPECIFY_ROWS)
		self.cbShrinkToFit = wx.CheckBox(self.notebook_1_pane_6, -1, "Shrink columns to fit within the width of the page")
		self.cbIncludeImages = wx.CheckBox(self.notebook_1_pane_6, -1, "Include images in the report")
		self.cbWrapCells = wx.CheckBox(self.notebook_1_pane_6, -1, "Wrap long text within cells")
		self.cbColumnHeaderOnEachPage = wx.CheckBox(self.notebook_1_pane_6, -1, "Repeat column headers on new pages")
		self.cbUseListCtrlTextFormat = wx.CheckBox(self.notebook_1_pane_6, -1, "Take text formatting from list control")
		self.tcPageHeaderLeft = wx.TextCtrl(self.notebook_1_pane_6, -1, "Playing with ListCtrl printing")
		self.tcPageHeaderCenter = wx.TextCtrl(self.notebook_1_pane_6, -1, "")
		self.tcPageHeaderRight = wx.TextCtrl(self.notebook_1_pane_6, -1, "")
		self.tcPageFooterLeft = wx.TextCtrl(self.notebook_1_pane_6, -1, "%(date)s")
		self.tcPageFooterCenter = wx.TextCtrl(self.notebook_1_pane_6, -1, "")
		self.tcPageFooterRight = wx.TextCtrl(self.notebook_1_pane_6, -1, "%(currentPage)d of %(totalPages)d")
		self.tcWatermark = wx.TextCtrl(self.notebook_1_pane_6, -1, "Slothful!")
		self.watermarkFontCtrl = wx.FontPickerCtrl(self.notebook_1_pane_6, style=wx.FNTP_FONTDESC_AS_LABEL|wx.FNTP_USE_TEXTCTRL)
		self.watermarkColorCtrl = wx.ColourPickerCtrl(self.notebook_1_pane_6, style=wx.CLRP_USE_TEXTCTRL)
		self.cbWatermarkOnTop = wx.CheckBox(self.notebook_1_pane_6, -1, "Watermark on top")
		self.button_13 = wx.Button(self.notebook_1_pane_6, -1, "| <<")
		self.button_13_copy_1 = wx.Button(self.notebook_1_pane_6, -1, "<<")
		self.button_13_copy_2 = wx.Button(self.notebook_1_pane_6, -1, ">>")
		self.button_13_copy_2_copy = wx.Button(self.notebook_1_pane_6, -1, ">> |")
		self.choiceZoom = wx.Choice(self.notebook_1_pane_6, -1, choices=["25%", "50%", "75%", "100%", "150%", "200%", "400%"])
		self.previewCanvas = wx.PreviewCanvas(self.printPreview, self.notebook_1_pane_6)
	
		self.__set_properties()
		self.__do_layout()
	
		self.Bind(wx.EVT_RADIOBUTTON, self.OnListViewDetails, self.radio_btn_1)
		self.Bind(wx.EVT_RADIOBUTTON, self.OnListViewList, self.radio_btn_2)
		self.Bind(wx.EVT_RADIOBUTTON, self.OnListViewSmallIcon, self.radio_btn_3)
		self.Bind(wx.EVT_RADIOBUTTON, self.OnListViewLargeIcon, self.radio_btn_4)
		self.Bind(wx.EVT_BUTTON, self.OnRepopulate, self.button_1)
		self.Bind(wx.EVT_BUTTON, self.OnAdd1000, self.button_2)
		self.Bind(wx.EVT_BUTTON, self.OnUpdateSelected, self.button_6)
		self.Bind(wx.EVT_BUTTON, self.OnClearListSimple, self.button_7)
		self.Bind(wx.EVT_BUTTON, self.OnSelectAll, self.button_3)
		self.Bind(wx.EVT_BUTTON, self.OnSelectU2s, self.button_4)
		self.Bind(wx.EVT_BUTTON, self.OnSelectNone, self.button_5)
		self.Bind(wx.EVT_RADIOBUTTON, self.OnListViewDetailsComplex, self.radio_btn_1_copy)
		self.Bind(wx.EVT_RADIOBUTTON, self.OnListViewListComplex, self.radio_btn_2_copy)
		self.Bind(wx.EVT_RADIOBUTTON, self.OnListViewSmallIconComplex, self.radio_btn_3_copy)
		self.Bind(wx.EVT_RADIOBUTTON, self.OnListViewLargeIconComplex, self.radio_btn_4_copy)
		self.Bind(wx.EVT_BUTTON, self.OnRepopulateComplex, self.button_1_copy)
		self.Bind(wx.EVT_BUTTON, self.OnAdd1000Complex, self.button_2_copy)
		self.Bind(wx.EVT_BUTTON, self.OnUpdateSelectedComplex, self.button_6_copy)
		self.Bind(wx.EVT_BUTTON, self.OnClearListComplex, self.button_7_copy_1)
		self.Bind(wx.EVT_BUTTON, self.OnSelectAllComplex, self.button_3_copy)
		self.Bind(wx.EVT_BUTTON, self.OnSelectU2sComplex, self.button_4_copy)
		self.Bind(wx.EVT_BUTTON, self.OnSelectNoneComplex, self.button_5_copy)
		self.Bind(wx.EVT_BUTTON, self.OnRepopulateVirtual, self.button_7_copy)
		self.Bind(wx.EVT_BUTTON, self.OnAdd1000Virtual, self.button_8_copy)
		self.Bind(wx.EVT_BUTTON, self.OnUpdateSelectedVirtual, self.button_9_copy)
		self.Bind(wx.EVT_BUTTON, self.OnClearListVirtual, self.button_7_copy_2)
		self.Bind(wx.EVT_BUTTON, self.OnSelectAllVirtual, self.button_10_copy)
		self.Bind(wx.EVT_BUTTON, self.OnSelectNoneVirtual, self.button_11_copy)
		self.Bind(wx.EVT_BUTTON, self.OnRepopulateFast, self.button_12_copy)
		self.Bind(wx.EVT_BUTTON, self.OnAdd1000Fast, self.button_13_copy)
		self.Bind(wx.EVT_BUTTON, self.OnUpdateSelectedFast, self.button_14_copy)
		self.Bind(wx.EVT_BUTTON, self.OnClearListFast, self.button_7_copy_3)
		self.Bind(wx.EVT_BUTTON, self.OnSelectAllFast, self.button_15_copy)
		self.Bind(wx.EVT_BUTTON, self.OnSelectU2sFast, self.button_16_copy)
		self.Bind(wx.EVT_BUTTON, self.OnSelectNoneFast, self.button_17_copy)
		self.Bind(wx.EVT_CHECKBOX, self.OnShowGroupChecked, self.cbShowGroups)
		self.Bind(wx.EVT_CHECKBOX, self.OnLockGroupChecked, self.cbLockGroup)
		self.Bind(wx.EVT_CHECKBOX, self.OnShowItemCountChecked, self.cbShowItemCount)
		self.Bind(wx.EVT_BUTTON, self.OnExpandAllGroups, self.button_8)
		self.Bind(wx.EVT_BUTTON, self.OnCollapseAllGroups, self.button_9)
		self.Bind(wx.EVT_BUTTON, self.OnRepopulateGroup, self.button_12_copy_copy)
		self.Bind(wx.EVT_BUTTON, self.OnAdd1000Group, self.button_13_copy_copy)
		self.Bind(wx.EVT_BUTTON, self.OnUpdateSelectedGroup, self.button_14_copy_copy)
		self.Bind(wx.EVT_BUTTON, self.OnClearListGroup, self.button_7_copy_3_copy)
		self.Bind(wx.EVT_BUTTON, self.OnSelectAllGroup, self.button_15_copy_copy)
		self.Bind(wx.EVT_BUTTON, self.OnSelectU2sGroup, self.button_16_copy_copy)
		self.Bind(wx.EVT_BUTTON, self.OnSelectNoneGroup, self.button_17_copy_copy)
		self.Bind(wx.EVT_BUTTON, self.OnPrintPreview, self.button_10)
		self.Bind(wx.EVT_BUTTON, self.OnPageSetup, self.button_11)
		self.Bind(wx.EVT_BUTTON, self.OnPrint, self.button_12)
		self.Bind(wx.EVT_CHECKBOX, self.OnSourceChange, self.cbSimple)
		self.Bind(wx.EVT_CHECKBOX, self.OnSourceChange, self.cbComplex)
		self.Bind(wx.EVT_CHECKBOX, self.OnSourceChange, self.cbFast)
		self.Bind(wx.EVT_CHECKBOX, self.OnSourceChange, self.cbGroups)
		self.Bind(wx.EVT_RADIOBOX, self.OnFormatting, self.radioBoxFormatting)
		self.Bind(wx.EVT_CHECKBOX, self.OnPreviewOptionChange, self.cbShrinkToFit)
		self.Bind(wx.EVT_CHECKBOX, self.OnPreviewOptionChange, self.cbIncludeImages)
		self.Bind(wx.EVT_CHECKBOX, self.OnPreviewOptionChange, self.cbWrapCells)
		self.Bind(wx.EVT_CHECKBOX, self.OnPreviewOptionChange, self.cbColumnHeaderOnEachPage)
		self.Bind(wx.EVT_CHECKBOX, self.OnPreviewOptionChange, self.cbUseListCtrlTextFormat)
		self.Bind(wx.EVT_TEXT, self.OnPrintingTextChanged, self.tcPageHeaderLeft)
		self.Bind(wx.EVT_TEXT, self.OnPrintingTextChanged, self.tcPageHeaderCenter)
		self.Bind(wx.EVT_TEXT, self.OnPrintingTextChanged, self.tcPageHeaderRight)
		self.Bind(wx.EVT_TEXT, self.OnPrintingTextChanged, self.tcPageFooterLeft)
		self.Bind(wx.EVT_TEXT, self.OnPrintingTextChanged, self.tcPageFooterCenter)
		self.Bind(wx.EVT_TEXT, self.OnPrintingTextChanged, self.tcPageFooterRight)
		self.Bind(wx.EVT_TEXT, self.OnPrintingTextChanged, self.tcWatermark)
		self.Bind(wx.EVT_CHECKBOX, self.OnWatermarkOnTop, self.cbWatermarkOnTop)
		self.Bind(wx.EVT_BUTTON, self.OnFirstPage, self.button_13)
		self.Bind(wx.EVT_BUTTON, self.OnPreviousPage, self.button_13_copy_1)
		self.Bind(wx.EVT_BUTTON, self.OnNextPage, self.button_13_copy_2)
		self.Bind(wx.EVT_BUTTON, self.OnLastPage, self.button_13_copy_2_copy)
		self.Bind(wx.EVT_CHOICE, self.OnZoom, self.choiceZoom)
		# end wxGlade
	
		self.Init()
    
	def __set_properties(self):
		# begin wxGlade: MyFrame.__set_properties
		self.SetTitle("ObjectListView Demo")
		self.SetSize((1274, 788))
		self.frame_1_statusbar.SetStatusWidths([-1])
		# statusbar fields
		frame_1_statusbar_fields = ["frame_1_statusbar"]
		for i in range(len(frame_1_statusbar_fields)):
			self.frame_1_statusbar.SetStatusText(frame_1_statusbar_fields[i], i)
		self.text_ctrl_1_copy.SetBackgroundColour(wx.Colour(252, 255, 138))
		self.radio_btn_1.SetValue(1)
		self.searchCtrlSimple.SetMinSize((150, -1))
		self.text_ctrl_1_copy_copy.SetBackgroundColour(wx.Colour(252, 255, 138))
		self.radio_btn_1_copy.SetValue(1)
		self.searchCtrlComplex.SetMinSize((150, -1))
		self.text_ctrl_1_copy_1_copy.SetBackgroundColour(wx.Colour(252, 255, 138))
		self.text_ctrl_1_copy_2.SetBackgroundColour(wx.Colour(252, 255, 138))
		self.searchCtrlFast.SetMinSize((150, -1))
		self.text_ctrl_1_copy_2_copy.SetBackgroundColour(wx.Colour(252, 255, 138))
		self.cbShowGroups.SetToolTipString("Show or hide groups in the control")
		self.cbShowGroups.SetValue(1)
		self.cbLockGroup.SetToolTipString("Lock the current groups. Sorting by a different column will change the sort order within the groups, but not the groups themselves")
		self.cbShowItemCount.SetToolTipString("Show item counts in the group titles")
		self.cbShowItemCount.SetValue(1)
		self.searchCtrlGroup.SetMinSize((150, -1))
		self.text_ctrl_1_copy_2_copy_copy.SetBackgroundColour(wx.Colour(252, 255, 138))
		self.cbGroups.SetValue(1)
		self.radioBoxFormatting.SetSelection(1)
		self.cbIncludeImages.SetValue(1)
		self.cbColumnHeaderOnEachPage.SetValue(1)
		self.choiceZoom.SetSelection(2)
		# end wxGlade
    
	def __do_layout(self):
		# begin wxGlade: MyFrame.__do_layout
		sizer_1 = wx.BoxSizer(wx.VERTICAL)
		grid_sizer_1 = wx.FlexGridSizer(1, 2, 4, 4)
		sizer_16 = wx.BoxSizer(wx.HORIZONTAL)
		grid_sizer_3 = wx.FlexGridSizer(2, 1, 0, 0)
		sizer_9_copy_1 = wx.FlexGridSizer(1, 6, 0, 0)
		grid_sizer_4 = wx.FlexGridSizer(5, 1, 4, 0)
		sizer_9 = wx.StaticBoxSizer(self.sizer_9_staticbox, wx.HORIZONTAL)
		grid_sizer_5 = wx.FlexGridSizer(4, 2, 0, 2)
		sizer_17 = wx.StaticBoxSizer(self.sizer_17_staticbox, wx.HORIZONTAL)
		grid_sizer_2 = wx.FlexGridSizer(2, 2, 2, 4)
		sizer_14 = wx.GridSizer(1, 3, 0, 0)
		sizer_13 = wx.GridSizer(1, 3, 0, 0)
		grid_sizer_1_copy_1 = wx.FlexGridSizer(1, 3, 0, 4)
		sizer_15 = wx.StaticBoxSizer(self.sizer_15_staticbox, wx.VERTICAL)
		sizer_10 = wx.StaticBoxSizer(self.sizer_10_staticbox, wx.VERTICAL)
		sizer_18 = wx.StaticBoxSizer(self.sizer_18_staticbox, wx.HORIZONTAL)
		grid_sizer_3_copy_copy = wx.FlexGridSizer(3, 1, 4, 4)
		grid_sizer_4_copy_copy = wx.FlexGridSizer(1, 4, 4, 4)
		sizer_11_copy_copy_1 = wx.StaticBoxSizer(self.sizer_11_copy_copy_1_staticbox, wx.HORIZONTAL)
		sizer_10_copy_copy = wx.StaticBoxSizer(self.sizer_10_copy_copy_staticbox, wx.HORIZONTAL)
		sizer_9_copy_copy = wx.StaticBoxSizer(self.sizer_9_copy_copy_staticbox, wx.HORIZONTAL)
		sizer_7 = wx.StaticBoxSizer(self.sizer_7_staticbox, wx.HORIZONTAL)
		sizer_8 = wx.BoxSizer(wx.VERTICAL)
		grid_sizer_3_copy = wx.FlexGridSizer(3, 1, 4, 4)
		grid_sizer_4_copy = wx.FlexGridSizer(1, 3, 4, 4)
		sizer_11_copy_copy = wx.StaticBoxSizer(self.sizer_11_copy_copy_staticbox, wx.HORIZONTAL)
		sizer_10_copy = wx.StaticBoxSizer(self.sizer_10_copy_staticbox, wx.HORIZONTAL)
		sizer_9_copy = wx.StaticBoxSizer(self.sizer_9_copy_staticbox, wx.HORIZONTAL)
		grid_sizer_1_copy = wx.FlexGridSizer(3, 1, 4, 4)
		grid_sizer_2_copy = wx.FlexGridSizer(1, 2, 4, 4)
		sizer_8_copy = wx.StaticBoxSizer(self.sizer_8_copy_staticbox, wx.HORIZONTAL)
		sizer_7_copy = wx.StaticBoxSizer(self.sizer_7_copy_staticbox, wx.HORIZONTAL)
		sizer_2_copy = wx.FlexGridSizer(3, 1, 0, 0)
		sizer_3_copy = wx.FlexGridSizer(1, 4, 0, 0)
		sizer_11 = wx.StaticBoxSizer(self.sizer_11_staticbox, wx.HORIZONTAL)
		sizer_6_copy = wx.StaticBoxSizer(self.sizer_6_copy_staticbox, wx.HORIZONTAL)
		sizer_5_copy = wx.StaticBoxSizer(self.sizer_5_copy_staticbox, wx.HORIZONTAL)
		sizer_4_copy = wx.StaticBoxSizer(self.sizer_4_copy_staticbox, wx.HORIZONTAL)
		sizer_2 = wx.FlexGridSizer(3, 1, 0, 0)
		sizer_3 = wx.FlexGridSizer(1, 4, 0, 0)
		sizer_11_copy = wx.StaticBoxSizer(self.sizer_11_copy_staticbox, wx.HORIZONTAL)
		sizer_6 = wx.StaticBoxSizer(self.sizer_6_staticbox, wx.HORIZONTAL)
		sizer_5 = wx.StaticBoxSizer(self.sizer_5_staticbox, wx.HORIZONTAL)
		sizer_4 = wx.StaticBoxSizer(self.sizer_4_staticbox, wx.HORIZONTAL)
		sizer_2.Add(self.text_ctrl_1_copy, 0, wx.TOP|wx.EXPAND, 4)
		sizer_2.Add(self.olvSimple, 1, wx.ALL|wx.EXPAND, 4)
		sizer_4.Add(self.radio_btn_1, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_4.Add(self.radio_btn_2, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_4.Add(self.radio_btn_3, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_4.Add(self.radio_btn_4, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_3.Add(sizer_4, 1, wx.ALL|wx.EXPAND, 4)
		sizer_5.Add(self.button_1, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_5.Add(self.button_2, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_5.Add(self.button_6, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_5.Add(self.button_7, 0, wx.ALL, 4)
		sizer_3.Add(sizer_5, 1, wx.ALL|wx.EXPAND, 4)
		sizer_6.Add(self.button_3, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_6.Add(self.button_4, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_6.Add(self.button_5, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_3.Add(sizer_6, 1, wx.ALL|wx.EXPAND, 4)
		sizer_11_copy.Add(self.searchCtrlSimple, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_3.Add(sizer_11_copy, 1, wx.ALL|wx.EXPAND, 4)
		sizer_2.Add(sizer_3, 1, wx.EXPAND, 4)
		self.notebook_1_pane_1.SetSizer(sizer_2)
		sizer_2.AddGrowableRow(1)
		sizer_2.AddGrowableCol(0)
		sizer_2_copy.Add(self.text_ctrl_1_copy_copy, 0, wx.TOP|wx.EXPAND, 4)
		sizer_2_copy.Add(self.olvComplex, 1, wx.ALL|wx.EXPAND, 4)
		sizer_4_copy.Add(self.radio_btn_1_copy, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_4_copy.Add(self.radio_btn_2_copy, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_4_copy.Add(self.radio_btn_3_copy, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_4_copy.Add(self.radio_btn_4_copy, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_3_copy.Add(sizer_4_copy, 1, wx.ALL|wx.EXPAND, 4)
		sizer_5_copy.Add(self.button_1_copy, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_5_copy.Add(self.button_2_copy, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_5_copy.Add(self.button_6_copy, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_5_copy.Add(self.button_7_copy_1, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_3_copy.Add(sizer_5_copy, 1, wx.ALL|wx.EXPAND, 4)
		sizer_6_copy.Add(self.button_3_copy, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_6_copy.Add(self.button_4_copy, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_6_copy.Add(self.button_5_copy, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_3_copy.Add(sizer_6_copy, 1, wx.ALL|wx.EXPAND, 4)
		sizer_11.Add(self.searchCtrlComplex, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_3_copy.Add(sizer_11, 1, wx.ALL|wx.EXPAND, 4)
		sizer_2_copy.Add(sizer_3_copy, 1, wx.EXPAND, 4)
		self.notebook_1_pane_2.SetSizer(sizer_2_copy)
		sizer_2_copy.AddGrowableRow(1)
		sizer_2_copy.AddGrowableCol(0)
		grid_sizer_1_copy.Add(self.text_ctrl_1_copy_1_copy, 0, wx.TOP|wx.EXPAND, 4)
		grid_sizer_1_copy.Add(self.olvVirtual, 1, wx.EXPAND, 0)
		sizer_7_copy.Add(self.button_7_copy, 0, wx.ALL, 4)
		sizer_7_copy.Add(self.button_8_copy, 0, wx.ALL, 4)
		sizer_7_copy.Add(self.button_9_copy, 0, wx.ALL, 4)
		sizer_7_copy.Add(self.button_7_copy_2, 0, wx.ALL, 4)
		grid_sizer_2_copy.Add(sizer_7_copy, 1, wx.EXPAND, 0)
		sizer_8_copy.Add(self.button_10_copy, 0, wx.ALL, 4)
		sizer_8_copy.Add(self.button_11_copy, 0, wx.ALL, 4)
		grid_sizer_2_copy.Add(sizer_8_copy, 1, wx.EXPAND, 0)
		grid_sizer_1_copy.Add(grid_sizer_2_copy, 1, wx.EXPAND, 0)
		self.notebook_1_pane_3.SetSizer(grid_sizer_1_copy)
		grid_sizer_1_copy.AddGrowableRow(1)
		grid_sizer_1_copy.AddGrowableCol(0)
		grid_sizer_3_copy.Add(self.text_ctrl_1_copy_2, 0, wx.TOP|wx.EXPAND, 4)
		grid_sizer_3_copy.Add(self.olvFast, 1, wx.EXPAND, 0)
		sizer_9_copy.Add(self.button_12_copy, 0, wx.ALL, 4)
		sizer_9_copy.Add(self.button_13_copy, 0, wx.ALL, 4)
		sizer_9_copy.Add(self.button_14_copy, 0, wx.ALL, 4)
		sizer_9_copy.Add(self.button_7_copy_3, 0, wx.ALL, 4)
		grid_sizer_4_copy.Add(sizer_9_copy, 1, wx.EXPAND, 0)
		sizer_10_copy.Add(self.button_15_copy, 0, wx.ALL, 4)
		sizer_10_copy.Add(self.button_16_copy, 0, wx.ALL, 4)
		sizer_10_copy.Add(self.button_17_copy, 0, wx.ALL, 4)
		grid_sizer_4_copy.Add(sizer_10_copy, 1, wx.EXPAND, 0)
		sizer_11_copy_copy.Add(self.searchCtrlFast, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		grid_sizer_4_copy.Add(sizer_11_copy_copy, 1, wx.ALL|wx.EXPAND, 4)
		grid_sizer_3_copy.Add(grid_sizer_4_copy, 1, wx.EXPAND, 0)
		self.notebook_1_pane_4.SetSizer(grid_sizer_3_copy)
		grid_sizer_3_copy.AddGrowableRow(1)
		grid_sizer_3_copy.AddGrowableCol(0)
		grid_sizer_3_copy_copy.Add(self.text_ctrl_1_copy_2_copy, 0, wx.TOP|wx.EXPAND, 4)
		grid_sizer_3_copy_copy.Add(self.olvGroup, 1, wx.EXPAND, 0)
		sizer_8.Add(self.cbShowGroups, 0, wx.ALL, 2)
		sizer_8.Add(self.cbLockGroup, 0, wx.ALL, 2)
		sizer_8.Add(self.cbShowItemCount, 0, wx.ALL, 2)
		sizer_7.Add(sizer_8, 1, wx.EXPAND, 0)
		sizer_7.Add(self.button_8, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_7.Add(self.button_9, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 4)
		grid_sizer_4_copy_copy.Add(sizer_7, 1, wx.EXPAND, 0)
		sizer_9_copy_copy.Add(self.button_12_copy_copy, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_9_copy_copy.Add(self.button_13_copy_copy, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_9_copy_copy.Add(self.button_14_copy_copy, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_9_copy_copy.Add(self.button_7_copy_3_copy, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		grid_sizer_4_copy_copy.Add(sizer_9_copy_copy, 1, wx.EXPAND, 0)
		sizer_10_copy_copy.Add(self.button_15_copy_copy, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_10_copy_copy.Add(self.button_16_copy_copy, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_10_copy_copy.Add(self.button_17_copy_copy, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		grid_sizer_4_copy_copy.Add(sizer_10_copy_copy, 1, wx.EXPAND, 0)
		sizer_11_copy_copy_1.Add(self.searchCtrlGroup, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		grid_sizer_4_copy_copy.Add(sizer_11_copy_copy_1, 1, wx.ALL|wx.EXPAND, 4)
		grid_sizer_3_copy_copy.Add(grid_sizer_4_copy_copy, 1, wx.EXPAND, 0)
		self.notebook_1_pane_5.SetSizer(grid_sizer_3_copy_copy)
		grid_sizer_3_copy_copy.AddGrowableRow(1)
		grid_sizer_3_copy_copy.AddGrowableCol(0)
		grid_sizer_4.Add(self.text_ctrl_1_copy_2_copy_copy, 0, wx.BOTTOM|wx.EXPAND, 4)
		sizer_18.Add(self.button_10, 0, wx.ALL, 4)
		sizer_18.Add(self.button_11, 0, wx.ALL, 4)
		sizer_18.Add(self.button_12, 0, wx.ALL, 4)
		grid_sizer_4.Add(sizer_18, 1, wx.EXPAND, 0)
		sizer_10.Add(self.cbSimple, 0, wx.ALL, 4)
		sizer_10.Add(self.cbComplex, 0, wx.ALL, 4)
		sizer_10.Add(self.cbFast, 0, wx.ALL, 4)
		sizer_10.Add(self.cbGroups, 0, wx.ALL, 4)
		grid_sizer_1_copy_1.Add(sizer_10, 1, wx.EXPAND, 0)
		grid_sizer_1_copy_1.Add(self.radioBoxFormatting, 0, wx.EXPAND, 0)
		sizer_15.Add(self.cbShrinkToFit, 0, wx.ALL, 4)
		sizer_15.Add(self.cbIncludeImages, 0, wx.ALL, 4)
		sizer_15.Add(self.cbWrapCells, 0, wx.ALL, 4)
		sizer_15.Add(self.cbColumnHeaderOnEachPage, 0, wx.ALL, 4)
		sizer_15.Add(self.cbUseListCtrlTextFormat, 0, wx.ALL, 4)
		grid_sizer_1_copy_1.Add(sizer_15, 1, wx.EXPAND, 0)
		grid_sizer_4.Add(grid_sizer_1_copy_1, 1, 0, 0)
		label_2 = wx.StaticText(self.notebook_1_pane_6, -1, "Page Header:")
		grid_sizer_2.Add(label_2, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_13.Add(self.tcPageHeaderLeft, 0, wx.ALL|wx.EXPAND, 2)
		sizer_13.Add(self.tcPageHeaderCenter, 0, wx.ALL|wx.EXPAND, 2)
		sizer_13.Add(self.tcPageHeaderRight, 0, wx.ALL|wx.EXPAND, 2)
		grid_sizer_2.Add(sizer_13, 1, wx.EXPAND, 0)
		label_3 = wx.StaticText(self.notebook_1_pane_6, -1, "Page Footer:")
		grid_sizer_2.Add(label_3, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_14.Add(self.tcPageFooterLeft, 0, wx.ALL|wx.EXPAND, 2)
		sizer_14.Add(self.tcPageFooterCenter, 0, wx.ALL|wx.EXPAND, 2)
		sizer_14.Add(self.tcPageFooterRight, 0, wx.ALL|wx.EXPAND, 2)
		grid_sizer_2.Add(sizer_14, 1, wx.EXPAND, 0)
		grid_sizer_2.AddGrowableCol(1)
		sizer_17.Add(grid_sizer_2, 1, wx.EXPAND, 0)
		grid_sizer_4.Add(sizer_17, 1, wx.EXPAND, 0)
		label_2_copy_copy = wx.StaticText(self.notebook_1_pane_6, -1, "Watermark Text:")
		grid_sizer_5.Add(label_2_copy_copy, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		grid_sizer_5.Add(self.tcWatermark, 0, wx.ALL|wx.EXPAND, 2)
		label_2_copy_copy_copy = wx.StaticText(self.notebook_1_pane_6, -1, "Font:")
		grid_sizer_5.Add(label_2_copy_copy_copy, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		grid_sizer_5.Add(self.watermarkFontCtrl, 1, wx.ALL|wx.EXPAND, 2)
		label_2_copy_copy_copy_1 = wx.StaticText(self.notebook_1_pane_6, -1, "Color:")
		grid_sizer_5.Add(label_2_copy_copy_copy_1, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		grid_sizer_5.Add(self.watermarkColorCtrl, 1, wx.ALL|wx.EXPAND, 2)
		grid_sizer_5.Add((16, 20), 0, 0, 0)
		grid_sizer_5.Add(self.cbWatermarkOnTop, 0, wx.ALL, 2)
		grid_sizer_5.AddGrowableCol(1)
		sizer_9.Add(grid_sizer_5, 1, wx.EXPAND, 0)
		grid_sizer_4.Add(sizer_9, 1, wx.EXPAND, 0)
		grid_sizer_1.Add(grid_sizer_4, 1, wx.EXPAND, 0)
		sizer_9_copy_1.Add(self.button_13, 0, wx.ALL, 4)
		sizer_9_copy_1.Add(self.button_13_copy_1, 0, wx.ALL, 4)
		sizer_9_copy_1.Add(self.button_13_copy_2, 0, wx.ALL, 4)
		sizer_9_copy_1.Add(self.button_13_copy_2_copy, 0, wx.ALL, 4)
		label_4 = wx.StaticText(self.notebook_1_pane_6, -1, "Zoom:")
		sizer_9_copy_1.Add(label_4, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_9_copy_1.Add(self.choiceZoom, 0, wx.ALL, 4)
		grid_sizer_3.Add(sizer_9_copy_1, 1, wx.EXPAND, 0)
		grid_sizer_3.Add(self.previewCanvas, 1, wx.EXPAND, 0)
		grid_sizer_3.AddGrowableRow(1)
		grid_sizer_3.AddGrowableCol(0)
		sizer_16.Add(grid_sizer_3, 1, wx.EXPAND, 0)
		grid_sizer_1.Add(sizer_16, 1, wx.EXPAND, 0)
		self.notebook_1_pane_6.SetSizer(grid_sizer_1)
		grid_sizer_1.AddGrowableRow(0)
		grid_sizer_1.AddGrowableCol(1)
		self.notebook_1.AddPage(self.notebook_1_pane_1, "Simple")
		self.notebook_1.AddPage(self.notebook_1_pane_2, "Complex")
		self.notebook_1.AddPage(self.notebook_1_pane_3, "Virtual")
		self.notebook_1.AddPage(self.notebook_1_pane_4, "Fast")
		self.notebook_1.AddPage(self.notebook_1_pane_5, "Groups")
		self.notebook_1.AddPage(self.notebook_1_pane_6, "ListCtrl Printing")
		sizer_1.Add(self.notebook_1, 1, wx.ALL|wx.EXPAND, 4)
		self.SetSizer(sizer_1)
		self.Layout()
		# end wxGlade
	
	    #----------------------------------------------------------------------
	    # Initialize
    
	def PreInit(self):
		"Do these initializations before creating any widgets"
		self.InitPrinting()
    
    
	def Init(self):
		"Initialize the application once the UI widgets have been constructed"
		self.InitModel()
		self.InitUI()
		self.InitSearchCtrls()
		self.InitPrintPreview()
    
	def InitModel(self):
		"Initialize the model objects that the app will use. These would normally be stored in a db"
		self.counter = 0
		self.dataObjects = [
		    Track(title="Zoo Station", artist="U2", size=5.5, album="Achtung Baby", genre="Rock", rating=60, duration="4:37", lastPlayed="21/10/2007 5:42"),
		    Track(title="Who's Gonna Ride Your Wild Horses", artist="U2", size=6.3, album="Achtung Baby", genre="Rock", rating=80, duration="5:17", lastPlayed="9/10/2007 11:32"),
		    Track(title="So Cruel", artist="U2", size=6.9, album="Achtung Baby", genre="Rock", rating=60, duration="5:49", lastPlayed="9/10/2007 11:38"),
		    Track(title="The Fly", artist="U2", size=5.4, album="Achtung Baby", genre="Rock", rating=60, duration="4:29", lastPlayed="9/10/2007 11:42"),
		    Track(title="Tryin' To Throw Your Arms Around The World", artist="U2", size=4.7, album="Achtung Baby", genre="Rock", rating=60, duration="3:53", lastPlayed="9/10/2007 11:46"),
		    Track(title="Ultraviolet (Light My Way)", artist="U2", size=6.6, album="Achtung Baby", genre="Rock", rating=60, duration="5:31", lastPlayed="9/10/2007 11:52"),
		    Track(title="Acrobat", artist="U2", size=5.4, album="Achtung Baby", genre="Rock", rating=60, duration="4:30", lastPlayed="9/10/2007 11:56"),
		    Track(title="Love Is Blindness", artist="U2", size=5.3, album="Achtung Baby", genre="Rock", rating=60, duration="4:26", lastPlayed="9/10/2007 12:00"),
		    Track(title="Elevation", artist="U2", size=4.5, album="All That You Can't Leave Behind", genre="Rock", rating=60, duration="3:48", lastPlayed="25/01/2008 11:46"),
		    Track(title="Walk On", artist="U2", size=5.8, album="All That You Can't Leave Behind", genre="Rock", rating=100, duration="4:56", lastPlayed="18/03/2008 11:39"),
		    Track(title="Kite", artist="U2", size=5.2, album="All That You Can't Leave Behind", genre="Rock", rating=40, duration="4:27", lastPlayed="23/01/2008 10:36"),
		    Track(title="In A Little While", artist="U2", size=4.3, album="All That You Can't Leave Behind", genre="Rock", rating=60, duration="3:39", lastPlayed="20/01/2008 7:48"),
		    Track(title="Wild Honey", artist="U2", size=4.5, album="All That You Can't Leave Behind", genre="Rock", rating=40, duration="3:47", lastPlayed="13/04/2007 11:50"),
		    Track(title="Peace On Earth", artist="U2", size=5.6, album="All That You Can't Leave Behind", genre="Rock", rating=40, duration="4:48", lastPlayed="22/12/2007 2:51"),
		    Track(title="When I Look At The World", artist="U2", size=5.1, album="All That You Can't Leave Behind", genre="Rock", rating=40, duration="4:18", lastPlayed="22/12/2007 2:55"),
		    Track(title="New York", artist="U2", size=6.4, album="All That You Can't Leave Behind", genre="Rock", rating=60, duration="5:30", lastPlayed="22/12/2007 3:01"),
		    Track(title="Grace", artist="U2", size=6.5, album="All That You Can't Leave Behind", genre="Rock", rating=40, duration="5:32", lastPlayed="22/12/2007 3:06"),
		    Track(title="The Ground Beneath Her Feet(Bonus Track)", artist="U2", size=4.4, album="All That You Can't Leave Behind", genre="Rock", rating=40, duration="3:44", lastPlayed="22/12/2007 3:10"),
		    Track(title="Follow You Home", artist="Nickelback", size=6, album="All The Right Reasons", genre="Rock", rating=40, duration="4:20", lastPlayed="6/03/2008 10:42"),
		    Track(title="Fight For All The Wrong Reason", artist="Nickelback", size=5.2, album="All The Right Reasons", genre="Rock", rating=60, duration="3:44", lastPlayed="15/03/2008 5:04"),
		    Track(title="Photograph", artist="Nickelback", size=6, album="All The Right Reasons", genre="Rock", rating=60, duration="4:19", lastPlayed="15/03/2008 5:08"),
		    Track(title="Animals", artist="Nickelback", size=4.3, album="All The Right Reasons", genre="Rock", rating=40, duration="3:07", lastPlayed="16/02/2008 12:12"),
		    Track(title="Savin' Me", artist="Nickelback", size=5.1, album="All The Right Reasons", genre="Rock", rating=80, duration="3:39", lastPlayed="24/03/2008 10:41"),
		    Track(title="Far Away", artist="Nickelback", size=5.5, album="All The Right Reasons", genre="Rock", rating=40, duration="3:58", lastPlayed="15/03/2008 5:30"),
		    Track(title="Next Contestant", artist="Nickelback", size=5, album="All The Right Reasons", genre="Rock", rating=80, duration="3:35", lastPlayed="24/03/2008 9:47"),
		    Track(title="Side Of A Bullet", artist="Nickelback", size=4.2, album="All The Right Reasons", genre="Rock", rating=40, duration="3:01", lastPlayed="6/03/2008 11:00"),
		    Track(title="If Everyone Cared", artist="Nickelback", size=5, album="All The Right Reasons", genre="Rock", rating=60, duration="3:38", lastPlayed="6/03/2008 11:03"),
		    Track(title="Someone That You're With", artist="Nickelback", size=5.6, album="All The Right Reasons", genre="Rock", rating=40, duration="4:02", lastPlayed="16/02/2008 12:34"),
		    Track(title="Rockstar", artist="Nickelback", size=5.9, album="All The Right Reasons", genre="Rock", rating=60, duration="4:16", lastPlayed="16/02/2008 12:38"),
		    Track(title="Lelani", artist="Hoodoo Gurus", size=5.9, album="Ampology", genre="Rock", rating=60, duration="4:55", lastPlayed="22/10/2007 8:45"),
		    Track(title="Tojo", artist="Hoodoo Gurus", size=4.1, album="Ampology", genre="Rock", rating=60, duration="3:22", lastPlayed="22/10/2007 8:48"),
		    Track(title="My Girl", artist="Hoodoo Gurus", size=3.3, album="Ampology", genre="Rock", rating=80, duration="2:39", lastPlayed="12/11/2007 7:57"),
		    Track(title="Be My Guru", artist="Hoodoo Gurus", size=3.3, album="Ampology", genre="Rock", rating=100, duration="2:39", lastPlayed="20/03/2008 12:15"),
		    Track(title="I Want You Back", artist="Hoodoo Gurus", size=3.9, album="Ampology", genre="Rock", rating=80, duration="3:12", lastPlayed="12/11/2007 7:42"),
		    Track(title="I Was A Kamikaze Pilot", artist="Hoodoo Gurus", size=3.9, album="Ampology", genre="Rock", rating=60, duration="3:10", lastPlayed="22/10/2007 9:00"),
		    Track(title="Bittersweet", artist="Hoodoo Gurus", size=4.7, album="Ampology", genre="Rock", rating=60, duration="3:52", lastPlayed="22/10/2007 9:04"),
		    Track(title="Poison Pen", artist="Hoodoo Gurus", size=5, album="Ampology", genre="Rock", rating=60, duration="4:11", lastPlayed="22/10/2007 9:11"),
		    Track(title="In The Wild", artist="Hoodoo Gurus", size=3.9, album="Ampology", genre="Rock", rating=60, duration="3:12", lastPlayed="22/10/2007 9:14"),
		    Track(title="Whats My Scene?", artist="Hoodoo Gurus", size=4.6, album="Ampology", genre="Rock", rating=100, duration="3:49", lastPlayed="12/11/2007 7:51"),
		    Track(title="Heart Of Darkness", artist="Hoodoo Gurus", size=3.8, album="Ampology", genre="Rock", rating=60, duration="3:04", lastPlayed="22/10/2007 9:21"),
		    Track(title="Good Times", artist="Hoodoo Gurus", size=3.7, album="Ampology", genre="Rock", rating=80, duration="3:02", lastPlayed="20/03/2008 12:18"),
		    Track(title="Cajun Country", artist="Hoodoo Gurus", size=4.9, album="Ampology", genre="Rock", rating=60, duration="4:06", lastPlayed="22/10/2007 9:28"),
		    Track(title="Axegrinder", artist="Hoodoo Gurus", size=4.2, album="Ampology", genre="Rock", rating=60, duration="3:26", lastPlayed="22/10/2007 9:32"),
		    Track(title="Another World", artist="Hoodoo Gurus", size=4, album="Ampology", genre="Rock", rating=80, duration="3:16", lastPlayed="20/03/2008 12:21"),
		    Track(title="Meant To Live", artist="Switchfoot", size=4, album="The Beautiful Letdown", genre="Gospel & Religious", rating=100, duration="3:26", lastPlayed="3/03/2008 1:46"),
		    Track(title="This Is Your Life", artist="Switchfoot", size=4, album="The Beautiful Letdown", genre="Gospel & Religious", rating=100, duration="4:18", lastPlayed="3/03/2008 2:11"),
		    Track(title="More than fine", artist="Switchfoot", size=4.9, album="The Beautiful Letdown", genre="Gospel & Religious", rating=60, duration="4:15", lastPlayed="3/03/2008 2:16"),
		    Track(title="Ammunition", artist="Switchfoot", size=4.4, album="The Beautiful Letdown", genre="Gospel & Religious", rating=40, duration="3:46", lastPlayed="3/03/2008 1:58"),
		    Track(title="Dare you to move", artist="Switchfoot", size=4.9, album="The Beautiful Letdown", genre="Gospel & Religious", rating=80, duration="4:15", lastPlayed="3/03/2008 2:20"),
		    Track(title="Redemption", artist="Switchfoot", size=3.6, album="The Beautiful Letdown", genre="Gospel & Religious", rating=80, duration="3:07", lastPlayed="19/03/2008 5:19"),
		    Track(title="The beautiful letdown", artist="Switchfoot", size=6.2, album="The Beautiful Letdown", genre="Gospel & Religious", rating=60, duration="5:21", lastPlayed="3/03/2008 2:29"),
		    Track(title="Gone", artist="Switchfoot", size=4.4, album="The Beautiful Letdown", genre="Gospel & Religious", rating=80, duration="3:46", lastPlayed="3/03/2008 2:33"),
		    Track(title="On Fire", artist="Switchfoot", size=4.3, album="The Beautiful Letdown", genre="Gospel & Religious", rating=80, duration="4:39", lastPlayed="3/03/2008 2:37"),
		    Track(title="Adding to the noise", artist="Switchfoot", size=3.3, album="The Beautiful Letdown", genre="Gospel & Religious", rating=60, duration="2:51", lastPlayed="19/03/2008 5:42"),
		    Track(title="Twenty-four", artist="Switchfoot", size=5.7, album="The Beautiful Letdown", genre="Gospel & Religious", rating=60, duration="4:54", lastPlayed="3/03/2008 2:45"),
		    Track(title="Gap That Opened", artist="Boom Crash Opera", size=4.7, album="Boom Crash Opera", genre="Rock", rating=40, duration="4:02", lastPlayed="13/01/2008 10:11"),
		    Track(title="Hands Up In The Air", artist="Boom Crash Opera", size=4.5, album="Boom Crash Opera", genre="Rock", rating=80, duration="3:53", lastPlayed="24/03/2008 3:19"),
		    Track(title="Love Me To Death", artist="Boom Crash Opera", size=5.2, album="Boom Crash Opera", genre="Rock", rating=40, duration="4:27", lastPlayed="13/01/2008 10:20"),
		    Track(title="City Fist", artist="Boom Crash Opera", size=4.9, album="Boom Crash Opera", genre="Rock", rating=40, duration="4:11", lastPlayed="13/01/2008 10:24"),
		    Track(title="Her Charity", artist="Boom Crash Opera", size=5.8, album="Boom Crash Opera", genre="Rock", rating=40, duration="5:01", lastPlayed="13/01/2008 10:29"),
		    Track(title="Sleeping Time", artist="Boom Crash Opera", size=5.2, album="Boom Crash Opera", genre="Rock", rating=40, duration="4:26", lastPlayed="13/01/2008 10:33"),
		    Track(title="Great Wall", artist="Boom Crash Opera", size=4.5, album="Boom Crash Opera", genre="Rock", rating=80, duration="3:51", lastPlayed="24/03/2008 3:22"),
		    Track(title="Bombshell", artist="Boom Crash Opera", size=4.5, album="Boom Crash Opera", genre="Rock", rating=40, duration="3:50", lastPlayed="13/01/2008 10:41"),
		    Track(title="Caught Between Two Towns", artist="Boom Crash Opera", size=4, album="Boom Crash Opera", genre="Rock", rating=40, duration="3:28", lastPlayed="13/01/2008 10:44"),
		    Track(title="Too Hot To Think", artist="Boom Crash Opera", size=6.3, album="Boom Crash Opera", genre="Rock", rating=40, duration="5:26", lastPlayed="13/01/2008 10:50"),
		    Track(title="Starting Today", artist="Natalie Imbruglia", size=6.8, album="Counting Down the Days", genre="Adult Alternative Pop/Rock", rating=0, duration="2:56", lastPlayed="19/03/2008 9:48"),
		    Track(title="Shiver", artist="Natalie Imbruglia", size=8.6, album="Counting Down the Days", genre="Adult Alternative Pop/Rock", rating=80, duration="3:45", lastPlayed="19/03/2008 9:51"),
		    Track(title="Satisfied", artist="Natalie Imbruglia", size=8.1, album="Counting Down the Days", genre="Adult Alternative Pop/Rock", rating=0, duration="3:30", lastPlayed="19/03/2008 9:55"),
		    Track(title="Counting Down the Days", artist="Natalie Imbruglia", size=9.6, album="Counting Down the Days", genre="Adult Alternative Pop/Rock", rating=60, duration="4:09", lastPlayed="26/03/2008 10:33"),
		    Track(title="I Won't Be Lost", artist="Natalie Imbruglia", size=9, album="Counting Down the Days", genre="Adult Alternative Pop/Rock", rating=60, duration="3:53", lastPlayed="26/03/2008 10:37"),
		    Track(title="Slow Down", artist="Natalie Imbruglia", size=8.1, album="Counting Down the Days", genre="Adult Alternative Pop/Rock", rating=60, duration="3:32", lastPlayed="26/03/2008 10:41"),
		    Track(title="Sanctuary", artist="Natalie Imbruglia", size=7.3, album="Counting Down the Days", genre="Adult Alternative Pop/Rock", rating=60, duration="3:09", lastPlayed="26/03/2008 10:44"),
		    Track(title="Perfectly", artist="Natalie Imbruglia", size=7.8, album="Counting Down the Days", genre="Adult Alternative Pop/Rock", rating=80, duration="3:24", lastPlayed="26/03/2008 10:47"),
		    Track(title="On the Run", artist="Natalie Imbruglia", size=8.4, album="Counting Down the Days", genre="Adult Alternative Pop/Rock", rating=60, duration="3:38", lastPlayed="26/03/2008 10:51"),
		    Track(title="Come on Home", artist="Natalie Imbruglia", size=9.1, album="Counting Down the Days", genre="Adult Alternative Pop/Rock", rating=60, duration="3:56", lastPlayed="26/03/2008 10:55"),
		    Track(title="When You're Sleeping", artist="Natalie Imbruglia", size=7.2, album="Counting Down the Days", genre="Adult Alternative Pop/Rock", rating=60, duration="3:07", lastPlayed="26/03/2008 10:58"),
		    Track(title="Honeycomb Child", artist="Natalie Imbruglia", size=9.8, album="Counting Down the Days", genre="Adult Alternative Pop/Rock", rating=0, duration="4:15", lastPlayed="26/03/2008 11:02"),
		    Track(title="Last Living Souls", artist="Gorillaz", size=4.5, album="Demon Days", genre="Hip-Hop", rating=80, duration="3:11", lastPlayed="12/01/2008 9:55"),
		    Track(title="Kids With Guns", artist="Gorillaz", size=5.3, album="Demon Days", genre="Hip-Hop", rating=80, duration="3:46", lastPlayed="24/03/2008 12:52"),
		    Track(title="O Green World", artist="Gorillaz", size=6.3, album="Demon Days", genre="Hip-Hop", rating=80, duration="4:32", lastPlayed="24/03/2008 12:45"),
		    Track(title="Dirty Harry", artist="Gorillaz", size=5.2, album="Demon Days", genre="Hip-Hop", rating=80, duration="3:44", lastPlayed="24/03/2008 12:48"),
		    Track(title="Feel Good Inc.", artist="Gorillaz", size=5.4, album="Demon Days", genre="Hip-Hop", rating=100, duration="3:41", lastPlayed="24/03/2008 1:07"),
		    Track(title="El Manana", artist="Gorillaz", size=5.4, album="Demon Days", genre="Hip-Hop", rating=40, duration="3:50", lastPlayed="17/03/2008 5:45"),
		    Track(title="Every Plant We Reach Is Dead", artist="Gorillaz", size=6.8, album="Demon Days", genre="Hip-Hop", rating=80, duration="4:53", lastPlayed="24/03/2008 12:57"),
		    Track(title="November Has Come", artist="Gorillaz", size=3.8, album="Demon Days", genre="Hip-Hop", rating=80, duration="2:41", lastPlayed="24/03/2008 12:59"),
		    Track(title="All Alone", artist="Gorillaz", size=4.9, album="Demon Days", genre="Hip-Hop", rating=80, duration="3:30", lastPlayed="12/01/2008 9:49"),
		    Track(title="White Light", artist="Gorillaz", size=3, album="Demon Days", genre="Hip-Hop", rating=80, duration="2:09", lastPlayed="17/02/2008 3:30"),
		    Track(title="DARE", artist="Gorillaz", size=5.7, album="Demon Days", genre="Hip-Hop", rating=80, duration="4:05", lastPlayed="24/03/2008 1:03"),
		    Track(title="Don't Get Lost In Heaven", artist="Gorillaz", size=2.9, album="Demon Days", genre="Hip-Hop", rating=80, duration="2:01", lastPlayed="24/03/2008 12:36"),
		    Track(title="Demon Days", artist="Gorillaz", size=6.3, album="Demon Days", genre="Hip-Hop", rating=80, duration="4:29", lastPlayed="24/03/2008 12:40"),
		    Track(title="The Pretender", artist="Foo Fighters", size=8.3, album="Echoes, Silence, Patience & Grace", genre="Alternative", rating=60, duration="4:29", lastPlayed="24/03/2008 11:20"),
		    Track(title="Let It Die", artist="Foo Fighters", size=7.6, album="Echoes, Silence, Patience & Grace", genre="Alternative", rating=40, duration="4:05", lastPlayed="24/03/2008 11:24"),
		    Track(title="Erase/Replace", artist="Foo Fighters", size=7.8, album="Echoes, Silence, Patience & Grace", genre="Alternative", rating=60, duration="4:13", lastPlayed="24/03/2008 11:28"),
		    Track(title="Long Road To Ruin", artist="Foo Fighters", size=7, album="Echoes, Silence, Patience & Grace", genre="Alternative", rating=60, duration="3:45", lastPlayed="24/03/2008 11:31"),
		    Track(title="Come Alive", artist="Foo Fighters", size=9.6, album="Echoes, Silence, Patience & Grace", genre="Alternative", rating=60, duration="5:10", lastPlayed="24/03/2008 11:37"),
		    Track(title="Stranger Things Have Happened", artist="Foo Fighters", size=9.9, album="Echoes, Silence, Patience & Grace", genre="Alternative", rating=80, duration="5:21", lastPlayed="24/03/2008 11:42"),
		    Track(title="Cheer Up, Boys (Your Makeup Is Running)", artist="Foo Fighters", size=6.8, album="Echoes, Silence, Patience & Grace", genre="Alternative", rating=40, duration="3:41", lastPlayed="24/03/2008 11:45"),
		    Track(title="Summer's End", artist="Foo Fighters", size=8.6, album="Echoes, Silence, Patience & Grace", genre="Alternative", rating=60, duration="4:38", lastPlayed="24/03/2008 11:50"),
		    Track(title="The Ballad Of The Beaconsfield", artist="Foo Fighters", size=4.7, album="Echoes, Silence, Patience & Grace", genre="Instrumental", rating=80, duration="2:32", lastPlayed="24/03/2008 11:53"),
		    Track(title="Statues", artist="Foo Fighters", size=7, album="Echoes, Silence, Patience & Grace", genre="Alternative", rating=60, duration="3:48", lastPlayed="24/03/2008 11:57"),
		    Track(title="But, Honestly", artist="Foo Fighters", size=8.5, album="Echoes, Silence, Patience & Grace", genre="Alternative", rating=40, duration="4:35", lastPlayed="24/03/2008 12:01"),
		    Track(title="Home", artist="Foo Fighters", size=9, album="Echoes, Silence, Patience & Grace", genre="Alternative", rating=80, duration="4:52", lastPlayed="24/03/2008 12:06"),
		    Track(title="Once And For All (Demo) (Bonus Track)", artist="Foo Fighters", size=7, album="Echoes, Silence, Patience & Grace", genre="Alternative", rating=0, duration="3:48", lastPlayed="24/03/2008 12:10"),
		    Track(title="Going Under", artist="Evanescence", size=4.2, album="Fallen", genre="Metal", rating=0, duration="3:35", lastPlayed="4/02/2008 6:09"),
		    Track(title="Bring Me To Life", artist="Evanescence", size=4.6, album="Fallen", genre="Metal", rating=100, duration="3:57", lastPlayed="25/03/2008 12:56"),
		    Track(title="Everybody's Fool", artist="Evanescence", size=3.8, album="Fallen", genre="Metal", rating=0, duration="3:16", lastPlayed="4/02/2008 6:16"),
		    Track(title="Haunted", artist="Evanescence", size=3.6, album="Fallen", genre="Metal", rating=0, duration="3:07", lastPlayed="4/02/2008 6:19"),
		    Track(title="Tourniquet", artist="Evanescence", size=5.4, album="Fallen", genre="Metal", rating=0, duration="4:38", lastPlayed="4/02/2008 6:24"),
		    Track(title="Imaginary", artist="Evanescence", size=5, album="Fallen", genre="Metal", rating=0, duration="4:18", lastPlayed="4/02/2008 6:28"),
		    Track(title="Taking Over Me", artist="Evanescence", size=4.4, album="Fallen", genre="Metal", rating=0, duration="3:50", lastPlayed="15/03/2008 4:57"),
		    Track(title="Hello", artist="Evanescence", size=4.3, album="Fallen", genre="Metal", rating=0, duration="3:40", lastPlayed="4/02/2008 6:35"),
		    Track(title="My Last Breath", artist="Evanescence", size=4.8, album="Fallen", genre="Metal", rating=0, duration="4:07", lastPlayed="15/03/2008 4:23"),
		    Track(title="Whisper", artist="Evanescence", size=6.3, album="Fallen", genre="Metal", rating=0, duration="5:30", lastPlayed="4/02/2008 6:45"),
		    Track(title="My Immortal", artist="Evanescence", size=5.3, album="Fallen", genre="Metal", rating=0, duration="4:33", lastPlayed="4/02/2008 6:50"),
		    Track(title="One-Trick Pony", artist="Nelly Furtado", size=5, album="Folklore", genre="Pop", rating=80, duration="4:47", lastPlayed="15/03/2008 6:46"),
		    Track(title="Powerless (Say What You Want)", artist="Nelly Furtado", size=4.2, album="Folklore", genre="Pop", rating=80, duration="3:52", lastPlayed="15/03/2008 6:50"),
		    Track(title="Explode", artist="Nelly Furtado", size=4.1, album="Folklore", genre="Pop", rating=80, duration="3:44", lastPlayed="15/03/2008 6:53"),
		    Track(title="Try", artist="Nelly Furtado", size=4.9, album="Folklore", genre="Pop", rating=80, duration="4:39", lastPlayed="15/03/2008 11:49"),
		    Track(title="Fresh off the Boat", artist="Nelly Furtado", size=3.7, album="Folklore", genre="Pop", rating=60, duration="3:16", lastPlayed="22/02/2008 12:49"),
		    Track(title=u"Força", artist="Nelly Furtado", size=4, album="Folklore", genre="Pop", rating=40, duration="3:40", lastPlayed="22/02/2008 12:53"),
		    Track(title="The Grass Is Green", artist="Nelly Furtado", size=4.2, album="Folklore", genre="Pop", rating=40, duration="3:50", lastPlayed="22/02/2008 12:57"),
		    Track(title="Picture Perfect", artist="Nelly Furtado", size=5.5, album="Folklore", genre="Pop", rating=40, duration="5:15", lastPlayed="19/01/2008 12:08"),
		    Track(title="Saturdays", artist="Jarvis Church/Nelly Furtado", size=2.6, album="Folklore", genre="Pop", rating=40, duration="2:05", lastPlayed="7/01/2008 7:33"),
		    Track(title="Build You Up", artist="Nelly Furtado", size=5.2, album="Folklore", genre="Pop", rating=40, duration="4:58", lastPlayed="22/02/2008 1:03"),
		    Track(title="Island of Wonder", artist="Caetano Veloso/Nelly Furtado", size=4.2, album="Folklore", genre="Pop", rating=40, duration="3:49", lastPlayed="7/01/2008 7:42"),
		    Track(title="The Boy In The Bubble", artist="Paul Simon", size=5.6, album="Graceland", genre="Alternative", rating=60, duration="3:58", lastPlayed="24/01/2008 6:02"),
		    Track(title="Graceland", artist="Paul Simon", size=6.7, album="Graceland", genre="Alternative", rating=60, duration="4:48", lastPlayed="24/01/2008 6:07"),
		    Track(title="I Know What I Know", artist="Paul Simon", size=4.5, album="Graceland", genre="Alternative", rating=60, duration="3:12", lastPlayed="22/01/2008 5:27"),
		    Track(title="Gumboots", artist="Paul Simon", size=3.9, album="Graceland", genre="Alternative", rating=60, duration="2:43", lastPlayed="22/01/2008 5:30"),
		    Track(title="Diamonds On The Soles Of Her Shoes", artist="Paul Simon", size=8.1, album="Graceland", genre="Pop", rating=80, duration="5:46", lastPlayed="20/02/2008 9:44"),
		    Track(title="You Can Call Me Al", artist="Paul Simon", size=6.5, album="Graceland", genre="Alternative", rating=60, duration="4:39", lastPlayed="22/01/2008 5:40"),
		    Track(title="Under African Skies", artist="Paul Simon", size=5.1, album="Graceland", genre="Alternative", rating=60, duration="3:35", lastPlayed="19/03/2008 5:27"),
		    Track(title="Homeless", artist="Paul Simon", size=5.3, album="Graceland", genre="Alternative", rating=60, duration="3:47", lastPlayed="23/11/2007 7:01"),
		    Track(title="Crazy Love Vol II", artist="Paul Simon", size=6, album="Graceland", genre="Alternative", rating=60, duration="4:16", lastPlayed="22/01/2008 5:44"),
		    Track(title="That Was Your Mother", artist="Paul Simon", size=4.1, album="Graceland", genre="Alternative", rating=60, duration="2:53", lastPlayed="22/01/2008 5:47"),
		    Track(title="All Around The World Or The Myth of Fingerprints", artist="Paul Simon", size=4.6, album="Graceland", genre="Pop", rating=60, duration="3:13", lastPlayed="19/03/2008 5:31"),
		    Track(title="Vertigo", artist="U2", size=3.8, album="How To Dismantle An Atomic Bomb", genre="Rock", rating=100, duration="3:15", lastPlayed="18/12/2007 12:11"),
		    Track(title="Miracle Drug", artist="U2", size=4.7, album="How To Dismantle An Atomic Bomb", genre="Rock", rating=100, duration="3:59", lastPlayed="19/03/2008 12:04"),
		    Track(title="Sometimes You Can't Make It On Your Own", artist="U2", size=6, album="How To Dismantle An Atomic Bomb", genre="Rock", rating=60, duration="5:09", lastPlayed="18/12/2007 12:20"),
		    Track(title="Love And Peace Or Else", artist="U2", size=5.6, album="How To Dismantle An Atomic Bomb", genre="Rock", rating=60, duration="4:51", lastPlayed="15/03/2008 4:16"),
		    Track(title="City Of Blinding Lights", artist="U2", size=6.7, album="How To Dismantle An Atomic Bomb", genre="Rock", rating=80, duration="5:48", lastPlayed="19/03/2008 12:10"),
		    Track(title="All Because Of You", artist="U2", size=4.3, album="How To Dismantle An Atomic Bomb", genre="Rock", rating=60, duration="3:39", lastPlayed="6/11/2007 11:02"),
		    Track(title="A Man And A Woman", artist="U2", size=5.3, album="How To Dismantle An Atomic Bomb", genre="Rock", rating=100, duration="4:30", lastPlayed="19/03/2008 12:00"),
		    Track(title="Crumbs From Your Table", artist="U2", size=5.9, album="How To Dismantle An Atomic Bomb", genre="Rock", rating=60, duration="5:04", lastPlayed="6/11/2007 11:12"),
		    Track(title="One Step Closer", artist="U2", size=4.5, album="How To Dismantle An Atomic Bomb", genre="Rock", rating=40, duration="3:52", lastPlayed="6/11/2007 11:16"),
		    Track(title="Original Of The Species", artist="U2", size=5.5, album="How To Dismantle An Atomic Bomb", genre="Rock", rating=40, duration="4:41", lastPlayed="6/11/2007 11:20"),
		    Track(title="Yahweh", artist="U2", size=5.1, album="How To Dismantle An Atomic Bomb", genre="Rock", rating=80, duration="4:22", lastPlayed="18/03/2008 11:56"),
		    Track(title="Grim Travellers", artist="Bruce Cockburn", size=5.6, album="Humans", genre="Folk", rating=60, duration="4:50", lastPlayed="15/03/2008 4:31"),
		    Track(title="Rumours Of Glory", artist="Bruce Cockburn", size=4.3, album="Humans", genre="Folk", rating=80, duration="3:40", lastPlayed="25/03/2008 1:25"),
		    Track(title="More Not More", artist="Bruce Cockburn", size=4.4, album="Humans", genre="Folk", rating=60, duration="3:46", lastPlayed="27/10/2007 7:47"),
		    Track(title="You Get Bigger As You Go", artist="Bruce Cockburn", size=5.3, album="Humans", genre="Folk", rating=40, duration="4:36", lastPlayed="27/10/2007 7:51"),
		    Track(title="What About The Bond", artist="Bruce Cockburn", size=5.7, album="Humans", genre="Folk", rating=40, duration="4:56", lastPlayed="27/10/2007 7:56"),
		    Track(title="How I Spent My Fall Vacation", artist="Bruce Cockburn", size=5.9, album="Humans", genre="Folk", rating=60, duration="5:04", lastPlayed="27/10/2007 8:01"),
		    Track(title="Guerilla Betrayed", artist="Bruce Cockburn", size=4.6, album="Humans", genre="Folk", rating=60, duration="3:58", lastPlayed="27/10/2007 8:05"),
		    Track(title="Tokyo", artist="Bruce Cockburn", size=4.1, album="Humans", genre="Folk", rating=60, duration="3:29", lastPlayed="27/10/2007 8:09"),
		    Track(title="Fascist Architecture", artist="Bruce Cockburn", size=3.1, album="Humans", genre="Folk", rating=60, duration="2:38", lastPlayed="15/11/2007 3:40"),
		    Track(title="The Rose Above The Sky", artist="Bruce Cockburn", size=7.4, album="Humans", genre="Folk", rating=80, duration="6:22", lastPlayed="25/03/2008 1:22"),
		    Track(title="Torn", artist="Natalie Imbruglia", size=5.6, album="Left Of The Middle", genre="Adult Alternative Pop/Rock", rating=100, duration="4:04", lastPlayed="26/03/2008 11:06"),
		    Track(title="One More Addiction", artist="Natalie Imbruglia", size=4.9, album="Left Of The Middle", genre="Adult Alternative Pop/Rock", rating=60, duration="3:30", lastPlayed="26/03/2008 11:09"),
		    Track(title="Big Mistake", artist="Natalie Imbruglia", size=6.3, album="Left Of The Middle", genre="Adult Alternative Pop/Rock", rating=80, duration="4:32", lastPlayed="26/03/2008 11:14"),
		    Track(title="Leave Me Alone", artist="Natalie Imbruglia", size=6, album="Left Of The Middle", genre="Adult Alternative Pop/Rock", rating=60, duration="4:21", lastPlayed="26/03/2008 11:18"),
		    Track(title="Wishing I Was There", artist="Natalie Imbruglia", size=5.3, album="Left Of The Middle", genre="Adult Alternative Pop/Rock", rating=80, duration="3:51", lastPlayed="26/03/2008 11:22"),
		    Track(title="Smoke", artist="Natalie Imbruglia", size=6.4, album="Left Of The Middle", genre="Adult Alternative Pop/Rock", rating=60, duration="4:37", lastPlayed="26/03/2008 11:26"),
		    Track(title="Pigeons And Crumbs", artist="Natalie Imbruglia", size=7.4, album="Left Of The Middle", genre="Adult Alternative Pop/Rock", rating=0, duration="5:20", lastPlayed="26/03/2008 11:32"),
		    Track(title="Don't You Think", artist="Natalie Imbruglia", size=5.4, album="Left Of The Middle", genre="Adult Alternative Pop/Rock", rating=80, duration="3:55", lastPlayed="26/03/2008 11:36"),
		    Track(title="Impressed", artist="Natalie Imbruglia", size=6.6, album="Left Of The Middle", genre="Adult Alternative Pop/Rock", rating=80, duration="4:48", lastPlayed="26/03/2008 11:40"),
		    Track(title="Intuition", artist="Natalie Imbruglia", size=4.7, album="Left Of The Middle", genre="Adult Alternative Pop/Rock", rating=80, duration="3:22", lastPlayed="26/03/2008 11:44"),
		    Track(title="City", artist="Natalie Imbruglia", size=6.3, album="Left Of The Middle", genre="Adult Alternative Pop/Rock", rating=0, duration="4:33", lastPlayed="26/03/2008 11:48"),
		    Track(title="Left Of The Middle", artist="Natalie Imbruglia", size=5.2, album="Left Of The Middle", genre="Adult Alternative Pop/Rock", rating=60, duration="3:46", lastPlayed="26/03/2008 11:52"),
		    Track(title="Life For Rent", artist="Dido", size=4.3, album="Life For Rent", genre="Pop", rating=80, duration="3:43", lastPlayed="20/02/2008 9:35"),
		    Track(title="Mary's In India", artist="Dido", size=4.3, album="Life For Rent", genre="Pop", rating=80, duration="3:44", lastPlayed="20/02/2008 9:39"),
		    Track(title="See You When You're 40", artist="Dido", size=6.2, album="Life For Rent", genre="Pop", rating=80, duration="5:22", lastPlayed="20/02/2008 9:15"),
		    Track(title="Don't Leave Home", artist="Dido", size=4.4, album="Life For Rent", genre="Pop", rating=80, duration="3:49", lastPlayed="20/02/2008 9:31"),
		    Track(title="Who Makes You Feel", artist="Dido", size=5.1, album="Life For Rent", genre="Pop", rating=80, duration="4:23", lastPlayed="20/02/2008 9:09"),
		    Track(title="Sand In My Shoes", artist="Dido", size=5.8, album="Life For Rent", genre="Pop", rating=80, duration="5:02", lastPlayed="20/02/2008 9:24"),
		    Track(title="Do You Have A Little Time", artist="Dido", size=4.6, album="Life For Rent", genre="Pop", rating=80, duration="3:57", lastPlayed="20/02/2008 9:19"),
		    Track(title="This Land Is Mine", artist="Dido", size=4.4, album="Life For Rent", genre="Pop", rating=80, duration="3:48", lastPlayed="20/02/2008 9:27"),
		    Track(title="See The Sun", artist="Dido", size=12.2, album="Life For Rent", genre="Pop", rating=60, duration="10:36", lastPlayed="22/12/2007 10:28"),
		    Track(title="Lifesong", artist="Casting Crowns", size=4.9, album="Lifesong", genre="Religious", rating=80, duration="5:17", lastPlayed="24/03/2008 2:36"),
		    Track(title="Praise You in This Storm", artist="Casting Crowns", size=4.6, album="Lifesong", genre="Religious", rating=100, duration="4:59", lastPlayed="24/03/2008 2:17"),
		    Track(title="Does Anybody Hear Her", artist="Casting Crowns", size=4.2, album="Lifesong", genre="Religious", rating=60, duration="4:30", lastPlayed="26/12/2007 3:07"),
		    Track(title="Stained Glass Masquerade", artist="Casting Crowns", size=3.6, album="Lifesong", genre="Religious", rating=60, duration="3:52", lastPlayed="26/12/2007 3:11"),
		    Track(title="Love Them Like Jesus", artist="Casting Crowns", size=4.2, album="Lifesong", genre="Religious", rating=60, duration="4:32", lastPlayed="4/11/2007 3:00"),
		    Track(title="Set Me Free", artist="Casting Crowns", size=4.1, album="Lifesong", genre="Religious", rating=80, duration="4:27", lastPlayed="24/03/2008 2:12"),
		    Track(title="While You Were Sleeping", artist="Casting Crowns", size=4.5, album="Lifesong", genre="Religious", rating=60, duration="4:55", lastPlayed="1/01/2008 12:39"),
		    Track(title="Father, Spirit, Jesus", artist="Casting Crowns", size=4.8, album="Lifesong", genre="Religious", rating=80, duration="5:11", lastPlayed="24/03/2008 2:41"),
		    Track(title="In Me", artist="Casting Crowns", size=4.4, album="Lifesong", genre="Religious", rating=80, duration="4:44", lastPlayed="24/03/2008 2:31"),
		    Track(title="Prodigal", artist="Casting Crowns", size=5.3, album="Lifesong", genre="Religious", rating=60, duration="5:45", lastPlayed="26/12/2007 3:36"),
		    Track(title="And Now My Lifesong Sings", artist="Casting Crowns", size=3.8, album="Lifesong", genre="Religious", rating=60, duration="4:03", lastPlayed="1/01/2008 12:54"),
		    Track(title="Afraid", artist="Nelly Furtado", size=3.3, album="Loose", genre="Pop", rating=80, duration="3:35", lastPlayed="15/03/2008 11:41"),
		    Track(title="Maneater", artist="Nelly Furtado", size=4.1, album="Loose", genre="Pop", rating=40, duration="4:25", lastPlayed="19/01/2008 12:20"),
		    Track(title="Promiscuous", artist="Nelly Furtado", size=3.7, album="Loose", genre="Pop", rating=60, duration="4:02", lastPlayed="21/01/2008 5:01"),
		    Track(title="Glow", artist="Nelly Furtado", size=3.7, album="Loose", genre="Pop", rating=80, duration="4:02", lastPlayed="15/03/2008 11:45"),
		    Track(title="Showtime", artist="Nelly Furtado", size=3.9, album="Loose", genre="Pop", rating=80, duration="4:15", lastPlayed="15/03/2008 6:37"),
		    Track(title="No Hay Igual", artist="Nelly Furtado", size=3.3, album="Loose", genre="Pop", rating=80, duration="3:35", lastPlayed="15/03/2008 11:33"),
		    Track(title="Te Busque", artist="Nelly Furtado", size=3.4, album="Loose", genre="Pop", rating=60, duration="3:38", lastPlayed="21/01/2008 5:17"),
		    Track(title="Say It Right", artist="Nelly Furtado", size=3.4, album="Loose", genre="Pop", rating=60, duration="3:43", lastPlayed="21/01/2008 5:21"),
		    Track(title="Do It", artist="Nelly Furtado", size=3.4, album="Loose", genre="Pop", rating=60, duration="3:41", lastPlayed="21/01/2008 5:24"),
		    Track(title="In God's Hands", artist="Nelly Furtado", size=4.5, album="Loose", genre="Pop", rating=40, duration="4:54", lastPlayed="21/01/2008 5:29"),
		    Track(title="Wait for You", artist="Nelly Furtado", size=4.8, album="Loose", genre="Pop", rating=40, duration="5:11", lastPlayed="21/01/2008 5:34"),
		    Track(title="Somebody to Love", artist="Nelly Furtado", size=4.6, album="Loose", genre="Pop", rating=40, duration="4:56", lastPlayed="21/01/2008 5:39"),
		    Track(title="All Good Things (Come to an End)", artist="Nelly Furtado", size=4.8, album="Loose", genre="Pop", rating=40, duration="5:10", lastPlayed="21/01/2008 5:44"),
		    Track(title="Someone Somewhere In Summertime", artist="Simple Minds", size=6.5, album="New Gold Gream (81/82/83/84)", genre="Rock", rating=60, duration="4:38", lastPlayed="1/09/2007 9:11"),
		    Track(title="Colours Fly And Catherine Wheel", artist="Simple Minds", size=5.4, album="New Gold Gream (81/82/83/84)", genre="Rock", rating=80, duration="3:50", lastPlayed="19/11/2007 8:34"),
		    Track(title="Big Sleep", artist="Simple Minds", size=6.9, album="New Gold Gream (81/82/83/84)", genre="Rock", rating=40, duration="4:58", lastPlayed="1/09/2007 9:20"),
		    Track(title="Somebody Up There Likes You", artist="Simple Minds", size=7, album="New Gold Gream (81/82/83/84)", genre="Rock", rating=40, duration="5:02", lastPlayed="1/09/2007 9:25"),
		    Track(title="New Gold Dream (81-82-83-84)", artist="Simple Minds", size=7.9, album="New Gold Gream (81/82/83/84)", genre="Rock", rating=60, duration="5:39", lastPlayed="1/09/2007 9:30"),
		    Track(title="Glittering Prize", artist="Simple Minds", size=6.4, album="New Gold Gream (81/82/83/84)", genre="Rock", rating=60, duration="4:34", lastPlayed="13/08/2007 8:24"),
		    Track(title="Hunter And The Hunted", artist="Simple Minds", size=8.3, album="New Gold Gream (81/82/83/84)", genre="Rock", rating=60, duration="5:56", lastPlayed="13/08/2007 8:30"),
		    Track(title="King Is White And In The Crowd", artist="Simple Minds", size=9.7, album="New Gold Gream (81/82/83/84)", genre="Rock", rating=20, duration="7:00", lastPlayed="13/08/2007 8:37"),
		    Track(title="Promised you a miracle", artist="Simple Minds", size=4.7, album="New Gold Gream (81/82/83/84)", genre="Rock", rating=40, duration="4:01", lastPlayed="10/01/2008 12:01"),
		    Track(title="Psycho Killer", artist="Talking Heads", size=5.2, album="Once In A Lifetime", genre="Alternative", rating=40, duration="4:22", lastPlayed="4/02/2008 5:06"),
		    Track(title="Take Me To The River", artist="Talking Heads", size=6, album="Once In A Lifetime", genre="Alternative", rating=40, duration="5:03", lastPlayed="4/02/2008 5:11"),
		    Track(title="Once In A Lifetime", artist="Talking Heads", size=5.2, album="Once In A Lifetime", genre="Alternative", rating=80, duration="4:20", lastPlayed="4/02/2008 5:15"),
		    Track(title="Burning Down The House", artist="Talking Heads", size=4.8, album="Once In A Lifetime", genre="Alternative", rating=100, duration="4:02", lastPlayed="10/02/2008 12:19"),
		    Track(title="This Must Be The Place (Naive Melody)", artist="Talking Heads", size=5.9, album="Once In A Lifetime", genre="Alternative", rating=40, duration="4:55", lastPlayed="4/02/2008 5:24"),
		    Track(title="Slippery People (Live)", artist="Talking Heads", size=5.1, album="Once In A Lifetime", genre="Alternative", rating=40, duration="4:14", lastPlayed="4/02/2008 5:28"),
		    Track(title="Life During Wartime (Live)", artist="Talking Heads", size=6, album="Once In A Lifetime", genre="Alternative", rating=40, duration="5:05", lastPlayed="4/02/2008 5:34"),
		    Track(title="And She Was", artist="Talking Heads", size=4.4, album="Once In A Lifetime", genre="Alternative", rating=60, duration="3:39", lastPlayed="4/02/2008 5:37"),
		    Track(title="Road To Nowhere", artist="Talking Heads", size=5.2, album="Once In A Lifetime", genre="Alternative", rating=80, duration="4:20", lastPlayed="4/02/2008 5:42"),
		    Track(title="Wild Wild Life", artist="Talking Heads", size=4.4, album="Once In A Lifetime", genre="Alternative", rating=60, duration="3:42", lastPlayed="4/02/2008 5:45"),
		    Track(title="Blind", artist="Talking Heads", size=5.9, album="Once In A Lifetime", genre="Alternative", rating=40, duration="5:00", lastPlayed="4/02/2008 5:50"),
		    Track(title="Nothing But Flowers", artist="Talking Heads", size=6.6, album="Once In A Lifetime", genre="Alternative", rating=40, duration="5:35", lastPlayed="4/02/2008 5:56"),
		    Track(title="Sax And Violins", artist="Talking Heads", size=6.3, album="Once In A Lifetime", genre="Alternative", rating=60, duration="5:18", lastPlayed="4/02/2008 6:01"),
		    Track(title="Lifetime Piling Up", artist="Talking Heads", size=4.6, album="Once In A Lifetime", genre="Alternative", rating=80, duration="3:52", lastPlayed="4/02/2008 6:05"),
		    Track(title="Honey", artist="Moby", size=4.8, album="Play", genre="Alternative", rating=80, duration="3:29", lastPlayed="22/02/2008 10:59"),
		    Track(title="Find My Baby", artist="Moby", size=5.5, album="Play", genre="Alternative", rating=60, duration="3:59", lastPlayed="22/02/2008 11:03"),
		    Track(title="Porcelain", artist="Moby", size=5.6, album="Play", genre="Alternative", rating=40, duration="4:01", lastPlayed="14/03/2008 11:34"),
		    Track(title="Why Does My Heart Feel So Bad?", artist="Moby", size=6.1, album="Play", genre="Alternative", rating=80, duration="4:25", lastPlayed="22/02/2008 11:12"),
		    Track(title="Southside", artist="Moby", size=5.3, album="Play", genre="Alternative", rating=80, duration="3:50", lastPlayed="3/03/2008 4:20"),
		    Track(title="Rushing", artist="Moby", size=4.2, album="Play", genre="Instrumental", rating=60, duration="3:00", lastPlayed="14/03/2008 11:30"),
		    Track(title="Bodyrock", artist="Moby", size=5, album="Play", genre="Alternative", rating=100, duration="3:36", lastPlayed="14/03/2008 11:27"),
		    Track(title="Natural Blues", artist="Moby", size=5.9, album="Play", genre="Alternative", rating=40, duration="4:14", lastPlayed="22/02/2008 11:27"),
		    Track(title="Machete", artist="Moby", size=5.1, album="Play", genre="Alternative", rating=20, duration="3:38", lastPlayed="22/02/2008 11:30"),
		    Track(title="7", artist="Moby", size=1.5, album="Play", genre="Instrumental", rating=20, duration="1:02", lastPlayed="14/03/2008 11:23"),
		    Track(title="Run On", artist="Moby", size=5.2, album="Play", genre="Alternative", rating=40, duration="3:45", lastPlayed="19/03/2008 5:52"),
		    Track(title="Down Slow", artist="Moby", size=2.2, album="Play", genre="Instrumental", rating=40, duration="1:35", lastPlayed="14/03/2008 11:22"),
		    Track(title="If Things Were Perfect", artist="Moby", size=6, album="Play", genre="Alternative", rating=60, duration="4:19", lastPlayed="22/02/2008 11:40"),
		    Track(title="Everloving", artist="Moby", size=4.8, album="Play", genre="Alternative", rating=40, duration="3:26", lastPlayed="27/12/2007 11:06"),
		    Track(title="Inside", artist="Moby", size=6.7, album="Play", genre="Alternative", rating=60, duration="4:49", lastPlayed="27/12/2007 11:10"),
		    Track(title="Guitar Flute And String", artist="Moby", size=3, album="Play", genre="Alternative", rating=60, duration="2:09", lastPlayed="27/12/2007 11:12"),
		    Track(title="The Sky Is Broken", artist="Moby", size=6, album="Play", genre="Alternative", rating=60, duration="4:19", lastPlayed="4/11/2007 2:22"),
		    Track(title="My Weakness", artist="Moby", size=5, album="Play", genre="Alternative", rating=40, duration="3:38", lastPlayed="4/11/2007 2:26"),
		    Track(title="Discotheque", artist="U2", size=6.1, album="Pop", genre="Rock", rating=100, duration="5:19", lastPlayed="3/03/2008 4:16"),
		    Track(title="Do You Feel Loved", artist="U2", size=5.9, album="Pop", genre="Rock", rating=60, duration="5:07", lastPlayed="7/02/2008 11:04"),
		    Track(title="Mofo", artist="U2", size=6.7, album="Pop", genre="Rock", rating=60, duration="5:49", lastPlayed="7/02/2008 11:10"),
		    Track(title="If God Will Send His Angels", artist="U2", size=6.2, album="Pop", genre="Rock", rating=80, duration="5:23", lastPlayed="7/02/2008 11:16"),
		    Track(title="Staring At The Sun", artist="U2", size=5.3, album="Pop", genre="Rock", rating=80, duration="4:37", lastPlayed="19/03/2008 12:15"),
		    Track(title="Last Night On Earth", artist="U2", size=5.5, album="Pop", genre="Rock", rating=100, duration="4:46", lastPlayed="7/02/2008 11:25"),
		    Track(title="Gone", artist="U2", size=5.1, album="Pop", genre="Rock", rating=60, duration="4:27", lastPlayed="7/02/2008 11:29"),
		    Track(title="Miami", artist="U2", size=5.6, album="Pop", genre="Rock", rating=40, duration="4:53", lastPlayed="14/11/2007 5:53"),
		    Track(title="The Playboy Mansion", artist="U2", size=5.4, album="Pop", genre="Rock", rating=40, duration="4:41", lastPlayed="14/11/2007 5:58"),
		    Track(title="If You Wear That Velvet Dress", artist="U2", size=6.1, album="Pop", genre="Rock", rating=60, duration="5:15", lastPlayed="14/11/2007 6:03"),
		    Track(title="Please", artist="U2", size=5.8, album="Pop", genre="Rock", rating=40, duration="5:03", lastPlayed="6/02/2008 11:28"),
		    Track(title="Wake Up Dead Man", artist="U2", size=5.6, album="Pop", genre="Rock", rating=40, duration="4:53", lastPlayed="6/02/2008 11:20"),
		    Track(title="The River", artist="Live", size=4.1, album="Songs From Black Mountain", genre="Gospel & Religious", rating=80, duration="2:58", lastPlayed="24/03/2008 10:55"),
		    Track(title="Mystery", artist="Live", size=5.2, album="Songs From Black Mountain", genre="Gospel & Religious", rating=80, duration="3:45", lastPlayed="24/03/2008 10:59"),
		    Track(title="Get Ready", artist="Live", size=4.9, album="Songs From Black Mountain", genre="Gospel & Religious", rating=60, duration="3:32", lastPlayed="23/03/2008 1:02"),
		    Track(title="Show", artist="Live", size=4.7, album="Songs From Black Mountain", genre="Gospel & Religious", rating=80, duration="3:25", lastPlayed="24/03/2008 11:03"),
		    Track(title="Wings", artist="Live", size=5.3, album="Songs From Black Mountain", genre="Gospel & Religious", rating=0, duration="3:51", lastPlayed="23/03/2008 1:09"),
		    Track(title="Sofia", artist="Live", size=5.4, album="Songs From Black Mountain", genre="Gospel & Religious", rating=0, duration="3:54", lastPlayed="23/03/2008 1:13"),
		    Track(title="Love Shines (A Song For My Daughters About God)", artist="Live", size=4.6, album="Songs From Black Mountain", genre="Gospel & Religious", rating=0, duration="3:21", lastPlayed="23/03/2008 1:16"),
		    Track(title="Where Do We Go From Here", artist="Live", size=5.2, album="Songs From Black Mountain", genre="Gospel & Religious", rating=0, duration="3:46", lastPlayed="23/03/2008 1:20"),
		    Track(title="Home", artist="Live", size=4.7, album="Songs From Black Mountain", genre="Gospel & Religious", rating=0, duration="3:23", lastPlayed="23/03/2008 1:23"),
		    Track(title="All I Need", artist="Live", size=4.5, album="Songs From Black Mountain", genre="Gospel & Religious", rating=0, duration="3:14", lastPlayed="23/03/2008 1:26"),
		    Track(title="You Are Not Alone", artist="Live", size=5.2, album="Songs From Black Mountain", genre="Gospel & Religious", rating=0, duration="3:44", lastPlayed="19/02/2008 12:05"),
		    Track(title="Night Of Nights", artist="Live", size=4.9, album="Songs From Black Mountain", genre="Gospel & Religious", rating=0, duration="3:33", lastPlayed="19/02/2008 12:08"),
		    Track(title="All For Believing", artist="Missy Higgins", size=4.2, album="The Sound Of White", genre="Folk", rating=80, duration="3:30", lastPlayed="30/01/2008 4:21"),
		    Track(title="Don't Ever", artist="Missy Higgins", size=3.5, album="The Sound Of White", genre="Folk", rating=40, duration="2:54", lastPlayed="30/01/2008 4:24"),
		    Track(title="Scar", artist="Missy Higgins", size=4.3, album="The Sound Of White", genre="Folk", rating=80, duration="3:36", lastPlayed="30/01/2008 4:28"),
		    Track(title="Ten Days", artist="Missy Higgins", size=4.5, album="The Sound Of White", genre="Folk", rating=80, duration="3:48", lastPlayed="30/01/2008 5:10"),
		    Track(title="Nightminds", artist="Missy Higgins", size=4, album="The Sound Of White", genre="Folk", rating=60, duration="3:21", lastPlayed="30/01/2008 5:13"),
		    Track(title="Casualty", artist="Missy Higgins", size=5, album="The Sound Of White", genre="Folk", rating=60, duration="4:15", lastPlayed="15/03/2008 4:43"),
		    Track(title="Any Day Now", artist="Missy Higgins", size=4.6, album="The Sound Of White", genre="Folk", rating=60, duration="3:54", lastPlayed="30/12/2007 2:35"),
		    Track(title="Katie", artist="Missy Higgins", size=4.3, album="The Sound Of White", genre="Folk", rating=60, duration="3:37", lastPlayed="30/12/2007 2:38"),
		    Track(title="The River", artist="Missy Higgins", size=5.3, album="The Sound Of White", genre="Folk", rating=60, duration="4:30", lastPlayed="16/11/2007 9:06"),
		    Track(title="The Special Two", artist="Missy Higgins", size=5.2, album="The Sound Of White", genre="Folk", rating=100, duration="4:25", lastPlayed="30/01/2008 5:18"),
		    Track(title="This Is How It Goes", artist="Missy Higgins", size=4.2, album="The Sound Of White", genre="Folk", rating=60, duration="3:35", lastPlayed="30/01/2008 5:22"),
		    Track(title="The Sound Of White", artist="Missy Higgins", size=5.7, album="The Sound Of White", genre="Folk", rating=80, duration="4:52", lastPlayed="30/01/2008 5:27"),
		    Track(title="They Weren't There", artist="Missy Higgins", size=4.9, album="The Sound Of White", genre="Folk", rating=60, duration="4:08", lastPlayed="30/12/2007 2:56"),
		]
		fe = wx.FontEnumerator()
		fe.EnumerateFacenames()
		fontFaces = fe.GetFacenames()
		colours = [wx.Colour(*x[1:]) for x in colourdb.getColourInfoList()]
		for x in self.dataObjects:
			# Convert the 'duration' and 'lastPlayed' attributes into a time() and a datetime() respectively
			minsAndSeconds = x.duration.split(":")
			x.duration = time(minute=int(minsAndSeconds[0]), second=int(minsAndSeconds[1]))
			x.lastPlayed = xdt(*(strptime(x.lastPlayed, "%d/%m/%Y %H:%M")[0:6]))
	    
			# Give some tracks a dark colour that can be used for the text
			x.trackColour = random.choice(colours)
			if sum(x.trackColour.Get()) > 255*3/2:
				x.trackColour = None
	    
			# Give some tracks a funny font
			if random.random() > 0.75:
				x.font = wx.FFont(11, wx.DEFAULT, face=random.choice(fontFaces))
			else:
				x.font = None
    
	def InitSearchCtrls(self):
		"""Initialize the search controls"""
		for (searchCtrl, olv) in [(self.searchCtrlSimple, self.olvSimple),
		    (self.searchCtrlComplex, self.olvComplex),
		    (self.searchCtrlFast, self.olvFast),
		    (self.searchCtrlGroup, self.olvGroup)]:
			# Use default parameters to pass extra information to the event handler
			def _handleText(evt, searchCtrl=searchCtrl, olv=olv):
				self.OnTextSearchCtrl(evt, searchCtrl, olv)
			def _handleCancel(evt, searchCtrl=searchCtrl, olv=olv):
				self.OnCancelSearchCtrl(evt, searchCtrl, olv)
			searchCtrl.Bind(wx.EVT_TEXT, _handleText)
			searchCtrl.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, _handleCancel)
			olv.SetFilter(Filter.TextSearch(olv, olv.columns[0:4]))
    
	def InitUI(self):
		"""Initialize the UI portion of the application.
	
		This is the part that shows how to use the various flavours of ObjectListView.
		"""
	
		# Setup some images. It's almost always more convenient to use named images
		# rather than using the image indicies. But both names and indicies can be used
		musicImageIndex = self.olvSimple.AddNamedImages("music", self._imagePath("music16.png"), self._imagePath("music32.png"))
		self.olvSimple.AddNamedImages("group", self._imagePath("Group16.bmp"), self._imagePath("Group32.bmp"))
		self.olvSimple.AddNamedImages("user", self._imagePath("User16.bmp"), self._imagePath("User32.bmp"))
		self.olvSimple.AddNamedImages("star", self._imagePath("star16.png"), self._imagePath("star32.png"))
		self.olvSimple.AddNamedImages("ok", self._imagePath("tick16.png"), self._imagePath("tick32.png"))
		self.olvSimple.AddNamedImages("dud", self._imagePath("no16.png"), self._imagePath("no32.png"))
		self.olvSimple.AddNamedImages("undecided", self._imagePath("question16.png"))
	
		# This function is an "editor factory" that creates and returns a widget that
		# will correctly edit wx.Colour objects
		def makeColourEditor(olv, rowIndex, subItemIndex):
			odcb = OwnerDrawnEditor.ColourComboBox(olv)
			# OwnerDrawnComboxBoxes don't generate EVT_CHAR so look for keydown instead
			odcb.Bind(wx.EVT_KEY_DOWN, olv._HandleChar)
			return odcb
	
		# Register the "editor factory" for wx.Colour objects
		CellEditorRegistry().RegisterCreatorFunction(type(wx.BLACK), makeColourEditor)
	
		#----------------------------------------------------------------------
		# Init Simple list
	
		# These columns are defined without any callbacks.
		# Note: the "Album" column is space filling, so it will get larger and smaller as the window resizes
		simpleColumns = [
		    ColumnDefn("Title", "left", 160, valueGetter="title", imageGetter=musicImageIndex, minimumWidth=40, maximumWidth=200),
		    ColumnDefn("Artist", "left", 150, valueGetter="artist", minimumWidth=40, maximumWidth=200, autoCompleteCellEditor=True, headerImage="star"),
		    ColumnDefn("Album", "left", 150, valueGetter="album", maximumWidth=250, isSpaceFilling=True, autoCompleteCellEditor=True, headerImage=2),
		    ColumnDefn("Genre", "left", 60, valueGetter="genre", autoCompleteComboBoxCellEditor=True),
		    ColumnDefn("Size", "right", 60, valueGetter="size"),
		    ColumnDefn("Rating", "center", 60, valueGetter="rating"),
		    ColumnDefn("Duration", "center", 150, valueGetter="duration", stringConverter="%S seconds and %M minutes"),
		    ColumnDefn("Date Played", "left", 150, valueGetter="dateLastPlayed", stringConverter="%x", valueSetter="SetDateLastPlayed"),
		    ColumnDefn("Last Played", "left", 150, valueGetter="lastPlayed", stringConverter="%x %X", maximumWidth=100),
		    ColumnDefn("Colour", "left", 60, valueGetter="trackColour", minimumWidth=40),
		    ]
	
		self.olvSimple.SetColumns(simpleColumns)
		self.olvSimple.CreateCheckStateColumn(1)
		self.olvSimple.SetObjects(self.dataObjects)
	
		# Allow the cell values to be edited when double-clicked
		self.olvSimple.cellEditMode = ObjectListView.CELLEDIT_SINGLECLICK
	
		#----------------------------------------------------------------------
		# Init Complex list
	
		# In the complex tab, we use lots of callbacks
		# For callbacks it is always easier to use image names rather than image indicies
	
		soloArtists = ["Nelly Furtado", "Missy Higgins", "Moby", "Natalie Imbruglia", "Dido", "Paul Simon", "Bruce Cockburn"]
		def artistImageGetter(track):
			if track.artist in soloArtists:
				return "user"
			else:
				return "group"
	
		def ratingImageGetter(track):
			if track.rating > 80:
				return "star"
			elif track.rating > 20:
				return "ok"
			elif track.rating > 0:
				return "dud"
			else:
				return "undecided"
	
		def fontToStringConverter(aFont):
			if aFont:
				return aFont.GetFaceName()
			else:
				return ""
	
		# Give rows the color and font stored in the model. Old songs are drawn in Impact
		# The "Update Selection" command changes the last played date, which should remove
		# the Impact font. This is a way to test row updating.
		def rowFormatter(listItem, track):
			if track.trackColour:
				listItem.SetTextColour(track.trackColour)
			if track.font:
				listItem.SetFont(track.font)
	
		def colourToString(colour):
			return wx.TheColourDatabase.FindName(colour) or str(colour)
	
		# Just to show it can be done, we prevent all edits on the second row.
		def handleCellEditStarting(evt):
			if evt.rowIndex == 1:
				evt.Veto()
			if evt.subItemIndex in (1, 2):
				evt.cellBounds[3] += 2 # Make the textbox a bit taller
	
		def handleCellEditFinishing(evt):
			pass
	
		# This is an "cell editor factory" that we install in just one column
		def makeFontEditor(olv, rowIndex, subItemIndex):
			odcb = OwnerDrawnEditor.FontFaceComboBox(olv)
			# OwnerDrawnComboxBoxes don't generate EVT_CHAR so look for keydown instead
			odcb.Bind(wx.EVT_KEY_DOWN, olv._HandleChar)
			return odcb
	
		# Reuse the same images as the simple list
		self.olvComplex.SetImageLists(self.olvSimple.smallImageList, self.olvSimple.normalImageList)
	
		# This list is similar to the Simple columns, but it uses a lot of callbacks
		columns = [
		    ColumnDefn("Title", "left", 200, valueGetter="title", imageGetter=musicImageIndex,
			       minimumWidth=40, maximumWidth=200),
		    ColumnDefn("Artist", "left", 150, valueGetter="artist", imageGetter=artistImageGetter,
			       minimumWidth=40, maximumWidth=200, autoCompleteCellEditor=True),
		    ColumnDefn("Album", "left", 150, valueGetter="album", maximumWidth=250, isSpaceFilling=True, autoCompleteCellEditor=True),
		    ColumnDefn("Genre", "left", 100, valueGetter="genre", autoCompleteComboBoxCellEditor=True),
		    ColumnDefn("Size", "right", 50, valueGetter="size"),
		    ColumnDefn("Rating", "center", 50, valueGetter="rating", imageGetter=ratingImageGetter),
		    ColumnDefn("Duration", "center", 150, valueGetter="duration", stringConverter="%S seconds and %M minutes"),
		    ColumnDefn("Date Played", "left", 150, valueGetter="dateLastPlayed", stringConverter="%x", valueSetter="SetDateLastPlayed"),
		    ColumnDefn("Last Played", "left", 150, valueGetter="lastPlayed", stringConverter="%x %X", maximumWidth=150),
		    ColumnDefn("Colour", "left", 60, valueGetter="trackColour", stringConverter=colourToString, minimumWidth=60),
		    ColumnDefn("Font", "left", 60, valueGetter="font", valueSetter="SetFontFace", cellEditorCreator=makeFontEditor,
			       stringConverter=fontToStringConverter),
		]
	
		self.olvComplex.Bind(EVT_CELL_EDIT_STARTING, handleCellEditStarting)
		self.olvComplex.Bind(EVT_CELL_EDIT_FINISHING, handleCellEditFinishing)
	
		self.olvComplex.rowFormatter = rowFormatter
		self.olvComplex.SetColumns(columns)
		self.olvComplex.SetObjects(self.dataObjects)
		self.olvComplex.cellEditMode = ObjectListView.CELLEDIT_DOUBLECLICK
	
		#----------------------------------------------------------------------
		# Init Virtual list
	
		# A virtual list has to have a callable installed that says which model object is
		# shown at a given index
		def objectGetter(index):
			return self.dataObjects[index % len(self.dataObjects)]
	
		# Again, we reuse the image lists
		self.olvVirtual.SetImageLists(self.olvSimple.smallImageList, self.olvSimple.normalImageList)
	
		self.olvVirtual.Bind(EVT_CELL_EDIT_STARTING, handleCellEditStarting)
		self.olvVirtual.Bind(EVT_CELL_EDIT_FINISHING, handleCellEditFinishing)
	
		self.olvVirtual.rowFormatter = rowFormatter
		self.olvVirtual.SetColumns(columns)
		self.olvVirtual.cellEditMode = ObjectListView.CELLEDIT_DOUBLECLICK
	
		# A virtual list must have these two methods called
		self.olvVirtual.SetObjectGetter(objectGetter)
		self.olvVirtual.SetItemCount(100000)
	
		#----------------------------------------------------------------------
		# Init Fast list
	
		# A FastObjectListView operates just like an ordinary ObjectListView -- only faster :-)
	
		self.olvFast.SetImageLists(self.olvSimple.smallImageList, self.olvSimple.normalImageList)
	
		self.olvFast.Bind(EVT_CELL_EDIT_STARTING, handleCellEditStarting)
		self.olvFast.Bind(EVT_CELL_EDIT_FINISHING, handleCellEditFinishing)
	
		# Just to show how to do it, this changes the message and the font that is
		# shown when the list is empty
		self.olvFast.SetEmptyListMsg("This is a long message that shows only when the list is empty")
		self.olvFast.SetEmptyListMsgFont(wx.FFont(24, wx.DEFAULT, face="Tekton"))
	
		self.olvFast.rowFormatter = rowFormatter
		self.olvFast.SetColumns(columns)
		self.olvFast.SetObjects(self._MakeAtLeast([], 100000))
		self.olvFast.cellEditMode = ObjectListView.CELLEDIT_DOUBLECLICK
	
		#----------------------------------------------------------------------
		# Init Group list
	
		self.olvGroup.SetImageLists(self.olvSimple.smallImageList, self.olvSimple.normalImageList)
		self.olvGroup._InitializeImages()
	
		# This is the same list as used on complex, but with group related information added
		columns = [
		    ColumnDefn("Title", "left", 200, valueGetter="title", imageGetter=musicImageIndex,
			       minimumWidth=40, maximumWidth=200, useInitialLetterForGroupKey=True),
		    ColumnDefn("Artist", "left", 150, valueGetter="artist", imageGetter=artistImageGetter,
			       minimumWidth=40, maximumWidth=200, autoCompleteCellEditor=True),
		    ColumnDefn("Album", "left", 150, valueGetter="album", maximumWidth=250, isSpaceFilling=True, autoCompleteCellEditor=True),
		    ColumnDefn("Genre", "left", 100, valueGetter="genre", autoCompleteComboBoxCellEditor=True),
		    ColumnDefn("Size", "right", 50, valueGetter="size"),
		    ColumnDefn("Rating", "center", 50, valueGetter="rating", imageGetter=ratingImageGetter),
		    ColumnDefn("Duration", "center", 150, valueGetter="duration", stringConverter="%S seconds and %M minutes"),
		    ColumnDefn("Date Played", "left", 150, valueGetter="dateLastPlayed", stringConverter="%x", valueSetter="SetDateLastPlayed"),
		    ColumnDefn("Last Played", "left", 150, valueGetter="lastPlayed", stringConverter="%x %X", maximumWidth=150),
		    ColumnDefn("Colour", "left", 60, valueGetter="trackColour", stringConverter=colourToString, minimumWidth=60),
		    ColumnDefn("Font", "left", 60, valueGetter="font", valueSetter="SetFontFace", cellEditorCreator=makeFontEditor,
			       stringConverter=fontToStringConverter),
		]
	
		self.olvGroup.rowFormatter = rowFormatter
		self.olvGroup.SetColumns(columns)
		self.olvGroup.SetObjects(self.dataObjects)
		self.olvGroup.cellEditMode = ObjectListView.CELLEDIT_DOUBLECLICK
    
	def InitPrinting(self):
		"""
		Initialize the printing portion of the demo
		"""
		self.listCtrlPrinter = ListCtrlPrinter()
		self.printPreview = self.listCtrlPrinter.printout.GetPrintPreview()
    
	def InitPrintPreview(self):
		"""
		Initialize the print preview portion of the demo
		"""
		self.watermarkFontCtrl.SelectedFont = self.listCtrlPrinter.engine.reportFormat.Watermark.Font
		self.watermarkColorCtrl.Colour = self.listCtrlPrinter.engine.reportFormat.Watermark.TextColor
		self.ConfigurePrinting()
		self.printPreview.SetCanvas(self.previewCanvas)
		self.Bind(wx.EVT_FONTPICKER_CHANGED, self.OnPrintingTextChanged, self.watermarkFontCtrl)
		self.Bind(wx.EVT_COLOURPICKER_CHANGED, self.OnPrintingTextChanged, self.watermarkColorCtrl)
    
	def _imagePath(self, imageFile):
		return os.path.join(os.getcwd(), "images", imageFile)
    
	def _IncrementString(self, s):
		if s[-2:].isdigit():
			s = s[:-3]
		return s + (" %02d" % self.counter)
    
	def _MakeAtLeast(self, objects, atLeast):
		"""Extend the given collection of objects with copies of our model objects
		until there is at least to given number of model objects"""
		while len(objects) < atLeast:
			self.counter += 1
			for x in self.dataObjects:
				y = x.clone()
				y.title = self._IncrementString(y.title)
				y.album = self._IncrementString(y.album)
				objects.append(y)
	
		return objects
	
	    #----------------------------------------------------------------------
	    # Event handlers - Implementation
    
	def DoRepopulate(self, olv):
		self._timeCall(olv.RepopulateList, "Populating %d items took %%0.2f milliseconds" % olv.GetItemCount())
    
	def DoAdd1000(self, olv):
		self.counter += 1
		def func():
			objects = self._MakeAtLeast([], 1000)
			olv.AddObjects(objects)
		self._timeCall(func, "Adding 1000 and repopulating %d items took %%0.2f milliseconds" % (olv.GetItemCount()+1000))
    
	def DoAdd1000Virtual(self, olv):
		self.counter += 1
		def func():
			olv.SetItemCount(olv.GetItemCount() + 1000)
		self._timeCall(func, "Virtually adding 1000 and repopulating %d items took %%0.2f milliseconds" % (olv.GetItemCount()+1000))
    
	def DoSelectAll(self, olv):
		self._timeCall(olv.SelectAll, "Selecting all %d items took %%0.2f milliseconds" % olv.GetItemCount())
    
	def DoSelectU2(self, olv):
		def func():
			objs = [x for x in olv.modelObjects if x.artist == "U2"]
			olv.SelectObjects(objs)
		self._timeCall(func, "Selecting U2's items out of %d items took %%0.2f milliseconds" % olv.GetItemCount())
    
	def DoSelectNone(self, olv):
		self._timeCall(olv.DeselectAll, "Deselecting all %d items took %%0.2f milliseconds" % olv.GetItemCount())
    
	def DoUpdateSelected(self, olv):
		def func():
			for x in olv.GetSelectedObjects():
				x.lastPlayed = datetime.now()
			olv.RefreshObjects(olv.GetSelectedObjects())
		self._timeCall(func, "Updating the selected items out of %d items took %%0.2f milliseconds" % olv.GetItemCount())
    
	def _timeCall(self, func, msg):
		t = clock()
		simpleTiming = True
		if simpleTiming:
			func()
		else:
			self._profileCall(func, msg)
		statusMsg = msg % ((clock()-t)*1000)
		self.frame_1_statusbar.SetStatusText(statusMsg, 0)
    
	def _profileCall(self, func, msg):
		self.frame_1_statusbar.SetStatusText("Starting profile", 0)
		t = clock()
	
		import __builtin__, cProfile, pstats
		__builtin__.__dict__["myFunctionToProfile"] = func
		cProfile.run("myFunctionToProfile()", "app.prof")
	
		stats = pstats.Stats("app.prof")
		stats.strip_dirs()
		stats.sort_stats('time', 'calls')
		print msg % ((clock()-t)*1000)
		stats.print_stats(30)
		os.remove("app.prof")
    
	#----------------------------------------------------------------------
	# Event handlers - Simple tab
    
	def OnTextSearchCtrl(self, event, searchCtrl, olv):
		searchCtrl.ShowCancelButton(len(searchCtrl.GetValue()))
		olv.GetFilter().SetText(searchCtrl.GetValue())
		if isinstance(olv, GroupListView):
			olv.RebuildGroups()
		else:
			olv.RepopulateList()
    
	def OnCancelSearchCtrl(self, event, searchCtrl, olv):
		searchCtrl.SetValue("")
		self.OnTextSearchCtrl(event, searchCtrl, olv)
    
	def OnListViewDetails(self, event): # wxGlade: MyFrame.<event_handler>
		self.olvSimple.SetSingleStyle(wx.LC_REPORT)
    
	def OnListViewList(self, event): # wxGlade: MyFrame.<event_handler>
		self.olvSimple.SetSingleStyle(wx.LC_LIST)
    
	def OnListViewSmallIcon(self, event): # wxGlade: MyFrame.<event_handler>
		self.olvSimple.SetSingleStyle(wx.LC_SMALL_ICON)
    
	def OnListViewLargeIcon(self, event): # wxGlade: MyFrame.<event_handler>
		self.olvSimple.SetSingleStyle(wx.LC_ICON)
    
	def OnRepopulate(self, event): # wxGlade: MyFrame.<event_handler>
		self.DoRepopulate(self.olvSimple)
    
	def OnAdd1000(self, event): # wxGlade: MyFrame.<event_handler>
		self.DoAdd1000(self.olvSimple)
    
	def OnUpdateSelected(self, event): # wxGlade: MyFrame.<event_handler>
		self.DoUpdateSelected(self.olvSimple)
    
	def OnSelectAll(self, event): # wxGlade: MyFrame.<event_handler>
		self.DoSelectAll(self.olvSimple)
    
	def OnSelectU2s(self, event): # wxGlade: MyFrame.<event_handler>
		self.DoSelectU2(self.olvSimple)
    
	def OnSelectNone(self, event): # wxGlade: MyFrame.<event_handler>
		self.DoSelectNone(self.olvSimple)
    
	def OnClearListSimple(self, event): # wxGlade: MyFrame.<event_handler>
		self.olvSimple.SetObjects(None)
    
	#----------------------------------------------------------------------
	# Event handlers - Virtual tab
    
	def OnRepopulateVirtual(self, event): # wxGlade: MyFrame.<event_handler>
		self.DoRepopulate(self.olvVirtual)
    
	def OnAdd1000Virtual(self, event): # wxGlade: MyFrame.<event_handler>
		self.DoAdd1000Virtual(self.olvVirtual)
    
	def OnUpdateSelectedVirtual(self, event): # wxGlade: MyFrame.<event_handler>
		self.DoUpdateSelected(self.olvVirtual)
    
	def OnSelectAllVirtual(self, event): # wxGlade: MyFrame.<event_handler>
		self.DoSelectAll(self.olvVirtual)
    
	def OnSelectNoneVirtual(self, event): # wxGlade: MyFrame.<event_handler>
		self.DoSelectNone(self.olvVirtual)
    
	def OnClearListVirtual(self, event): # wxGlade: MyFrame.<event_handler>
		self.olvVirtual.SetItemCount(0)
    
	#----------------------------------------------------------------------
	# Event handlers - Fast tab
    
	def OnRepopulateFast(self, event): # wxGlade: MyFrame.<event_handler>
		self.DoRepopulate(self.olvFast)
    
	def OnAdd1000Fast(self, event): # wxGlade: MyFrame.<event_handler>
		self.DoAdd1000(self.olvFast)
    
	def OnUpdateSelectedFast(self, event): # wxGlade: MyFrame.<event_handler>
		self.DoUpdateSelected(self.olvFast)
    
	def OnSelectAllFast(self, event): # wxGlade: MyFrame.<event_handler>
		self.DoSelectAll(self.olvFast)
    
	def OnSelectU2sFast(self, event): # wxGlade: MyFrame.<event_handler>
		self.DoSelectU2(self.olvFast)
    
	def OnSelectNoneFast(self, event): # wxGlade: MyFrame.<event_handler>
		self.DoSelectNone(self.olvFast)
    
	def OnClearListFast(self, event): # wxGlade: MyFrame.<event_handler>
		self.olvFast.SetObjects(None)
    
	#----------------------------------------------------------------------
	# Event handlers - Complex tab
    
	def OnRepopulateComplex(self, event): # wxGlade: MyFrame.<event_handler>
		self.DoRepopulate(self.olvComplex)
    
	def OnAdd1000Complex(self, event): # wxGlade: MyFrame.<event_handler>
		self.DoAdd1000(self.olvComplex)
    
	def OnUpdateSelectedComplex(self, event): # wxGlade: MyFrame.<event_handler>
		self.DoUpdateSelected(self.olvComplex)
    
	def OnSelectAllComplex(self, event): # wxGlade: MyFrame.<event_handler>
		self.DoSelectAll(self.olvComplex)
    
	def OnSelectU2sComplex(self, event): # wxGlade: MyFrame.<event_handler>
		self.DoSelectU2(self.olvComplex)
    
	def OnSelectNoneComplex(self, event): # wxGlade: MyFrame.<event_handler>
		self.DoSelectNone(self.olvComplex)
    
	def OnListViewDetailsComplex(self, event): # wxGlade: MyFrame.<event_handler>
		self.olvComplex.SetSingleStyle(wx.LC_REPORT)
    
	def OnListViewListComplex(self, event): # wxGlade: MyFrame.<event_handler>
		self.olvComplex.SetSingleStyle(wx.LC_LIST)
    
	def OnListViewSmallIconComplex(self, event): # wxGlade: MyFrame.<event_handler>
		self.olvComplex.SetSingleStyle(wx.LC_SMALL_ICON)
    
	def OnListViewLargeIconComplex(self, event): # wxGlade: MyFrame.<event_handler>
		self.olvComplex.SetSingleStyle(wx.LC_ICON)
    
	def OnClearListComplex(self, event): # wxGlade: MyFrame.<event_handler>
		self.olvComplex.SetObjects(None)
    
    
	#----------------------------------------------------------------------
	# Event handlers - Group tab
    
	def OnShowGroupChecked(self, event): # wxGlade: MyFrame.<event_handler>
		self.olvGroup.SetShowGroups(self.cbShowGroups.GetValue())
    
	def OnLockGroupChecked(self, event): # wxGlade: MyFrame.<event_handler>
		if self.cbLockGroup.GetValue():
			self.olvGroup.SetAlwaysGroupByColumn(self.olvGroup.GetGroupByColumn())
		else:
			self.olvGroup.SetAlwaysGroupByColumn(-1)
    
	def OnShowItemCountChecked(self, event): # wxGlade: MyFrame.<event_handler>
		self.olvGroup.SetShowItemCounts(self.cbShowItemCount.GetValue())
    
	def OnRepopulateGroup(self, event): # wxGlade: MyFrame.<event_handler>
		self.DoRepopulate(self.olvGroup)
    
	def OnAdd1000Group(self, event): # wxGlade: MyFrame.<event_handler>
		self.DoAdd1000(self.olvGroup)
    
	def OnUpdateSelectedGroup(self, event): # wxGlade: MyFrame.<event_handler>
		self.DoUpdateSelected(self.olvGroup)
    
	def OnClearListGroup(self, event): # wxGlade: MyFrame.<event_handler>
		self.olvGroup.SetObjects(None)
    
	def OnSelectAllGroup(self, event): # wxGlade: MyFrame.<event_handler>
		self.DoSelectAll(self.olvGroup)
    
	def OnSelectU2sGroup(self, event): # wxGlade: MyFrame.<event_handler>
		self.DoSelectU2(self.olvGroup)
    
	def OnSelectNoneGroup(self, event): # wxGlade: MyFrame.<event_handler>
		self.DoSelectNone(self.olvGroup)
    
	def OnExpandAllGroups(self, event): # wxGlade: MyFrame.<event_handler>
		self.olvGroup.ExpandAll()
    
	def OnCollapseAllGroups(self, event): # wxGlade: MyFrame.<event_handler>
		self.olvGroup.CollapseAll()
    
	#----------------------------------------------------------------------------
	#  ListCtrl printing tab events
    
	def OnPrintPreview(self, event): # wxGlade: MyFrame.<event_handler>
		self.ConfigurePrinting()
		self.listCtrlPrinter.PrintPreview()
    
	def OnPageSetup(self, event): # wxGlade: MyFrame.<event_handler>
		self.listCtrlPrinter.PageSetup()
		self.RefreshPreview()
    
	def OnPrint(self, event): # wxGlade: MyFrame.<event_handler>
		self.ConfigurePrinting()
		self.listCtrlPrinter.Print()
    
	def ConfigurePrinting(self):
		"""
		Copy all the configuration information from the tab to the printing object
		"""
		prt = self.listCtrlPrinter
		prt.Clear()
		if self.cbSimple.IsChecked():
			prt.AddListCtrl(self.olvSimple, "Simple ObjectListView")
		if self.cbComplex.IsChecked():
			prt.AddListCtrl(self.olvComplex, "Complex ObjectListView")
		if self.cbFast.IsChecked():
			prt.AddListCtrl(self.olvFast, "Fast ObjectListView")
		if self.cbGroups.IsChecked():
			prt.AddListCtrl(self.olvGroup, "Group List View")
	
		prt.Watermark = self.tcWatermark.GetValue()
		prt.PageHeader = (self.tcPageHeaderLeft.GetValue(), self.tcPageHeaderCenter.GetValue(), self.tcPageHeaderRight.GetValue())
		prt.PageFooter = (self.tcPageFooterLeft.GetValue(), self.tcPageFooterCenter.GetValue(), self.tcPageFooterRight.GetValue())
	
		if self.radioBoxFormatting.GetSelection() == 0:
			prt.ReportFormat = ReportFormat.Minimal()
		elif self.radioBoxFormatting.GetSelection() == 1:
			prt.ReportFormat = ReportFormat.Normal()
		elif self.radioBoxFormatting.GetSelection() == 2:
			prt.ReportFormat = ReportFormat.TooMuch()
	
		prt.ReportFormat.IsShrinkToFit = self.cbShrinkToFit.IsChecked()
		prt.ReportFormat.IncludeImages = self.cbIncludeImages.IsChecked()
		prt.ReportFormat.Row.CanWrap = self.cbWrapCells.IsChecked()
		prt.ReportFormat.IsColumnHeadingsOnEachPage = self.cbColumnHeaderOnEachPage.IsChecked()
		prt.ReportFormat.UseListCtrlTextFormat = self.cbUseListCtrlTextFormat.IsChecked()
		prt.ReportFormat.Watermark.Font = self.watermarkFontCtrl.SelectedFont
		prt.ReportFormat.Watermark.TextColor = self.watermarkColorCtrl.Colour
		prt.ReportFormat.Watermark.Over = self.cbWatermarkOnTop.IsChecked()
    
	def OnFirstPage(self, event): # wxGlade: MyFrame.<event_handler>
		self.printPreview.SetCurrentPage(self.printPreview.GetMinPage())
    
	def OnPreviousPage(self, event): # wxGlade: MyFrame.<event_handler>
		if self.printPreview.GetCurrentPage() > self.printPreview.GetMinPage():
			self.printPreview.SetCurrentPage(self.printPreview.GetCurrentPage() - 1)
    
	def OnNextPage(self, event): # wxGlade: MyFrame.<event_handler>
		if self.printPreview.GetCurrentPage() < self.printPreview.GetMaxPage():
			self.printPreview.SetCurrentPage(self.printPreview.GetCurrentPage() + 1)
    
	def OnLastPage(self, event): # wxGlade: MyFrame.<event_handler>
		self.printPreview.SetCurrentPage(self.printPreview.GetMaxPage())
    
	def OnZoom(self, event): # wxGlade: MyFrame.<event_handler>
		zooms = [25, 50, 75, 100, 150, 200, 400]
		self.printPreview.SetZoom(zooms[self.choiceZoom.GetSelection()])
    
	def OnSourceChange(self, event): # wxGlade: MyFrame.<event_handler>
		self.ConfigurePrinting()
		self.RefreshPreview()
    
	def OnFormatting(self, event): # wxGlade: MyFrame.<event_handler>
		self.ConfigurePrinting()
		self.RefreshPreview()
    
	def OnPreviewOptionChange(self, event): # wxGlade: MyFrame.<event_handler>
		self.ConfigurePrinting()
		self.RefreshPreview()
    
	def RefreshPreview(self):
		self.printPreview.RenderPage(min(self.printPreview.GetCurrentPage(), self.printPreview.GetMaxPage()))
		self.previewCanvas.Refresh()
    
	def OnPrintingTextChanged(self, event): # wxGlade: MyFrame.<event_handler>
		self.ConfigurePrinting()
		self.RefreshPreview()
    
	def OnWatermarkOnTop(self, event): # wxGlade: MyFrame.<event_handler>
		self.ConfigurePrinting()
		self.RefreshPreview()
		     
class GixFacturasEstimaciones(wx.Frame, GixBase):
	lstctrlorder = {0:("f.idfacturaestimacion","desc",""), 1:("f.fecha","desc","> "), 2:("f.factura","desc",""),
			3:("c.nombreobra","desc",""), 4:("d.descripcion","desc",""), 5:("e.descripcion","desc","")}
	estatussolicitud = ["S","R","A","E","F","B","T","C"]; estatusotros = ["O","P","N"]
	dbtable = "gixfacturasestimacion"; dbtable2 = "gixfacturasestimaciondetalle"
	campos = {ID_TEXTCTRLFACTURAESTIMACIONFECHA:"tc", ID_TEXTCTRLFACTURAESTIMACIONCONTRATO:"tc",
			  ID_TEXTCTRLFACTURAESTIMACIONNOTAS:"tc", ID_TEXTCTRLFACTURAESTIMACIONNUMEROFACTURA:"tc"}
	DicDatesAndTxt = {ID_BITMAPBUTTONFACTURAESTIMACIONFECHA : ID_TEXTCTRLFACTURAESTIMACIONFECHA}
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize,
				 style = wx.DEFAULT_FRAME_STYLE, usuario = None):
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		self.parent = parent
		self.usuario = usuario
		self.textevent = True
		self.datointerno = ""
		self.FillingARecord = True
		self.validacontroles = True
		self.onguardar = True
		self.ctrlindex = 0
		self.alta = False
		self.colprev, self.colsort = 1, 1
		self.lstctrlsort = "f.fecha desc"
		
		self.mb = FACTURAESTIMACIONMenuBarFunc()
		self.SetMenuBar(self.mb)
		self.tb = self.CreateToolBar(wx.TB_HORIZONTAL | wx.NO_BORDER | wx.TB_FLAT) # | wx.TB_TEXT )
		FACTURAESTIMACIONToolBarFunc(self.tb)
		panel = wx.Panel(self, -1)
		FacturasEstimacionFuncion(panel, True, True)
		
		wx.EVT_CLOSE(self, lambda _: self.Destroy())
		self.Bind(wx.EVT_LIST_COL_CLICK, self.OnSortListCtrl, id = ID_LISTCTRLFACTURAESTIMACION)
		self.Bind(wx.EVT_MENU, self.OnAgregar, id = ID_MENUFACTURAESTIMACIONARCHIVOAGREGAR)
		self.Bind(wx.EVT_MENU, self.OnEliminar, id = ID_MENUFACTURAESTIMACIONARCHIVOELIMINAR)
		self.Bind(wx.EVT_MENU, self.OnGuardar, id = ID_MENUFACTURAESTIMACIONARCHIVOGUARDAR)
		self.Bind(wx.EVT_MENU, lambda _: self.Destroy(), id = ID_MENUFACTURAESTIMACIONSALIR)
		self.Bind(wx.EVT_TOOL, self.OnAgregar, id = ID_TOOLFACTURAESTIMACIONAGREGAR)
		self.Bind(wx.EVT_TOOL, self.OnEliminar, id = ID_TOOLFACTURAESTIMACIONELIMINAR)
		self.Bind(wx.EVT_TOOL, self.OnGuardar, id = ID_TOOLFACTURAESTIMACIONGUARDAR)
		self.Bind(wx.EVT_CHOICE, self.OnChoiceFiltro, id = ID_CHOICEFACTURAESTIMACIONCANCELADAFILTRO)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnLCtrl, id = ID_LISTCTRLFACTURAESTIMACION)
		self.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.OnRightClick, id = ID_LISTCTRLFACTURAESTIMACION)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLFACTURAESTIMACIONFECHA)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLFACTURAESTIMACIONNUMEROFACTURA)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLFACTURAESTIMACIONCONTRATO)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLFACTURAESTIMACIONNOTAS)
		self.Bind(wx.EVT_BUTTON, self.OnElegirContrato, id = ID_BITMAPBUTTONFACTURAESTIMACIONCONTRATO)
		for v in self.DicDatesAndTxt.keys():
			self.Bind(wx.EVT_BUTTON, self.OnFechaButton, id = v )
		
		self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONNOTAS).SetMaxLength(255)

		self.grid = self.GetControl(ID_GRIDFACTURAESTIMACIONDETALLEFACTURA)
		self.grid.Bind(wx.EVT_KEY_DOWN, self.OnGridDownKey)
		self.grid.Bind(gridlib.EVT_GRID_CELL_CHANGE, self.OnGridCellChange)
		self.grid.Bind(gridlib.EVT_GRID_CELL_RIGHT_CLICK, self.OnGridRightClick)
		
		self.gridpago = self.GetControl(ID_GRIDFACTURAESTIMACIONPAGOS)
		self.gridpago.Bind(gridlib.EVT_GRID_CELL_RIGHT_CLICK, self.OnGridRightClickPagos)
		
		anchos = [-1, 160, 200]
		self.CreateStatusBar(3)
		self.SetStatusWidths(anchos)
		self.SetStatusText(u"Estimaciones / Facturaci�n", 1)
		self.SetStatusText(u"Control de Proveedores de Obra", 2)

		if wx.Platform == '__WXMSW__':
			self.GetControl(ID_LISTCTRLFACTURAESTIMACION).SetSize(wx.Size(450, 600))
			self.GetControl(ID_NOTEBOOKFACTURAESTIMACION).SetSize(wx.Size(470, 600))
		else:
			self.GetControl(ID_LISTCTRLFACTURAESTIMACION).SetSize(wx.Size(450, 650))
			self.GetControl(ID_NOTEBOOKFACTURAESTIMACION).SetSize(wx.Size(450, 650))
		
		self.currentitem = ""; self.original = {}
		self.idfacturaestimacion, self.agregar = 0,0
		self.GetControl(ID_CHOICEFACTURAESTIMACIONCANCELADAFILTRO).SetSelection(1)
		
		self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONTOTALFACTURA).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONTOTALPAGOS).SetBackgroundColour(wx.Colour(153,255,153))
		self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONSALDO).SetBackgroundColour(wx.Colour(204,204,255))
		self.FillListCtrl()
		
	def OnSortListCtrl(self, evt):
		self.colsort = evt.GetColumn()
		if self.lstctrlorder[self.colsort][1] == "desc":
			self.lstctrlsort = "%s asc" % self.lstctrlorder[self.colsort][0]
			self.lstctrlorder[self.colsort] = (self.lstctrlorder[self.colsort][0], "asc", "< ")
		else:
			self.lstctrlsort = "%s desc" % self.lstctrlorder[self.colsort][0]
			self.lstctrlorder[self.colsort] = (self.lstctrlorder[self.colsort][0], "desc", "> ")
		if self.colprev != self.colsort:
			self.lstctrlorder[self.colprev] = (self.lstctrlorder[self.colprev][0], self.lstctrlorder[self.colprev][1], "")
		self.FillListCtrl()
		self.colprev = self.colsort
		evt.Skip()
		
	def OnChoiceFiltro(self, event):
		self.FillListCtrl()
		
	def OnElegirContrato(self, event):
		sql = "select count(*) from gixcontratosobras where activo = 1"
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row is not None:
			dlg = GixElegirContratoObra(self, contratoobraelegido = self.ContratoObraElegido)
			dlg.CenterOnParent()
			dlg.Show(True)
		else:
			Mensajes().Info(self, u"� No se encontraron contratos registrados !", u"Atenci�n")
	
	def ContratoObraElegido(self, idcontratoobra):
		sql = """
		select e.RazonSocial, d.descripcion, t.descripcion, c.nombreobra, p.razonsocial
		from gixcontratosobras c
		join cont_Empresas e on c.fkempresa = e.EmpresaID
		join DESARROLLO d on c.fkdesarrollo = d.codigo
		join ETAPA t on c.fketapa = t.codigo
		join gixproveedoresobras p on c.fkproveedor = p.idproveedor
		where c.idcontratoobra = %s
		""" % idcontratoobra
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		cursor.close()
		self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONCONTRATO).SetValue(str(idcontratoobra))
		self.GetControl(ID_TEXTFACTURAESTIMACIONEMPRESA).SetLabel(str(row[0]))
		self.GetControl(ID_TEXTFACTURAESTIMACIONDESARROLLOETAPA).SetLabel(str(row[1]) + " - " + str(row[2]))
		self.GetControl(ID_TEXTFACTURAESTIMACIONOBRA).SetLabel(str(row[3]))
		self.GetControl(ID_TEXTFACTURAESTIMACIONPROVEEDOR).SetLabel(str(row[4]))
		return True
		
	def OnRightClick(self, event):
		self.idregistryblog = self.idfacturaestimacion
		self.idtitleblog = "Registro"
		if not hasattr(self, "ID_VIEWBLOG"):
			ID_VIEWBLOG = wx.NewId(); ID_ADDBLOG = wx.NewId()
			self.Bind(wx.EVT_MENU, self.OnViewBlog, id = ID_VIEWBLOG)
			self.Bind(wx.EVT_MENU, self.OnAddBlog, id = ID_ADDBLOG)
		popup = wx.Menu()
		popup.Append(ID_VIEWBLOG, u"Consultar el Blog del %s %s" % (self.idtitleblog, self.idregistryblog))
		popup.Append(ID_ADDBLOG, u"Participar en el Blog...")
		self.PopupMenu(popup)
		popup.Destroy()

	def OnViewBlog(self, event):
		goal = ((90, u"Fecha"), (90, u"Hora"), (100, u"Usuario"), (300, u"Blog"))
		query = """
		select convert(varchar(50), FechaCaptura, 103), convert(varchar(50), FechaCaptura, 108),
		UsuarioCaptura, ContenidoText from Blogs
		where BlogGUID = '%s' order by FechaCaptura desc;
		select count(*) from Blogs where BlogGUID = '%s'
		""" % (self.BlogGUID, self.BlogGUID)
		title = u"Consultando el Blog %s %s" % (self.idtitleblog, self.idregistryblog)
		table = "Blogs"
		frame = GixFrameCatalogo(self, -1, title, wx.Point(20,20), wx.Size(800,600), 
								 wx.DEFAULT_FRAME_STYLE, None, None, None, table, goal, query,
								 gridsize = [680,350], color = "AQUAMARINE")
		frame.Centre(wx.BOTH)
		frame.Show(True)
		
	def OnAddBlog(self, event):
		blog = wx.TextEntryDialog(self, u"Digite", u"Participando en el Blog %s %s"
								  % (self.idtitleblog, self.idregistryblog),
								  defaultValue = "", style = wx.OK | wx.TE_MULTILINE)
		blog.SetSize(wx.Size(400,300))
		blog.Centre(wx.BOTH)
		blog.ShowModal()
		comment = blog.GetValue()
		blog.Destroy()
		if comment:
			sql = """
			insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension)
			values ('%s', getdate(), '%s', '%s', '%s', '%s')
			""" % (self.BlogGUID, self.usuario, comment, "", "")
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"� Problemas al actualizar el blog !", u"Atenci�n")
		
	def OnAgregar(self, event):
		self.agregar, self.NewFlag, self.FillingARecord = True, True, True
		self.GetControl(ID_NOTEBOOKFACTURAESTIMACION).Enable(True)
		self.GetControl(ID_GRIDFACTURAESTIMACIONDETALLEFACTURA).Enable(False)
		self.GetControl(ID_GRIDFACTURAESTIMACIONPAGOS).Enable(False)
		self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONID).SetValue("")
		self.validacontroles = False
		self.CleanForm()
		self.validacontroles = True
		self.MenuSetter(ID_MENUFACTURAESTIMACIONARCHIVOAGREGAR, False)
		self.MenuSetter(ID_MENUFACTURAESTIMACIONARCHIVOELIMINAR, False)
		self.MenuSetter(ID_MENUFACTURAESTIMACIONARCHIVOGUARDAR, True)
		self.tb.EnableTool(ID_TOOLFACTURAESTIMACIONAGREGAR, False)
		self.tb.EnableTool(ID_TOOLFACTURAESTIMACIONELIMINAR, False)
		self.tb.EnableTool(ID_TOOLFACTURAESTIMACIONGUARDAR, True)
		self.FillingARecord = False
		self.GetControl(ID_BITMAPBUTTONFACTURAESTIMACIONFECHA).SetFocus()
		
	def OnEliminar(self, event):
		query = """
		select count(*) from gixfacturasestimacionpago where fkfacturaestimacion = %s
		""" % self.idfacturaestimacion
		cursor = r_cn.cursor()
		cursor.execute(str(query))
		row = fetchone(cursor)
		cursor.close()
		continua = True
		if int(row[0]) > 0:
			if not Mensajes().YesNo(self, u"Al cancelar la estimaci�n/factura se eliminar�n todos los pagos que la afectan,\n" \
						u"por lo tanto, estos regresar�n a su origen (solicitudes y otros egresos).\n\n" \
						u"� Desea realmente cancelar la estimaci�n/factura ?", u"Confirmaci�n"):
				continua = False
		elif not Mensajes().YesNo(self, u"� Desea realmente cancelar la estimaci�n/factura ?", u"Confirmaci�n"):
			continua = False
			
		if continua:
			if self.EliminaPagos():
				if int(row[0]) > 0:
					comentario = u"Cancelaci�n de la Estimaci�n/Factura %s --> Incluye %s pagos" % (self.idfacturaestimacion, int(row[0]))
				else:
					comentario = u"Cancelaci�n de la Estimaci�n/Factura %s" % self.idfacturaestimacion
					
				self.GridBlogUpdate(comentario)
				self.ObtenerPagos()
				self.CalculaDetalle()
				sql = "update %s set cancelada = 1 where idfacturaestimacion = %s" % (self.dbtable, self.idfacturaestimacion)
				queTal, trash = self.QueryUpdateRecord(sql)
				
	def EliminaPagos(self):
		sql = "delete from gixfacturasestimacionpago where fkfacturaestimacion = %s" % (self.idfacturaestimacion) 
		try:
			cursor = r_cn.cursor()
			cursor.execute(str(sql))
			cursor.close()
			r_cn.commit()
			return True
		except:
			r_cn.rollback()
			Mensajes().Info(self,u"Sucedi� algo que impidi� eliminar este registro.\n" \
					u"Quiz� se deba a que hay otra informaci�n\nque depende de este registro.\n%s"
					% sql, u"Atenci�n")
			return False
		
	def OnText(self, event):
		if self.validacontroles:
			self.ctrlactual = event.GetId()
			valor = self.GetControl(self.ctrlactual).GetValue().encode("iso8859-1")
			valornum = str(valor).replace('.',''); valornum = str(valornum).replace(':', '')
			if valor and not valornum.isdigit():
				if not str(valor).isupper():
					insertposition = self.GetControl(self.ctrlactual).GetInsertionPoint()
					if self.textevent:
						self.textevent = False
						self.GetControl(self.ctrlactual).SetValue(str(valor).upper())
					self.GetControl(self.ctrlactual).SetInsertionPoint(insertposition)
					
			self.Text()
	
	def Text(self, VengodelaLista = False, texto = True):
		if self.onguardar:
			self.textevent = True
			for id, tipo in self.campos.iteritems():
				control = self.GetControl(id)
				valor = control.GetValue().strip()
				if valor == "" and not self.FillingARecord and not self.NewFlag and id != ID_TEXTCTRLFACTURAESTIMACIONNOTAS:
					self.NewFlag = True
					if not VengodelaLista:
						Mensajes().Info(self, u"� No debe quedar ning�n dato en blanco !", u"Atenci�n")
						return False
				
			if not self.FillingARecord:
				self.RevisaCambios()
	
		return True
			
	def RevisaCambios(self, cambioguardia = False, cambiopartida = False):
		for id, tipo in self.campos.iteritems():
			control = self.GetControl(id)
			valor = control.GetValue()
			if id == ID_TEXTCTRLFACTURAESTIMACIONCONTRATO and valor:
				valor = int(valor)
			if valor != self.original[id]:
				control.SetBackgroundColour(wx.CYAN)
				cambioguardia = True
			else:
				control.SetBackgroundColour(wx.WHITE)
			control.Refresh()
		
		if cambioguardia:
			self.MenuSetter(ID_MENUFACTURAESTIMACIONARCHIVOAGREGAR, False)
			self.MenuSetter(ID_MENUFACTURAESTIMACIONARCHIVOELIMINAR, False)
			self.MenuSetter(ID_MENUFACTURAESTIMACIONARCHIVOGUARDAR, True)
			self.tb.EnableTool(ID_TOOLFACTURAESTIMACIONAGREGAR, False)
			self.tb.EnableTool(ID_TOOLFACTURAESTIMACIONELIMINAR, False)
			self.tb.EnableTool(ID_TOOLFACTURAESTIMACIONGUARDAR, True)
		else:
			self.MenuSetter(ID_MENUFACTURAESTIMACIONARCHIVOAGREGAR, True)
			self.MenuSetter(ID_MENUFACTURAESTIMACIONARCHIVOELIMINAR, True)
			self.MenuSetter(ID_MENUFACTURAESTIMACIONARCHIVOGUARDAR, False)
			self.tb.EnableTool(ID_TOOLFACTURAESTIMACIONAGREGAR, True)
			self.tb.EnableTool(ID_TOOLFACTURAESTIMACIONELIMINAR, True)
			self.tb.EnableTool(ID_TOOLFACTURAESTIMACIONGUARDAR, False)
	
	def OnLCtrl(self, event):
		self.agregar = False
		self.FillingARecord = True
		self.currentitem = event.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLFACTURAESTIMACION).GetItem(self.currentitem, 0).GetText()
		self.datointerno = int(datointerno)
		self.LCtrl()
		self.FillingARecord = False
		event.Skip()

	def LCtrl(self, onguardar = False):
		cambio = False
		if self.tb.GetToolEnabled(ID_TOOLFACTURAESTIMACIONGUARDAR):
			for id, tipo in self.campos.iteritems():
				control = self.GetControl(id)
				valor = control.GetValue()
				if valor != self.original[id]:
					cambio = True
			
		if cambio:
			self.NewFlag = False
			self.Text(True)
			if not self.NewFlag:
				if onguardar:
					if Mensajes().YesNo(self,u"� Desea realmente grabar la informaci�n ?", u"Confirmaci�n"):
						self.GuardarDetalle(onguardar)
				else:
					if self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONID).GetValue():
						Mensajes().Info(self, u"� No guardo los cambios de la factura %s !\n\n" \
						                u"Por lo tanto, no ser ver� afectado el registro de la estimaci�n." \
						                % self.idfacturaestimacion, u"Atenci�n")
					else:
						Mensajes().Info(self, u"� No guardo la nueva estimaci�n / factura !\n\n" \
						                u"Por lo tanto, no quedar� registrada.", u"Atenci�n")
						
				for id, tipo in self.campos.iteritems():
					ctrl = self.GetControl(id)
					ctrl.SetBackgroundColour(wx.WHITE)
					ctrl.Refresh()

		if self.datointerno:
			if self.GetRecord(record = self.datointerno):
				self.editable = True
			else:
				Mensajes().Warn(self, u"Escoja un registro v�lido", u"Atenci�n")
		else:
			self.FillListCtrl()
			
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
		return dato
	
	def GetRecord(self, record):
		try:
			self.idfacturaestimacion = int(record)
		except:
			return False
		sql = """
		select f.fkcontratoobra, convert(varchar(10), f.fecha, 103), f.factura, f.notas, convert(varchar(100), f.BlogGUID),
		e.RazonSocial, d.descripcion, t.descripcion, c.nombreobra, p.razonsocial, f.cancelada
		from %s f
		join gixcontratosobras c on f.fkcontratoobra = c.idcontratoobra
		join cont_Empresas e on c.fkempresa = e.EmpresaID
		join DESARROLLO d on c.fkdesarrollo = d.codigo
		join ETAPA t on c.fketapa = t.codigo
		join gixproveedoresobras p on c.fkproveedor = p.idproveedor
		where f.idfacturaestimacion = %s
		""" % (self.dbtable, self.idfacturaestimacion)
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		cursor.close()
		
		self.original[ID_TEXTCTRLFACTURAESTIMACIONCONTRATO] = int(row[0])
		self.original[ID_TEXTCTRLFACTURAESTIMACIONFECHA] = self.GetString(row[1])
		self.original[ID_TEXTCTRLFACTURAESTIMACIONNUMEROFACTURA] = self.GetString(row[2])
		self.original[ID_TEXTCTRLFACTURAESTIMACIONNOTAS] = self.GetString(row[3])
		
		self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONID).SetValue(str(self.idfacturaestimacion))
		self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONCONTRATO).SetValue(str(row[0]))
		self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONFECHA).SetValue(str(row[1]))
		self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONNUMEROFACTURA).SetValue(str(row[2]))
		self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONNOTAS).SetValue(str(row[3]))
		self.BlogGUID = str(row[4])
		self.GetControl(ID_TEXTFACTURAESTIMACIONEMPRESA).SetLabel(str(row[5]))
		self.GetControl(ID_TEXTFACTURAESTIMACIONDESARROLLOETAPA).SetLabel(str(row[6]) + " - " + str(row[7]))
		self.GetControl(ID_TEXTFACTURAESTIMACIONOBRA).SetLabel(str(row[8]))
		self.GetControl(ID_TEXTFACTURAESTIMACIONPROVEEDOR).SetLabel(str(row[9]))
		
		self.ObtenerDetalle()
		self.ObtenerPagos()
		self.CalculaDetalle()
		
		if row[10]:
			self.GetControl(ID_NOTEBOOKFACTURAESTIMACION).Enable(False)
			self.MenuSetter(ID_MENUFACTURAESTIMACIONARCHIVOAGREGAR, False)
			self.MenuSetter(ID_MENUFACTURAESTIMACIONARCHIVOELIMINAR, False)
			self.MenuSetter(ID_MENUFACTURAESTIMACIONARCHIVOGUARDAR, False)
			self.tb.EnableTool(ID_TOOLFACTURAESTIMACIONAGREGAR, False)
			self.tb.EnableTool(ID_TOOLFACTURAESTIMACIONELIMINAR, False)
			self.tb.EnableTool(ID_TOOLFACTURAESTIMACIONGUARDAR, False)
		else:
			self.MenuSetter(ID_MENUFACTURAESTIMACIONARCHIVOAGREGAR, True)
			self.MenuSetter(ID_MENUFACTURAESTIMACIONARCHIVOELIMINAR, True)
			self.MenuSetter(ID_MENUFACTURAESTIMACIONARCHIVOGUARDAR, False)
			self.tb.EnableTool(ID_TOOLFACTURAESTIMACIONAGREGAR, True)
			self.tb.EnableTool(ID_TOOLFACTURAESTIMACIONELIMINAR, True)
			self.tb.EnableTool(ID_TOOLFACTURAESTIMACIONGUARDAR, False)
			self.GetControl(ID_NOTEBOOKFACTURAESTIMACION).Enable(True)
			
		return True
	
	def GuardarDetalle(self, onguardar = False):
		self.SaveRecord(onguardar)
	
	def OnGuardar(self, event):
		F, N = self.FillingARecord, self.NewFlag
		self.FillingARecord, self.NewFlag = False, False
		todobien = self.Text()
		self.onguardar = False
		self.FillingARecord, self.NewFlag = F, N
		if todobien:
			self.FillingARecord = True
			self.LCtrl(True)
			self.FillingARecord = False
		self.onguardar = True
		event.Skip()
		
	def Hash(self, data):
		#m = md5.new()
		#m.update(data)
		return md5(data).hexdigest().upper()
	
	def SaveRecord(self, onguardar = False):
		wx.BeginBusyCursor()
		if self.agregar:
			bienGrabado, self.idfacturaestimacion = self.AddRecord()
		else:
			bienGrabado = self.UpdateRecord()
		wx.EndBusyCursor()
			
		if bienGrabado:
			lctrl = self.GetControl(ID_LISTCTRLFACTURAESTIMACION)
			if self.agregar:
				self.FillListCtrl()
				lctrl.SetItemState(self.ctrlindex, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
				self.GetRecord(record = self.idfacturaestimacion)
			else:
				if onguardar:
					self.FillListCtrl()
					lctrl.SetItemState(self.ctrlindex, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
					self.GetRecord(record = self.idfacturaestimacion)
				else:
					try:
						self.idfacturaestimacion = self.datointerno
						self.FillListCtrl()
						lctrl.SetItemState(self.ctrlindex, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
						self.GetRecord(record = self.idfacturaestimacion)
					except:
						pass
		else:
			Mensajes().Info(self, u"� El Registro no fue grabado !", u"Atenci�n")
			
	def UpdateRecord(self, querycancelar = ""):
		f_dia, f_mes, f_ano = self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONFECHA).GetValue().split('/')
		fecha = "%04d/%02d/%02d" % (int(f_ano), int(f_mes), int(f_dia))
		factura = self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONNUMEROFACTURA).GetValue().strip()
		fkcontratoobra = self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONCONTRATO).GetValue().strip()
		notas = self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONNOTAS).GetValue().strip()
		setListForQuery = """
		fkcontratoobra = %s, fecha = '%s', factura = '%s', notas = '%s'
		""" % (int(fkcontratoobra), fecha, factura, notas)
		sql = "update %s set %s where idfacturaestimacion = %s" % (self.dbtable, setListForQuery, self.idfacturaestimacion)
		queTal, trash = self.QueryUpdateRecord(sql)
		if queTal:
			contenido = u"Edici�n del registro"
			sql = """
			insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension, Estatus)
			values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
			""" % (self.BlogGUID, self.usuario, contenido, "", "", "")
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
		
		return queTal
	
	def AddRecord(self):
		f_dia, f_mes, f_ano = self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONFECHA).GetValue().split('/')
		fecha = "%04d/%02d/%02d" % (int(f_ano), int(f_mes), int(f_dia))
		factura = self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONNUMEROFACTURA).GetValue().strip()
		fkcontratoobra = self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONCONTRATO).GetValue().strip()
		notas = self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONNOTAS).GetValue().strip()
		sqlFields = """
		fkcontratoobra, fecha, factura, notas
		"""
		sqlValues = """
		%s, '%s', '%s', '%s'
		""" % (int(fkcontratoobra), fecha, factura, notas)
		sql = """
		insert into %s (%s) values (%s)
		""" % (self.dbtable, sqlFields, sqlValues) 
		sqlmax = "select max(idfacturaestimacion) from %s" % self.dbtable
		queTal, identity =  self.QueryUpdateRecord(sql, sqlmax, True)
		if queTal:
			self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONID).SetValue(str(identity))
			sql = "select convert(varchar(100), BlogGUID) from %s where idfacturaestimacion = %s" % \
				(self.dbtable, identity)
			cu = r_cn.cursor()
			cu.execute(str(sql))
			blog = fetchone(cu)
			cu.close()
			if blog is not None:
				self.BlogGUID = blog[0]
				sql = """
				insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura,
				ContenidoText, ContenidoBinario, Extension, Estatus)
				values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
				""" % (self.BlogGUID, self.usuario, u"Alta de la Estimaci�n / Factura", "", "", "")
				if not self.QueryUpdateRecord(sql):
					Mensajes().Info(self, u"Problemas al actualizar el blog.\n\n" % sql, u"Atenci�n")

		return queTal, identity
	
	def CleanForm(self):
		self.original.clear()
		self.idfacturaestimacion = 0
		for id, tipo in self.campos.iteritems():
			self.original[id] = ""
			ctrl = self.GetControl(id)
			ctrl.SetBackgroundColour(wx.WHITE)
			ctrl.Refresh()
		
		self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONID).SetValue("")
		self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONFECHA).SetValue("")
		self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONNUMEROFACTURA).SetValue("")
		self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONCONTRATO).SetValue("")
		self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONNOTAS).SetValue("")
		
		self.GetControl(ID_TEXTFACTURAESTIMACIONEMPRESA).SetLabel("")
		self.GetControl(ID_TEXTFACTURAESTIMACIONDESARROLLOETAPA).SetLabel("")
		self.GetControl(ID_TEXTFACTURAESTIMACIONOBRA).SetLabel("")
		self.GetControl(ID_TEXTFACTURAESTIMACIONPROVEEDOR).SetLabel("")
		
		grid = self.GetControl(ID_GRIDFACTURAESTIMACIONDETALLEFACTURA)
		if grid.GetNumberRows(): grid.DeleteRows(0, grid.GetNumberRows())
		if grid.GetNumberCols(): grid.DeleteCols(0, grid.GetNumberCols())
		self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONTOTALFACTURA).SetValue("")
		
		grid = self.GetControl(ID_GRIDFACTURAESTIMACIONPAGOS)
		if grid.GetNumberRows(): grid.DeleteRows(0, grid.GetNumberRows())
		if grid.GetNumberCols(): grid.DeleteCols(0, grid.GetNumberCols())
		self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONTOTALPAGOS).SetValue("")
		self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONSALDO).SetValue("")
		
	def FillListCtrl(self):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLFACTURAESTIMACION)
		lctrl.Enable(False); lctrl.Show(False); lctrl.ClearAll()
		cancelada = self.GetControl(ID_CHOICEFACTURAESTIMACIONCANCELADAFILTRO).GetSelection()
		filtrocancelada = ""
		if cancelada == 1:
			filtrocancelada = "where cancelada = 0"
		elif cancelada == 2:
			filtrocancelada = "where cancelada = 1"
		sql = """
		select f.idfacturaestimacion, convert(varchar(10), f.fecha, 103), f.factura,
		c.nombreobra, d.descripcion, e.descripcion, f.cancelada from %s f
		join gixcontratosobras c on f.fkcontratoobra = c.idcontratoobra
		join DESARROLLO d on c.fkdesarrollo = d.codigo
		join ETAPA e on c.fketapa = e.codigo
		%s order by %s
		""" % (self.dbtable, filtrocancelada, self.lstctrlsort)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		fila = 0
		if rows:
			lctrl.InsertColumn(0, u"%sId" % self.lstctrlorder[0][2], wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"%sFecha" % self.lstctrlorder[1][2], wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(2, u"%sFactura" % self.lstctrlorder[2][2], wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(3, u"%sNombre de la Obra" % self.lstctrlorder[3][2])
			lctrl.InsertColumn(4, u"%sDesarrollo" % self.lstctrlorder[4][2])
			lctrl.InsertColumn(5, u"%sEtapa" % self.lstctrlorder[5][2])
			for row in rows:
				if row[6]:
					if fila %2 != 0: bgcolor = [255,153,153]
					else:            bgcolor = [255,215,215]
				else:
					if fila %2 != 0: bgcolor = [204,204,255]
					else:            bgcolor = [230,230,255]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, self.GetString(row[1]))
				lctrl.SetStringItem(index, 2, self.GetString(row[2]))
				lctrl.SetStringItem(index, 3, self.GetString(row[3]))
				lctrl.SetStringItem(index, 4, self.GetString(row[4]))
				lctrl.SetStringItem(index, 5, self.GetString(row[5]))
				lctrl.SetItemData(index, row[0])
				if int(row[0]) == self.idfacturaestimacion:
					self.ctrlindex = index
				fila += 1
			lctrl.SetColumnWidth(0, 50)
			lctrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(2, 50)
			lctrl.SetColumnWidth(3, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(4, wx.LIST_AUTOSIZE)
			lctrl.SetColumnWidth(5, wx.LIST_AUTOSIZE)
		else:
			lctrl.InsertColumn(0, "       No Existen Registros", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 167)
		self.MenuSetter(ID_MENUFACTURAESTIMACIONARCHIVOAGREGAR, True)
		self.MenuSetter(ID_MENUFACTURAESTIMACIONARCHIVOELIMINAR, False)
		self.MenuSetter(ID_MENUFACTURAESTIMACIONARCHIVOGUARDAR, False)
		self.tb.EnableTool(ID_TOOLFACTURAESTIMACIONAGREGAR, True)
		self.tb.EnableTool(ID_TOOLFACTURAESTIMACIONELIMINAR, False)
		self.tb.EnableTool(ID_TOOLFACTURAESTIMACIONGUARDAR, False)
		self.GetControl(ID_NOTEBOOKFACTURAESTIMACION).Enable(False)
		lctrl.Show(True); lctrl.Enable(True)
		self.currentitemlst = []
		self.selecteditems = []
		self.validacontroles = False
		self.CleanForm()
		self.validacontroles = True
		wx.EndBusyCursor()
		if self.currentitem:
			lctrl.EnsureVisible(self.currentitem)
		salir = True
		self.NewFlag = False
		return salir, fila
	
	def ObtenerDetalle(self):
		self.labels = ((5, u""), (70, u"Cantidad", wx.ALIGN_RIGHT), (80, u"Concepto (F1)"), (70, u"Importe", wx.ALIGN_RIGHT),
					   (70, u"Total", wx.ALIGN_RIGHT, "float(row[1]) * float(row[3])"), (5, u""))
		grid = self.GetControl(ID_GRIDFACTURAESTIMACIONDETALLEFACTURA);	grid.Enable(True)
		if grid.GetNumberRows(): grid.DeleteRows(0, grid.GetNumberRows())
		if grid.GetNumberCols(): grid.DeleteCols(0, grid.GetNumberCols())
		self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONTOTALFACTURA).SetValue("")
		grid.InsertRows(0, 1); grid.InsertCols(0, len(self.labels))
		
		for colindex, collabel in enumerate(self.labels):
			grid.SetColSize(colindex, collabel[0])
			grid.SetColLabelValue(colindex, collabel[1])
		
		for col in range(0, len(self.labels)):
			grid.SetCellBackgroundColour(0, col, wx.NamedColour("Medium Goldenrod"))
			if col in (0, 5): grid.SetCellRenderer(0, col, NullGridRenderer())
			if col in (0, 2, 4, 5): grid.SetReadOnly(0, col, True)
			if col in (1, 3, 4):
				grid.SetColFormatFloat(col, -1, 2)
				grid.SetCellEditor(0, col, gridlib.GridCellFloatEditor(-1, 2))
						
		grid.SetColLabelSize(20)
		grid.SetRowLabelSize(20)
		grid.ForceRefresh()

		query = """
		select d.iddetallefacturaestimacion, d.cantidad, c.descripcion, d.importe, d.fkconceptoestimacion
		from %s d
		join gixconceptosestimacion c on d.fkconceptoestimacion = c.idconceptoestimacion
		where d.fkfacturaestimacion = %s order by d.iddetallefacturaestimacion
		""" % (self.dbtable2, self.idfacturaestimacion)
		cursor = r_cn.cursor()
		cursor.execute(str(query))
		rows = fetchall(cursor)
		cursor.close()
		if rows:
			if len(rows) > 1:
				grid.AppendRows(len(rows) - 1)
			totalfactura = float(0)
			for fila, row in enumerate(rows):
				for col in range(0, len(self.labels)):
					if fila % 2 == 0: grid.SetCellBackgroundColour(fila, col, wx.NamedColour("Medium Goldenrod"))
					if col in (0, 5): grid.SetCellRenderer(fila, col, NullGridRenderer())
					if col in (0, 2, 4, 5): grid.SetReadOnly(fila, col, True)
					if col in (1, 3, 4):
						grid.SetColFormatFloat(col, -1, 2)
						grid.SetCellEditor(fila, col, gridlib.GridCellFloatEditor(-1, 2))
					if len(self.labels[col]) in (3, 4):
						grid.SetCellAlignment(fila, col, self.labels[col][2], wx.ALIGN_CENTER)
						
					funcion = ""    
					if len(self.labels[col]) == 4:
						funcion = self.labels[col][3]
						
					if col == 4:
						try:
							grid.SetCellValue(fila, col, self.GetString(eval(funcion)))
							totalfactura += float(eval(funcion))
							self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONTOTALFACTURA).\
								SetValue(self.GetString(amount_and_cents_with_commas(totalfactura)))
						except:
							grid.SetCellValue(fila, col, '**')
					elif col == 5:
						grid.SetCellValue(fila, col, self.GetString(row[4]))
					elif row[col] == None:
						grid.SetCellValue(fila, col, '')
					else:
						if funcion == "":
							grid.SetCellValue(fila ,col, self.GetString(row[col]))
						else:
							try:
								grid.SetCellValue(fila, col, self.GetString(eval(funcion)))
							except:
								grid.SetCellValue(fila, col, '**')
								
			grid.AutoSizeColumns()
			grid.SetGridCursor(fila - 1, 1)
			grid.MakeCellVisible(fila - 1, 1)
			
	def CalculaDetalle(self):
		query = """
		select cantidad, importe from %s where fkfacturaestimacion = %s
		""" % (self.dbtable2, self.idfacturaestimacion)
		cursor = r_cn.cursor()
		cursor.execute(str(query))
		rows = fetchall(cursor)
		cursor.close()
		totalfactura = float(0)
		if rows:
			for row in rows:
				totalfactura += (float(row[0]) * float(row[1]))
			self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONTOTALFACTURA).\
				SetValue(self.GetString(amount_and_cents_with_commas(totalfactura)))
		else:
			self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONTOTALFACTURA).\
				SetValue(self.GetString(amount_and_cents_with_commas(totalfactura)))

		saldo = totalfactura
		pago = self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONTOTALPAGOS).GetValue()
		if pago:
			try:
				saldo = totalfactura - float(pago.replace(",", ""))
			except:
				saldo = float(0)
		self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONSALDO).SetValue(self.GetString(amount_and_cents_with_commas(saldo)))
			
	def ElegirConcepto(self):
		sql = "select idconceptoestimacion, descripcion from gixconceptosestimacion where estatus = 'A' order by descripcion"
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		idconceptoestimacion = ""; descripcion = ""
		if rows:
			idconceptoestimacionlst = []; descripcionlst = []
			for row in rows:
				descripcionlst.append(self.GetStringFromField(row[1]))
				idconceptoestimacionlst.append(int(row[0]))
			self.index = wx.GetSingleChoiceIndex(u"Elija un Concepto",  u"Opciones", descripcionlst, parent = None)
			if int(self.index) > -1:
				descripcion = descripcionlst[self.index]
				idconceptoestimacion = idconceptoestimacionlst[self.index]
		else:
			Mensajes().Info(self, u"� No hay conceptos de estimaci�n registrados !", u"Atenci�n")
			
		return idconceptoestimacion, descripcion
	
	def OnGridDownKey(self, event):
		try:
			evtkey = event.KeyCode()
		except:
			evtkey = event.GetKeyCode()
		
		grid = self.GetControl(ID_GRIDFACTURAESTIMACIONDETALLEFACTURA)
		fila = grid.GetGridCursorRow(); col = grid.GetGridCursorCol()
		
		if col in (1, 3):
			cantidad = grid.GetCellValue(fila, 1)
			importe = grid.GetCellValue(fila, 3)
			if not cantidad: cantidad = 0
			if not importe: importe = 0
			total = float(cantidad) * float(importe)
			grid.SetCellValue(fila, 4, self.GetString(total))
			grid.Refresh()
		elif col == 2 and evtkey == wx.WXK_F1:
			idconceptoestimacion, descripcion = self.ElegirConcepto()
			if idconceptoestimacion:
				grid.SetCellValue(fila, 2, self.GetString(descripcion))
				grid.SetCellValue(fila, 5, self.GetString(idconceptoestimacion))
				self.GridCellChange()
					
		if evtkey == wx.WXK_RETURN or evtkey == wx.WXK_NUMPAD_ENTER:
			sql = "select count(*) from %s" % self.dbtable2
			cu = r_cn.cursor()
			cu.execute(str(sql))
			row = fetchone(cu)
			cu.close()
			if int(row[0]) > 0:
				pass

		if evtkey != wx.WXK_RETURN and evtkey != wx.WXK_NUMPAD_ENTER:
			event.Skip()
			return
		
		if event.ControlDown():   # the edit control needs this key
			event.Skip()
			return
		
		grid.DisableCellEditControl()
		
		## asignaciones a variables
		
		#success = self.grid.MoveCursorRight(evt.ShiftDown())
		#if not success:
			#self.InsertGridRow()
		
	def InsertGridRow(self):
		grid = self.GetControl(ID_GRIDFACTURAESTIMACIONDETALLEFACTURA)
		lastRow = grid.GetTable().GetNumberRows() - 1
		if not grid.GetCellValue(lastRow, 0):
			grid.SetGridCursor(lastRow, 0)
			grid.MakeCellVisible(lastRow, 0)
			grid.Refresh()
		else:
			grid.AppendRows(1)
			newRow = lastRow + 1
			for col in range(0, len(self.labels)):
				if newRow % 2 == 0: grid.SetCellBackgroundColour(newRow, col, wx.NamedColour("Medium Goldenrod"))
				if col in (0, 5): grid.SetCellRenderer(newRow, col, NullGridRenderer())
				if col in (0, 2, 4, 5): grid.SetReadOnly(newRow, col, True)
				if col in (1, 3, 4):
					grid.SetColFormatFloat(col, -1, 2)
					grid.SetCellEditor(newRow, col, gridlib.GridCellFloatEditor(-1, 2))
				
			grid.SetGridCursor(newRow, 1)
			grid.MakeCellVisible(newRow, 1)
			grid.Refresh()
				
	def OnGridCellChange(self, event):
		self.GridCellChange()
		
	def GridCellChange(self):
		grid = self.GetControl(ID_GRIDFACTURAESTIMACIONDETALLEFACTURA)
		fila = grid.GetGridCursorRow()
		iddetallefacturaestimacion = grid.GetCellValue(fila, 0)
		fkfacturaestimacion = self.idfacturaestimacion
		cantidad = grid.GetCellValue(fila, 1)
		concepto = grid.GetCellValue(fila, 2)
		fkconceptoestimacion = grid.GetCellValue(fila, 5)
		importe = grid.GetCellValue(fila, 3)
		if not iddetallefacturaestimacion: iddetallefacturaestimacion = 0
		if not cantidad: cantidad = 0
		if not fkconceptoestimacion: fkconceptoestimacion = 0
		if not importe: importe = 0
		total = float(cantidad) * float(importe)
		grid.SetCellValue(fila, 4, self.GetString(total))
		grid.Refresh()
		if iddetallefacturaestimacion:
			if not self.alta:
				setListForQuery = """
				cantidad = %s, fkconceptoestimacion = %s, importe = %s
				""" % (float(cantidad), int(fkconceptoestimacion), float(importe))
				sql = "update %s set %s where iddetallefacturaestimacion = %s" \
					% (self.dbtable2, setListForQuery, int(iddetallefacturaestimacion))
				queTal, trash = self.QueryUpdateRecord(sql)
				if queTal:
					comentario = u"Cambio movimiento de detalle %s --> %s %s %s" \
							   % (int(iddetallefacturaestimacion), float(cantidad), concepto,
							      self.GetString(amount_and_cents_with_commas(float(importe))))
					self.GridBlogUpdate(comentario)
				self.CalculaDetalle()
		else:
			if cantidad and fkconceptoestimacion and importe:
				sqlFields = "fkfacturaestimacion, cantidad, fkconceptoestimacion, importe"
				sqlValues = "%s, '%s', '%s', '%s'" \
						  % (int(fkfacturaestimacion), float(cantidad), int(fkconceptoestimacion), float(importe))
				sql = "insert into %s (%s) values (%s)" % (self.dbtable2, sqlFields, sqlValues) 
				sqlmax = "select max(iddetallefacturaestimacion) from %s" % self.dbtable2
				queTal, identity =  self.QueryUpdateRecord(sql, sqlmax, True)
				if queTal:
					grid.SetCellValue(fila, 0, self.GetString(identity))
					comentario = u"Alta movimiento de detalle %s --> %s %s %s" \
							   % (int(identity), float(cantidad), concepto,
							      self.GetString(amount_and_cents_with_commas(float(importe))))
					self.GridBlogUpdate(comentario)
				self.CalculaDetalle()
				lastRow = grid.GetTable().GetNumberRows()
				if lastRow == 1:
					self.alta = True
					grid.AutoSizeColumns()
					grid.SetGridCursor(0, 1)
					grid.MakeCellVisible(0, 1)
					self.alta = False
			
	def GridBlogUpdate(self, comentario):
		sql = """
		insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura,
		ContenidoText, ContenidoBinario, Extension, Estatus)
		values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
		""" % (self.BlogGUID, self.usuario, comentario, "", "", "")
		if not self.QueryUpdateRecord(sql):
			Mensajes().Info(self, u"Problemas al actualizar el blog.\n\n" % sql, u"Atenci�n")
		
	def OnGridRightClick(self, event):
		grid = self.GetControl(ID_GRIDFACTURAESTIMACIONDETALLEFACTURA)
		fila = grid.GetGridCursorRow()
		if fila > -1:
			iddetallefacturaestimacion = grid.GetCellValue(fila, 0)
			cantidad = grid.GetCellValue(grid.GetGridCursorRow(), 1)
			concepto = grid.GetCellValue(grid.GetGridCursorRow(), 2)
			importe = grid.GetCellValue(grid.GetGridCursorRow(), 3)
			if not cantidad: cantidad = 0
			if not importe: importe = 0
			if not hasattr(self, "ID_AGREGARDETALLEFACTURAESTIMACION"):
				ID_AGREGARDETALLEFACTURAESTIMACION = wx.NewId(); ID_ELIMINARDETALLEFACTURAESTIMACION = wx.NewId()
				self.Bind(wx.EVT_MENU, self.OnAgregarDetalleFacturaEstimacion, id = ID_AGREGARDETALLEFACTURAESTIMACION)
				self.Bind(wx.EVT_MENU, self.OnEliminarDetalleFacturaEstimacion, id = ID_ELIMINARDETALLEFACTURAESTIMACION)
			popup = wx.Menu()
			popup.Append(ID_AGREGARDETALLEFACTURAESTIMACION, u"Agregar Detalle")
			popup.Append(ID_ELIMINARDETALLEFACTURAESTIMACION, u"Eliminar ' %s %s %s '" \
						 % (float(cantidad), concepto,
						    self.GetString(amount_and_cents_with_commas(float(importe)))))
			self.PopupMenu(popup)
			popup.Destroy()
		
	def OnAgregarDetalleFacturaEstimacion(self, event):
		self.InsertGridRow()
	
	def OnEliminarDetalleFacturaEstimacion(self, event):
		if self.EliminarDetalleFacturaEstimacion():
			grid = self.GetControl(ID_GRIDFACTURAESTIMACIONDETALLEFACTURA)
			fila = grid.GetGridCursorRow()
			iddetallefacturaestimacion = grid.GetCellValue(fila, 0)
			cantidad = grid.GetCellValue(fila, 1)
			concepto = grid.GetCellValue(fila, 2)
			importe = grid.GetCellValue(fila, 3)
			if not cantidad: cantidad = 0
			if not importe: importe = 0
			comentario = u"Eliminaci�n movimiento de detalle %s --> %s %s %s" \
					   % (int(iddetallefacturaestimacion), float(cantidad), concepto,
					      self.GetString(amount_and_cents_with_commas(float(importe))))
			self.GridBlogUpdate(comentario)
			self.ObtenerDetalle()
			self.CalculaDetalle()
				
	def EliminarDetalleFacturaEstimacion(self):
		grid = self.GetControl(ID_GRIDFACTURAESTIMACIONDETALLEFACTURA)
		fila = grid.GetGridCursorRow()
		if fila < 0:
			return False
		iddetallefacturaestimacion = grid.GetCellValue(fila, 0)
		if not iddetallefacturaestimacion:
			Mensajes().Info(self, u"� No se ha especificado el movimiento de detalle a eliminar !", u"Atenci�n")
			return False
		
		sql = "delete from %s where iddetallefacturaestimacion = %s" % (self.dbtable2, int(iddetallefacturaestimacion)) 
		try:
			cursor = r_cn.cursor()
			cursor.execute(str(sql))
			cursor.close()
			r_cn.commit()
			return True
		except:
			r_cn.rollback()
			Mensajes().Info(self,u"Sucedi� algo que impidi� eliminar este registro.\n" \
							u"Quiz� se deba a que hay otra informaci�n\nque depende de este registro.\n%s"
							% sql, u"Atenci�n")
			return False
	
	def ObtenerPagos(self):
		self.labelspagos = ((5, u""), (70, u"Fecha", wx.ALIGN_CENTER), (80, u"Referencia", wx.ALIGN_CENTER), (70, u"Importe", wx.ALIGN_RIGHT))
		grid = self.GetControl(ID_GRIDFACTURAESTIMACIONPAGOS); grid.Enable(True)
		if grid.GetNumberRows(): grid.DeleteRows(0, grid.GetNumberRows())
		if grid.GetNumberCols(): grid.DeleteCols(0, grid.GetNumberCols())
		self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONTOTALPAGOS).SetValue("")
		self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONSALDO).SetValue("")
		grid.InsertRows(0, 1); grid.InsertCols(0, len(self.labelspagos))

		for colindex, collabel in enumerate(self.labelspagos):
			grid.SetColSize(colindex, collabel[0])
			grid.SetColLabelValue(colindex, collabel[1])
		
		for col in range(0, len(self.labelspagos)):
			grid.SetCellBackgroundColour(0, col, wx.NamedColour("Medium Goldenrod"))
			if col == 0: grid.SetCellRenderer(0, col, NullGridRenderer())
			if col in (0, 1, 2, 3): grid.SetReadOnly(0, col, True)
			if col == 3:
				grid.SetColFormatFloat(col, -1, 2)
				grid.SetCellEditor(0, col, gridlib.GridCellFloatEditor(-1, 2))
						
		grid.SetColLabelSize(20)
		grid.SetRowLabelSize(20)
		grid.ForceRefresh()

		query = """
		select p.idpagofacturaestimacion, convert(varchar(10), e.fechaprogramada, 103), p.fkcheque, p.importe, e.estatus
		from gixfacturasestimacionpago p
		join gixegresoscheques e on p.fkcheque = e.idcheque
		where p.fkfacturaestimacion = %s order by e.fechaprogramada desc
		""" % self.idfacturaestimacion
		cursor = r_cn.cursor()
		cursor.execute(str(query))
		rows = fetchall(cursor)
		cursor.close()
		if rows:
			if len(rows) > 1:
				grid.AppendRows(len(rows) - 1)
			totalpagos = float(0)
			for fila, row in enumerate(rows):
				for col in range(0, len(self.labelspagos)):
					if fila % 2 == 0: grid.SetCellBackgroundColour(fila, col, wx.NamedColour("Medium Goldenrod"))
					if col == 0: grid.SetCellRenderer(fila, col, NullGridRenderer())
					if col in (0, 1, 2, 3): grid.SetReadOnly(fila, col, True)
					if col == 3:
						grid.SetColFormatFloat(col, -1, 2)
						grid.SetCellEditor(fila, col, gridlib.GridCellFloatEditor(-1, 2))
					if len(self.labelspagos[col]) in (3, 4):
						grid.SetCellAlignment(fila, col, self.labelspagos[col][2], wx.ALIGN_CENTER)
						
					funcion = ""    
					if len(self.labelspagos[col]) == 4:
						funcion = self.labelspagos[col][3]
					
					if col == 2:
						if self.GetString(row[4]) in self.estatussolicitud:
							referencia = self.GetString(row[2]) + " - SOLICITUD"
						elif self.GetString(row[4]) in self.estatusotros:
							referencia = self.GetString(row[2]) + " - OTROS"
						else:
							referencia = self.GetString(row[2]) + " - **"
						grid.SetCellValue(fila, col, referencia)
					elif col == 3:
						try:
							grid.SetCellValue(fila, col, self.GetString(row[3]))
							totalpagos += float(row[3])
							self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONTOTALPAGOS).\
								SetValue(self.GetString(amount_and_cents_with_commas(totalpagos)))
						except:
							grid.SetCellValue(fila, col, '**')
					elif row[col] == None:
						grid.SetCellValue(fila, col, '')
					else:
						if funcion == "":
							grid.SetCellValue(fila ,col, self.GetString(row[col]))
						else:
							try:
								grid.SetCellValue(fila, col, self.GetString(eval(funcion)))
							except:
								grid.SetCellValue(fila, col, '**')
								
			totalfacturas = self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONTOTALFACTURA).GetValue()
			saldo = float(0)
			if totalfacturas:
				try:
					saldo = float(totalfacturas.replace(",", "")) - totalpagos
				except:
					saldo = float(0)
					
			self.GetControl(ID_TEXTCTRLFACTURAESTIMACIONSALDO).SetValue(self.GetString(amount_and_cents_with_commas(saldo)))
								
			grid.AutoSizeColumns()
			grid.SetGridCursor(fila - 1, 1)
			grid.MakeCellVisible(fila - 1, 1)
		
	def OnGridRightClickPagos(self, event):
		grid = self.GetControl(ID_GRIDFACTURAESTIMACIONPAGOS)
		fila = grid.GetGridCursorRow()
		if fila > -1:
			idpagofacturaestimacion = grid.GetCellValue(fila, 0)
			fecha = grid.GetCellValue(fila, 1)
			referencia = grid.GetCellValue(fila, 2)
			importe = grid.GetCellValue(fila, 3)
			if not hasattr(self, "ID_ELIMINARPAGOFACTURAESTIMACION"):
				ID_ELIMINARPAGOFACTURAESTIMACION = wx.NewId()
				self.Bind(wx.EVT_MENU, self.OnEliminarPagoFacturaEstimacion, id = ID_ELIMINARPAGOFACTURAESTIMACION)
			popup = wx.Menu()
			popup.Append(ID_ELIMINARPAGOFACTURAESTIMACION, u"Eliminar Pago ' %s (%s) %s '" \
						 % (fecha, referencia, self.GetString(amount_and_cents_with_commas(float(importe)))))
			self.PopupMenu(popup)
			popup.Destroy()
		
	def OnEliminarPagoFacturaEstimacion(self, event):
		if self.EliminarPagoFacturaEstimacion():
			grid = self.GetControl(ID_GRIDFACTURAESTIMACIONPAGOS)
			fila = grid.GetGridCursorRow()
			idpagofacturaestimacion = grid.GetCellValue(fila, 0)
			fecha = grid.GetCellValue(fila, 1)
			referencia = grid.GetCellValue(fila, 2)
			importe = grid.GetCellValue(fila, 3)
			comentario = u"Eliminaci�n pago %s --> %s (%s) %s" \
					   % (int(idpagofacturaestimacion), fecha, referencia,
					      self.GetString(amount_and_cents_with_commas(float(importe))))
			self.GridBlogUpdate(comentario)
			self.ObtenerPagos()
			self.CalculaDetalle()
				
	def EliminarPagoFacturaEstimacion(self):
		grid = self.GetControl(ID_GRIDFACTURAESTIMACIONPAGOS)
		fila = grid.GetGridCursorRow()
		if fila < 0:
			return False
		idpagofacturaestimacion = grid.GetCellValue(fila, 0)
		if not idpagofacturaestimacion:
			Mensajes().Info(self, u"� No se ha especificado el pago a eliminar !", u"Atenci�n")
			return False
		
		sql = "delete from gixfacturasestimacionpago where idpagofacturaestimacion = %s" % (int(idpagofacturaestimacion)) 
		try:
			cursor = r_cn.cursor()
			cursor.execute(str(sql))
			cursor.close()
			r_cn.commit()
			return True
		except:
			r_cn.rollback()
			Mensajes().Info(self,u"Sucedi� algo que impidi� eliminar este registro.\n" \
							u"Quiz� se deba a que hay otra informaci�n\nque depende de este registro.\n%s"
							% sql, u"Atenci�n")
			return False
	
class GixProveedoresObra(wx.Frame, GixBase):
	dbtable = "gixproveedoresobras"
	campos = {ID_TEXTCTRLPROVEEDORRAZONSOCIAL:"tc", ID_TEXTCTRLPROVEEDORDOMICILIO:"tc", ID_TEXTCTRLPROVEEDORCOLONIA:"tc",
			  ID_TEXTCTRLPROVEEDORCODIGOPOSTAL:"tc", ID_TEXTCTRLPROVEEDORCIUDAD:"tc", ID_TEXTCTRLPROVEEDORESTADO:"tc",
			  ID_TEXTCTRLPROVEEDORTELEFONO:"tc", ID_TEXTCTRLPROVEEDORRFC:"tc", ID_TEXTCTRLPROVEEDOREMAIL:"tc",
			  ID_TEXTCTRLPROVEEDORCONTACTONOMBRE:"tc", ID_TEXTCTRLPROVEEDORCONTACTOEMAIL:"tc",
			  ID_TEXTCTRLPROVEEDORCONTACTONOTAS:"tc", ID_RADIOBOXPROVEEDORESTATUS:"rb"}
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize,
				 style = wx.DEFAULT_FRAME_STYLE, usuario = None):
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		self.parent = parent
		self.usuario = usuario
		self.textevent = True
		self.datointerno = ""
		self.FillingARecord = True
		self.validacontroles = True
		self.onguardar = True
		self.ctrlindex = 0
		
		self.mb = PROVEEDOROBRAMenuBarFunc()
		self.SetMenuBar(self.mb)
		self.tb = self.CreateToolBar(wx.TB_HORIZONTAL | wx.NO_BORDER | wx.TB_FLAT) # | wx.TB_TEXT )
		PROVEEDOROBRAToolBarFunc(self.tb)
		panel = wx.Panel(self, -1)
		ProveedoresObraFuncion(panel, True, True)
		
		wx.EVT_CLOSE(self, self.OnSalir)
		self.Bind(wx.EVT_MENU, self.OnAgregar, id = ID_MENUPROVEEDORARCHIVOAGREGAR)
		self.Bind(wx.EVT_MENU, self.OnEliminar, id = ID_MENUPROVEEDORARCHIVOELIMINAR)
		self.Bind(wx.EVT_MENU, self.OnGuardar, id = ID_MENUPROVEEDORARCHIVOGUARDAR)
		self.Bind(wx.EVT_MENU, self.OnSalir, id = ID_MENUPROVEEDORSALIR)
		self.Bind(wx.EVT_TOOL, self.OnAgregar, id = ID_TOOLPROVEEDORAGREGAR)
		self.Bind(wx.EVT_TOOL, self.OnEliminar, id = ID_TOOLPROVEEDORELIMINAR)
		self.Bind(wx.EVT_TOOL, self.OnGuardar, id = ID_TOOLPROVEEDORGUARDAR)
		self.Bind(wx.EVT_CHOICE, self.OnChoiceFiltro, id = ID_CHOICEPROVEEDORESTATUSFILTRO)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnLCtrl, id = ID_LISTCTRLPROVEEDOR)
		self.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.OnRightClick, id = ID_LISTCTRLPROVEEDOR)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLPROVEEDORRAZONSOCIAL)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLPROVEEDORDOMICILIO)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLPROVEEDORCOLONIA)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLPROVEEDORCODIGOPOSTAL)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLPROVEEDORCIUDAD)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLPROVEEDORESTADO)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLPROVEEDORTELEFONO)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLPROVEEDORRFC)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLPROVEEDOREMAIL)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLPROVEEDORCONTACTONOMBRE)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLPROVEEDORCONTACTOEMAIL)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLPROVEEDORCONTACTONOTAS)
		wx.EVT_RADIOBOX(self, ID_RADIOBOXPROVEEDORESTATUS, self.OnRadioBox)
		
		maxlength = {"RAZONSOCIAL":255, "DOMICILIO":50, "COLONIA":30, "CODIGOPOSTAL":5, "CIUDAD":30,
					 "ESTADO":25, "TELEFONO":15, "RFC":15, "EMAIL":50, "CONTACTONOMBRE":255,
					 "CONTACTOEMAIL":50, "CONTACTONOTAS":255}
		for id, length in maxlength.iteritems():
			self.GetControl(eval("ID_TEXTCTRLPROVEEDOR%s" % id)).SetMaxLength(length)
			
		anchos = [-1, 90, 200]
		self.CreateStatusBar(3)
		self.SetStatusWidths(anchos)
		self.SetStatusText(u"Proveedores", 1)
		self.SetStatusText(u"Control de Proveedores de Obra", 2)
		
		if wx.Platform == '__WXMSW__':
			self.GetControl(ID_LISTCTRLPROVEEDOR).SetSize(wx.Size(410, 580))
			self.GetControl(ID_NOTEBOOKPROVEEDOR).SetSize(wx.Size(440, 580))
		else:
			self.GetControl(ID_LISTCTRLPROVEEDOR).SetSize(wx.Size(410, 640))
			self.GetControl(ID_NOTEBOOKPROVEEDOR).SetSize(wx.Size(410, 640))
		
		self.currentitem = ""; self.original = {}
		self.idproveedor, self.agregar = 0,0
		self.GetControl(ID_CHOICEPROVEEDORESTATUSFILTRO).SetSelection(1)
		self.FillListCtrl()
		
	def OnSalir(self, event):
		self.Destroy()
		
	def OnRightClick(self, event):
		self.idregistryblog = self.idproveedor
		self.idtitleblog = "Registro"
		if not hasattr(self, "ID_VIEWBLOG"):
			ID_VIEWBLOG = wx.NewId(); ID_ADDBLOG = wx.NewId()
			self.Bind(wx.EVT_MENU, self.OnViewBlog, id = ID_VIEWBLOG)
			self.Bind(wx.EVT_MENU, self.OnAddBlog, id = ID_ADDBLOG)
		popup = wx.Menu()
		popup.Append(ID_VIEWBLOG, u"Consultar el Blog del %s %s" % (self.idtitleblog, self.idregistryblog))
		popup.Append(ID_ADDBLOG, u"Participar en el Blog...")
		self.PopupMenu(popup)
		popup.Destroy()

	def OnViewBlog(self, event):
		goal = ((90, u"Fecha"), (90, u"Hora"), (100, u"Usuario"), (300, u"Blog"))
		query = """
		select convert(varchar(50), FechaCaptura, 103), convert(varchar(50), FechaCaptura, 108),
		UsuarioCaptura, ContenidoText from Blogs
		where BlogGUID = '%s' order by FechaCaptura desc;
		select count(*) from Blogs where BlogGUID = '%s'
		""" % (self.BlogGUID, self.BlogGUID)
		title = u"Consultando el Blog %s %s" % (self.idtitleblog, self.idregistryblog)
		table = "Blogs"
		frame = GixFrameCatalogo(self, -1, title, wx.Point(20,20), wx.Size(800,600), 
								 wx.DEFAULT_FRAME_STYLE, None, None, None, table, goal, query,
								 gridsize = [680,350], color = "AQUAMARINE")
		frame.Centre(wx.BOTH)
		frame.Show(True)
		
	def OnAddBlog(self, event):
		blog = wx.TextEntryDialog(self, u"Digite", u"Participando en el Blog %s %s"
								  % (self.idtitleblog, self.idregistryblog),
								  defaultValue = "", style = wx.OK | wx.TE_MULTILINE)
		blog.SetSize(wx.Size(400,300))
		blog.Centre(wx.BOTH)
		blog.ShowModal()
		comment = blog.GetValue()
		blog.Destroy()
		if comment:
			sql = """
			insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension)
			values ('%s', getdate(), '%s', '%s', '%s', '%s')
			""" % (self.BlogGUID, self.usuario, comment, "", "")
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"� Problemas al actualizar el blog !", u"Atenci�n")
		
	def OnChoiceFiltro(self, event):
		self.FillListCtrl()
	
	def OnAgregar(self, event):
		self.agregar, self.NewFlag, self.FillingARecord = True, True, True
		self.GetControl(ID_NOTEBOOKPROVEEDOR).Enable(True)
		self.GetControl(ID_TEXTCTRLPROVEEDORID).SetValue("")
		self.validacontroles = False
		self.CleanForm()
		self.validacontroles = True
		self.MenuSetter(ID_MENUPROVEEDORARCHIVOAGREGAR, False)
		self.MenuSetter(ID_MENUPROVEEDORARCHIVOELIMINAR, False)
		self.MenuSetter(ID_MENUPROVEEDORARCHIVOGUARDAR, True)
		self.tb.EnableTool(ID_TOOLPROVEEDORAGREGAR, False)
		self.tb.EnableTool(ID_TOOLPROVEEDORELIMINAR, False)
		self.tb.EnableTool(ID_TOOLPROVEEDORGUARDAR, True)
		self.FillingARecord = False
		self.GetControl(ID_TEXTCTRLPROVEEDORRAZONSOCIAL).SetFocus()
		
	def OnEliminar(self, event):
		Mensajes().Info(self, u"� No puede eliminar a un proveedor de obra !\n\nSi desea no utilizarlo, desactivelo.",
						u"Atenci�n")
		
	def OnText(self, event):
		if self.validacontroles:
			self.ctrlactual = event.GetId()
			if self.ctrlactual not in (ID_TEXTCTRLPROVEEDOREMAIL, ID_TEXTCTRLPROVEEDORCONTACTOEMAIL):
				valor = self.GetControl(self.ctrlactual).GetValue().encode("iso8859-1")
				valornum = str(valor).replace('.',''); valornum = str(valornum).replace(':', '')
				if valor and not valornum.isdigit():
					if not str(valor).isupper():
						if self.textevent:
							self.textevent = False
							self.GetControl(self.ctrlactual).SetValue(str(valor).upper())
						lastposition = self.GetControl(self.ctrlactual).GetLastPosition()
						self.GetControl(self.ctrlactual).SetInsertionPoint(lastposition)
					
			self.Text()
	
	def Text(self, VengodelaLista = False, texto = True):
		if self.onguardar:
			self.textevent = True
			for id, tipo in self.campos.iteritems():
				control = self.GetControl(id)
				if tipo == "tc":
					valor = control.GetValue().strip()
				elif tipo == "ch":
					valor = control.GetSelection()
					if valor < 0:
						valor = ""
				if valor == "" and not self.FillingARecord and not self.NewFlag:
					self.NewFlag = True
					if not VengodelaLista:
						Mensajes().Info(self, u"� No debe quedar ning�n dato en blanco !", u"Atenci�n")
						return False
				
			if not self.FillingARecord:
				self.RevisaCambios()
	
		return True
			
	def RevisaCambios(self, cambioguardia = False, cambiopartida = False):
		for id, tipo in self.campos.iteritems():
			control = self.GetControl(id)
			if tipo == "tc":
				valor = control.GetValue()
				if valor != self.original[id]:
					control.SetBackgroundColour(wx.CYAN)
					cambioguardia = True
				else:
					control.SetBackgroundColour(wx.WHITE)
			elif tipo == "ch":
				pass
			elif tipo == "rb":
				valor = control.GetStringSelection()
				if id == ID_RADIOBOXPROVEEDORESTATUS:
					if valor == "Desactivado":
						valor = 0
					else:
						valor = 1
				if valor != self.original[id]:
					control.SetOwnBackgroundColour(wx.CYAN)
					cambioguardia = True
				else:
					control.SetOwnBackgroundColour(wx.NullColour)
			control.Refresh()
		
		if cambioguardia:
			self.MenuSetter(ID_MENUPROVEEDORARCHIVOAGREGAR, False)
			self.MenuSetter(ID_MENUPROVEEDORARCHIVOELIMINAR, False)
			self.MenuSetter(ID_MENUPROVEEDORARCHIVOGUARDAR, True)
			self.tb.EnableTool(ID_TOOLPROVEEDORAGREGAR, False)
			self.tb.EnableTool(ID_TOOLPROVEEDORELIMINAR, False)
			self.tb.EnableTool(ID_TOOLPROVEEDORGUARDAR, True)
		else:
			self.MenuSetter(ID_MENUPROVEEDORARCHIVOAGREGAR, True)
			self.MenuSetter(ID_MENUPROVEEDORARCHIVOELIMINAR, True)
			self.MenuSetter(ID_MENUPROVEEDORARCHIVOGUARDAR, False)
			self.tb.EnableTool(ID_TOOLPROVEEDORAGREGAR, True)
			self.tb.EnableTool(ID_TOOLPROVEEDORELIMINAR, True)
			self.tb.EnableTool(ID_TOOLPROVEEDORGUARDAR, False)
	
	def OnRadioBox(self, event):
		if not self.FillingARecord:
			self.RevisaCambios()
	
	def OnLCtrl(self, event):
		self.agregar = False
		self.FillingARecord = True
		self.currentitem = event.m_itemIndex
		datointerno = self.GetControl(ID_LISTCTRLPROVEEDOR).GetItem(self.currentitem, 0).GetText()
		self.datointerno = int(datointerno)
		self.LCtrl()
		self.FillingARecord = False
		event.Skip()

	def LCtrl(self, onguardar = False):
		cambio = False
		if self.tb.GetToolEnabled(ID_TOOLPROVEEDORGUARDAR):
			for id, tipo in self.campos.iteritems():
				control = self.GetControl(id)
				if tipo == "tc":
					valor = control.GetValue()
					if valor != self.original[id]:
						cambio = True
				elif tipo == "ch":
					pass
				elif tipo == "rb":
					valor = control.GetStringSelection()
					if id == ID_RADIOBOXPROVEEDORESTATUS:
						if valor == "Desactivado":
							valor = 0
						else:
							valor = 1
					if valor != self.original[id]:
						cambio = True
			
		if cambio:
			self.NewFlag = False
			self.Text(True)
			if not self.NewFlag:
				if onguardar:
					if Mensajes().YesNo(self,u"� Desea realmente grabar la informaci�n ?", u"Confirmaci�n"):
						self.GuardarDetalle(onguardar)
				else:
					if self.GetControl(ID_TEXTCTRLPROVEEDORID).GetValue():
						Mensajes().Info(self, u"� No guardo los cambios del proveedor %s !\n\n" \
										u"Por lo tanto, no ser ver� afectado el registro del proveedor." \
										% self.idproveedor, u"Atenci�n")
					else:
						Mensajes().Info(self, u"� No guardo el nuevo proveedor !\n\n" \
										u"Por lo tanto, no quedar� registrado.", u"Atenci�n")
						
				for id, tipo in self.campos.iteritems():
					ctrl = self.GetControl(id)
					if tipo in ("tc", "ch"):
						ctrl.SetBackgroundColour(wx.WHITE)
					elif tipo == "rb":
						ctrl.SetOwnBackgroundColour(wx.NullColour)
					ctrl.Refresh()

		if self.datointerno:
			if self.GetRecord(record = self.datointerno):
				self.MenuSetter(ID_MENUPROVEEDORARCHIVOAGREGAR, True)
				self.MenuSetter(ID_MENUPROVEEDORARCHIVOELIMINAR, True)
				self.MenuSetter(ID_MENUPROVEEDORARCHIVOGUARDAR, False)
				self.tb.EnableTool(ID_TOOLPROVEEDORAGREGAR, True)
				self.tb.EnableTool(ID_TOOLPROVEEDORELIMINAR, True)
				self.tb.EnableTool(ID_TOOLPROVEEDORGUARDAR, False)
				self.GetControl(ID_NOTEBOOKPROVEEDOR).Enable(True)
				self.editable = True
			else:
				Mensajes().Warn(self, u"Escoja un registro v�lido", u"Atenci�n")
		else:
			self.FillListCtrl()
			
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
		return dato
	
	def GetRecord(self, record):
		try:
			self.idproveedor = int(record)
		except:
			return False
		sql = """
		select razonsocial, domicilio, colonia, cp, ciudad, estado, telefono, rfc, email,
		contactonombre, contactoemail, contactonotas, estatus, convert(varchar(100), BlogGUID)
		from %s where idproveedor = %s
		""" % (self.dbtable, self.idproveedor)
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		cursor.close()
		self.original[ID_TEXTCTRLPROVEEDORRAZONSOCIAL] = self.GetString(row[0])
		self.original[ID_TEXTCTRLPROVEEDORDOMICILIO] =self.GetString(row[1])
		self.original[ID_TEXTCTRLPROVEEDORCOLONIA] = self.GetString(row[2])
		self.original[ID_TEXTCTRLPROVEEDORCODIGOPOSTAL] = self.GetString(row[3])
		self.original[ID_TEXTCTRLPROVEEDORCIUDAD] = self.GetString(row[4])
		self.original[ID_TEXTCTRLPROVEEDORESTADO] = self.GetString(row[5])
		self.original[ID_TEXTCTRLPROVEEDORTELEFONO] = self.GetString(row[6])
		self.original[ID_TEXTCTRLPROVEEDORRFC] = self.GetString(row[7])
		self.original[ID_TEXTCTRLPROVEEDOREMAIL] = self.GetString(row[8])
		self.original[ID_TEXTCTRLPROVEEDORCONTACTONOMBRE] = self.GetString(row[9])
		self.original[ID_TEXTCTRLPROVEEDORCONTACTOEMAIL] = self.GetString(row[10])
		self.original[ID_TEXTCTRLPROVEEDORCONTACTONOTAS] = self.GetString(row[11])
		self.original[ID_RADIOBOXPROVEEDORESTATUS] = int(row[12])
		
		self.GetControl(ID_TEXTCTRLPROVEEDORID).SetValue(str(self.idproveedor))
		self.GetControl(ID_TEXTCTRLPROVEEDORRAZONSOCIAL).SetValue(self.GetString(row[0]))
		self.GetControl(ID_TEXTCTRLPROVEEDORDOMICILIO).SetValue(self.GetString(row[1]))
		self.GetControl(ID_TEXTCTRLPROVEEDORCOLONIA).SetValue(self.GetString(row[2]))
		self.GetControl(ID_TEXTCTRLPROVEEDORCODIGOPOSTAL).SetValue(self.GetString(row[3]))
		self.GetControl(ID_TEXTCTRLPROVEEDORCIUDAD).SetValue(self.GetString(row[4]))
		self.GetControl(ID_TEXTCTRLPROVEEDORESTADO).SetValue(self.GetString(row[5]))
		self.GetControl(ID_TEXTCTRLPROVEEDORTELEFONO).SetValue(self.GetString(row[6]))
		self.GetControl(ID_TEXTCTRLPROVEEDORRFC).SetValue(self.GetString(row[7]))
		self.GetControl(ID_TEXTCTRLPROVEEDOREMAIL).SetValue(self.GetString(row[8]))
		self.GetControl(ID_TEXTCTRLPROVEEDORCONTACTONOMBRE).SetValue(self.GetString(row[9]))
		self.GetControl(ID_TEXTCTRLPROVEEDORCONTACTOEMAIL).SetValue(self.GetString(row[10]))
		self.GetControl(ID_TEXTCTRLPROVEEDORCONTACTONOTAS).SetValue(self.GetString(row[11]))
		if int(row[12]):
			self.GetControl(ID_RADIOBOXPROVEEDORESTATUS).SetStringSelection("Activado")
		else:
			self.GetControl(ID_RADIOBOXPROVEEDORESTATUS).SetStringSelection("Desactivado")
		self.BlogGUID = str(row[13])
			
		return True
	
	def GuardarDetalle(self, onguardar = False):
		self.SaveRecord(onguardar)
	
	def OnGuardar(self, event):
		F, N = self.FillingARecord, self.NewFlag
		self.FillingARecord, self.NewFlag = False, False
		todobien = self.Text()
		self.onguardar = False
		self.FillingARecord, self.NewFlag = F, N
		if todobien:
			self.FillingARecord = True
			self.LCtrl(True)
			self.FillingARecord = False
		self.onguardar = True
		event.Skip()
		
	def SaveRecord(self, onguardar = False):
		wx.BeginBusyCursor()
		if self.agregar:
			bienGrabado, self.idproveedor = self.AddRecord()
		else:
			bienGrabado = self.UpdateRecord()
		wx.EndBusyCursor()
			
		if bienGrabado:
			lctrl = self.GetControl(ID_LISTCTRLPROVEEDOR)
			if self.agregar:
				self.FillListCtrl()
				lctrl.SetItemState(self.ctrlindex, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
				self.GetRecord(record = self.idproveedor)
			else:
				if onguardar:
					self.FillListCtrl()
					lctrl.SetItemState(self.ctrlindex, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
					self.GetRecord(record = self.idproveedor)
				else:
					try:
						self.idproveedor = self.datointerno
						self.FillListCtrl()
						lctrl.SetItemState(self.ctrlindex, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
						self.GetRecord(record = self.idproveedor)
					except:
						pass
		else:
			Mensajes().Info(self, u"� El Registro no fue grabado !", u"Atenci�n")
			
	def UpdateRecord(self, querycancelar = ""):
		razonsocial = self.GetControl(ID_TEXTCTRLPROVEEDORRAZONSOCIAL).GetValue().strip()
		domicilio = self.GetControl(ID_TEXTCTRLPROVEEDORDOMICILIO).GetValue().strip()
		colonia = self.GetControl(ID_TEXTCTRLPROVEEDORCOLONIA).GetValue().strip()
		cp = self.GetControl(ID_TEXTCTRLPROVEEDORCODIGOPOSTAL).GetValue().strip()
		ciudad = self.GetControl(ID_TEXTCTRLPROVEEDORCIUDAD).GetValue().strip()
		estado = self.GetControl(ID_TEXTCTRLPROVEEDORESTADO).GetValue().strip()
		telefono = self.GetControl(ID_TEXTCTRLPROVEEDORTELEFONO).GetValue().strip()
		rfc = self.GetControl(ID_TEXTCTRLPROVEEDORRFC).GetValue().strip()
		email = self.GetControl(ID_TEXTCTRLPROVEEDOREMAIL).GetValue().strip()
		contactonombre = self.GetControl(ID_TEXTCTRLPROVEEDORCONTACTONOMBRE).GetValue().strip()
		contactoemail = self.GetControl(ID_TEXTCTRLPROVEEDORCONTACTOEMAIL).GetValue().strip()
		contactonotas = self.GetControl(ID_TEXTCTRLPROVEEDORCONTACTONOTAS).GetValue().strip()
		valor = self.GetControl(ID_RADIOBOXPROVEEDORESTATUS).GetStringSelection()
		estatus = 0
		if valor == "Activado":
			estatus = 1
		setListForQuery = """
		razonsocial = '%s', domicilio = '%s', colonia = '%s', cp = '%s', ciudad = '%s', estado = '%s', telefono ='%s',
		rfc = '%s', email = '%s', contactonombre = '%s', contactoemail = '%s', contactonotas = '%s', estatus = %s
		""" % (razonsocial, domicilio, colonia, cp, ciudad, estado, telefono, rfc, email,
			   contactonombre, contactoemail, contactonotas, estatus)
		sql = "update %s set %s where idproveedor = %s" % (self.dbtable, setListForQuery, self.idproveedor)
		queTal, trash = self.QueryUpdateRecord(sql)
		if queTal:
			contenido = u"Edici�n del registro"
			sql = """
			insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura, ContenidoText, ContenidoBinario, Extension, Estatus)
			values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
			""" % (self.BlogGUID, self.usuario, contenido, "", "", "")
			if not self.QueryUpdateRecord(sql):
				Mensajes().Info(self, u"Problemas al actualizar el blog.", u"Atenci�n")
		
		return queTal
	
	def AddRecord(self):
		razonsocial = self.GetControl(ID_TEXTCTRLPROVEEDORRAZONSOCIAL).GetValue().strip()
		domicilio = self.GetControl(ID_TEXTCTRLPROVEEDORDOMICILIO).GetValue().strip()
		colonia = self.GetControl(ID_TEXTCTRLPROVEEDORCOLONIA).GetValue().strip()
		cp = self.GetControl(ID_TEXTCTRLPROVEEDORCODIGOPOSTAL).GetValue().strip()
		ciudad = self.GetControl(ID_TEXTCTRLPROVEEDORCIUDAD).GetValue().strip()
		estado = self.GetControl(ID_TEXTCTRLPROVEEDORESTADO).GetValue().strip()
		telefono = self.GetControl(ID_TEXTCTRLPROVEEDORTELEFONO).GetValue().strip()
		rfc = self.GetControl(ID_TEXTCTRLPROVEEDORRFC).GetValue().strip()
		email = self.GetControl(ID_TEXTCTRLPROVEEDOREMAIL).GetValue().strip()
		contactonombre = self.GetControl(ID_TEXTCTRLPROVEEDORCONTACTONOMBRE).GetValue().strip()
		contactoemail = self.GetControl(ID_TEXTCTRLPROVEEDORCONTACTOEMAIL).GetValue().strip()
		contactonotas = self.GetControl(ID_TEXTCTRLPROVEEDORCONTACTONOTAS).GetValue().strip()
		valor = self.GetControl(ID_RADIOBOXPROVEEDORESTATUS).GetStringSelection()
		estatus = 0
		if valor == "Activado":
			estatus = 1
		sqlFields = """
		razonsocial, domicilio, colonia, cp, ciudad, estado, telefono, rfc, email,
		contactonombre, contactoemail, contactonotas, estatus
		"""
		sqlValues = """
		'%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', %s
		""" % (razonsocial, domicilio, colonia, cp, ciudad, estado, telefono, rfc, email,
			   contactonombre, contactoemail, contactonotas, estatus)
		sql = """
		insert into %s (%s) values (%s)
		""" % (self.dbtable, sqlFields, sqlValues) 
		sqlmax = "select max(idproveedor) from %s" % (self.dbtable)
		queTal, idproveedor =  self.QueryUpdateRecord(sql, sqlmax, True)
		if queTal:
			self.GetControl(ID_TEXTCTRLPROVEEDORID).SetValue(str(idproveedor))
			sql = "select convert(varchar(100), BlogGUID) from %s where idproveedor = %s" % \
				(self.dbtable, idproveedor)
			cu = r_cn.cursor()
			cu.execute(str(sql))
			blog = fetchone(cu)
			cu.close()
			if blog is not None:
				self.BlogGUID = blog[0]
				sql = """
				insert into Blogs (BlogGUID, FechaCaptura, UsuarioCaptura,
				ContenidoText, ContenidoBinario, Extension, Estatus)
				values ('%s', getdate(), '%s', '%s', '%s', '%s', '%s')
				""" % (self.BlogGUID, self.usuario, "Alta del Proveedor de Obra", "", "", "")
				if not self.QueryUpdateRecord(sql):
					Mensajes().Info(self, u"Problemas al actualizar el blog.\n\n" % sql, u"Atenci�n")

		return queTal, idproveedor
	
	def CleanForm(self):
		self.original.clear()
		for id, tipo in self.campos.iteritems():
			self.original[id] = ""
			ctrl = self.GetControl(id)
			if tipo in ("tc", "ch"):
				ctrl.SetBackgroundColour(wx.WHITE)
			elif tipo == "rb":
				ctrl.SetOwnBackgroundColour(wx.NullColour)
			ctrl.Refresh()
		self.original[ID_RADIOBOXPROVEEDORESTATUS] = "1"
		
		self.GetControl(ID_TEXTCTRLPROVEEDORID).SetValue("")
		self.GetControl(ID_TEXTCTRLPROVEEDORRAZONSOCIAL).SetValue("")
		self.GetControl(ID_TEXTCTRLPROVEEDORDOMICILIO).SetValue("")
		self.GetControl(ID_TEXTCTRLPROVEEDORCOLONIA).SetValue("")
		self.GetControl(ID_TEXTCTRLPROVEEDORCODIGOPOSTAL).SetValue("")
		self.GetControl(ID_TEXTCTRLPROVEEDORCIUDAD).SetValue("")
		self.GetControl(ID_TEXTCTRLPROVEEDORESTADO).SetValue("")
		self.GetControl(ID_TEXTCTRLPROVEEDORTELEFONO).SetValue("")
		self.GetControl(ID_TEXTCTRLPROVEEDORRFC).SetValue("")
		self.GetControl(ID_TEXTCTRLPROVEEDOREMAIL).SetValue("")
		self.GetControl(ID_TEXTCTRLPROVEEDORCONTACTONOMBRE).SetValue("")
		self.GetControl(ID_TEXTCTRLPROVEEDORCONTACTOEMAIL).SetValue("")
		self.GetControl(ID_TEXTCTRLPROVEEDORCONTACTONOTAS).SetValue("")
		self.GetControl(ID_RADIOBOXPROVEEDORESTATUS).SetStringSelection("Activado")
	
	def FillListCtrl(self):
		wx.BeginBusyCursor()
		lctrl = self.GetControl(ID_LISTCTRLPROVEEDOR)
		lctrl.Enable(False); lctrl.Show(False); lctrl.ClearAll()
		estatusfiltro = self.GetControl(ID_CHOICEPROVEEDORESTATUSFILTRO).GetSelection()
		self.estatusfiltro = ""
		if estatusfiltro == 1:
			self.estatusfiltro = "where estatus = 1"
		elif estatusfiltro == 2:
			self.estatusfiltro = "where estatus = 0"
		sql = """
		select idproveedor, razonsocial, estatus from %s %s order by razonsocial
		""" % (self.dbtable, self.estatusfiltro)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		fila = 0
		if rows:
			lctrl.InsertColumn(0, u"Id", wx.LIST_FORMAT_CENTER)
			lctrl.InsertColumn(1, u"Razon Social")
			for row in rows:
				if not int(row[2]):
					if fila %2 != 0: bgcolor = [255,153,153]
					else:            bgcolor = [255,215,215]
				else:
					if fila %2 != 0: bgcolor = [204,204,255]
					else:            bgcolor = [230,230,255]
				index = lctrl.InsertStringItem(sys.maxint, str(row[0]))
				lctrl.SetItemBackgroundColour(index, wx.Colour(bgcolor[0], bgcolor[1], bgcolor[2]))
				lctrl.SetStringItem(index, 0, str(row[0]))
				lctrl.SetStringItem(index, 1, self.GetString(row[1]))
				lctrl.SetItemData(index, row[0])
				if int(row[0]) == self.idproveedor:
					self.ctrlindex = index
				fila += 1
			lctrl.SetColumnWidth(0, 50)
			lctrl.SetColumnWidth(1, wx.LIST_AUTOSIZE)
		else:
			lctrl.InsertColumn(0, "       No Existen Registros", wx.LIST_FORMAT_CENTER)
			lctrl.SetColumnWidth(0, 167)
		self.MenuSetter(ID_MENUPROVEEDORARCHIVOAGREGAR, True)
		self.MenuSetter(ID_MENUPROVEEDORARCHIVOELIMINAR, False)
		self.MenuSetter(ID_MENUPROVEEDORARCHIVOGUARDAR, False)
		self.tb.EnableTool(ID_TOOLPROVEEDORAGREGAR, True)
		self.tb.EnableTool(ID_TOOLPROVEEDORELIMINAR, False)
		self.tb.EnableTool(ID_TOOLPROVEEDORGUARDAR, False)
		self.GetControl(ID_NOTEBOOKPROVEEDOR).Enable(False)
		lctrl.Show(True); lctrl.Enable(True)
		self.currentitemlst = []
		self.selecteditems = []
		self.validacontroles = False
		self.CleanForm()
		self.validacontroles = True
		wx.EndBusyCursor()
		if self.currentitem:
			lctrl.EnsureVisible(self.currentitem)
		salir = True
		self.NewFlag = False
		return salir, fila

class GixBancos(wx.Frame, GixBase):
	coloreable = "ID_TEXTCTRLBANCOSBANCO"
	coloreableeditable = False
	ctt = [coloreable,"ID_TEXTCTRLBANCOSNOMBRE", "ID_TEXTCTRLBANCOSDIRECCION", "ID_TEXTCTRLBANCOSTELEFONO",
		   "ID_TEXTCTRLBANCOSEMAIL", "ID_TEXTCTRLBANCOSWEB", "ID_TEXTCTRLBANCOSCONTACTONOMBRE",
		   "ID_TEXTCTRLBANCOSCONTACTOTELEFONO","ID_TEXTCTRLBANCOSCONTACTOEMAIL"]
	ctrlmayuscula = [ID_TEXTCTRLBANCOSNOMBRE, ID_TEXTCTRLBANCOSDIRECCION, ID_TEXTCTRLBANCOSTELEFONO,
					 ID_TEXTCTRLBANCOSCONTACTONOMBRE, ID_TEXTCTRLBANCOSCONTACTOTELEFONO]
	activecontrolafternewrecord = ID_TEXTCTRLBANCOSNOMBRE
	listbox = ID_LISTBOXBANCOS
	dbtable  = "gixbancos" #esto permite probar con tablas alternas iguales ( mismos campos distinto nombre )
	controles_tipo_txt = dict(zip(ctt,map(eval,ctt)))
	
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize,
				 style = wx.DEFAULT_FRAME_STYLE, usuario = None):
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		self.usuario = usuario
		self.empresaid = self.GetEmpresa()
		self.InitialFlags()
		self.InitialStuff(self, BancosCatalogoFuncion)     
		self.grid = self.GetControl(ID_GRIDBANCOSFIRMANTES)
		self.Bind(gridlib.EVT_GRID_CELL_LEFT_CLICK, self.OnLeftGridClick, id = ID_GRIDBANCOSFIRMANTES)
		self.Bind(wx.EVT_BUTTON, self.OnGridFirmante, id = ID_BITMAPBUTTONBANCOSAGREGARFIRMANTE)
		self.Bind(wx.EVT_BUTTON, self.OnGridFirmante, id = ID_BITMAPBUTTONBANCOSELIMINARFIRMANTE)
		self.InitialBindings()
		self.sb.Destroy()
		anchos = [-1,130]
		self.CreateStatusBar(2)
		self.SetStatusWidths(anchos)
		self.SetStatusText(u"Recursos Financieros", 0)
		self.SetStatusText(u"Cat�logo de Bancos", 1)
		self.FillGridCtrl()
		
	def GetEmpresa(self):
		obj = Parametro(usuario = self.usuario)
		self.ObtenerEmpresa(obj.empresadetrabajo)
		return obj.empresadetrabajo
		
	def ObtenerEmpresa(self, empresaid):
		""" Obtener de base de datos la raz�n social de la empresa
		"""
		query = """
		select RazonSocial + ' - ' + convert(varchar(7), EmpresaID)
		from cont_Empresas where EmpresaId = %s
		""" % empresaid
		try:
			cu = r_cn.cursor()
			cu.execute(query)
			row = fetchone(cu)
			cu.close()
			if row:
				self.SetTitle(self.GetStringFromField(row[0]),)
			else:
				Mensajes().Info(self, u"No se ha encontrado la empresa de trabajo.\n" \
								u"Por favor abandone este m�dulo y verifique.", u"Atenci�n")
		except:
			cu.close()
			Mensajes().Info(self, u"Se estan experimentando problemas.\n" \
							u"Por favor abandone este m�dulo y verifique.\n\n%s" % query, u"Atenci�n")
		
	def FillListBox(self, display = 'first'):
		wx.BeginBusyCursor()
		lbox = self.GetControl(ID_LISTBOXBANCOS)
		lbox.Clear()
		sql = "SELECT idbanco FROM %s where empresaid = %s order by idbanco" % (self.dbtable, self.empresaid)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		if rows:
			for row in rows:
				dato = str(row[0]).rjust(9)
				lbox.Append(dato,row[0])
			cu.close()
			if display == 'first':
				self.GetLFRecord("min")
			elif display == 'last':
				self.GetLFRecord("max")
		else:
			cu.close()
		wx.EndBusyCursor()
		
	def OnPrint(self,event):
		tabla = self.dbtable
		meta = (( 14, "Id Banco") , (300, u"Nombre"), (100,u"Email"),(20,u"Tel�fono"),
			(100,u"Nombre del Contacto"), (100,"Email del Contacto"),(20,u"Tel�fono del Contacto"))
		query = """
		select idbanco, nombre, email, telefono, contactonombre, contactoemail, contactotelefono
		from gixbancos where empresaid = %s order by nombre
		""" % self.empresaid
		titulo = u"Consulta de Bancos " 
		self.DisplayGrid(tabla, meta, query, titulo)
		
	def OnSearch(self, event):
		pass
		
	def GetLFRecord(self, what):
		lbox = self.GetControl(self.listbox)
		sql = "SELECT %s(idbanco) from %s where empresaid = %s" % (what, self.dbtable, self.empresaid) 
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		numero = ""
		row = fetchone(cursor)
		if row is not None:
			numero = int(row[0])
		cursor.close()
		self.GetRecord(numero)
		self.ListBoxReposition(what)
		
	def OnText(self,event):
		self.controlactual = event.GetId()
		self.Text()
	
	def Text(self, VengodelaLista = False):
		for id in( ID_TEXTCTRLBANCOSNOMBRE, ID_TEXTCTRLBANCOSCONTACTONOMBRE):
			control = self.GetControl(id)
			valor = control.GetValue().strip()
			if valor == "" and not self.FillingARecord and not self.NewFlag:
				self.NewFlag = True
				if not VengodelaLista:
					Mensajes().Info(self, u"No deben quedar en blanco el nombre del banco\n" \
									u"y el nombre del contacto", u"Atenci�n")
					return
				
			if self.controlactual in self.ctrlmayuscula:
				ctrl = self.GetControl(self.controlactual)
				valor = ctrl.GetValue().encode("iso8859-1")
				valornum = str(valor).replace('.','')
				if valor and not valornum.isdigit():
					if valor not in (",", ".", "#", "&", "!", "�", "?", "�", "/", "(", ")", "$", "'"):
						if not str(valor).isupper():
							ctrl.SetValue(str(valor).upper())
							lastposition = ctrl.GetLastPosition()
							ctrl.SetInsertionPoint(lastposition)
					else:
						ctrl.SetValue("")
				
		self.EndOfOnText(self.controlactual)    
		
	def SaveRecord(self):
		banco = self.GetControl(ID_TEXTCTRLBANCOSBANCO).GetValue()
		if banco.strip() == "":
			bienGrabado = self.AddRecord()
			lbx = self.GetControl(ID_LISTBOXBANCOS)
			lbx.Clear()
			self.FillListBox("last")   # se va al final de la lista aunque la alta haya sido de un puesto intermedio
			puesto = self.GetControl(ID_TEXTCTRLBANCOSBANCO).GetValue()
		else:
			bienGrabado = self.UpdateRecord()
			
		if bienGrabado:
			self.tb.EnableTool(ID_TOOLSAV, False)
			self.tb.EnableTool(ID_TOOLDEL, True)
			self.tb.EnableTool(ID_TOOLNEW, True)
			self.MenuSetter(ID_MENUGRABAR, False)
			self.MenuSetter(ID_MENUELIMINAR, True)
			self.MenuSetter(ID_MENUNUEVO, True)
			self.GetRecord("%s" % (banco))
		else:
			Mensajes().Info(self,u"� El Registro no fue grabado !", u"Atenci�n")
			
	def UpdateRecord( self ):
		idbanco = self.GetControl(ID_TEXTCTRLBANCOSBANCO).GetValue()
		empresaid = self.empresaid
		nombre = self.GetControl(ID_TEXTCTRLBANCOSNOMBRE).GetValue()
		direccion = self.GetControl(ID_TEXTCTRLBANCOSDIRECCION).GetValue()
		telefono = self.GetControl(ID_TEXTCTRLBANCOSTELEFONO).GetValue()
		email = self.GetControl(ID_TEXTCTRLBANCOSEMAIL).GetValue()
		web = self.GetControl(ID_TEXTCTRLBANCOSWEB).GetValue()
		contactonombre = self.GetControl(ID_TEXTCTRLBANCOSCONTACTONOMBRE).GetValue()
		contactotelefono = self.GetControl(ID_TEXTCTRLBANCOSCONTACTOTELEFONO).GetValue()
		contactoemail = self.GetControl(ID_TEXTCTRLBANCOSCONTACTOEMAIL).GetValue()
		setListForQuery = """
		empresaid = %s, nombre = '%s', direccion = '%s', telefono = '%s', email = '%s', web = '%s', 
		contactonombre = '%s', contactotelefono = '%s', contactoemail = '%s'
		""" % (empresaid, nombre, direccion, telefono, email, web, contactonombre, contactotelefono, contactoemail)
		sql = "update %s set %s " \
				"where idbanco = %s " % (self.dbtable, setListForQuery, idbanco)
		return self.QueryUpdateRecord(sql)
	
	def AddRecord(self):
		idbanco = self.GetControl(ID_TEXTCTRLBANCOSBANCO).GetValue()
		empresaid = self.empresaid
		nombre = self.GetControl(ID_TEXTCTRLBANCOSNOMBRE).GetValue()
		direccion = self.GetControl(ID_TEXTCTRLBANCOSDIRECCION).GetValue()
		telefono = self.GetControl(ID_TEXTCTRLBANCOSTELEFONO).GetValue()
		email = self.GetControl(ID_TEXTCTRLBANCOSEMAIL).GetValue()
		web = self.GetControl(ID_TEXTCTRLBANCOSWEB).GetValue()
		contactonombre = self.GetControl(ID_TEXTCTRLBANCOSCONTACTONOMBRE).GetValue()
		contactotelefono = self.GetControl(ID_TEXTCTRLBANCOSCONTACTOTELEFONO).GetValue()
		contactoemail = self.GetControl(ID_TEXTCTRLBANCOSCONTACTOEMAIL).GetValue()
		sqlFields = """ 
		empresaid, nombre, direccion, telefono, email, web, contactonombre, contactotelefono, contactoemail
		"""
		sqlValues = "%s, '%s', '%s', '%s', '%s', '%s', '%s', '%s','%s'" % \
			(empresaid, nombre, direccion, telefono, email, web, contactonombre, contactotelefono, contactoemail)
		sql = "insert into %s (%s) values (%s) " % (self.dbtable, sqlFields, sqlValues) 
		queTal =  self.QueryUpdateRecord(sql)
		if queTal:
			sqlx = "select max(idbanco) from gixbancos where empresaid = %s" % empresaid
			cursor = r_cn.cursor()
			cursor.execute(str(sqlx))
			row = fetchone(cursor)
			numero = ""
			if row is not None:
				numero = str(int(row[0]))
			cursor.close()
			self.GetControl(ID_TEXTCTRLBANCOSBANCO).SetValue(numero)
		return queTal
	
	def OnDeleteRecord(self, event):
		if Mensajes().YesNo(self,u"� Desea realmente eliminar este registro ?", u"Confirmaci�n") :
			if self.DeleteRecord():
				lbx = self.GetControl(ID_LISTBOXBANCOS)
				pos = lbx.GetSelection()
				self.MoveOneStep("PREVIOUS")
				lbx.Delete(pos)
				Mensajes().Info(self,u"� Registro Eliminado !",u"Atenci�n")
				self.tb.EnableTool( ID_TOOLSAV, False)
				self.tb.EnableTool( ID_TOOLDEL, True)
				self.tb.EnableTool( ID_TOOLNEW, True)
				self.MenuSetter(ID_MENUGRABAR, False)
				self.MenuSetter(ID_MENUELIMINAR, True)
				self.MenuSetter(ID_MENUNUEVO, True)
				
	def DeleteRecord(self):
		idbanco = self.GetControl(ID_TEXTCTRLBANCOSBANCO).GetValue().strip()
		if idbanco == "":
			Mensajes().Info(self, u"No se ha especificado el banco", u"Atenci�n")
			return False
		sql = "delete from %s where idbanco = %s" % (self.dbtable, idbanco) 
		try:
			cursor = r_cn.cursor()
			cursor.execute(str(sql))
			cursor.close()
			r_cn.commit()
			return True
		except:
			r_cn.rollback()
			Mensajes().Info(self,u"Sucedi� algo que impidi� eliminar este registro.\n" \
							u"Quiz� se deba a que hay otra informaci�n\nque depende de este registro.\n%s"
							% sql, u"Atenci�n")
			return False
	
	def GetAnotherRecord(self, comparison):
		if comparison == "<":
			asc_or_desc = "DESC"
		else:
			asc_or_desc = "ASC"
		lbox = self.GetControl(self.listbox)
		lboxIndex = lbox.GetSelection()
		banco = lbox.GetClientData(lboxIndex)
		sql = "select top 1 idbanco from %s where idbanco %s %s and empresaid = %s order by idbanco %s" \
			% (self.dbtable, comparison, banco, self.empresaid, asc_or_desc)
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		numero = ""
		if row is not None:
			numero = str(int(row[0]))
		cursor.close()
		if numero <> "":
			if comparison == ">":
				newlboxIndex = lboxIndex + 1
			else:
				newlboxIndex = lboxIndex - 1
			if str(numero) <> str(lbox.GetClientData( newlboxIndex)):
				Mensajes().Warn(self,"A futuro refrescar el Listbox....","Epale")
			else:
				lbox.SetSelection( newlboxIndex, True)
				self.GetRecord(numero)
		return numero
	
	def GetRecord(self, record):
		lbox = self.GetControl(self.listbox)
		try:
			a = int(record)
		except:
			return False
		self.FillingARecord = True
		self.LimpiaControles()
		self.SetColoreable(False)
		for v in self.controles_tipo_txt.itervalues():
			self.originales[v] = None
		self.idbanco = str(int(record))
		self.GetControl(ID_TEXTCTRLBANCOSBANCO).SetValue(self.idbanco)
		sql = """
		select nombre, direccion, telefono, email, web, contactonombre, contactotelefono,
		contactoemail from %s where idbanco = %s
		""" % (self.dbtable, self.idbanco)
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone( cursor )
		self.GetControl(ID_TEXTCTRLBANCOSNOMBRE).SetValue(self.GetStringFromField(row[0]))
		self.GetControl(ID_TEXTCTRLBANCOSDIRECCION).SetValue(self.GetStringFromField(row[1]))
		self.GetControl(ID_TEXTCTRLBANCOSTELEFONO).SetValue(self.GetStringFromField(row[2]))
		self.GetControl(ID_TEXTCTRLBANCOSEMAIL).SetValue(self.GetStringFromField(row[3]))
		self.GetControl(ID_TEXTCTRLBANCOSWEB).SetValue(self.GetStringFromField(row[4]))
		self.GetControl(ID_TEXTCTRLBANCOSCONTACTONOMBRE).SetValue(self.GetStringFromField(row[5]))
		self.GetControl(ID_TEXTCTRLBANCOSCONTACTOTELEFONO).SetValue(self.GetStringFromField(row[6]))
		self.GetControl(ID_TEXTCTRLBANCOSCONTACTOEMAIL).SetValue(self.GetStringFromField(row[7]))
		for x in "NOMBRE,DIRECCION,TELEFONO,EMAIL,WEB,CONTACTONOMBRE,CONTACTOTELEFONO,CONTACTOEMAIL".split(","):
			key = eval("ID_TEXTCTRLBANCOS%s" % x)
			self.originales[key] = self.GetControl(key).GetValue()
		self.FillingARecord = False
		cursor.close()
		self.tb.EnableTool(ID_TOOLSAV,False)
		self.tb.EnableTool(ID_TOOLDEL, True)
		self.tb.EnableTool(ID_TOOLNEW,True)
		self.MenuSetter(ID_MENUGRABAR, False)
		self.MenuSetter(ID_MENUELIMINAR, True)
		self.MenuSetter(ID_MENUNUEVO, True)             
		self.FillGridCtrl()
		return True
	
	def OnGridFirmante(self, event):
		id = event.GetId()
		if self.tb.GetToolEnabled(ID_TOOLSAV):
			Mensajes().Info(self, u"Por favor guarde los datos generales de la cuenta.", u"Aviso")
		elif id == ID_BITMAPBUTTONBANCOSAGREGARFIRMANTE:
			sql = "select idfirmante, nombre from gixfirmantes where estatus = 'A' order by nombre"
			cu = r_cn.cursor()
			cu.execute(str(sql))
			rows = fetchall(cu)
			cu.close()
			idfirmantelst = []
			nombrelst = []
			if rows:
				for row in rows:
					idfirmantelst.append(int(row[0]))
					nombrelst.append(self.GetStringFromField(row[1]))
				self.index = wx.GetSingleChoiceIndex(u"Elija un Firmante",  u"Opciones", nombrelst, parent = None)
				if int(self.index) > -1:
					sql = """
					insert into gixfirmantesbancos (idfirmante, idbanco) values (%s, %s)
					""" % (idfirmantelst[self.index], self.idbanco)
					if self.QueryUpdateRecord(sql):
						self.FillGridCtrl()
					else:
						Mensajes().Info(self, u"� Problemas al agregar firmante.\n\n%s" % sql, u"Atenci�n")
			else:
				Mensajes().Info(self, u"� No hay firmantes registrados !", u"Atenci�n")
		elif str(self.fila_elegida).isdigit():
			if self.fila_elegida >= 0:
				idfirmantebanco = self.grid.GetCellValue(self.fila_elegida, 0)
				if str(idfirmantebanco).isdigit():
					sql = "delete from gixfirmantesbancos where idfirmantebanco = %s" % int(idfirmantebanco)
					cu = r_cn.cursor()
					cu.execute(str(sql))
					cu.close()
					self.FillGridCtrl()
				else:
					Mensajes().Info(self, u"� No hay firmante que eliminar !", u"Atenci�n")
			else:
				Mensajes().Info(self, u"� No ha elijido el firmante a eliminar de la cuenta !", u"Atenci�n")
		else:
			Mensajes().Info(self, u"� No ha elijido el firmante a eliminar de la cuenta !", u"Atenci�n")
	
	def OnLeftGridClick(self, event):
		self.fila_elegida = event.GetRow()
		self.grid.SetGridCursor(self.fila_elegida, 0)
		
	def FillGridCtrl(self):
		try:
			trash = self.idbanco
		except:
			return
		self.fila_elegida = ""
		sql = """
		select b.idfirmantebanco, f.nombre from gixfirmantesbancos b
		join gixfirmantes f on b.idfirmante = f.idfirmante
		where b.idbanco = %s and f.estatus = 'A' order by f.nombre
		""" % self.idbanco
		metapiece = ((10, u"Id", wx.ALIGN_RIGHT), (250, u"Nombre del Firmante"))
		elements = len(metapiece)
		filas = self.grid.GetNumberRows()
		cols = self.grid.GetNumberCols()
		if filas: self.grid.DeleteRows(0, filas)
		if cols: self.grid.DeleteCols(0, cols)
		self.grid.InsertRows(0, 1)
		self.grid.InsertCols(0, elements)
		colindex = 0
		for metacols in metapiece:
			self.grid.SetColSize(colindex, metacols[0])
			self.grid.SetColLabelValue(colindex, metacols[1])
			self.grid.SetReadOnly(0, colindex, True)
			colindex += 1
					
		self.grid.ForceRefresh()
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		fila = 0
		if rows:
			if len(rows) > 1:
				self.grid.AppendRows(len(rows) - 1)
				
			for row in rows:
				for col in range(0, colindex):
					if fila % 2 == 0:
						self.grid.SetCellBackgroundColour(fila, col, wx.NamedColour("Medium Goldenrod"))
						
					if col in (0,1):
						self.grid.SetReadOnly(fila, col, True)
					
					if len(metapiece[col]) in (3,4):
						col_selected = metapiece[col]
						hAlignmnt = col_selected[2]
						self.grid.SetCellAlignment(fila, col, hAlignmnt, wx.ALIGN_CENTER)
						
					funcion = ""    
					if len(metapiece[col]) == 4:
						funcion = col_selected[3]
	
					if row[col] == None:
						self.grid.SetCellValue(fila, col, '')
					else:
						try:
							if funcion == "":
								valor = str(row[col])
								if valor == "True":
									valor = "1"
								elif valor == "False":
									valor = "0"
								self.grid.SetCellValue(fila, col, valor)
							else:
								try:
									lafuncion = funcion % row[col]
									self.grid.SetCellValue(fila, col, eval(lafuncion))
								except:
									self.grid.SetCellValue(fila,col, '**')
						except:
							self.grid.SetCellValue(fila, col, row[col].decode("iso8859-1"))
							
				fila += 1
			
		#self.grid.SetFocus()
		self.grid.AutoSizeColumns()
		#self.grid.SetGridCursor(0, 2)
		#self.grid.MakeCellVisible(0, 2)
			
class GixPuestos(wx.Frame, GixBase):
	
	#JIS = Jefe inmediato superior
	
	coloreable = "ID_TEXTCTRLPUESTO"
	coloreableeditable = False
	
	ctt = [coloreable,"ID_TEXTCTRLPUESTODESCRIPCION","ID_TEXTCTRLPUESTODESCRIPCIONAMPLIADA","ID_TEXTCTRLPUESTOEMPLEADO","ID_TEXTCTRLPUESTOJIS"]
	activecontrolafternewrecord = ID_TEXTCTRLPUESTODESCRIPCION
	listbox = ID_LISTBOXPUESTOS
	dbtable  = "gixpuestos" #esto permite probar con tablas alternas iguales ( mismos campos distinto nombre )
	
	controles_tipo_txt = dict(zip(ctt,map(eval,ctt)))
	
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize, style = wx.DEFAULT_FRAME_STYLE ):
		
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		
		self.InitialFlags(puesto = True)
		self.InitialStuff(self, PuestosFuncion) 
		self.InitialBindings()
		
		wx.EVT_BUTTON(self, ID_PUESTOSEARCHEMPLEADO,self.OnBuscarEmpleado)
		wx.EVT_BUTTON(self, ID_PUESTOSEARCHJIS,self.OnBuscarPuesto)
		
	def OnBuscarEmpleado(self,event):
		
		query = """
		select idempleado, rtrim(ltrim(apellido_paterno)) + ' ' +  rtrim(ltrim(apellido_materno)) + ', ' + rtrim(ltrim(nombre)) + ' - ' + convert(varchar(7), idempleado)
		from gixempleados order by apellido_paterno
		"""
		self.RelatedFieldSearch(u"B�squeda de Empleado", query, ID_TEXTCTRLPUESTOEMPLEADO)
		
	def OnBuscarPuesto(self,event):
		
		query = """
		select idpuesto, descripcion + ' - ' + convert(varchar(7), idpuesto)
		from gixpuestos order by descripcion
		"""
		self.RelatedFieldSearch(u"B�squeda de Jefe Inmediato Superior", query, ID_TEXTCTRLPUESTOJIS)
		
	def FillListBox(self, display = 'first'):
		
		wx.BeginBusyCursor()
		lbox = self.GetControl(ID_LISTBOXPUESTOS)
		lbox.Clear()
		sql = "SELECT idpuesto FROM %s order by idpuesto" % self.dbtable 
		
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		
		for row in rows:
			cc = str(row[0]).rjust(9)
			lbox.Append(cc,row[0])

		cu.close()
		if display == 'first':
			self.GetLFRecord("min")
		elif display == 'last':
			self.GetLFRecord("max")
			
		wx.EndBusyCursor()
		
		
		
	def OnPrint(self,event):
		tabla = self.dbtable
		meta = (( 10, "Id Puesto") , (150, u"Descripci�n"), (400,u"Descripci�n Ampliada"),(80,"Empleado", wx.ALIGN_RIGHT,"ponCeros(%s,7)"),(80,"Puesto JIS",wx.ALIGN_RIGHT))
		query = "select idpuesto, descripcion, descripcion_ampliada, idempleado, idpuesto_jis from gixpuestos order by descripcion"
		
		titulo = u"Consulta de Puestos " 
		self.DisplayGrid(tabla, meta, query, titulo)
		
		
	def OnSearch(self, event):
		
		opcionesbusqueda = ["No. Puesto", u"Descripci�n puesto"]
		basebusqueda = self.DisplaySearchMenu(opcionesbusqueda)
		if basebusqueda == "":
			return
		control = self.GetControl(ID_TEXTCTRLTXTBUSCAR)
		buscar = control.GetValue().strip().upper()
		control.SetValue( buscar )
		
		esPUESTO = False
		esDESCRIPCION = False
		
		if buscar == "":
			Mensajes().Info(self, u"Como est� vac�o el criterio\n de b�squeda no voy a arrojar resultado", u"Atenci�n")
			return
		
		ob = opcionesbusqueda
		
		if ob[0] in basebusqueda:
			if not buscar.isdigit():
				Mensajes().Info(self, u"Este dato deber�a ser num�rico", u"Atenci�n")
				return
			opcionelegida = 0
			esPUESTO = True

		if ob[1] in basebusqueda:
			if buscar.strip() == "":
				Mensajes().Info(self, u"Este dato no puede estar vac�o", u"Atenci�n")
				return
			opcionelegida = 1
			esDESCRIPCION = True
		
			
		listaParaBuscar = []
		wild = "%"
		if esDESCRIPCION:

			
			sql = """ SELECT idpuesto from %s where upper(descripcion) like '%s%s%s' order by idpuesto
			""" % (self.dbtable, wild, buscar, wild)


		else:
			sql = """ SELECT idpuesto from %s where idpuesto = %s""" % (self.dbtable, buscar)
			
				
		cursor = r_cn.cursor()
		try:
			cursor.execute(str(sql))
		except:
			Mensajes().Info(self, "Alg�n dato est� faltando para\nrealizar la b�squeda", u"Atenci�n")
			return
			
		rows = fetchall(cursor)
		for row in rows:
		
			
			listaParaBuscar.append(str(row[0]).rjust(9))

		cursor.close()

		try:
			primero = listaParaBuscar[0]
		except:
			Mensajes().Info(self,u"La b�squeda no arroja resultado",u"Atenci�n")
			return
		
		if esPUESTO:
			if len(primero ) > 0 :
			
				lbox = self.GetControl(self.listbox)
				lbox.SetStringSelection( u"%s" % primero, True)
				self.GetRecord(primero.strip())
			else:
				Mensajes().Info( self, u"Extra�o error de b�squeda\nde N�mero de Empleado", u"Atenci�n")
			return
		
		self.DisplaySearchResults(opcionelegida, listaParaBuscar)
		
	
	def GetLFRecord(self, what):

		lbox = self.GetControl(self.listbox)
		
		sql = "SELECT %s(idpuesto) from %s" % (what, self.dbtable) 
	
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		numero = ""
		row = fetchone(cursor)
		if row is not None:
		
			numero = int(row[0])
					
		cursor.close()
		self.GetRecord(numero)
		
		self.ListBoxReposition(what)
		
	def OnText(self, event):
		
		self.controlactual = event.GetId()
		self.Text()

	def Text(self, VengodelaLista = False):

		for id in (ID_TEXTCTRLPUESTODESCRIPCION, ID_TEXTCTRLPUESTOEMPLEADO, ID_TEXTCTRLPUESTOJIS):
			control = self.GetControl(id)
		
			if id == ID_TEXTCTRLPUESTODESCRIPCION:
				descripcion = control.GetValue().strip()
				if descripcion == "" and not self.FillingARecord and not self.NewFlag:
					self.NewFlag = True
					if not VengodelaLista:
						Mensajes().Info(self, u"� La descripi�n no debe quedar en blanco !", u"Atenci�n")
						return
				
			if id == ID_TEXTCTRLPUESTOEMPLEADO:
				empleado = control.GetValue().strip()
				if empleado != "":
					if not empleado.isdigit():
						Mensajes().Info(self, u"� El empleado debe ser num�rico !", u"Atenci�n")
						return
					nombre = self.ObtenEmpleado(empleado)
					if nombre == "":
						Mensajes().Info(self, u"� El empleado no existe !", u"Atenci�n")
						return
					self.GetControl(ID_PUESTOEMPLEADONOMBRE).SetLabel(nombre)
				elif not self.FillingARecord and not self.NewFlag:
					self.NewFlag = True
					if not VengodelaLista:
						Mensajes().Info(self, u"�  El empleado no debe quedar en blanco !", u"Atenci�n")
						return
				
			if id == ID_TEXTCTRLPUESTOJIS:
				jis = control.GetValue().strip()
				if jis != "":
					if not jis.isdigit():
						Mensajes().Info(self, u"� El puesto del jefe inmediato superior\n debe ser num�rico !", u"Atenci�n")
						return
					puesto = self.ObtenJis(jis)
					if puesto == "":
						Mensajes().Info(self, u"� El puesto del jefer inmediato superior \n no existe !", u"Atenci�n")
						return
					self.GetControl(ID_PUESTOJIS).SetLabel(puesto)
				elif not self.FillingARecord and not self.NewFlag:
					self.NewFlag = True
					if not VengodelaLista:
						Mensajes().Info(self, u"� El puesto del jefer inmediato superior \n no debe quedar en blanco !", u"Atenci�n")
						return
		
		self.EndOfOnText(self.controlactual)
			
	def SaveRecord(self):
		
		puesto = self.GetControl(ID_TEXTCTRLPUESTO).GetValue()
		

		if puesto.strip() == "" :

			bienGrabado = self.AddRecord()
			lbx = self.GetControl(ID_LISTBOXPUESTOS)
			lbx.Clear()
			
			self.FillListBox("last") # se va al final de la lista aunque la alta haya sido de un puesto intermedio
			puesto = self.GetControl(ID_TEXTCTRLPUESTO).GetValue()
		
		else:

			bienGrabado = self.UpdateRecord()
			
		if bienGrabado:
			
			self.tb.EnableTool( ID_TOOLSAV, False)
			self.tb.EnableTool( ID_TOOLDEL, True)
			self.tb.EnableTool( ID_TOOLNEW, True)
			
			self.MenuSetter(ID_MENUGRABAR, False)
			self.MenuSetter(ID_MENUELIMINAR, True)
			self.MenuSetter(ID_MENUNUEVO, True)
			
			self.GetRecord("%s" % ( puesto ))
			
			
		else:

			Mensajes().Info(self,u"� El Registro no fue grabado !", u"Atenci�n")
			
		
			
	def UpdateRecord( self ):
		
		puesto = self.GetControl( ID_TEXTCTRLPUESTO).GetValue()
		descripcion = self.GetControl( ID_TEXTCTRLPUESTODESCRIPCION).GetValue()
		descripcionampliada = self.GetControl( ID_TEXTCTRLPUESTODESCRIPCIONAMPLIADA).GetValue()
		xempleado = self.GetControl( ID_TEXTCTRLPUESTOEMPLEADO).GetValue()
		xjis = self.GetControl( ID_TEXTCTRLPUESTOJIS).GetValue()
		
		empleado = "NULL"
		if xempleado != "":
			empleado = "%s" % xempleado  
		
		
		jis = "NULL"
		if xjis != "":
			jis = "%s" % xjis
		
		
		setListForQuery = """
		descripcion = '%s' , descripcion_ampliada = '%s' , idempleado = %s , idpuesto_jis = %s
		""" % ( descripcion, descripcionampliada, empleado, jis )
		
		sql = "update %s set  %s " \
				"where idpuesto = %s " \
			% ( self.dbtable, setListForQuery, puesto )
		
		return self.QueryUpdateRecord(sql)
			

	def AddRecord( self ):
		
		dlg = wx.TextEntryDialog( self, u"Teclee el nuevo n�mero de puesto", u"N�mero de Puesto",self.GetSiguientePuesto())
		
		dlg.ShowModal()

		puesto = dlg.GetValue()

		dlg.Destroy()
		
		if not puesto.isdigit():
			Mensajes().Info( self, u"Digite bien el n�mero de puesto", u"Atenci�n")
			return False
		
		
		if self.GetPuesto( puesto ) != "":
			Mensajes().Info( self, u"� El puesto ya existe !\nIndique otro", u"Atenci�n")
			return False
		
		self.GetControl(ID_TEXTCTRLPUESTO).SetValue(puesto)
		descripcion = self.GetControl( ID_TEXTCTRLPUESTODESCRIPCION).GetValue()
		descripcionampliada = self.GetControl( ID_TEXTCTRLPUESTODESCRIPCIONAMPLIADA).GetValue()
		xempleado = self.GetControl( ID_TEXTCTRLPUESTOEMPLEADO).GetValue()
		xjis = self.GetControl( ID_TEXTCTRLPUESTOJIS).GetValue()
		empleado = "NULL"
		jis = "NULL"
		
		if xempleado != "":
			empleado = "%s" % xempleado 
			
		if xjis != "":
			jis = "%s" % xjis
		
		
		sqlFields = """ 
		idpuesto, descripcion, descripcion_ampliada, idempleado , idpuesto_jis
		"""
		sqlValues = "%s, '%s', '%s', %s, %s" % \
					(  puesto, descripcion, descripcionampliada, empleado, jis )
		
		sql = "insert into %s ( %s ) values ( %s ) " % ( self.dbtable, sqlFields, sqlValues ) 
		
		#return self.QueryAddRecord(sql)
		return self.QueryUpdateRecord(sql)
	
	def GetSiguientePuesto( self):
		
		siguiente = ""
		sql = "select max(idpuesto) + 1 from %s" % self.dbtable
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		if row[0] is None:
			siguiente = "1"
		else:
			siguiente = str(row[0])
		cursor.close()
		
		return siguiente
	
	def GetPuesto( self,puesto):
		
		idpuesto = ""
		sql = "select idpuesto from %s where idpuesto = %s" % (self.dbtable,puesto) 
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		
		row = fetchone(cursor)
		if row:
			idpuesto = str(row[0])
		else:
			idpuesto = ""
			
		cursor.close()
		
		return idpuesto
	
	def OnDeleteRecord( self, event):

		if Mensajes().YesNo(self,u"� Desea realmente eliminar este registro ?", u"Confirmaci�n") :

			if self.DeleteRecord():

				lbx = self.GetControl(ID_LISTBOXPUESTOS)
				pos = lbx.GetSelection()
				
				self.MoveOneStep("PREVIOUS")
				lbx.Delete(pos)
				Mensajes().Info(self,u"� Registro Eliminado !",u"Atenci�n")
				#self.LimpiaControles()
				self.tb.EnableTool( ID_TOOLSAV, False)
				self.tb.EnableTool( ID_TOOLDEL, True)
				self.tb.EnableTool( ID_TOOLNEW, True)
				self.MenuSetter(ID_MENUGRABAR, False)
				self.MenuSetter(ID_MENUELIMINAR, True)
				self.MenuSetter(ID_MENUNUEVO, True)
				
	def DeleteRecord(self):

		puesto = self.GetControl(ID_TEXTCTRLPUESTO).GetValue().strip()

		if puesto  == "":
			
			Mensajes().Info(self, u"No se ha especificado el puesto", u"Atenci�n")
			return False
		
		cuantos = int( self.GetEmpleadosEnPuesto( puesto ))
		if cuantos > 0:

			Mensajes().Info( self, u"Hay %d empleados relacionados con este puesto.\nPor ello no puede eliminarlo." % cuantos, u"Atenci�n")
			return False
		
		sql = "delete from %s where idpuesto = %s" % ( self.dbtable, puesto ) 

		try:
			cursor = r_cn.cursor()
			cursor.execute( str(sql) )
			cursor.close()
		
			r_cn.commit()
			return True
		
		except:
			r_cn.rollback()
			Mensajes().Info(self,u"Sucedi� algo que impidi� eliminar este registro.\nQuiz� se deba a que hay otra informaci�n\nque depende de este registro\n%s" % sql, u"Atenci�n")
			return False
		
	def GetAnotherRecord(self, comparison):

		if comparison == "<":
			asc_or_desc = "DESC"
		else:
			asc_or_desc = "ASC"
		
		lbox = self.GetControl(self.listbox)
		lboxIndex = lbox.GetSelection()
		puesto = lbox.GetClientData(lboxIndex)
		sql = "select top 1 idpuesto from %s where idpuesto %s '%s' order by idpuesto %s" % (self.dbtable, comparison,puesto,asc_or_desc)
	
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		numero = ""
		if row is not None:
			numero = str(int(row[0]))
					
		cursor.close()
		if numero <> "":
		
			if comparison == ">":
				newlboxIndex = lboxIndex + 1
			else:
				newlboxIndex = lboxIndex - 1
				
			if str(numero) <> str(lbox.GetClientData( newlboxIndex)):
				Mensajes().Warn(self,"A futuro refrescar el Listbox....","Epale")
			else:
				lbox.SetSelection( newlboxIndex, True)
				self.GetRecord(numero)
		
		return numero
		
	def GetEmpleadosEnPuesto( self, puesto ):
		"""
		Ojo implementar despues leyendo la tabla correspondiente a empleados
		"""
		
		return False
	
	def ObtenJis( self, puesto ):
		""" 
		Obtener de base de datos la descripcion del puesto del jefe inmediato superior (JIS)
		
		"""
		try:
			if not puesto.isdigit():
				return ""
		except:
			return ""
		
		sql = "select descripcion from gixpuestos where idpuesto = %s" % puesto
		nombre = ""
		try:
			cursor = r_cn.cursor()
			cursor.execute(str(sql))
			row = fetchone( cursor )
			if row:
				descripcion = "%s" % ( self.GetStringFromField(row[0]), ) 
		finally:
			cursor.close()
		return descripcion
	
	def ObtenEmpleado( self, empleado ):
		""" 
		Obtener de base de datos el nombre de la persona
		
		"""
		try:
			if not empleado.isdigit():
				return ""
		except:
			return ""
		
		sql = "select apellido_paterno, apellido_materno, nombre from gixempleados where idempleado = %s" % empleado
		nombre = ""
		try:
			cursor = r_cn.cursor()
			cursor.execute(str(sql))
			row = fetchone( cursor )
			if row:
				nombre = "%s %s, %s" % ( self.GetStringFromField(row[0]), self.GetStringFromField(row[1]), self.GetStringFromField(row[2])) 
		finally:
			cursor.close()
		return nombre
	
	def GetRecord(self, record):
		
		lbox = self.GetControl(self.listbox)
		
		try:
			a = int(record)
		except:
			return False
		
		self.FillingARecord = True
		self.LimpiaControles()
		self.SetColoreable(False)

		for v in self.controles_tipo_txt.itervalues():
			
			self.originales[ v ] = None
		
		puesto = str(int(record))
		self.GetControl(ID_TEXTCTRLPUESTO).SetValue( puesto )
		
		
		
		sql = """
		select idpuesto, descripcion, descripcion_ampliada, idempleado, idpuesto_jis from %s where idpuesto = %s
		""" % ( self.dbtable, puesto )
		
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone( cursor )
		self.GetControl( ID_TEXTCTRLPUESTODESCRIPCION).SetValue(self.GetStringFromField(row[1]))
		self.GetControl( ID_TEXTCTRLPUESTODESCRIPCIONAMPLIADA).SetValue(self.GetStringFromField(row[2]))
		
		empleado = ""
		
		try:
			empleado = str(int(row[3]))
		except:
			pass
			
		if empleado == "0":
			empleado = ""
			
		self.GetControl( ID_TEXTCTRLPUESTOEMPLEADO).SetValue(empleado)
		
		jis = ""
		try:
			jis = str(int(row[4]))
		except:
			pass
			
		if jis == "0":
			jis = ""
		
		self.GetControl( ID_TEXTCTRLPUESTOJIS).SetValue(jis)
		
		
		
				
		self.originales[ID_TEXTCTRLPUESTO] = self.GetControl(ID_TEXTCTRLPUESTO).GetValue()      
		self.originales[ID_TEXTCTRLPUESTODESCRIPCION] = self.GetControl(ID_TEXTCTRLPUESTODESCRIPCION).GetValue()        
		self.originales[ID_TEXTCTRLPUESTODESCRIPCIONAMPLIADA] = self.GetControl(ID_TEXTCTRLPUESTODESCRIPCIONAMPLIADA).GetValue()        
		self.originales[ID_TEXTCTRLPUESTOEMPLEADO] = self.GetControl(ID_TEXTCTRLPUESTOEMPLEADO).GetValue()      
		self.originales[ID_TEXTCTRLPUESTOJIS] = self.GetControl(ID_TEXTCTRLPUESTOJIS).GetValue()
		
		
		
		self.FillingARecord = False
		
		self.GetControl( ID_PUESTOEMPLEADONOMBRE ).SetLabel(self.ObtenEmpleado(empleado))
		self.GetControl( ID_PUESTOJIS ).SetLabel(self.ObtenJis(jis))
		
		cursor.close()
		# Ahora los labels que se traen de la base de datos
		
		self.tb.EnableTool(ID_TOOLSAV,False)
		self.tb.EnableTool(ID_TOOLDEL, True)
		self.tb.EnableTool(ID_TOOLNEW,True)
		self.MenuSetter(ID_MENUGRABAR, False)
		self.MenuSetter(ID_MENUELIMINAR, True)
		self.MenuSetter(ID_MENUNUEVO, True)             
		
		return True

class GixMr(wx.Frame, GixBase, wx.PySizer):
	usuario = ""
	preguntaFiltro = True
	fila_anterior = 0
	def __init__(self, parent, id, title,
		pos = wx.DefaultPosition, size = wx.DefaultSize,
		style = wx.DEFAULT_FRAME_STYLE, usuario = "" ):
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		
		self.usuario = usuario
		self.CreateMyMenuBar()
		if wx.Platform == '__WXMSW__':
			self.CreateMyToolBar()

		panel = wx.Panel(self,-1)
		MRGrid(panel, True, True)
		self.grid = self.GetControl(ID_MR_GRID)
		
		self.CreateStatusBar(2)
		self.SetStatusText("Manejo de  Requisiciones ( M R )", 0)
		self.SetStatusText("Requisiciones", 1)
		self.grid.Bind(wx.EVT_KEY_DOWN, self.OnKeyDown)
		self.Bind( gridlib.EVT_GRID_CELL_RIGHT_CLICK, self.OnClick, id = ID_MR_GRID)
		self.Bind( gridlib.EVT_GRID_CELL_LEFT_CLICK, self.OnLeftClick, id = ID_MR_GRID)
		self.Bind(wx.EVT_MENU, self.OnRefrescar, id = ID_MR_ARCHIVOREFRESCAR)
		self.Bind(wx.EVT_MENU, self.OnNuevaRequisicion, id = ID_MR_ARCHIVONUEVO)
		self.Bind(wx.EVT_MENU, self.OnCambiarEstatusElijeRequisicion, id = ID_MR_ARCHIVOEDITAR)
		self.Bind(wx.EVT_MENU, self.OnToExcel, id = ID_MR_ARCHIVOEXCEL)
		self.Bind(wx.EVT_MENU, self.OnQuit, id = ID_MR_ARCHIVOSALIR)
		wx.EVT_MENU(self, wx.ID_EXIT, self.OnQuit)
		
		if wx.Platform == '__WXMSW__':
			self.Bind(wx.EVT_TOOL, self.OnFirst, id = ID_MR_GRIDFIRST)
			self.Bind(wx.EVT_TOOL, self.OnPrevious, id = ID_MR_GRIDPREV)
			self.Bind(wx.EVT_TOOL, self.OnNext, id = ID_MR_GRIDNEXT)
			self.Bind(wx.EVT_TOOL, self.OnLast, id = ID_MR_GRIDLAST)
			self.Bind(wx.EVT_TOOL, self.OnToExcel, id = ID_MR_TOOLEXCEL)
			self.Bind(wx.EVT_TOOL, self.OnCambiarEstatusElijeRequisicion, id = ID_MR_TOOLEDIT)
			self.Bind(wx.EVT_TOOL, self.OnRefrescar, id = ID_MR_TOOL_REFRESCAR)
			self.Bind(wx.EVT_TOOL, self.OnNuevaRequisicion, id = ID_MR_TOOLNEW)
			self.Bind( wx.EVT_CHOICE, self.OnFiltro, id = ID_MR_CHOICEFILTRO)
			wx.FindWindowById( ID_MR_CHOICEFILTRO ).SetSelection(0)
		
		self.RellenoGrid(1)
		self.fila_elegida = self.grid.GetGridCursorRow()
		self.DrawRow(True)
		
	def GetString(self, valor):
		dato = ""
		try:
			dato = valor.decode("iso8859-1")
		except:
			try:
				dato = str(valor)
			except:
				dato = valor
		return dato

	def OnFirst(self,event):
		self.grid.SetGridCursor(0, 0)
		self.grid.MakeCellVisible(  0, 0)
		self.fila_elegida = self.grid.GetGridCursorRow()
		self.DrawRow()
		
	def OnPrevious(self,event):
		self.grid.MoveCursorUp(False)
		self.grid.MakeCellVisible(self.grid.GetGridCursorRow(), 0)
		self.fila_elegida = self.grid.GetGridCursorRow()
		self.DrawRow()

	def OnNext(self,event):
		self.grid.MoveCursorDown(False)
		self.grid.MakeCellVisible(self.grid.GetGridCursorRow(), 0)
		self.fila_elegida = self.grid.GetGridCursorRow()
		self.DrawRow()
		
	def OnLast(self,event):
		self.grid.SetGridCursor(self.grid.GetNumberRows() - 1, 0)
		self.grid.MakeCellVisible( self.grid.GetNumberRows() - 1, 0)
		self.fila_elegida = self.grid.GetGridCursorRow()
		self.DrawRow()

	def OnKeyDown(self, event):
		try:
			keycode = event.KeyCode()
		except:
			keycode = event.GetKeyCode()
		if keycode in (wx.WXK_DOWN, wx.WXK_NUMPAD_DOWN, wx.WXK_RETURN, wx.WXK_NUMPAD_ENTER) and \
		   self.fila_elegida < (self.grid.GetNumberRows() - 1):
			self.fila_elegida = self.grid.GetGridCursorRow() + 1
		elif keycode in (wx.WXK_UP, wx.WXK_NUMPAD_UP) and self.fila_elegida > 0:
			self.fila_elegida = self.grid.GetGridCursorRow() - 1
		self.DrawRow()
		event.Skip()
		return
	
	def OnQuit(self,event):
		#self.Close(True)
		self.Destroy()
		
	def OnToExcel(self,event):
		cual = wx.GetSingleChoiceIndex( "Elija Formato", u"Opciones", ["Todas las Columnas","Productos Requeridos                            "])
		if cual < 0:
			return
		w2e = WxWidget2Excel(self)
		w2e.grid = self.GetControl(ID_MR_GRID)
		w2e.onlyexcel = True
		w2e.SetExcelWorkbook(r"requisiciones.xls")
		if cual == 1:
			w2e.SetColums([2,3,4,7])
		w2e.GenerateExcelFileFromGrid()
		Mensajes().Info(self,"El archivo de excel ha sido generado")
		
	def OnRefrescar(self,event):
		self.preguntaFiltro = False
		self.Refrescar()
		self.preguntaFiltro = True
		
	def Refrescar(self):
		choice = self.GetControl(ID_MR_CHOICEFILTRO)
		ev = wx.CommandEvent(wx.wxEVT_COMMAND_CHOICE_SELECTED, ID_MR_CHOICEFILTRO)
		choice.GetEventHandler().ProcessEvent(ev)
		self.fila_elegida = self.grid.GetGridCursorRow()
		
	def OnCambiarEstatusElijeRequisicion(self, event):
		grid = self.grid
		defaultrequisicion = 1
		try:
			defaultrequisicion = int(grid.GetCellValue(self.fila_elegida, 0))
		except:
			pass
		
		numrequisicion = wx.GetNumberFromUser(u"Introduzca el Consecutivo", u"Consecutivo", u"Cambio de Estatus", defaultrequisicion, min=1, max=9999999,parent=self)
		if numrequisicion < 0:
			return
		
		sql = """
		select idrequisicion from gixrequisiciones where idrequisicion = %s 
		""" % numrequisicion
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row is None:
			Mensajes().Info(self, u"No Existe el Consecutivo %s" % numrequisicion, u"Atenci�n")
			return
		
		titulo = u"Cambio de Estatus"
		wx.BeginBusyCursor()
		dialog = GixCambioEstatus(self,-1, titulo, size = (450,400),style = wx.DEFAULT_DIALOG_STYLE, capturarequisicion = False,
						capturamasiva = False, req_grupo = {}, usuario = self.usuario, valoridrequisicion = str(numrequisicion))
		
		dialog.CenterOnScreen()
		dialog.ShowModal()
		
	def OnLeftClick(self, event):
		self.fila_elegida = event.GetRow()
		self.grid.SetGridCursor(self.fila_elegida, 0)
		self.DrawRow()
		
	def OnClick(self, event):
		self.fila_elegida = event.GetRow()
		self.grid.SetGridCursor(self.fila_elegida, 0)
		self.DrawRow()
		if not hasattr(self, "ID_CAMBIARESTATUS"):
			ID_CAMBIARESTATUS = wx.NewId()
			ID_HISTORIAREQUISICION = wx.NewId()
			ID_QUESIGNIFICANLOSCOLORES = wx.NewId()
			self.Bind(wx.EVT_MENU, self.OnCambiarEstatus, id=ID_CAMBIARESTATUS)
			self.Bind(wx.EVT_MENU, self.OnHistoriaRequisicion, id=ID_HISTORIAREQUISICION)
			self.Bind(wx.EVT_MENU, self.OnQueSignificanLosColores, id=ID_QUESIGNIFICANLOSCOLORES)
		popup = wx.Menu()
		popup.Append(ID_CAMBIARESTATUS, u"Cambio de Estatus")
		popup.Append(ID_HISTORIAREQUISICION, u"Historia de la Requisici�n")
		popup.AppendSeparator()
		popup.Append(ID_QUESIGNIFICANLOSCOLORES, u"� Que Significan los Colores ?")
		self.PopupMenu(popup)
		popup.Destroy()
		
	def DrawRow(self, firsttime = False):
		if self.fila_elegida != self.fila_anterior or firsttime:
			if self.fila_anterior %2 != 0:
				bgcolor = "Medium Goldenrod"
			else:
				bgcolor = "White"
			for col in range(1,12):
				self.grid.SetCellBackgroundColour(self.fila_anterior, col, wx.NamedColour(bgcolor))
				self.grid.SetCellTextColour(self.fila_anterior, col, wx.NamedColour("BLACK"))
			for col in range(1,12):
				self.grid.SetCellBackgroundColour(self.fila_elegida, col, wx.Colour(0,30,110))
				self.grid.SetCellTextColour(self.fila_elegida, col, wx.NamedColour("WHITE"))
			self.fila_anterior = self.fila_elegida
			self.grid.Refresh()
		
	def OnNuevaRequisicion(self,event):
		titulo = u"Requisici�n Producto Unico"
		dialog = GixRequisicion(self,-1, titulo, size = (450,400),style = wx.DEFAULT_DIALOG_STYLE, usuario = self.usuario)
		dialog.CenterOnScreen()
		dialog.ShowModal()
		self.preguntaFiltro = False
		self.Refrescar()
		self.preguntaFiltro = True
		
	def OnCambiarEstatus(self, event):
		grid = self.grid
		fila = self.fila_elegida
		idrequisicion = str(grid.GetCellValue(fila, 0))
		if idrequisicion in self.req_finalizadas:
			Mensajes().Info(self, u"Ha finalizado el ciclo de la requisici�n (consecutivo %s).\n\n" \
							u"� No puede cambiar el estatus !" % idrequisicion, u"Atenci�n")
			return
		else:
			titulo = u"Cambio de Estatus"
			capmas = False
			req_grupo = {}
			
			if len(self.req_grupo) > 1 and idrequisicion in self.req_grupo:
				if not Mensajes().YesNo(self, u"Puede aplicar el cambio de estatus unicamente al consecutivo %s\n" \
									u"o a nivel grupo de productos.\n\n" \
									u"� Desea aplicar el cambio de estatus unicamente al consecutivo %s ?"
									% (idrequisicion, idrequisicion), u"Confirmaci�n"):
					titulo = u"Cambio de Estatus a Nivel Grupo de Productos"
					capmas = True
					req_grupo = self.req_grupo
			
			wx.BeginBusyCursor()
			dialog = GixCambioEstatus(self,-1, titulo, size = (450,400),style = wx.DEFAULT_DIALOG_STYLE, capturarequisicion = False,
							usuario = self.usuario, valoridrequisicion = idrequisicion, capturamasiva = capmas, req_grupo = req_grupo)
			dialog.CenterOnScreen()
			dialog.ShowModal()
		
	def OnHistoriaRequisicion(self, event):
		grid = self.grid
		fila = self.fila_elegida
		idrequisicion = str(grid.GetCellValue(fila, 0))
		producto = grid.GetCellValue(fila, 4)
		meta = (( 180, "Empleado") , (200, u"Estatus"), (90,u"Fecha"),(300,u"Comentario"))
		query = """
		select rtrim(ltrim(b.apellido_paterno)) + ' ' +  rtrim(ltrim(b.apellido_materno)) + ', ' + rtrim(ltrim(b.nombre)),
		c.descripcion_ampliada, convert(varchar(10),a.fecha,103), a.nota
		from gixmovimientos_estatus a join gixempleados b on a.idempleado = b.idempleado
		join gixestatus c on a.idestatus = c.idestatus where a.idrequisicion = %s
		order by a.id_movto desc;
		select count(*) from gixmovimientos_estatus a where a.idrequisicion = %s
		""" % (idrequisicion, idrequisicion)
		titulo = u"Historia de la Requisici�n - Consecutivo %s - %s" % (idrequisicion, producto)
		tabla = "gixmovimientos_estatus"
		frame = GixFrameCatalogo(self, -1 , titulo , wx.Point(20,20),wx.Size(800,600), 
					wx.DEFAULT_FRAME_STYLE, None, None, None, tabla, meta, query, gridsize = [770,300])
		frame.Centre(wx.BOTH)
		frame.Show(True)
		
	def OnQueSignificanLosColores(self, event):
		Mensajes().Info(self, u"Azul Claro.- Requisiciones a las cuales el usuario en uso tiene que darle\n" \
				u"un seguimento, es decir, cambiar el estatus.\n\n" \
				u"Amarillo.- Son aquellas requisiciones que el usuario haya elaborado y que\n" \
				u"se encuentran en proceso (su seguimiento depende de un tercero).\n\n" \
				u"Rojo.- Requisiciones que han llegado a su fin de ciclo.", u"Significado de los Colores")

	def ElijeProductoIntervaloFechas(self):
		meses = ( "Enero", "Febrero","Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto","Septiembre", "Octubre", "Noviembre", "Diciembre") 
		titulo = "Especifique Producto e Intervalo de Fechas "
		dialog = GixProductoIntervaloFechasDialog(self,-1, titulo, size = (450,450),style = wx.DEFAULT_DIALOG_STYLE)
		dialog.CenterOnScreen()
		dialog.ShowModal()
		estatusdialogo_correcto = dialog.intervalocorrecto
		try:
			dia_ini = int(dialog.dia_ini)
			dia_fin = int(dialog.dia_fin)
			mes_ini = int(dialog.mes_ini)
			mes_fin = int(dialog.mes_fin)
			aho_ini = int(dialog.aho_ini)
			aho_fin = int(dialog.aho_fin)
		except:
			estatusdialogo_correcto = False
		
		dialog.Destroy()
		if not estatusdialogo_correcto:
			Mensajes().Info( self, u"� No se aplicar� el intervalo de fechas !", u"Atenci�n")
			return False
		self.fechainicial = "%s/%02d/%02d" % ( aho_ini, mes_ini, dia_ini )
		self.fechafinal  = "%s/%02d/%02d" % ( aho_fin, mes_fin, dia_fin )
		if not dialog.producto:
			Mensajes().Info( self, u"� No se aplicar� el producto y el intervalo de fechas !", u"Atenci�n")
			return False
		self.producto = dialog.producto
		return True
		
	def ElijeIntervaloFechas(self):
		meses = ( "Enero", "Febrero","Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto","Septiembre", "Octubre", "Noviembre", "Diciembre") 
		titulo = "Especifique Intervalo de Fechas "
		dialog = GixIntervaloFechasDialog(self,-1, titulo, size = (450,450),style = wx.DEFAULT_DIALOG_STYLE)
		dialog.CenterOnScreen()
		dialog.ShowModal()
		estatusdialogo_correcto = dialog.intervalocorrecto
		try:
			dia_ini = int(dialog.dia_ini)
			dia_fin = int(dialog.dia_fin)
			mes_ini = int(dialog.mes_ini)
			mes_fin = int(dialog.mes_fin)
			aho_ini = int(dialog.aho_ini)
			aho_fin = int(dialog.aho_fin)
		except:
			estatusdialogo_correcto = False
		
		dialog.Destroy()
		if not estatusdialogo_correcto:
			Mensajes().Info( self, u"� No se aplicar� el intervalo de fechas !", u"Atenci�n")
			return False
		
		self.fechainicial = "%s/%02d/%02d" % ( aho_ini, mes_ini, dia_ini )
		self.fechafinal  = "%s/%02d/%02d" % ( aho_fin, mes_fin, dia_fin )
		return True
	
	def RellenoGrid(self, tipo = 1):
		wx.BeginBusyCursor()
		grid = self.grid
		if grid.GetNumberRows(): grid.DeleteRows(0, grid.GetNumberRows())
		if grid.GetNumberCols(): grid.DeleteCols(0, grid.GetNumberCols())
		if tipo in (1,8,9):
			grid.InsertRows(0, self.Filas(tipo))
		columnas = [(0, 100, u"Consecutivo"),
					(1, 120, u"Fecha de Alta"),
					(2, 70, u"Cantidad"),
					(3, 60, u"Unidad"),
					(4, 160, u"Producto"),
					(5, 100, u"Categor�a"),
					(6, 120, u"Fecha Requerida"),
					(7, 160, u"Area"),
					(8, 150, u"Estatus"),
					(9, 120, u"Fecha de Entrega")]
		grid.InsertCols(0, len(columnas))
		for pos, ancho, titulo in columnas:
			grid.SetColSize(pos, ancho)
			grid.SetColLabelValue(pos, titulo)
			
		condicionfecha = "a.fecha_alta > '2012/04/17'"
			
		if tipo == 1:
			sql = """
			SELECT a.idrequisicion, convert(varchar(10),a.fecha_alta,103), a.cantidad,
			a.unidad, b.descripcion, c.descripcion, convert(varchar(10),a.fecha_requerida,103),
			p.descripcion, d.descripcion, convert(varchar(10), a.fecha_entrega, 103), d.es_fin, d.idestatus FROM
			gixrequisiciones a join gixproductos b on a.id_producto = b.id_producto join
			gixcategorias c on b.categoria = c.idcategoria
			join gix_vw_req_estatus_ultimo d on a.idrequisicion = d.idrequisicion 
			join gixpuestos p on p.idpuesto = a.idpuesto
			where %s
			order by a.idrequisicion desc
			""" % condicionfecha
			self.sqlAnterior = sql
		elif tipo == 2:
			if self.preguntaFiltro:
				sqlcat = """
				select idcategoria, descripcion from gixcategorias order by descripcion
				"""
				cu = r_cn.cursor()
				cu.execute(sqlcat)
				x = 0
				self.categorias = []
				descripciones = []
				self.categorias.append(x)
				descripciones.append("Todas                                                                                            ")
				rows = fetchall(cu)
				for row in rows:
					self.categorias.append(self.GetString(row[0]))
					descripciones.append(self.GetString(row[1]))
				cu.close()
				self.index = wx.GetSingleChoiceIndex(u"Elija una Categor�a",  u"Opciones", descripciones, parent = None)
				if int(self.index) < 0:
					return True
				else:
					grid.InsertRows(0, self.Filas(tipo, self.categorias))
					sql = """
					SELECT a.idrequisicion, convert(varchar(10),a.fecha_alta,103), a.cantidad,
					a.unidad, b.descripcion, c.descripcion, convert(varchar(10),a.fecha_requerida,103),
					p.descripcion, d.descripcion, convert(varchar(10), a.fecha_entrega, 103), d.es_fin, d.idestatus FROM
					gixrequisiciones a join gixproductos b on a.id_producto = b.id_producto join
					gixcategorias c on b.categoria = c.idcategoria
					join gix_vw_req_estatus_ultimo d on a.idrequisicion = d.idrequisicion
					join gixpuestos p on p.idpuesto = a.idpuesto
					where %s and (d.es_fin = 0) %s
					order by a.idrequisicion desc
					""" % (condicionfecha, self.condicion)
					self.sqlAnterior = sql
			else:
				grid.InsertRows(0, self.Filas(tipo, self.categorias))
				sql = self.sqlAnterior
		elif tipo == 3:
			if self.preguntaFiltro:
				sqlcat = """
				select idcategoria, descripcion from gixcategorias order by descripcion
				"""
				cu = r_cn.cursor()
				cu.execute(sqlcat)
				x = 0
				self.categorias = []
				descripciones = []
				self.categorias.append(x)
				descripciones.append("Todas                                                                                            ")
				rows = fetchall(cu)
				for row in rows:
					self.categorias.append(self.GetString(row[0]))
					descripciones.append(self.GetString(row[1]))
				cu.close()
				self.index = wx.GetSingleChoiceIndex(u"Elija una Categor�a",  u"Opciones", descripciones, parent = None)
				if int(self.index) < 0:
					return True
				else:
					grid.InsertRows(0, self.Filas(tipo, self.categorias))
					sql = """
					SELECT a.idrequisicion, convert(varchar(10),a.fecha_alta,103), a.cantidad,
					a.unidad, b.descripcion, c.descripcion, convert(varchar(10),a.fecha_requerida,103),
					p.descripcion, d.descripcion, convert(varchar(10), a.fecha_entrega, 103), d.es_fin, d.idestatus FROM
					gixrequisiciones a join gixproductos b on a.id_producto = b.id_producto join
					gixcategorias c on b.categoria = c.idcategoria
					join gix_vw_req_estatus_ultimo d on a.idrequisicion = d.idrequisicion
					join gixpuestos p on p.idpuesto = a.idpuesto
					where ((year(getdate()) = year(a.fecha_alta)) and
					(month(getdate()) = month(a.fecha_alta))) %s and %s
					order by a.idrequisicion desc
					""" % (self.condicion, condicionfecha)
					self.sqlAnterior = sql
			else:
				grid.InsertRows(0, self.Filas(tipo, self.categorias))
				sql = self.sqlAnterior
		elif tipo == 4:
			if self.preguntaFiltro:
				if self.ElijeIntervaloFechas():
					sqlcat = """
					select idcategoria, descripcion from gixcategorias order by descripcion
					"""
					cu = r_cn.cursor()
					cu.execute(sqlcat)
					x = 0
					self.categorias = []
					descripciones = []
					self.categorias.append(x)
					descripciones.append("Todas                                                                                            ")
					rows = fetchall(cu)
					for row in rows:
						self.categorias.append(self.GetString(row[0]))
						descripciones.append(self.GetString(row[1]))
					cu.close()
					self.index = wx.GetSingleChoiceIndex(u"Elija una Categor�a",  u"Opciones", descripciones, parent = None)
					if int(self.index) < 0:
						return True
					else:
						grid.InsertRows(0, self.Filas(tipo, self.categorias))
						sql = """
						SELECT a.idrequisicion, convert(varchar(10),a.fecha_alta,103), a.cantidad,
						a.unidad, b.descripcion, c.descripcion, convert(varchar(10),a.fecha_requerida,103),
						p.descripcion, d.descripcion, convert(varchar(10), a.fecha_entrega, 103), d.es_fin, d.idestatus FROM
						gixrequisiciones a join gixproductos b on a.id_producto = b.id_producto join
						gixcategorias c on b.categoria = c.idcategoria
						join gix_vw_req_estatus_ultimo d on a.idrequisicion = d.idrequisicion
						join gixpuestos p on p.idpuesto = a.idpuesto
						where %s and %s
						order by a.idrequisicion desc
						""" % (self.condicion, condicionfecha)
						self.sqlAnterior = sql
				else:
					return True
			else:
				grid.InsertRows(0, self.Filas(tipo, self.categorias))
				sql = self.sqlAnterior
		elif tipo == 5:
			if self.preguntaFiltro:
				sqlcat = """
				select idcategoria, descripcion from gixcategorias order by descripcion
				"""
				cu = r_cn.cursor()
				cu.execute(sqlcat)
				self.categorias = []
				descripciones = []
				rows = fetchall(cu)
				for row in rows:
					self.categorias.append(self.GetString(row[0]))
					descripciones.append(self.GetString(row[1]) + "                                       ")
				cu.close()
				self.index = wx.GetSingleChoiceIndex(u"Elija una Categor�a",  u"Opciones", descripciones, parent = None)
				if int(self.index) < 0:
					return True
				else:
					grid.InsertRows(0, self.Filas(tipo, self.categorias))
					sql = """
					SELECT a.idrequisicion, convert(varchar(10),a.fecha_alta,103), a.cantidad,
					a.unidad, b.descripcion, c.descripcion, convert(varchar(10),a.fecha_requerida,103),
					p.descripcion, d.descripcion, convert(varchar(10), a.fecha_entrega, 103), d.es_fin, d.idestatus FROM
					gixrequisiciones a join gixproductos b on a.id_producto = b.id_producto join
					gixcategorias c on b.categoria = c.idcategoria
					join gix_vw_req_estatus_ultimo d on a.idrequisicion = d.idrequisicion
					join gixpuestos p on p.idpuesto = a.idpuesto
					where a.idcategoria = '%s' and %s
					order by a.idrequisicion desc
					""" % (self.categorias[int(self.index)], condicionfecha)
					self.sqlAnterior = sql
			else:
				grid.InsertRows(0, self.Filas(tipo, self.categorias))
				sql = self.sqlAnterior
		elif tipo == 6:
			if self.preguntaFiltro:
				if self.ElijeProductoIntervaloFechas():
					grid.InsertRows(0, self.Filas(tipo))
					sql = """
					SELECT a.idrequisicion, convert(varchar(10),a.fecha_alta,103), a.cantidad,
					a.unidad, b.descripcion, c.descripcion, convert(varchar(10),a.fecha_requerida,103),
					p.descripcion, d.descripcion, convert(varchar(10), a.fecha_entrega, 103), d.es_fin, d.idestatus FROM
					gixrequisiciones a join gixproductos b on a.id_producto = b.id_producto join
					gixcategorias c on b.categoria = c.idcategoria
					join gix_vw_req_estatus_ultimo d on a.idrequisicion = d.idrequisicion
					join gixpuestos p on p.idpuesto = a.idpuesto
					where a.fecha_alta >= '%s' and a.fecha_alta <= '%s' and a.id_producto = '%s'
					order by a.idrequisicion desc
					""" % (self.fechainicial, self.fechafinal, self.producto)
					self.sqlAnterior = sql
				else:
					return True
			else:
				grid.InsertRows(0, self.Filas(tipo))
				sql = self.sqlAnterior
		elif tipo == 7:
			if self.preguntaFiltro:
				sqlpre = """
				select r.idprerequisicion, convert(varchar(10), r.fecha_requerida,103), rtrim(ltrim(c.descripcion)) + ' - ' +  rtrim(ltrim(p.descripcion))
				from gixprerequisiciones r
				join gixcategorias c on r.idcategoria = c.idcategoria
				join gixpuestos p on r.idpuesto = p.idpuesto
				order by idprerequisicion desc
				"""
				cu = r_cn.cursor()
				cu.execute(sqlpre)
				x = 0
				self.prerequisiciones = []
				self.prerequisicion = []
				self.prerequisiciones.append("              Requisiciones Producto Unico                                                                                           ")
				self.prerequisicion.append(x)
				rows = fetchall(cu)
				for row in rows:
					self.prerequisiciones.append(str(int(row[0])).rjust(9) + " - " + self.GetString(row[1]) + "  " + self.GetString(row[2]))
					self.prerequisicion.append(row[0])
				cu.close()
				self.index = wx.GetSingleChoiceIndex(u"Elija una Requisici�n o Requisiciones Producto Unico",  u"Opciones", self.prerequisiciones, parent = None)
				if int(self.index) < 0:
					return True
				else:
					grid.InsertRows(0, self.Filas(tipo, self.prerequisicion))
					sql = """
					SELECT a.idrequisicion, convert(varchar(10),a.fecha_alta,103), a.cantidad,
					a.unidad, b.descripcion, c.descripcion, convert(varchar(10),a.fecha_requerida,103),
					p.descripcion, d.descripcion, convert(varchar(10), a.fecha_entrega, 103), d.es_fin, d.idestatus FROM
					gixrequisiciones a join gixproductos b on a.id_producto = b.id_producto join
					gixcategorias c on b.categoria = c.idcategoria
					join gix_vw_req_estatus_ultimo d on a.idrequisicion = d.idrequisicion
					join gixpuestos p on p.idpuesto = a.idpuesto
					where a.idprerequisicion = '%s' and %s
					order by a.idrequisicion desc
					""" % (self.prerequisicion[int(self.index)], condicionfecha)
					self.sqlAnterior = sql
			else:
				grid.InsertRows(0, self.Filas(tipo, self.prerequisicion))
				sql = self.sqlAnterior
		elif tipo == 8:
			sql = """
			SELECT a.idrequisicion, convert(varchar(10),a.fecha_alta,103), a.cantidad,
			a.unidad, b.descripcion, c.descripcion, convert(varchar(10),a.fecha_requerida,103),
			p.descripcion, d.descripcion, convert(varchar(10), a.fecha_entrega, 103), d.es_fin, d.idestatus FROM
			gixrequisiciones a join gixproductos b on a.id_producto = b.id_producto join
			gixcategorias c on b.categoria = c.idcategoria
			join gix_vw_req_estatus_ultimo d on a.idrequisicion = d.idrequisicion 
			join gixpuestos p on p.idpuesto = a.idpuesto
			where a.idpuesto in (%s) and %s
			order by a.idrequisicion desc
			""" % (",".join(map(str,self.puestos)), condicionfecha)
			self.sqlAnterior = sql
		elif tipo == 9:
			sql = """
			SELECT a.idrequisicion, convert(varchar(10),a.fecha_alta,103), a.cantidad,
			a.unidad, b.descripcion, c.descripcion, convert(varchar(10),a.fecha_requerida,103),
			p.descripcion, d.descripcion, convert(varchar(10), a.fecha_entrega, 103), d.es_fin, d.idestatus FROM
			gixrequisiciones a join gixproductos b on a.id_producto = b.id_producto join
			gixcategorias c on b.categoria = c.idcategoria
			join gix_vw_req_estatus_ultimo d on a.idrequisicion = d.idrequisicion 
			join gixpuestos p on p.idpuesto = a.idpuesto
			where a.idpuesto in (%s) and d.es_fin <> 1 and %s
			order by a.idrequisicion desc
			""" % (",".join(map(str,self.puestos)), condicionfecha)
			self.sqlAnterior = sql
		else:
			return True

		self.Empleado = self.ObtenIdEmpleado(self.usuario)
		self.ObtenPuestos()
		self.req_grupo = {}
		self.req_finalizadas = []
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		fila = -1
		if rows:
			for row in rows:
				fila += 1
				grid.SetReadOnly( fila, 0, True)
				grid.SetCellValue(fila, 0, str(int(row[0])))
				self.req = str(row[0])
				bgcolor = "White"
				if fila %2 != 0:
					bgcolor = "Medium Goldenrod"
				if row[10]:
					self.req_finalizadas.append(str(row[0]))
					bgcolor = "Red"
				else:
					color = self.MeToca()
					if color == 1:
						self.req_grupo[str(row[0])] = str(row[11])
						bgcolor = "Cyan"
					elif color == 2:
						bgcolor = "Yellow"
					
				grid.SetCellBackgroundColour(  fila, 0, wx.NamedColour(bgcolor))   # wx.Colour(192, 192, 192)) Gris
				grid.SetCellAlignment( fila, 0, wx.ALIGN_RIGHT, wx.ALIGN_CENTER)
				for col in range(1,10):
					justificado = wx.ALIGN_LEFT
					if col in (3,4,5,7,8):
						valor = row[col].decode("iso8859-1")
					else:
						valor = str(row[col])
						if col == 2:
							justificado = wx.ALIGN_RIGHT
						if col in (1,6,9):
							justificado = wx.ALIGN_CENTER
					
					self.FillColumn(grid,fila, col, valor,justificado)
				
		grid.AutoSizeColumns()
		wx.EndBusyCursor()
		if self.preguntaFiltro:
			grid.SetFocus()
		
	def ObtenIdEmpleado(self, usuario):
		sql = "select idempleado from gixempleados where usuario = '%s'" % (usuario)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row is None:
			return ""
		return str(row[0])
	
	def ObtenPuestos(self):
		sql = """
		select idpuesto from gixpuestos where idempleado = %s 
		""" % self.Empleado
		
		cu = r_cn.cursor()
		cu.execute(str(sql))
		puestos = []
		rows = fetchall(cu)
		for row in rows:
			puestos.append(int(row[0]))
			
		cu.close()
		self.puestos = puestos
		return
	
	def MeToca(self):
		SOLICITANTE = 1
		AUTORIZADOR = 2
		SURTIDOR = 3
		OPERADOR = 4
		AJENO = 5

		self.roles = []
		puestos = self.puestos
		cu = r_cn.cursor()
		sql = """
		select r.idrequisicion, c.autorizador_puesto, 
		c.autorizador_password, c.surtidor_puesto, c.surtidor_password, m.idempleado 
		from gixrequisiciones r join gixcategorias c on r.idcategoria = c.idcategoria
		join gixmovimientos_estatus m on r.idrequisicion = m.idrequisicion and m.idestatus = 1
		where r.idrequisicion = %s
		""" % int(self.req)
		cu.execute(sql)
		try:
			req, autorizador, autorizador_p, surtidor, surtidor_p, solicitante = fetchone(cu)
		except:
			cu.close()
			return 0
		
		solicitante_y_autorizador = False
		if int(solicitante ) == int( self.Empleado):
			self.roles.append( SOLICITANTE )
			
		if int(autorizador) in ( puestos ):
			self.roles.append( AUTORIZADOR )
			
		if int(surtidor ) in ( puestos ):
			self.roles.append( SURTIDOR )
			
		if len(self.roles) == 0:
			self.roles.append( AJENO )
			
		if SOLICITANTE in self.roles and AUTORIZADOR in self.roles:
			solicitante_y_autorizador = True
			
		sql = """
		select idpuesto_jis from gixpuestos where idpuesto = %s
		""" % autorizador
		cu.execute(str(sql))
		jis = fetchone(cu)[0]           
		
		lEstatus = []
		sql = """
		select idestatus, idrol from gixestatusroles where idrol in (%s)
		""" % (",".join(map(str,self.roles)),)
		
		cu.execute(str(sql))
		rows = fetchall(cu)
		for row in rows:
			if row[1] == AUTORIZADOR and solicitante_y_autorizador and jis:
				pass
			else:
				lEstatus.append(int(row[0]))
		
		sql = """
		select idestatus, es_fin from gix_vw_req_estatus_ultimo
		where idrequisicion = %s
		""" % self.req
		cu.execute(str(sql))
		ultEstatus, self.finRequisicion = fetchone(cu)

		if self.finRequisicion:
			cu.close()
			return 0

		if SOLICITANTE not in self.roles and AUTORIZADOR not in self.roles:
			if jis in puestos:
				cu.close()
				return 1
		
		sql = """
		select idestatusdestino from gixflujoestatus where idestatusfuente = %s
		""" % ultEstatus
		cu.execute(str(sql))
		rows = fetchall(cu)
		for row in rows:
			if int(row[0]) in (lEstatus) and int(row[0]) != 2:
				cu.close()
				return 1
		cu.close()
		
		if solicitante == int(self.Empleado):    # Estas lineas son para poner en amarillo lo mio
			return 2
		
		return 0

	def FillColumn(self,grid,fila, columna, valor, justificado = wx.ALIGN_LEFT):
		if fila %2 != 0:
			color = "Medium Goldenrod"
		else:
			color = "White"
			
		grid.SetReadOnly( fila, columna, True)
		grid.SetCellValue(fila, columna, valor)
		grid.SetCellBackgroundColour(  fila, columna, wx.NamedColour(color))
		grid.SetCellAlignment( fila, columna, justificado, wx.ALIGN_CENTER)
		
	def CreateMyMenuBar(self):
		self.SetMenuBar( MRMenuBarGrid() )
	
	def CreateMyToolBar(self):
		tb = self.CreateToolBar(wx.TB_HORIZONTAL | wx.NO_BORDER | wx.TB_FLAT)
		MRToolBarFunc( tb )
		
	def OnFiltro(self, event):
		opciones = ["<Todo>", "En Proceso y Categor�a", "Del Mes y Categor�a", "Por Fecha y Categor�a",
				"Por Categor�a","Por Producto y Fecha", "Por Requisici�n o Requisiciones Producto Unico",
				"Por Area (Todas las Requisiciones)", "Por Area (Requisiciones Activas)"]
		opcion = wx.FindWindowById(ID_MR_CHOICEFILTRO).GetSelection() 
		if opciones[opcion] == "<Todo>":
			self.RellenoGrid(1)
		elif opciones[opcion] == "En Proceso y Categor�a":
			if self.RellenoGrid(2):
				self.RellenoGrid(1)
				wx.FindWindowById(ID_MR_CHOICEFILTRO).SetSelection(0)
		elif opciones[opcion] == "Del Mes y Categor�a":
			if self.RellenoGrid(3):
				self.RellenoGrid(1)
				wx.FindWindowById(ID_MR_CHOICEFILTRO).SetSelection(0)
		elif opciones[opcion] == "Por Fecha y Categor�a":
			if self.RellenoGrid(4):
				self.RellenoGrid(1)
				wx.FindWindowById(ID_MR_CHOICEFILTRO).SetSelection(0)
		elif opciones[opcion] == "Por Categor�a":
			if self.RellenoGrid(5):
				self.RellenoGrid(1)
				wx.FindWindowById(ID_MR_CHOICEFILTRO).SetSelection(0)
		elif opciones[opcion] == "Por Producto y Fecha":
			if self.RellenoGrid(6):
				self.RellenoGrid(1)
				wx.FindWindowById(ID_MR_CHOICEFILTRO).SetSelection(0)
		elif opciones[opcion] == "Por Requisici�n o Requisiciones Producto Unico":
			if self.RellenoGrid(7):
				self.RellenoGrid(1)
				wx.FindWindowById(ID_MR_CHOICEFILTRO).SetSelection(0)
		elif opciones[opcion] == "Por Area (Todas las Requisiciones)":
			self.RellenoGrid(8)
		else:
			self.RellenoGrid(9)

		self.fila_elegida = self.grid.GetGridCursorRow()
		
	def Filas(self, tipo = 1, categorias = ""):
		condicionfecha = "a.fecha_alta > '2012/04/17'"
		if tipo == 1:
			sql = "SELECT count(*) FROM gixrequisiciones where fecha_alta > '2012/04/17'"
		elif tipo == 2:
			if self.index > 0:
				self.condicion = "and a.idcategoria = '%s'" % categorias[int(self.index)]
			else:
				self.condicion = ""
			sql = """
			SELECT count(*) from
			gixrequisiciones a join 
			gix_vw_req_estatus_ultimo b on a.idrequisicion = b.idrequisicion
			where %s and (b.es_fin = 0) %s
			""" % (condicionfecha, self.condicion)
		elif tipo == 3:
			if self.index > 0:
				self.condicion = "and a.idcategoria = '%s'" % categorias[int(self.index)]
			else:
				self.condicion = ""
			sql = """
			SELECT count(*) from
			gixrequisiciones a join 
			gix_vw_req_estatus_ultimo b on a.idrequisicion = b.idrequisicion
			where ((year(getdate()) = year(a.fecha_alta)) and
			(month(getdate()) = month(a.fecha_alta))) %s and %s
			""" % (self.condicion, condicionfecha)
		elif tipo == 4:
			if self.index > 0:
				self.condicion = "a.fecha_alta >= '%s' and a.fecha_alta <= '%s' and a.idcategoria = '%s'" % (self.fechainicial, self.fechafinal, categorias[int(self.index)])
			else:
				self.condicion = "a.fecha_alta >= '%s' and a.fecha_alta <= '%s'" % (self.fechainicial, self.fechafinal)
			sql = """
			SELECT count(*) from
			gixrequisiciones a join 
			gix_vw_req_estatus_ultimo b on a.idrequisicion = b.idrequisicion
			where %s and %s
			""" % (condicionfecha, self.condicion)
		elif tipo == 5:
			sql = """
			SELECT count(*) from
			gixrequisiciones a join 
			gix_vw_req_estatus_ultimo b on a.idrequisicion = b.idrequisicion
			where a.idcategoria = '%s' and %s
			""" % (categorias[int(self.index)], condicionfecha)
		elif tipo == 6:
			sql = """
			SELECT count(*) from
			gixrequisiciones a join 
			gix_vw_req_estatus_ultimo b on a.idrequisicion = b.idrequisicion
			where a.fecha_alta >= '%s' and a.fecha_alta <= '%s' and a.id_producto = '%s'
			""" % (self.fechainicial, self.fechafinal, self.producto)
		elif tipo == 7:
			sql = """
			SELECT count(*) from
			gixrequisiciones a join 
			gix_vw_req_estatus_ultimo b on a.idrequisicion = b.idrequisicion
			where a.idprerequisicion = %s and %s
			""" % (int(self.prerequisicion[self.index]), condicionfecha)
		elif tipo == 8:
			sql = """
			SELECT count(*) from
			gixrequisiciones a join
			gix_vw_req_estatus_ultimo b on a.idrequisicion = b.idrequisicion 
			where a.idpuesto in (%s) and %s
			""" % (",".join(map(str,self.puestos)), condicionfecha)
		else:
			sql = """
			SELECT count(*) from
			gixrequisiciones a join
			gix_vw_req_estatus_ultimo b on a.idrequisicion = b.idrequisicion 
			where a.idpuesto in (%s) and b.es_fin <> 1 and %s
			""" % (",".join(map(str,self.puestos)), condicionfecha)
			
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		filas = fetchone(cursor)[0]
		cursor.close()
		return filas
	
class GixPrerequisiciones(wx.Frame,GixBase):
	
	TABCONGRID = 1
	
	coloreable = "ID_TEXTCTRLPREREQUISICIONESIDPREREQUISICION"
	coloreableeditable = False
	
	ctt = [coloreable,"ID_TEXTCTRLPREREQUISICIONESIDCATEGORIA", "ID_TEXTCTRLPREREQUISICIONESFECHAREQUERIDA",
		"ID_TEXTCTRLPREREQUISICIONESIDPUESTO"]
	activecontrolafternewrecord = ID_TEXTCTRLPREREQUISICIONESIDCATEGORIA
	listbox = ID_LISTBOXPREREQUISICIONES
	dbtable  = "gixprerequisiciones" #esto permite probar con tablas alternas iguales ( mismos campos distinto nombre )
	
	controles_tipo_txt = dict(zip(ctt,map(eval,ctt)))
	
	DicDatesAndTxt = { ID_BUTTONPREREQUESICIONESFECHAREQUERIDA : ID_TEXTCTRLPREREQUISICIONESFECHAREQUERIDA}

	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize, style = wx.DEFAULT_FRAME_STYLE, usuario = None ):
	
		wx.Frame.__init__(self, parent, id, title, pos, size, style)

		self.InitialFlags(prerequisiciones = True)
		self.InitialStuff(self, PrerequisicionesFuncion)        
		self.InitialBindings()
		
		self.grid = self.GetControl(ID_GRIDPREREQUISICIONES)
		self.prerequisicion = self.GetControl( ID_TEXTCTRLPREREQUISICIONESIDPREREQUISICION)
		self.grid.Bind(gridlib.EVT_GRID_CELL_RIGHT_CLICK, self.OnRightClick)
		self.grid.Bind(wx.EVT_KEY_DOWN, self.OnKeyDown)
		
		wx.EVT_BUTTON(self, ID_BUTTONPREREQUISICIONESIDCATEGORIA,self.OnBuscarCategoria)
		wx.EVT_NOTEBOOK_PAGE_CHANGED(self, ID_NOTEBOOKPREREQUISICIONES,self.OnCambiaTab)
		
		wx.EVT_BUTTON(self, ID_BUTTONPREREQUISICIONESLIMPIACANTIDADES,self.OnLimpiaCantidades)
		wx.EVT_BUTTON(self, ID_BUTTONPREREQUISICIONESCOMPACTAPRODUCTOS,self.OnCompactaProductos)
		wx.EVT_BUTTON(self, ID_BUTTONPREREQUISICIONESCREAREQUISICION,self.OnCreaRequisiciones)
		
		self.tb.SetToolShortHelp(ID_TOOLNEW, u"Nueva Requisici�n")
		self.tb.SetToolShortHelp(ID_TOOLDEL, u"Eliminar Requisici�n")
		self.tb.SetToolShortHelp(ID_TOOLSAV, u"Grabar Requisici�n")
		self.mb.SetLabel(ID_MENUNUEVO, u"Nueva Requisici�n")		
		self.mb.SetLabel(ID_MENUELIMINAR, u"Eliminar Requisici�n")		
		self.mb.SetLabel(ID_MENUGRABAR, u"Grabar Requisici�n")		
		self.empleado = self.ObtenEmpleado(usuario)
		self.usuario = usuario
		
	def ObtenEmpleado(self, usuario):
		
		sql = "select idempleado from gixempleados where usuario = '%s'" % (usuario)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row is None:
			return ""
		return str(row[0])
	
	def OnCambiaTab(self, event):
		
		self.CambiaTab()
			
	def CambiaTab(self):
		
		tab= self.GetControl(ID_NOTEBOOKPREREQUISICIONES).GetSelection()
		if tab == self.TABCONGRID:
			if self.tb.GetToolEnabled(ID_TOOLNEW):
				self.PrepararQuery()
			else:
				self.GetControl(ID_NOTEBOOKPREREQUISICIONES).SetSelection(0)
				Mensajes().Info(self, u"Primero introduzca la informaci�n general y grabela", u"Atenci�n")
			
	def BuscarUnidad(self, fila, col):
		
		producto = self.grid.GetCellValue( fila, col+1)
		query = "select unidadrequisicion, unidadrequisicion from gixunidadesfactores where id_producto = '%s' order by unidadrequisicion" % producto
		self.RelatedFieldSearchForGrid(u"B�squeda de Unidad", query, ID_GRIDPREREQUISICIONES, fila, col)
		
	def BuscarProducto(self, fila, col):
		
		control =self.GetControl(ID_TEXTCTRLPREREQUISICIONESIDCATEGORIA)
		categoria = control.GetValue().strip()
		query = "select id_producto, id_producto + ' - ' + descripcion from gixproductos where categoria = '%s' order by descripcion" % categoria
		self.RelatedFieldSearchForGrid(u"B�squeda de Producto", query, ID_GRIDPREREQUISICIONES, fila, col)
		
	def InsertaFilas(self):
		
		control = self.GetControl(ID_TEXTCTRLPREREQUISICIONESIDPREREQUISICION)
		prerequisicion = control.GetValue().strip()
	
		sql = """
		select count(*) from gixprerequisicionesdet where idprerequisicion = %s
		""" % prerequisicion
			
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		filas = fetchone(cursor)[0]
		cursor.close()
			
		filas += 1
		
		return filas
	
	def PrepararQuery(self):
		
		prerequisicion = self.prerequisicion.GetValue().strip()
		if prerequisicion == "":
			self.query = "select "","","","""
		else:
			self.query = """
			select a.idprerequisiciondet, a.cantidad, a.unidad, a.id_producto, b.descripcion
			from gixprerequisicionesdet a
			join gixproductos b on a.id_producto = b.id_producto 
			where a.idprerequisicion = %s 
			order by a.idprerequisiciondet
			""" % prerequisicion
		
		self.meta = ((5,u""),
			(70, u"Cantidad", wx.ALIGN_RIGHT),
			(80, u"Unidad (F1)"),
			(80, u"Producto (F1)"),
			(250, u"Descripci�n"),
			(5,u""))
		
		self.buildFromQuery()
		
	def LimpiaUnidadProducto(self, fila):
		
		for col in (2, 3, 4):
			self.grid.SetCellValue( fila , col, "")
			
		self.grid.Refresh()
		
	def OnKeyDown(self, evt):
		
		fila = self.grid.GetGridCursorRow()
		col = self.grid.GetGridCursorCol()
		
		try:
			evtkey = evt.KeyCode()
		except:
			evtkey = evt.GetKeyCode()
		
		if evtkey == wx.WXK_F6:
			archivo = "detalle_prerequisicion.xls"
			if Mensajes().YesNo(self, u"Desea volcar el detalle al archivo de excel\n %s ?" % (archivo), u"Atenci�n"):
				siono = "SI"
				try:
					exc = SimNoraExcel(excel = archivo)
					exc.SetGrid(self)
					exc.HazExcelDesdeGrid()
				except:
					siono = "NO"
				Mensajes().Info(self,u"El archivo de excel\n%s\n%s pudo ser generado!" % (archivo,siono), u"Atenci�n")
				
			evt.Skip()
			return

		if col == 2:
			if evtkey == wx.WXK_F1:
				producto = self.grid.GetCellValue( fila, col+1)
				if producto:
					self.BuscarUnidad(fila, col)
					unidad = self.grid.GetCellValue( fila, col)
					if not unidad:
						return
			elif evtkey == wx.WXK_RETURN or evtkey == wx.WXK_NUMPAD_ENTER:
				producto = self.grid.GetCellValue( fila, col+1)
				unidad = self.grid.GetCellValue( fila, col)
				if unidad and producto:
					unidad = self.ObtenUnidadProducto(producto, unidad)
					if not unidad:
						self.grid.SetCellValue( fila , 2, "")
						return
					
					self.grid.Refresh()

		if col == 3:
			if evtkey == wx.WXK_F1:
				self.BuscarProducto(fila, col)
				producto = self.grid.GetCellValue( fila, col)
				if producto:
					descrip, unidad = self.ObtenDescripcionProducto(producto)
					if producto and not descrip:
						self.LimpiaUnidadProducto(fila)
						return
					if producto and not unidad:
						self.LimpiaUnidadProducto(fila)
						return
					
					unidadrequisicion = self.grid.GetCellValue( fila, col-1)
					if not unidadrequisicion:
						self.grid.SetCellValue( fila , 2, unidad)
						
					self.grid.SetCellValue( fila , 4, descrip)
					self.grid.Refresh()
				else:
					self.LimpiaUnidadProducto(fila)
					return
			elif evtkey == wx.WXK_RETURN or evtkey == wx.WXK_NUMPAD_ENTER:
				producto = self.grid.GetCellValue( fila, col)
				if producto:
					descrip, unidad = self.ObtenDescripcionProducto(producto)
					if not descrip:
						self.LimpiaUnidadProducto(fila)
						return
					if not unidad:
						self.LimpiaUnidadProducto(fila)
						return
					
					unidadrequisicion = self.grid.GetCellValue( fila, col-1)
					if not unidadrequisicion:
						self.grid.SetCellValue( fila , 2, unidad)
						
					self.grid.SetCellValue( fila , 4, descrip)
					self.grid.Refresh()
				else:
					self.LimpiaUnidadProducto(fila)
					return
			
		if evtkey != wx.WXK_RETURN and evtkey != wx.WXK_NUMPAD_ENTER:
			evt.Skip()
			return

		if evt.ControlDown():   # the edit control needs this key
			evt.Skip()
			return
		
		
		self.grid.DisableCellEditControl()
		
		# asignaciones a variables
		
		partida = self.grid.GetCellValue( fila, 0)
		cantidad = self.grid.GetCellValue( fila, 1)
		unidad = self.grid.GetCellValue( fila, 2)
		producto = self.grid.GetCellValue( fila, 3)
		cantidadanterior = self.grid.GetCellValue( fila, 5)
		
		if cantidad != "" and unidad != "" and producto != "":
			if not self.Afectar( partida, cantidad, unidad, producto, cantidadanterior):
				return
		
		success = self.grid.MoveCursorRight(evt.ShiftDown())

		if not success:
			newRow = self.grid.GetGridCursorRow() + 1

			if newRow < self.grid.GetTable().GetNumberRows():
				self.grid.SetGridCursor(newRow, 0)
				self.grid.MakeCellVisible(newRow, 0)
				self.grid.Refresh()
			else:
				# this would be a good place to add a new row if your app
				# needs to do that
				self.grid.AppendRows(1)
				
				fila = newRow
				for col in range(len(self.meta) + 1):
					if fila % 2 == 0:
						self.grid.SetCellBackgroundColour(  fila,col, wx.NamedColour("Medium Goldenrod"))
				
					if col in (0,5):
						renderer = NullGridRenderer()
						self.grid.SetCellRenderer( fila, col, renderer )
				
					if col in ( 0,4,5):
						self.grid.SetReadOnly( fila,col,True)
					
					if col == 1:
						self.grid.SetCellEditor(fila, col, gridlib.GridCellFloatEditor())

				self.grid.SetGridCursor(newRow, 1)
				self.grid.MakeCellVisible(newRow, 1)
				self.grid.Refresh()
		
	def buildFromQuery(self, rebuild = False):
	
		numregs = 0
		query = self.query
		
		metapiece = self.meta
		elements = len(metapiece)
		metapiece_selected = metapiece
		
		if numregs == 0:
			
			filas = self.grid.GetNumberRows()
			cols = self.grid.GetNumberCols()
			
			if filas:
				self.grid.DeleteRows(0, filas)
			if cols:
				self.grid.DeleteCols(0, cols)
			
			self.grid.InsertRows(0,1)
			self.grid.InsertCols(0,elements)
			#self.grid.ClearGrid()
			#self.CreateGrid(1,elements)
			fila = 0
			for col in range(0,elements):
				
				if fila % 2 == 0:
					self.grid.SetCellBackgroundColour(  fila,col, wx.NamedColour("Medium Goldenrod"))
				
				if col in (0,5):
					renderer = NullGridRenderer()
					self.grid.SetCellRenderer( fila, col, renderer )
					
				if col in ( 0,4,5):
					self.grid.SetReadOnly( fila,col,True)
					
				if col == 1:
					self.grid.SetCellEditor(fila, col, gridlib.GridCellFloatEditor())
					#self.grid.SetColFormatNumber(col)
					
		else:
			
			self.grid.CreateGrid(numregs,elements)
						
		colindex = 0
					
		for metacols in metapiece:

				self.grid.SetColSize(colindex,metacols[0])
				lbl = metacols[1]
				self.grid.SetColLabelValue(colindex,metacols[1])
				colindex += 1
					
		self.grid.ForceRefresh()
		fila = 0
			
		cursor = r_cn.cursor()
		cursor.execute( str(self.query))
		rows = cursor.fetchall()
		cursor.close()
			
		#Mensajes().Info(self, "Registros %s" % cursor.rowcount, "Oops")
		if numregs == 0:
			#delta = cursor.rowcount
			delta = len(rows)
			if delta > 1:
				delta -= 1
				self.grid.AppendRows( delta)
			
		#while True:
		if rows:
			for row in rows:

			#row = fetchone(cursor)

			#if row is None:
					#break
						
				for col in range(0,colindex):
							
					if fila % 2 == 0:
						self.grid.SetCellBackgroundColour(  fila,col, wx.NamedColour("Medium Goldenrod"))
						
					if col in (0,5):
						renderer = NullGridRenderer()
						self.grid.SetCellRenderer( fila, col, renderer )
					
					if col in ( 0,4,5):
							self.grid.SetReadOnly( fila,col,True)
						
					if col == 1:
						self.grid.SetCellEditor(fila, col, gridlib.GridCellFloatEditor())
					
					if len( metapiece_selected[col]) in (3,4):
						col_selected = metapiece_selected[col]
						hAlignmnt = col_selected[2]
						self.grid.SetCellAlignment( fila,col,hAlignmnt, wx.ALIGN_CENTER)
						
					funcion = ""    
					
					if len( metapiece_selected[col]) == 4:
						funcion = col_selected[3]
	
					if col != 5:
						
						if row[col] == None:
							self.grid.SetCellValue(fila,col,'')
							
						else:
		
							try:
								if funcion == "":
									valor = str(row[col])
									self.grid.SetCellValue(fila,col,valor)
									if col == 1:
										self.grid.SetCellValue(fila,5,valor)
									
								else:
									try:
										lafuncion = funcion % row[col]
										#lafuncion = funcion + '(' + str(row[col]) + ')'
										self.grid.SetCellValue(fila,col,eval(lafuncion))
									except:
										self.grid.SetCellValue(fila,col, '**')
		
								
		
							except:
								x=1
								try:
									self.grid.SetCellValue(fila,col,row[col].decode("iso8859-1"))
								except:
									try:
										self.grid.SetCellValue(fila,col,str(row[col]))
									except:
										self.grid.SetCellValue(fila,col,row[col])
	
				fila += 1
						
		
		if rebuild:
			self.grid.DeleteRows(delta + 1, delta)
			
		self.grid.AutoSizeColumns()
		fila -= 1
		self.grid.SetGridCursor(fila, 1)
		self.grid.MakeCellVisible(fila, 1)
			
	def OnRightClick(self, event):
		
		fila = event.GetRow()
		self.grid.SetGridCursor(fila, 1)
		partida = self.grid.GetCellValue( fila, 0)
		cantidad = self.grid.GetCellValue( fila, 1)
		unidad = self.grid.GetCellValue( fila, 2)
		producto = self.grid.GetCellValue( fila, 3)
		cantidadanterior = self.grid.GetCellValue( fila, 5)

		if Mensajes().YesNo(self,u"� Desea eliminar el registro %s ?" % (fila + 1), u"Confirmaci�n"):
			
			if "" in (producto, cantidad, unidad):
				self.grid.DeleteRows(fila, 1)
			
			else:
				
				if self.Afectar( partida, cantidad, unidad, producto, cantidadanterior, soloEliminar = True):
					self.grid.DeleteRows(fila, 1)
	
	def ObtenUnidadProducto(self, producto, unidad):
		
		unidadrequisicion = ""
		
		sql = "select unidadrequisicion from gixunidadesfactores where id_producto = '%s' and unidadrequisicion = '%s'" % (producto, unidad)
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
			
		if row:
			unidadrequisicion = self.GetStringFromField(row[0])
		else:
			Mensajes().Info(self, u"El producto no cuenta con la unidad elegida para elaborar la requisici�n.\nAgrege al menos una unidad de conversi�n.",u"Aviso")
		
		return unidadrequisicion
	
	def ObtenDescripcionProducto(self, producto):
		
		sql = """
		select descripcion, categoria from gixproductos where id_producto = '%s'
		""" % producto
		
		descripcion = ""
		unidad = ""
		
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		
		if row:
			descripcion= self.GetStringFromField(row[0])
			categoria = self.GetStringFromField(row[1])
			
			idcategoria = self.GetControl(ID_TEXTCTRLPREREQUISICIONESIDCATEGORIA).GetValue().strip()
			
			if categoria == idcategoria:
				sql = "select unidadrequisicion from gixunidadesfactores where id_producto = '%s'" % producto
				cursor.execute(str(sql))
				row = fetchone(cursor)
				
				if row:
					unidad = self.GetStringFromField(row[0])
				else:
					Mensajes().Info(self, u"El producto no cuenta con unidad(es) para elaborar la requisici�n.\nAgrege al menos una unidad de conversi�n.",u"Aviso")
					
			else:
					Mensajes().Info(self, u"El producto que solicita pertenece a otra categor�a.",u"Aviso")
				
		else:
			Mensajes().Info(self, u"No exite el producto que solicita.",u"Aviso")           
			
		cursor.close()
		
		return (descripcion, unidad)
			
	def Afectar( self, partida, cantidad, unidad, producto, cantidadanterior, soloEliminar = False):
		
		prerequisicion = self.prerequisicion.GetValue().strip()
		#if True:
			#return True # este es un escape temporal , quitar esta linea cuando se hayan puesto los queries.

		cursor = r_cn.cursor()

		sql = """
		select count(*) from gixprerequisicionesdet where idprerequisicion = %s
		"""  % prerequisicion
		cursor.execute( str( sql ) )
		cuantos = int(fetchone(cursor)[0])
		siguiente = 1

		if cuantos > 0:
			sql = """
				select max(idprerequisiciondet) + 1 from gixprerequisicionesdet where idprerequisicion = %s
			""" % prerequisicion
			cursor.execute( str( sql ) )
			siguiente = int(fetchone(cursor)[0])
			
		# aqui va el query de eliminacion de requisici�n o registro de detalle
		
		sql = """
		delete from gixprerequisicionesdet where idprerequisicion = %s and idprerequisiciondet = %s
		""" % (prerequisicion, partida)
		
		try:
			if partida:
				cursor.execute( str( sql ) )
				if soloEliminar:
					cursor.close()
					r_cn.commit()
					return True
			else:
				partida = siguiente
				fila = self.grid.GetGridCursorRow()
				self.grid.SetCellValue(fila,0,str(partida))
			
			# aqui va el query de insercion de requisici�n o registro de detalle
			
			sql = """
			insert into gixprerequisicionesdet( idprerequisicion, idprerequisiciondet, cantidad, unidad, id_producto)
			values (%s, %s, %s, '%s', '%s')
			""" % ( prerequisicion, partida, cantidad, unidad, producto)
			cursor.execute( str( sql ) )
			cursor.close()
			r_cn.commit()
			fila = self.grid.GetGridCursorRow()
			self.grid.SetCellValue( fila , 5, cantidad)
			
		except:
			
			cursor.close()
			r_cn.rollback()
			
			Mensajes().Info( self, u"No pudo afectarse la informaci�n", u"Atenci�n")
			
			return False
		
		self.grid.AutoSizeColumns()
		
		return True

	def OnBuscarCategoria(self,event):
		
		query = "select idcategoria, descripcion + ' - ' + idcategoria from gixcategorias order by descripcion" 
		self.RelatedFieldSearch(u"B�squeda de Categor�a", query, ID_TEXTCTRLPREREQUISICIONESIDCATEGORIA)
		
	def FillListBox(self, display = 'first'):
		
		wx.BeginBusyCursor()
		lbox = self.GetControl(ID_LISTBOXPREREQUISICIONES)
		lbox.Clear()
		sql = "SELECT idprerequisicion FROM %s order by idprerequisicion" % self.dbtable 
		
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		
		for row in rows:
			dato = str(row[0]).rjust(9)
			lbox.Append(dato,row[0])

		cu.close()
		
		if display == 'first':
			self.GetLFRecord("min")
			
		elif display == 'last':
			self.GetLFRecord("max")
			
		wx.EndBusyCursor()
		
	def OnPrint(self,event):
		
		tabla = self.dbtable
		meta = (( 120, u"Id Requisici�n"), (200,u"Categor�a"), (80, u"Fecha"), (200,u"Area"))
		query = """
		select r.idprerequisicion, c.descripcion, convert(varchar(10), r.fecha_requerida,103), p.descripcion
		from gixprerequisiciones r join gixpuestos p on p.idpuesto = r.idpuesto
		join gixcategorias c on c.idcategoria = r.idcategoria order by r.fecha_requerida DESC
		"""
		titulo = u"Consulta de Requisiciones" 
		self.DisplayGrid(tabla, meta, query, titulo)
		
	def OnSearch(self, event):
		
		pass
		
	def GetLFRecord(self, what):

		lbox = self.GetControl(self.listbox)
		
		sql = "SELECT %s(idprerequisicion) from %s" % (what, self.dbtable) 
	
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		numero = ""
		row = fetchone(cursor)
		if row is not None:
		
			numero = int(row[0])
					
		cursor.close()
		self.GetRecord(numero)
		
		self.ListBoxReposition(what)
		
	def OnText(self,event):
		
		self.controlactual = event.GetId()
		self.Text()
	
	def Text(self, VengodelaLista = False):

		for  id in( ID_TEXTCTRLPREREQUISICIONESIDCATEGORIA, ID_TEXTCTRLPREREQUISICIONESFECHAREQUERIDA,
				ID_TEXTCTRLPREREQUISICIONESIDPUESTO):
			control = self.GetControl(id)
			
			if id in (ID_TEXTCTRLPREREQUISICIONESIDCATEGORIA, ID_TEXTCTRLPREREQUISICIONESFECHAREQUERIDA,
					ID_TEXTCTRLPREREQUISICIONESIDPUESTO):
				valor = control.GetValue().strip()
				if valor == "" and not self.FillingARecord and not self.NewFlag:
					self.NewFlag = True
					if not VengodelaLista:
						Mensajes().Info(self, u"� No debe quedar ning�n dato en blanco !", u"Atenci�n")
						return
				
			if id == ID_TEXTCTRLPREREQUISICIONESIDCATEGORIA:
				idcategoria = control.GetValue().strip()
				if idcategoria != "":
					categoria = self.ObtenCategoria(idcategoria)
					if categoria == "":
						Mensajes().Info(self, u"� La categor�a no existe !", u"Atenci�n")
						return
					self.GetControl(ID_TEXTPREREQUISICIONESCATEGORIA).SetLabel(categoria)
				elif not self.FillingARecord and not self.NewFlag:
					self.NewFlag = True
					if not VengodelaLista:
						Mensajes().Info(self, u"� La categor�a no debe quedar en blanco !", u"Atenci�n")
						return
		
			if id == ID_TEXTCTRLPREREQUISICIONESIDPUESTO:
				idpuesto = control.GetValue().strip()
				if idpuesto != "":
					puesto = self.ObtenPuesto(idpuesto)
					if puesto == "":
						Mensajes().Info(self, u"� El area no existe !", u"Atenci�n")
						return
					self.GetControl(ID_TEXTPREREQUISICIONESPUESTO).SetLabel(puesto)
				elif not self.FillingARecord and not self.NewFlag:
					self.NewFlag = True
					if not VengodelaLista:
						Mensajes().Info(self, u"� El area no debe quedar en blanco !", u"Atenci�n")
						return
					
		self.EndOfOnText(self.controlactual)
		
	def ObtenCategoria(self, idcategoria):
		""" 
		Obtener de base de datos la descripci�n de la categoria
		"""
		sql = "select descripcion from gixcategorias where idcategoria = '%s'" % idcategoria
		
		categoria = ""
		
		try:
			cursor = r_cn.cursor()
			cursor.execute(str(sql))
			row = fetchone( cursor )
			if row:
				categoria = "%s" % ( self.GetStringFromField(row[0]), ) 
		finally:
			cursor.close()
			
		return categoria
		
	def ObtenPuesto(self, idpuesto):
		""" 
		Obtener de base de datos la descripci�n del puesto (area)
		"""
		sql = "select descripcion from gixpuestos where idpuesto = '%s'" % idpuesto
		
		puesto = ""
		
		try:
			cursor = r_cn.cursor()
			cursor.execute(str(sql))
			row = fetchone( cursor )
			if row:
				puesto = "%s" % ( self.GetStringFromField(row[0]), ) 
		finally:
			cursor.close()
			
		return puesto
	
	def EnviaMails(self, idprerequisicion, requisiciones):

		lPartida = []
		
		for req in requisiciones:
			
			if not lPartida:
			
				sql = """
				select c.autorizador_puesto, c.surtidor_puesto, m.idempleado,
				c.descripcion_ampliada, p.descripcion, r.cantidad, r.unidad, convert(varchar(10),r.fecha_requerida,103)
				from gixrequisiciones r join gixcategorias c on r.idcategoria = c.idcategoria
				join gixmovimientos_estatus m on r.idrequisicion = m.idrequisicion and
				m.idestatus = 1 join gixproductos p on r.id_producto = p.id_producto
				where r.idrequisicion = %s
				""" % req
				
				cu = r_cn.cursor()
				cu.execute(str(sql))
				row = fetchone(cu)
				
				if row is None:
					cu.close()
					Mensajes().Info(self,u"Sucedi� algo que impidi� enviar los e-mails\n%s"
							% sql, u"Atenci�n")
					return False
					
				xautorizador_puesto, xsurtidor_puesto, xidempleado, xcategoria, xproducto, xcantidad, xunidad, xfecha_requerida = row
				
				lPartida.append([req, xcantidad, xunidad, xproducto])
				
			else:
				
				sql = """
				select r.cantidad, r.unidad, p.descripcion
				from gixrequisiciones r join gixproductos p on r.id_producto = p.id_producto
				where r.idrequisicion = %s
				""" % req
				
				cu = r_cn.cursor()
				cu.execute(str(sql))
				row = fetchone(cu)
				
				if row is None:
					cu.close()
					Mensajes().Info(self,u"Sucedi� algo que impidi� enviar los e-mails\n%s"
							% sql, u"Atenci�n")
					return False
					
				xcantidad, xunidad, xproducto = row
				
				lPartida.append([req, xcantidad, xunidad, xproducto])
		
		dEmails = {}
		sql = """
		select email from gixempleados where idempleado in
		(select idempleado from gixpuestos where idpuesto = %s)
		""" % xautorizador_puesto
		
		cu.execute(str(sql))
		row = fetchone(cu)
		
		if row is None:
			cu.close()
			return False
			
		dEmails[row[0]] = True
			
		sql = """
		select email from gixempleados where idempleado in
		(select idempleado from gixpuestos where idpuesto = %s)
		""" % xsurtidor_puesto
		
		cu.execute(str(sql))
		row = fetchone(cu)
		
		if row is None:
			cu.close()
			return False
			
		dEmails[row[0]] = True
						
		sql = """
		select email, rtrim(ltrim(apellido_paterno)) + ' ' +  rtrim(ltrim(apellido_materno)) + ', ' + rtrim(ltrim(nombre))
		from gixempleados where idempleado = %s
		""" % xidempleado
		cu.execute(str(sql))
		row = fetchone(cu)
		if row is None:
			cu.close()
			return False
			
		xcorreo, xsolicitante = row
		dEmails[xcorreo] = True
			

		#sql = """
		#select email from gixempleados where idempleado in (select idempleado from gixoperadores)
		#"""
		#cu.execute(str(sql))
		#rows = fetchall(cu)
		#if rows:
			#for row in rows:
				#dEmails[row[0]] = True
				
		
		sql = """
		select email from gixempleados where idempleado = %s
		""" % xidempleado
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row is None:
			return False
			
		dEmails[row[0]] = True

		letracategoria = xcategoria[0:1]
		
		lEmail = dEmails.keys()
		estatus = u"Confirmada"
		nota = u"Requisici�n %s Confirmada." % idprerequisicion
		nsubject = "Requisicion.%s %s Confirmada (No Contestar)" % (letracategoria, idprerequisicion)
		nfromAddr = "gix@grupoiclar.com"
		
		mensaje = u"""
%s
	
Solicita: %s
Categoria: %s
Fecha Requerida: %s
Estatus: %s
		""" % (nota, xsolicitante.decode("iso8859-1"), xcategoria.decode("iso8859-1"), xfecha_requerida.decode("iso8859-1"), estatus)
		
		detalle = u"\nProductos:\n"
		
		for partida in lPartida:
			req, xcantidad, xunidad, xproducto = partida
			
			detalle = u"%s\n%s  %s  %s  %s" % (detalle, req, xcantidad, xunidad.decode("iso8859-1"), xproducto.decode("iso8859-1"))
			
		mensaje = u"%s%s" % (mensaje, detalle)
		
		nuevomensaje = []
		
		for letra in mensaje:
			try:
				salida = str(letra)
			except:
				salida = "*"
			nuevomensaje.append(salida)
			
		nmensaje = "".join(nuevomensaje)
		
		for mail in lEmail:
			if not jsonweb:
				pass
				#toAddr = []
				#toAddr.append(mail)
				#sendmail(toAddr, fromAddr = nfromAddr, subject = nsubject, message = nmensaje)
			else:
				values = dict(addr = mail, subject = nsubject, body = nmensaje)
				data = urlencode(values)
				json_string = urlopen("%s?%s" % (URLSMAIL, data)).read()
				foo = json.loads(json_string)
			
		#Mensajes().Info(self, u"Mensaje \n %s \n %s" % (mensaje, "\n".join(lEmail)), u"Atenci�n")
		
		return True
	
	def OnLimpiaCantidades(self, event):
		
		if Mensajes().YesNo(self, u"� Desea realmente limpiar todas las cantidades ?", u"Confirmaci�n") :
		
			wx.BeginBusyCursor()
			
			try:
				
				idprerequisicion = self.GetControl(ID_TEXTCTRLPREREQUISICIONESIDPREREQUISICION).GetValue()
				
				sql = "select idprerequisiciondet, cantidad, id_producto from gixprerequisicionesdet " \
					"where idprerequisicion = %s" % idprerequisicion
				cursor = r_cn.cursor()
				cursor.execute(str(sql))
				rows = fetchall(cursor)
	
				for row in rows:
					
					cantidad = int(row[1])
					
					if cantidad > 0:
						
						idprerequisiciondet = int(row[0])
						
						if not self.UpdateRecordCantidad(idprerequisiciondet):
			
							producto = str(row[2])
							Mensajes().Info(self,u"� No fu� posible limpiar el producto %s !" % producto, u"Atenci�n")
				
				cursor.close()
				r_cn.commit()
				self.PrepararQuery()
				wx.EndBusyCursor()
				Mensajes().Info(self,u"A finalizado la limpieza de las cantidades.", u"Atenci�n")
					
			except:
				
				cursor.close()
				r_cn.rollback()
				self.PrepararQuery()
				wx.EndBusyCursor()
				Mensajes().Info(self,u"Sucedi� algo que impidi� limpiar las cantidades\n%s"
						% sql, u"Atenci�n")
		
		return
	
	def UpdateRecordCantidad(self, idprerequisiciondet):
		
		sqlu = "update gixprerequisicionesdet set cantidad = 0 " \
				"where idprerequisiciondet = %s " % idprerequisiciondet
		
		try:
		
			sqlencoded = sqlu.encode("iso8859-1")

		except:

			Mensajes().Info(self,"Problemas al encoding del query",u"Atenci�n")
			
			return False
		
		try:
			
			cursor = r_cn.cursor()
			cursor.execute( sqlencoded )
			cursor.close()
		
			r_cn.commit()
			
			return True
			
		except:
			
			r_cn.rollback()
			Mensajes().Info(self,"Problemas con \n%s" % sqlu, u"Atenci�n")
			
			return False
		
		return True
		
	def OnCompactaProductos(self, event):
		
		if Mensajes().YesNo(self, u"� Desea realmente compactar los productos ?", u"Confirmaci�n") :
		
			wx.BeginBusyCursor()
			
			try:
				
				idprerequisicion = self.GetControl(ID_TEXTCTRLPREREQUISICIONESIDPREREQUISICION).GetValue()
				
				sql = "select idprerequisiciondet, cantidad, id_producto from gixprerequisicionesdet " \
					"where idprerequisicion = %s" % idprerequisicion
				cursor = r_cn.cursor()
				cursor.execute(str(sql))
				rows = fetchall(cursor)
	
				for row in rows:
					
					cantidad = int(row[1])
					
					if cantidad == 0:
						
						idprerequisiciondet = int(row[0])
						
						if not self.DeleteRecordPrerequisicionesDet(idprerequisiciondet):
						
							producto = str(row[2])
							Mensajes().Info(self,u"� No fu� posible compactar el producto %s !" % producto, u"Atenci�n")
				
				cursor.close()
				r_cn.commit()
				self.PrepararQuery()
				wx.EndBusyCursor()
				Mensajes().Info(self,u"A finalizado la compactaci�n de los productos.", u"Atenci�n")
					
			except:
				
				cursor.close()
				r_cn.rollback()
				self.PrepararQuery()
				wx.EndBusyCursor()
				Mensajes().Info(self,u"Sucedi� algo que impidi� compactar los productos\n%s"
						% sql, u"Atenci�n")
		
		return

	def DeleteRecordPrerequisicionesDet(self, idprerequisiciondet):
		
		idprerequisicion = self.GetControl(ID_TEXTCTRLPREREQUISICIONESIDPREREQUISICION).GetValue().strip()

		if idprerequisicion == "":
			
			Mensajes().Info(self, u"No se ha especificado la requisici�n", u"Atenci�n")
			return False
		
		sql="""
		delete from gixprerequisicionesdet where idprerequisicion = %s and idprerequisiciondet = %s
		"""  % (idprerequisicion, idprerequisiciondet)

		try:
			cursor = r_cn.cursor()
			cursor.execute( str(sql) )
			cursor.close()
		
			r_cn.commit()
			return True
		
		except:
			r_cn.rollback()
			Mensajes().Info(self,u"Sucedi� algo que impidi� eliminar este registro.\nQuiz� se deba a que hay otra informaci�n\nque depende de este registro\n%s" % sql, u"Atenci�n")
			return False

	def OnCreaRequisiciones(self, event):

		if Mensajes().YesNo(self, u"� Desea realmente enviar la requisici�n ?", u"Confirmaci�n") :
			
			wx.BeginBusyCursor()
			requisiciones = []
			
			try:
				idprerequisicion = self.GetControl(ID_TEXTCTRLPREREQUISICIONESIDPREREQUISICION).GetValue()
				idcategoria = self.GetControl(ID_TEXTCTRLPREREQUISICIONESIDCATEGORIA).GetValue().strip()
				idpuesto = self.GetControl(ID_TEXTCTRLPREREQUISICIONESIDPUESTO).GetValue()
				fecha_requerida = "NULL"
				descripcion = "NULL"
				fecha_entrega = "NULL"
				
				try:
					fecha_dia, fecha_mes, fecha_ano = self.GetControl(ID_TEXTCTRLPREREQUISICIONESFECHAREQUERIDA).GetValue().split('/')
					fecha_requerida = "'%s/%02d/%02d'" % (fecha_ano, int(fecha_mes), int(fecha_dia))
				except:
					pass
				
				sql = "select cantidad, unidad, id_producto from gixprerequisicionesdet where idprerequisicion = %s" % idprerequisicion
				cursor = r_cn.cursor()
				cursor.execute(str(sql))
				rows = fetchall(cursor)
	
				for row in rows:
					cantidad = int(row[0])
					unidad = str(row[1])
					id_producto = str(row[2])
					
					if cantidad > 0:
					
						sqlReq = """
							insert into gixrequisiciones(idcategoria, id_producto, descripcion, fecha_requerida, cantidad, unidad, fecha_alta, idpuesto, fecha_entrega, idprerequisicion)
							values ( '%s', '%s', %s, %s, %s, '%s', convert(varchar(10),getdate(),111), %s, %s, %s)
						""" % (idcategoria, id_producto, descripcion, fecha_requerida, cantidad, unidad, idpuesto, fecha_entrega, idprerequisicion)
						
						cursor.execute(str(sqlReq))
	
						sqlx = "select max(idrequisicion) from gixrequisiciones"
						cursor.execute(sqlx)
						req = fetchone(cursor)[0]
						
						sqlx = """
							insert into gixmovimientos_estatus ( idrequisicion, idempleado, idestatus, nota, fecha )
								values(%s,%s,%s,'',convert(varchar(10),getdate(),111) )
							""" % (req, self.empleado, 1)
						
						cursor.execute(sqlx)

						sqlx = """
							insert into gixmovimientos_estatus ( idrequisicion, idempleado, idestatus, nota, fecha )
								values(%s,%s,%s,'',convert(varchar(10),getdate(),111) )
							""" % (req, self.empleado, 3)
						
						cursor.execute(sqlx)

						requisiciones.append(int(req))
				
				cursor.close()
				r_cn.commit()
				
				if requisiciones:
					self.EnviaMails(idprerequisicion, requisiciones)
					wx.EndBusyCursor()
					Mensajes().Info(self,u"A finalizado el envio de la requisici�n.", u"Atenci�n")
				else:
					wx.EndBusyCursor()
					Mensajes().Info(self,u"No se encontr� ning�n producto para enviar la requisici�n.\nA finalizado el envio de la requisici�n.", u"Atenci�n")
				
			except:
				
				cursor.close()
				r_cn.rollback()
				Mensajes().Info(self,u"Sucedi� algo que impidi� enviar la requisici�n\n%s\n%s\n%s"
						% (sql, sqlReq, sqlx), u"Atenci�n")
				wx.EndBusyCursor()
		
		return
	
	def SaveRecord(self): 
		
		prerequisicion = self.GetControl(ID_TEXTCTRLPREREQUISICIONESIDPREREQUISICION).GetValue()

		if prerequisicion.strip() == "" :

			bienGrabado = self.AddRecord()
			lbx = self.GetControl(ID_LISTBOXPREREQUISICIONES)
			lbx.Clear()
			
			self.FillListBox("last") # se va al final de la lista aunque la alta haya sido de un puesto intermedio
			puesto = self.GetControl(ID_TEXTCTRLPREREQUISICIONESIDPREREQUISICION).GetValue()
		
		else:

			bienGrabado = self.UpdateRecord()
			
		if bienGrabado:
			
			self.tb.EnableTool( ID_TOOLSAV, False)
			self.tb.EnableTool( ID_TOOLDEL, True)
			self.tb.EnableTool( ID_TOOLNEW, True)
			
			self.MenuSetter(ID_MENUGRABAR, False)
			self.MenuSetter(ID_MENUELIMINAR, True)
			self.MenuSetter(ID_MENUNUEVO, True)
			
			self.GetRecord("%s" % ( prerequisicion ))
			
		else:

			Mensajes().Info(self,u"� El Registro no fue grabado !", u"Atenci�n")
			
	def UpdateRecord( self ):
		
		idprerequisicion = self.GetControl(ID_TEXTCTRLPREREQUISICIONESIDPREREQUISICION).GetValue()
		idcategoria = self.GetControl(ID_TEXTCTRLPREREQUISICIONESIDCATEGORIA).GetValue()
		idpuesto = self.GetControl(ID_TEXTCTRLPREREQUISICIONESIDPUESTO).GetValue()
		fecha = "NULL"
		
		try:
			fecha_dia, fecha_mes, fecha_ano = self.GetControl(ID_TEXTCTRLPREREQUISICIONESFECHAREQUERIDA).GetValue().split('/')
			fecha = "'%s/%02d/%02d'" % (fecha_ano, int(fecha_mes), int(fecha_dia))
		except:
			pass
		
		setListForQuery = """
		idcategoria = '%s' , fecha_requerida = %s , idpuesto = '%s'
		""" % ( idcategoria, fecha, idpuesto)
		
		sql = "update %s set  %s " \
				"where idprerequisicion = %s " \
			% ( self.dbtable, setListForQuery, idprerequisicion )
		
		return  self.QueryUpdateRecord(sql)
	
	def AddRecord(self):

		wx.BeginBusyCursor()

		idcategoria = self.GetControl(ID_TEXTCTRLPREREQUISICIONESIDCATEGORIA).GetValue()
		idpuesto = self.GetControl(ID_TEXTCTRLPREREQUISICIONESIDPUESTO).GetValue()
		fecha = "NULL"
		
		try:
			fecha_dia, fecha_mes, fecha_ano = self.GetControl(ID_TEXTCTRLPREREQUISICIONESFECHAREQUERIDA).GetValue().split('/')
			fecha = "'%s/%02d/%02d'" % (fecha_ano, int(fecha_mes), int(fecha_dia))
		except:
			pass
		
		sqlFields = """ 
		idcategoria, fecha_requerida, idpuesto
		"""
		sqlValues = "'%s', %s, '%s'" % \
			( idcategoria, fecha, idpuesto)
		
		sql = "insert into %s ( %s ) values ( %s ) " % ( self.dbtable, sqlFields, sqlValues ) 
		
		#return self.QueryAddRecord(sql)

		queTal =  self.QueryUpdateRecord(sql)
		
		if queTal:
			
			sqlx = "select max(idprerequisicion) from gixprerequisiciones"
			cursor = r_cn.cursor()
			cursor.execute(str(sqlx))
			row = fetchone(cursor)
			numero = ""
			
			if row is not None:
				numero = str(int(row[0]))
				idprerequisicion = int(row[0])
				
			cursor.close()
				
			self.GetControl(ID_TEXTCTRLPREREQUISICIONESIDPREREQUISICION).SetValue(numero)
			
			#aqui se agregan los productos al detalle de la prerequisicion, filtrados por la categoria seleccionada
			
			try:
				control = self.GetControl(ID_TEXTCTRLPREREQUISICIONESIDCATEGORIA)
				categoria = control.GetValue().strip()
				
				sql = "select id_producto from gixproductos where categoria = '%s' order by descripcion" % categoria
				cursor = r_cn.cursor()
				cursor.execute(str(sql))
				rows = fetchall(cursor)

				idprerequisiciondet = 0
				cantidad = 0
				unidad = "NULL"
				
				sqlFields = """ 
				idprerequisicion, idprerequisiciondet, cantidad, unidad, id_producto
				"""
				
				for row in rows:
					id_producto = str(row[0])
					
					sql = "select unidadrequisicion from gixunidadesfactores where id_producto = '%s'" % id_producto
					cursor.execute(str(sql))
					fila = fetchone(cursor)
					if fila:
						unidad = self.GetStringFromField(fila[0])
						idprerequisiciondet += 1
						sqlValues = "%s, %s, %s, '%s', '%s'" % \
							( idprerequisicion, idprerequisiciondet, cantidad, unidad, id_producto)
						sqlDet = "insert into gixprerequisicionesdet ( %s ) values ( %s ) " % ( sqlFields, sqlValues ) 
						cursor.execute(str(sqlDet))
					else:
						Mensajes().Info(self, u"El producto '%s' no cuenta con unidad para elaborar la requisici�n.\nAgrege al menos una unidad de conversi�n."
								% id_producto, u"Aviso")
		
				
				cursor.close()
				r_cn.commit()
				
			except:
				
				cursor.close()
				r_cn.rollback()
				Mensajes().Info(self,u"Sucedi� algo que impidi� crear el detalle de la requisici�n\n%s"
						% sql, u"Atenci�n")

		wx.EndBusyCursor()
		
		return queTal
	
	def OnDeleteRecord( self, event):

		if Mensajes().YesNo(self,u"� Desea realmente eliminar este registro ?", u"Confirmaci�n") :

			if self.DeleteRecord():

				lbx = self.GetControl(ID_LISTBOXPREREQUISICIONES)
				pos = lbx.GetSelection()
				
				self.MoveOneStep("PREVIOUS")
				lbx.Delete(pos)
				Mensajes().Info(self,u"� Registro Eliminado !",u"Atenci�n")
				#self.LimpiaControles()
				self.tb.EnableTool( ID_TOOLSAV, False)
				self.tb.EnableTool( ID_TOOLDEL, True)
				self.tb.EnableTool( ID_TOOLNEW, True)
				self.MenuSetter(ID_MENUGRABAR, False)
				self.MenuSetter(ID_MENUELIMINAR, True)
				self.MenuSetter(ID_MENUNUEVO, True)
				
	def DeleteRecord(self):
		
		idprerequisicion = self.GetControl(ID_TEXTCTRLPREREQUISICIONESIDPREREQUISICION).GetValue().strip()

		if idprerequisicion  == "":
			
			Mensajes().Info(self, u"No se ha especificado la requisici�n", u"Atenci�n")
			
			return False
		
		sql = "delete from %s where idprerequisicion = %s" % ( self.dbtable, idprerequisicion ) 

		try:
			cursor = r_cn.cursor()
			cursor.execute( str(sql) )
			
			sql = "select idprerequisiciondet, id_producto from gixprerequisicionesdet " \
				"where idprerequisicion = %s" % idprerequisicion
			
			cursor.execute(str(sql))
			rows = fetchall(cursor)

			cursor.close()
			r_cn.commit()
			
			for row in rows:
				idprerequisiciondet = int(row[0])
				
				if not self.DeleteRecordPrerequisicionesDet(idprerequisiciondet):
				
					producto = str(row[1])
					Mensajes().Info(self,u"� No fu� posible eliminar el producto %s !" % producto, u"Atenci�n")
			
			return True
		
		except:
			r_cn.rollback()
			Mensajes().Info(self,u"Sucedi� algo que impidi� eliminar este registro.\nQuiz� se deba a que hay otra informaci�n\nque depende de este registro\n%s" % sql, u"Atenci�n")
			return False
	
	def GetAnotherRecord(self, comparison):

		if comparison == "<":
			asc_or_desc = "DESC"
		else:
			asc_or_desc = "ASC"
		
		lbox = self.GetControl(self.listbox)
		lboxIndex = lbox.GetSelection()
		prerequisicion = lbox.GetClientData(lboxIndex)
		sql = "select top 1 idprerequisicion from %s where idprerequisicion %s '%s' order by idprerequisicion %s" % (self.dbtable, comparison, prerequisicion, asc_or_desc)
	
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		numero = ""
		if row is not None:
			numero = str(int(row[0]))
					
		cursor.close()
		if numero <> "":
		
			if comparison == ">":
				newlboxIndex = lboxIndex + 1
			else:
				newlboxIndex = lboxIndex - 1
				
			if str(numero) <> str(lbox.GetClientData( newlboxIndex)):
				Mensajes().Warn(self,"A futuro refrescar el Listbox....","Epale")
			else:
				lbox.SetSelection( newlboxIndex, True)
				self.GetRecord(numero)
		
		return numero
	
	def GetRecord(self, record):
		
		lbox = self.GetControl(self.listbox)
		
		try:
			a = int(record)
		except:
			return False
		
		self.FillingARecord = True
		self.idpuesto = ""
		self.LimpiaControles()
		self.SetColoreable(False)

		for v in self.controles_tipo_txt.itervalues():
			self.originales[ v ] = None
		
		prerequisicion = str(int(record))
		self.GetControl(ID_TEXTCTRLPREREQUISICIONESIDPREREQUISICION).SetValue( prerequisicion )
		
		sql = "select idcategoria, convert(varchar(10),fecha_requerida,103), idpuesto from %s where idprerequisicion = %s" % ( self.dbtable, prerequisicion )
		
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone( cursor )
		cursor.close()
		#categoria, fecha, puesto = map(self.GetStringFromField, row)
		categoria = self.GetStringFromField(row[0])
		fecha = self.GetStringFromField(row[1])
		puesto = str(row[2])

		self.GetControl(ID_TEXTCTRLPREREQUISICIONESIDCATEGORIA).SetValue(self.GetStringFromField(row[0]))
		self.GetControl(ID_TEXTCTRLPREREQUISICIONESFECHAREQUERIDA).SetValue(str(row[1]))
		self.GetControl(ID_TEXTCTRLPREREQUISICIONESIDPUESTO).SetValue(str(row[2]))
		
		for x in "IDCATEGORIA,FECHAREQUERIDA,IDPUESTO".split(","):
			key = eval("ID_TEXTCTRLPREREQUISICIONES%s" % x )
			self.originales[key] = self.GetControl(key).GetValue()
		
		self.FillingARecord = False
		self.CambiaTab()
		
		self.tb.EnableTool(ID_TOOLSAV,False)
		self.tb.EnableTool(ID_TOOLDEL, True)
		self.tb.EnableTool(ID_TOOLNEW,True)
		self.MenuSetter(ID_MENUGRABAR, False)
		self.MenuSetter(ID_MENUELIMINAR, True)
		self.MenuSetter(ID_MENUNUEVO, True)             
		
		return True

class GixEntradasInventario(wx.Frame,GixBase):
	TABCONGRID = 1
	
	coloreable = "ID_TEXTCTRLENTRADASINVENTRADA"
	coloreableeditable = False
	
	ctt = [coloreable,"ID_TEXTCTRLENTRADASINVREFERENCIA", "ID_TEXTCTRLENTRADASINVPROVEEDOR", "ID_TEXTCTRLENTRADASINVFECHA",
		"ID_TEXTCTRLENTRADASINVNOTAS"]
	activecontrolafternewrecord = ID_TEXTCTRLENTRADASINVREFERENCIA
	listbox = ID_LISTBOXENTRADASINV
	dbtable  = "gixentradasinv" #esto permite probar con tablas alternas iguales ( mismos campos distinto nombre )
	
	controles_tipo_txt = dict(zip(ctt,map(eval,ctt)))
	
	DicDatesAndTxt = { ID_BUTTONENTRADASINVFECHA : ID_TEXTCTRLENTRADASINVFECHA}
	
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize, style = wx.DEFAULT_FRAME_STYLE ):
		
		wx.Frame.__init__(self, parent, id, title, pos, size, style)

		self.InitialFlags(entradasInventario = True)
		self.InitialStuff(self, EntradasInventarioFuncion)      
		self.InitialBindings()
		
		self.grid = self.GetControl(ID_GRIDENTRADASINV)
		self.entrada = self.GetControl( ID_TEXTCTRLENTRADASINVENTRADA)
		self.grid.Bind(gridlib.EVT_GRID_CELL_RIGHT_CLICK, self.OnRightClick)
		self.grid.Bind(wx.EVT_KEY_DOWN, self.OnKeyDown)
		
		wx.EVT_BUTTON(self, ID_BUTTONENTRADASINVBUSCARPROVEEDOR,self.OnBuscarProveedor)
		wx.EVT_NOTEBOOK_PAGE_CHANGED(self, ID_NOTEBOOKENTRADASINV,self.OnCambiaTab)
		
	def OnCambiaTab(self, event):
		
		self.CambiaTab()
			
	def CambiaTab(self):
		
		tab= self.GetControl(ID_NOTEBOOKENTRADASINV).GetSelection()
		if tab == self.TABCONGRID:
			if self.tb.GetToolEnabled(ID_TOOLNEW):
				self.PrepararQuery()
			else:
				self.GetControl(ID_NOTEBOOKENTRADASINV).SetSelection(0)
				Mensajes().Info(self, u"Por favor introduzca la informaci�n general y grabela", u"Atenci�n")
			
	def BuscarProducto(self, fila, col):
		
		query = "select id_producto, id_producto + ' - ' + descripcion from gixproductos order by descripcion"
		self.RelatedFieldSearchForGrid(u"B�squeda de Producto", query, ID_GRIDENTRADASINV, fila, col)
		
	def InsertaFilas(self):
		
		control = self.GetControl(ID_TEXTCTRLENTRADASINVENTRADA)
		entrada = control.GetValue().strip()
	
		sql = """
		select count(*) from gixentradasinvdet where identradainv = %s
		""" % entrada
			
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		filas = fetchone(cursor)[0]
		#filas = str(row[0])
		cursor.close()
			
		filas += 1
		
		return filas
	
	def OnRellenaDetalle(self, event):
		
		self.RellenaDetalle()
	
	def RellenaDetalle(self):
		
		wx.BeginBusyCursor()
		grid = self.grid
		filas = grid.GetNumberRows()
		cols = grid.GetNumberCols()
		if filas:
			grid.DeleteRows(0, filas)
		if cols:
			grid.DeleteCols(0, cols)
			
		grid.InsertRows(0,self.InsertaFilas())
		columnas = [(0, 70, u"Cantidad"),
			(1, 80, u"Producto"),
			(2, 250, u"Descripci�n"),
			(3, 90, u"Precio Unitario"),
			(4, 95, u"Importe")]
		grid.InsertCols(0, len(columnas))
		#grid.ClearGrid() � No es necesario !
		#grid.CreateGrid(self.Filas(tipo), 1) � La herramienta lo crea -x,y- !
		for pos, ancho, titulo in columnas:
			#pos, ancho, titulo = col � Otra manera de asignarse -for col- !
			grid.SetColSize(pos, ancho)
			grid.SetColLabelValue(pos, titulo)
			
		sql = """
		SELECT d.cantidad, d.id_producto, p.descripcion, d.preciounitario
		FROM gixentradasinvdet d join gixproductos p on d.id_producto = p.id_producto
		join gixentradasinv m on m.identradasinv = d.identradasinv
		WHERE m.identradasinv = d.identradasinv
		order by d.identradasinv
		"""

		#self.Empleado = self.ObtenIdEmpleado(self.usuario)
		#self.ObtenPuestos()
		
		#cu = r_cn.cursor()
		#cu.execute(str(sql))
		#fila = -1
		#while True:
			#row = fetchone(cu)
			#if not row:
				#break
			
			#fila += 1
			##columnasgrid = (fila, )
			#grid.SetReadOnly( fila, 0, True)
			#grid.SetCellValue(fila, 0, str(int(row[0])))
			##grid.SetCellValue(fila, 0, row[0].decode("iso8859-1"))
			
			#self.req = str(row[0])
			
			#bgcolor = "White"
			#if fila %2 != 0:
				#bgcolor = "Medium Goldenrod"
			#if row[8]:
				#bgcolor = "Red"
			#elif self.MeToca():
				#bgcolor = "Cyan"
				
			#grid.SetCellBackgroundColour(  fila, 0, wx.NamedColour(bgcolor))
			##grid.SetCellBackgroundColour(  fila, 0, wx.Colour(192, 192, 192)) Gris
			#grid.SetCellAlignment( fila, 0, wx.ALIGN_RIGHT, wx.ALIGN_CENTER)
			
						
			#for col in range(1,8):
				#justificado = wx.ALIGN_LEFT
				#if col in (3,4,5,7):
					#valor = row[col].decode("iso8859-1")
				#else:
					#valor = str(row[col])
					#if col == 2:
						#justificado = wx.ALIGN_RIGHT
					#if col == 1:
						#justificado = wx.ALIGN_CENTER
				
				#self.FillColumn(grid,fila, col, valor,justificado)
				
		#cu.close()
			
		#wx.EndBusyCursor()

	def PrepararQuery(self):
		entrada = self.entrada.GetValue().strip()
		if entrada == "":
			self.query = "select "","","","""
		else:
			self.query = """
			select a.identradainvdet, a.cantidad, a.unidadcompra, a.id_producto, b.descripcion, a.preciounitario, a.cantidad * a.preciounitario,
			a.porcentajeimpuesto, a.notas from gixentradasinvdet a
			join gixproductos b on a.id_producto = b.id_producto 
			where a.identradainv = %s 
			order by a.identradainvdet
			""" % int(entrada)
		
		
		self.meta = ((5,u""),
			(70, u"Cantidad", wx.ALIGN_RIGHT),
			(70, u"Unidad"),
			(80, u"Producto (F1)"),
			(250, u"Descripci�n"),
			(90, u"Precio Unitario",wx.ALIGN_RIGHT),
			(95, u"Importe",wx.ALIGN_RIGHT),
			(70, u"% Impuesto", wx.ALIGN_RIGHT),
			(300, u"Notas"),
			(5,u""))
		
		self.buildFromQuery()
		
	def OnKeyDown(self, evt):
		
		fila = self.grid.GetGridCursorRow()
		col = self.grid.GetGridCursorCol()
		
		try:
			evtkey = evt.KeyCode()
		except:
			evtkey = evt.GetKeyCode()
			
		if evtkey == wx.WXK_F6:
			archivo = "detalle_entradas_almacen.xls"
			if Mensajes().YesNo(self, u"Desea volcar el detalle al archivo de excel\n %s ?" % (archivo), u"Atenci�n"):
				siono = "SI"
				try:
					exc = SimNoraExcel(excel = archivo)
					exc.SetGrid(self)
					exc.HazExcelDesdeGrid()
				except:
					siono = "NO"
				Mensajes().Info(self,u"El archivo de excel\n%s\n%s pudo ser generado!" % (archivo,siono), u"Atenci�n")
					
				
			evt.Skip()
			return
		
			
		if evtkey == wx.WXK_F1 and col == 3:
			self.BuscarProducto(fila, col)
			producto = self.grid.GetCellValue( fila, col)
			descrip, unidad = self.ObtenDescripcionProducto(producto)
			if producto and descrip == "":
				Mensajes().Info(self, u"Producto  equivocado, revise la descripci�n",u"Aviso")
				return
			if producto and unidad == "":
				Mensajes().Info(self, u"Producto  equivocado, revise la unidad de compra",u"Aviso")
				return
			
			self.grid.SetCellValue( fila , 2, unidad)
			self.grid.SetCellValue( fila , 4, descrip)
			self.grid.Refresh()

			
		if evtkey != wx.WXK_RETURN and evtkey != wx.WXK_NUMPAD_ENTER:
			evt.Skip()
			return

		if evt.ControlDown():   # the edit control needs this key
			evt.Skip()
			return
		
		
		self.grid.DisableCellEditControl()
		
		#validaciones
		if col == 3:
			producto = self.grid.GetCellValue( fila, col)
			descrip, unidad = self.ObtenDescripcionProducto(producto)
			if descrip == "":
				Mensajes().Info(self, "Producto  equivocado, revise la descripci�n","Aviso")
				return
			if unidad == "":
				Mensajes().Info(self, "Producto  equivocado, revise la unidad de compra","Aviso")
				return
			
			self.grid.SetCellValue( fila , 2, unidad)
			self.grid.SetCellValue( fila , 4, descrip)
			self.grid.Refresh()
			
		if col in (1,5):
			
			try:
				cantidad = float(self.grid.GetCellValue( fila, 1))
			except:
				cantidad = 0
				
			try:
				precio_unitario = float(self.grid.GetCellValue(fila,5))
			except:
				precio_unitario = 0
				
			if cantidad and precio_unitario:
				importe =  cantidad * precio_unitario
				self.grid.SetCellValue(fila, 6, str(importe))
				
		
		#if col == 0:
			#idempleado = self.GetCellValue( fila, col)
			#nombre = self.GetNombre(idempleado)
			#if nombre == "":
				#Mensajes().Info(self, "Empleado equivocado","Aviso")

				#return
			#self.SetCellValue( fila , 1, nombre)
			#self.Refresh()
		
		#if col == 2:
			#idconcepto = self.GetCellValue( fila, col)
			#if idconcepto == "":
				#if self.tipo == "NORMAL":
					#idconcepto = "201"
				#elif self.tipo == "AVANT":
					#idconcepto = str(self.AVANT)
				#else:
					#Mensajes().Info( self, "Concepto equivocado!!", "Aviso")
					#return
				#self.SetCellValue(fila,col, idconcepto)
			#if not int(idconcepto) in self.deducciones:
				#Mensajes().Info( self, "Concepto equivocado!!", "Aviso")
				#return
			#concepto = self.GetConcepto(idconcepto)
			#if concepto == "":
				#Mensajes().Info( self, "Concepto equivocado!!", "Aviso")
				#return
			
			#self.SetCellValue( fila , 3, concepto)
			#self.Refresh()
		#if col == 5:
			#if self.GetCellValue(fila,col) == "":
				#self.SetCellValue(fila,col, self.hoy)
				#self.Refresh()
				
		#if col == 8:
			#pass
			
		# asignaciones a variables
		partida = self.grid.GetCellValue( fila, 0)
		cantidad = self.grid.GetCellValue( fila, 1)
		unidad = self.grid.GetCellValue( fila, 2)
		producto = self.grid.GetCellValue( fila, 3)
		precio_unitario = self.grid.GetCellValue(fila,5)
		porcentajeimpuesto = self.grid.GetCellValue(fila,7)
		notas = self.grid.GetCellValue(fila,8)
		cantidadanterior = self.grid.GetCellValue( fila, 9)
		
		
		if cantidad != "" and unidad != "" and producto != "" and precio_unitario != "" and porcentajeimpuesto != "":
			if not self.Afectar( partida, cantidad, unidad, producto, precio_unitario, porcentajeimpuesto, notas, cantidadanterior):
				return
			
		
		success = self.grid.MoveCursorRight(evt.ShiftDown())
		
		

		if not success:
			newRow = self.grid.GetGridCursorRow() + 1

			if newRow < self.grid.GetTable().GetNumberRows():
				self.grid.SetGridCursor(newRow, 0)
				self.grid.MakeCellVisible(newRow, 0)
				self.grid.Refresh()
			else:
				# this would be a good place to add a new row if your app
				# needs to do that
				self.grid.AppendRows(1)
				
				fila = newRow
				for col in range(len(self.meta) + 1):
					if fila % 2 == 0:

						self.grid.SetCellBackgroundColour(  fila,col, wx.NamedColour("Medium Goldenrod"))
				
					if col in (0,9):
						renderer = NullGridRenderer()
						self.grid.SetCellRenderer( fila, col, renderer )
				
					if col in ( 0,2,4,6,9):
						self.grid.SetReadOnly( fila,col,True)
					
					
					if col in ( 1,5,7):
						self.grid.SetCellEditor(fila, col, gridlib.GridCellFloatEditor())
					

				self.grid.SetCellValue(newRow, 7, "15")  #Columna del impuesto (default 15%)
				self.grid.SetGridCursor(newRow, 1)
				self.grid.MakeCellVisible(newRow, 1)
				self.grid.Refresh()

		
	def buildFromQuery(self, rebuild = False):
		numregs = 0
		query = self.query
		
		metapiece = self.meta
		elements = len(metapiece)
		metapiece_selected = metapiece
		
		if numregs == 0:
			
			filas = self.grid.GetNumberRows()
			cols = self.grid.GetNumberCols()
			
			if filas:
				self.grid.DeleteRows(0, filas)
			if cols:
				self.grid.DeleteCols(0, cols)
			
			self.grid.InsertRows(0,1)
			self.grid.InsertCols(0,elements)
			#self.grid.ClearGrid()
			#self.CreateGrid(1,elements)
			fila = 0
			for col in range(0,elements):
				
				if fila % 2 == 0:
	
					self.grid.SetCellBackgroundColour(  fila,col, wx.NamedColour("Medium Goldenrod"))
				
				if col in (0,9):
					renderer = NullGridRenderer()
					self.grid.SetCellRenderer( fila, col, renderer )
					
					
				if col in ( 0,2,4,6,9):
					self.grid.SetReadOnly( fila,col,True)
					if col == 6:
						self.grid.SetColFormatFloat(col, 12,2)
					
					
				if col in ( 1,5,7):
					self.grid.SetCellEditor(fila, col, gridlib.GridCellFloatEditor())
					#self.grid.SetColFormatNumber(col)
					
				

		else:
			
			self.grid.CreateGrid(numregs,elements)
						
		colindex = 0
					
		for metacols in metapiece:

			self.grid.SetColSize(colindex,metacols[0])
			lbl = metacols[1]
			self.grid.SetColLabelValue(colindex,metacols[1])
			colindex += 1
					
		self.grid.ForceRefresh()
		fila = 0
			
		cursor = r_cn.cursor()
		cursor.execute(str(self.query))
		
		rows = fetchall(cursor)
		cursor.close()

		#Mensajes().Info(self, "Registros %s" % cursor.rowcount, "Oops")
		if numregs == 0:
			#delta = cursor.rowcount
			delta = len(rows)
			if delta > 1:
				delta -= 1
				self.grid.AppendRows(delta)
			
		#while True:
		
		if rows:
			#row = fetchone(cursor)
			#if row is None:
					#break
			
			for row in rows:
				for col in range(0, colindex):
					if fila % 2 == 0:
						self.grid.SetCellBackgroundColour(  fila,col, wx.NamedColour("Medium Goldenrod"))
						
					if col in (0,9):
						renderer = NullGridRenderer()
						self.grid.SetCellRenderer( fila, col, renderer )
					
					if col in (0,2,4,6,9):
						self.grid.SetReadOnly( fila,col,True)
						
					if col in (1,5,7):
						self.grid.SetCellEditor(fila, col, gridlib.GridCellFloatEditor())
					
					if len( metapiece_selected[col]) in (3,4):
						col_selected = metapiece_selected[col]
						hAlignmnt = col_selected[2]
						self.grid.SetCellAlignment( fila,col,hAlignmnt, wx.ALIGN_CENTER)
						
					funcion = ""    
					if len( metapiece_selected[col]) == 4:
						funcion = col_selected[3]
	
					if col != 9:
						if row[col] == None:
							self.grid.SetCellValue(fila,col,'')
						else:
							try:
								if funcion == "":
									valor = str(row[col])
									self.grid.SetCellValue(fila,col,valor)
									if col == 1:
										self.grid.SetCellValue(fila,9,valor)
								else:
									try:
										lafuncion = funcion % row[col]
										#lafuncion = funcion + '(' + str(row[col]) + ')'
										self.grid.SetCellValue(fila,col,eval(lafuncion))
									except:
										self.grid.SetCellValue(fila,col, '**')
							except:
								try:
									self.grid.SetCellValue(fila,col,row[col].decode("iso8859-1"))
								except:
									try:
										self.grid.SetCellValue(fila,col,str(row[col]))
									except:
										pass
				fila += 1
				
		#cursor.close()
						
		if rebuild:
			self.grid.DeleteRows(delta + 1, delta)
			
		self.grid.AutoSizeColumns()
		fila -= 1
		self.grid.SetGridCursor(fila, 1)
		self.grid.MakeCellVisible(fila, 1)
			
	def OnRightClick(self, event):
		
		fila = event.GetRow()
		self.grid.SetGridCursor(fila, 1)
		partida = self.grid.GetCellValue( fila, 0)
		cantidad = self.grid.GetCellValue( fila, 1)
		unidad = self.grid.GetCellValue( fila, 2)
		producto = self.grid.GetCellValue( fila, 3)
		precio_uintario = self.grid.GetCellValue( fila, 5)
		porcentajeimpuesto = self.grid.GetCellValue( fila, 7)
		notas = self.grid.GetCellValue( fila, 8)
		cantidadanterior = self.grid.GetCellValue( fila, 9)
		

		if Mensajes().YesNo(self,u"� Desea eliminar la partida %s ?" % (fila + 1), u"Confirmaci�n"):
			if "" in (producto, cantidad, unidad, precio_uintario, porcentajeimpuesto, notas):
				
				self.grid.DeleteRows(fila, 1)
			
			else:
				
				if self.Afectar( partida, cantidad, unidad, producto, precio_uintario, porcentajeimpuesto, notas, cantidadanterior, soloEliminar = True):
					self.grid.DeleteRows(fila, 1)
	
	def ObtenDescripcionProducto(self, producto):
		
		cursor = r_cn.cursor()
		sql = """
		select descripcion, unidad from gixproductos where id_producto = '%s'
		""" % producto
		descripcion = ""
		unidad = ""
		cursor.execute(str(sql))
		row = fetchone(cursor)
		if row:
			descripcion= self.GetStringFromField(row[0])
			unidad = self.GetStringFromField(row[1])
		cursor.close()
		return (descripcion, unidad)
			
	def Afectar( self, partida, cantidad, unidad, producto, precio_unitario, porcentajeimpuesto, notas, cantidadanterior, soloEliminar = False):
		
		entrada = self.entrada.GetValue().strip()
		#if True:
			#return True # este es un escape temporal , quitar esta linea cuando se hayan puesto los queries.

		cursor = r_cn.cursor()

		sql = """
		select count(*) from gixentradasinvdet where identradainv = %s
		"""  % entrada
		cursor.execute( str( sql ) )
		cuantos = int(fetchone(cursor)[0])
		siguiente = 1

		if cuantos > 0:
			sql = """
				select max(identradainvdet) + 1 from gixentradasinvdet where identradainv = %s
			""" % entrada 
			cursor.execute( str( sql ) )
			siguiente = int(fetchone(cursor)[0])
			
		# aqui va el query de eliminacion de partida o registro de detalle
		sql = """
		delete from gixentradasinvdet where identradainv = %s and identradainvdet = %s
		""" % (entrada, partida)
		
		try:
			if partida:
				cursor.execute( str( sql ) )
				sql= """
				select existencia from gixproductos where id_producto = '%s'
				""" % producto
				cursor.execute( str( sql ) )
				existencia = fetchone(cursor)[0]
				existencia = float(existencia) - float(cantidadanterior)
				sql = """
				update gixproductos set existencia = %s where id_producto = '%s'
				""" % (existencia, producto )
				cursor.execute( str( sql ) )
				if soloEliminar:
					cursor.close()
					r_cn.commit()
					return True
			else:
				partida = siguiente
				fila = self.grid.GetGridCursorRow()
				self.grid.SetCellValue(fila,0,str(partida))
			
			# aqui va el query de insercion de partida o registro de detalle
			sql = """
			insert into gixentradasinvdet( identradainv, identradainvdet, cantidad, id_producto, preciounitario, porcentajeimpuesto, notas, unidadcompra)
			values (%s, %s, %s, '%s', %s, %s, '%s', '%s')
			""" % ( entrada, partida, cantidad, producto, precio_unitario, porcentajeimpuesto, notas, unidad)
			cursor.execute( str( sql ) )
			sql= """
			select existencia from gixproductos where id_producto = '%s'
			""" % producto
			cursor.execute( str( sql ) )
			existencia = fetchone(cursor)[0]
			existencia = float(existencia) + float(cantidad)
			sql = """
			update gixproductos set existencia = %s where id_producto = '%s'
			""" % (existencia, producto )
			cursor.execute( str( sql ) )
			cursor.close()
			r_cn.commit()
			fila = self.grid.GetGridCursorRow()
			self.grid.SetCellValue( fila , 9, cantidad)
			
		except:
			cursor.close()
			r_cn.rollback()
			Mensajes().Info( self, u"No pudo afectarse la informaci�n", u"Atenci�n")
			return False

		self.grid.AutoSizeColumns()
		return True

	def OnBuscarProveedor(self,event):
		
		query = "select idproveedor, razonsocial + ' - ' + convert(varchar(7), idproveedor) from gixproveedores order by razonsocial" 
		self.RelatedFieldSearch(u"B�squeda de Proveedor", query, ID_TEXTCTRLENTRADASINVPROVEEDOR)
		
	def FillListBox(self, display = 'first'):
		
		wx.BeginBusyCursor()
		lbox = self.GetControl(ID_LISTBOXENTRADASINV)
		lbox.Clear()
		sql = "SELECT identradainv FROM %s order by identradainv" % self.dbtable 
		
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		
		for row in rows:
			dato = str(row[0]).rjust(9)
			lbox.Append(dato,row[0])

		cu.close()
		if display == 'first':
			self.GetLFRecord("min")
		elif display == 'last':
			self.GetLFRecord("max")
			
		wx.EndBusyCursor()
		
	def OnPrint(self,event):
		tabla = self.dbtable
		meta = (( 70, "Id Entrada"), (70,u"Fecha"), (200, u"Proveedor"), (150,u"Referencia"),
			(300,u"Notas"))
		query = """
		select e.identradainv, convert(varchar(10),e.fecha,103), p.razonsocial, e.referencia, e.notas
		from gixentradasinv e join gixproveedores p on e.idproveedor = p.idproveedor order by e.fecha DESC
		"""
		titulo = u"Consulta de Entradas al Inventario " 
		self.DisplayGrid(tabla, meta, query, titulo)
		
	def OnSearch(self, event):
		pass
		
	def GetLFRecord(self, what):

		lbox = self.GetControl(self.listbox)
		
		sql = "SELECT %s(identradainv) from %s" % (what, self.dbtable) 
	
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		numero = ""
		row = fetchone(cursor)
		cursor.close()
		if row[0]:
		
			numero = int(row[0])
					
			self.GetRecord(numero)
			
			self.ListBoxReposition(what)
		
	def OnText(self,event):
		
		self.controlactual = event.GetId()
		self.Text()
	
	def Text(self, VengodelaLista = False):

		for  id in( ID_TEXTCTRLENTRADASINVREFERENCIA, ID_TEXTCTRLENTRADASINVPROVEEDOR, ID_TEXTCTRLENTRADASINVFECHA):
			control = self.GetControl(id)
			
			if id in (ID_TEXTCTRLENTRADASINVREFERENCIA, ID_TEXTCTRLENTRADASINVFECHA):
				valor = control.GetValue().strip()
				if valor == "" and not self.FillingARecord and not self.NewFlag:
					self.NewFlag = True
					if not VengodelaLista:
						Mensajes().Info(self, u"� No debe quedar ning�n dato en blanco !", u"Atenci�n")
						return
				
			if id == ID_TEXTCTRLENTRADASINVPROVEEDOR:
				proveedor = control.GetValue().strip()
				if proveedor != "":
					if not proveedor.isdigit():
						Mensajes().Info(self, u"� El proveedor debe ser num�rico !", u"Atenci�n")
						return
					razonsocial = self.ObtenProveedor(proveedor)
					if razonsocial == "":
						Mensajes().Info(self, u"� El proveedor no existe !", u"Atenci�n")
						return
					self.GetControl(ID_ENTRADASINVPROVEEDOR).SetLabel(razonsocial)
				elif not self.FillingARecord and not self.NewFlag:
					self.NewFlag = True
					if not VengodelaLista:
						Mensajes().Info(self, u"� El proveedor no debe quedar en blanco !", u"Atenci�n")
						return
		
		self.EndOfOnText(self.controlactual)    
		
	def ObtenProveedor(self, proveedor):
		""" 
		Obtener de base de datos la razon social del Proveedor
		
		"""
		try:
			if not proveedor.isdigit():
				return ""
		except:
			return ""
		
		sql = "select razonsocial from gixproveedores where idproveedor = %s" % proveedor
		razonsocial = ""
		
		try:
			cursor = r_cn.cursor()
			cursor.execute(str(sql))
			row = fetchone( cursor )
			if row:
				razonsocial = "%s" % ( self.GetStringFromField(row[0]), ) 
		finally:
			cursor.close()
			
		return razonsocial
		
	def SaveRecord(self):
		
		entrada = self.GetControl(ID_TEXTCTRLENTRADASINVENTRADA).GetValue()
		

		if entrada.strip() == "" :

			bienGrabado = self.AddRecord()
			lbx = self.GetControl(ID_LISTBOXENTRADASINV)
			lbx.Clear()
			
			self.FillListBox("last") # se va al final de la lista aunque la alta haya sido de un puesto intermedio
			puesto = self.GetControl(ID_TEXTCTRLENTRADASINVENTRADA).GetValue()
		
		else:

			bienGrabado = self.UpdateRecord()
			
		if bienGrabado:
			
			self.tb.EnableTool( ID_TOOLSAV, False)
			self.tb.EnableTool( ID_TOOLDEL, True)
			self.tb.EnableTool( ID_TOOLNEW, True)
			
			self.MenuSetter(ID_MENUGRABAR, False)
			self.MenuSetter(ID_MENUELIMINAR, True)
			self.MenuSetter(ID_MENUNUEVO, True)
			
			self.GetRecord("%s" % ( entrada ))
			
			
		else:

			Mensajes().Info(self,u"� El Registro no fue grabado !", u"Atenci�n")
			
	def UpdateRecord( self ):
		
		identradainv = self.GetControl(ID_TEXTCTRLENTRADASINVENTRADA).GetValue()
		idproveedor = self.GetControl(ID_TEXTCTRLENTRADASINVPROVEEDOR).GetValue()
		referencia = self.GetControl(ID_TEXTCTRLENTRADASINVREFERENCIA).GetValue()
		notas = self.GetControl(ID_TEXTCTRLENTRADASINVNOTAS).GetValue()
		fecha = "NULL"
		
		try:
			fecha_dia, fecha_mes, fecha_ano = self.GetControl(ID_TEXTCTRLENTRADASINVFECHA).GetValue().split('/')
			fecha = "'%s/%02d/%02d'" % (fecha_ano, int(fecha_mes), int(fecha_dia))
		except:
			pass
		
		setListForQuery = """
		idproveedor = '%s' , referencia = '%s' , fecha = %s , notas = '%s' 
		""" % ( idproveedor, referencia, fecha, notas)
		
		sql = "update %s set  %s " \
				"where identradainv = %s " \
			% ( self.dbtable, setListForQuery, identradainv )
		
		return  self.QueryUpdateRecord(sql)
		
	
	def AddRecord(self):

		idproveedor = self.GetControl(ID_TEXTCTRLENTRADASINVPROVEEDOR).GetValue()
		referencia = self.GetControl(ID_TEXTCTRLENTRADASINVREFERENCIA).GetValue()
		notas = self.GetControl(ID_TEXTCTRLENTRADASINVNOTAS).GetValue()
		fecha = "NULL"
		
		try:
			fecha_dia, fecha_mes, fecha_ano = self.GetControl(ID_TEXTCTRLENTRADASINVFECHA).GetValue().split('/')
			fecha = "'%s/%02d/%02d'" % (fecha_ano, int(fecha_mes), int(fecha_dia))
		except:
			pass
		
		sqlFields = """ 
		idproveedor, referencia, fecha, notas
		"""
		sqlValues = "'%s', '%s', %s, '%s'" % \
			( idproveedor, referencia, fecha, notas)
		
		sql = "insert into %s ( %s ) values ( %s ) " % ( self.dbtable, sqlFields, sqlValues ) 
		
		#return self.QueryAddRecord(sql)

		queTal =  self.QueryUpdateRecord(sql)
		if queTal:
			
			sqlx = "select max(identradainv) from gixentradasinv"
			cursor = r_cn.cursor()
			cursor.execute(str(sqlx))
			row = fetchone(cursor)
			numero = ""
			
			if row is not None:
				numero = str(int(row[0]))
					
			cursor.close()
			self.GetControl(ID_TEXTCTRLENTRADASINVENTRADA).SetValue(numero)

		return queTal
	
	def OnDeleteRecord( self, event):

		if Mensajes().YesNo(self,u"� Desea realmente eliminar este registro ?", u"Confirmaci�n") :

			if self.DeleteRecord():

				lbx = self.GetControl(ID_LISTBOXENTRADASINV)
				pos = lbx.GetSelection()
				
				self.MoveOneStep("PREVIOUS")
				lbx.Delete(pos)
				Mensajes().Info(self,u"� Registro Eliminado !",u"Atenci�n")
				#self.LimpiaControles()
				self.tb.EnableTool( ID_TOOLSAV, False)
				self.tb.EnableTool( ID_TOOLDEL, True)
				self.tb.EnableTool( ID_TOOLNEW, True)
				self.MenuSetter(ID_MENUGRABAR, False)
				self.MenuSetter(ID_MENUELIMINAR, True)
				self.MenuSetter(ID_MENUNUEVO, True)
				
	def DeleteRecord(self):
		entrada = self.GetControl(ID_TEXTCTRLENTRADASINVENTRADA).GetValue().strip()

		if entrada  == "":
			
			Mensajes().Info(self, u"No se ha especificado la entrada", u"Atenci�n")
			return False
		
		sql = "delete from %s where identradainv = %s" % ( self.dbtable, entrada ) 

		try:
			cursor = r_cn.cursor()
			cursor.execute( str(sql) )
			cursor.close()
		
			r_cn.commit()
			return True
		
		except:
			r_cn.rollback()
			Mensajes().Info(self,u"Sucedi� algo que impidi� eliminar este registro.\nQuiz� se deba a que hay otra informaci�n\nque depende de este registro\n%s" % sql, u"Atenci�n")
			return False
	
	def GetAnotherRecord(self, comparison):

		if comparison == "<":
			asc_or_desc = "DESC"
		else:
			asc_or_desc = "ASC"
		
		lbox = self.GetControl(self.listbox)
		lboxIndex = lbox.GetSelection()
		entrada = lbox.GetClientData(lboxIndex)
		sql = "select top 1 identradainv from %s where identradainv %s '%s' order by identradainv %s" % (self.dbtable, comparison, entrada, asc_or_desc)
	
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		numero = ""
		if row is not None:
			numero = str(int(row[0]))
					
		cursor.close()
		if numero <> "":
		
			if comparison == ">":
				newlboxIndex = lboxIndex + 1
			else:
				newlboxIndex = lboxIndex - 1
				
			if str(numero) <> str(lbox.GetClientData( newlboxIndex)):
				Mensajes().Warn(self,"A futuro refrescar el Listbox....","Epale")
			else:
				lbox.SetSelection( newlboxIndex, True)
				self.GetRecord(numero)
		
		return numero
	
	
	def GetRecord(self, record):
		
		lbox = self.GetControl(self.listbox)
		
		try:
			a = int(record)
		except:
			return False
		
		self.FillingARecord = True
		self.LimpiaControles()
		self.SetColoreable(False)

		for v in self.controles_tipo_txt.itervalues():
			
			self.originales[ v ] = None
		
		entrada = str(int(record))
		self.GetControl(ID_TEXTCTRLENTRADASINVENTRADA).SetValue( entrada )
		
		sql = "select referencia, idproveedor, convert(varchar(10),fecha,103), notas from %s where identradainv = %s" % ( self.dbtable, entrada )
		
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone( cursor )
		ref,prov,fecha,notas = map(self.GetStringFromField, row)

		self.GetControl(ID_TEXTCTRLENTRADASINVREFERENCIA).SetValue(self.GetStringFromField(row[0]))
		self.GetControl(ID_TEXTCTRLENTRADASINVPROVEEDOR).SetValue(str(row[1]))
		self.GetControl(ID_TEXTCTRLENTRADASINVFECHA).SetValue(self.GetStringFromField(row[2]))
		self.GetControl(ID_TEXTCTRLENTRADASINVNOTAS).SetValue(self.GetStringFromField(row[3]))
		
		for x in "REFERENCIA,PROVEEDOR,FECHA,NOTAS".split(","):
			key = eval("ID_TEXTCTRLENTRADASINV%s" % x )
			self.originales[key] = self.GetControl(key).GetValue()
		
		self.FillingARecord = False
		cursor.close()
		self.CambiaTab()
		
		self.tb.EnableTool(ID_TOOLSAV,False)
		self.tb.EnableTool(ID_TOOLDEL, True)
		self.tb.EnableTool(ID_TOOLNEW,True)
		self.MenuSetter(ID_MENUGRABAR, False)
		self.MenuSetter(ID_MENUELIMINAR, True)
		self.MenuSetter(ID_MENUNUEVO, True)             
		
		return True
	


class GixEntradasInventarioDetalle(gridlib.Grid):
	def __init__( self, parent, id):
		gridlib.Grid.__init__( self, parent, id , wx.DefaultPosition, [800,400])
		self.parent = parent
		#self.tabla = "gixnoseque"
		
		
		self.Bind(gridlib.EVT_GRID_CELL_RIGHT_CLICK, self.OnRightClick)
		self.Bind(wx.EVT_KEY_DOWN, self.OnKeyDown)
		self.PrepararQuery("select "","","",""")
		
			
	def PrepararQuery(self, queryalterno = ""):

		if queryalterno == "":
			self.query = """
			select a.cantidad, a.unidadcompra, a.id_producto, b.descripcion, a.preciounitario, a.cantidad * a.preciounitario from gixentradasinvdet a
			join gixproductos b on a.id_producto = b.id_producto 
			where a.identradainv = %s 
			""" % self.entrada
		else:
			self.query = queryalterno
		
		
		self.meta = (( 70, u"Cantidad", wx.ALIGN_RIGHT),
			(60, u"Unidad"),
			(80, u"Producto"),
			( 250, u"Descripci�n"),
			( 90, u"Precio Unitario",wx.ALIGN_RIGHT),
			( 95, u"Importe",wx.ALIGN_RIGHT))
		
		self.buildFromQuery()
		
	def OnKeyDown(self, evt):
		
		fila = self.GetGridCursorRow()
		col = self.GetGridCursorCol()
		
		try:
			evtkey = evt.KeyCode()
		except:
			evtkey = evt.GetKeyCode()
		
		if evtkey == wx.WXK_F6:
			archivo = "detalle_entradas_almacen.xls"
			if Mensajes().YesNo(self, u"Desea volcar el detalle al archivo de excel\n %s?" % (archivo), u"Atenci�n"):
				siono = "SI"
				try:
					exc = SimNoraExcel(excel = archivo)
					exc.SetGrid(self)
					exc.HazExcelDesdeGrid()
				except:
					siono = "NO"
				Mensajes().Info(self,u"El archivo de excel\n%s\n%s pudo ser generado!" % (archivo,siono), u"Atenci�n")
					
				
			evt.Skip()
			return
		
		#if evt.KeyCode() == wx.WXK_F5:
			#opciones = [u"N�mero Empleado", "Nombre", "Concepto"]
			#indi = wx.GetSingleChoiceIndex(u"Elija criterio para ordenar la lista", u"Ordenamiento", opciones)
			#if indi >= 0:
				#self.Sort(indi)
				#evt.Skip()
				#return
				
			
		#if evt.KeyCode() == wx.WXK_F1:
			##Mensajes().Info(self, "F1", "hey")
			#if col == 2:
			
				#indi = wx.GetSingleChoiceIndex(u"Elija una deducci�n", u"Deducciones", self.descripciondeducciones)
				#if indi >= 0:
					#self.SetCellValue(fila, col, str(self.deducciones[indi]))
					
			#if col == 7:
				#acum, ctos = self.ObtenerAcumulado(self.GetCellValue(fila,0),self.GetCellValue(fila,2),self.GetCellValue(fila,5))
				#if acum:
					#if Mensajes().YesNo(self, u"El Acumulado en base a lo calculado\nes $%s\nDesea tomarlo?" % (acum), u"Atenci�n"):
						#self.SetCellValue(fila,col, str(acum))
			
			#if col == 9:
				
				#indi = wx.GetSingleChoiceIndex(u"Elija una criterio de aplicabilidad", u"Aplicabilidad", self.descripcionaplicabilidad)
				#if indi >= 0:
					#self.SetCellValue(fila, col, str(self.aplicabilidad[indi]))
			
		if evtkey != wx.WXK_RETURN and evtkey != wx.WXK_NUMPAD_ENTER:
			evt.Skip()
			return

		if evt.ControlDown():   # the edit control needs this key
			evt.Skip()
			return
		
		
		self.DisableCellEditControl()
		
		#validaciones
		
		#if col == 0:
			#idempleado = self.GetCellValue( fila, col)
			#nombre = self.GetNombre(idempleado)
			#if nombre == "":
				#Mensajes().Info(self, "Empleado equivocado","Aviso")

				#return
			#self.SetCellValue( fila , 1, nombre)
			#self.Refresh()
		#if col == 2:
			#idconcepto = self.GetCellValue( fila, col)
			#if idconcepto == "":
				#if self.tipo == "NORMAL":
					#idconcepto = "201"
				#elif self.tipo == "AVANT":
					#idconcepto = str(self.AVANT)
				#else:
					#Mensajes().Info( self, "Concepto equivocado!!", "Aviso")
					#return
				#self.SetCellValue(fila,col, idconcepto)
			#if not int(idconcepto) in self.deducciones:
				#Mensajes().Info( self, "Concepto equivocado!!", "Aviso")
				#return
			#concepto = self.GetConcepto(idconcepto)
			#if concepto == "":
				#Mensajes().Info( self, "Concepto equivocado!!", "Aviso")
				#return
			
			#self.SetCellValue( fila , 3, concepto)
			#self.Refresh()
		#if col == 5:
			#if self.GetCellValue(fila,col) == "":
				#self.SetCellValue(fila,col, self.hoy)
				#self.Refresh()
				
		#if col == 8:
			#pass
			
		# asignaciones a variables
		cantidad = self.GetCellValue( fila, 0)
		producto = self.GetCellValue( fila, 1)
		precio_unitario = self.GetCellValue(fila,3)
		
		
		if "" not in ( cantidad, producto, precio_unitario):
			if not self.Afectar( cantidad, producto, precio_unitario):
				return
			
		
		success = self.MoveCursorRight(evt.ShiftDown())
		
		

		if not success:
			newRow = self.GetGridCursorRow() + 1

			if newRow < self.GetTable().GetNumberRows():
				self.SetGridCursor(newRow, 0)
				self.MakeCellVisible(newRow, 0)
			else:
				# this would be a good place to add a new row if your app
				# needs to do that
				self.AppendRows(1)
				
				fila = newRow
				for col in range(10):
					if fila % 2 == 0:

						self.SetCellBackgroundColour(  fila,col, wx.NamedColour("Medium Goldenrod"))
				
					if col in ( 2,4):
						self.SetReadOnly( fila,col,True)
					
					
					if col in ( 0,3 ):
						self.SetCellEditor(fila, col, gridlib.GridCellFloatEditor())
					
						
				self.SetGridCursor(newRow, 0)
				self.MakeCellVisible(newRow, 0)

		
	def buildFromQuery(self, rebuild = False):
	
		numregs = 0
		query = self.query
		
		metapiece = self.meta
		elements = len(metapiece)
		metapiece_selected = metapiece
		#columnas = [(0, 70, u"Cantidad"),
			#(1, 80, u"Producto"),
			#(2, 250, u"Descripci�n"),
			#(3, 90, u"Precio Unitario"),
			#(4, 95, u"Importe")]
		
		if numregs == 0:
			if rebuild:
				#self.DeleteRows(0, self.GetNumberRows())
				self.ClearGrid()
				pass
			else:
				self.CreateGrid(1,elements)
			fila = 0
			for col in range(0,elements):
				if fila % 2 == 0:
	
					self.SetCellBackgroundColour(  fila,col, wx.NamedColour("Medium Goldenrod"))
					
					
				if col in ( 2,4):
						self.SetReadOnly( fila,col,True)
					
					
				if col in ( 0,3 ):
					self.SetCellEditor(fila, col, gridlib.GridCellFloatEditor())
					
				

		else:
			
			self.CreateGrid(numregs,elements)
						
		colindex = 0
					
		for metacols in metapiece:

				self.SetColSize(colindex,metacols[0])
				lbl = metacols[1]
				self.SetColLabelValue(colindex,metacols[1])
				colindex += 1
					
		self.ForceRefresh()
		fila = 0
			
		cursor = r_cn.cursor()
		cursor.execute( str(self.query))

			
		#Mensajes().Info(self, "Registros %s" % cursor.rowcount, "Oops")
		if numregs == 0:
			delta = cursor.rowcount
			if delta > 1:
				delta -= 1
				self.AppendRows( delta)
				
		
			
		while True:

			row = fetchone(cursor)

			if row is None:
					break
						
			for col in range(0,colindex):
						
				if fila % 2 == 0:

					self.SetCellBackgroundColour(  fila,col, wx.NamedColour("Medium Goldenrod"))
				
				if col in ( 2,4):
						self.SetReadOnly( fila,col,True)
					
					
				if col in ( 0,3 ):
					self.SetCellEditor(fila, col, gridlib.GridCellFloatEditor())
				
				
				if len( metapiece_selected[col]) == 3:

					col_selected = metapiece_selected[col]
					hAlignmnt = col_selected[2]
					self.SetCellAlignment( fila,col,hAlignmnt, wx.ALIGN_CENTER)

				if row[col] == None:

					self.SetCellValue(fila,col,'')
					
				else:

					try:

						self.SetCellValue(fila,col,str(row[col]))

					except:

						self.SetCellValue(fila,col,row[col].decode("iso8859-1"))
							
			fila += 1
						
		cursor.close()
		if rebuild:
			self.DeleteRows(delta + 1, delta)
			
	def OnRightClick(self, event):
		
		fila = event.GetRow()
		cantidad = self.GetCellValue( fila, 0)
		producto = self.GetCellValue( fila, 1)
		precio_uintario = self.GetCellValue( fila, 3)
		

		if Mensajes().YesNo(self,"Desea eliminar la fila %s" % (fila,),u"Atenci�n"):
			if "" in (fila, cantidad, precio_uintario):
				
				self.DeleteRows(fila, 1)
			
			else:
				
				if self.Afectar( cantidad, producto, precio_uintario, soloEliminar = True):
					self.DeleteRows(fila, 1)
	
			
	def Afectar( self, cantidad, producto, precio_unitario, soloEliminar = False):
		if True:
			return True # este es un escape temporal , quitar esta linea cuando se hayan puesto los queries.

		cursor = r_cn.cursor()
		# aqui va el query de eliminacion de partida o registro de detalle
		sql = """
		"""
		
		try:
			cursor.execute( str( sql ) )
			if soloEliminar:
				cursor.close()
				r_cn.commit()
				return True
			# hacer query para obtener numero maximo de partida + 1 max(partida) +1 
			# aqui va el query de insercion de partida o registro de detalle
			sql = """
			"""
			cursor.execute( str( sql ) )
			cursor.close()
			r_cn.commit()
			
		except:
			cursor.close()
			r_cn.rollback()
			Mensajes().Info( self, u"No pudo afectarse la informaci�n", u"Atenci�n")
			return False

		return True
	
class GixMenuBuilder(wx.Menu):
	
	def __init__(self, usuario, *args, **kwargs):
		wx.Menu.__init__(self, *args, **kwargs)
		self.dicDerechos = {}
		sql = """
		select distinct menu from gixderechos
		""" 
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		for row in rows:
			self.dicDerechos[eval(row[0])] = False

		sql = """
		select menu from gixderechos where usuario = '%s'
		""" % usuario
		cu.execute(str(sql))
		rows = fetchall(cu)
		for row in rows:
			self.dicDerechos.pop(eval(row[0]))
		cu.close()
		
	def Append(self, id, descripcion, descripcionlarga):
		if not self.dicDerechos.has_key(id):
			wx.Menu.Append(id, descripcion, descripcionlarga)

class GixFrame(wx.Frame, GixBase):
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize, style = wx.DEFAULT_FRAME_STYLE ):
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		global DICEMPRESAS, PASSWORD
		
		favicon = wx.Icon('gix2.ico', wx.BITMAP_TYPE_ICO, 16, 16)
		wx.Frame.SetIcon(self, favicon)		
		self.CreateMyMenuBar()
		self.MenuSetter(ID_MENU_LOGOUT, False)
		self.AllMenues(False)
		self.CreateMyToolBar()
		
		anchos = [-1,200]
		self.CreateStatusBar(2)
		self.SetStatusWidths(anchos)
		self.ReLogin(None)
		self.SetStatusText(u"GIX versi�n %s (Desarrollado por Smartics) " % GIXVERSION, 0)
		self.SetStatusText(u"Usuario: %s" % self.usuario, 1)
		
		panel = wx.Panel( self, -1)
		panel.SetBackgroundColour(wx.NamedColour("white"))
		sizer = wx.BoxSizer( wx.VERTICAL)
		panel.SetSizer(sizer)
		try:
			#img = wx.Image('images/gix2.png', wx.BITMAP_TYPE_PNG)
			#temp = img.ConvertToBitmap()
			#thesize = temp.GetWidth(), temp.GetHeight()
			#self.bmp = wx.StaticBitmap(parent = panel, bitmap = temp)
			#sizer.Add(self.bmp, 0, wx.ALIGN_CENTER_HORIZONTAL| wx.ALL, 5)
			
			#self.stext = wx.StaticText(panel, ID_TEXT, u"Versi�n %s" % GIXVERSION, wx.DefaultPosition, wx.DefaultSize, 0)
			#self.stext.SetForegroundColour(wx.BLUE)
			#sizer.Add(self.stext, 0, wx.ALIGN_CENTER_HORIZONTAL| wx.ALL, 5 )
			
			#thesize = temp.GetWidth(), temp.GetHeight()
			#self.bmp = wx.StaticBitmap(parent = panel, bitmap = temp)
			#sizer.Add(self.bmp, 0, wx.ALIGN_CENTER_HORIZONTAL| wx.ALL, 5)

			#Inicia Logo 50 en frame principal
			
			try:
				#img = wx.Image('images/Logo50small10.jpg', wx.BITMAP_TYPE_JPEG)
				#img = wx.Image('images/Fondo50A170.png', wx.BITMAP_TYPE_PNG)
				img = wx.Image('images/IclarGIX2012-2013.jpg', wx.BITMAP_TYPE_JPEG)
				if wx.Platform == '__WXMSW__':
					thewidth, theheight = img.GetWidth(), img.GetHeight()
					img = img.Rescale(int(thewidth * 0.45), int(theheight * 0.45), quality = wx.IMAGE_QUALITY_NORMAL)
				else:
					thewidth, theheight = img.GetWidth(), img.GetHeight()
					img = img.Rescale(int(thewidth * 0.50), int(theheight * 0.50), quality = wx.IMAGE_QUALITY_NORMAL)
					
				bmp = img.ConvertToBitmap()
				self.bmp = wx.StaticBitmap(parent = panel, bitmap = bmp)
				sizer.Add(self.bmp, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)
			except:
				pass
			
			#Termina Logo 50 en frame principal
			
			#try:
				#try:
					#dirName = os.path.dirname(os.path.abspath(__file__))
				#except:
					#dirName = os.path.dirname(os.path.abspath(sys.argv[0]))

				#imagesDir = os.path.join(dirName, 'images')
				#pn = os.path.normpath(os.path.join(imagesDir, "Logo50_SP.png"))
				##logo50 = wx.Bitmap(pn, wx.BITMAP_TYPE_PNG)
				#logo50 = wx.Image(pn, wx.BITMAP_TYPE_PNG)
				
				#thewidth, theheight = logo50.GetWidth(), logo50.GetHeight()
				#img = logo50.Rescale(int(thewidth / 2), int(theheight / 2), quality = wx.IMAGE_QUALITY_NORMAL)
				#bitmap = img.ConvertToBitmap()
				#shadow = wx.BLACK
				#splash = AS.AdvancedSplash(parent = panel, bitmap = bitmap, timeout = 5000,
				                           #agwStyle = AS.AS_TIMEOUT | AS.AS_CENTER_ON_PARENT | AS.AS_SHADOW_BITMAP,
				                           #shadowcolour = shadow)
			#except:
				#pass
			
		except:
			pass
		
		# WDR: handler declarations for GixFrame
		lMenuHandlers = [(self.ReLogin, ID_MENU_LOGIN),
		                 (self.OnLogout, ID_MENU_LOGOUT),
		                 (self.OnEmpresas, ID_MENU_EMPRESAS),
		                 (self.OnC2P, ID_MENU_C2P),
		                 (self.OnGraficaOfertasCompra, ID_MENU_GRAFICA_OFERTAS_COMPRA),
		                 (self.OnArbol, ID_MENU_ARBOL),
		                 (self.OnCatalogo, ID_MENU_PUESTOS),
		                 (self.OnCatalogo, ID_MENU_PERSONAS),
		                 (self.OnCatalogo, ID_MENU_CATEGORIAS),
		                 (self.OnRoles, ID_MENU_ROLES),
		                 (self.OnEstatus, ID_MENU_ESTATUS),
		                 (self.OnCatalogo, ID_MENU_PRODUCTOS),
		                 (self.OnNuevaRequisicion, ID_MENU_NUEVA_REQUISICION),
		                 (self.OnMr, ID_MENU_REQUISICIONES),
		                 (self.OnCambioEstatus, ID_MENU_CAMBIO_ESTATUS),
		                 (self.OnUsuario, ID_MENU_USUARIO),
		                 (self.OnCatalogo,ID_MENU_PROVEEDORES),
		                 (self.OnCatalogo, ID_MENU_ENTRADAS_INVENTARIO),
		                 (self.OnCatalogo, ID_MENU_PREREQUISICIONES),
		                 (self.OnUnidades, ID_MENU_UNIDADES),
		                 (self.OnCatalogo, ID_MENU_FACTORES_CONVERSION),
		                 (self.OnMovimientosInventario, ID_MENU_MOVIMIENTOS_INVENTARIO),
		                 (self.OnNoDisponible, ID_MENU_MENSAJES),
		                 (self.OnTiposCuentaContabilidad, ID_MENU_TIPOS_CUENTA_CONTABILIDAD),
		                 (self.OnCatalogoCuentasContabilidad, ID_MENU_CATALOGO_CUENTAS_CONTABILIDAD),
		                 (self.OnCatalogo, ID_MENU_POLIZAS_CONTABILIDAD),
		                 (self.OnImportaArchivoDbf, ID_MENU_IMPORTA_ARCHIVO_DBF),
		                 (self.OnInventarioCompras, ID_MENU_INVENTARIO_COMPRAS),
		                 (self.OnCambiarPassword, ID_MENU_CP),
		                 (self.OnSugerencias, ID_MENU_SUGERENCIAS_REQUISICIONES),
		                 (self.OnBalanzaComprobacion, ID_MENU_BALANZA_COMPROBACION),
		                 (self.OnAuxiliarMovimientos, ID_MENU_AUXILIAR_MOVIMIENTOS),
		                 (self.OnCatalogo, ID_MENU_EMPRESAS_CENTROS_COSTOS),
		                 (self.OnCatalogoPartidasEgresos, ID_MENU_RECFINCAT_PARTIDAS_EGRESOS),
		                 (self.OnCatalogoCheques, ID_MENU_RECFINEGR_CHEQUES_SOLICITUD),
		                 (self.OnCatalogo, ID_MENU_RECFINCAT_BANCOS),
		                 (self.OnCatalogo, ID_MENU_RECFIN_CAPTURAS_BANCOS),
		                 (self.OnCatalogo, ID_MENU_RECFINING_CLASIFICACION),
		                 (self.OnCatalogoProspectos, ID_MENU_VENTAS_PROSPECTOS),
		                 (self.OnCatalogoProspectosRecepcion, ID_MENU_VENTAS_CANALIZAR_PROSPECTOS),
		                 (self.OnCatalogoProspectosClientes, ID_MENU_CLIENTES_PROSPECTOS),
		                 (self.OnCatalogoProspectosRecepcion, ID_MENU_RECEPCION_PROSPECTOS),
		                 (self.OnConteoMediosPublicitarios, ID_MENU_RECEPCION_CONTEO_MEDIOS),
		                 (self.OnCatalogo, ID_MENU_RECFINEGR_EGRESOS_OTROS),
		                 (self.OnCatalogo, ID_MENU_VENTAS_MEDIOS_PUBLICITARIOS),
		                 (self.OnReporteRecibosElaborados, ID_MENU_VENTAS_REPORTE_RECIBOS_ELABORADOS),
		                 (self.OnCatalogo, ID_MENU_VENTAS_GUARDIAS),
		                 (self.OnReporteGuardiasAsignadas, ID_MENU_VENTAS_GUARDIAS_ASIGNADAS),
		                 (self.OnCatalogo, ID_MENU_VENTAS_CANDIDATOS_GUARDIA),
		                 (self.OnCatalogo, ID_MENU_VENTAS_SOLICITUD_DEVOLUCION),
		                 (self.OnCatalogo, ID_MENU_RECFINCAT_FIRMANTES),
		                 (self.OnCatalogo, ID_MENU_VENTAS_VENDEDORES),
		                 (self.OnCatalogo, ID_MENU_CTRLOBRASCAT_PROVEEDORES),
		                 (self.OnCatalogo, ID_MENU_CTRLOBRASCAT_CONCEPTOS),
		                 (self.OnCatalogo, ID_MENU_CTRLOBRAS_CONTRATOS),
		                 (self.OnCatalogo, ID_MENU_VENTAS_PRECIOS_SUSTENTABLES_PRECIOS),
		                 (self.OnCatalogo, ID_MENU_VENTAS_PRECIOS_SUSTENTABLES_OFERTAS),
		                 (self.OnCatalogo, ID_MENU_VENTAS_PRECIOS_SUSTENTABLES_INMUEBLES),
		                 (self.OnCatalogo, ID_MENU_CTRLOBRAS_ESTIMACIONES),
		                 (self.OnCatalogo, ID_MENU_CTRLOBRAS_APLICACION_PAGOS),
		                 (self.OnReporteFinancieroObra, ID_MENU_CTRLOBRASREP_FINANCIERO),
		                 (self.OnReporteEstimacionesFacturas, ID_MENU_CTRLOBRASREP_ESTIMACIONES),
		                 (self.OnReporteEstimacionesPagos, ID_MENU_CTRLOBRASREP_PAGOS),
		                 (self.OnCatalogo, ID_MENU_RECFINARCADIA_RECIBOS_PAGO_PINARES),
		                 (self.OnReporteRecibosPinares, ID_MENU_RECFINARCADIA_RECIBOS_CONSULTA_PINARES),
		                 (self.OnReporteHijosClientes, ID_MENU_PRESUP_HIJOSCLIENTES),
		                 (self.OnCatalogo, ID_MENU_PRESUP_ANALISISCOSTOS),
		                 (self.OnCatalogo, ID_MENU_VENTAS_RECIBOS_DE_PAGO),
		                 (self.OnCatalogo, ID_MENU_RECFINARCADIA_TABLAS_AMORTIZACION_PINARES),
		                 (self.OnCatalogo, ID_MENU_VENTAS_LISTA_DE_PRECIOS),
		                 (self.OnCatalogo, ID_MENU_VENTAS_OFERTAS_DE_COMPRA),
		                 (self.OnCatalogo, ID_MENU_VENTAS_REPORTE_OFERTAS_ASIGNACIONES),
		                 (self.OnCatalogo, ID_MENU_VENTAS_ASIGNACION_PRECIOS_INMUEBLES),
		                 (self.OnCatalogo, ID_MENU_RECFINARCADIA_ESTADO_CUENTA_PINARES),
		                 (self.OnCatalogo, ID_MENU_VENTAS_CLIENTES),
		                 (self.OnCatalogo, ID_MENU_RECFINARCADIA_VENDEDORES_PINARES),
		                 (self.OnCatalogo, ID_MENU_RECFINARCADIA_CLIENTES_PINARES),
		                 (self.OnCatalogo, ID_MENU_RECFINARCADIA_INSTRUCCION_ESCRITURA_PINARES)]
				 
		for k in lMenuHandlers:
			self.Bind(wx.EVT_MENU, k[0], id = k[1])
			
		wx.EVT_MENU(self, wx.ID_ABOUT, self.OnAbout)
		wx.EVT_MENU(self, wx.ID_EXIT, self.OnQuit)
		wx.EVT_MENU(self, ID_MENU_CLIENTES_SALIR, self.OnQuit)
		wx.EVT_MENU(self, ID_MENU_RECEPCION_SALIR, self.OnQuit)
		wx.EVT_CLOSE(self, self.OnCloseWindow)
		if wx.Platform == '__WXMSW__' and not FORCEPORT:
			wx.GetApp().Bind(wx.EVT_UPDATE_UI, self.OnIdle)
		
		if FORCEWEBSERVER:
			#gixmodel.WebServer(self).start()
			self.webserver = gixmodel.WebServer(self)
			self.webserver.start()			
		#try:
			#import smartics
			#event = wx.CommandEvent( wx.wxEVT_COMMAND_MENU_SELECTED, ID_MENU_PRESUP_ANALISISCOSTOS)
			#self.GetEventHandler().ProcessEvent( event )
			#del smartics
		#except:
			#pass

		#GixMenuBuilder(self.usuario)
		
	# WDR: methods for GixFrame

		try:
			#ToasterBoxSimple.play(self, u"Iniciando sesi�n %s" % self.usuario)
			ToasterBoxComplex.play(self, u"Iniciando Sesi�n", self.usuario)
		except:
			pass
	
	def WebRequest(self, req, qs = None):
		if req == "exit":
			ev = wx.CommandEvent( wx.wxEVT_CLOSE_WINDOW)
			self.GetEventHandler().ProcessEvent( ev )
			return
		if req == "menu":
			if qs:
				try:
					menu_id = qs.split("&")[0].split("=")[0].upper()
					ev = wx.CommandEvent( wx.wxEVT_COMMAND_MENU_SELECTED, eval(menu_id))
					self.GetEventHandler().ProcessEvent( ev )
				except:
					pass
			return
		
	def OnIdle(self, event):
		if not self.Conexion():
			self.RestableceConexion()
			
	def Conexion(self):
		try:
			cu = r_cn.cursor()
			cu.execute("select getdate()")
			cu.fetchone()
			cu.close()
			conexion = True
		except:
			try:
				cu.close()
			except:
				pass
			
			warnings.warn("<<Se perdio la conexi�n con el coordinador central>>")
			Mensajes().Error(self, u"� Se ha perdido la conexi�n con el coordinador central !", u"Atenci�n")
			conexion = False
			
		return conexion
		
	def RestableceConexion(self):
		#if conectar_con_server(FORCERPYC, FORCEHOST, FORCEPORT, FORCELOCAL, FORCETEST, FORCEINSTANCE, FORCEWEB):
		if gixmodel.inicializacion(logging, FORCERPYC, FORCEHOST, FORCEPORT, FORCELOCAL, FORCETEST, FORCEINSTANCE, FORCEWEB, SMARTICS):	
			global r_cn
			global mcache
			r_cn = gixmodel.reasignarconexion()
			asignaConexion(r_cn)
			mcache = gixmodel.mcache
			warnings.warn("<<Se restablecio la conexi�n con el coordinador central>>")
			Mensajes().Info(self, u"� Se ha restablecido la conexi�n con el coordinador central !", u"Aviso")
		else:
			warnings.warn("<<Se estan experimentando problemas para restablecer la conexi�n con el coordinador central>>")
			Mensajes().Error(self, u"� Se estan experimentando problemas para restablecer la conexi�n" \
							u"con el coordinador central !", u"Atenci�n")
			
	def CreateMyMenuBar(self):
		self.SetMenuBar( MyMenuBarFunc() )
	
	def CreateMyToolBar(self):
		tb = self.CreateToolBar(wx.TB_HORIZONTAL|wx.NO_BORDER)
		MyToolBarFunc( tb )
	
	# WDR: handler implementations for GixFrame
	
	def OnCambiarPassword(self,event):
		dlg = CambioPassword(self, usuario = self.usuario)
		dlg.CenterOnScreen()
		dlg.ShowModal()
		
	def OnNuevaRequisicion(self,event):
		
		titulo = u"Requisici�n Producto Unico"
		dialog = GixRequisicion(self,-1, titulo, size = (450,400),style = wx.DEFAULT_DIALOG_STYLE, usuario = self.usuario)
		
		dialog.CenterOnScreen()
		dialog.Show()
		
	def OnCambioEstatus(self,event):
		titulo = u"Cambio de Estatus"
		wx.BeginBusyCursor()
		dialog = GixCambioEstatus(self,-1, titulo, size = (450,400),style = wx.DEFAULT_DIALOG_STYLE, capturarequisicion = True,
						capturamasiva = False, req_grupo = {}, usuario = self.usuario)
		
		dialog.CenterOnScreen()
		dialog.ShowModal()
		
		
	def OnMr(self,event):
		mr = GixMr(self, -1, 'Estatus de Requisiciones', size = (950,630), style = wx.DEFAULT_FRAME_STYLE, usuario = self.usuario)
		mr.usuario = self.usuario
		mr.CenterOnScreen()
		mr.Show()
	
	def OnArbol(self,event):
		
		id = event.GetId()
		titulo = u"Explorador Empresas/Desarrollos/Etapas/Inmuebles"
		dialog = GixArbol( self, -1, titulo, size = (700,600), style = wx.DEFAULT_DIALOG_STYLE)
		
		wx.BeginBusyCursor()
		
		dialog.FillTree()
		wx.EndBusyCursor()
		dialog.CentreOnScreen()
		dialog.ShowModal()
		dialog.Destroy()
		
	def OnCatalogoCuentasContabilidad(self, event):
		
		id = event.GetId()
		titulo = u"Cat�logo de Cuentas"
		dialog = GixCatalogoCuentasContabilidad( self, -1, titulo, size = (800,620), style = wx.DEFAULT_DIALOG_STYLE)
		
		wx.BeginBusyCursor()
		dialog.FillTree()
		wx.EndBusyCursor()

		dialog.CentreOnScreen()
		self.GetControl(ID_NOTEBOOKCATCTACONTAB1).Enable(False)
		dialog.Show()
		dialog.ValidarControles = True

	def OnCatalogoPartidasEgresos(self, event):
		
		id = event.GetId()
		titulo = u"Cat�logo de las Partidas Financieras"
		dialog = GixCatalogoPartidasEgresos(self, -1, titulo, size = (870,690), style = wx.DEFAULT_DIALOG_STYLE,
		                                    usuario = self.usuario)
		
		wx.BeginBusyCursor()
		dialog.FillTree()
		wx.EndBusyCursor()

		dialog.CentreOnScreen()
		self.GetControl(ID_NOTEBOOKCATPAREGRTAB1).Enable(False)
		dialog.Show()
		dialog.ValidarControles = True

	def OnImportaArchivoDbf(self, event):

		password = wx.GetPasswordFromUser(u"Digite Contrase�a", caption = u"Autorizaci�n",
												default_value = "", parent = None)

		if password:
			if password == PASSWORD:
				dlg = GixImportaArchivoDbf(self)
				dlg.CenterOnScreen()
				dlg.ShowModal()
			else:
				Mensajes().Error(self, u"� Contrase�a Inv�lida !", u"Acceso Denegado")
			
		return
	@logger
	def OnCatalogoProspectos(self, event):
		"""
		Prospectos
		"""
		self.OnCatalogo(event)
		
	@logger
	def OnCatalogoProspectosClientes(self, event):
		"""
		Prospectos Clientes - Vendedores
		"""
		self.OnCatalogo(event)
		
	@logger
	def OnCatalogoProspectosRecepcion(self, event):
		"""
		Prospectos Recepcion
		"""
		self.OnCatalogo(event)
		
	@logger
	def OnConteoMediosPublicitarios(self, event):
		"""
		Conteo de Medios Publicitarios en Recepcion
		"""
		self.OnCatalogo(event)
		
	@logger
	def OnCatalogoCheques(self, event):
		"""
		Solicitud de Cheques
		"""
		self.OnCatalogo(event)
		
	def OnCatalogo(self, event):
		"""
		Este metodo es para invocar cualquier ABC
		"""
		dOpciones = dict(ID_MENU_PUESTOS = (u"Cat�logo de Puestos",GixPuestos,630,420),
					ID_MENU_PERSONAS = (u"C�t�logo de Empleados", GixEmpleados,550,490),
					ID_MENU_CATEGORIAS = (u"Cat�logo de Categor�as", GixCategorias, 680,390),
					ID_MENU_PRODUCTOS = (u"Cat�logo de Productos", GixProductos, 650,440),
					ID_MENU_PROVEEDORES = (u"Cat�logo de Proveedores", GixProveedores, 620,550),
					ID_MENU_RECFINCAT_BANCOS = (u"Cat�logo de Bancos y Cuentas", GixBancos, 640,690),
					ID_MENU_ENTRADAS_INVENTARIO = (u"Entradas al Inventario", GixEntradasInventario, 800,490),
					ID_MENU_POLIZAS_CONTABILIDAD = (u"P�lizas Contables", GixPolizasContables, 582,620),
					ID_MENU_PREREQUISICIONES = (u"Requisiciones", GixPrerequisiciones, 800,490),
					ID_MENU_FACTORES_CONVERSION = (u"Factores de Conversi�n de Unidades", GixUnidadesFactores, 800,460),
					ID_MENU_EMPRESAS_CENTROS_COSTOS = (u"Empresas y Centros de Costos", GixEmpresasCentrosCostos, 650,510),
					ID_MENU_RECFIN_CAPTURAS_BANCOS = (u"Capturas Bancos", GixMovimientosBancos, 700,700),
					ID_MENU_RECFINING_CLASIFICACION = (u"Clasificaci�n de Ingresos", GixIngresosClasificacion, 750,700),
					ID_MENU_RECFINEGR_CHEQUES_SOLICITUD = (u"Solicitud de Cheques", GixEgrSolicitudCheques, 750,700),
					ID_MENU_VENTAS_PROSPECTOS = (u"Prospectos", GixVentasProspectosBueno, 800,700),
					ID_MENU_VENTAS_CANALIZAR_PROSPECTOS = (u"Canalizar Prospectos", GixVentasProspectosConsulta, 1000,720),
					ID_MENU_RECEPCION_PROSPECTOS = (u"Canalizar Prospectos", GixVentasProspectosConsulta, 1000,720),
					ID_MENU_RECEPCION_CONTEO_MEDIOS = (u"Conteo Medios Publicitarios", GixConteoMediosPublicitarios, 620,700),
					ID_MENU_CLIENTES_PROSPECTOS = (u"Prospectos", GixVentasProspectosBueno, 800,700),
					ID_MENU_RECFINEGR_EGRESOS_OTROS = (u"Otros Egresos", GixEgresosOtros, 750,700),
					ID_MENU_VENTAS_MEDIOS_PUBLICITARIOS = (u"Cat�logo de Medios Publicitarios", GixMediosPublicitarios, 770,420),
					ID_MENU_VENTAS_GUARDIAS = (u"Cat�logo de Guardias", GixGuardias, 900,640),
					ID_MENU_VENTAS_CANDIDATOS_GUARDIA = (u"Vendedores Candidatos a Cubrir Guardia", GixVentasCandidatos, 640, 700),
					ID_MENU_VENTAS_PRECIOS_SUSTENTABLES_OFERTAS = (u"Asignaci�n de Precio Sustentable a Ofertas de Compra", GixPrecioSustentableOferta, 800, 700),
					ID_MENU_VENTAS_PRECIOS_SUSTENTABLES_INMUEBLES = (u"Asignaci�n de Precio Sustentable a Inmuebles", GixPrecioSustentableInmueble, 1000, 700),
					ID_MENU_VENTAS_SOLICITUD_DEVOLUCION = (u"Solicitud de Devoluci�n de Saldo a Favor", GixEgrSolicitudCheques, 750,700),
					ID_MENU_RECFINCAT_FIRMANTES = (u"Cat�logo de Firmantes", GixFirmantes, 770,420),
					ID_MENU_VENTAS_VENDEDORES = (u"Cat�logo de Vendedores y Comisiones", GixVendedores, 870,720),
					ID_MENU_CTRLOBRASCAT_PROVEEDORES = (u"Cat�logo de Proveedores de Obra", GixProveedoresObra, 870,690),
					ID_MENU_CTRLOBRASCAT_CONCEPTOS = (u"Cat�logo de Conceptos de Estimaci�n para Facturaci�n", GixConceptosEstimacion, 770,420),
					ID_MENU_CTRLOBRAS_CONTRATOS = (u"Contratos de Obra y Convenios Modificatorios", GixContratosObrasConvenios, 870,720),
					ID_MENU_CTRLOBRAS_ESTIMACIONES = (u"Estimaciones / Facturaci�n", GixFacturasEstimaciones, 940,720),
					ID_MENU_CTRLOBRAS_APLICACION_PAGOS = (u"Aplicaci�n de Pagos a Estimaciones / Facturas", GixAplicacionPagoEstimacion, 940,610),
					ID_MENU_VENTAS_PRECIOS_SUSTENTABLES_PRECIOS = (u"Precios Sustentables para Ofertas de Compra", GixPreciosSustentables, 770, 450),
					ID_MENU_RECFINARCADIA_RECIBOS_PAGO_PINARES = (u"Arcadia (Pinares Tapalpa) - Aplicaci�n de Pagos y Generaci�n de Recibos", GixRecibosPagoPinaresFunc1, 1000,650),
					ID_MENU_PRESUP_ANALISISCOSTOS = (u"An�lisis de Costos - Vivienda Economica", GixPresupAnalisisCostos, 940, 655),
					ID_MENU_VENTAS_RECIBOS_DE_PAGO = (u"Pagos de Clientes", GixPagosDeClientesFunc1, 770,420),
					ID_MENU_RECFINARCADIA_TABLAS_AMORTIZACION_PINARES = (u"Tablas de Pagos/Amortizaci�n, Contratos y Generaci�n de Cuentas", GixTablasAmortizacionFunc1, 970,700),
					ID_MENU_VENTAS_LISTA_DE_PRECIOS = (u"Lista de Precios", GixPreciosEtapaFunc1, 770,630),
					ID_MENU_VENTAS_OFERTAS_DE_COMPRA = (u"Ofertas de Compra", GixOfertasDeCompraFunc1, 630,580),
		                        ID_MENU_VENTAS_REPORTE_OFERTAS_ASIGNACIONES = (u"Reporte de Ofertas de Compra y Asignaci�n de Inmuebles", GixReporteOfertasAsignacionesFunc1, 970, 700),
		                        ID_MENU_VENTAS_ASIGNACION_PRECIOS_INMUEBLES = (u"Asignaci�n de Precios a Inmuebles", GixAsignacionPreciosInmueblesFunc1, 800, 700),
					ID_MENU_RECFINARCADIA_ESTADO_CUENTA_PINARES = (u"Arcadia (Pinares Tapalpa) - Estados de Cuenta", GixEstadoCuentaPinaresFunc1, 995,670),
					ID_MENU_VENTAS_CLIENTES = (u"Clientes", GixClientesVentasFunc1, 610,650),
					ID_MENU_RECFINARCADIA_VENDEDORES_PINARES = (u"Arcadia (Pinares Tapalpa) - Vendedores", GixVendedoresVentasPinaresFunc1, 610,650),
					ID_MENU_RECFINARCADIA_CLIENTES_PINARES = (u"Arcadia (Pinares Tapalpa) - Clientes", GixClientesVentasPinaresFunc1, 610,650),
		                        ID_MENU_RECFINARCADIA_INSTRUCCION_ESCRITURA_PINARES = (u"Impresi�n de Instrucci�n de Escritura", GixInstruccionEscrituraFunc1, 810,650))
		
		claseusuario = (GixPrerequisiciones, GixPolizasContables, GixMovimientosBancos, GixBancos, GixGuardias,
				GixEgrSolicitudCheques, GixIngresosClasificacion, GixVentasProspectosBueno, GixEgresosOtros,
				GixFirmantes, GixVendedores, GixProveedoresObra, GixConceptosEstimacion,
				GixContratosObrasConvenios, GixFacturasEstimaciones, GixPreciosSustentables,
				GixPrecioSustentableOferta, GixPrecioSustentableInmueble, GixAplicacionPagoEstimacion,
				GixPresupAnalisisCostos, GixVentasProspectosConsulta, GixRecibosPagoPinaresFunc1,
		                GixConteoMediosPublicitarios, GixPagosDeClientesFunc1, GixPreciosEtapaFunc1,
		                GixOfertasDeCompraFunc1, GixTablasAmortizacionFunc1, GixEstadoCuentaPinaresFunc1)
		dAux = {}
		for m in dOpciones.iterkeys():
			dAux[eval(m)] = m
		id = event.GetId()
		titulo, clase, ancho, alto = dOpciones[dAux[id]]
		if clase in claseusuario:
			if titulo == u"Solicitud de Devoluci�n de Saldo a Favor":
				frame = clase(self, -1, titulo, wx.Point(20,20), wx.Size(ancho,alto), usuario = self.usuario,
							  devolucionsaldo = True)
			else:
				frame = clase(self, -1, titulo, wx.Point(20,20), wx.Size(ancho,alto), usuario = self.usuario)
		elif ancho and alto:
			frame = clase(self, -1, titulo, wx.Point(20,20), wx.Size(ancho,alto))
		else:
			frame = clase(self, -1, titulo, wx.Point(20,20))
			
		frame.Centre(wx.BOTH)

		if titulo == u"P�lizas Contables":
			global SUSCRIPTOR
			if SUSCRIPTOR:
				frame.LigarCatalogoCuentas()
				frame.Show(True)
			elif Mensajes().YesNo(self, u"� Desea ligarse al cat�logo de cuentas ?", u"Iniciando P�lizas Contables"):
				frame.LigarCatalogoCuentas()
				frame.Show(True)
				frame.SetFocus()
			else:
				frame.Show(True)
				frame.SetFocus()
		else:
			frame.Show(True)
				
	def OnAbout(self, event):
		try:
			from matplotlib import __version__ as version_matplotlib
		except:
			version_matplotlib = "inexistente"
			
		rpycversion = "Uninstalled"
			
		sAbout = """
GIX version %s
Desarrollado por Smartics, S.A. de C.V.
para Grupo Iclar.
		
Python   version %s
		
WxPython version %s
	
pyXLWriter version %s
		
reportlab version %s
		
matplotlib version %s
		
rpyc version %s
		
log 
		
%s
		
		""" % ( GIXVERSION, str(sys.version_info[0:3]), str(wx.VERSION[0:4]),
			xl.__version__, reportlab.Version,
			version_matplotlib, rpycversion, logcontents())
		dlg = wx.MessageDialog(self, sAbout,
				"Acerca de GIX", wx.OK|wx.ICON_INFORMATION )
		#dialog.CentreOnParent()
		#dialog.ShowModal()
		#dialog.Destroy()
		#dlg = ScrolledMessageDialog(self, sAbout, "Acerca de...")
		dlg.ShowModal()
		dlg.Destroy()
		self.VistaPreliminar(sAbout)

	def VistaPreliminar(self, text):

		
		pdata = wx.PrintData()
		pdata.SetPaperId(wx.PAPER_LETTER)
	
		pdata.SetOrientation(wx.PORTRAIT)
		
		margins = (wx.Point(15,15), wx.Point(15,15))
		
		xdata = wx.PrintDialogData(pdata)
		p1 = TextDocPrintout( text, "title", margins)   
		p2 = None 
		preview = wx.PrintPreview(p1, p2, xdata)
		if preview.Ok():
			frame = wx.PreviewFrame(preview, self, "Vista Preliminar", pos=self.GetPosition(), size=self.GetSize())
			frame.Initialize()
			frame.Show()

		
	def OnRoles(self,event):
		
		meta = (( 14, "Id Rol") , (100, u"Descripci�n"))
		
		query = """
		select idrol, descripcion from gixroles order by idrol
		"""
		titulo = u"Despliegue de Roles" 
		tabla = "gixroles"
		frame = GixFrameCatalogo(self, -1 , titulo , wx.Point(20,20),wx.Size(700,600), 
					wx.DEFAULT_FRAME_STYLE  ,  None, None, None, tabla, meta, query, gridsize = [300,200])
		
		frame.Centre(wx.BOTH)
		frame.Show(True)
	
	#@logger
	def OnMovimientosInventario(self, event):
		
		dlg = GixMovimientosInventario(self)
		dlg.CenterOnScreen()
		dlg.ShowModal()
	
	def OnPolizasContables(self, event):
		
		titulo = u"P�lizas Contables"
		dlg = GixPolizasContables(self, -1, titulo, size = (800,620), style = wx.DEFAULT_DIALOG_STYLE)
		
		dlg.CenterOnScreen()
		dlg.ShowModal()
	
		return
	
		#GixSuscriptor()   Para mostrar como el suscriptor cacha el n�mero de cuenta
		
	def OnEnConstruccion(self, event):

		#GixCalendar(self)
		dlg = GixEnConstruccion(self)
		dlg.CenterOnScreen()
		dlg.ShowModal()
		
	def OnNoDisponible(self, event):
		
		dlg = GixNoDisponible(self)
		dlg.CenterOnScreen()
		dlg.ShowModal()
		
	def OnUnidades(self,event):
		
		meta = (( 100, "Id Unidad"),)
		
		query = """
		select idunidad 
		from gixunidades order by idunidad
		"""
		titulo = u"Despliegue de Unidades" 
		tabla = "gixunidades"
		frame = GixFrameCatalogo(self, -1 , titulo , wx.Point(20,20),wx.Size(700,600), 
					wx.DEFAULT_FRAME_STYLE  ,  None, None, None, tabla, meta, query, gridsize = [200,250])
		
		frame.Centre(wx.BOTH)
		frame.Show(True)
		
	def OnTiposCuentaContabilidad(self,event):
		
		meta = (( 300, "Tipo de Cuenta"),)
		
		query = """
		select descripcion 
		from cont_CuentaTipo order by descripcion
		"""
		titulo = u"Despliegue de Tipos de Cuenta de Contabilidad" 
		tabla = "cont_CuentaTipo"
		frame = GixFrameCatalogo(self, -1 , titulo , wx.Point(20,20),wx.Size(700,600), 
					wx.DEFAULT_FRAME_STYLE  ,  None, None, None, tabla, meta, query, gridsize = [350,350])
		
		frame.Centre(wx.BOTH)
		frame.Show(True)
		
	def OnUsuario(self,event):
		
		if Mensajes().YesNo(self, u"Desea regenerar MD5s ?", u"Atenci�n" ):
			self.RegeneraMD5()
		meta = (( 120, "Usuario") , (200, u"Nombre"), (120,u"Contrase�a"))
		
		query = """
		select usuario, nombre, password
		from usuarios order by usuario
		"""
		titulo = u"Despliegue de Usuarios " 
		tabla = "usuarios"
		frame = GixFrameCatalogo(self, -1 , titulo , wx.Point(20,20),wx.Size(800,600), 
					wx.DEFAULT_FRAME_STYLE  ,  None, None, None, tabla, meta, query, gridsize = [450,500])
		
		frame.Centre(wx.BOTH)
		frame.Show(True)
		
	def OnEstatus(self,event):
		
		meta = (( 14, "Id Estatus") , (100, u"Descripci�n"), (300,u"Descripci�n Ampliada"))
		
		query = """
		select idestatus, descripcion, descripcion_ampliada
		from gixestatus order by idestatus
		"""
		titulo = u"Despliegue de Estatus " 
		tabla = "gixestatus"
		frame = GixFrameCatalogo(self, -1 , titulo , wx.Point(20,20),wx.Size(800,600), 
					wx.DEFAULT_FRAME_STYLE  ,  None, None, None, tabla, meta, query, gridsize = [650,350])
		
		frame.Centre(wx.BOTH)
		frame.Show(True)

	#def OnEstatus(self,event): # Consultas
		
		#meta = ((15, "Manzana") , (15, u"Lote"), (14,u"Tipo"), (100,u"Precio"))
		
		#query = """
		#select i.iden2, i.iden1, e.tipo, e.precio
		#from gixpreciosinmueble p
		#join inmueble i on i.codigo = p.fk_inmueble
		#join gixpreciosetapa e on e.id = p.fk_precio
		#where e.tipo = 'B' order by iden2, iden1
		#"""
		#titulo = u"Prototipo 'B' " 
		#tabla = "gixpreciosinmueble"
		#frame = GixFrameCatalogo(self, -1 , titulo , wx.Point(20,20),wx.Size(800,600), 
					#wx.DEFAULT_FRAME_STYLE  ,  None, None, None, tabla, meta, query, gridsize = [650,350])
		
		#frame.Centre(wx.BOTH)
		#frame.Show(True)

	def OnInventarioCompras(self,event):
		
		opciones = [u"Todas",  u"Todas Faltantes", u"Determinada Categor�a", 
					u"Determinada Categor�a Faltantes                                                "]
		opcion = wx.GetSingleChoiceIndex("Elija", u"Requisiciones vs. Existencias", opciones)
		
		if opcion not in (0,1,2,3):
			return
		
		additionalWhere = ""
		condicion = ""
		
		if opcion == 1:
			condicion = " having p.existencia - sum(v.tot_productounidad / f.factorconversion ) < 0"
			
		elif opcion in (2,3):
			categoria = ""
			
			lCatNombres = []
			lCats = []
			sql = """
			select idcategoria, idcategoria + ' - ' + descripcion_ampliada from gixcategorias
			where idcategoria in ( select distinct categoria from gixproductos)
			order by descripcion_ampliada
			"""
			cursor = r_cn.cursor()
			cursor.execute( sql )
			while True:
				row = fetchone(cursor)
				if row is None:
					break
				lCats.append(str(row[0]))
				lCatNombres.append(self.GetStringFromField(row[1]))
				
			cursor.close()
			if len(lCats) > 0:
				cual = wx.GetSingleChoiceIndex( "Elija", u"Categor�as", lCatNombres)
				if cual > -1:
					categoria = lCats[cual]
					additionalWhere = " where p.categoria = '%s' " % categoria
					
			if opcion == 3:
				condicion = " having p.existencia - sum(v.tot_productounidad / f.factorconversion ) < 0"
					
		
		meta = ((70, u"Existencia", wx.ALIGN_RIGHT, "amount_and_cents_with_commas(%s)"), 
			(70, u"Unidad"),
			( 70, u"Requerido", wx.ALIGN_RIGHT, "amount_and_cents_with_commas(%s)"),
			( 70, u"Diferencia", wx.ALIGN_RIGHT, "amount_and_cents_with_commas(%s)"),
			(120, u"Producto"),
			(250, u"Descripci�n"),
			(100, u"Categor�a"),
			(100,u"En letras", wx.ALIGN_LEFT, "aletras(%s)"))
		
		
		query = """
		select p.existencia, p.unidad, sum(v.tot_productounidad / f.factorconversion ),
		p.existencia - sum(v.tot_productounidad / f.factorconversion ) as diferencia,
		p.id_producto, p.descripcion, c.descripcion, max(p.existencia)
		from gix_vw_totales_producto_unidad v 
		join gixproductos p on v.id_producto = p.id_producto
		join gixunidadesfactores f on v.id_producto = f.id_producto and v.unidad = f.unidadrequisicion
		join gixcategorias c on p.categoria = c.idcategoria
		%s
		group by p.id_producto, p.descripcion, c.descripcion, p.unidad, p.existencia
		%s
		order by 7, 5;
		select count(*) from (select p.existencia, p.unidad, sum(v.tot_productounidad / f.factorconversion) as valor, 
		p.existencia - sum(v.tot_productounidad / f.factorconversion ) as diferencia,
		p.id_producto, p.descripcion as descrip_prod, c.descripcion as descrip_cat
		from gix_vw_totales_producto_unidad v 
		join gixproductos p on v.id_producto = p.id_producto
		join gixunidadesfactores f on v.id_producto = f.id_producto and v.unidad = f.unidadrequisicion
		join gixcategorias c on p.categoria = c.idcategoria
		%s
		group by p.id_producto, p.descripcion, c.descripcion, p.unidad, p.existencia %s)  as conteo
	
		""" % (additionalWhere, condicion, additionalWhere, condicion)
		titulo = u"Comparativo de Requisiciones vs. Existencias" 
		sqlx = query.split(";")[0].replace("\n", " ").replace("\t","")
		tabla = "gix_vw_totales_producto_unidad"
		frame = GixFrameCatalogo(self, -1 , titulo , wx.Point(20,20),wx.Size(800,600), 
					wx.DEFAULT_FRAME_STYLE  ,  None, None, None, tabla, meta, query, gridsize = [800,500])
		
		frame.Centre(wx.BOTH)
		frame.Show(True)
		
	def GetStringFromField(self,field):
		try:
			fld = field.decode("iso8859-1")
		except:
			fld = ""
		return fld
		
	def OnSugerencias(self,event):
		
		meta = ((90,u"Sugerencia") , (80, u"Categor�a"), (150,u"Producto"), (90,u"Requerido"), (70,u"Cantidad"),
			(80,u"Unidad"), (700,u"Comentario"))
		
		query = """
		select convert(varchar(10),fecha_alta,111), categoria, producto, convert(varchar(10),fecha_requerida,111), cantidad, unidad, comentario
		from gixsugerencias order by idsugerencia desc
		"""
		titulo = u"Despliegue de Sugerencias de Requisiciones" 
		tabla = "gixsugerencias"
		frame = GixFrameCatalogo(self, -1 , titulo , wx.Point(20,20),wx.Size(800,600), 
					wx.DEFAULT_FRAME_STYLE, None, None, None, tabla, meta, query, gridsize = [800,500])
		
		frame.Centre(wx.BOTH)
		frame.Show(True)
		
	def OnBalanzaComprobacion(self, event):
		dlg = GixBalanzaComprobacion(self, usuario = self.usuario)
		dlg.CenterOnScreen()
		dlg.ShowModal()
		
	def OnAuxiliarMovimientos(self, event):
		dlg = GixAuxiliarMovimientos(self, usuario = self.usuario)
		dlg.CenterOnScreen()
		dlg.ShowModal()
		
	def OnReporteRecibosElaborados(self, event):
		dlg = GixReporteRecibosElaborados(self, usuario = self.usuario)
		dlg.CenterOnScreen()
		dlg.ShowModal()
		
	def OnReporteRecibosPinares(self, event):
		dlg = GixReporteRecibosPinares(self, usuario = self.usuario)
		dlg.CenterOnScreen()
		dlg.ShowModal()
		
	def OnReporteHijosClientes(self, event):
		dlg = GixReporteHijosClientes(self, usuario = self.usuario)
		dlg.CenterOnScreen()
		dlg.ShowModal()
		
	def OnReporteFinancieroObra(self, event):
		#dlg = GixReporteFinancieroObra(self, usuario = self.usuario)
		#dlg.CenterOnScreen()
		#dlg.ShowModal()
		frame = GixReporteFinancieroObra(self, usuario = self.usuario)
		frame.Centre(wx.BOTH)
		frame.Show(True)
		
	def OnReporteEstimacionesFacturas(self, event):
		dlg = GixReporteEstimacionesFacturas(self, usuario = self.usuario)
		dlg.CenterOnScreen()
		dlg.ShowModal()
		
	def OnReporteEstimacionesPagos(self, event):
		dlg = GixReporteEstimacionesPagos(self, usuario = self.usuario)
		dlg.CenterOnScreen()
		dlg.ShowModal()
		
	def OnPresupAnalisisCostos(self, event):
		dlg = GixPresupAnalisisCostos(self, usuario = self.usuario)
		dlg.CenterOnScreen()
		dlg.ShowModal()
		
	def OnReporteGuardiasAsignadas(self, event):
		
		dlg = GixReporteGuardiasAsignadas(self, usuario = self.usuario)
		dlg.CenterOnScreen()
		dlg.ShowModal()
		
	def OnGraficaOfertasCompra(self, event):
		
		wx.BeginBusyCursor()
		try:
			import pylab
		except:
			pass
		
		sql = """
		select a.fk_etapa, d.descripcion, b.descripcion, count(*) from 
		ofertas_compra a join etapa b on a.fk_etapa = b.codigo join desarrollo d on b.fk_desarrollo = d.codigo
		group by a.fk_etapa, d.descripcion, b.descripcion order by 2,3
		"""
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		etapas = []
		for row in rows:
			etapas.append("%04d %s %s" % (row[0] ,self.GetStringFromField(row[1]) , self.GetStringFromField(row[2]) ) )
		wx.EndBusyCursor()
		#Mensajes().Info(self, mensaje, u"Atenci�n")
		sc_dialog = wx.SingleChoiceDialog(self, "Etapas consideradas", "Escoja", etapas, wx.CHOICEDLG_STYLE)
		if sc_dialog.ShowModal() == wx.ID_OK:
			seleccion = sc_dialog.GetStringSelection()
		else:
			return 
		

		meses = ( "Enero", "Febrero","Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto","Septiembre", "Octubre", "Noviembre", "Diciembre") 
		titulo = "Altas Especifique intervalo de Fechas "
		dialog = GixIntervaloFechasDialog(self,-1, titulo, size = (450,450),style = wx.DEFAULT_DIALOG_STYLE)
		dialog.ShowModal()
		estatusdialogo_correcto = dialog.intervalocorrecto
		try:
			dia_ini = int(dialog.dia_ini)
			dia_fin = int(dialog.dia_fin)
			mes_ini = int(dialog.mes_ini)
			mes_fin = int(dialog.mes_fin)
			aho_ini = int(dialog.aho_ini)
			aho_fin = int(dialog.aho_fin)
		except:
			estatusdialogo_correcto = False
		
		dialog.Destroy()
		if not estatusdialogo_correcto:
			Mensajes().Info( self, u"Fecha err�nea", u"Atenci�n")
			return
		
		
		fechainicial = "%s/%02d/%02d" % ( aho_ini, mes_ini, dia_ini )
		fechafinal  = "%s/%02d/%02d" % ( aho_fin, mes_fin, dia_fin )
		etapa = str(int(seleccion[:4]))
		wx.BeginBusyCursor()
		sql = """
		select 'A',count(*) from ofertas_compra where convert(varchar(10),fecha_oferta,111) between '%s' and '%s'
			and fk_etapa = %s and cancelada = 0 
			union
			select 'C',count(*) from ofertas_compra where convert(varchar(10),fecha_cancelacion,111) between '%s' and '%s'
			and fk_etapa = %s and cancelada = -1 
			union 
			select 'G',count(*) from ofertas_compra where convert(varchar(10),fecha_oferta,111) between '%s' and '%s'
			and fk_etapa = %s 
			union
			select 'D',count(*) from documento d join cuenta c on d.fk_cuenta = c.codigo
			where c.inmueble_anterior > 0 and convert(varchar(10),d.fechadevencimiento,111) between '%s' and '%s'
			and d.fechadevencimiento < getdate() and d.saldo > 0 and d.fk_tipo = 15 and c.fk_etapa = %s
			union 
			select 'S', count(*) from ofertas_compra where convert(varchar(10),fecha_oferta,111) between '%s' and '%s'
			and fk_etapa = %s and cancelada = 0 and cuenta in (select distinct codigo from cuenta where fk_inmueble <> 0)
			order by 1,2
			""" % (fechainicial, fechafinal, etapa, fechainicial, 
				fechafinal, etapa,fechainicial, fechafinal, etapa,
				fechainicial, fechafinal, etapa, fechainicial, fechafinal, etapa) 
		cu = r_cn.cursor()
		
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		
		wx.EndBusyCursor()
		#for row in rows:
		#       Mensajes().Info(self,"%s %s" % (row[0],row[1]),u"Atenci�n")
		#Mensajes().Info(self,sql,"Oops")
		
		#N = 5
		#menMeans = (20, 35, 30, 35, 27)
		#menStd =   (2, 3, 4, 1, 2)
		
		#ind = arange(N)  # the x locations for the groups
		#width = 0.35       # the width of the bars
		#p1 = bar(ind, menMeans, width, color='r', yerr=menStd)
		
		#womenMeans = (25, 32, 34, 20, 25)
		#womenStd =   (3, 5, 2, 3, 3)
		#p2 = bar(ind+width, womenMeans, width, color='y', yerr=womenStd)
		
		#ylabel('Scores')
		#title('Scores by group and gender')
		#xticks(ind+width, ('G1', 'G2', 'G3', 'G4', 'G5') )
		
		#legend( (p1[0], p2[0]), ('Men', 'Women') )
		
		#savefig('barchart_demo')
		N = 5
		width = 0.40
		ind = pylab.arange(N)
		p1 = pylab.bar(ind , tuple( row[1] for row in rows), width, color='#E77918')
		#ylabel('Ocurrencias')
		pylab.title('Ofertas de Compra')
		#legend((p1(0)),('Ofertas'))
		Barras = ('Activas',  'Canceladas','Desasignadas', 'Generadas', 'Asignadas')
		
		pylab.xticks(ind, Barras)
		pylab.show()
		
		
	
	def OnQuit(self, event):
		self.Close(True)
		#self.Destroy()
	
	def OnCloseWindow(self, event):
		if FORCEWEBSERVER:
			self.webserver.stop()
			
		#self.Close(True)
		self.Destroy()
		#self.Close(True)
			
	def OnEmpresas(self, event):
		
		cu = r_cn.cursor()
		cu.execute("select codigo, razonsocial from empresa order by razonsocial")
		rows = fetchall(cu)
		cu.close()
		
		mensaje = ""
		
		for row in rows:
			mensaje += self.GetStringFromField(row[1]) + " - " + str(row[0]) + "\n"
			
		Mensajes().Info(self, mensaje, u"Empresas")
		
		return
		
	def ValidaUsuario(self, user, password):
		
		sql = "SELECT nombre FROM Usuarios WHERE Usuario = '" + str(user)
		sql = str(sql) + "' AND md5 = '" + str(self.Hash(password))
		sql = str(sql) + "'"
		nombre = ""
		cursor = r_cn.cursor()
		cursor.execute( str(sql) )
		
		row = fetchone(cursor)
		if row:
			nombre = self.GetStringFromField(row[0])
		cursor.close()
		
		if nombre == "":
			
			return False
		else:
			if self.ObtenEmpleado(user) == "":
				Mensajes().Warn(self,u"El usuario\n%s\nnot tiene empleado\nasociado" % user, u"Atenci�n")
				return False
			self.SetStatusText(u"Bienvenido(a) ( %s ), %s" % (user, nombre))
			return True
		
	def ObtenEmpleado(self, usuario):
		sql = "select idempleado from gixempleados where usuario = '%s'" % (usuario)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row is None:
			return ""
		return str(row[0])
		
	def DerechosUsuario(self):

		obj = Parametro(usuario = self.usuario)

		if not DICEMPRESAS:
			sql = """
			select EmpresaID, RazonSocial from cont_Empresas where activarecfin = 'S'
			""" 
			cu = r_cn.cursor()
			cu.execute(str(sql))
			rows = fetchall(cu)
			for row in rows:
				try:
					if obj.empresadetrabajo == str(row[0]):
						estatus = True
					else:   
						estatus = False
				except:
					estatus = True
						
				keyid = wx.NewId()
				DICEMPRESAS[keyid] = [str(row[0]), row[1], estatus]
				self.Bind(wx.EVT_MENU, self.OnElegirEmpresa, id = keyid)
			
		dicDerechos = {}
		sql = """
		select distinct menu from gixderechos
		""" 
		cu = r_cn.cursor()
		cu.execute(str(sql))
		rows = fetchall(cu)
		for row in rows:
			dicDerechos[row[0]] = False

		sql = """
		select menu from gixderechos where usuario = '%s'
		""" % self.usuario
		
		cu.execute(str(sql))
		rows = fetchall(cu)
		for row in rows:
			dicDerechos[row[0]] = True
		cu.close()
		
		for idmenu in dicDerechos.keys():
			self.MenuSetter(eval(idmenu), dicDerechos[idmenu], DICEMPRESAS, self.usuario)
			
	def OnElegirEmpresa(self, event):

		idempresa = event.GetId()
		obj = Parametro(usuario = self.usuario)
		
		#Mensajes().Info(self, u"Id. %s\tEmpresa No. %s\n\n%s"
						#% (idempresa, DICEMPRESAS[idempresa][0], DICEMPRESAS[idempresa][1]), u"Aviso")
		
		obj.empresadetrabajo = DICEMPRESAS[idempresa][0]
		
		return
	
	def RemoverObjetos(self, mb, removerobjetos):
		for x in range(0, len(removerobjetos)):
			mcount = mb.GetMenuCount()
			for m in range(0, mcount):
				nombre = mb.GetLabelTop(m)
				if nombre in removerobjetos:
					mb.Remove(m)
					break
		
	def ReLogin(self, event):
		mb = self.GetMenuBar()
		login_activo = mb.IsEnabled( ID_MENU_LOGIN )
		logout_activo = mb.IsEnabled( ID_MENU_LOGOUT )
		
		# Lo siguiente es para remover objetos del menu-bar en forma dinamica.
		removerobjetos = ['Contabilidad', 'Graficas','Utileria', 'Papelera']
		self.RemoverObjetos(mb, removerobjetos)
				
		#print logout_activo
		if g_cl_user and not logout_activo and  login_activo: 
			if self.ValidaUsuario(g_cl_user,g_cl_password):
				self.MenuSetter( ID_MENU_LOGIN, False)
				self.MenuSetter( ID_MENU_LOGOUT, True)
				self.AllMenues(True)
				self.usuario = g_cl_user
				self.DerechosUsuario()
				return
			
		titulo = "Ingreso a GIX"
		if SMARTICS:
			dialog = LoginDialog(self,-1, titulo, size = (450,500), style = wx.DEFAULT_DIALOG_STYLE)
		else:
			dialog = LoginDialog2(self,-1, titulo, size = (450,500), style = wx.DEFAULT_DIALOG_STYLE)
		dialog.FillUsuarios()
		dialog.CenterOnScreen()
		dialog.ShowModal()
		try:
			if dialog.AmILogged():
				if dialog.vendedor > 0:
					removerobjetos = ['Archivo', 'Operador', 'Inventarios', 'Requisiciones', 'Ventas',
					                  'Recursos Financieros', 'Control de Obras', u'Estad�sticas', 'Empresas',
					                  u'Recepci�n']
					self.RemoverObjetos(mb, removerobjetos)
					self.MenuSetter(ID_MENU_CLIENTES_PROSPECTOS, True)
					self.MenuSetter(ID_MENU_CLIENTES_SALIR, True)
					self.AllMenues(True)
					self.usuario = dialog.usuario
				elif FORCEQUERYONLY:
					removerobjetos = ['Archivo', 'Operador', 'Inventarios', 'Requisiciones', 'Ventas',
					                  'Recursos Financieros', 'Control de Obras', u'Estad�sticas', 'Empresas',
					                  'Clientes']
					self.RemoverObjetos(mb, removerobjetos)
					self.MenuSetter(ID_MENU_RECEPCION_PROSPECTOS, True)
					self.MenuSetter(ID_MENU_RECEPCION_CONTEO_MEDIOS, True)
					self.MenuSetter(ID_MENU_RECEPCION_SALIR, True)
					self.AllMenues(True)
					self.usuario = dialog.usuario
				else:
					removerobjetos = ['Clientes', u'Recepci�n']
					self.RemoverObjetos(mb, removerobjetos)
					self.MenuSetter( ID_MENU_LOGIN, False)
					self.MenuSetter( ID_MENU_LOGOUT, True)
					self.AllMenues(True)
					self.usuario = dialog.usuario
					self.DerechosUsuario()
				asignaUser(usr = self.usuario)
				dialog.Destroy()
			else:
				self.Destroy()
		except:
			self.Destroy()
		
		return
	
	def ObtenEmail(self, user):
		sql = "select email from gixempleados where usuario = '%s'" % user
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row is None:
			email = ""
		else:
			email = str(row[0])
		return email
			
	def OnLogout(self, event):
		global g_cl_user
		self.MenuSetter( ID_MENU_LOGIN, True)
		self.MenuSetter( ID_MENU_LOGOUT, False)
		self.AllMenues(False)
		self.usuario = None
		self.SetStatusText("")
		g_cl_user = None
		return
		
	def OnC2P(self,event):
		dlg = wx.TextEntryDialog( self, u"Teclee cantidad de prueba", u"Cantidad a Palabras","1")
		dlg.ShowModal()
		valor = dlg.GetValue()
		Mensajes().Info(self, "%s -- > %s" % (valor, CantidadAPalabras(valor).texto()),u"Conversi�n")
		
	def Hash(self, pwd):
		#m = md5.new()
		#m.update(pwd)
		return md5(pwd).hexdigest().upper()
	
	def RegeneraMD5(self):
		sql = """
		select usuario, password from usuarios
		""" 
		cu = r_cn.cursor()
		cu.execute(str(sql))
		for row in cu.fetchall():
			usuario, password = row
			sql = """
			update usuarios set md5 = '%s' where usuario = '%s'
			""" % (self.Hash(password), usuario)
			self.QueryUpdateRecord(sql)
		cu.close()
		return
	
	def QueryUpdateRecord( self, sql ):
		""" He llegado a la conclusion de que este metodo se puede usar
		para hacer realmente el INSERT o el UPDATE en la base de dato
		recibe en sql el query ya formado y aqui es donde realmente es grabado el dato.
		Puede provenir de una llamado por parte de AddRecord o UpdateRecord
		"""
		try:
		
			sqlencoded = sql.encode("iso8859-1")
			#sqlencoded = sql

		except:

			Mensajes().Info(self,"Problemas al encoding del query",u"Atenci�n")
				
			return False
		
		try:
			
			cursor = r_cn.cursor()
			cursor.execute( sqlencoded )
			cursor.close()
		
			r_cn.commit()
			
			return True
			
		except:
			
			r_cn.rollback()
			Mensajes().Info(self,"Problemas con \n%s" % sql, u"Atenci�n")
			#Mensajes().Info(self,u"� Est� intentando crear un registro duplicado !", u"Atenci�n")
			return False
		

#----------------------------------------------------------------------------


class GixFrameFromExcel:
	pass
    
class GixApp(wx.App):
		
        def OnInit(self):
		global locale
		locale = wx.Locale(wx.LANGUAGE_SPANISH)
		self.name = "gix-%s" % wx.GetUserId()
		self.instance = wx.SingleInstanceChecker( self.name )
		if self.instance.IsAnotherRunning():
			Mensajes().Info( None, u"Ya est� corriendo Gix, no puede correrlo dos veces desde la misma m�quina al mismo tiempo", u"Atenci�n")
			return False		
		wx.InitAllImageHandlers()
		
		
		xmeses = ( "Enero", "Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre","Diciembre" )
		meses = []
		for m in xmeses:
			meses.append(m[:3])
			
		dias = ( "Lun", "Mar", "Mie","Jue","Vie","Sab","Dom")
		for dia in range(0,7):
			wx.lib.calendar.AbrWeekday[dia] = dias [dia ]
		for mes in range(1,13):
			wx.lib.calendar.Month[mes] = meses[mes - 1]

		cu = r_cn.cursor()
		cu.execute("select count(*) from usuarios")
		cuantos = fetchone(cu)[0]
		cu.close()
		titpruebas = ""
		if g_si_pruebas:
			titpruebas = "(%s)  " % g_si_pruebas
			
		#w, h = 870, 670
		w, h = 810, 670
		if wx.Platform == '__WXMSW__':
			#w = 760
			w = 740

		#frame = GixFrame( None, -1, u"(GIX versi�n %s) Gesti�n Inmobiliaria de Grupo Iclar [%s] [%s] %s" \
						  #% (GIXVERSION, cuantos, auto_ansi2oem, g_si_pruebas), wx.DefaultPosition,
						  #wx.Size(800,600), wx.DEFAULT_FRAME_STYLE )
		frame = GixFrame( None, -1, u"Gesti�n Inmobiliaria Extendida  %s-  GIX Versi�n %s" \
						  % (titpruebas, GIXVERSION), wx.DefaultPosition,
						  wx.Size(w,h), wx.DEFAULT_FRAME_STYLE )
		
		frame.Centre()
		frame.Show(True)
		self.SetExitOnFrameDelete(True)
		#try:
			#wx.lib.inspection.InspectionTool().Show()
		#except:
			#pass
		
		return True
	
class GixAppError(wx.App):
        def OnInit(self):
		Mensajes().Warn(None,u"No pudo establecerse conexi�n con el coordinador central.\nEl programa por ende termina aqui.\n%s %s" % (g_cl_user or "" , g_cl_password or ""), u"Atenci�n")
		return True

#----------------------------------------------------------------------------

class GixCambioEstatus(wx.Dialog, GixBase):
	
	estatus = None
	recibidaysatisfecho = '14'
	mes = {"Ene": 1,"Feb": 2,"Mar": 3,"Abr":4,"May":5,"Jun":6,"Jul":7,"Ago":8,"Sep":9,"Oct":10,"Nov":11,"Dic":12}
	
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize,
		style = wx.DEFAULT_DIALOG_STYLE, capturarequisicion = False, usuario = "", valoridrequisicion = "", capturamasiva = False, req_grupo = {} ):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		
		# WDR: dialog function LoginFunc for SimNoraLoginDialog
		
		CambioEstatusFunc( self, True )
		self.usuario = usuario
		self.requisicion = self.GetControl(ID_TEXTCTRLCAMBIOESTATUSREQUISICION)
		self.requisicion.Enable(capturarequisicion)
		self.requisicion.SetValidator(MyValidator(DIGIT_ONLY))
		
		self.capturamasiva = capturamasiva
		self.req_grupo = req_grupo
		
		self.okButton = self.GetControl(ID_BUTTONCAMBIOESTATUSOK)
		
		self.GetControl(ID_TEXTCTRLCAMBIOESTATUSCOMENTARIO).SetValidator(MyValidator(LENGTH_FLAG, longitud = 200))
		
		self.parent = parent
		
		# WDR: handler declarations for SimNoraLoginDialog
	
		wx.EVT_CLOSE(self, self.OnClose)
		wx.EVT_BUTTON(self, ID_BUTTONCAMBIOESTATUSOK, self.OnOk)
		self.Bind(wx.EVT_COMBOBOX, self.OnComboSelection)
		self.Bind(wx.EVT_TEXT, self.OnObtenRoles, self.requisicion )
		self.Bind(wx.EVT_TEXT, self.OnComentarioFechaEntrega, id = ID_TEXTCTRLCAMBIOESTATUSCOMENTARIO)
		self.Bind(wx.EVT_TEXT, self.OnComentarioFechaEntrega, id = ID_TEXTCTRLCAMBIOESTATUSFECHAENTREGA)
		self.Bind( wx.EVT_BUTTON, self.OnFechaButton, id = ID_BITMAPBUTTONCAMBIOESTATUSFECHAENTREGA)
		self.FillEstatus()
		self.Empleado = self.ObtenEmpleado(usuario)
		
		if valoridrequisicion:
			idreq = self.GetControl(ID_TEXTCTRLCAMBIOESTATUSREQUISICION)
			#print type(valoridrequisicion)
			vreq = valoridrequisicion.split('.')[0] # hack porque en mac os x este wx.Textctrl trae un punto y un cero 
			idreq.SetValue( vreq )
			#self.ObtenRoles()              
		
		wx.EndBusyCursor()
		
	def OnClose(self, event):
		self.EndModal(1)
		self.Destroy()

	def OnOk(self, event):
		
		combo = self.GetControl(ID_COMBOCAMBIOESTATUSESTATUS)
		pos = combo.GetSelection()
		if pos >= 0:
			estatus = combo.GetClientData(pos)
			descripcionEstatus = combo.GetString(pos)
		else:
			Mensajes().Info(self, u"Elija un estatus primero", u"Atenci�n")
			return
		
		if estatus in self.estatusAutorizador:
			p_autorizador = wx.GetPasswordFromUser(u"Digite Contrase�a", caption = u"Autorizaci�n", default_value = "", parent = None)
			if self.autorizador_p != p_autorizador:
				Mensajes().Info(self, u"Contrase�a Invalida", u"Atenci�n")
				self.EndModal(1)
				self.Destroy()
				return
			
		if estatus in self.estatusSurtidor:
			p_surtidor = wx.GetPasswordFromUser(u"Digite Contrase�a", caption = u"Autorizaci�n", default_value = "", parent = None)
			if self.surtidor_p_p != p_surtidor:
				Mensajes().Info(self, u"Contrase�a Invalida", u"Atenci�n")
				self.EndModal(1)
				self.Destroy()
				return
			
		# Si el cambio de estatus es a nivel grupo de productos
		if self.capturamasiva:
			if Mensajes().YesNo(self,u"Se aplicar� el estatus '%s' al grupo de productos\n" \
							u"que provengan del estatus '%s'.\n\n� Desea realmente aplicar el cambio de estatus ?"
							% (descripcionEstatus, self.descripcionEstatus),u"Confirmaci�n"):
				wx.BeginBusyCursor()
				req_estatus = []
				self.req_emails = {}
				self.req_detalle = {}
				for self.req in self.req_grupo.iterkeys():
					if self.req_grupo[self.req] == str(self.ultEstatus):
						req_estatus.append(self.req)
						self.ActualizaEstatus()
				if len(req_estatus) > 0:
					if self.EnviaMailsGrupo():
						wx.EndBusyCursor()
						Mensajes().Info(self, u"� El cambio de estatus a nivel grupo ha finalizado !", u"Atenci�n")
					else:
						wx.EndBusyCursor()
						Mensajes().Info(self, u"� No se logr� notificar por e-mail !\n\n" \
										u"� El cambio de estatus a nivel grupo ha finalizado !", u"Atenci�n")
		else:
			self.ActualizaEstatus()
				
		self.EndModal(1)
		self.Destroy()
		return
	
	def ActualizaEstatus(self):

		if self.AltaCambioEstatus():
			if self.actualizaexistencia:
				if not self.AfectaExistencias():
					Mensajes().Info(self, u"� No se logr� actualizar la existencia !", u"Atenci�n")
					
			if self.estatus == '15':
				if not self.ActualizaFechaEntrega():
					Mensajes().Info(self, u"� No se logr� actualizar la fecha de entrega !", u"Atenci�n")

			if not self.PreparaMails():
				Mensajes().Info(self, u"� No se logr� notificar por e-mail !", u"Atenci�n")

	def OnFechaButton( self, event):
		id = event.GetId()
		
		try:
			xdia = int(self.GetControl(id - 1).GetValue().strip().split('/')[0])
		except:
			xdia = None
		
		try:
			xmes = int(self.GetControl(id - 1).GetValue().strip().split('/')[1])
		except:
			xmes = None
			
		try:
			xano = int(self.GetControl(id - 1).GetValue().strip().split('/')[2])
		except:
			xano = None

		if xdia == None or xmes == None or xano == None:
			dlg = CalenDlg( self )
		else:
			try:
				lafecha = date(xano,xmes,xdia)
			except:
				lafecha = date.today()
				xdia = lafecha.day
				xmes = lafecha.month
				xano = lafecha.year
				Mensajes().Info(self, u"Fecha mal usar� la de hoy", u"Atenci�n")
				
			dlg = CalenDlg( self,xmes, xdia, xano )
			
		dlg.Centre()
		dlg.SetTitle("Calendario GIX")
			
		if dlg.ShowModal() == wx.ID_OK:
			try:
				result = dlg.result
				#self.GetControl( id - 1).SetValue(result[1] + '/' +  "%s/%02d" % (self.mes[result[2]], result[3]))
				self.GetControl( id - 1).SetValue("%02d/%02d/%s" % (int(result[1]), self.mes[result[2]], result[3]))
				#tbox = self.GetControl(id -1 )
				#mifecha = "%02d/%02d/%s" % (int(result[1]), self.mes[result[2]], result[3])
				#tbox.SetValue( mifecha)
			except:
				Mensajes().Warn(self, "Escoja una fecha",u"Atenci�n")
		else:
			pass
		
		#event.Skip()

	def ActualizaFechaEntrega(self):
		
		try:
			fent_dia, fent_mes, fent_ano = self.GetControl(ID_TEXTCTRLCAMBIOESTATUSFECHAENTREGA).GetValue().split('/')
			fent = "%s/%02d/%02d" % (fent_ano, int(fent_mes), int(fent_dia))
		except:
			pass
		
		setListForQuery = """
		fecha_entrega = '%s'
		""" % fent
		
		sql = "update %s set  %s " \
				"where idrequisicion = %s " \
			% ( "gixrequisiciones", setListForQuery, self.req)

		return  self.QueryUpdateRecord(sql)
		
	def AltaCambioEstatus(self):
		
		if not self.capturamasiva:
			self.req = self.requisicion.GetValue().strip()
			
		combo = self.GetControl(ID_COMBOCAMBIOESTATUSESTATUS)
		estatus = combo.GetClientData(combo.GetSelection())
		nota = self.GetControl(ID_TEXTCTRLCAMBIOESTATUSCOMENTARIO).GetValue().strip()
		insert_exitoso = False
		
		self.actualizaexistencia = False
		if estatus == self.recibidaysatisfecho:
			self.actualizaexistencia = True
		
		if self.req != "" and self.ExisteRequisicion() and estatus:
			sql = """
			insert into gixmovimientos_estatus ( idrequisicion, idempleado, idestatus, nota, fecha )
				values(%s,%s,%s,'%s',convert(varchar(10),getdate(),111) )
			""" % (self.req, self.Empleado, estatus, nota)
			#Mensajes().Info(self, sql, u"Atenci�n")
		else:
			if not estatus:
				Mensajes().Info(self, u"Seleccione el  Estatus",u"Atenci�n")   
			else:
				Mensajes().Info(self, u"No existe la requisici�n %s" % (self.req),u"Atenci�n")
				
			return False
			
		#Mensajes().Info(self, u"Cambio de Estatus realizado !!!", u"Atenci�n")
		return self.QueryUpdateRecord(sql)
	
	def AfectaExistencias(self):
		
		sql = """
		select id_producto, cantidad, unidad from gixrequisiciones where idrequisicion = %s
		""" % self.req
		
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		
		if row is None:
			cu.close()
			return False
		
		producto, cantidad, unidad = row
		
		sql = """
		select factorconversion from gixunidadesfactores where id_producto = '%s' and unidadrequisicion = '%s'
		""" % (producto, unidad)
		
		cu.execute(str(sql))
		row = fetchone(cu)
		
		if row is None:
			cu.close()
			return False
		
		factorconversion = row[0]

		sql = """
		select existencia from gixproductos where id_producto = '%s'
		""" % producto
		
		cu.execute(str(sql))
		row = fetchone(cu)
		
		cu.close()
		
		if row is None:
			return False
		
		existencia = float(row[0])
		
		existencia = existencia - (float(cantidad) / float(factorconversion))
		
		setListForQuery = """
		existencia = %s
		""" % existencia
		
		sql = "update %s set  %s " \
				"where id_producto = '%s' " \
			% ( "gixproductos", setListForQuery, producto )

		return  self.QueryUpdateRecord(sql)
	
	def EnviaMailsGrupo(self):
		
		estatus = self.GetControl(ID_COMBOCAMBIOESTATUSESTATUS).GetValue().strip()
		nota = self.GetControl(ID_TEXTCTRLCAMBIOESTATUSCOMENTARIO).GetValue().strip()
		#nsubject = u"Grupo %s (No Contestar)" % estatus             (se obtiene abajo)
		nfromAddr = "gix@grupoiclar.com"

		for email in self.req_emails.iterkeys():
			requisiciones = self.req_emails[email]
			mensaje = u"""
%s
	
Estatus: %s
			""" % (nota, estatus)
				
			detalle = u"\nProductos:\n"
			
			for req in requisiciones:
				xcantidad, xunidad, xproducto, xsolicitante, xcategoria, xfecha_requerida, xidprerequisicion = self.req_detalle[req]
				letracategoria = xcategoria[0:1]
				nsubject = u"Grupo.%s %s (No Contestar)" % (letracategoria, estatus)   # utilizado para el asunto del email
				if xidprerequisicion > 0:
					productounico = u".%s.pu" % letracategoria
				else:
					productounico = u".%s   " % letracategoria
				detalle = u"%s\n%s%s  %s  %s  %s - %s  %s  %s" % (detalle, req, productounico.decode("iso8859-1"), xcantidad, xunidad.decode("iso8859-1"), xproducto.decode("iso8859-1"),
													xsolicitante.decode("iso8859-1"), xcategoria.decode("iso8859-1"), xfecha_requerida.decode("iso8859-1"))
					
			mensaje = u"%s%s" % (mensaje, detalle)
			
			nuevomensaje = []
			
			for letra in mensaje:
				try:
					salida = str(letra)
				except:
					salida = "*"
				nuevomensaje.append(salida)
				
			nmensaje = "".join(nuevomensaje)
			
			if not jsonweb:
				pass
				#toAddr = []
				#toAddr.append(email)
				#sendmail(toAddr, fromAddr = nfromAddr, subject = nsubject, message = nmensaje)
			else:
				values = dict(addr = email, subject = nsubject, body = nmensaje)
				data = urlencode(values)
				json_string = urlopen("%s?%s" % (URLSMAIL, data)).read()
				foo = json.loads(json_string)
				
			#Mensajes().Info(self, u"Asunto: %s\nMensaje \n %s \n %s" % (nsubject, mensaje, toAddr), u"Atenci�n")

		return True
		
	def PreparaMails(self):

		if self.capturamasiva:
			req = self.req
		else:
			req = self.requisicion.GetValue().strip()
		
		sql = """
		select c.autorizador_puesto, c.surtidor_puesto, m.idempleado, c.descripcion_ampliada, p.descripcion,
		r.cantidad, r.unidad, convert(varchar(10),r.fecha_requerida,103), r.idprerequisicion
		from gixrequisiciones r
		join gixcategorias c on r.idcategoria = c.idcategoria
		join gixmovimientos_estatus m on r.idrequisicion = m.idrequisicion and m.idestatus = 1
		join gixproductos p on r.id_producto = p.id_producto
		where r.idrequisicion = %s
		""" % req
		
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		
		if row is None:
			cu.close()
			return False
			
		xautorizador_puesto, xsurtidor_puesto, xidempleado, xcategoria, xproducto, xcantidad, xunidad, xfecha_requerida, xidprerequisicion = row
		
		dEmails = {}
		sql = """
		select email from gixempleados where idempleado in
		(select idempleado from gixpuestos where idpuesto = %s)
		""" % xautorizador_puesto
		
		cu.execute(str(sql))
		row = fetchone(cu)
		
		if row is None:
			cu.close()
			return False
			
		dEmails[row[0]] = True
			
		sql = """
		select email from gixempleados where idempleado in
		(select idempleado from gixpuestos where idpuesto = %s)
		""" % xsurtidor_puesto
		
		cu.execute(str(sql))
		row = fetchone(cu)
		
		if row is None:
			cu.close()
			return False
			
		dEmails[row[0]] = True
						
		sql = """
		select email, rtrim(ltrim(apellido_paterno)) + ' ' +  rtrim(ltrim(apellido_materno)) + ', ' + rtrim(ltrim(nombre))
		from gixempleados where idempleado = %s
		""" % xidempleado
		cu.execute(str(sql))
		row = fetchone(cu)
		if row is None:
			cu.close()
			return False
			
		xcorreo, xsolicitante = row
		dEmails[xcorreo] = True
			

		#sql = """
		#select email from gixempleados where idempleado in (select idempleado from gixoperadores)
		#"""
		#cu.execute(str(sql))
		#rows = fetchall(cu)
		#for row in rows:
			#dEmails[row[0]] = True
				
		
		sql = """
		select email from gixempleados where idempleado = %s
		""" % self.Empleado
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row is None:
			return False
			
		dEmails[row[0]] = True
		
		lEmail = dEmails.keys()
		estatus = self.GetControl(ID_COMBOCAMBIOESTATUSESTATUS).GetValue().strip()
		nota = self.GetControl(ID_TEXTCTRLCAMBIOESTATUSCOMENTARIO).GetValue().strip()
		nfromAddr = "gix@grupoiclar.com"
		
		if self.capturamasiva:
			
			self.req_detalle[req] = (xcantidad, xunidad, xproducto, xsolicitante, xcategoria, xfecha_requerida, xidprerequisicion)
			
			for email in lEmail:
				req_email = []
				if email in self.req_emails:
					requisiciones = self.req_emails[email]
					for requisicion in requisiciones:
						req_email.append(requisicion)
				req_email.append(req)
				self.req_emails[email] = req_email
			
		else:
			
			letracategoria = xcategoria[0:1]
			
			if xidprerequisicion > 0:
				nsubject = u"Consecutivo.%s %s %s %s (No Contestar)" % (letracategoria, req, estatus, xproducto.decode("iso8859-1"))
			else:
				nsubject = u"Consecutivo.%s.pu %s %s %s (No Contestar)" % (letracategoria, req, estatus, xproducto.decode("iso8859-1"))
			
			mensaje = u"""
Consecutivo: %s
Estatus: %s

Producto:  %s
Cantidad:  %s %s
Categoria: %s

Solicita: %s
Fecha Requerida: %s

%s
			""" % (req, estatus, xproducto.decode("iso8859-1"), xcantidad, xunidad.decode("iso8859-1"), xcategoria.decode("iso8859-1"), xsolicitante.decode("iso8859-1"), xfecha_requerida.decode("iso8859-1"), nota)
			
			nuevomensaje = []
			for letra in mensaje:
				try:
					salida = str(letra)
				except:
					salida = "*"
				nuevomensaje.append(salida)
				
			nmensaje = "".join(nuevomensaje)
			
			for mail in lEmail:
				if not jsonweb:
					pass
					#toAddr = []
					#toAddr.append(mail)
					#sendmail(toAddr, fromAddr = nfromAddr, subject = nsubject, message = nmensaje)
				else:
					values = dict(addr = mail, subject = nsubject, body = nmensaje)
					data = urlencode(values)
					json_string = urlopen("%s?%s" % (URLSMAIL, data)).read()
					foo = json.loads(json_string)
				
				
			#Mensajes().Info(self, u" \n %s \n %s \n %s" % (nsubject, mensaje, "\n".join(lEmail)), u"Atenci�n")

		
		return True
		
	def ExisteRequisicion(self):
		sql = "select id_producto from gixrequisiciones where idrequisicion = %s" % (self.GetControl(ID_TEXTCTRLCAMBIOESTATUSREQUISICION).GetValue().strip())
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row is None:
			return False
		return True
			
	def ObtenEmpleado(self, usuario):
		sql = "select idempleado from gixempleados where usuario = '%s'" % (usuario)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row is None:
			return ""
		return str(row[0])
		
	def OnComboSelection(self,event):
		combo = self.GetControl(ID_COMBOCAMBIOESTATUSESTATUS)
		pos = combo.GetSelection()
		if pos < 0:
			return
		
		self.estatus = combo.GetClientData(pos)
		
		sql = """
		select requiere_comentario from gixestatus where idestatus = %s
		""" % self.estatus
		cu = r_cn.cursor()
		cu.execute(str(sql))
		self.ComentarioObligado = fetchone(cu)[0]
		
		textComentario = self.GetControl(ID_TEXTCTRLCAMBIOESTATUSCOMENTARIO)
		comentario = textComentario.GetValue().strip()
		
		if self.ComentarioObligado:
			#textComentario.SetBackgroundColour(wx.Colour(150,200,220))   Esta es otra forma de asignar el color a detalle
			textComentario.SetBackgroundColour(wx.CYAN)
		else:
			#textComentario.SetBackgroundColour(wx.Colour(255,255,255))
			textComentario.SetBackgroundColour(wx.WHITE)
			
		textComentario.Refresh()
		
		if self.estatus == '15':
			self.GetControl(ID_TEXTCAMBIOESTATUSFECHAENTREGA).Enable(True)
			self.GetControl(ID_TEXTCTRLCAMBIOESTATUSFECHAENTREGA).Enable(True)
			self.GetControl(ID_BITMAPBUTTONCAMBIOESTATUSFECHAENTREGA).Enable(True)
		else:
			self.GetControl(ID_TEXTCAMBIOESTATUSFECHAENTREGA).Enable(False)
			self.GetControl(ID_TEXTCTRLCAMBIOESTATUSFECHAENTREGA).Enable(False)
			self.GetControl(ID_TEXTCTRLCAMBIOESTATUSFECHAENTREGA).SetValue("")
			self.GetControl(ID_BITMAPBUTTONCAMBIOESTATUSFECHAENTREGA).Enable(False)
			
		if not self.finRequisicion:
			if self.ComentarioObligado:
				self.okButton.Enable(False)
			else:
				self.okButton.Enable(True)
			
		cu.close()
		
		#Mensajes().Info(self, "Ha elegido el estatus %s" % self.estatus, u"Atenci�n")
		
	def FillEstatus(self, estatus_elegibles = []):
		where = ""
		if len(estatus_elegibles) > 0:
			_lista = ",".join(map(str,estatus_elegibles))
			where = " where idestatus in (%s) " % _lista
			
		sql = "select idestatus, descripcion from gixestatus %s order by descripcion" % where
		combo = self.GetControl(ID_COMBOCAMBIOESTATUSESTATUS)
		combo.Clear()
		
		cu = r_cn.cursor()
		cu.execute (sql)
		rows = fetchall(cu) #wrapper para rpyc o pymssql
		indice = -1     
		for row in rows:
			combo.Append(self.GetStringFromField(row[1]))
			indice += 1
			combo.SetClientData(indice, str(row[0]))
		cu.close()
		
	def OnComentarioFechaEntrega(self, event):
		
		comentario = self.GetControl(ID_TEXTCTRLCAMBIOESTATUSCOMENTARIO).GetValue().strip()
		fechaentrega = self.GetControl(ID_TEXTCTRLCAMBIOESTATUSFECHAENTREGA).GetValue().strip()
		
		if not self.finRequisicion:
			if self.ComentarioObligado and not comentario:
				self.okButton.Enable(False)
			elif self.estatus == '15' and not fechaentrega:
				self.okButton.Enable(False)
			else:
				self.okButton.Enable(True)
				
		return
				
	def OnObtenRoles(self, event):
		
		self.ObtenRoles()
				
	def ObtenRoles(self):
		"""
		Metodo para obtener roles del usuario en esta requisicion
		El resultado es un list llamado self.roles
		"""
		
		SOLICITANTE = 1
		AUTORIZADOR = 2
		SURTIDOR = 3
		OPERADOR = 4
		AJENO = 5

		req = self.requisicion.GetValue().strip()
		
		combo = self.GetControl(ID_COMBOCAMBIOESTATUSESTATUS)
		combo.Clear()
		
		if not req:
			return
		
		if not self.ExisteRequisicion():
			#Mensajes().Info(self, u"Requisici�n Inexistente", u"Atenci�n")
			return
		
		self.roles = []
		
		sql = """
		select idpuesto from gixpuestos where idempleado = %s 
		""" % self.Empleado
		
		cu = r_cn.cursor()
		cu.execute(str(sql))
		puestos = []
		rows = fetchall(cu)
		for row in rows:
			puestos.append(int(row[0]))
			
			
		sql = """
		select r.idrequisicion, c.autorizador_puesto , 
		c.autorizador_password, c.surtidor_puesto, c.surtidor_password, m.idempleado 
		from gixrequisiciones r join gixcategorias c on r.idcategoria = c.idcategoria
		join gixmovimientos_estatus m on r.idrequisicion = m.idrequisicion and m.idestatus = 1
		where r.idrequisicion = %s
		""" % req

		cu.execute(str(sql))
		try:
			req, autorizador, autorizador_p, surtidor, surtidor_p, solicitante = fetchone(cu)
		except:
			cu.close()
			return

		sql = """
		select idempleado from gixoperadores where idempleado = %s 
		""" % self.Empleado
		
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		try:
			if row[0] is None:
				pass
			else:
				self.roles.append( OPERADOR )
		except:
			pass
		
		self.autorizador_p = autorizador_p
		self.surtidor_p = surtidor_p
		
		solicitante_y_autorizador = False
		
		if int(solicitante ) == int( self.Empleado):
			self.roles.append( SOLICITANTE )
			
		if int(autorizador) in ( puestos ):
			self.roles.append( AUTORIZADOR )
			
		if int(surtidor ) in ( puestos ):
			self.roles.append( SURTIDOR )
			
		if len(self.roles) == 0:
			self.roles.append( AJENO )
			
		if SOLICITANTE in self.roles and AUTORIZADOR in self.roles:
			solicitante_y_autorizador = True
			
		sql = """
		select idpuesto_jis from gixpuestos where idpuesto = %s
		""" % autorizador
		cu.execute(str(sql))
		jis = fetchone(cu)[0]           
		
		#aqui habra de repoblarse el combo de estatus en base a estos roles
		# y las secuencias de estatus basadas en la realidad actual de la requisicion
		# Por lo pronto solo en base de cruzar contra gixestatusroles luego sera ademas con secuencias
		
		lEstatus = []
		self.estatusAutorizador = []
		self.estatusSurtidor = []
		sql = """
		select idestatus, idrol from gixestatusroles where idrol in (%s)
		""" % (",".join(map(str,self.roles)),)
		
		cu.execute(str(sql))
		rows = fetchall(cu)
		for row in rows:
			if row[1] == AUTORIZADOR and solicitante_y_autorizador and jis:
				pass
			else:
				lEstatus.append(int(row[0]))
				if row[1] == AUTORIZADOR:
					self.estatusAutorizador.append(int(row[0]))
				elif row[1] == SURTIDOR:
					self.estatusSurtidor.append(int(row[0]))
		
		#sql = """
		#select idestatus from gixmovimientos_estatus
		#where idrequisicion = %s and id_movto in
		#(select max(id_movto) from gixmovimientos_estatus where idrequisicion = %s)
		#""" % (req, req)
		#cu.execute(str(sql))
		#ultEstatus = fetchone(cu)[0]
			
		#sql = """
		#select es_fin from gixestatus where idestatus = %s
		#""" % ultEstatus
		#cu.execute(str(sql))
		#self.finRequisicion = fetchone(cu)[0]
		sql = """
		select idestatus, descripcion, es_fin from gix_vw_req_estatus_ultimo
		where idrequisicion = %s
		""" % req
		cu.execute(str(sql))
		self.ultEstatus, self.descripcionEstatus, self.finRequisicion = fetchone(cu)
		
		
		if self.finRequisicion:
			self.okButton.Enable(False)
		else:
			self.okButton.Enable(True)
			
		if SOLICITANTE not in self.roles and AUTORIZADOR not in self.roles:
			if jis in puestos:
				cu.close()
				return True
		
		sql = """
		select idestatusdestino from gixflujoestatus where idestatusfuente = %s
		""" % self.ultEstatus
		combo = self.GetControl(ID_COMBOCAMBIOESTATUSESTATUS)
		combo.Clear()
		cu.execute(str(sql))
		rows = fetchall(cu)
		lDefinitiva = []
		for row in rows:
			if int(row[0]) in (lEstatus):
				lDefinitiva.append(int(row[0]))
		cu.close()
		self.FillEstatus(lDefinitiva)
		return  
		
class GixRequisicion(wx.Frame, GixBase):
	
	categoria = None
	
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize,
		style = wx.DEFAULT_DIALOG_STYLE , usuario = None ):
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		
		# WDR: dialog function LoginFunc for SimNoraLoginDialog
		self.DicDatesAndTxt = { ID_BITMAPBUTTONREQUISICIONFECHA : ID_TEXTCTRLREQUISICIONFECHA }
		RequisicionFunc( self, True )
		
		self.GetControl(ID_TEXTCTRLREQUISICIONPRODUCTO).SetValidator(MyValidator(LENGTH_FLAG, longitud = 20))
		self.GetControl(ID_TEXTCTRLREQUISICIONCANTIDAD).SetValidator(MyValidator(POSITIVE_AMOUNT_FLAG))
		self.GetControl(ID_TEXTCTRLREQUISICIONDESCRIPCION).Enable(False)
		
		try:
			for v in self.DicDatesAndTxt.keys():
				self.Bind(wx.EVT_BUTTON,self.OnFechaButton, id = v )
		except:
			pass
		
		self.parent = parent
		
		self.empleado = self.ObtenEmpleado(usuario)
		self.usuario = usuario
	
		wx.EVT_CLOSE(self, self.OnClose)
		wx.EVT_BUTTON(self, ID_BUTTONREQUISICIONOK, self.OnOk)
		self.Bind(wx.EVT_COMBOBOX, self.OnComboSelection)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONREQUISICIONPRODUCTOBUSCAR,self.OnBuscarProducto)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONREQUISICIONUNIDADBUSCAR,self.OnBuscarUnidad)
		
		self.FillCategorias()
		
	def GetString(self, dato):
		try:
			valor = dato.encode("iso8859-1")
		except:
			try:
				valor = str(dato)
			except:
				valor = dato
				
		return valor
		
	def OnBuscarProducto(self,event):
		
		categoria = ""
		combo = self.GetControl(ID_COMBOREQUISICIONCATEGORIA)
		categoria = combo.GetClientData(combo.GetSelection())
		query = "select id_producto, id_producto + ' - ' + descripcion from gixproductos where categoria = '%s' order by 1" % categoria
		self.RelatedFieldSearch(u"B�squeda de Producto", query, ID_TEXTCTRLREQUISICIONPRODUCTO)
	
	def OnBuscarUnidad(self,event):
		
		producto = self.GetControl(ID_TEXTCTRLREQUISICIONPRODUCTO).GetValue()
		if producto == "":
			Mensajes().Info(self, u"� Antes de elegir la unidad de la requisici�n introduzca el producto requerido !", u"Atenci�n")
		else:
			query = """
			select unidadrequisicion, unidadrequisicion + '   ' from gixunidadesfactores
			where id_producto = '%s' order by unidadrequisicion
			""" % producto
			self.RelatedFieldSearch(u"B�squeda de la Unidad de Requisici�n para " + producto, query, ID_TEXTCTRLREQUISICIONUNIDAD)
		
	def OnClose(self, event):
		#self.EndModal(1)
		self.Destroy()

	def OnOk(self, event):
		
		for  id in( ID_COMBOREQUISICIONCATEGORIA, ID_TEXTCTRLREQUISICIONPRODUCTO, ID_TEXTCTRLREQUISICIONFECHA,
				ID_TEXTCTRLREQUISICIONCANTIDAD, ID_TEXTCTRLREQUISICIONUNIDAD):
			control = self.GetControl(id)
			valor = control.GetValue().strip()
			if valor == "":
				Mensajes().Info(self, u"� No debe quedar ning�n dato en blanco !", u"Atenci�n")
				return

		producto = self.GetControl(ID_TEXTCTRLREQUISICIONPRODUCTO).GetValue().strip()
		unidad = self.GetControl(ID_TEXTCTRLREQUISICIONUNIDAD).GetValue().strip()
		
		categ = self.GetControl(ID_COMBOREQUISICIONCATEGORIA)
		idx = categ.GetSelection()
		if idx < 0:
			categoria = " ? "
		else:
			categoria = categ.GetClientData(idx)
		
		sql = """
		select id_producto from gixproductos where id_producto = '%s'
		""" % producto
		
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		
		if row is None:
			wx.Bell()
			if Mensajes().YesNo(self, u"El producto '%s' que solicita no existe en el cat�logo.\n� Desea registrar la sugerencia para su adquisici�n ?" % producto, u"Confirmaci�n"):
				
				fapl = "NULL"
				comentario = u"El producto no existe en el cat�logo y se requiere. Verificar categor�a y unidad."
				
				try:
					fapl_dia, fapl_mes, fapl_ano = self.GetControl(ID_TEXTCTRLREQUISICIONFECHA).GetValue().split('/')
					fapl = "%s/%02d/%02d" % (fapl_ano, int(fapl_mes), int(fapl_dia))
				except:
					pass
				
				sql = """
					insert into gixsugerencias(categoria, producto, fecha_requerida, cantidad, unidad, fecha_alta, comentario)
					values ( '%s', '%s',  '%s', %s, '%s', convert(varchar(10),getdate(),111), '%s')
				""" % (categoria, self.GetControl(ID_TEXTCTRLREQUISICIONPRODUCTO).GetValue(), fapl,
						self.GetControl(ID_TEXTCTRLREQUISICIONCANTIDAD).GetValue(),
						self.GetControl(ID_TEXTCTRLREQUISICIONUNIDAD).GetValue(), comentario)
				
				self.QueryUpdateRecord(sql)
				
				Mensajes().Info(self, u"Ha quedado registrada la sugerencia de adquirir el producto '%s'.\n� La requisici�n no quedar� registrada !" % producto, u"Atenci�n")
				#self.EndModal(1)
				self.Destroy()
				return
			else:
				#self.EndModal(1)
				self.Destroy()
				return
			
		sql = """
		select id_producto from gixunidadesfactores where id_producto = '%s' and unidadrequisicion = '%s'
		""" % (producto, unidad)

		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		
		if row is None:
			wx.Bell()
			if Mensajes().YesNo(self, u"La unidad '%s' que solicita no existe para el producto.\n� Desea registrar la sugerencia para su incorporaci�n ?" % unidad, u"Atenci�n"):
				
				fapl = "NULL"
				comentario = u"La unidad para requisici�n del producto no existe. Verificar factores de conversi�n de unidades."
				
				try:
					fapl_dia, fapl_mes, fapl_ano = self.GetControl(ID_TEXTCTRLREQUISICIONFECHA).GetValue().split('/')
					fapl = "%s/%02d/%02d" % (fapl_ano, int(fapl_mes), int(fapl_dia))
				except:
					pass
				
				sql = """
					insert into gixsugerencias(categoria, producto, fecha_requerida, cantidad, unidad, fecha_alta, comentario)
					values ( '%s', '%s',  '%s', %s, '%s', convert(varchar(10),getdate(),111), '%s')
				""" % (categoria, self.GetControl(ID_TEXTCTRLREQUISICIONPRODUCTO).GetValue(), fapl,
						self.GetControl(ID_TEXTCTRLREQUISICIONCANTIDAD).GetValue(),
						self.GetControl(ID_TEXTCTRLREQUISICIONUNIDAD).GetValue(), comentario)
				
				self.QueryUpdateRecord(sql)
				
				Mensajes().Info(self, u"Ha quedado registrada la sugerencia para incorporar la unidad '%s' al producto '%s'.\n� La requisici�n no quedar� registrada !"
						% (unidad, producto), u"Atenci�n")
				#self.EndModal(1)
				self.Destroy()
				return
			else:
				#self.EndModal(1)
				self.Destroy()
				return
			
			
		sql = """
		select rtrim(ltrim(apellido_paterno)) + ' ' +  rtrim(ltrim(apellido_materno)) + ', ' + rtrim(ltrim(nombre)) + ' - ' + convert(varchar(7), idempleado)
		from gixempleados where idempleado = %s
		""" % self.empleado
		
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		
		if row is None:
			Mensajes().Info(self, u"No existe el empleado %s.\n� La requisici�n no quedar� registrada !" % self.empleado, u"Atenci�n")
			#self.EndModal(1)
			self.Destroy()
			return
		
		nombreempleado = row[0]

		sql = """
		select idpuesto from gixpuestos where idempleado = %s
		""" % self.empleado
		
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		
		if row is None:
			Mensajes().Info(self, u"Para registrar la requisici�n es necesario que se le asigne un puesto al empleado:\n%s\n� La requisici�n no quedar� registrada !"
					% nombreempleado.decode("iso8859-1"), u"Atenci�n")
			#self.EndModal(1)
			self.Destroy()
			return
		
		self.idpuesto = str(row[0])
			
		if self.AltaRequisicion():
			#self.EndModal(1)
			self.Destroy()
			
	def OnComboSelection(self,event):
		combo = self.GetControl(ID_COMBOREQUISICIONCATEGORIA)
		self.categoria = combo.GetClientData(combo.GetSelection())
			
	def FillCategorias(self):
		
		sql = "select idcategoria, descripcion from gixcategorias order by descripcion"
		combo = self.GetControl(ID_COMBOREQUISICIONCATEGORIA)
		cu = r_cn.cursor()
		cu.execute (sql)
		rows = fetchall(cu) #wrapper para rpyc o pymssql
		
		indice = -1
		for row in rows:
			combo.Append(self.GetStringFromField(row[1]))
			indice += 1
			combo.SetClientData(indice, self.GetStringFromField(row[0]))
			
		cu.close()
		
	def ObtenEmpleado(self, usuario):
		sql = "select idempleado from gixempleados where usuario = '%s'" % (usuario)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row is None:
			return ""
		return str(row[0])
		
	def AltaRequisicion(self):
		
		categ = self.GetControl(ID_COMBOREQUISICIONCATEGORIA)
		idx = categ.GetSelection()
		if idx < 0:
			categoria = " ? "
		else:
			categoria = categ.GetClientData(idx)
		
		fapl = "NULL"
		
		fechaentrega = "NULL"
		
		try:
			fapl_dia, fapl_mes, fapl_ano = self.GetControl(ID_TEXTCTRLREQUISICIONFECHA).GetValue().split('/')
			fapl = "%s/%02d/%02d" % (fapl_ano, int(fapl_mes), int(fapl_dia))
		except:
			pass
		
		
		sql = """
			insert into gixrequisiciones( idcategoria, id_producto, descripcion, fecha_requerida, cantidad,
			unidad, fecha_alta, idpuesto, fecha_entrega, idprerequisicion) values ( '%s', '%s', '%s', '%s', %s, '%s', convert(varchar(10),getdate(),111), %s, %s, %s)
		""" % (categoria,self.GetControl(ID_TEXTCTRLREQUISICIONPRODUCTO).GetValue(),
				self.GetControl(ID_TEXTCTRLREQUISICIONDESCRIPCION).GetValue(),
				fapl,
				self.GetControl(ID_TEXTCTRLREQUISICIONCANTIDAD).GetValue(),
				self.GetControl(ID_TEXTCTRLREQUISICIONUNIDAD).GetValue(),
				self.idpuesto, fechaentrega, 0)
		
		
		self.QueryUpdateRecord(sql)
		
		sql = "select max(idrequisicion) from gixrequisiciones"
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		req = fetchone(cursor)[0]
		cursor.close()
		
		sql = """
			insert into gixmovimientos_estatus ( idrequisicion, idempleado, idestatus, nota, fecha )
				values(%s,%s,%s,'',convert(varchar(10),getdate(),111) )
			""" % (req, self.empleado, 1)
		
		self.QueryUpdateRecord(sql)
		
		self.requisicion = req
		
		return True
	
class GixBalanzaComprobacion(wx.Dialog, GixBase, GixContabilidad):
	def __init__(self, parent, id = -1, title = u"Balanza de Comprobaci�n", pos = wx.DefaultPosition,
			size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE, usuario = None ):
		
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		
		self.usuario = usuario
		obj = Parametro(usuario = self.usuario)
		self.ObtenerEmpresa(obj.empresadetrabajo)
		self.empresaid = obj.empresadetrabajo
		
		FiltrosBalanzaComprobacion(self, True)
		
		wx.EVT_BUTTON(self, ID_BUTTONBALANZAACEPTAR, self.OnOk)
		wx.EVT_CLOSE(self, self.OnClose)
		
		radioctrl = self.GetControl(ID_RADIOBOXBALANZAFORMATO)
		radioctrl.SetStringSelection('Formato Completo (Saldo Inicial, Cargos, Abonos y Saldo)')
		self.FillCombos()
		
		self.GetControl(ID_TEXTBALANZAEMPRESA).SetLabel(self.empresa)

		self.inxlst, self.cholst = self.FillTipoDeCuenta()
		if wx.Platform == '__WXMSW__':
			lb = wx.CheckListBox(self, -1, (35, 120), [325, 220], self.cholst)
		else:
			lb = wx.CheckListBox(self, -1, (35, 120), [345, 220], self.cholst)
		inx = 0
		for x in self.cholst:
			lb.Check(inx, True)
			inx += 1
		self.lb = lb
		
	def ObtenerEmpresa(self, empresaid):
		query = """
		select RazonSocial + ' - ' + convert(varchar(7), EmpresaID)
		from cont_Empresas where EmpresaId = %s
		""" % empresaid
		
		try:
			cu = r_cn.cursor()
			cu.execute(query)
			row = fetchone(cu)
			cu.close()
			
			if row:
				self.empresa = row[0]
			else:
				Mensajes().Info(self, u"No se ha encontrado la empresa de trabajo.\n" \
						u"Por favor abandone este m�dulo y verifique.", u"Atenci�n")
		except:
			Mensajes().Info(self, u"No se ha encontrado la empresa de trabajo.\n" \
					u"Por favor abandone este m�dulo y verifique.", u"Atenci�n")
			
	def FillCombos(self):
		combomes = self.GetControl(ID_COMBOBALANZAPERIODOMES)
		comboyear = self.GetControl(ID_COMBOBALANZAPERIODOYEAR)
		
		meses = ['Enero','Febrero','Marzo','Abril','Mayo','Junio','Julio','Agosto','Septiembre',
				'Octubre','Noviembre','Diciembre']
		years = ['2007','2008','2009','2010','2011','2012','2013','2014','2015','2016','2017','2018','2019',
				'2020','2021','2022','2023','2024','2025']
		
		for mes in meses:
			combomes.Append(self.GetStringFromField(mes))
			
		for year in years:
			comboyear.Append(self.GetStringFromField(year))
			
	def FillTipoDeCuenta(self):
		query = """
		select CuentaTipoID, Descripcion + ' - ' + convert(varchar(7), CuentaTipoID)
		from cont_CuentaTipo order by Descripcion
		"""
		inxlst = []
		cholst = []
		
		try:
			cu = r_cn.cursor()
			cu.execute(query)
			rows = fetchall(cu)
			cu.close()
		
			if rows:
				for row in rows:
					inxlst.append(row[0])
					cholst.append(row[1])
			else:
				pass
		except:
			pass
		
		return inxlst, cholst
		
	def OnOk(self, event):
		combo = self.GetControl(ID_COMBOBALANZAPERIODOMES)
		indice = combo.GetSelection()
		if indice >= 0:
			periodomesnum = indice + 1
			periodomesstr = combo.GetString(indice).strip()
		else:
			Mensajes().Info(self, u"Elija el mes del periodo", u"Atenci�n")
			return
		
		combo = self.GetControl(ID_COMBOBALANZAPERIODOYEAR)
		indice = combo.GetSelection()
		if indice >= 0:
			periodoyearstr = combo.GetString(indice).strip()
		else:
			Mensajes().Info(self, u"Elija el a�o del periodo", u"Atenci�n")
			return
		
		inx = 0
		selecciones = []
		for x in self.cholst:
			if self.lb.IsChecked(inx):
				selecciones.append(self.inxlst[inx])
			inx += 1
		if selecciones:
			cuantos = 0
			for x in selecciones:
				cuantos += 1
			if cuantos > 1:
				tipocuenta = tuple(map(int,selecciones))
			else:
				Mensajes().Info(self, u"Debe elegir al menos dos tipos de cuenta", u"Atenci�n")
				return
		else:
			Mensajes().Info(self, u"Debe elegir al menos dos tipos de cuenta", u"Atenci�n")
			return

		if self.GetControl(ID_CHECKBOXBALANZADETALLE).GetValue() == True:
			subqry = "c.Afectable = 1"
		else:
			subqry = "c.HijaDeCuentaID is null"

		if self.GetControl(ID_RADIOBOXBALANZAFORMATO).GetStringSelection() == "Formato Reducido (Unicamente Saldos)":
			self.BalanzaFormatoReducido(periodomesnum, periodomesstr, periodoyearstr, tipocuenta, subqry)
		else:
			self.BalanzaFormatoCompleto(periodomesnum, periodomesstr, periodoyearstr, tipocuenta, subqry)
		
	def OnClose(self, event):
		self.Destroy()
		
	def BalanzaFormatoReducido(self, periodomesnum, periodomesstr, periodoyearstr, tipocuenta, subqry):
		funci = "cuentanula(%s)" 
		meta = ((100,u"Cuenta", wx.ALIGN_LEFT, funci) , (200, u"Descripci�n"),
			(100,u"Saldo Deudor", wx.ALIGN_RIGHT, "amount_and_cents_with_commas(%s)"),
			(100,u"Saldo Acreedor", wx.ALIGN_RIGHT, "amount_and_cents_with_commas(%s)"))
		periodo = periodoyearstr + u"/" + str(periodomesnum) + u"/01"
		empresa = self.empresaid
		query = """
		select c.ClaveCuenta, c.Descripcion,
		case c.Naturaleza when 'D' then s.SaldoInicial + s.TotalCargos - s.TotalAbonos end,
		case c.Naturaleza when 'A' then s.SaldoInicial + s.TotalAbonos - s.TotalCargos end,
		c.Naturaleza, c.CuentaID
		from cont_SaldosxPeriodo s join cont_Cuentas c on s.CuentaID = c.CuentaID
		where s.Periodo = '%s' and c.EmpresaID = %s and c.CuentaTipoID in %s and %s and
		(case c.Naturaleza when 'D' then s.SaldoInicial + s.TotalCargos - s.TotalAbonos end <> 0 or
		case c.Naturaleza when 'A' then s.SaldoInicial + s.TotalAbonos - s.TotalCargos end <> 0)
		union
		select d.ClaveCuenta, d.Descripcion,
		sum(case c.Naturaleza when 'D' then s.SaldoInicial + s.TotalCargos - s.TotalAbonos end),
		sum(case c.Naturaleza when 'A' then s.SaldoInicial + s.TotalAbonos - s.TotalCargos end),
		d.Naturaleza, d.CuentaID
		from cont_SaldosxPeriodo s join cont_Cuentas c on s.CuentaID = c.CuentaID
		join cont_Dummy d on d.EmpresaID = c.EmpresaID
		where s.Periodo = '%s' and c.EmpresaID = %s and c.CuentaTipoID in %s and %s and
		(case c.Naturaleza when 'D' then s.SaldoInicial + s.TotalCargos - s.TotalAbonos end <> 0 or
		case c.Naturaleza when 'A' then s.SaldoInicial + s.TotalAbonos - s.TotalCargos end <> 0)
		group by d.ClaveCuenta, d.Descripcion, d.Naturaleza, d.CuentaID
		order by 1;
		select count(*) + 1
		from cont_SaldosxPeriodo s join cont_Cuentas c on s.CuentaID = c.CuentaID
		where s.Periodo = '%s' and c.EmpresaID = %s and c.CuentaTipoID in %s and %s and
		(case c.Naturaleza when 'D' then s.SaldoInicial + s.TotalCargos - s.TotalAbonos end <> 0 or
		case c.Naturaleza when 'A' then s.SaldoInicial + s.TotalAbonos - s.TotalCargos end <> 0)
		""" % (periodo, empresa, tipocuenta, subqry, periodo, empresa, tipocuenta, subqry,
			periodo, empresa, tipocuenta, subqry)
		
		titulo = u"Balanza de Comprobaci�n - %s del %s - %s" % (periodomesstr, periodoyearstr, self.empresa)
		tabla = "cont_Cuentas"
		frame = GixFrameCatalogo(self, -1, titulo, wx.Point(20,20), wx.Size(800,600), 
					wx.DEFAULT_FRAME_STYLE, None, None, None, tabla, meta, query, gridsize = [630,500])
		frame.Centre(wx.BOTH)
		frame.Show(True)
		
	def BalanzaFormatoCompleto(self, periodomesnum, periodomesstr, periodoyearstr, tipocuenta, subqry):
		funci = "cuentanula(%s)" 
		meta = ((100,u"Cuenta", wx.ALIGN_LEFT, funci) , (200, u"Descripci�n"),
			(100,u"Saldo Inicial", wx.ALIGN_RIGHT, "amount_and_cents_with_commas(%s)"),
			(100,u"Cargos", wx.ALIGN_RIGHT, "amount_and_cents_with_commas(%s)"),
			(100,u"Abonos", wx.ALIGN_RIGHT, "amount_and_cents_with_commas(%s)"),
			(100,u"Saldo Deudor", wx.ALIGN_RIGHT, "amount_and_cents_with_commas(%s)"),
			(100,u"Saldo Acreedor", wx.ALIGN_RIGHT, "amount_and_cents_with_commas(%s)"))
		periodo = periodoyearstr + u"/" + str(periodomesnum) + u"/01"
		empresa = self.empresaid
		query = """
		select c.ClaveCuenta, c.Descripcion,
		case c.Naturaleza when 'Z' then '' else s.SaldoInicial end,
		case c.Naturaleza when 'Z' then '' else s.TotalCargos end,
		case c.Naturaleza when 'Z' then '' else s.TotalAbonos end,
		case c.Naturaleza when 'D' then s.SaldoInicial + s.TotalCargos - s.TotalAbonos end,
		case c.Naturaleza when 'A' then s.SaldoInicial + s.TotalAbonos - s.TotalCargos end,
		c.Naturaleza, c.CuentaID
		from cont_SaldosxPeriodo s join cont_Cuentas c on s.CuentaID = c.CuentaID
		where s.Periodo = '%s' and c.EmpresaID = %s and c.CuentaTipoID in %s and %s and
		(case c.Naturaleza when 'D' then s.SaldoInicial + s.TotalCargos - s.TotalAbonos end <> 0 or
		case c.Naturaleza when 'A' then s.SaldoInicial + s.TotalAbonos - s.TotalCargos end <> 0)
		union
		select d.ClaveCuenta, d.Descripcion,
		sum(case c.Naturaleza when 'Z' then 0 else s.SaldoInicial end),
		sum(case c.Naturaleza when 'Z' then 0 else s.TotalCargos end),
		sum(case c.Naturaleza when 'Z' then 0 else s.TotalAbonos end),
		sum(case c.Naturaleza when 'D' then s.SaldoInicial + s.TotalCargos - s.TotalAbonos end),
		sum(case c.Naturaleza when 'A' then s.SaldoInicial + s.TotalAbonos - s.TotalCargos end),
		d.Naturaleza, d.CuentaID
		from cont_SaldosxPeriodo s join cont_Cuentas c on s.CuentaID = c.CuentaID
		join cont_Dummy d on d.EmpresaID = c.EmpresaID
		where s.Periodo = '%s' and c.EmpresaID = %s and c.CuentaTipoID in %s and %s and
		(case c.Naturaleza when 'D' then s.SaldoInicial + s.TotalCargos - s.TotalAbonos end <> 0 or
		case c.Naturaleza when 'A' then s.SaldoInicial + s.TotalAbonos - s.TotalCargos end <> 0)
		group by d.ClaveCuenta, d.Descripcion, d.Naturaleza, d.CuentaID
		order by 1;
		select count(*) + 1
		from cont_SaldosxPeriodo s join cont_Cuentas c on s.CuentaID = c.CuentaID
		where s.Periodo = '%s' and c.EmpresaID = %s and c.CuentaTipoID in %s and %s and
		(case c.Naturaleza when 'D' then s.SaldoInicial + s.TotalCargos - s.TotalAbonos end <> 0 or
		case c.Naturaleza when 'A' then s.SaldoInicial + s.TotalAbonos - s.TotalCargos end <> 0)
		""" % (periodo, empresa, tipocuenta, subqry, periodo, empresa, tipocuenta, subqry,
			periodo, empresa, tipocuenta, subqry)
		
		titulo = u"Balanza de Comprobaci�n - %s del %s - %s" % (periodomesstr, periodoyearstr, self.empresa)
		tabla = "cont_Cuentas"
		frame = GixFrameCatalogo(self, -1, titulo, wx.Point(20,20), wx.Size(800,600), 
					wx.DEFAULT_FRAME_STYLE, None, None, None, tabla, meta, query, gridsize = [850,500])
		frame.Centre(wx.BOTH)
		frame.Show(True)
		
class GixAuxiliarMovimientos(wx.Dialog, GixBase, GixContabilidad):
	mes = {"Ene": 1,"Feb": 2,"Mar": 3,"Abr":4,"May":5,"Jun":6,"Jul":7,"Ago":8,"Sep":9,"Oct":10,"Nov":11,"Dic":12}
	
	def __init__(self, parent, id = -1, title = u"Auxiliar de Movimientos", pos = wx.DefaultPosition,
			size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE, usuario = None ):
		
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		
		self.usuario = usuario
		obj = Parametro(usuario = self.usuario)
		self.ObtenerEmpresa(obj.empresadetrabajo)
		self.empresaid = obj.empresadetrabajo
		
		FiltrosAuxiliarMovimientos(self, True)
		
		self.Bind(wx.EVT_BUTTON, self.OnElegirFechaBtn, id = ID_BITMAPBUTTONAUXILIARFECHAINICIAL)
		self.Bind(wx.EVT_BUTTON, self.OnElegirFechaBtn, id = ID_BITMAPBUTTONAUXILIARFECHAFINAL)
		
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONAUXILIARCUENTAINICIAL, self.OnElegirCuentaBtn)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONAUXILIARCUENTAFINAL, self.OnElegirCuentaBtn)
		self.Bind(wx.EVT_TEXT, self.OnElegirCuentaTxt, id = ID_TEXTCTRLAUXILIARCUENTAINICIAL)
		self.Bind(wx.EVT_TEXT, self.OnElegirCuentaTxt, id = ID_TEXTCTRLAUXILIARCUENTAFINAL)
		
		wx.EVT_BUTTON(self, ID_BUTTONAUXILIARACEPTAR, self.OnOk)
		wx.EVT_CLOSE(self, self.OnClose)
		
		self.GetControl(ID_TEXTAUXILIAREMPRESA).SetLabel(self.empresa)
		self.GetControl(ID_RADIOBOXAUXILIARSALDOINICIAL).SetStringSelection('Ambos')
		self.GetControl(ID_RADIOBOXAUXILIARMOVIMIENTOS).SetStringSelection('Con')
		self.GetControl(ID_RADIOBOXAUXILIARSALDOFINAL).SetStringSelection('Ambos')

		self.inxlsttipo, self.cholsttipo = self.FillTipoDeCuenta()
		if False:   # Standby
			if wx.Platform == '__WXMSW__':
				lbtipo = wx.CheckListBox(self, -1, (35, 300), [283, 255], self.cholsttipo)
			else:
				lbtipo = wx.CheckListBox(self, -1, (35, 325), [307, 255], self.cholsttipo)
		lbtipo = self.GetControl(ID_FOREIGNAUXILIARTIPOSCUENTA)
		lbtipo.Clear()
		inx = 0
		for x in self.cholsttipo:
			lbtipo.Append(self.cholsttipo[inx])
			lbtipo.Check(inx, True)
			inx += 1
		self.lbtipo = lbtipo
		
	def OnClose(self, event):
		self.Destroy()
		
	def ObtenerEmpresa(self, empresaid):
		query = """
		select RazonSocial + ' - ' + convert(varchar(7), EmpresaID)
		from cont_Empresas where EmpresaId = %s
		""" % empresaid
		try:
			cu = r_cn.cursor()
			cu.execute(query)
			row = fetchone(cu)
			cu.close()
			
			if row:
				self.empresa = row[0]
			else:
				Mensajes().Info(self, u"No se ha encontrado la empresa de trabajo.\n" \
						u"Por favor abandone este m�dulo y verifique.", u"Atenci�n")
		except:
			Mensajes().Info(self, u"No se ha encontrado la empresa de trabajo.\n" \
					u"Por favor abandone este m�dulo y verifique.", u"Atenci�n")
			
	def FillTipoDeCuenta(self):
		query = """
		select CuentaTipoID, Descripcion + ' - ' + convert(varchar(7), CuentaTipoID)
		from cont_CuentaTipo order by Descripcion
		"""
		inxlst = []
		cholst = []
		try:
			cu = r_cn.cursor()
			cu.execute(query)
			rows = fetchall(cu)
			cu.close()
		
			if rows:
				for row in rows:
					inxlst.append(row[0])
					cholst.append(row[1])
			else:
				pass
		except:
			Mensajes().Info(self, u"Sucedio algo que impidio accesar los tipos de cuenta.\n" \
					u"Por favor abandone este m�dulo y verifique.", u"Atenci�n")
		
		return inxlst, cholst

	def OnElegirFechaBtn(self, event):
		id = event.GetId()
		try:
			xdia = int(self.GetControl(id - 1).GetValue().strip().split('/')[0])
		except:
			xdia = None
		try:
			xmes = int(self.GetControl(id - 1).GetValue().strip().split('/')[1])
		except:
			xmes = None
		try:
			xano = int(self.GetControl(id - 1).GetValue().strip().split('/')[2])
		except:
			xano = None

		if xdia == None or xmes == None or xano == None:
			dlg = CalenDlg(self)
		else:
			try:
				lafecha = date(xano,xmes,xdia)
			except:
				lafecha = date.today()
				xdia = lafecha.day
				xmes = lafecha.month
				xano = lafecha.year
				Mensajes().Info(self, u"Fecha mal usar� la de hoy", u"Atenci�n")
				
			dlg = CalenDlg(self, xmes, xdia, xano)
			
		dlg.Centre()
		dlg.SetTitle("Calendario GIX")
			
		if dlg.ShowModal() == wx.ID_OK:
			try:
				result = dlg.result
				self.GetControl(id - 1).SetValue("%02d/%02d/%s" \
									% (int(result[1]), self.mes[result[2]], result[3]))
			except:
				Mensajes().Warn(self, u"Escoja una fecha", u"Atenci�n")
				
	def OnElegirCuentaTxt(self, event):
		id = event.GetId()
		cuenta = self.GetControl(id).GetValue()
		
		query = """
		select CuentaID, Descripcion from cont_Cuentas where EmpresaID = %s and ClaveCuenta = '%s'
		""" % (self.empresaid, cuenta)
		
		if len(cuenta) == 12:
			try:
				cu = r_cn.cursor()
				cu.execute(query)
				row = fetchone(cu)
				cu.close()
				
				if row:
					self.cuentaid = row[0]
					self.GetControl(id + 2).SetLabel(self.GetStringFromField(row[1]))
					self.ComparaCuentas()
				else:
					Mensajes().Info(self, u"� No existe la cuenta !", u"Atenci�n")
			except:
				Mensajes().Info(self, u"Sucedio algo que impidio accesar el cat�logo de cuentas.\n" \
						u"Por favor abandone este m�dulo y verifique.", u"Atenci�n")
		else:
			self.ComparaCuentas()
			self.GetControl(id + 2).SetLabel('')
			
	def ExisteCuenta(self, cuenta):
		query = """
		select CuentaID from cont_Cuentas where EmpresaID = %s and ClaveCuenta = '%s'
		""" % (self.empresaid, cuenta)
		try:
			cu = r_cn.cursor()
			cu.execute(query)
			row = fetchone(cu)
			cu.close()
			
			if row:
				return True
			else:
				return False
		except:
			Mensajes().Info(self, u"Sucedio algo que impidio accesar el cat�logo de cuentas.\n" \
					u"Por favor abandone este m�dulo y verifique.", u"Atenci�n")
			return False
		
	def OnElegirCuentaBtn(self, event):
		id = event.GetId()
		self.inxcuenta = []
		self.chocuenta = []
		
		query = """
		select CuentaID, ClaveCuenta, Descripcion
		from cont_Cuentas where EmpresaID = %s order by ClaveCuenta
		""" % self.empresaid
		try:
			cu = r_cn.cursor()
			cu.execute(query)
			rows = fetchall(cu)
			cu.close()
			
			for row in rows:
				cuenta = self.GetStringFromField(row[1])
				choiceformat = self.EnmascaraCuenta(cuenta) + "  -  " + self.GetStringFromField(row[2])
				self.inxcuenta.append(row[0])
				self.chocuenta.append(choiceformat + '                  ')
	
			if self.chocuenta:
				self.index = wx.GetSingleChoiceIndex(u"Opciones",  u"Elegir Cuenta", self.chocuenta, parent = None)
			else:
				Mensajes().Info(self, u"� No se ha definido el cat�logo de cuentas !", u"Atenci�n")
				event.Skip()
				return
			
			if int(self.index) > -1:
				clavecuenta, descripcion = self.chocuenta[self.index].split('  -  ')
				
				if descripcion == "":
					Mensajes().Info(self, u"� Cuenta equivocada !\n\nNo tiene descripci�n.", u"Atenci�n")
					event.Skip()
					return
				else:
					self.GetControl(id - 1).SetValue(str((clavecuenta).strip()))
					self.GetControl(id + 1).SetLabel(str((descripcion).strip()))
					self.cuentaid = self.inxcuenta[self.index]
					self.ComparaCuentas()
			else:
				pass
		except:
			Mensajes().Info(self, u"Sucedio algo que impidio accesar el cat�logo de cuentas.\n" \
					u"Por favor abandone este m�dulo y verifique.", u"Atenci�n")
		
	def ComparaCuentas(self):
		ctaini = self.GetControl(ID_TEXTCTRLAUXILIARCUENTAINICIAL).GetValue()
		ctafin = self.GetControl(ID_TEXTCTRLAUXILIARCUENTAFINAL).GetValue()
		try:
			if self.lbsubcta:
				if False:   # Standby
					self.lbsubcta.Destroy()
				self.lbsubcta.Clear()
				self.GetControl(ID_TEXTAUXILIARSUBCUENTAS).SetLabel('')
				self.cholstsubcta = []
				self.inxlstsubcta = []
		except:
			self.cholstsubcta = []
			self.inxlstsubcta = []
		
		if ctaini == ctafin and ctaini and ctafin:
			self.inxlstsubcta, self.cholstsubcta = self.FillSubCuentas()
			if self.cholstsubcta:
				self.GetControl(ID_TEXTAUXILIARSUBCUENTAS).SetLabel('Subcuentas')
				if False:   # Standby
					if wx.Platform == '__WXMSW__':
						lbsubcta = wx.CheckListBox(self, -1, (325, 300), [377, 255], self.cholstsubcta)
					else:
						lbsubcta = wx.CheckListBox(self, -1, (350, 325), [500, 255], self.cholstsubcta)
				lbsubcta = self.GetControl(ID_FOREIGNAUXILIARSUBCUENTAS)
				inx = 0
				for x in self.cholstsubcta:
					lbsubcta.Append(self.cholstsubcta[inx])
					lbsubcta.Check(inx, True)
					inx += 1
					
				self.lbsubcta = lbsubcta
			
	def FillSubCuentas(self):
		query = """
		select CuentaID, ClaveCuenta, Descripcion
		from cont_Cuentas where EmpresaID = %s and Afectable = 1 and HijaDeCuentaID = %s order by ClaveCuenta
		""" % (self.empresaid, self.cuentaid)
		inxlst = []
		cholst = []
		try:
			cu = r_cn.cursor()
			cu.execute(query)
			rows = fetchall(cu)
			cu.close()
		
			if rows:
				for row in rows:
					cuenta = self.GetStringFromField(row[1])
					choice = self.EnmascaraCuenta(cuenta) + "  -  " + self.GetStringFromField(row[2])
					cholst.append(choice)
					inxlst.append(row[0])
			else:
				pass
		except:
			Mensajes().Info(self, u"Sucedio algo que impidio accesar el cat�logo de cuentas.\n" \
					u"Por favor abandone este m�dulo y verifique.", u"Atenci�n")
		
		return inxlst, cholst
		
	def OnOk(self, event):
		fini = self.GetControl(ID_TEXTCTRLAUXILIARFECHAINICIAL)
		ffin = self.GetControl(ID_TEXTCTRLAUXILIARFECHAFINAL)
		if fini.GetValue() == "" or ffin.GetValue() == "":
			Mensajes().Info(self, u"� El intervalo de fechas no debe quedar en blanco !", u"Atenci�n")
			event.Skip()
			return
		else:
			self.dia_ini, self.mes_ini, self.aho_ini = fini.GetValue().split('/')
			self.dia_fin, self.mes_fin, self.aho_fin = ffin.GetValue().split('/')
			fechainicial = "%s/%s/%s" % (self.aho_ini, self.mes_ini, self.dia_ini)
			fechafinal = "%s/%s/%s" % (self.aho_fin, self.mes_fin, self.dia_fin)
			if fechainicial > fechafinal:
				Mensajes().Info( self, u"� La fecha inicial no debe ser mayor a la fecha final !",
							u"Atenci�n")
				event.Skip()
				return
		inx = 0
		selecciones = []
		for x in self.cholsttipo:
			if self.lbtipo.IsChecked(inx):
				selecciones.append(self.inxlsttipo[inx])
			inx += 1
		if selecciones:
			selecciones.sort()
			tiposcuenta = tuple(map(int,selecciones))
		else:
			Mensajes().Info(self, u"� Debe elegir al menos un tipo de cuenta !", u"Atenci�n")
			event.Skip()
			return
		
		subcuentas = ""
		cini = self.GetControl(ID_TEXTCTRLAUXILIARCUENTAINICIAL)
		cfin = self.GetControl(ID_TEXTCTRLAUXILIARCUENTAFINAL)
		if cini.GetValue() == "" and cfin.GetValue() == "":
			if Mensajes().YesNo(self, u"� No se especifico un rango de cuentas !\n\n" \
							u"Por lo tanto, se aplicar� el criterio de\n" \
							u"selecci�n a todas las cuentas.\n\n� Desea continuar ?", u"Confirmaci�n"):
				cuentainicial = "000000000000"
				cuentafinal = "999999999999"
			else:
				event.Skip()
				return
		elif cini.GetValue() == "" or cfin.GetValue() == "":
			Mensajes().Info(self, u"� El intervalo de cuentas no debe quedar en blanco !", u"Atenci�n")
			event.Skip()
			return
		else:
			cuentainicial = self.DesenmascaraCuenta(cini.GetValue())
			cuentafinal = self.DesenmascaraCuenta(cfin.GetValue())
			if cuentainicial > cuentafinal:
				Mensajes().Info( self, u"� La cuenta inicial no debe ser mayor a la cuenta final !",
							u"Atenci�n")
				event.Skip()
				return
			else:
				if not self.ExisteCuenta(cuentainicial):
					Mensajes().Info(self, u"� No existe la cuenta %s !" % cuentainicial, u"Atenci�n")
					event.Skip()
					return
				elif not self.ExisteCuenta(cuentafinal):
					Mensajes().Info(self, u"� No existe la cuenta %s !" % cuentafinal, u"Atenci�n")
					event.Skip()
					return
				elif self.cholstsubcta:
					inx = 0
					selecciones = []
					for x in self.cholstsubcta:
						if self.lbsubcta.IsChecked(inx):
							selecciones.append(self.inxlstsubcta[inx])
						inx += 1
					if selecciones:
						selecciones.sort()
						subcuentas = tuple(map(int,selecciones))
					else:
						Mensajes().Info(self, u"� Debe elegir al menos una subcuenta !", u"Atenci�n")
						event.Skip()
						return
					
		radiosaldoinicial = self.GetControl(ID_RADIOBOXAUXILIARSALDOINICIAL).GetStringSelection()
		radiomovimientos = self.GetControl(ID_RADIOBOXAUXILIARMOVIMIENTOS).GetStringSelection()
		radiosaldofinal = self.GetControl(ID_RADIOBOXAUXILIARSALDOFINAL).GetStringSelection()
		fecha_ano, fecha_mes, fecha_dia = fechainicial.split('/')
		fecha_ini = "%02d/%02d/%s" % (int(fecha_dia), int(fecha_mes), fecha_ano)
		fecha_ano, fecha_mes, fecha_dia = fechafinal.split('/')
		fecha_fin = "%02d/%02d/%s" % (int(fecha_dia), int(fecha_mes), fecha_ano)
		titulo = u"Auxiliar de Movimientos del %s al %s - %s" % (fecha_ini, fecha_fin, self.empresa)
		auxmovgrid = GixAuxMovGrid(self, -1, title = titulo, size = (850,700),
						style = wx.DEFAULT_FRAME_STYLE, usuario = self.usuario,
						fini = fechainicial, ffin = fechafinal, tcta = tiposcuenta,
						cini = cuentainicial, cfin = cuentafinal, scta = subcuentas, empresaid = self.empresaid,
						rsin = radiosaldoinicial, rmov = radiomovimientos, rsfi = radiosaldofinal)
		auxmovgrid.CenterOnScreen()
		auxmovgrid.Show()
		
class GixAuxMovGrid(wx.Frame, GixBase, GixContabilidad):
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize,
			style = wx.DEFAULT_FRAME_STYLE, usuario = None,
			fini = None, ffin = None, tcta = [], cini = None, cfin = None, scta = [],
			empresaid = None, rsin = "Ambos", rmov = "Con", rsfi = "Ambos"):
		wx.Frame.__init__(self, parent, id, title, pos, size, style)
		
		self.usuario = usuario
		
		self.SetMenuBar(AMGMenuBarGrid())
		tb = self.CreateToolBar(wx.TB_HORIZONTAL | wx.NO_BORDER | wx.TB_FLAT)
		AMGToolBarGrid(tb)
		
		panel = wx.Panel(self, -1)
		AuxMovGrid(panel, True, True)
		
		self.grid = self.GetControl(ID_GRIDAUXMOVGRID)

		self.CreateStatusBar(2)
		self.SetStatusText("Auxiliar de Movimientos", 0)
		self.SetStatusText("Contabilidad", 1)

		self.Bind(gridlib.EVT_GRID_CELL_LEFT_DCLICK, self.OnConsultaPoliza, id = ID_GRIDAUXMOVGRID)
		self.Bind(wx.EVT_MENU, self.OnConsultaPoliza, id = ID_AMG_ARCHIVOPOLIZA)
		self.Bind(wx.EVT_TOOL, self.OnConsultaPoliza, id = ID_AMG_TOOLPOLIZA)
		self.Bind(wx.EVT_MENU, self.OnToExcel, id = ID_AMG_ARCHIVOEXCEL)
		self.Bind(wx.EVT_TOOL, self.OnToExcel, id = ID_AMG_TOOLEXCEL)
		self.Bind(wx.EVT_MENU, self.OnFirst, id = ID_AMG_NAVEGACIONFIRST)
		self.Bind(wx.EVT_TOOL, self.OnFirst, id = ID_AMG_TOOLFIRST)
		self.Bind(wx.EVT_MENU, self.OnPrev, id = ID_AMG_NAVEGACIONPREV)
		self.Bind(wx.EVT_TOOL, self.OnPrev, id = ID_AMG_TOOLPREV)
		self.Bind(wx.EVT_MENU, self.OnNext, id = ID_AMG_NAVEGACIONNEXT)
		self.Bind(wx.EVT_TOOL, self.OnNext, id = ID_AMG_TOOLNEXT)
		self.Bind(wx.EVT_MENU, self.OnLast, id = ID_AMG_NAVEGACIONLAST)
		self.Bind(wx.EVT_TOOL, self.OnLast, id = ID_AMG_TOOLLAST)
		self.Bind(wx.EVT_MENU, self.OnQuit, id = ID_AMG_ARCHIVOSALIR)
		wx.EVT_MENU(self, wx.ID_EXIT, self.OnQuit)
		
		wx.BeginBusyCursor()
		cuentasposibles, cuentas = self.SelectFromFilters(fini, ffin, tcta, cini, cfin, scta, rsin, rmov, rsfi, empresaid)
		self.BuildAndFillFromQuery(fini, ffin, cuentasposibles, cuentas)
		wx.EndBusyCursor()
		
	def OnQuit(self, event):
		self.Destroy()
		
	def OnConsultaPoliza(self, event):
		fila_elegida = self.grid.GetGridCursorRow()
		fecha = self.grid.GetCellValue(fila_elegida, 0)
		if not fecha: return
		poliza = self.grid.GetCellValue(fila_elegida, 6)
		tipopoliza = self.grid.GetCellValue(fila_elegida, 7)
		descripcion = self.grid.GetCellValue(fila_elegida, 8)
		meta = ((100, u"Cuenta", wx.ALIGN_LEFT, "self.EnmascaraCuenta('%s')"), (200, u"Descripci�n"),
			(100, u"Cargo", wx.ALIGN_RIGHT, "amount_and_cents_with_commas(%s)"),
			(100, u"Abono", wx.ALIGN_RIGHT, "amount_and_cents_with_commas(%s)"), (100, u"Referencia"))
		query = """
		select c.ClaveCuenta, d.Descripcion,
		case d.Cargo when 0 then null else d.Cargo end,
		case d.Abono when 0 then null else d.Abono end,
		d.Referencia1
		from cont_PolizaDetalle d join cont_Cuentas c on d.CuentaID = c.CuentaID
		where d.PolizaID = %s and d.Item <> 0 order by d.PolizaID, d.Item;
		select count(*) from cont_PolizaDetalle where PolizaID = %s and Item <> 0
		""" % (poliza, poliza)
		
		titulo = u"P�liza de %s del %s - %s" % (tipopoliza, fecha, descripcion)
		tabla = "cont_PolizaDetalle"
		frame = GixFrameCatalogo(self, -1, titulo, wx.Point(20,20), wx.Size(800,600), 
					wx.DEFAULT_FRAME_STYLE, None, None, None, tabla, meta, query,
					gridsize = [700,300], color = "LIGHT BLUE")
		frame.Centre(wx.BOTH)
		frame.Show(True)
		
	def OnToExcel(self, event):
		w2e = WxWidget2Excel(self)
		w2e.grid = self.GetControl(ID_GRIDAUXMOVGRID)
		w2e.SetExcelWorkbook(r"auxiliardemovimientos.xls")
		w2e.GenerateExcelFileFromGrid()
		Mensajes().Info(self, u"El archivo de excel ha sido generado")

	def OnFirst(self, event):
		self.grid.SetGridCursor(0, 0)
		self.grid.MakeCellVisible(0, 0)
		self.fila_elegida = self.grid.GetGridCursorRow()
	
	def OnPrev(self, event):
		self.grid.MoveCursorUp(False)
		self.grid.MakeCellVisible(self.grid.GetGridCursorRow(), 0)
		self.fila_elegida = self.grid.GetGridCursorRow()
	
	def OnNext(self, event):
		self.grid.MoveCursorDown(False)
		self.grid.MakeCellVisible(self.grid.GetGridCursorRow(), 0)
		self.fila_elegida = self.grid.GetGridCursorRow()
	
	def OnLast(self, event):
		self.grid.SetGridCursor(self.grid.GetNumberRows() - 1, 0)
		self.grid.MakeCellVisible( self.grid.GetNumberRows() - 1, 0)
		self.fila_elegida = self.grid.GetGridCursorRow()
		
	def SelectFromFilters(self, fini, ffin, tcta, cini, cfin, scta, rsin, rmov, rsfi, empresaid):
		try:
			if len(tcta) > 1:
				sqltcta = "in"
			else:
				sqltcta = "="
				tcta = tcta[0]
		except:
			sqltcta = "="
			tcta = tcta[0]
				
		if scta:
			try:
				if len(scta) > 1:
					sqlscta = "in"
				else:
					sqlscta = "="
					scta = scta[0]
			except:
				sqlscta = "="
				scta = scta[0]
				
		columnas = """
		CuentaID, ClaveCuenta, Naturaleza
		"""
		fromwhere = """
		from cont_Cuentas where CuentaTipoID %s %s and Afectable = 1 and EmpresaID = %s and
		""" % (sqltcta, tcta, empresaid)
		if scta:
			sql = """
			CuentaID %s %s
			""" % (sqlscta, scta)
		else:
			sql = """
			(ClaveCuenta >= '%s' and ClaveCuenta <= '%s')
			""" % (cini, cfin)
		sqlquery = "select %s %s %s order by 2" % (columnas, fromwhere, sql)
		
		try:
			cuentasposibles = {}
			cu = r_cn.cursor()
			cu.execute(str(sqlquery))
			while True:
				row = fetchone(cu)
				if row:
					cuentasposibles[str(row[1])] = (row[0], str(row[2]))
				else:
					break
			cu.close()
		except:
			Mensajes().Info(self, u"Sucedio algo que impidio accesar el cat�logo de cuentas.\n" \
					u"Por favor abandone este m�dulo y verifique.", u"Atenci�n")
		
		sql = """
		select d.Cargo, d.Abono from cont_PolizaDetalle d join cont_Polizas p on d.PolizaID = p.PolizaID
		where (p.FechaPoliza >= '%s' and p.FechaPoliza <= '%s') and
		""" % (fini, ffin)
		cu = r_cn.cursor()
		for clavecuenta, ctanat in cuentasposibles.iteritems():
			saldoinicial = self.CalculaSaldoCuenta(ctanat[0], fini, ctanat[1])
			sqlquery = "%s d.CuentaID = %s" % (sql, ctanat[0])
			try:
				cargos, abonos = 0,0
				cu.execute(str(sqlquery))
				while True:
					row = fetchone(cu)
					if row:
						cargos += float(row[0])
						abonos += float(row[1])
					else:
						break
			except:
				Mensajes().Info(self, u"Sucedio algo que impidio accesar el detalle de p�lizas.\n" \
						u"Por favor abandone este m�dulo y verifique.", u"Atenci�n")
			if ctanat[1] == "D":
				saldofinal = saldoinicial + cargos - abonos
			else:
				saldofinal = saldoinicial + abonos - cargos
			cuentasposibles[clavecuenta] = (ctanat[0], ctanat[1], saldoinicial, cargos, abonos, saldofinal)
		cu.close()
		cuentas = []
		for clavecuenta, cta in cuentasposibles.iteritems():
			sin, mov, sfi = False, False, False
			if cta[2]: sin = True
			if cta[3] or cta[4]: mov = True
			if cta[5]: sfi = True
			if (rsin == "Sin" and not sin) or (rsin == "Con" and sin) or rsin == "Ambos":
				if (rmov == "Sin" and not mov) or (rmov == "Con" and mov) or rmov == "Ambos":
					if (rsfi == "Sin" and not sfi) or (rsfi == "Con" and sfi) or rsfi == "Ambos":
						cuentas.append(clavecuenta)
		cuentas.sort()
		return cuentasposibles, cuentas
			
	def BuildAndFillFromQuery(self, fini, ffin, cuentasposibles, cuentas):
		def SiguienteColor(fila):
			if fila %2 != 0:
				bgcolor = "AQUAMARINE"
			else:
				bgcolor = "AQUAMARINE"
			return bgcolor
	
		def FormateaCeldas(fila, bgcolor = "WHITE"):
			for col in range(0,9):
				grid.SetReadOnly(fila, col, True)
				grid.SetCellTextColour(fila, col, wx.NamedColour("BLACK"))
				grid.SetCellBackgroundColour(fila, col, wx.NamedColour(bgcolor))
				
		def DespliegaTotales(fila, titulo, cargos, abonos, color = None, cuenta = "", descripcion = ""):
			grid.InsertRows(grid.GetNumberRows(), 1)
			fila += 1
			if color:
				FormateaCeldas(fila, color)
			else:
				bgcolor = SiguienteColor(fila)
				FormateaCeldas(fila, bgcolor)
			if cuenta:
				valor = self.EnmascaraCuenta(cuenta)
				grid.SetCellAlignment(fila, 1, wx.ALIGN_CENTER, wx.ALIGN_CENTER)
				grid.SetCellValue(fila, 1, valor)
			if descripcion:
				grid.SetCellAlignment(fila, 2, wx.ALIGN_LEFT, wx.ALIGN_CENTER)
				grid.SetCellValue(fila, 2, descripcion)
			grid.SetCellAlignment(fila, 3, wx.ALIGN_LEFT, wx.ALIGN_CENTER)
			grid.SetCellValue(fila, 3, titulo)
			valor = str(amount_and_cents_with_commas(cargos))
			grid.SetCellAlignment(fila, 4, wx.ALIGN_RIGHT, wx.ALIGN_CENTER)
			grid.SetCellValue(fila, 4, valor)
			valor = str(amount_and_cents_with_commas(abonos))
			grid.SetCellAlignment(fila, 5, wx.ALIGN_RIGHT, wx.ALIGN_CENTER)
			grid.SetCellValue(fila, 5, valor)
			return fila
		
		def CalculaSaldoFinal(cargos, abonos):
			if cuentasposibles[cuenta][1] == "D":
				saldofinalcargo = cargos - abonos
				saldofinalabono = 0
			else:
				saldofinalcargo = 0
				saldofinalabono = abonos - cargos
			return saldofinalcargo, saldofinalabono
		
		def DescripcionDeCuenta(cuentaid):
			sqlcta = """
			select Descripcion from cont_Cuentas where CuentaID = %s
			""" % cuentaid
			cu.execute(str(sqlcta))
			descripcion = fetchone(cu)[0]
			return descripcion
			
		grid = self.grid
		if grid.GetNumberRows(): grid.DeleteRows(0, grid.GetNumberRows())
		if grid.GetNumberCols(): grid.DeleteCols(0, grid.GetNumberCols())
		grid.EnableGridLines(False)
		grid.SetRowLabelSize(0)
		grid.SetDefaultRowSize(20)
		if len(cuentas):
			columnas = [(0, 100, u"Fecha"),
					(1, 100, u"Cuenta"),
					(2, 100, u"Descripci�n de la Cuenta"),
					(3, 100, u"Referencia"),
					(4, 100, u"Cargo"),
					(5, 100, u"Abono"),
					(6, 250, u""),
					(7, 100, u""),
					(8, 100, u"")]
			grid.InsertCols(0, len(columnas))
			for col, ancho, titulo in columnas:
				grid.SetColSize(col, ancho)
				grid.SetColLabelValue(col, titulo)
			sqlmov = """
			select convert(varchar(10), p.fechaPoliza, 111), c.ClaveCuenta, d.Descripcion, d.Referencia1,
			d.Cargo, d.Abono, d.PolizaID, t.Descripcion, p.Descripcion, c.Naturaleza, c.CuentaID
			from cont_PolizaDetalle d
			join cont_Polizas p on d.PolizaID = p.PolizaID
			join cont_Cuentas c on d.CuentaID = c.CuentaID
			join cont_PolizaTipo t on p.PolizaTipoID = t.PolizaTipoID
			where (p.FechaPoliza >= '%s' and p.FechaPoliza <= '%s') and d.CuentaID =
			""" % (fini, ffin)
			x = 1
			fila = -1
			valorcero, grantotalcargos, grantotalabonos = 0,0,0
			cu = r_cn.cursor()
			for cuenta in cuentas:
				totalcargos, totalabonos = 0,0
				descripcion = DescripcionDeCuenta(cuentasposibles[cuenta][0])
				if cuentasposibles[cuenta][1] == "D":
					fila = DespliegaTotales(fila, "Saldo Inicial", cuentasposibles[cuenta][2],
								valorcero, "MEDIUM AQUAMARINE", cuenta, descripcion)
					totalcargos += cuentasposibles[cuenta][2]
					grantotalcargos += cuentasposibles[cuenta][2]
				else:
					fila = DespliegaTotales(fila, "Saldo Inicial", valorcero, cuentasposibles[cuenta][2],
								"MEDIUM AQUAMARINE", cuenta, descripcion)
					totalabonos += cuentasposibles[cuenta][2]
					grantotalabonos += cuentasposibles[cuenta][2]
				querymov = "%s %s order by 1" % (sqlmov, cuentasposibles[cuenta][0])
				cu.execute(str(querymov))
				while True:
					row = fetchone(cu)
					if not row:
						fila = DespliegaTotales(fila, "Totales", totalcargos, totalabonos)
						saldofinalcargo, saldofinalabono = CalculaSaldoFinal(totalcargos, totalabonos)
						fila = DespliegaTotales(fila, "Saldo Final", saldofinalcargo, saldofinalabono)
						fila += 1
						grid.InsertRows(grid.GetNumberRows(), 1)
						FormateaCeldas(fila)
						break
					else:
						fila += 1
						grid.InsertRows(grid.GetNumberRows(), 1)
						for col in range(0,9):
							if col in (3,7,8):
								justificado = wx.ALIGN_LEFT
								valor = str(row[col])
							elif col in (0,4,5,6):
								if col == 0:
									justificado = wx.ALIGN_CENTER
									fecha_ano, fecha_mes, fecha_dia = str(row[col]).split('/')
									valor = "%02d/%02d/%s" % (int(fecha_dia), int(fecha_mes), fecha_ano)
								else:
									if row[col]:
										justificado = wx.ALIGN_RIGHT
										if col in (4,5):
											valor = str(amount_and_cents_with_commas(row[col]))
											if col == 4:
												totalcargos += float(row[col])
												grantotalcargos += float(row[col])
											else:
												totalabonos += float(row[col])
												grantotalabonos += float(row[col])
										else:
											valor = str(row[col])
									else:
										valor = ""
							else:
								valor = ""
							
							bgcolor = SiguienteColor(fila)
							if col in (6,7,8):
								textcolor = bgcolor
							else:
								textcolor = "BLACK"
							
							grid.SetReadOnly(fila, col, True)
							grid.SetCellValue(fila, col, valor)
							grid.SetCellTextColour(fila, col, wx.NamedColour(textcolor))
							grid.SetCellBackgroundColour(fila, col, wx.NamedColour(bgcolor))
							grid.SetCellAlignment(fila, col, justificado, wx.ALIGN_CENTER)

			cu.close()
			fila = DespliegaTotales(fila, "Gran Total", grantotalcargos, grantotalabonos, "YELLOW")
			saldofinalcargo, saldofinalabono = CalculaSaldoFinal(grantotalcargos, grantotalabonos)
			DespliegaTotales(fila, "Gran Saldo Final", saldofinalcargo, saldofinalabono, "YELLOW")
			if grid.GetNumberRows() > 1:
				for col in range(0,9):
					if col != 6:
						grid.AutoSizeColumn(col)
			else:
				grid.AutoSizeColumns()
		else:
			grid.InsertCols(0, 1)
			grid.SetLabelBackgroundColour(wx.NamedColour("RED"))
			grid.SetLabelTextColour(wx.NamedColour("WHITE"))
			grid.SetColLabelValue(0, u"          � No se encontraron movimientos !          ")
			grid.AutoSizeColumns()
		
class GixMovimientosInventario(wx.Dialog, GixBase):
	
	def __init__(self, parent, id = -1, title = u"Movimientos de Inventario", pos = wx.DefaultPosition, size = wx.DefaultSize,
		style = wx.DEFAULT_DIALOG_STYLE ):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		
		ElegirProductoFunc( self, True )
		self.parent = parent
		
		wx.EVT_CLOSE(self, self.OnClose)
		wx.EVT_BUTTON(self, ID_BUTTONELEGIROK, self.OnOk)
		wx.EVT_BUTTON(self, ID_BITMAPBUTTONELEGIRPRODUCTO, self.OnBuscarProducto)
		
		return
		
	def OnBuscarProducto(self,event):
		
		query = "select id_producto, id_producto + ' - ' + descripcion from gixproductos order by descripcion"
		self.RelatedFieldSearch(u"B�squeda de Producto", query, ID_TEXTCTRLELEGIRPRODUCTO)
		
		return
	
	def OnOk(self,event):
	
		producto = self.GetControl(ID_TEXTCTRLELEGIRPRODUCTO).GetValue().strip()
		
		if producto:
			
			sql = """
			select convert(varchar(10),e.fecha,111), 'Entrada', d.cantidad, p.unidad, d.id_producto, d.identradainvdet
			from gixentradasinvdet d join gixentradasinv e on d.identradainv = e.identradainv
			join gixproductos p on d.id_producto = p.id_producto where d.id_producto = '%s' and e.fecha > '2012/04/17'
			union
			select convert(varchar(10),m.fecha,111), 'Salida', r.cantidad, r. unidad, r.id_producto, r.idrequisicion
			from gixrequisiciones r join gixmovimientos_estatus m on r.idrequisicion = m.idrequisicion
			where r.id_producto = '%s' and m.idestatus = '14' and r.fecha_alta > '2012/04/17'
			order by 1
			""" % (producto, producto)
			cu = r_cn.cursor()
			cu.execute(str(sql))
			cuantos = len(fetchall(cu))
			cu.close()
		
			meta = (( 100, u"Fecha"), (70, u"Tipo"), (90, u"Cantidad", wx.ALIGN_RIGHT, "amount_and_cents_with_commas(%s)"), (120, u"Unidad"))
		
			query = """
			select convert(varchar(10),e.fecha,111), 'Entrada', d.cantidad, p.unidad, d.id_producto, d.identradainvdet
			from gixentradasinvdet d join gixentradasinv e on d.identradainv = e.identradainv
			join gixproductos p on d.id_producto = p.id_producto where d.id_producto = '%s' and e.fecha > '2012/04/17'
			union
			select convert(varchar(10),m.fecha,111), 'Salida', r.cantidad, r. unidad, r.id_producto, r.idrequisicion
			from gixrequisiciones r join gixmovimientos_estatus m on r.idrequisicion = m.idrequisicion
			where r.id_producto = '%s' and m.idestatus = '14' and r.fecha_alta > '2012/04/17'
			order by 1 desc; select %s
			""" % (producto, producto, cuantos)
			titulo = u"Movimientos de Inventario del Producto %s" % producto
			tabla = "gixentradasinvdet" #aqui habia bug pues tomaria en cuenta solo gixentradasinvdet y no gixrequisiciones ademas
			# por ello agregue el query de la variable sql para determinar cuantos registros tiene la union
			# y ponerlo como query adicional ( separado con coma ).
			
			frame = GixFrameCatalogo(self, -1 , titulo , wx.Point(20,20),wx.Size(700,600), 
						wx.DEFAULT_FRAME_STYLE, None, None, None, tabla, meta, query, gridsize = [500,350])
			
			frame.Centre(wx.BOTH)
			frame.Show(True)
			
			producto = ""
			self.GetControl(ID_TEXTCTRLELEGIRPRODUCTO).SetValue(producto)
			
		return
			
	def OnClose(self, event):
		
		self.Destroy()
		
		return

class GixEnConstruccion(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Notificaci�n", pos = wx.DefaultPosition, size = wx.DefaultSize,
		style = wx.DEFAULT_DIALOG_STYLE ):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.parent = parent
		EnConstruccion( self, True )
		self.parent = parent
		wx.EVT_CLOSE(self, self.OnClose)
		
	def OnClose(self, event):
	        self.EndModal(1)
		self.Destroy()

class GixNoDisponible(wx.Dialog, GixBase):
	def __init__(self, parent, id = -1, title = u"Notificaci�n", pos = wx.DefaultPosition, size = wx.DefaultSize,
		style = wx.DEFAULT_DIALOG_STYLE ):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.parent = parent
		NoDisponible( self, True )
		self.parent = parent
		wx.EVT_CLOSE(self, self.OnClose)
		
	def OnClose(self, event):
		self.Destroy()

class CambioPassword(wx.Dialog,GixBase):
	def __init__(self, parent, id = -1, title = u"Cambio de Contrase�a", pos = wx.DefaultPosition, size = wx.DefaultSize,
		style = wx.DEFAULT_DIALOG_STYLE, usuario = None):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.parent = parent
		
		global g_cl_user
		g_cl_user = usuario
		
		CambiarPasswordFunc( self, True )
		self.parent = parent
		
		wx.EVT_CLOSE(self, self.OnClose)
		wx.EVT_BUTTON(self, ID_BUTTON_CP, self.OnOk)
		
		return
		
	def OnOk(self,event):
		paswd = self.GetControl(ID_TEXTCTRL_CP_PACTUAL).GetValue().strip()
		paswd_nuevo = self.GetControl(ID_TEXTCTRL_CP_PNUEVA).GetValue().strip()
		if self.parent.ValidaUsuario(g_cl_user, paswd):
			
			sql = """
			update usuarios set password = '%s' , md5 = '%s' where usuario = '%s' 
			""" % (paswd_nuevo, self.Hash(paswd_nuevo), g_cl_user)
			if self.QueryUpdateRecord( sql):
				Mensajes().Info(self,u"Su contrase�a ha cambiado tanto para GI como para GIX", u"Atenci�n")
			
			else:
				Mensajes().Info(self,u"Su contrase�a NO cambi� !!!", u"Atenci�n")
		self.Destroy()
		return
		
	
	def OnClose(self, event):
		self.Destroy()
		return
	
	def Hash(self, pwd):
		#m = md5.new()
		#m.update(pwd)
		return md5(pwd).hexdigest().upper()
	
	
class LoginDialog(wx.Dialog, GixBase):
				
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize,
		style = wx.DEFAULT_DIALOG_STYLE ):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		
		self.vendedor = 0
		LoginFunc( self, True )
		self.parent = parent
		
		
		wx.EVT_LISTBOX(self, ID_LISTBOX_LOGIN, self.OnUsuario)
		wx.EVT_CLOSE(self, self.OnClose)
		wx.EVT_BUTTON(self, wx.ID_OK, self.OnOk)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRL_LOGIN)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnTextEnter, id = ID_TEXTCTRL_LOGIN )
		#wx.EVT_BUTTON(self, wx.ID_CANCEL, self.OnCancel)
		control = wx.FindWindowById(wx.ID_OK)
		control.SetBitmapDisabled( MyBitmapsFunc(0))
		control.Enable(False)

	

	def OnText(self,event):
		
		control = wx.FindWindowById(ID_TEXTCTRL_LOGIN)
		boton = wx.FindWindowById(wx.ID_OK)
		
		if len(control.GetValue()) > 0:
			control.SetBackgroundColour(wx.CYAN)
			boton.Enable(True)
			
		else:
			control.SetBackgroundColour(wx.LIGHT_GREY)
			boton.Enable(False)
			
		event.Skip()
			
	def FillUsuarios(self):
		self.dUsuarios = {}
		lbox = self.GetControl( ID_LISTBOX_LOGIN )
		cu = r_cn.cursor()
		cu.execute ("select usuario, nombre from usuarios order by usuario")
		rows = fetchall(cu) #wrapper para rpyc o pymssql
			
		for row in rows:
			usuario, nombre = row
			lbox.Append(usuario)
			#self.dUsuarios[row[0]] = self.GetStringFromField( row[1])
			self.dUsuarios[usuario] = self.GetStringFromField( nombre)
		cu.close()
		
	def EsVendedor(self, Usuario, Password = ""):
		sql = """
		select a.fkvendedor from gixanip a
		join VENDEDOR v on a.fkvendedor = v.codigo
		where usuario = '%s' and v.desactivado <> 1
		""" % (Usuario, )
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		cursor.close()
		if row:
			self.vendedor = int(row[0])
			if self.vendedor > 0:
				return True
		
	def VerificaUsuario(self, Usuario, Password):
		mensaje = ""
		if Usuario != Usuario.strip():
			Usuario = Usuario.strip()
			mensaje = "Intento logearse con espacios en el usuario"
		if Password != Password.strip():
			Password = Password.strip()
			if mensaje:
				mensaje += " y en el password"
			else:
				mensaje = "Intento logearse con espacios en el password"

		if mensaje:
			sql = """
			insert into gixbaduser (usuario, mensaje)
			values ('%s', '%s')
			""" % (Usuario, mensaje)
			cursor = r_cn.cursor()
			cursor.execute(str(sql))
			r_cn.commit()
			cursor.close()
			
		return Usuario, Password
		
	def LoginUser(self):
		cUsuario = self.GetControl(ID_LISTBOX_LOGIN)
		Usuario = cUsuario.GetStringSelection()
		cPassword = self.GetControl( ID_TEXTCTRL_LOGIN)
		Password = cPassword.GetValue()
		gixanip = False
		if True:
			Usuario = wx.GetTextFromUser(u"Usuario",u"Tecleelo a pat�n",default_value = Usuario )
		Usuario, Password = self.VerificaUsuario(Usuario, Password)
		
		if str(Usuario) == "":
								
			Mensajes().Warn(self, u"Indique Usuario", u"Atenci�n")
			cUsuario.SetFocus()
			return False
				
		if str(Password) == "" and not SMARTICS:
								
			Mensajes().Warn(self, u"Indique Contrase�a", u"Atenci�n")
			cPassword.SetFocus()
			return False
		
		if SMARTICS:
			sql = "select count(*) from gixanip where usuario = '%s'" % Usuario
			cursor = r_cn.cursor()
			cursor.execute( str(sql) )
			row = fetchone(cursor)
			resultado = str(row[0])
			cursor.close()
			if resultado == "0":
				sql = "select count(*) from usuarios where Usuario = '%s'" % Usuario
			else:
				sql = "select 1"
				
				gixanip = self.EsVendedor(Usuario)
				if gixanip is False:
					return False
		else:
			sql = "SELECT COUNT(*) FROM Usuarios WHERE Usuario = '" + Usuario
			sql = sql + "' AND md5 = '" + self.Hash(Password)
			sql = sql + "'"
		
		cursor = r_cn.cursor()
		cursor.execute( str(sql) )
		row = fetchone(cursor)
		resultado = str(row[0])
		cursor.close()
		
		if resultado == "0":
			Mensajes().Error(self, u"Usuario o Contrase�a inv�lidas", u"Seguridad")
			#cUsuario.SetValue("")
			cPassword.SetValue("")
			cUsuario.SetFocus()
			self.PonNombre()
			return False
		else:
			if not gixanip:
				if self.ObtenEmpleado(Usuario) == "":
					Mensajes().Warn(self,u"El usuario\n%s\nno tiene empleado asociado" % Usuario, u"Atenci�n")
					return False
			self.usuario = Usuario
			gixmodel.USER = self.usuario
			gixmodel.gravatarimage(50)
			if not gixmodel.growlnotifier is None:
				aviso = "Mac OS X Mountain Lion"
				gixmodel.growlnotifier.notify("mensaje", "Bienvenido a GIX", aviso, sticky = True)

			return True
		
	def ObtenEmpleado(self, usuario):
		sql = "select idempleado from gixempleados where usuario = '%s'" % (usuario)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row is None:
			return ""
		return str(row[0])
					
	def EndOfDialog(self):
		#wx.BeginBusyCursor()
		if self.LoginUser():
			self.EndModal(1)
			#self.Destroy()
		#wx.EndBusyCursor()
					
	
	def AmILogged(self):
		if self.usuario == "":
			return False
		else:
			return True
							
	def OnUsuario( self, event):
		self.PonNombre()
			
	def PonNombre( self ):
		usuario = str(self.GetControl(ID_LISTBOX_LOGIN).GetStringSelection())
		if usuario != "" and usuario != "<Escoja Usuario>":
			self.parent.SetStatusText(u"Bienvenido ( %s ), %s" % (usuario,self.dUsuarios[usuario]))
			if SMARTICS:
				wx.FindWindowById(wx.ID_OK).Enable(True)
		else:
			self.parent.SetStatusText("")

	def OnClose(self, event):
		self.Destroy()
			

	def OnOk(self, event):
		self.EndOfDialog()
	
	def OnTextEnter(self, event):
		self.EndOfDialog()
																	
	def OnCancel(self, event):
		self.Destroy()
		
	def Hash(self, pwd):
		#m = md5.new()
		#m.update(pwd)
		return md5(pwd).hexdigest().upper()
	
	usuario = ""
	idusuario = None

class LoginDialog2(wx.Dialog, GixBase):
	def __init__(self, parent, id, title, pos = wx.DefaultPosition, size = wx.DefaultSize, style = wx.DEFAULT_DIALOG_STYLE ):
		wx.Dialog.__init__(self, parent, id, title, pos, size, style)
		self.vendedor = 0
		self.parent = parent
		
		LoginFunc2(self, True)
		
		self.Bind(wx.EVT_TEXT, self.OnUsuario, id = ID_TEXTCTRLLOGINUSUARIO)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnTextEnter, id = ID_TEXTCTRLLOGINUSUARIO)
		self.Bind(wx.EVT_TEXT, self.OnText, id = ID_TEXTCTRLLOGINPASS)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnTextEnter, id = ID_TEXTCTRLLOGINPASS)
		wx.EVT_BUTTON(self, wx.ID_OK, self.OnOk)
		wx.EVT_CLOSE(self, self.OnClose)
		
		control = wx.FindWindowById(wx.ID_OK)
		control.SetBitmapDisabled(MyBitmapsFunc(0))
		control.Enable(False)

	def FillUsuarios(self):
		self.dUsuarios = {}
		cu = r_cn.cursor()
		sql = "select usuario, nombre from usuarios order by usuario"
		cu.execute(str(sql))
		rows = fetchall(cu)
		cu.close()
		for row in rows:
			usuario, nombre = row
			self.dUsuarios[usuario] = self.GetStringFromField( nombre)
			
	def OnText(self, event):
		self.Text()
		event.Skip()
	
	def Text(self):
		Ucontrol = wx.FindWindowById(ID_TEXTCTRLLOGINUSUARIO)
		Pcontrol = wx.FindWindowById(ID_TEXTCTRLLOGINPASS)
		boton = wx.FindWindowById(wx.ID_OK)
		if len(Ucontrol.GetValue()) > 0 and len(Pcontrol.GetValue()) > 0:
			Ucontrol.SetBackgroundColour(wx.CYAN)
			Pcontrol.SetBackgroundColour(wx.CYAN)
			boton.Enable(True)
		else:
			Ucontrol.SetBackgroundColour(wx.LIGHT_GREY)
			Pcontrol.SetBackgroundColour(wx.LIGHT_GREY)
			boton.Enable(False)
			
		Ucontrol.Refresh()
		Pcontrol.Refresh()
		
	def EsVendedor(self, Usuario, Password):
		sql = """
		select a.fkvendedor from gixanip a
		join VENDEDOR v on a.fkvendedor = v.codigo
		where usuario = '%s' and password = '%s' and v.desactivado <> 1
		""" % (Usuario, Password)
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		cursor.close()
		if row:
			self.vendedor = int(row[0])
			if self.vendedor > 0:
				return True
		
		return False
	
	def VerificaUsuario(self, Usuario, Password):
		mensaje = ""
		if Usuario != Usuario.strip():
			Usuario = Usuario.strip()
			mensaje = "Intento logearse con espacios en el usuario"
		if Password != Password.strip():
			Password = Password.strip()
			if mensaje:
				mensaje += " y en el password"
			else:
				mensaje = "Intento logearse con espacios en el password"

		if mensaje:
			sql = """
			insert into gixbaduser (usuario, mensaje)
			values ('%s', '%s')
			""" % (Usuario, mensaje)
			cursor = r_cn.cursor()
			cursor.execute(str(sql))
			r_cn.commit()
			cursor.close()
			
		return Usuario, Password
			
	def LoginUser(self):
		cUsuario = self.GetControl(ID_TEXTCTRLLOGINUSUARIO); Usuario = cUsuario.GetValue()
		cPassword = self.GetControl(ID_TEXTCTRLLOGINPASS); Password = cPassword.GetValue()
		Usuario, Password = self.VerificaUsuario(Usuario, Password)
		if str(Usuario) == "":
			Mensajes().Warn(self, u"Indique Usuario", u"Atenci�n")
			cUsuario.SetFocus()
			return False
				
		if str(Password) == "" and not SMARTICS:
			Mensajes().Warn(self, u"Indique Contrase�a", u"Atenci�n")
			cPassword.SetFocus()
			return False
		
		if SMARTICS:
			sql = "select count(*) from Usuarios where Usuario = '%s'" % Usuario
		else:
			sql = "select count(*) from Usuarios where Usuario = '" + Usuario
			sql = sql + "' and md5 = '" + self.Hash(Password)
			sql = sql + "'"
		
		cursor = r_cn.cursor()
		cursor.execute(str(sql))
		row = fetchone(cursor)
		cursor.close()
		resultado = str(row[0])
		if resultado == "0":
			if not self.EsVendedor(Usuario, Password):
				Mensajes().Error(self, u"Usuario o Contrase�a Inv�lidas", u"Seguridad")
				cUsuario.SetValue("")
				cPassword.SetValue("")
				cUsuario.SetFocus()
				self.PonNombre()
				return False
			elif FORCEQUERYONLY:
				Mensajes().Error(self, u"Usuario o Contrase�a Inv�lidas", u"Seguridad")
				cUsuario.SetValue("")
				cPassword.SetValue("")
				cUsuario.SetFocus()
				self.PonNombre()
				return False
		else:
			if self.ObtenEmpleado(Usuario) == "":
				Mensajes().Warn(self,u"El usuario\n%s\nno tiene empleado asociado" % Usuario, u"Atenci�n")
				return False
			
		self.usuario = Usuario
		gixmodel.USER = self.usuario
		gixmodel.gravatarimage(40)
		if not gixmodel.growlnotifier is None:
			aviso = "Mac OS X Mountain Lion"
			gixmodel.growlnotifier.notify("mensaje", "Bienvenido a GIX", aviso, sticky = True)

		return True
		
	def ObtenEmpleado(self, usuario):
		sql = "select idempleado from gixempleados where usuario = '%s'" % (usuario)
		cu = r_cn.cursor()
		cu.execute(str(sql))
		row = fetchone(cu)
		cu.close()
		if row is None:
			return ""
		return str(row[0])
					
	def EndOfDialog(self):
		if self.LoginUser():
			self.EndModal(1)
	
	def AmILogged(self):
		if self.usuario == "":
			return False
		else:
			return True
							
	def OnUsuario( self, event):
		self.PonNombre()
		self.Text()
			
	def PonNombre( self ):
		Cusuario = self.GetControl(ID_TEXTCTRLLOGINUSUARIO)
		usuario = str(Cusuario.GetValue())
		if usuario and not usuario.isdigit():
			if not str(usuario).isupper():
				usuario = str(usuario).upper()
				Cusuario.SetValue(usuario)
				lastposition = Cusuario.GetLastPosition()
				Cusuario.SetInsertionPoint(lastposition)
		else:
			Cusuario.SetValue("")
		
		try:
			if usuario != "":
				self.parent.SetStatusText(u"Bienvenido ( %s ), %s" % (usuario, self.dUsuarios[usuario]))
				if SMARTICS:
					wx.FindWindowById(wx.ID_OK).Enable(True)
			else:
				self.parent.SetStatusText("")
		except:
			self.parent.SetStatusText("")

	def OnClose(self, event):
		self.Destroy()

	def OnOk(self, event):
		self.EndOfDialog()
	
	def OnTextEnter(self, event):
		self.EndOfDialog()
																	
	def OnCancel(self, event):
		self.Destroy()
		
	def Hash(self, pwd):
		#m = md5.new()
		#m.update(pwd)
		return md5(pwd).hexdigest().upper()
	
	usuario = ""
	idusuario = None

class GixCatalogoGrid(GixCatalogoGridBase):
	pass

def main(argv=None):
	
	global g_cl_user
	global g_cl_password
	global g_si_pruebas
	#global log_queue
	g_cl_user = None
	g_cl_password = None
	g_si_pruebas = ""
	#log_queue = []
	if argv is None:
		argv = sys.argv
		
	logging.basicConfig(filename = LOG_FILENAME, level = logging.DEBUG, )		
	
	try:
		try:
			opts, args = getopt.getopt(argv[1:], "hu:p:v", ["help","user","password"])
		except getopt.error, msg:
			raise Usage(msg)
		
		for o, a in opts:
			if o in "-h":
				print "No hay nada que explicar por el momento..."
				sys.exit()
				
			if o in "-u":
				
				g_cl_user = a
				

			if o in "-p":
				
				g_cl_password = a
				
				
			if o in "-v":
				print "no hay verbose en realidad..."
				
		# more code, unchanged
		f_rpyc = False
		try:
			f = open("forcerpyc","r")
			f_rpyc = True
		except:
			pass
		
		f_host = False
		try:
			f = open("forcehost","r")
			f_host = True
		except:
			pass

		f_port = False
		try:
			f = open("forceport","r")
			f_port = True
		except:
			pass
		
		f_local = False
		try:
			f = open("forcelocal","r")
			f_local = True
		except:
			pass
		
		f_test = False
		try:
			f = open("forcetest","r")
			f_test = True
			g_si_pruebas = "PRUEBAS"
		except:
			pass
		
		f_instance = False
		try:
			f = open("forceinstance","r")
			f_instance = True
		except:
			pass
		
		f_web = False
		try:
			f = open("forceweb", "r")
			f_web = True
		except:
			pass
		
		smartics = False
		try:
			f = open("depphpl0y.py", "r")
			smartics = True
		except:
			pass
		
		f_webserver = False
		try:
			f = open("forcewebserver", "r")
			f_webserver = True
		except:
			pass
		
		f_queryonly = False
		try:
			f = open("forcequeryonly", "r")
			f_queryonly = True
		except:
			pass
		
		f_gcmex = False
		try:
			f = open("forcegcmex", "r")
			f_gcmex = True
		except:
			pass

		f_scroll = False
		try:
			f = open("forcescroll", "r")
			f_scroll = True
		except:
			pass

		#if conectar_con_server(f_rpyc, f_host, f_port, f_local, f_test, f_instance, f_web, smartics):
		if gixmodel.inicializacion(logging, f_rpyc, f_host, f_port, f_local, f_test, f_instance, f_web, f_gcmex,
		                           f_scroll, smartics, f_queryonly):
			global mcache
			global jsonweb
	
			global r_cn; global r_cngcmex
			global auto_ansi2oem
			global engine2
			global FORCEHOST; global FORCELOCAL; global FORCEPORT; global FORCEINSTANCE
			global FORCERPYC; global FORCEWEB; global FORCETEST; global FORCEGCMEX; global FORCESCROLL; global SMARTICS
			global FORCEWEBSERVER; global FORCEQUERYONLY
			mcache, engine2, r_cn, r_cngcmex, jsonweb, auto_ansi2oem, FORCEHOST, FORCELOCAL, FORCEPORT, FORCEINSTANCE, FORCERPYC, \
			FORCEWEB, FORCETEST, FORCEGCMEX, FORCESCROLL, SMARTICS, FORCEQUERYONLY = gixmodel.globales()
			asignaForce(FORCEHOST, FORCELOCAL, FORCEPORT, FORCEINSTANCE, FORCERPYC, FORCEWEB, FORCETEST, FORCEGCMEX, FORCESCROLL, SMARTICS, FORCEQUERYONLY)	
			asignaJsonweb(jsonweb)
			asignaConexion(r_cn)
			asignaConexionGcmex(r_cngcmex)
			asignaEngine(engine2)
			FORCEWEBSERVER = f_webserver
			FORCEQUERYONLY = f_queryonly
			
			app = GixApp(True, "rastreo.txt")
			if wx.Platform == '__WXMSW__':
				try:
					locale = wx.Locale()
					if locale.Init(wx.LANGUAGE_DEFAULT , wx.LOCALE_LOAD_DEFAULT | wx.LOCALE_CONV_ENCODING ):
						locale.AddCatalog("es")
						locale.AddCatalogLookupPathPrefix(".")
				except:
					pass
			app.MainLoop()
			#try:
				#r_socket.close()
			#except:
				#pass
		
		else:
			app = GixAppError(True)
			app.MainLoop()
	except Usage, err:
		print >>sys.stderr, err.msg
		print >>sys.stderr, "for help use --help"
		return 2

if __name__ == "__main__":
	sys.exit(main())
	
